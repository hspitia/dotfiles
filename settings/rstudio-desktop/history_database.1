1521818384501:unique(inData[inData$Allele == allele, "Coverage"])
1521818508340:# Load data
1521818508341:inData <- read.delim(input.file)
1521818508782:# colnames(inData) <- c("Allele", "Position", "k-mer Depth", "Weighted k-mer Depth")
1521818508783:colnames(inData) <- c("N", "Locus", "Allele", "Position", "kmerDepth",
1521818508784:"Norm. count", "Coverage", "MeanKmerDepth")
1521818509532:# inData$BestAllele <- paste0(inData$N, " - ", inData$Allele)
1521818509533:head(inData)
1521818510331:inData <- arrange(inData, Locus, N)
1521818510958:inData <- inData %>%
1521818510959:mutate(Allele = factor(Allele, levels = unique(inData$Allele)))
1521818511432:# ==============================================================
1521818511432:data.to.plot <- inData
1521818512326:alleles    <- unique(inData$Allele)
1521818512702:loci       <- as.character(unique(inData$Locus))
1521818512944:lociLabels <- c()
1521818513175:name.x     <- c()
1521818513412:name.y     <- c()
1521818513608:cov.x      <- c()
1521818513817:cov.y      <- c()
1521818514075:covs       <- c()
1521818514658:meanDepths <- c()
1521818515121:for (i in loci) {
1521818515122:lociLabels <- c(lociLabels, rep(i, 3))
1521818515123:}
1521818538382:for (allele in alleles) {
1521818538383:maxPos     <- max(inData[inData$Allele == allele, "Position"])
1521818538383:maxDepth   <- max(inData[inData$Allele == allele, "kmerDepth"])
1521818538384:name.x     <- c(name.x, (maxPos / 2))
1521818538384:name.y     <- c(name.y, (maxDepth * 0.2))
1521818538385:cov.x      <- c(cov.x, maxPos * 0.1)
1521818538385:cov.y      <- c(cov.y, maxDepth * 0.8)
1521818538386:covs       <- c(covs, unique(inData[inData$Allele == allele, "Coverage"]))
1521818538387:meanDepths <- c(meanDepths, unique(inData[inData$Allele == allele, "MeanKmerDepth"]))
1521818538387:}
1521818733408:data.to.plot <- inData
1521818733410:alleles     <- unique(inData$Allele)
1521818733412:loci        <- as.character(unique(inData$Locus))
1521818733413:lociLabels  <- c()
1521818733413:name.x      <- c()
1521818733414:name.y      <- c()
1521818733415:cov.x       <- c()
1521818733415:cov.y       <- c()
1521818733416:covs        <- c()
1521818733417:meanDepths  <- c()
1521818733418:meadDepth.x <- c()
1521818733418:meadDepth.y <- c()
1521818733419:for (i in loci) {
1521818733420:lociLabels <- c(lociLabels, rep(i, 3))
1521818733420:}
1521818733425:for (allele in alleles) {
1521818733426:maxPos      <- max(inData[inData$Allele == allele, "Position"])
1521818733426:maxDepth    <- max(inData[inData$Allele == allele, "kmerDepth"])
1521818733427:name.x      <- c(name.x, (maxPos / 2))
1521818733427:name.y      <- c(name.y, (maxDepth * 0.2))
1521818733427:cov.x       <- c(cov.x, maxPos * 0.1)
1521818733428:cov.y       <- c(cov.y, maxDepth * 0.8)
1521818733428:covs        <- c(covs, unique(inData[inData$Allele == allele, "Coverage"]))
1521818733429:meanDepths  <- c(meanDepths, unique(inData[inData$Allele == allele, "MeanKmerDepth"]))
1521818733429:meadDepth.x <- c(meadDepth.x, cov.x)
1521818733430:meadDepth.y <- c(meadDepth.y, maxDepth * 0.7)
1521818733431:}
1521818800391:data.to.plot <- inData
1521818800393:alleles     <- unique(inData$Allele)
1521818800394:loci        <- as.character(unique(inData$Locus))
1521818800396:lociLabels  <- c()
1521818800397:name.x      <- c()
1521818800398:name.y      <- c()
1521818800399:cov.x       <- c()
1521818800400:cov.y       <- c()
1521818800401:covs        <- c()
1521818800402:meanDepths  <- c()
1521818800403:meanDepth.x <- c()
1521818800404:meanDepth.y <- c()
1521818800405:for (i in loci) {
1521818800405:lociLabels <- c(lociLabels, rep(i, 3))
1521818800406:}
1521818800412:for (allele in alleles) {
1521818800413:maxPos      <- max(inData[inData$Allele == allele, "Position"])
1521818800413:maxDepth    <- max(inData[inData$Allele == allele, "kmerDepth"])
1521818800414:name.x      <- c(name.x, (maxPos / 2))
1521818800414:name.y      <- c(name.y, (maxDepth * 0.2))
1521818800415:cov.x       <- c(cov.x, maxPos * 0.1)
1521818800415:cov.y       <- c(cov.y, maxDepth * 0.8)
1521818800416:covs        <- c(covs, unique(inData[inData$Allele == allele, "Coverage"]))
1521818800416:meanDepths  <- c(meanDepths, unique(inData[inData$Allele == allele, "MeanKmerDepth"]))
1521818800417:meanDepth.x <- c(meanDepth.x, cov.x)
1521818800418:meanDepth.y <- c(meanDepth.y, maxDepth * 0.7)
1521818800418:}
1521818800496:# (labelsData <- data.frame(Allele = alleles, name.x = x, name.y = y))
1521818800497:# data.to.plot <- left_join(data.to.plot, labelsData)
1521818800497:(labelsData <- data.frame(Allele = alleles,
1521818800497:name.x = name.x,
1521818800498:name.y = name.y,
1521818800498:covs = covs,
1521818800499:cov.x = cov.x,
1521818800499:cov.y = cov.y,
1521818800500:meanDepths = meanDepths,
1521818800500:meanDepth.x = meanDepth.x,
1521818800501:meanDepth.y = meanDepth.y,
1521818800501:N = rep(c(1,2,3),7),
1521818800502:Locus = lociLabels))
1521818876588:(labelsData <- data.frame(Allele = alleles,
1521818876589:name.x = name.x,
1521818876590:name.y = name.y,
1521818876590:cov = covs,
1521818876591:cov.x = cov.x,
1521818876592:cov.y = cov.y,
1521818876593:meanDepth = meanDepths,
1521818876593:meanDepth.x = meanDepth.x,
1521818876594:meanDepth.y = meanDepth.y,
1521818876595:N = rep(c(1,2,3),7),
1521818876596:Locus = lociLabels))
1521818890507:data.to.plot <- inData
1521818890510:alleles     <- unique(inData$Allele)
1521818890511:loci        <- as.character(unique(inData$Locus))
1521818890513:lociLabels  <- c()
1521818890514:name.x      <- c()
1521818890515:name.y      <- c()
1521818890516:cov.x       <- c()
1521818890517:cov.y       <- c()
1521818890518:covs        <- c()
1521818890519:meanDepths  <- c()
1521818890520:meanDepth.x <- c()
1521818890520:meanDepth.y <- c()
1521818890521:for (i in loci) {
1521818890521:lociLabels <- c(lociLabels, rep(i, 3))
1521818890522:}
1521818890526:for (allele in alleles) {
1521818890526:maxPos      <- max(inData[inData$Allele == allele, "Position"])
1521818890526:maxDepth    <- max(inData[inData$Allele == allele, "kmerDepth"])
1521818890527:name.x      <- c(name.x, (maxPos / 2))
1521818890527:name.y      <- c(name.y, (maxDepth * 0.2))
1521818890528:cov.x       <- c(cov.x, maxPos * 0.1)
1521818890528:cov.y       <- c(cov.y, maxDepth * 0.8)
1521818890529:covs        <- c(covs, unique(inData[inData$Allele == allele, "Coverage"]))
1521818890529:meanDepths  <- c(meanDepths, unique(inData[inData$Allele == allele, "MeanKmerDepth"]))
1521818890529:meanDepth.x <- c(meanDepth.x, cov.x)
1521818890530:meanDepth.y <- c(meanDepth.y, maxDepth * 0.7)
1521818890531:}
1521818890605:# (labelsData <- data.frame(Allele = alleles, name.x = x, name.y = y))
1521818890605:# data.to.plot <- left_join(data.to.plot, labelsData)
1521818890605:(labelsData <- data.frame(Allele = alleles,
1521818890606:name.x = name.x,
1521818890606:name.y = name.y,
1521818890606:cov = covs,
1521818890606:cov.x = cov.x,
1521818890607:cov.y = cov.y,
1521818890607:meanDepth = meanDepths,
1521818890607:meanDepth.x = meanDepth.x,
1521818890608:meanDepth.y = meanDepth.y,
1521818890608:N = rep(c(1,2,3),7),
1521818890608:Locus = lociLabels))
1521818939790:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521818939791:y = kmerDepth),
1521818939792:size = 0.2)
1521818939794:d.plot <- d.plot + geom_area(alpha = 0.6,
1521818939794:aes(color = Allele,
1521818939795:# alpha = N,
1521818939796:fill = Allele
1521818939797:))
1521818939800:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521818939801:# d.plot <- d.plot + scale_color_hue(l = 40)
1521818939801:d.plot <- d.plot + geom_text(data = labelsData,
1521818939802:aes(x = name.x,
1521818939802:y = name.y,
1521818939802:label = Allele),
1521818939803:color = "#333333")
1521818939806:d.plot <- d.plot + geom_text(data = labelsData,
1521818939807:aes(x = cov.x,
1521818939807:y = cov.y,
1521818939808:label = cov),
1521818939808:color = "#333333")
1521818939975:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521818939976:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521818939977:expand = c(0, 2.0))
1521818939978:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521818939978:#                                     expand = c(0, 2))
1521818939979:# if (colourCount > 9) {
1521818939979:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521818939979:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521818939980:# } else {
1521818939980:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521818939980:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521818939981:# }
1521818939981:d.plot <- d.plot + theme_bw()
1521818939985:d.plot <- d.plot + labs(title = "K-mer Depth",
1521818939985:subtitle = basename(input.file),
1521818939985:x     = "Position along sequence (bp)",
1521818939986:y     = "k-mer Depth")
1521818939987:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521818939987:# color = FALSE)
1521818939987:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521818939988:plot.subtitle = element_text(hjust = 0.5),
1521818939988:axis.text.x = element_text(angle = 50,
1521818939988:vjust = 1,
1521818939988:hjust = 1,
1521818939989:size = 7))
1521818939991:d.plot
1521819066040:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521819066041:y = kmerDepth),
1521819066042:size = 0.2)
1521819066044:d.plot <- d.plot + geom_area(alpha = 0.6,
1521819066045:aes(color = Allele,
1521819066045:# alpha = N,
1521819066046:fill = Allele
1521819066046:))
1521819066050:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521819066051:# d.plot <- d.plot + scale_color_hue(l = 40)
1521819066051:d.plot <- d.plot + geom_text(data = labelsData,
1521819066052:aes(x = name.x,
1521819066052:y = name.y,
1521819066053:label = Allele),
1521819066053:color = "#333333")
1521819066057:d.plot <- d.plot + geom_text(data = labelsData,
1521819066058:size = 7,
1521819066058:aes(x = max.x * 0.2,
1521819066059:y = max.x * 0.9,
1521819066060:label = cov),
1521819066060:color = "#333333")
1521819066064:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521819066066:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521819066066:expand = c(0, 2.0))
1521819066068:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521819066068:#                                     expand = c(0, 2))
1521819066069:# if (colourCount > 9) {
1521819066069:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521819066070:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521819066070:# } else {
1521819066071:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521819066071:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521819066071:# }
1521819066072:d.plot <- d.plot + theme_bw()
1521819066077:d.plot <- d.plot + labs(title = "K-mer Depth",
1521819066078:subtitle = basename(input.file),
1521819066078:x     = "Position along sequence (bp)",
1521819066079:y     = "k-mer Depth")
1521819066081:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521819066081:# color = FALSE)
1521819066082:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521819066082:plot.subtitle = element_text(hjust = 0.5),
1521819066082:axis.text.x = element_text(angle = 50,
1521819066083:vjust = 1,
1521819066083:hjust = 1,
1521819066084:size = 7))
1521819066087:d.plot
1521819192916:data.to.plot <- inData
1521819192917:alleles     <- unique(inData$Allele)
1521819192919:loci        <- as.character(unique(inData$Locus))
1521819192920:lociLabels  <- c()
1521819192921:name.x      <- c()
1521819192923:name.y      <- c()
1521819192923:cov.x       <- c()
1521819192924:cov.y       <- c()
1521819192925:covs        <- c()
1521819192926:meanDepths  <- c()
1521819192926:meanDepth.x <- c()
1521819192927:meanDepth.y <- c()
1521819192928:for (i in loci) {
1521819192928:lociLabels <- c(lociLabels, rep(i, 3))
1521819192929:}
1521819192934:for (allele in alleles) {
1521819192935:maxPos      <- max(inData[inData$Allele == allele, "Position"])
1521819192935:maxDepth    <- max(inData[inData$Allele == allele, "kmerDepth"])
1521819192936:name.x      <- c(name.x, (maxPos / 2))
1521819192936:name.y      <- c(name.y, (maxDepth * 0.2))
1521819192936:cov.x       <- c(cov.x, maxPos * 0.1)
1521819192937:cov.y       <- c(cov.y, maxDepth * 0.8)
1521819192937:covs        <- c(covs, unique(inData[inData$Allele == allele, "Coverage"]))
1521819192938:meanDepths  <- c(meanDepths, unique(inData[inData$Allele == allele, "MeanKmerDepth"]))
1521819192938:meanDepth.x <- c(meanDepth.x, cov.x)
1521819192939:meanDepth.y <- c(meanDepth.y, maxDepth * 0.7)
1521819192940:}
1521819192999:# (labelsData <- data.frame(Allele = alleles, name.x = x, name.y = y))
1521819192999:# data.to.plot <- left_join(data.to.plot, labelsData)
1521819192999:(labelsData <- data.frame(Allele = alleles,
1521819193000:name.x = name.x,
1521819193000:name.y = name.y,
1521819193000:cov = covs,
1521819193001:cov.x = cov.x,
1521819193001:cov.y = cov.y,
1521819193002:meanDepth = meanDepths,
1521819193002:meanDepth.x = meanDepth.x,
1521819193002:meanDepth.y = meanDepth.y,
1521819193003:N = rep(c(1,2,3),7),
1521819193003:Locus = lociLabels))
1521819193039:# data.to.plot <- inData[inData$n_best_prof == prof, ]
1521819193039:# data.to.plot <- inData[inData$Locus == "abcZ", ]
1521819193039:# data.to.plot <- filter(inData, Locus == "abcZ", Allele == "abcZ_2")
1521819193040:# data.to.plot <- longData
1521819193040:# n.Alleles    <- length(unique(data.to.plot$Allele))
1521819193040:n.Alleles    <- length(unique(data.to.plot$Locus))
1521819193041:h.factor     <- 1.2
1521819193042:if (n.Alleles == 1)
1521819193042:h.factor <- 1.8
1521819193043:height       <- n.Alleles * h.factor
1521819193043:width        <- 6
1521819193044:# depth.plot   <- plotDepths(data.to.plot)
1521819193044:colourCount = length(unique(data.to.plot$Allele))
1521819193045:getPalette = colorRampPalette(brewer.pal(7, "Set1"))
1521819193046:max.x <- max(data.to.plot$Position)
1521819193047:max.y <- max(data.to.plot$Depth)
1521819193048:x.limits <- seq(0, max.x, 100)
1521819193048:y.limits <- seq(0, max.y, 20)
1521819193051:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521819193051:y = kmerDepth),
1521819193051:size = 0.2)
1521819193052:d.plot <- d.plot + geom_area(alpha = 0.6,
1521819193053:aes(color = Allele,
1521819193053:# alpha = N,
1521819193053:fill = Allele
1521819193054:))
1521819193057:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521819193057:# d.plot <- d.plot + scale_color_hue(l = 40)
1521819193057:d.plot <- d.plot + geom_text(data = labelsData,
1521819193058:aes(x = name.x,
1521819193058:y = name.y,
1521819193058:label = Allele),
1521819193058:color = "#333333")
1521819193061:d.plot <- d.plot + geom_text(data = labelsData,
1521819193061:size = 3,
1521819193061:aes(x = max.x * 0.2,
1521819193062:y = max.y * 0.9,
1521819193062:label = cov),
1521819193062:color = "#333333")
1521819193065:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521819193066:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521819193066:expand = c(0, 2.0))
1521819193067:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521819193067:#                                     expand = c(0, 2))
1521819193068:# if (colourCount > 9) {
1521819193068:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521819193068:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521819193069:# } else {
1521819193069:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521819193069:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521819193069:# }
1521819193070:d.plot <- d.plot + theme_bw()
1521819193074:d.plot <- d.plot + labs(title = "K-mer Depth",
1521819193074:subtitle = basename(input.file),
1521819193074:x     = "Position along sequence (bp)",
1521819193075:y     = "k-mer Depth")
1521819193076:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521819193076:# color = FALSE)
1521819193076:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521819193077:plot.subtitle = element_text(hjust = 0.5),
1521819193077:axis.text.x = element_text(angle = 50,
1521819193077:vjust = 1,
1521819193078:hjust = 1,
1521819193078:size = 7))
1521819203730:d.plot
1521819240259:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521819240260:y = kmerDepth),
1521819240261:size = 0.2)
1521819240262:d.plot <- d.plot + geom_area(alpha = 0.6,
1521819240263:aes(color = Allele,
1521819240264:# alpha = N,
1521819240264:fill = Allele
1521819240265:))
1521819240269:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521819240270:# d.plot <- d.plot + scale_color_hue(l = 40)
1521819240270:d.plot <- d.plot + geom_text(data = labelsData,
1521819240270:aes(x = name.x,
1521819240271:y = name.y,
1521819240271:label = Allele),
1521819240272:color = "#333333")
1521819240276:d.plot <- d.plot + geom_text(data = labelsData,
1521819240276:size = 3,
1521819240277:aes(x = max.x * 0.2,
1521819240277:y = max.y * 0.9,
1521819240278:label = cov),
1521819240278:color = "#333333")
1521819240282:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521819240284:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521819240284:expand = c(0, 2.0))
1521819240286:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521819240286:#                                     expand = c(0, 2))
1521819240287:# if (colourCount > 9) {
1521819240287:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521819240288:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521819240288:# } else {
1521819240289:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521819240289:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521819240289:# }
1521819240290:d.plot <- d.plot + theme_bw()
1521819240296:d.plot <- d.plot + labs(title = "K-mer Depth",
1521819240296:subtitle = basename(input.file),
1521819240297:x     = "Position along sequence (bp)",
1521819240297:y     = "k-mer Depth")
1521819240299:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521819240299:# color = FALSE)
1521819240300:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521819240300:plot.subtitle = element_text(hjust = 0.5),
1521819240300:axis.text.x = element_text(angle = 50,
1521819240301:vjust = 1,
1521819240301:hjust = 1,
1521819240302:size = 7))
1521819240305:d.plot
1521819292976:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521819292977:y = kmerDepth),
1521819292977:size = 0.2)
1521819292979:d.plot <- d.plot + geom_area(alpha = 0.6,
1521819292980:aes(color = Allele,
1521819292980:# alpha = N,
1521819292981:fill = Allele
1521819292981:))
1521819292985:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521819292985:# d.plot <- d.plot + scale_color_hue(l = 40)
1521819292986:d.plot <- d.plot + geom_text(data = labelsData,
1521819292986:aes(x = name.x,
1521819292986:y = name.y,
1521819292987:label = Allele),
1521819292987:color = "#333333")
1521819292990:d.plot <- d.plot + geom_text(data = labelsData,
1521819292991:size = 3,
1521819292991:aes(x = max.x * 0.2,
1521819292992:y = cov.y,
1521819292992:label = cov),
1521819292993:color = "#333333")
1521819292996:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521819292997:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521819292998:expand = c(0, 2.0))
1521819292999:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521819292999:#                                     expand = c(0, 2))
1521819293000:# if (colourCount > 9) {
1521819293000:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521819293001:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521819293001:# } else {
1521819293002:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521819293002:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521819293002:# }
1521819293003:d.plot <- d.plot + theme_bw()
1521819293008:d.plot <- d.plot + labs(title = "K-mer Depth",
1521819293008:subtitle = basename(input.file),
1521819293009:x     = "Position along sequence (bp)",
1521819293009:y     = "k-mer Depth")
1521819293011:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521819293011:# color = FALSE)
1521819293012:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521819293012:plot.subtitle = element_text(hjust = 0.5),
1521819293012:axis.text.x = element_text(angle = 50,
1521819293013:vjust = 1,
1521819293013:hjust = 1,
1521819293013:size = 7))
1521819293021:d.plot
1521819326923:labelsData
1521819437526:labelsData
1521819447729:data.to.plot <- inData
1521819447731:alleles     <- unique(inData$Allele)
1521819447733:loci        <- as.character(unique(inData$Locus))
1521819447735:lociLabels  <- c()
1521819447736:name.x      <- c()
1521819447737:name.y      <- c()
1521819447738:cov.x       <- c()
1521819447739:cov.y       <- c()
1521819447740:covs        <- c()
1521819447742:meanDepths  <- c()
1521819447743:meanDepth.x <- c()
1521819447744:meanDepth.y <- c()
1521819447744:for (i in loci) {
1521819447745:lociLabels <- c(lociLabels, rep(i, 3))
1521819447745:}
1521819447751:for (allele in alleles) {
1521819447752:maxPos      <- max(inData[inData$Allele == allele, "Position"])
1521819447752:maxDepth    <- max(inData[inData$Allele == allele, "kmerDepth"])
1521819447753:name.x      <- c(name.x, (maxPos / 2))
1521819447753:name.y      <- c(name.y, (maxDepth * 0.2))
1521819447754:cov.x       <- c(cov.x, maxPos * 0.1)
1521819447754:cov.y       <- c(cov.y, maxDepth * 0.8)
1521819447755:covs        <- c(covs, unique(inData[inData$Allele == allele, "Coverage"]))
1521819447755:meanDepths  <- c(meanDepths, unique(inData[inData$Allele == allele, "MeanKmerDepth"]))
1521819447756:meanDepth.x <- c(meanDepth.x, cov.x)
1521819447756:meanDepth.y <- c(meanDepth.y, maxDepth * 0.7)
1521819447757:}
1521819447822:# (labelsData <- data.frame(Allele = alleles, name.x = x, name.y = y))
1521819447822:# data.to.plot <- left_join(data.to.plot, labelsData)
1521819447823:(labelsData <- data.frame(Allele = alleles,
1521819447823:name.x = name.x,
1521819447824:name.y = name.y,
1521819447824:cov = covs,
1521819447824:cov.x = cov.x,
1521819447825:cov.y = cov.y,
1521819447825:meanDepth = meanDepths,
1521819447825:meanDepth.x = meanDepth.x,
1521819447826:meanDepth.y = meanDepth.y,
1521819447826:N = rep(c(1,2,3),7),
1521819447826:Locus = lociLabels))
1521819447864:# data.to.plot <- inData[inData$n_best_prof == prof, ]
1521819447865:# data.to.plot <- inData[inData$Locus == "abcZ", ]
1521819447865:# data.to.plot <- filter(inData, Locus == "abcZ", Allele == "abcZ_2")
1521819447865:# data.to.plot <- longData
1521819447866:# n.Alleles    <- length(unique(data.to.plot$Allele))
1521819447866:n.Alleles    <- length(unique(data.to.plot$Locus))
1521819447867:h.factor     <- 1.2
1521819447867:if (n.Alleles == 1)
1521819447868:h.factor <- 1.8
1521819447868:height       <- n.Alleles * h.factor
1521819447869:width        <- 6
1521819447869:# depth.plot   <- plotDepths(data.to.plot)
1521819447870:colourCount = length(unique(data.to.plot$Allele))
1521819447870:getPalette = colorRampPalette(brewer.pal(7, "Set1"))
1521819447872:max.x <- max(data.to.plot$Position)
1521819447872:max.y <- max(data.to.plot$Depth)
1521819447873:x.limits <- seq(0, max.x, 100)
1521819447874:y.limits <- seq(0, max.y, 20)
1521819447875:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521819447875:y = kmerDepth),
1521819447876:size = 0.2)
1521819447877:d.plot <- d.plot + geom_area(alpha = 0.6,
1521819447877:aes(color = Allele,
1521819447877:# alpha = N,
1521819447878:fill = Allele
1521819447878:))
1521819447880:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521819447881:# d.plot <- d.plot + scale_color_hue(l = 40)
1521819447881:d.plot <- d.plot + geom_text(data = labelsData,
1521819447881:aes(x = name.x,
1521819447882:y = name.y,
1521819447882:label = Allele),
1521819447882:color = "#333333")
1521819447885:# d.plot <- d.plot + geom_text(data = labelsData,
1521819447885:#                              size = 3,
1521819447885:#                              aes(x = max.x * 0.2,
1521819447886:#                                  y = cov.y,
1521819447886:#                                  label = cov),
1521819447886:#                              color = "#333333")
1521819447886:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521819447888:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521819447888:expand = c(0, 2.0))
1521819447889:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521819447889:#                                     expand = c(0, 2))
1521819447890:# if (colourCount > 9) {
1521819447890:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521819447890:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521819447891:# } else {
1521819447891:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521819447891:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521819447891:# }
1521819447892:d.plot <- d.plot + theme_bw()
1521819447896:d.plot <- d.plot + labs(title = "K-mer Depth",
1521819447896:subtitle = basename(input.file),
1521819447897:x     = "Position along sequence (bp)",
1521819447897:y     = "k-mer Depth")
1521819447898:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521819447898:# color = FALSE)
1521819447899:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521819447899:plot.subtitle = element_text(hjust = 0.5),
1521819447899:axis.text.x = element_text(angle = 50,
1521819447900:vjust = 1,
1521819447900:hjust = 1,
1521819447900:size = 7))
1521819447903:d.plot
1521819478104:data.to.plot <- inData
1521819478106:alleles     <- unique(inData$Allele)
1521819478107:loci        <- as.character(unique(inData$Locus))
1521819478109:lociLabels  <- c()
1521819478110:name.x      <- c()
1521819478111:name.y      <- c()
1521819478112:cov.x       <- c()
1521819478113:cov.y       <- c()
1521819478115:covs        <- c()
1521819478116:meanDepths  <- c()
1521819478117:meanDepth.x <- c()
1521819478118:meanDepth.y <- c()
1521819478119:for (i in loci) {
1521819478119:lociLabels <- c(lociLabels, rep(i, 3))
1521819478120:}
1521819478126:for (allele in alleles) {
1521819478127:maxPos      <- max(inData[inData$Allele == allele, "Position"])
1521819478127:maxDepth    <- max(inData[inData$Allele == allele, "kmerDepth"])
1521819478128:name.x      <- c(name.x, (maxPos / 2))
1521819478129:name.y      <- c(name.y, (maxDepth * 0.2))
1521819478129:cov.x       <- c(cov.x, maxPos * 0.1)
1521819478130:cov.y       <- c(cov.y, maxDepth * 0.8)
1521819478130:covs        <- c(covs, unique(inData[inData$Allele == allele, "Coverage"]))
1521819478131:meanDepths  <- c(meanDepths, unique(inData[inData$Allele == allele, "MeanKmerDepth"]))
1521819478131:meanDepth.x <- c(meanDepth.x, cov.x)
1521819478132:meanDepth.y <- c(meanDepth.y, maxDepth * 0.7)
1521819478132:}
1521819478208:# (labelsData <- data.frame(Allele = alleles, name.x = x, name.y = y))
1521819478208:# data.to.plot <- left_join(data.to.plot, labelsData)
1521819478209:(labelsData <- data.frame(Allele = alleles,
1521819478209:name.x = name.x,
1521819478210:name.y = name.y,
1521819478210:# cov = covs,
1521819478211:# cov.x = cov.x,
1521819478211:# cov.y = cov.y,
1521819478212:# meanDepth = meanDepths,
1521819478212:# meanDepth.x = meanDepth.x,
1521819478212:# meanDepth.y = meanDepth.y,
1521819478212:N = rep(c(1,2,3),7),
1521819478213:Locus = lociLabels))
1521819478218:# data.to.plot <- inData[inData$n_best_prof == prof, ]
1521819478219:# data.to.plot <- inData[inData$Locus == "abcZ", ]
1521819478219:# data.to.plot <- filter(inData, Locus == "abcZ", Allele == "abcZ_2")
1521819478219:# data.to.plot <- longData
1521819478220:# n.Alleles    <- length(unique(data.to.plot$Allele))
1521819478220:n.Alleles    <- length(unique(data.to.plot$Locus))
1521819478221:h.factor     <- 1.2
1521819478221:if (n.Alleles == 1)
1521819478221:h.factor <- 1.8
1521819478222:height       <- n.Alleles * h.factor
1521819478223:width        <- 6
1521819478223:# depth.plot   <- plotDepths(data.to.plot)
1521819478224:colourCount = length(unique(data.to.plot$Allele))
1521819478225:getPalette = colorRampPalette(brewer.pal(7, "Set1"))
1521819478226:max.x <- max(data.to.plot$Position)
1521819478227:max.y <- max(data.to.plot$Depth)
1521819478227:x.limits <- seq(0, max.x, 100)
1521819478228:y.limits <- seq(0, max.y, 20)
1521819478229:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521819478230:y = kmerDepth),
1521819478230:size = 0.2)
1521819478231:d.plot <- d.plot + geom_area(alpha = 0.6,
1521819478231:aes(color = Allele,
1521819478231:# alpha = N,
1521819478232:fill = Allele
1521819478232:))
1521819478234:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521819478235:# d.plot <- d.plot + scale_color_hue(l = 40)
1521819478235:d.plot <- d.plot + geom_text(data = labelsData,
1521819478235:aes(x = name.x,
1521819478236:y = name.y,
1521819478236:label = Allele),
1521819478236:color = "#333333")
1521819478238:# d.plot <- d.plot + geom_text(data = labelsData,
1521819478239:#                              size = 3,
1521819478239:#                              aes(x = max.x * 0.2,
1521819478239:#                                  y = cov.y,
1521819478240:#                                  label = cov),
1521819478240:#                              color = "#333333")
1521819478240:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521819478241:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521819478242:expand = c(0, 2.0))
1521819478242:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521819478243:#                                     expand = c(0, 2))
1521819478243:# if (colourCount > 9) {
1521819478244:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521819478244:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521819478244:# } else {
1521819478244:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521819478245:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521819478245:# }
1521819478245:d.plot <- d.plot + theme_bw()
1521819478249:d.plot <- d.plot + labs(title = "K-mer Depth",
1521819478249:subtitle = basename(input.file),
1521819478250:x     = "Position along sequence (bp)",
1521819478250:y     = "k-mer Depth")
1521819478251:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521819478252:# color = FALSE)
1521819478252:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521819478252:plot.subtitle = element_text(hjust = 0.5),
1521819478252:axis.text.x = element_text(angle = 50,
1521819478253:vjust = 1,
1521819478253:hjust = 1,
1521819478253:size = 7))
1521819478256:d.plot
1521821219364:data.to.plot <- inData
1521821219366:alleles     <- unique(inData$Allele)
1521821219367:loci        <- as.character(unique(inData$Locus))
1521821219368:lociLabels  <- c()
1521821219369:name.x      <- c()
1521821219369:name.y      <- c()
1521821219370:cov.x       <- c()
1521821219371:cov.y       <- c()
1521821219371:covs        <- c()
1521821219372:meanDepths  <- c()
1521821219373:meanDepth.x <- c()
1521821219373:meanDepth.y <- c()
1521821219374:for (i in loci) {
1521821219375:lociLabels <- c(lociLabels, rep(i, 3))
1521821219375:}
1521821219380:for (allele in alleles) {
1521821219380:maxPos      <- max(inData[inData$Allele == allele, "Position"])
1521821219381:maxDepth    <- max(inData[inData$Allele == allele, "kmerDepth"])
1521821219381:name.x      <- c(name.x, (maxPos / 2))
1521821219382:name.y      <- c(name.y, (maxDepth * 0.2))
1521821219382:cov.x       <- c(cov.x, maxPos * 0.1)
1521821219383:cov.y       <- c(cov.y, maxDepth * 0.8)
1521821219383:covs        <- c(covs, unique(inData[inData$Allele == allele, "Coverage"]))
1521821219384:meanDepths  <- c(meanDepths, unique(inData[inData$Allele == allele, "MeanKmerDepth"]))
1521821219384:meanDepth.x <- c(meanDepth.x, cov.x)
1521821219385:meanDepth.y <- c(meanDepth.y, maxDepth * 0.7)
1521821219385:}
1521821219457:# (labelsData <- data.frame(Allele = alleles, name.x = x, name.y = y))
1521821219458:# data.to.plot <- left_join(data.to.plot, labelsData)
1521821219458:(labelsData <- data.frame(Allele = alleles,
1521821219459:name.x = name.x,
1521821219459:name.y = name.y,
1521821219460:# cov = covs,
1521821219460:# cov.x = cov.x,
1521821219460:# cov.y = cov.y,
1521821219461:# meanDepth = meanDepths,
1521821219461:# meanDepth.x = meanDepth.x,
1521821219461:# meanDepth.y = meanDepth.y,
1521821219462:N = rep(c(1,2,3),7),
1521821219462:Locus = lociLabels))
1521821219469:(covsData <- data.frame( cov = covs,
1521821219469:cov.x = cov.x,
1521821219470:cov.y = cov.y,
1521821219470:# meanDepth = meanDepths,
1521821219470:# meanDepth.x = meanDepth.x,
1521821219471:# meanDepth.y = meanDepth.y,
1521821219471:N = rep(c(1,2,3),7),
1521821219471:Locus = lociLabels))
1521821219478:# data.to.plot <- inData[inData$n_best_prof == prof, ]
1521821219478:# data.to.plot <- inData[inData$Locus == "abcZ", ]
1521821219478:# data.to.plot <- filter(inData, Locus == "abcZ", Allele == "abcZ_2")
1521821219478:# data.to.plot <- longData
1521821219479:# n.Alleles    <- length(unique(data.to.plot$Allele))
1521821219479:n.Alleles    <- length(unique(data.to.plot$Locus))
1521821219480:h.factor     <- 1.2
1521821219481:if (n.Alleles == 1)
1521821219481:h.factor <- 1.8
1521821219481:height       <- n.Alleles * h.factor
1521821219482:width        <- 6
1521821219482:# depth.plot   <- plotDepths(data.to.plot)
1521821219483:colourCount = length(unique(data.to.plot$Allele))
1521821219484:getPalette = colorRampPalette(brewer.pal(7, "Set1"))
1521821219485:max.x <- max(data.to.plot$Position)
1521821219486:max.y <- max(data.to.plot$Depth)
1521821219487:x.limits <- seq(0, max.x, 100)
1521821219487:y.limits <- seq(0, max.y, 20)
1521821219489:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521821219489:y = kmerDepth),
1521821219490:size = 0.2)
1521821219491:d.plot <- d.plot + geom_area(alpha = 0.6,
1521821219491:aes(color = Allele,
1521821219491:# alpha = N,
1521821219492:fill = Allele
1521821219492:))
1521821219495:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521821219495:# d.plot <- d.plot + scale_color_hue(l = 40)
1521821219495:d.plot <- d.plot + geom_text(data = labelsData,
1521821219496:aes(x = name.x,
1521821219496:y = name.y,
1521821219496:label = Allele),
1521821219496:color = "#333333")
1521821219499:d.plot <- d.plot + geom_text(data = covsData,
1521821219499:size = 3,
1521821219500:aes(x = max.x * 0.2,
1521821219500:y = cov.y,
1521821219500:label = cov),
1521821219501:color = "#333333")
1521821219503:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521821219504:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521821219505:expand = c(0, 2.0))
1521821219506:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521821219506:#                                     expand = c(0, 2))
1521821219507:# if (colourCount > 9) {
1521821219507:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521821219507:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521821219507:# } else {
1521821219508:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521821219508:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521821219508:# }
1521821219509:d.plot <- d.plot + theme_bw()
1521821219513:d.plot <- d.plot + labs(title = "K-mer Depth",
1521821219513:subtitle = basename(input.file),
1521821219513:x     = "Position along sequence (bp)",
1521821219514:y     = "k-mer Depth")
1521821219515:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521821219515:# color = FALSE)
1521821219515:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521821219516:plot.subtitle = element_text(hjust = 0.5),
1521821219516:axis.text.x = element_text(angle = 50,
1521821219516:vjust = 1,
1521821219517:hjust = 1,
1521821219517:size = 7))
1521821219519:d.plot
1521821321547:(covsData <- data.frame(cov = paste0("cov = ", covs, "%"),
1521821321547:cov.x = cov.x, cov.y = cov.y,
1521821321548:N = rep(c(1,2,3),7),
1521821321548:Locus = lociLabels))
1521821380369:(covsData <- data.frame(cov = paste0("cov = ", format(round(covs, 2), nsmall = 2), "%"),
1521821380370:cov.x = cov.x, cov.y = cov.y,
1521821380372:N = rep(c(1,2,3),7),
1521821380373:Locus = lociLabels))
1521821388435:(covsData <- data.frame(cov = paste0("cov = ", format(round(covs, 1), nsmall = 2), "%"),
1521821388436:cov.x = cov.x, cov.y = cov.y,
1521821388438:N = rep(c(1,2,3),7),
1521821388439:Locus = lociLabels))
1521821393524:(covsData <- data.frame(cov = paste0("cov = ", format(round(covs, 1), nsmall = 1), "%"),
1521821393525:cov.x = cov.x, cov.y = cov.y,
1521821393526:N = rep(c(1,2,3),7),
1521821393526:Locus = lociLabels))
1521821405955:# data.to.plot <- inData[inData$n_best_prof == prof, ]
1521821405956:# data.to.plot <- inData[inData$Locus == "abcZ", ]
1521821405957:# data.to.plot <- filter(inData, Locus == "abcZ", Allele == "abcZ_2")
1521821405958:# data.to.plot <- longData
1521821405958:# n.Alleles    <- length(unique(data.to.plot$Allele))
1521821405959:n.Alleles    <- length(unique(data.to.plot$Locus))
1521821405961:h.factor     <- 1.2
1521821405962:if (n.Alleles == 1)
1521821405963:h.factor <- 1.8
1521821405964:height       <- n.Alleles * h.factor
1521821405965:width        <- 6
1521821405966:# depth.plot   <- plotDepths(data.to.plot)
1521821405967:colourCount = length(unique(data.to.plot$Allele))
1521821405968:getPalette = colorRampPalette(brewer.pal(7, "Set1"))
1521821405970:max.x <- max(data.to.plot$Position)
1521821405971:max.y <- max(data.to.plot$Depth)
1521821405973:x.limits <- seq(0, max.x, 100)
1521821405974:y.limits <- seq(0, max.y, 20)
1521821405976:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521821405976:y = kmerDepth),
1521821405977:size = 0.2)
1521821405978:d.plot <- d.plot + geom_area(alpha = 0.6,
1521821405979:aes(color = Allele,
1521821405979:# alpha = N,
1521821405980:fill = Allele
1521821405980:))
1521821405984:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521821405984:# d.plot <- d.plot + scale_color_hue(l = 40)
1521821405985:d.plot <- d.plot + geom_text(data = labelsData,
1521821405985:aes(x = name.x,
1521821405986:y = name.y,
1521821405986:label = Allele),
1521821405986:color = "#333333")
1521821405990:d.plot <- d.plot + geom_text(data = covsData,
1521821405991:size = 3,
1521821405991:aes(x = max.x * 0.2,
1521821405992:y = cov.y,
1521821405992:label = cov),
1521821405993:color = "#333333")
1521821405996:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521821405997:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521821405998:expand = c(0, 2.0))
1521821405999:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521821405999:#                                     expand = c(0, 2))
1521821406000:# if (colourCount > 9) {
1521821406001:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521821406001:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521821406001:# } else {
1521821406002:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521821406002:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521821406002:# }
1521821406003:d.plot <- d.plot + theme_bw()
1521821406154:d.plot <- d.plot + labs(title = "K-mer Depth",
1521821406155:subtitle = basename(input.file),
1521821406155:x     = "Position along sequence (bp)",
1521821406155:y     = "k-mer Depth")
1521821406157:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521821406157:# color = FALSE)
1521821406157:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521821406158:plot.subtitle = element_text(hjust = 0.5),
1521821406158:axis.text.x = element_text(angle = 50,
1521821406158:vjust = 1,
1521821406158:hjust = 1,
1521821406159:size = 7))
1521821406161:d.plot
1521821452326:# data.to.plot <- inData[inData$n_best_prof == prof, ]
1521821452326:# data.to.plot <- inData[inData$Locus == "abcZ", ]
1521821452326:# data.to.plot <- filter(inData, Locus == "abcZ", Allele == "abcZ_2")
1521821452327:# data.to.plot <- longData
1521821452327:# n.Alleles    <- length(unique(data.to.plot$Allele))
1521821452327:n.Alleles    <- length(unique(data.to.plot$Locus))
1521821452328:h.factor     <- 1.2
1521821452329:if (n.Alleles == 1)
1521821452329:h.factor <- 1.8
1521821452329:height       <- n.Alleles * h.factor
1521821452330:width        <- 6
1521821452330:# depth.plot   <- plotDepths(data.to.plot)
1521821452331:colourCount = length(unique(data.to.plot$Allele))
1521821452332:getPalette = colorRampPalette(brewer.pal(7, "Set1"))
1521821452333:max.x <- max(data.to.plot$Position)
1521821452334:max.y <- max(data.to.plot$Depth)
1521821452335:x.limits <- seq(0, max.x, 100)
1521821452335:y.limits <- seq(0, max.y, 20)
1521821452337:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521821452337:y = kmerDepth),
1521821452338:size = 0.2)
1521821452339:d.plot <- d.plot + geom_area(alpha = 0.6,
1521821452339:aes(color = Allele,
1521821452340:# alpha = N,
1521821452340:fill = Allele
1521821452341:))
1521821452343:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521821452343:# d.plot <- d.plot + scale_color_hue(l = 40)
1521821452344:d.plot <- d.plot + geom_text(data = labelsData,
1521821452344:aes(x = name.x,
1521821452344:y = name.y,
1521821452344:label = Allele),
1521821452345:color = "#333333")
1521821452347:d.plot <- d.plot + geom_text(data = covsData,
1521821452347:size = 3,
1521821452348:aes(x = max.x * 0.1,
1521821452348:y = cov.y,
1521821452348:label = cov),
1521821452348:color = "#333333")
1521821452351:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521821452352:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521821452353:expand = c(0, 2.0))
1521821452354:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521821452354:#                                     expand = c(0, 2))
1521821452355:# if (colourCount > 9) {
1521821452355:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521821452355:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521821452356:# } else {
1521821452356:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521821452356:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521821452356:# }
1521821452357:d.plot <- d.plot + theme_bw()
1521821452361:d.plot <- d.plot + labs(title = "K-mer Depth",
1521821452362:subtitle = basename(input.file),
1521821452362:x     = "Position along sequence (bp)",
1521821452362:y     = "k-mer Depth")
1521821452364:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521821452364:# color = FALSE)
1521821452364:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521821452365:plot.subtitle = element_text(hjust = 0.5),
1521821452365:axis.text.x = element_text(angle = 50,
1521821452365:vjust = 1,
1521821452366:hjust = 1,
1521821452366:size = 7))
1521821452369:d.plot
1521821468305:# data.to.plot <- inData[inData$n_best_prof == prof, ]
1521821468306:# data.to.plot <- inData[inData$Locus == "abcZ", ]
1521821468307:# data.to.plot <- filter(inData, Locus == "abcZ", Allele == "abcZ_2")
1521821468308:# data.to.plot <- longData
1521821468308:# n.Alleles    <- length(unique(data.to.plot$Allele))
1521821468309:n.Alleles    <- length(unique(data.to.plot$Locus))
1521821468311:h.factor     <- 1.2
1521821468312:if (n.Alleles == 1)
1521821468313:h.factor <- 1.8
1521821468314:height       <- n.Alleles * h.factor
1521821468315:width        <- 6
1521821468317:# depth.plot   <- plotDepths(data.to.plot)
1521821468319:colourCount = length(unique(data.to.plot$Allele))
1521821468320:getPalette = colorRampPalette(brewer.pal(7, "Set1"))
1521821468322:max.x <- max(data.to.plot$Position)
1521821468324:max.y <- max(data.to.plot$Depth)
1521821468325:x.limits <- seq(0, max.x, 100)
1521821468326:y.limits <- seq(0, max.y, 20)
1521821468328:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521821468329:y = kmerDepth),
1521821468329:size = 0.2)
1521821468331:d.plot <- d.plot + geom_area(alpha = 0.6,
1521821468331:aes(color = Allele,
1521821468332:# alpha = N,
1521821468332:fill = Allele
1521821468333:))
1521821468337:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521821468338:# d.plot <- d.plot + scale_color_hue(l = 40)
1521821468339:d.plot <- d.plot + geom_text(data = labelsData,
1521821468339:aes(x = name.x,
1521821468340:y = name.y,
1521821468341:label = Allele),
1521821468341:color = "#333333")
1521821468346:d.plot <- d.plot + geom_text(data = covsData,
1521821468346:size = 3,
1521821468347:aes(x = max.x * 0.12,
1521821468347:y = cov.y,
1521821468348:label = cov),
1521821468348:color = "#333333")
1521821468352:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521821468353:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521821468353:expand = c(0, 2.0))
1521821468355:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521821468355:#                                     expand = c(0, 2))
1521821468356:# if (colourCount > 9) {
1521821468357:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521821468357:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521821468358:# } else {
1521821468358:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521821468359:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521821468360:# }
1521821468360:d.plot <- d.plot + theme_bw()
1521821468366:d.plot <- d.plot + labs(title = "K-mer Depth",
1521821468366:subtitle = basename(input.file),
1521821468367:x     = "Position along sequence (bp)",
1521821468367:y     = "k-mer Depth")
1521821468369:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521821468369:# color = FALSE)
1521821468369:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521821468370:plot.subtitle = element_text(hjust = 0.5),
1521821468370:axis.text.x = element_text(angle = 50,
1521821468371:vjust = 1,
1521821468371:hjust = 1,
1521821468371:size = 7))
1521821468375:d.plot
1521821498034:covsData
1521821504263:labelsData
1521821561093:(labelsData <- data.frame(Allele = alleles,
1521821561094:name.x = name.x,
1521821561094:name.y = name.y,
1521821561095:cov = paste0("cov = ", format(round(covs, 1), nsmall = 1), "%"),
1521821561096:cov.x = cov.x, cov.y = cov.y,
1521821561097:# meanDepth = meanDepths,
1521821561097:# meanDepth.x = meanDepth.x,
1521821561098:# meanDepth.y = meanDepth.y,
1521821561099:N = rep(c(1,2,3),7),
1521821561100:Locus = lociLabels))
1521821561117:(covsData <- data.frame(cov = paste0("cov = ", format(round(covs, 1), nsmall = 1), "%"),
1521821561118:cov.x = cov.x, cov.y = cov.y,
1521821561119:N = rep(c(1,2,3),7),
1521821561120:Locus = lociLabels))
1521821561134:# data.to.plot <- inData[inData$n_best_prof == prof, ]
1521821561135:# data.to.plot <- inData[inData$Locus == "abcZ", ]
1521821561135:# data.to.plot <- filter(inData, Locus == "abcZ", Allele == "abcZ_2")
1521821561136:# data.to.plot <- longData
1521821561137:# n.Alleles    <- length(unique(data.to.plot$Allele))
1521821561138:n.Alleles    <- length(unique(data.to.plot$Locus))
1521821561139:h.factor     <- 1.2
1521821561141:if (n.Alleles == 1)
1521821561141:h.factor <- 1.8
1521821561142:height       <- n.Alleles * h.factor
1521821561143:width        <- 6
1521821561145:# depth.plot   <- plotDepths(data.to.plot)
1521821561146:colourCount = length(unique(data.to.plot$Allele))
1521821561148:getPalette = colorRampPalette(brewer.pal(7, "Set1"))
1521821561151:max.x <- max(data.to.plot$Position)
1521821561153:max.y <- max(data.to.plot$Depth)
1521821561154:x.limits <- seq(0, max.x, 100)
1521821561155:y.limits <- seq(0, max.y, 20)
1521821561158:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521821561159:y = kmerDepth),
1521821561160:size = 0.2)
1521821561162:d.plot <- d.plot + geom_area(alpha = 0.6,
1521821561163:aes(color = Allele,
1521821561163:# alpha = N,
1521821561164:fill = Allele
1521821561164:))
1521821561170:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521821561170:# d.plot <- d.plot + scale_color_hue(l = 40)
1521821561171:d.plot <- d.plot + geom_text(data = labelsData,
1521821561171:aes(x = name.x,
1521821561172:y = name.y,
1521821561173:label = Allele),
1521821561173:color = "#333333")
1521821561178:d.plot <- d.plot + geom_text(data = covsData,
1521821561179:size = 4,
1521821561179:aes(x = max.x * 0.12,
1521821561180:y = cov.y,
1521821561180:label = cov),
1521821561181:color = "#333333")
1521821561186:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521821561188:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521821561189:expand = c(0, 2.0))
1521821561191:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521821561191:#                                     expand = c(0, 2))
1521821561192:# if (colourCount > 9) {
1521821561193:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521821561193:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521821561194:# } else {
1521821561194:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521821561195:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521821561195:# }
1521821561196:d.plot <- d.plot + theme_bw()
1521821561204:d.plot <- d.plot + labs(title = "K-mer Depth",
1521821561205:subtitle = basename(input.file),
1521821561206:x     = "Position along sequence (bp)",
1521821561206:y     = "k-mer Depth")
1521821561208:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521821561209:# color = FALSE)
1521821561210:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521821561210:plot.subtitle = element_text(hjust = 0.5),
1521821561211:axis.text.x = element_text(angle = 50,
1521821561211:vjust = 1,
1521821561212:hjust = 1,
1521821561212:size = 7))
1521821561218:d.plot
1521821592324:(labelsData <- data.frame(Allele = alleles,
1521821592325:name.x = name.x,
1521821592326:name.y = name.y,
1521821592326:cov = paste0("cov = ", format(round(covs, 1), nsmall = 1), "%"),
1521821592327:cov.x = cov.x, cov.y = cov.y,
1521821592328:# meanDepth = meanDepths,
1521821592329:# meanDepth.x = meanDepth.x,
1521821592329:# meanDepth.y = meanDepth.y,
1521821592330:N = rep(c(1,2,3),7),
1521821592331:Locus = lociLabels))
1521821592349:(covsData <- data.frame(cov = paste0("cov = ", format(round(covs, 1), nsmall = 1), "%"),
1521821592350:cov.x = cov.x, cov.y = cov.y,
1521821592351:N = rep(c(1,2,3),7),
1521821592351:Locus = lociLabels))
1521821592365:# data.to.plot <- inData[inData$n_best_prof == prof, ]
1521821592365:# data.to.plot <- inData[inData$Locus == "abcZ", ]
1521821592365:# data.to.plot <- filter(inData, Locus == "abcZ", Allele == "abcZ_2")
1521821592366:# data.to.plot <- longData
1521821592366:# n.Alleles    <- length(unique(data.to.plot$Allele))
1521821592367:n.Alleles    <- length(unique(data.to.plot$Locus))
1521821592368:h.factor     <- 1.2
1521821592368:if (n.Alleles == 1)
1521821592369:h.factor <- 1.8
1521821592369:height       <- n.Alleles * h.factor
1521821592370:width        <- 6
1521821592371:# depth.plot   <- plotDepths(data.to.plot)
1521821592372:colourCount = length(unique(data.to.plot$Allele))
1521821592373:getPalette = colorRampPalette(brewer.pal(7, "Set1"))
1521821592375:max.x <- max(data.to.plot$Position)
1521821592375:max.y <- max(data.to.plot$Depth)
1521821592376:x.limits <- seq(0, max.x, 100)
1521821592377:y.limits <- seq(0, max.y, 20)
1521821592379:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521821592379:y = kmerDepth),
1521821592380:size = 0.2)
1521821592381:d.plot <- d.plot + geom_area(alpha = 0.6,
1521821592382:aes(color = Allele,
1521821592382:# alpha = N,
1521821592382:fill = Allele
1521821592383:))
1521821592386:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521821592387:# d.plot <- d.plot + scale_color_hue(l = 40)
1521821592387:d.plot <- d.plot + geom_text(data = labelsData,
1521821592388:aes(x = name.x,
1521821592388:y = name.y,
1521821592388:label = Allele),
1521821592389:color = "#333333")
1521821592392:d.plot <- d.plot + geom_text(data = labelsData,
1521821592392:size = 4,
1521821592392:aes(x = max.x * 0.12,
1521821592393:y = cov.y,
1521821592393:label = cov),
1521821592394:color = "#333333")
1521821592397:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521821592398:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521821592398:expand = c(0, 2.0))
1521821592400:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521821592400:#                                     expand = c(0, 2))
1521821592401:# if (colourCount > 9) {
1521821592401:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521821592401:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521821592402:# } else {
1521821592402:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521821592402:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521821592403:# }
1521821592403:d.plot <- d.plot + theme_bw()
1521821592408:d.plot <- d.plot + labs(title = "K-mer Depth",
1521821592409:subtitle = basename(input.file),
1521821592409:x     = "Position along sequence (bp)",
1521821592410:y     = "k-mer Depth")
1521821592413:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521821592413:# color = FALSE)
1521821592414:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521821592414:plot.subtitle = element_text(hjust = 0.5),
1521821592415:axis.text.x = element_text(angle = 50,
1521821592415:vjust = 1,
1521821592416:hjust = 1,
1521821592416:size = 7))
1521821592420:d.plot
1521821614107:(labelsData <- data.frame(Allele = alleles,
1521821614108:name.x = name.x,
1521821614109:name.y = name.y,
1521821614110:cov = paste0("cov = ", format(round(covs, 1), nsmall = 1), "%"),
1521821614110:cov.x = cov.x, cov.y = cov.y,
1521821614111:# meanDepth = meanDepths,
1521821614112:# meanDepth.x = meanDepth.x,
1521821614113:# meanDepth.y = meanDepth.y,
1521821614114:N = rep(c(1,2,3),7),
1521821614115:Locus = lociLabels))
1521821614130:(covsData <- data.frame(cov = paste0("cov = ", format(round(covs, 1), nsmall = 1), "%"),
1521821614131:cov.x = cov.x, cov.y = cov.y,
1521821614131:N = rep(c(1,2,3),7),
1521821614131:Locus = lociLabels))
1521821614139:# data.to.plot <- inData[inData$n_best_prof == prof, ]
1521821614140:# data.to.plot <- inData[inData$Locus == "abcZ", ]
1521821614140:# data.to.plot <- filter(inData, Locus == "abcZ", Allele == "abcZ_2")
1521821614140:# data.to.plot <- longData
1521821614141:# n.Alleles    <- length(unique(data.to.plot$Allele))
1521821614141:n.Alleles    <- length(unique(data.to.plot$Locus))
1521821614142:h.factor     <- 1.2
1521821614143:if (n.Alleles == 1)
1521821614143:h.factor <- 1.8
1521821614144:height       <- n.Alleles * h.factor
1521821614144:width        <- 6
1521821614145:# depth.plot   <- plotDepths(data.to.plot)
1521821614146:colourCount = length(unique(data.to.plot$Allele))
1521821614147:getPalette = colorRampPalette(brewer.pal(7, "Set1"))
1521821614148:max.x <- max(data.to.plot$Position)
1521821614149:max.y <- max(data.to.plot$Depth)
1521821614150:x.limits <- seq(0, max.x, 100)
1521821614150:y.limits <- seq(0, max.y, 20)
1521821614152:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521821614153:y = kmerDepth),
1521821614153:size = 0.2)
1521821614154:d.plot <- d.plot + geom_area(alpha = 0.6,
1521821614155:aes(color = Allele,
1521821614155:# alpha = N,
1521821614155:fill = Allele
1521821614156:))
1521821614159:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521821614159:# d.plot <- d.plot + scale_color_hue(l = 40)
1521821614159:d.plot <- d.plot + geom_text(data = labelsData,
1521821614160:aes(x = name.x,
1521821614160:y = name.y,
1521821614161:label = Allele),
1521821614161:color = "#333333")
1521821614164:d.plot <- d.plot + geom_text(data = labelsData,
1521821614164:size = 4,
1521821614165:aes(x = max.x * 0.15,
1521821614165:y = cov.y,
1521821614165:label = cov),
1521821614166:color = "#333333")
1521821614169:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521821614170:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521821614171:expand = c(0, 2.0))
1521821614172:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521821614172:#                                     expand = c(0, 2))
1521821614173:# if (colourCount > 9) {
1521821614173:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521821614173:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521821614174:# } else {
1521821614174:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521821614174:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521821614175:# }
1521821614175:d.plot <- d.plot + theme_bw()
1521821614181:d.plot <- d.plot + labs(title = "K-mer Depth",
1521821614181:subtitle = basename(input.file),
1521821614182:x     = "Position along sequence (bp)",
1521821614182:y     = "k-mer Depth")
1521821614184:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521821614184:# color = FALSE)
1521821614185:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521821614185:plot.subtitle = element_text(hjust = 0.5),
1521821614185:axis.text.x = element_text(angle = 50,
1521821614186:vjust = 1,
1521821614186:hjust = 1,
1521821614187:size = 7))
1521821614190:d.plot
1521821641054:(labelsData <- data.frame(Allele = alleles,
1521821641055:name.x = name.x,
1521821641055:name.y = name.y,
1521821641056:cov = paste0("cov = ", format(round(covs, 1), nsmall = 1), "%"),
1521821641056:cov.x = cov.x, cov.y = cov.y,
1521821641056:# meanDepth = meanDepths,
1521821641057:# meanDepth.x = meanDepth.x,
1521821641057:# meanDepth.y = meanDepth.y,
1521821641057:N = rep(c(1,2,3),7),
1521821641058:Locus = lociLabels))
1521821641067:(covsData <- data.frame(cov = paste0("cov = ", format(round(covs, 1), nsmall = 1), "%"),
1521821641067:cov.x = cov.x, cov.y = cov.y,
1521821641067:N = rep(c(1,2,3),7),
1521821641068:Locus = lociLabels))
1521821641074:# data.to.plot <- inData[inData$n_best_prof == prof, ]
1521821641074:# data.to.plot <- inData[inData$Locus == "abcZ", ]
1521821641075:# data.to.plot <- filter(inData, Locus == "abcZ", Allele == "abcZ_2")
1521821641075:# data.to.plot <- longData
1521821641075:# n.Alleles    <- length(unique(data.to.plot$Allele))
1521821641076:n.Alleles    <- length(unique(data.to.plot$Locus))
1521821641076:h.factor     <- 1.2
1521821641077:if (n.Alleles == 1)
1521821641077:h.factor <- 1.8
1521821641078:height       <- n.Alleles * h.factor
1521821641078:width        <- 6
1521821641079:# depth.plot   <- plotDepths(data.to.plot)
1521821641079:colourCount = length(unique(data.to.plot$Allele))
1521821641080:getPalette = colorRampPalette(brewer.pal(7, "Set1"))
1521821641082:max.x <- max(data.to.plot$Position)
1521821641082:max.y <- max(data.to.plot$Depth)
1521821641083:x.limits <- seq(0, max.x, 100)
1521821641084:y.limits <- seq(0, max.y, 20)
1521821641085:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521821641086:y = kmerDepth),
1521821641086:size = 0.2)
1521821641087:d.plot <- d.plot + geom_area(alpha = 0.6,
1521821641088:aes(color = Allele,
1521821641088:# alpha = N,
1521821641088:fill = Allele
1521821641089:))
1521821641091:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521821641092:# d.plot <- d.plot + scale_color_hue(l = 40)
1521821641092:d.plot <- d.plot + geom_text(data = labelsData,
1521821641092:aes(x = name.x,
1521821641092:y = name.y,
1521821641093:label = Allele),
1521821641093:color = "#333333")
1521821641096:d.plot <- d.plot + geom_text(data = labelsData,
1521821641096:size = 4,
1521821641096:aes(x = max.x * 0.15,
1521821641097:y = cov.y,
1521821641097:label = cov),
1521821641097:color = "#333333")
1521821641100:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521821641101:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521821641101:expand = c(0, 2.0))
1521821641102:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521821641102:#                                     expand = c(0, 2))
1521821641103:# if (colourCount > 9) {
1521821641103:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521821641104:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521821641104:# } else {
1521821641104:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521821641104:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521821641105:# }
1521821641105:d.plot <- d.plot + theme_bw()
1521821641109:d.plot <- d.plot + labs(title = "K-mer Depth",
1521821641109:subtitle = basename(input.file),
1521821641110:x     = "Position along sequence (bp)",
1521821641110:y     = "k-mer Depth")
1521821641111:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521821641111:# color = FALSE)
1521821641112:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521821641112:plot.subtitle = element_text(hjust = 0.5),
1521821641112:axis.text.x = element_text(angle = 50,
1521821641113:vjust = 1,
1521821641113:hjust = 1,
1521821641113:size = 7))
1521821641116:d.plot
1521821681820:data.to.plot <- inData
1521821681823:alleles     <- unique(inData$Allele)
1521821681825:loci        <- as.character(unique(inData$Locus))
1521821681827:lociLabels  <- c()
1521821681828:name.x      <- c()
1521821681829:name.y      <- c()
1521821681830:cov.x       <- c()
1521821681831:cov.y       <- c()
1521821681832:covs        <- c()
1521821681833:meanDepths  <- c()
1521821681834:meanDepth.x <- c()
1521821681835:meanDepth.y <- c()
1521821681836:for (i in loci) {
1521821681836:lociLabels <- c(lociLabels, rep(i, 3))
1521821681837:}
1521821681843:for (allele in alleles) {
1521821681843:maxPos      <- max(inData[inData$Allele == allele, "Position"])
1521821681844:maxDepth    <- max(inData[inData$Allele == allele, "kmerDepth"])
1521821681844:name.x      <- c(name.x, (maxPos / 2))
1521821681845:name.y      <- c(name.y, (maxDepth * 0.2))
1521821681846:cov.x       <- c(cov.x, maxPos * 0.1)
1521821681846:cov.y       <- c(cov.y, maxDepth * 0.9)
1521821681847:covs        <- c(covs, unique(inData[inData$Allele == allele, "Coverage"]))
1521821681848:meanDepths  <- c(meanDepths, unique(inData[inData$Allele == allele, "MeanKmerDepth"]))
1521821681849:meanDepth.x <- c(meanDepth.x, cov.x)
1521821681850:meanDepth.y <- c(meanDepth.y, maxDepth * 0.7)
1521821681851:}
1521821681953:# (labelsData <- data.frame(Allele = alleles, name.x = x, name.y = y))
1521821681953:# data.to.plot <- left_join(data.to.plot, labelsData)
1521821681954:(labelsData <- data.frame(Allele = alleles,
1521821681954:name.x = name.x,
1521821681955:name.y = name.y,
1521821681955:cov = paste0("cov = ", format(round(covs, 1), nsmall = 1), "%"),
1521821681956:cov.x = cov.x, cov.y = cov.y,
1521821681956:# meanDepth = meanDepths,
1521821681957:# meanDepth.x = meanDepth.x,
1521821681957:# meanDepth.y = meanDepth.y,
1521821681958:N = rep(c(1,2,3),7),
1521821681959:Locus = lociLabels))
1521821681971:(covsData <- data.frame(cov = paste0("cov = ", format(round(covs, 1), nsmall = 1), "%"),
1521821681971:cov.x = cov.x, cov.y = cov.y,
1521821681971:N = rep(c(1,2,3),7),
1521821681972:Locus = lociLabels))
1521821681978:# data.to.plot <- inData[inData$n_best_prof == prof, ]
1521821681978:# data.to.plot <- inData[inData$Locus == "abcZ", ]
1521821681978:# data.to.plot <- filter(inData, Locus == "abcZ", Allele == "abcZ_2")
1521821681978:# data.to.plot <- longData
1521821681979:# n.Alleles    <- length(unique(data.to.plot$Allele))
1521821681979:n.Alleles    <- length(unique(data.to.plot$Locus))
1521821681980:h.factor     <- 1.2
1521821681980:if (n.Alleles == 1)
1521821681980:h.factor <- 1.8
1521821681981:height       <- n.Alleles * h.factor
1521821681981:width        <- 6
1521821681982:# depth.plot   <- plotDepths(data.to.plot)
1521821681982:colourCount = length(unique(data.to.plot$Allele))
1521821681983:getPalette = colorRampPalette(brewer.pal(7, "Set1"))
1521821681984:max.x <- max(data.to.plot$Position)
1521821681985:max.y <- max(data.to.plot$Depth)
1521821681986:x.limits <- seq(0, max.x, 100)
1521821681986:y.limits <- seq(0, max.y, 20)
1521821681988:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521821681988:y = kmerDepth),
1521821681988:size = 0.2)
1521821681989:d.plot <- d.plot + geom_area(alpha = 0.6,
1521821681989:aes(color = Allele,
1521821681990:# alpha = N,
1521821681990:fill = Allele
1521821681990:))
1521821681993:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521821681993:# d.plot <- d.plot + scale_color_hue(l = 40)
1521821681994:d.plot <- d.plot + geom_text(data = labelsData,
1521821681994:aes(x = name.x,
1521821681994:y = name.y,
1521821681995:label = Allele),
1521821681995:color = "#333333")
1521821681998:d.plot <- d.plot + geom_text(data = labelsData,
1521821681998:size = 4,
1521821681998:aes(x = max.x * 0.15,
1521821681999:y = cov.y,
1521821681999:label = cov),
1521821681999:color = "#333333")
1521821682002:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521821682003:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521821682004:expand = c(0, 2.0))
1521821682005:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521821682005:#                                     expand = c(0, 2))
1521821682006:# if (colourCount > 9) {
1521821682006:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521821682007:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521821682007:# } else {
1521821682007:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521821682007:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521821682008:# }
1521821682008:d.plot <- d.plot + theme_bw()
1521821682013:d.plot <- d.plot + labs(title = "K-mer Depth",
1521821682013:subtitle = basename(input.file),
1521821682013:x     = "Position along sequence (bp)",
1521821682014:y     = "k-mer Depth")
1521821682015:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521821682015:# color = FALSE)
1521821682016:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521821682016:plot.subtitle = element_text(hjust = 0.5),
1521821682016:axis.text.x = element_text(angle = 50,
1521821682017:vjust = 1,
1521821682017:hjust = 1,
1521821682017:size = 7))
1521821682020:d.plot
1521821790425:data.to.plot <- inData
1521821790426:alleles     <- unique(inData$Allele)
1521821790427:loci        <- as.character(unique(inData$Locus))
1521821790427:lociLabels  <- c()
1521821790428:name.x      <- c()
1521821790428:name.y      <- c()
1521821790429:cov.x       <- c()
1521821790429:cov.y       <- c()
1521821790429:covs        <- c()
1521821790430:meanDepths  <- c()
1521821790430:meanDepth.x <- c()
1521821790431:meanDepth.y <- c()
1521821790431:for (i in loci) {
1521821790432:lociLabels <- c(lociLabels, rep(i, 3))
1521821790432:}
1521821790435:for (allele in alleles) {
1521821790435:maxPos      <- max(inData[inData$Allele == allele, "Position"])
1521821790436:maxDepth    <- max(inData[inData$Allele == allele, "kmerDepth"])
1521821790436:name.x      <- c(name.x, (maxPos / 2))
1521821790436:name.y      <- c(name.y, (maxDepth * 0.2))
1521821790437:cov.x       <- c(cov.x, maxPos * 0.1)
1521821790437:cov.y       <- c(cov.y, maxDepth * 0.9)
1521821790437:covs        <- c(covs, unique(inData[inData$Allele == allele, "Coverage"]))
1521821790437:meanDepths  <- c(meanDepths, unique(inData[inData$Allele == allele, "MeanKmerDepth"]))
1521821790438:meanDepth.x <- c(meanDepth.x, cov.x)
1521821790438:meanDepth.y <- c(meanDepth.y, maxDepth * 0.7)
1521821790438:}
1521821790489:# (labelsData <- data.frame(Allele = alleles, name.x = x, name.y = y))
1521821790489:# data.to.plot <- left_join(data.to.plot, labelsData)
1521821790490:(labelsData <- data.frame(Allele = alleles,
1521821790490:name.x = name.x,
1521821790490:name.y = name.y,
1521821790490:cov = paste0("cov = ", format(round(covs, 1), nsmall = 1), "%"),
1521821790491:cov.x = cov.x, cov.y = cov.y,
1521821790491:meanDepth = paste0("md = ", format(round(meanDepths, 1), nsmall = 1)),
1521821790491:meanDepth.x = meanDepth.x, meanDepth.y = meanDepth.y,
1521821790492:N = rep(c(1,2,3),7),
1521821790492:Locus = lociLabels))
1521821790534:(covsData <- data.frame(cov = paste0("cov = ", format(round(covs, 1), nsmall = 1), "%"),
1521821790535:cov.x = cov.x, cov.y = cov.y,
1521821790535:N = rep(c(1,2,3),7),
1521821790535:Locus = lociLabels))
1521821790541:# data.to.plot <- inData[inData$n_best_prof == prof, ]
1521821790541:# data.to.plot <- inData[inData$Locus == "abcZ", ]
1521821790541:# data.to.plot <- filter(inData, Locus == "abcZ", Allele == "abcZ_2")
1521821790542:# data.to.plot <- longData
1521821790542:# n.Alleles    <- length(unique(data.to.plot$Allele))
1521821790542:n.Alleles    <- length(unique(data.to.plot$Locus))
1521821790543:h.factor     <- 1.2
1521821790543:if (n.Alleles == 1)
1521821790544:h.factor <- 1.8
1521821790544:height       <- n.Alleles * h.factor
1521821790545:width        <- 6
1521821790545:# depth.plot   <- plotDepths(data.to.plot)
1521821790546:colourCount = length(unique(data.to.plot$Allele))
1521821790547:getPalette = colorRampPalette(brewer.pal(7, "Set1"))
1521821790548:max.x <- max(data.to.plot$Position)
1521821790548:max.y <- max(data.to.plot$Depth)
1521821790549:x.limits <- seq(0, max.x, 100)
1521821790550:y.limits <- seq(0, max.y, 20)
1521821790551:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521821790551:y = kmerDepth),
1521821790552:size = 0.2)
1521821790553:d.plot <- d.plot + geom_area(alpha = 0.6,
1521821790553:aes(color = Allele,
1521821790554:# alpha = N,
1521821790554:fill = Allele
1521821790554:))
1521821790557:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521821790557:# d.plot <- d.plot + scale_color_hue(l = 40)
1521821790557:d.plot <- d.plot + geom_text(data = labelsData,
1521821790558:aes(x = name.x,
1521821790558:y = name.y,
1521821790558:label = Allele),
1521821790559:color = "#333333")
1521821790561:d.plot <- d.plot + geom_text(data = labelsData,
1521821790561:size = 3,
1521821790561:aes(x = max.x * 0.15,
1521821790562:y = cov.y,
1521821790562:label = cov),
1521821790562:color = "#333333")
1521821790565:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521821790566:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521821790566:expand = c(0, 2.0))
1521821790567:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521821790568:#                                     expand = c(0, 2))
1521821790568:# if (colourCount > 9) {
1521821790568:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521821790569:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521821790569:# } else {
1521821790569:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521821790570:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521821790570:# }
1521821790570:d.plot <- d.plot + theme_bw()
1521821790574:d.plot <- d.plot + labs(title = "K-mer Depth",
1521821790575:subtitle = basename(input.file),
1521821790575:x     = "Position along sequence (bp)",
1521821790575:y     = "k-mer Depth")
1521821790576:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521821790577:# color = FALSE)
1521821790577:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521821790577:plot.subtitle = element_text(hjust = 0.5),
1521821790578:axis.text.x = element_text(angle = 50,
1521821790578:vjust = 1,
1521821790578:hjust = 1,
1521821790579:size = 7))
1521821790582:d.plot
1521822018866:data.to.plot <- inData
1521822018867:max.x <- max(data.to.plot$Position)
1521822018868:max.y <- max(data.to.plot$Depth)
1521822018869:alleles     <- unique(inData$Allele)
1521822018870:loci        <- as.character(unique(inData$Locus))
1521822018871:lociLabels  <- c()
1521822018872:name.x      <- c()
1521822018873:name.y      <- c()
1521822018873:cov.x       <- c()
1521822018874:cov.y       <- c()
1521822018875:covs        <- c()
1521822018875:meanDepths  <- c()
1521822018876:meanDepth.x <- c()
1521822018877:meanDepth.y <- c()
1521822018877:for (i in loci) {
1521822018878:lociLabels <- c(lociLabels, rep(i, 3))
1521822018878:}
1521822018884:for (allele in alleles) {
1521822018885:maxPos      <- max(inData[inData$Allele == allele, "Position"])
1521822018885:maxDepth    <- max(inData[inData$Allele == allele, "kmerDepth"])
1521822018886:name.x      <- c(name.x, (maxPos / 2))
1521822018886:name.y      <- c(name.y, (maxDepth * 0.2))
1521822018887:cov.x       <- c(cov.x, max.x * 0.15)
1521822018887:cov.y       <- c(cov.y, maxDepth * 0.9)
1521822018888:covs        <- c(covs, unique(inData[inData$Allele == allele, "Coverage"]))
1521822018888:meanDepths  <- c(meanDepths, unique(inData[inData$Allele == allele, "MeanKmerDepth"]))
1521822018889:meanDepth.x <- c(meanDepth.x, max.x * 0.15)
1521822018889:meanDepth.y <- c(meanDepth.y, maxDepth * 0.7)
1521822018889:}
1521822018948:# (labelsData <- data.frame(Allele = alleles, name.x = x, name.y = y))
1521822018948:# data.to.plot <- left_join(data.to.plot, labelsData)
1521822018949:(labelsData <- data.frame(Allele = alleles,
1521822018949:name.x = name.x,
1521822018949:name.y = name.y,
1521822018950:cov = paste0("cov = ", format(round(covs, 1), nsmall = 1), "%"),
1521822018950:cov.x = cov.x, cov.y = cov.y,
1521822018950:# meanDepth = paste0("md = ", format(round(meanDepths, 1), nsmall = 1)),
1521822018951:# meanDepth.x = meanDepth.x, meanDepth.y = meanDepth.y,
1521822018951:N = rep(c(1,2,3),7),
1521822018952:Locus = lociLabels))
1521822018961:(covsData <- data.frame(cov = paste0("cov = ", format(round(covs, 1), nsmall = 1), "%"),
1521822018962:cov.x = cov.x, cov.y = cov.y,
1521822018962:N = rep(c(1,2,3),7),
1521822018962:Locus = lociLabels))
1521822018968:# data.to.plot <- inData[inData$n_best_prof == prof, ]
1521822018969:# data.to.plot <- inData[inData$Locus == "abcZ", ]
1521822018969:# data.to.plot <- filter(inData, Locus == "abcZ", Allele == "abcZ_2")
1521822018970:# data.to.plot <- longData
1521822018970:# n.Alleles    <- length(unique(data.to.plot$Allele))
1521822018970:n.Alleles    <- length(unique(data.to.plot$Locus))
1521822018971:h.factor     <- 1.2
1521822018971:if (n.Alleles == 1)
1521822018972:h.factor <- 1.8
1521822018972:height       <- n.Alleles * h.factor
1521822018973:width        <- 6
1521822018973:# depth.plot   <- plotDepths(data.to.plot)
1521822018974:colourCount = length(unique(data.to.plot$Allele))
1521822018975:getPalette = colorRampPalette(brewer.pal(7, "Set1"))
1521822018977:x.limits <- seq(0, max.x, 100)
1521822018977:y.limits <- seq(0, max.y, 20)
1521822018979:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521822018979:y = kmerDepth),
1521822018979:size = 0.2)
1521822018980:d.plot <- d.plot + geom_area(alpha = 0.6,
1521822018981:aes(color = Allele,
1521822018981:# alpha = N,
1521822018981:fill = Allele
1521822018982:))
1521822018985:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521822018985:# d.plot <- d.plot + scale_color_hue(l = 40)
1521822018985:d.plot <- d.plot + geom_text(data = labelsData,
1521822018986:aes(x = name.x,
1521822018986:y = name.y,
1521822018986:label = Allele),
1521822018987:color = "#333333")
1521822018990:d.plot <- d.plot + geom_text(data = labelsData,
1521822018990:size = 3,
1521822018990:aes(x = cov.x,
1521822018991:y = cov.y,
1521822018991:label = cov),
1521822018991:color = "#333333")
1521822018994:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521822018995:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521822018995:expand = c(0, 2.0))
1521822018996:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521822018997:#                                     expand = c(0, 2))
1521822018997:# if (colourCount > 9) {
1521822018997:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521822018998:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521822018998:# } else {
1521822018998:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521822018998:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521822018999:# }
1521822018999:d.plot <- d.plot + theme_bw()
1521822019004:d.plot <- d.plot + labs(title = "K-mer Depth",
1521822019004:subtitle = basename(input.file),
1521822019005:x     = "Position along sequence (bp)",
1521822019005:y     = "k-mer Depth")
1521822019007:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521822019007:# color = FALSE)
1521822019007:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521822019008:plot.subtitle = element_text(hjust = 0.5),
1521822019008:axis.text.x = element_text(angle = 50,
1521822019008:vjust = 1,
1521822019008:hjust = 1,
1521822019009:size = 7))
1521822019012:d.plot
1521822065968:# (labelsData <- data.frame(Allele = alleles, name.x = x, name.y = y))
1521822065968:# data.to.plot <- left_join(data.to.plot, labelsData)
1521822065969:(labelsData <- data.frame(Allele = alleles,
1521822065969:name.x = name.x,
1521822065969:name.y = name.y,
1521822065970:cov = paste0("cov = ", format(round(covs, 1), nsmall = 1), "%"),
1521822065970:cov.x = cov.x, cov.y = cov.y,
1521822065970:# meanDepth = paste0("md = ", format(round(meanDepths, 1), nsmall = 1)),
1521822065971:# meanDepth.x = meanDepth.x, meanDepth.y = meanDepth.y,
1521822065971:N = rep(c(1,2,3),7),
1521822065971:Locus = lociLabels))
1521822113200:# (labelsData <- data.frame(Allele = alleles, name.x = x, name.y = y))
1521822113201:# data.to.plot <- left_join(data.to.plot, labelsData)
1521822113201:(labelsData <- data.frame(Allele = alleles,
1521822113202:name.x = name.x,
1521822113202:name.y = name.y,
1521822113203:cov = paste0("cov = ", format(round(covs, 1), nsmall = 1), "%"),
1521822113203:cov.x = cov.x, cov.y = cov.y,
1521822113204:meanDepth = paste0("md = ", format(round(meanDepths, 1), nsmall = 1)),
1521822113204:meanDepth.x = meanDepth.x, meanDepth.y = meanDepth.y,
1521822113205:N = rep(c(1,2,3),7),
1521822113205:Locus = lociLabels))
1521822127113:data.to.plot <- inData
1521822127115:max.x <- max(data.to.plot$Position)
1521822127117:max.y <- max(data.to.plot$Depth)
1521822127119:alleles     <- unique(inData$Allele)
1521822127120:loci        <- as.character(unique(inData$Locus))
1521822127121:lociLabels  <- c()
1521822127122:name.x      <- c()
1521822127123:name.y      <- c()
1521822127124:cov.x       <- c()
1521822127125:cov.y       <- c()
1521822127125:covs        <- c()
1521822127126:meanDepths  <- c()
1521822127127:meanDepth.x <- c()
1521822127128:meanDepth.y <- c()
1521822127128:for (i in loci) {
1521822127129:lociLabels <- c(lociLabels, rep(i, 3))
1521822127129:}
1521822127134:for (allele in alleles) {
1521822127135:maxPos      <- max(inData[inData$Allele == allele, "Position"])
1521822127135:maxDepth    <- max(inData[inData$Allele == allele, "kmerDepth"])
1521822127136:name.x      <- c(name.x, (maxPos / 2))
1521822127136:name.y      <- c(name.y, (maxDepth * 0.2))
1521822127137:cov.x       <- c(cov.x, max.x * 0.15)
1521822127137:cov.y       <- c(cov.y, maxDepth * 0.9)
1521822127138:covs        <- c(covs, unique(inData[inData$Allele == allele, "Coverage"]))
1521822127138:meanDepths  <- c(meanDepths, unique(inData[inData$Allele == allele, "MeanKmerDepth"]))
1521822127139:meanDepth.x <- c(meanDepth.x, max.x * 0.15)
1521822127140:meanDepth.y <- c(meanDepth.y, maxDepth * 0.7)
1521822127140:}
1521822127206:# (labelsData <- data.frame(Allele = alleles, name.x = x, name.y = y))
1521822127206:# data.to.plot <- left_join(data.to.plot, labelsData)
1521822127207:(labelsData <- data.frame(Allele = alleles,
1521822127207:name.x = name.x,
1521822127207:name.y = name.y,
1521822127208:cov = paste0("cov = ", format(round(covs, 1), nsmall = 1), "%"),
1521822127208:cov.x = cov.x, cov.y = cov.y,
1521822127208:meanDepth = paste0("md = ", format(round(meanDepths, 1), nsmall = 1)),
1521822127209:meanDepth.x = meanDepth.x, meanDepth.y = meanDepth.y,
1521822127209:N = rep(c(1,2,3),7),
1521822127210:Locus = lociLabels))
1521822127223:# data.to.plot <- inData[inData$n_best_prof == prof, ]
1521822127223:# data.to.plot <- inData[inData$Locus == "abcZ", ]
1521822127224:# data.to.plot <- filter(inData, Locus == "abcZ", Allele == "abcZ_2")
1521822127224:# data.to.plot <- longData
1521822127224:# n.Alleles    <- length(unique(data.to.plot$Allele))
1521822127225:n.Alleles    <- length(unique(data.to.plot$Locus))
1521822127225:h.factor     <- 1.2
1521822127226:if (n.Alleles == 1)
1521822127226:h.factor <- 1.8
1521822127227:height       <- n.Alleles * h.factor
1521822127227:width        <- 6
1521822127228:# depth.plot   <- plotDepths(data.to.plot)
1521822127229:colourCount = length(unique(data.to.plot$Allele))
1521822127229:getPalette = colorRampPalette(brewer.pal(7, "Set1"))
1521822127231:x.limits <- seq(0, max.x, 100)
1521822127232:y.limits <- seq(0, max.y, 20)
1521822127233:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521822127234:y = kmerDepth),
1521822127234:size = 0.2)
1521822127235:d.plot <- d.plot + geom_area(alpha = 0.6,
1521822127236:aes(color = Allele,
1521822127236:# alpha = N,
1521822127236:fill = Allele
1521822127237:))
1521822127240:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521822127240:# d.plot <- d.plot + scale_color_hue(l = 40)
1521822127240:d.plot <- d.plot + geom_text(data = labelsData,
1521822127241:aes(x = name.x,
1521822127241:y = name.y,
1521822127241:label = Allele),
1521822127242:color = "#333333")
1521822127244:d.plot <- d.plot + geom_text(data = labelsData,
1521822127245:size = 3,
1521822127245:aes(x = cov.x,
1521822127245:y = cov.y,
1521822127246:label = cov),
1521822127246:color = "#333333")
1521822127249:d.plot <- d.plot + geom_text(data = labelsData,
1521822127249:size = 3,
1521822127249:aes(x = cov.x,
1521822127250:y = cov.y,
1521822127250:label = meanDepth),
1521822127250:color = "#333333")
1521822127253:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521822127254:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521822127255:expand = c(0, 2.0))
1521822127256:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521822127256:#                                     expand = c(0, 2))
1521822127257:# if (colourCount > 9) {
1521822127257:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521822127257:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521822127257:# } else {
1521822127258:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521822127258:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521822127258:# }
1521822127258:d.plot <- d.plot + theme_bw()
1521822127264:d.plot <- d.plot + labs(title = "K-mer Depth",
1521822127264:subtitle = basename(input.file),
1521822127264:x     = "Position along sequence (bp)",
1521822127265:y     = "k-mer Depth")
1521822127267:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521822127267:# color = FALSE)
1521822127267:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521822127268:plot.subtitle = element_text(hjust = 0.5),
1521822127268:axis.text.x = element_text(angle = 50,
1521822127268:vjust = 1,
1521822127268:hjust = 1,
1521822127269:size = 7))
1521822127272:d.plot
1521822179066:data.to.plot <- inData
1521822179068:max.x <- max(data.to.plot$Position)
1521822179069:max.y <- max(data.to.plot$Depth)
1521822179070:alleles     <- unique(inData$Allele)
1521822179072:loci        <- as.character(unique(inData$Locus))
1521822179073:lociLabels  <- c()
1521822179073:name.x      <- c()
1521822179074:name.y      <- c()
1521822179075:cov.x       <- c()
1521822179076:cov.y       <- c()
1521822179077:covs        <- c()
1521822179077:meanDepths  <- c()
1521822179078:meanDepth.x <- c()
1521822179079:meanDepth.y <- c()
1521822179079:for (i in loci) {
1521822179080:lociLabels <- c(lociLabels, rep(i, 3))
1521822179080:}
1521822179085:for (allele in alleles) {
1521822179085:maxPos      <- max(inData[inData$Allele == allele, "Position"])
1521822179085:maxDepth    <- max(inData[inData$Allele == allele, "kmerDepth"])
1521822179086:name.x      <- c(name.x, (maxPos / 2))
1521822179086:name.y      <- c(name.y, (maxDepth * 0.2))
1521822179087:cov.x       <- c(cov.x, max.x * 0.15)
1521822179087:cov.y       <- c(cov.y, maxDepth * 0.9)
1521822179088:covs        <- c(covs, unique(inData[inData$Allele == allele, "Coverage"]))
1521822179088:meanDepths  <- c(meanDepths, unique(inData[inData$Allele == allele, "MeanKmerDepth"]))
1521822179089:meanDepth.x <- c(meanDepth.x, max.x * 0.15)
1521822179089:meanDepth.y <- c(meanDepth.y, maxDepth * 0.7)
1521822179090:}
1521822179145:# (labelsData <- data.frame(Allele = alleles, name.x = x, name.y = y))
1521822179145:# data.to.plot <- left_join(data.to.plot, labelsData)
1521822179145:(labelsData <- data.frame(Allele = alleles,
1521822179146:name.x = name.x,
1521822179146:name.y = name.y,
1521822179146:cov = paste0("cov = ", format(round(covs, 1), nsmall = 1), "%"),
1521822179147:cov.x = cov.x, cov.y = cov.y,
1521822179147:meanDepth = paste0("md = ", format(round(meanDepths, 1), nsmall = 1)),
1521822179147:meanDepth.x = meanDepth.x, meanDepth.y = meanDepth.y,
1521822179148:N = rep(c(1,2,3),7),
1521822179148:Locus = lociLabels))
1521822179160:# data.to.plot <- inData[inData$n_best_prof == prof, ]
1521822179161:# data.to.plot <- inData[inData$Locus == "abcZ", ]
1521822179161:# data.to.plot <- filter(inData, Locus == "abcZ", Allele == "abcZ_2")
1521822179161:# data.to.plot <- longData
1521822179162:# n.Alleles    <- length(unique(data.to.plot$Allele))
1521822179162:n.Alleles    <- length(unique(data.to.plot$Locus))
1521822179163:h.factor     <- 1.2
1521822179163:if (n.Alleles == 1)
1521822179164:h.factor <- 1.8
1521822179164:height       <- n.Alleles * h.factor
1521822179164:width        <- 6
1521822179165:# depth.plot   <- plotDepths(data.to.plot)
1521822179166:colourCount = length(unique(data.to.plot$Allele))
1521822179166:getPalette = colorRampPalette(brewer.pal(7, "Set1"))
1521822179168:x.limits <- seq(0, max.x, 100)
1521822179168:y.limits <- seq(0, max.y, 20)
1521822179170:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521822179170:y = kmerDepth),
1521822179171:size = 0.2)
1521822179172:d.plot <- d.plot + geom_area(alpha = 0.6,
1521822179172:aes(color = Allele,
1521822179173:# alpha = N,
1521822179173:fill = Allele
1521822179173:))
1521822179177:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521822179177:# d.plot <- d.plot + scale_color_hue(l = 40)
1521822179178:d.plot <- d.plot + geom_text(data = labelsData,
1521822179178:aes(x = name.x,
1521822179179:y = name.y,
1521822179179:label = Allele),
1521822179180:color = "#333333")
1521822179182:d.plot <- d.plot + geom_text(data = labelsData,
1521822179182:size = 3,
1521822179183:aes(x = cov.x,
1521822179183:y = cov.y,
1521822179183:label = cov),
1521822179184:color = "#333333")
1521822179186:d.plot <- d.plot + geom_text(data = labelsData,
1521822179186:size = 3,
1521822179187:aes(x = meanDepth.x,
1521822179187:y = meanDepth.y,
1521822179187:label = meanDepth),
1521822179187:color = "#333333")
1521822179190:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521822179191:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521822179191:expand = c(0, 2.0))
1521822179192:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521822179192:#                                     expand = c(0, 2))
1521822179193:# if (colourCount > 9) {
1521822179193:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521822179193:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521822179194:# } else {
1521822179194:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521822179194:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521822179194:# }
1521822179195:d.plot <- d.plot + theme_bw()
1521822179199:d.plot <- d.plot + labs(title = "K-mer Depth",
1521822179199:subtitle = basename(input.file),
1521822179200:x     = "Position along sequence (bp)",
1521822179200:y     = "k-mer Depth")
1521822179201:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521822179202:# color = FALSE)
1521822179202:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521822179202:plot.subtitle = element_text(hjust = 0.5),
1521822179202:axis.text.x = element_text(angle = 50,
1521822179203:vjust = 1,
1521822179203:hjust = 1,
1521822179203:size = 7))
1521822179206:d.plot
1521822298522:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521822298524:y = kmerDepth),
1521822298525:size = 0.2)
1521822298530:d.plot <- d.plot + geom_area(alpha = 0.6,
1521822298531:aes(color = Allele,
1521822298532:# alpha = N,
1521822298532:fill = Allele
1521822298533:))
1521822298538:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521822298539:# d.plot <- d.plot + scale_color_hue(l = 40)
1521822298540:d.plot <- d.plot + geom_text(data = labelsData,
1521822298540:aes(x = name.x,
1521822298541:y = name.y,
1521822298541:label = Allele),
1521822298542:color = "#333333")
1521822298546:d.plot <- d.plot + geom_text(data = labelsData,
1521822298547:size = 3,
1521822298547:aes(x = cov.x,
1521822298548:y = cov.y,
1521822298548:label = cov),
1521822298549:color = "#333333")
1521822298553:d.plot <- d.plot + geom_text(data = labelsData,
1521822298553:size = 3,
1521822298554:hjust = "left",
1521822298554:aes(x = meanDepth.x,
1521822298554:y = meanDepth.y,
1521822298555:label = meanDepth),
1521822298555:color = "#333333")
1521822298559:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521822298561:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521822298561:expand = c(0, 2.0))
1521822298563:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521822298563:#                                     expand = c(0, 2))
1521822298564:# if (colourCount > 9) {
1521822298564:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521822298565:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521822298565:# } else {
1521822298566:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521822298566:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521822298567:# }
1521822298567:d.plot <- d.plot + theme_bw()
1521822298588:d.plot <- d.plot + labs(title = "K-mer Depth",
1521822298589:subtitle = basename(input.file),
1521822298589:x     = "Position along sequence (bp)",
1521822298590:y     = "k-mer Depth")
1521822298591:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521822298592:# color = FALSE)
1521822298592:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521822298592:plot.subtitle = element_text(hjust = 0.5),
1521822298593:axis.text.x = element_text(angle = 50,
1521822298593:vjust = 1,
1521822298594:hjust = 1,
1521822298594:size = 7))
1521822298598:d.plot
1521822367284:data.to.plot <- inData
1521822367287:max.x <- max(data.to.plot$Position)
1521822367288:max.y <- max(data.to.plot$Depth)
1521822367290:alleles     <- unique(inData$Allele)
1521822367292:loci        <- as.character(unique(inData$Locus))
1521822367294:lociLabels  <- c()
1521822367295:name.x      <- c()
1521822367296:name.y      <- c()
1521822367296:cov.x       <- c()
1521822367297:cov.y       <- c()
1521822367298:covs        <- c()
1521822367298:meanDepths  <- c()
1521822367299:meanDepth.x <- c()
1521822367300:meanDepth.y <- c()
1521822367301:for (i in loci) {
1521822367301:lociLabels <- c(lociLabels, rep(i, 3))
1521822367302:}
1521822367309:for (allele in alleles) {
1521822367310:maxPos      <- max(inData[inData$Allele == allele, "Position"])
1521822367310:maxDepth    <- max(inData[inData$Allele == allele, "kmerDepth"])
1521822367311:name.x      <- c(name.x, (maxPos / 2))
1521822367311:name.y      <- c(name.y, (maxDepth * 0.2))
1521822367312:cov.x       <- c(cov.x, max.x * 0.05)
1521822367312:cov.y       <- c(cov.y, maxDepth * 0.9)
1521822367313:covs        <- c(covs, unique(inData[inData$Allele == allele, "Coverage"]))
1521822367314:meanDepths  <- c(meanDepths, unique(inData[inData$Allele == allele, "MeanKmerDepth"]))
1521822367315:meanDepth.x <- c(meanDepth.x, max.x * 0.05)
1521822367316:meanDepth.y <- c(meanDepth.y, maxDepth * 0.7)
1521822367317:}
1521822367406:# (labelsData <- data.frame(Allele = alleles, name.x = x, name.y = y))
1521822367406:# data.to.plot <- left_join(data.to.plot, labelsData)
1521822367407:(labelsData <- data.frame(Allele = alleles,
1521822367407:name.x = name.x,
1521822367408:name.y = name.y,
1521822367408:cov = paste0("cov = ", format(round(covs, 1), nsmall = 1), "%"),
1521822367409:cov.x = cov.x, cov.y = cov.y,
1521822367409:meanDepth = paste0("md = ", format(round(meanDepths, 1), nsmall = 1)),
1521822367410:meanDepth.x = meanDepth.x, meanDepth.y = meanDepth.y,
1521822367410:N = rep(c(1,2,3),7),
1521822367411:Locus = lociLabels))
1521822367425:# data.to.plot <- inData[inData$n_best_prof == prof, ]
1521822367425:# data.to.plot <- inData[inData$Locus == "abcZ", ]
1521822367425:# data.to.plot <- filter(inData, Locus == "abcZ", Allele == "abcZ_2")
1521822367426:# data.to.plot <- longData
1521822367426:# n.Alleles    <- length(unique(data.to.plot$Allele))
1521822367427:n.Alleles    <- length(unique(data.to.plot$Locus))
1521822367427:h.factor     <- 1.2
1521822367428:if (n.Alleles == 1)
1521822367428:h.factor <- 1.8
1521822367429:height       <- n.Alleles * h.factor
1521822367429:width        <- 6
1521822367429:# depth.plot   <- plotDepths(data.to.plot)
1521822367430:colourCount = length(unique(data.to.plot$Allele))
1521822367431:getPalette = colorRampPalette(brewer.pal(7, "Set1"))
1521822367432:x.limits <- seq(0, max.x, 100)
1521822367432:y.limits <- seq(0, max.y, 20)
1521822367434:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521822367435:y = kmerDepth),
1521822367435:size = 0.2)
1521822367436:d.plot <- d.plot + geom_area(alpha = 0.6,
1521822367436:aes(color = Allele,
1521822367436:# alpha = N,
1521822367437:fill = Allele
1521822367437:))
1521822367440:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521822367440:# d.plot <- d.plot + scale_color_hue(l = 40)
1521822367440:d.plot <- d.plot + geom_text(data = labelsData,
1521822367440:aes(x = name.x,
1521822367441:y = name.y,
1521822367441:label = Allele),
1521822367442:color = "#333333")
1521822367446:d.plot <- d.plot + geom_text(data = labelsData,
1521822367446:size = 3,
1521822367446:hjust = "left",
1521822367447:aes(x = cov.x,
1521822367447:y = cov.y,
1521822367448:label = cov),
1521822367448:color = "#333333")
1521822367452:d.plot <- d.plot + geom_text(data = labelsData,
1521822367453:size = 3,
1521822367453:hjust = "left",
1521822367454:aes(x = meanDepth.x,
1521822367454:y = meanDepth.y,
1521822367455:label = meanDepth),
1521822367456:color = "#333333")
1521822367460:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521822367461:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521822367462:expand = c(0, 2.0))
1521822367465:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521822367465:#                                     expand = c(0, 2))
1521822367466:# if (colourCount > 9) {
1521822367466:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521822367467:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521822367467:# } else {
1521822367468:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521822367468:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521822367468:# }
1521822367469:d.plot <- d.plot + theme_bw()
1521822367476:d.plot <- d.plot + labs(title = "K-mer Depth",
1521822367477:subtitle = basename(input.file),
1521822367477:x     = "Position along sequence (bp)",
1521822367478:y     = "k-mer Depth")
1521822367480:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521822367480:# color = FALSE)
1521822367481:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521822367481:plot.subtitle = element_text(hjust = 0.5),
1521822367482:axis.text.x = element_text(angle = 50,
1521822367482:vjust = 1,
1521822367483:hjust = 1,
1521822367483:size = 7))
1521822367488:d.plot
1521822453103:data.to.plot <- inData
1521822453105:max.x <- max(data.to.plot$Position)
1521822453107:max.y <- max(data.to.plot$Depth)
1521822453109:alleles     <- unique(inData$Allele)
1521822453111:loci        <- as.character(unique(inData$Locus))
1521822453112:lociLabels  <- c()
1521822453114:name.x      <- c()
1521822453115:name.y      <- c()
1521822453116:cov.x       <- c()
1521822453117:cov.y       <- c()
1521822453118:covs        <- c()
1521822453119:meanDepths  <- c()
1521822453120:meanDepth.x <- c()
1521822453121:meanDepth.y <- c()
1521822453122:for (i in loci) {
1521822453123:lociLabels <- c(lociLabels, rep(i, 3))
1521822453123:}
1521822453129:for (allele in alleles) {
1521822453129:maxPos      <- max(inData[inData$Allele == allele, "Position"])
1521822453130:maxDepth    <- max(inData[inData$Allele == allele, "kmerDepth"])
1521822453130:name.x      <- c(name.x, (maxPos / 2))
1521822453131:name.y      <- c(name.y, (maxDepth * 0.2))
1521822453132:cov.x       <- c(cov.x, max.x * 0.05)
1521822453132:cov.y       <- c(cov.y, maxDepth * 0.9)
1521822453133:covs        <- c(covs, unique(inData[inData$Allele == allele, "Coverage"]))
1521822453133:meanDepths  <- c(meanDepths, unique(inData[inData$Allele == allele, "MeanKmerDepth"]))
1521822453134:meanDepth.x <- c(meanDepth.x, max.x * 0.05 * 2)
1521822453135:meanDepth.y <- c(meanDepth.y, maxDepth * 0.9)
1521822453136:}
1521822453205:# (labelsData <- data.frame(Allele = alleles, name.x = x, name.y = y))
1521822453206:# data.to.plot <- left_join(data.to.plot, labelsData)
1521822453206:(labelsData <- data.frame(Allele = alleles,
1521822453207:name.x = name.x,
1521822453207:name.y = name.y,
1521822453207:cov = paste0("cov = ", format(round(covs, 1), nsmall = 1), "%"),
1521822453208:cov.x = cov.x, cov.y = cov.y,
1521822453208:meanDepth = paste0("md = ", format(round(meanDepths, 1), nsmall = 1)),
1521822453209:meanDepth.x = meanDepth.x, meanDepth.y = meanDepth.y,
1521822453209:N = rep(c(1,2,3),7),
1521822453209:Locus = lociLabels))
1521822453223:# data.to.plot <- inData[inData$n_best_prof == prof, ]
1521822453223:# data.to.plot <- inData[inData$Locus == "abcZ", ]
1521822453223:# data.to.plot <- filter(inData, Locus == "abcZ", Allele == "abcZ_2")
1521822453224:# data.to.plot <- longData
1521822453224:# n.Alleles    <- length(unique(data.to.plot$Allele))
1521822453224:n.Alleles    <- length(unique(data.to.plot$Locus))
1521822453225:h.factor     <- 1.2
1521822453226:if (n.Alleles == 1)
1521822453226:h.factor <- 1.8
1521822453227:height       <- n.Alleles * h.factor
1521822453227:width        <- 6
1521822453228:# depth.plot   <- plotDepths(data.to.plot)
1521822453229:colourCount = length(unique(data.to.plot$Allele))
1521822453230:getPalette = colorRampPalette(brewer.pal(7, "Set1"))
1521822453231:x.limits <- seq(0, max.x, 100)
1521822453232:y.limits <- seq(0, max.y, 20)
1521822453234:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521822453234:y = kmerDepth),
1521822453234:size = 0.2)
1521822453236:d.plot <- d.plot + geom_area(alpha = 0.6,
1521822453236:aes(color = Allele,
1521822453237:# alpha = N,
1521822453237:fill = Allele
1521822453237:))
1521822453240:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521822453241:# d.plot <- d.plot + scale_color_hue(l = 40)
1521822453241:d.plot <- d.plot + geom_text(data = labelsData,
1521822453242:aes(x = name.x,
1521822453242:y = name.y,
1521822453242:label = Allele),
1521822453243:color = "#333333")
1521822453245:d.plot <- d.plot + geom_text(data = labelsData,
1521822453246:size = 3,
1521822453246:hjust = "left",
1521822453246:aes(x = cov.x,
1521822453247:y = cov.y,
1521822453247:label = cov),
1521822453247:color = "#333333")
1521822453250:d.plot <- d.plot + geom_text(data = labelsData,
1521822453250:size = 3,
1521822453251:hjust = "left",
1521822453251:aes(x = meanDepth.x,
1521822453251:y = meanDepth.y,
1521822453252:label = meanDepth),
1521822453252:color = "#333333")
1521822453254:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521822453256:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521822453256:expand = c(0, 2.0))
1521822453257:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521822453258:#                                     expand = c(0, 2))
1521822453258:# if (colourCount > 9) {
1521822453259:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521822453259:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521822453259:# } else {
1521822453260:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521822453260:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521822453260:# }
1521822453260:d.plot <- d.plot + theme_bw()
1521822453265:d.plot <- d.plot + labs(title = "K-mer Depth",
1521822453265:subtitle = basename(input.file),
1521822453266:x     = "Position along sequence (bp)",
1521822453266:y     = "k-mer Depth")
1521822453267:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521822453268:# color = FALSE)
1521822453268:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521822453268:plot.subtitle = element_text(hjust = 0.5),
1521822453269:axis.text.x = element_text(angle = 50,
1521822453269:vjust = 1,
1521822453269:hjust = 1,
1521822453270:size = 7))
1521822453272:d.plot
1521822477842:data.to.plot <- inData
1521822477844:max.x <- max(data.to.plot$Position)
1521822477845:max.y <- max(data.to.plot$Depth)
1521822477847:alleles     <- unique(inData$Allele)
1521822477848:loci        <- as.character(unique(inData$Locus))
1521822477849:lociLabels  <- c()
1521822477850:name.x      <- c()
1521822477850:name.y      <- c()
1521822477851:cov.x       <- c()
1521822477851:cov.y       <- c()
1521822477852:covs        <- c()
1521822477852:meanDepths  <- c()
1521822477853:meanDepth.x <- c()
1521822477853:meanDepth.y <- c()
1521822477854:for (i in loci) {
1521822477854:lociLabels <- c(lociLabels, rep(i, 3))
1521822477854:}
1521822477858:for (allele in alleles) {
1521822477859:maxPos      <- max(inData[inData$Allele == allele, "Position"])
1521822477859:maxDepth    <- max(inData[inData$Allele == allele, "kmerDepth"])
1521822477859:name.x      <- c(name.x, (maxPos / 2))
1521822477860:name.y      <- c(name.y, (maxDepth * 0.2))
1521822477860:cov.x       <- c(cov.x, max.x * 0.05)
1521822477860:cov.y       <- c(cov.y, maxDepth * 0.9)
1521822477861:covs        <- c(covs, unique(inData[inData$Allele == allele, "Coverage"]))
1521822477861:meanDepths  <- c(meanDepths, unique(inData[inData$Allele == allele, "MeanKmerDepth"]))
1521822477861:meanDepth.x <- c(meanDepth.x, max.x * 0.25)
1521822477862:meanDepth.y <- c(meanDepth.y, maxDepth * 0.9)
1521822477862:}
1521822478102:# (labelsData <- data.frame(Allele = alleles, name.x = x, name.y = y))
1521822478102:# data.to.plot <- left_join(data.to.plot, labelsData)
1521822478103:(labelsData <- data.frame(Allele = alleles,
1521822478103:name.x = name.x,
1521822478103:name.y = name.y,
1521822478104:cov = paste0("cov = ", format(round(covs, 1), nsmall = 1), "%"),
1521822478104:cov.x = cov.x, cov.y = cov.y,
1521822478104:meanDepth = paste0("md = ", format(round(meanDepths, 1), nsmall = 1)),
1521822478105:meanDepth.x = meanDepth.x, meanDepth.y = meanDepth.y,
1521822478105:N = rep(c(1,2,3),7),
1521822478105:Locus = lociLabels))
1521822478116:# data.to.plot <- inData[inData$n_best_prof == prof, ]
1521822478116:# data.to.plot <- inData[inData$Locus == "abcZ", ]
1521822478116:# data.to.plot <- filter(inData, Locus == "abcZ", Allele == "abcZ_2")
1521822478116:# data.to.plot <- longData
1521822478117:# n.Alleles    <- length(unique(data.to.plot$Allele))
1521822478117:n.Alleles    <- length(unique(data.to.plot$Locus))
1521822478118:h.factor     <- 1.2
1521822478118:if (n.Alleles == 1)
1521822478118:h.factor <- 1.8
1521822478119:height       <- n.Alleles * h.factor
1521822478119:width        <- 6
1521822478119:# depth.plot   <- plotDepths(data.to.plot)
1521822478120:colourCount = length(unique(data.to.plot$Allele))
1521822478121:getPalette = colorRampPalette(brewer.pal(7, "Set1"))
1521822478122:x.limits <- seq(0, max.x, 100)
1521822478122:y.limits <- seq(0, max.y, 20)
1521822478124:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521822478124:y = kmerDepth),
1521822478124:size = 0.2)
1521822478125:d.plot <- d.plot + geom_area(alpha = 0.6,
1521822478125:aes(color = Allele,
1521822478126:# alpha = N,
1521822478126:fill = Allele
1521822478126:))
1521822478129:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521822478129:# d.plot <- d.plot + scale_color_hue(l = 40)
1521822478129:d.plot <- d.plot + geom_text(data = labelsData,
1521822478129:aes(x = name.x,
1521822478130:y = name.y,
1521822478130:label = Allele),
1521822478130:color = "#333333")
1521822478133:d.plot <- d.plot + geom_text(data = labelsData,
1521822478133:size = 3,
1521822478134:hjust = "left",
1521822478134:aes(x = cov.x,
1521822478134:y = cov.y,
1521822478134:label = cov),
1521822478135:color = "#333333")
1521822478137:d.plot <- d.plot + geom_text(data = labelsData,
1521822478138:size = 3,
1521822478138:hjust = "left",
1521822478138:aes(x = meanDepth.x,
1521822478139:y = meanDepth.y,
1521822478139:label = meanDepth),
1521822478139:color = "#333333")
1521822478142:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521822478143:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521822478143:expand = c(0, 2.0))
1521822478144:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521822478144:#                                     expand = c(0, 2))
1521822478145:# if (colourCount > 9) {
1521822478145:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521822478145:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521822478146:# } else {
1521822478146:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521822478146:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521822478147:# }
1521822478147:d.plot <- d.plot + theme_bw()
1521822478151:d.plot <- d.plot + labs(title = "K-mer Depth",
1521822478151:subtitle = basename(input.file),
1521822478152:x     = "Position along sequence (bp)",
1521822478152:y     = "k-mer Depth")
1521822478153:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521822478154:# color = FALSE)
1521822478154:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521822478154:plot.subtitle = element_text(hjust = 0.5),
1521822478154:axis.text.x = element_text(angle = 50,
1521822478155:vjust = 1,
1521822478155:hjust = 1,
1521822478155:size = 7))
1521822478158:d.plot
1521822505004:data.to.plot <- inData
1521822505006:max.x <- max(data.to.plot$Position)
1521822505007:max.y <- max(data.to.plot$Depth)
1521822505009:alleles     <- unique(inData$Allele)
1521822505010:loci        <- as.character(unique(inData$Locus))
1521822505011:lociLabels  <- c()
1521822505012:name.x      <- c()
1521822505012:name.y      <- c()
1521822505013:cov.x       <- c()
1521822505014:cov.y       <- c()
1521822505015:covs        <- c()
1521822505015:meanDepths  <- c()
1521822505016:meanDepth.x <- c()
1521822505017:meanDepth.y <- c()
1521822505017:for (i in loci) {
1521822505018:lociLabels <- c(lociLabels, rep(i, 3))
1521822505018:}
1521822505023:for (allele in alleles) {
1521822505024:maxPos      <- max(inData[inData$Allele == allele, "Position"])
1521822505025:maxDepth    <- max(inData[inData$Allele == allele, "kmerDepth"])
1521822505025:name.x      <- c(name.x, (maxPos / 2))
1521822505026:name.y      <- c(name.y, (maxDepth * 0.2))
1521822505026:cov.x       <- c(cov.x, max.x * 0.05)
1521822505027:cov.y       <- c(cov.y, maxDepth * 0.9)
1521822505027:covs        <- c(covs, unique(inData[inData$Allele == allele, "Coverage"]))
1521822505028:meanDepths  <- c(meanDepths, unique(inData[inData$Allele == allele, "MeanKmerDepth"]))
1521822505028:meanDepth.x <- c(meanDepth.x, max.x * 0.35)
1521822505029:meanDepth.y <- c(meanDepth.y, maxDepth * 0.9)
1521822505029:}
1521822505087:# (labelsData <- data.frame(Allele = alleles, name.x = x, name.y = y))
1521822505087:# data.to.plot <- left_join(data.to.plot, labelsData)
1521822505087:(labelsData <- data.frame(Allele = alleles,
1521822505088:name.x = name.x,
1521822505088:name.y = name.y,
1521822505088:cov = paste0("cov = ", format(round(covs, 1), nsmall = 1), "%"),
1521822505089:cov.x = cov.x, cov.y = cov.y,
1521822505089:meanDepth = paste0("md = ", format(round(meanDepths, 1), nsmall = 1)),
1521822505089:meanDepth.x = meanDepth.x, meanDepth.y = meanDepth.y,
1521822505090:N = rep(c(1,2,3),7),
1521822505090:Locus = lociLabels))
1521822505103:# data.to.plot <- inData[inData$n_best_prof == prof, ]
1521822505103:# data.to.plot <- inData[inData$Locus == "abcZ", ]
1521822505104:# data.to.plot <- filter(inData, Locus == "abcZ", Allele == "abcZ_2")
1521822505104:# data.to.plot <- longData
1521822505104:# n.Alleles    <- length(unique(data.to.plot$Allele))
1521822505104:n.Alleles    <- length(unique(data.to.plot$Locus))
1521822505105:h.factor     <- 1.2
1521822505106:if (n.Alleles == 1)
1521822505106:h.factor <- 1.8
1521822505106:height       <- n.Alleles * h.factor
1521822505107:width        <- 6
1521822505107:# depth.plot   <- plotDepths(data.to.plot)
1521822505108:colourCount = length(unique(data.to.plot$Allele))
1521822505109:getPalette = colorRampPalette(brewer.pal(7, "Set1"))
1521822505110:x.limits <- seq(0, max.x, 100)
1521822505111:y.limits <- seq(0, max.y, 20)
1521822505113:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521822505113:y = kmerDepth),
1521822505113:size = 0.2)
1521822505114:d.plot <- d.plot + geom_area(alpha = 0.6,
1521822505115:aes(color = Allele,
1521822505115:# alpha = N,
1521822505116:fill = Allele
1521822505116:))
1521822505119:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521822505119:# d.plot <- d.plot + scale_color_hue(l = 40)
1521822505119:d.plot <- d.plot + geom_text(data = labelsData,
1521822505120:aes(x = name.x,
1521822505120:y = name.y,
1521822505120:label = Allele),
1521822505121:color = "#333333")
1521822505123:d.plot <- d.plot + geom_text(data = labelsData,
1521822505124:size = 3,
1521822505124:hjust = "left",
1521822505124:aes(x = cov.x,
1521822505125:y = cov.y,
1521822505125:label = cov),
1521822505125:color = "#333333")
1521822505128:d.plot <- d.plot + geom_text(data = labelsData,
1521822505128:size = 3,
1521822505129:hjust = "left",
1521822505129:aes(x = meanDepth.x,
1521822505129:y = meanDepth.y,
1521822505129:label = meanDepth),
1521822505130:color = "#333333")
1521822505132:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521822505134:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521822505134:expand = c(0, 2.0))
1521822505135:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521822505136:#                                     expand = c(0, 2))
1521822505136:# if (colourCount > 9) {
1521822505136:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521822505137:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521822505137:# } else {
1521822505137:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521822505137:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521822505138:# }
1521822505138:d.plot <- d.plot + theme_bw()
1521822505142:d.plot <- d.plot + labs(title = "K-mer Depth",
1521822505142:subtitle = basename(input.file),
1521822505143:x     = "Position along sequence (bp)",
1521822505143:y     = "k-mer Depth")
1521822505144:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521822505145:# color = FALSE)
1521822505145:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521822505145:plot.subtitle = element_text(hjust = 0.5),
1521822505145:axis.text.x = element_text(angle = 50,
1521822505146:vjust = 1,
1521822505146:hjust = 1,
1521822505146:size = 7))
1521822505149:d.plot
1521822528342:data.to.plot <- inData
1521822528345:max.x <- max(data.to.plot$Position)
1521822528347:max.y <- max(data.to.plot$Depth)
1521822528349:alleles     <- unique(inData$Allele)
1521822528351:loci        <- as.character(unique(inData$Locus))
1521822528352:lociLabels  <- c()
1521822528354:name.x      <- c()
1521822528355:name.y      <- c()
1521822528356:cov.x       <- c()
1521822528357:cov.y       <- c()
1521822528358:covs        <- c()
1521822528359:meanDepths  <- c()
1521822528360:meanDepth.x <- c()
1521822528361:meanDepth.y <- c()
1521822528362:for (i in loci) {
1521822528362:lociLabels <- c(lociLabels, rep(i, 3))
1521822528363:}
1521822528368:for (allele in alleles) {
1521822528369:maxPos      <- max(inData[inData$Allele == allele, "Position"])
1521822528369:maxDepth    <- max(inData[inData$Allele == allele, "kmerDepth"])
1521822528370:name.x      <- c(name.x, (maxPos / 2))
1521822528370:name.y      <- c(name.y, (maxDepth * 0.2))
1521822528371:cov.x       <- c(cov.x, max.x * 0.05)
1521822528371:cov.y       <- c(cov.y, maxDepth * 0.9)
1521822528372:covs        <- c(covs, unique(inData[inData$Allele == allele, "Coverage"]))
1521822528373:meanDepths  <- c(meanDepths, unique(inData[inData$Allele == allele, "MeanKmerDepth"]))
1521822528373:meanDepth.x <- c(meanDepth.x, max.x * 0.30)
1521822528374:meanDepth.y <- c(meanDepth.y, maxDepth * 0.9)
1521822528374:}
1521822528444:# (labelsData <- data.frame(Allele = alleles, name.x = x, name.y = y))
1521822528444:# data.to.plot <- left_join(data.to.plot, labelsData)
1521822528445:(labelsData <- data.frame(Allele = alleles,
1521822528445:name.x = name.x,
1521822528445:name.y = name.y,
1521822528446:cov = paste0("cov = ", format(round(covs, 1), nsmall = 1), "%"),
1521822528446:cov.x = cov.x, cov.y = cov.y,
1521822528447:meanDepth = paste0("md = ", format(round(meanDepths, 1), nsmall = 1)),
1521822528447:meanDepth.x = meanDepth.x, meanDepth.y = meanDepth.y,
1521822528447:N = rep(c(1,2,3),7),
1521822528448:Locus = lociLabels))
1521822528462:# data.to.plot <- inData[inData$n_best_prof == prof, ]
1521822528463:# data.to.plot <- inData[inData$Locus == "abcZ", ]
1521822528463:# data.to.plot <- filter(inData, Locus == "abcZ", Allele == "abcZ_2")
1521822528463:# data.to.plot <- longData
1521822528464:# n.Alleles    <- length(unique(data.to.plot$Allele))
1521822528464:n.Alleles    <- length(unique(data.to.plot$Locus))
1521822528465:h.factor     <- 1.2
1521822528465:if (n.Alleles == 1)
1521822528466:h.factor <- 1.8
1521822528466:height       <- n.Alleles * h.factor
1521822528467:width        <- 6
1521822528467:# depth.plot   <- plotDepths(data.to.plot)
1521822528468:colourCount = length(unique(data.to.plot$Allele))
1521822528469:getPalette = colorRampPalette(brewer.pal(7, "Set1"))
1521822528471:x.limits <- seq(0, max.x, 100)
1521822528472:y.limits <- seq(0, max.y, 20)
1521822528474:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521822528474:y = kmerDepth),
1521822528475:size = 0.2)
1521822528476:d.plot <- d.plot + geom_area(alpha = 0.6,
1521822528476:aes(color = Allele,
1521822528477:# alpha = N,
1521822528477:fill = Allele
1521822528477:))
1521822528480:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521822528480:# d.plot <- d.plot + scale_color_hue(l = 40)
1521822528481:d.plot <- d.plot + geom_text(data = labelsData,
1521822528481:aes(x = name.x,
1521822528481:y = name.y,
1521822528482:label = Allele),
1521822528482:color = "#333333")
1521822528485:d.plot <- d.plot + geom_text(data = labelsData,
1521822528485:size = 3,
1521822528485:hjust = "left",
1521822528486:aes(x = cov.x,
1521822528486:y = cov.y,
1521822528486:label = cov),
1521822528487:color = "#333333")
1521822528489:d.plot <- d.plot + geom_text(data = labelsData,
1521822528490:size = 3,
1521822528490:hjust = "left",
1521822528490:aes(x = meanDepth.x,
1521822528491:y = meanDepth.y,
1521822528491:label = meanDepth),
1521822528491:color = "#333333")
1521822528494:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521822528496:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521822528496:expand = c(0, 2.0))
1521822528497:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521822528497:#                                     expand = c(0, 2))
1521822528498:# if (colourCount > 9) {
1521822528498:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521822528498:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521822528499:# } else {
1521822528499:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521822528499:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521822528500:# }
1521822528500:d.plot <- d.plot + theme_bw()
1521822528505:d.plot <- d.plot + labs(title = "K-mer Depth",
1521822528505:subtitle = basename(input.file),
1521822528506:x     = "Position along sequence (bp)",
1521822528506:y     = "k-mer Depth")
1521822528508:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521822528508:# color = FALSE)
1521822528508:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521822528509:plot.subtitle = element_text(hjust = 0.5),
1521822528509:axis.text.x = element_text(angle = 50,
1521822528509:vjust = 1,
1521822528510:hjust = 1,
1521822528510:size = 7))
1521822528513:d.plot
1521822692302:data.to.plot <- inData
1521822692303:max.x <- max(data.to.plot$Position)
1521822692304:max.y <- max(data.to.plot$Depth)
1521822692305:alleles     <- unique(inData$Allele)
1521822692305:loci        <- as.character(unique(inData$Locus))
1521822692306:lociLabels  <- c()
1521822692307:name.x      <- c()
1521822692307:name.y      <- c()
1521822692307:cov.x       <- c()
1521822692308:cov.y       <- c()
1521822692308:covs        <- c()
1521822692309:meanDepths  <- c()
1521822692309:meanDepth.x <- c()
1521822692310:meanDepth.y <- c()
1521822692310:for (i in loci) {
1521822692310:lociLabels <- c(lociLabels, rep(i, 3))
1521822692311:}
1521822692314:for (allele in alleles) {
1521822692315:maxPos      <- max(inData[inData$Allele == allele, "Position"])
1521822692315:maxDepth    <- max(inData[inData$Allele == allele, "kmerDepth"])
1521822692315:name.x      <- c(name.x, (maxPos / 2))
1521822692316:name.y      <- c(name.y, (maxDepth * 0.2))
1521822692316:cov.x       <- c(cov.x, max.x * 0.05)
1521822692316:cov.y       <- c(cov.y, maxDepth * 0.9)
1521822692316:covs        <- c(covs, unique(inData[inData$Allele == allele, "Coverage"]))
1521822692317:meanDepths  <- c(meanDepths, unique(inData[inData$Allele == allele, "MeanKmerDepth"]))
1521822692318:meanDepth.x <- c(meanDepth.x, max.x * 0.30)
1521822692318:meanDepth.y <- c(meanDepth.y, maxDepth * 0.9)
1521822692319:}
1521822692410:# (labelsData <- data.frame(Allele = alleles, name.x = x, name.y = y))
1521822692410:# data.to.plot <- left_join(data.to.plot, labelsData)
1521822692411:(labelsData <- data.frame(Allele = alleles,
1521822692411:name.x = name.x,
1521822692412:name.y = name.y,
1521822692412:cov = paste0("cov = ", format(round(covs, 1), nsmall = 1), "%  ", paste0("md = ", format(round(meanDepths, 1), nsmall = 1))),
1521822692413:cov.x = cov.x, cov.y = cov.y,
1521822692413:meanDepth = paste0("md = ", format(round(meanDepths, 1), nsmall = 1)),
1521822692414:meanDepth.x = meanDepth.x, meanDepth.y = meanDepth.y,
1521822692414:N = rep(c(1,2,3),7),
1521822692415:Locus = lociLabels))
1521822692431:# data.to.plot <- inData[inData$n_best_prof == prof, ]
1521822692432:# data.to.plot <- inData[inData$Locus == "abcZ", ]
1521822692432:# data.to.plot <- filter(inData, Locus == "abcZ", Allele == "abcZ_2")
1521822692432:# data.to.plot <- longData
1521822692433:# n.Alleles    <- length(unique(data.to.plot$Allele))
1521822692433:n.Alleles    <- length(unique(data.to.plot$Locus))
1521822692434:h.factor     <- 1.2
1521822692434:if (n.Alleles == 1)
1521822692434:h.factor <- 1.8
1521822692435:height       <- n.Alleles * h.factor
1521822692435:width        <- 6
1521822692436:# depth.plot   <- plotDepths(data.to.plot)
1521822692437:colourCount = length(unique(data.to.plot$Allele))
1521822692438:getPalette = colorRampPalette(brewer.pal(7, "Set1"))
1521822692440:x.limits <- seq(0, max.x, 100)
1521822692440:y.limits <- seq(0, max.y, 20)
1521822692441:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521822692442:y = kmerDepth),
1521822692442:size = 0.2)
1521822692443:d.plot <- d.plot + geom_area(alpha = 0.6,
1521822692443:aes(color = Allele,
1521822692443:# alpha = N,
1521822692444:fill = Allele
1521822692444:))
1521822692446:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521822692447:# d.plot <- d.plot + scale_color_hue(l = 40)
1521822692447:d.plot <- d.plot + geom_text(data = labelsData,
1521822692447:aes(x = name.x,
1521822692448:y = name.y,
1521822692448:label = Allele),
1521822692449:color = "#333333")
1521822692453:d.plot <- d.plot + geom_text(data = labelsData,
1521822692453:size = 3,
1521822692453:hjust = "left",
1521822692454:aes(x = cov.x,
1521822692454:y = cov.y,
1521822692455:label = cov),
1521822692455:color = "#333333")
1521822692460:# d.plot <- d.plot + geom_text(data = labelsData,
1521822692460:#                              size = 3,
1521822692460:#                              hjust = "left",
1521822692461:#                              aes(x = meanDepth.x,
1521822692461:#                                  y = meanDepth.y,
1521822692462:#                                  label = meanDepth),
1521822692462:#                              color = "#333333")
1521822692463:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521822692465:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521822692465:expand = c(0, 2.0))
1521822692467:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521822692467:#                                     expand = c(0, 2))
1521822692468:# if (colourCount > 9) {
1521822692469:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521822692469:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521822692470:# } else {
1521822692470:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521822692470:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521822692471:# }
1521822692471:d.plot <- d.plot + theme_bw()
1521822692480:d.plot <- d.plot + labs(title = "K-mer Depth",
1521822692480:subtitle = basename(input.file),
1521822692481:x     = "Position along sequence (bp)",
1521822692481:y     = "k-mer Depth")
1521822692483:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521822692484:# color = FALSE)
1521822692484:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521822692485:plot.subtitle = element_text(hjust = 0.5),
1521822692485:axis.text.x = element_text(angle = 50,
1521822692486:vjust = 1,
1521822692486:hjust = 1,
1521822692487:size = 7))
1521822692491:d.plot
1521823272348:data.to.plot <- inData
1521823272349:max.x <- max(data.to.plot$Position)
1521823272350:max.y <- max(data.to.plot$Depth)
1521823272351:alleles     <- unique(inData$Allele)
1521823272352:loci        <- as.character(unique(inData$Locus))
1521823272353:lociLabels  <- c()
1521823272353:name.x      <- c()
1521823272354:name.y      <- c()
1521823272354:cov.x       <- c()
1521823272355:cov.y       <- c()
1521823272355:covs        <- c()
1521823272355:meanDepths  <- c()
1521823272356:meanDepth.x <- c()
1521823272356:meanDepth.y <- c()
1521823272357:for (i in loci) {
1521823272357:lociLabels <- c(lociLabels, rep(i, 3))
1521823272358:}
1521823272363:for (allele in alleles) {
1521823272363:maxPos      <- max(inData[inData$Allele == allele, "Position"])
1521823272364:maxDepth    <- max(inData[inData$Allele == allele, "kmerDepth"])
1521823272364:name.x      <- c(name.x, (maxPos / 2))
1521823272365:name.y      <- c(name.y, (maxDepth * 0.2))
1521823272365:cov.x       <- c(cov.x, max.x * 0.05)
1521823272365:cov.y       <- c(cov.y, maxDepth * 0.9)
1521823272366:covs        <- c(covs, unique(inData[inData$Allele == allele, "Coverage"]))
1521823272366:meanDepths  <- c(meanDepths, unique(inData[inData$Allele == allele, "MeanKmerDepth"]))
1521823272366:meanDepth.x <- c(meanDepth.x, max.x * 0.30)
1521823272366:meanDepth.y <- c(meanDepth.y, maxDepth * 0.9)
1521823272367:}
1521823272413:# (labelsData <- data.frame(Allele = alleles, name.x = x, name.y = y))
1521823272413:# data.to.plot <- left_join(data.to.plot, labelsData)
1521823272414:(labelsData <- data.frame(Allele = alleles,
1521823272414:name.x = name.x,
1521823272414:name.y = name.y,
1521823272415:cov = paste0("cov=", format(round(covs, 1), nsmall = 1), "%  ", paste0("md=", format(round(meanDepths, 1), nsmall = 1))),
1521823272415:cov.x = cov.x, cov.y = cov.y,
1521823272415:meanDepth = paste0("md = ", format(round(meanDepths, 1), nsmall = 1)),
1521823272416:meanDepth.x = meanDepth.x, meanDepth.y = meanDepth.y,
1521823272416:N = rep(c(1,2,3),7),
1521823272416:Locus = lociLabels))
1521823272428:# data.to.plot <- inData[inData$n_best_prof == prof, ]
1521823272428:# data.to.plot <- inData[inData$Locus == "abcZ", ]
1521823272428:# data.to.plot <- filter(inData, Locus == "abcZ", Allele == "abcZ_2")
1521823272429:# data.to.plot <- longData
1521823272429:# n.Alleles    <- length(unique(data.to.plot$Allele))
1521823272429:n.Alleles    <- length(unique(data.to.plot$Locus))
1521823272430:h.factor     <- 1.2
1521823272430:if (n.Alleles == 1)
1521823272431:h.factor <- 1.8
1521823272431:height       <- n.Alleles * h.factor
1521823272432:width        <- 6
1521823272432:# depth.plot   <- plotDepths(data.to.plot)
1521823272433:colourCount = length(unique(data.to.plot$Allele))
1521823272433:getPalette = colorRampPalette(brewer.pal(7, "Set1"))
1521823272435:x.limits <- seq(0, max.x, 100)
1521823272435:y.limits <- seq(0, max.y, 20)
1521823272437:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521823272437:y = kmerDepth),
1521823272437:size = 0.2)
1521823272438:d.plot <- d.plot + geom_area(alpha = 0.6,
1521823272439:aes(color = Allele,
1521823272439:# alpha = N,
1521823272439:fill = Allele
1521823272439:))
1521823272443:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521823272443:# d.plot <- d.plot + scale_color_hue(l = 40)
1521823272443:d.plot <- d.plot + geom_text(data = labelsData,
1521823272444:aes(x = name.x,
1521823272444:y = name.y,
1521823272444:label = Allele),
1521823272445:color = "#333333")
1521823272447:d.plot <- d.plot + geom_text(data = labelsData,
1521823272447:size = 3,
1521823272448:hjust = "left",
1521823272448:aes(x = cov.x,
1521823272448:y = cov.y,
1521823272449:label = cov),
1521823272449:color = "#333333")
1521823272451:# d.plot <- d.plot + geom_text(data = labelsData,
1521823272452:#                              size = 3,
1521823272452:#                              hjust = "left",
1521823272453:#                              aes(x = meanDepth.x,
1521823272453:#                                  y = meanDepth.y,
1521823272453:#                                  label = meanDepth),
1521823272453:#                              color = "#333333")
1521823272454:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521823272455:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521823272455:expand = c(0, 2.0))
1521823272456:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521823272457:#                                     expand = c(0, 2))
1521823272457:# if (colourCount > 9) {
1521823272458:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521823272458:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521823272459:# } else {
1521823272459:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521823272459:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521823272459:# }
1521823272460:d.plot <- d.plot + theme_bw()
1521823272464:d.plot <- d.plot + labs(title = "K-mer Depth",
1521823272465:subtitle = basename(input.file),
1521823272465:x     = "Position along sequence (bp)",
1521823272465:y     = "k-mer Depth")
1521823272466:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521823272467:# color = FALSE)
1521823272467:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521823272467:plot.subtitle = element_text(hjust = 0.5),
1521823272468:axis.text.x = element_text(angle = 50,
1521823272468:vjust = 1,
1521823272468:hjust = 1,
1521823272468:size = 7))
1521823272471:d.plot
1521823321683:data.to.plot <- inData
1521823321685:max.x <- max(data.to.plot$Position)
1521823321686:max.y <- max(data.to.plot$Depth)
1521823321688:alleles     <- unique(inData$Allele)
1521823321690:loci        <- as.character(unique(inData$Locus))
1521823321692:lociLabels  <- c()
1521823321693:name.x      <- c()
1521823321694:name.y      <- c()
1521823321695:cov.x       <- c()
1521823321696:cov.y       <- c()
1521823321696:covs        <- c()
1521823321697:meanDepths  <- c()
1521823321698:meanDepth.x <- c()
1521823321698:meanDepth.y <- c()
1521823321699:for (i in loci) {
1521823321700:lociLabels <- c(lociLabels, rep(i, 3))
1521823321700:}
1521823321705:for (allele in alleles) {
1521823321705:maxPos      <- max(inData[inData$Allele == allele, "Position"])
1521823321706:maxDepth    <- max(inData[inData$Allele == allele, "kmerDepth"])
1521823321706:name.x      <- c(name.x, (maxPos / 2))
1521823321707:name.y      <- c(name.y, (maxDepth * 0.2))
1521823321707:cov.x       <- c(cov.x, max.x * 0.05)
1521823321708:cov.y       <- c(cov.y, maxDepth * 0.9)
1521823321708:covs        <- c(covs, unique(inData[inData$Allele == allele, "Coverage"]))
1521823321709:meanDepths  <- c(meanDepths, unique(inData[inData$Allele == allele, "MeanKmerDepth"]))
1521823321709:meanDepth.x <- c(meanDepth.x, max.x * 0.30)
1521823321709:meanDepth.y <- c(meanDepth.y, maxDepth * 0.9)
1521823321710:}
1521823321768:# (labelsData <- data.frame(Allele = alleles, name.x = x, name.y = y))
1521823321769:# data.to.plot <- left_join(data.to.plot, labelsData)
1521823321769:(labelsData <- data.frame(Allele = alleles,
1521823321769:name.x = name.x,
1521823321770:name.y = name.y,
1521823321770:cov = paste0("cov=", format(round(covs, 1), nsmall = 1), "%  ", paste0("md=", format(round(meanDepths, 1), nsmall = 1))),
1521823321770:cov.x = cov.x, cov.y = cov.y,
1521823321771:meanDepth = paste0("md = ", format(round(meanDepths, 1), nsmall = 1)),
1521823321771:meanDepth.x = meanDepth.x, meanDepth.y = meanDepth.y,
1521823321771:N = rep(c(1,2,3),7),
1521823321772:Locus = lociLabels))
1521823321784:# data.to.plot <- inData[inData$n_best_prof == prof, ]
1521823321785:# data.to.plot <- inData[inData$Locus == "abcZ", ]
1521823321785:# data.to.plot <- filter(inData, Locus == "abcZ", Allele == "abcZ_2")
1521823321785:# data.to.plot <- longData
1521823321785:# n.Alleles    <- length(unique(data.to.plot$Allele))
1521823321786:n.Alleles    <- length(unique(data.to.plot$Locus))
1521823321786:h.factor     <- 1.2
1521823321787:if (n.Alleles == 1)
1521823321787:h.factor <- 1.8
1521823321788:height       <- n.Alleles * h.factor
1521823321788:width        <- 6
1521823321789:# depth.plot   <- plotDepths(data.to.plot)
1521823321790:colourCount = length(unique(data.to.plot$Allele))
1521823321790:getPalette = colorRampPalette(brewer.pal(7, "Set1"))
1521823321792:x.limits <- seq(0, max.x, 100)
1521823321792:y.limits <- seq(0, max.y, 20)
1521823321794:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521823321794:y = kmerDepth),
1521823321794:size = 0.2)
1521823321795:d.plot <- d.plot + geom_area(alpha = 0.6,
1521823321796:aes(color = Allele,
1521823321796:# alpha = N,
1521823321796:fill = Allele
1521823321796:))
1521823321799:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521823321800:# d.plot <- d.plot + scale_color_hue(l = 40)
1521823321800:d.plot <- d.plot + geom_text(data = labelsData,
1521823321800:aes(x = name.x,
1521823321801:y = name.y,
1521823321801:label = Allele),
1521823321801:color = "#333333")
1521823321804:d.plot <- d.plot + geom_text(data = labelsData,
1521823321804:size = 3,
1521823321805:hjust = "left",
1521823321805:aes(x = cov.x,
1521823321805:y = cov.y,
1521823321805:label = cov),
1521823321806:color = "#333333")
1521823321808:# d.plot <- d.plot + geom_text(data = labelsData,
1521823321808:#                              size = 3,
1521823321809:#                              hjust = "left",
1521823321809:#                              aes(x = meanDepth.x,
1521823321809:#                                  y = meanDepth.y,
1521823321810:#                                  label = meanDepth),
1521823321810:#                              color = "#333333")
1521823321810:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521823321811:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521823321812:expand = c(0, 2.0))
1521823321813:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521823321813:#                                     expand = c(0, 2))
1521823321813:# if (colourCount > 9) {
1521823321814:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521823321814:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521823321814:# } else {
1521823321814:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521823321815:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521823321815:# }
1521823321815:d.plot <- d.plot + theme_bw()
1521823321820:d.plot <- d.plot + labs(title = "K-mer Depth",
1521823321821:subtitle = basename(input.file),
1521823321821:x     = "Position along sequence (bp)",
1521823321821:y     = "k-mer Depth")
1521823321823:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521823321823:# color = FALSE)
1521823321824:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521823321824:plot.subtitle = element_text(hjust = 0.5),
1521823321824:axis.text.x = element_text(angle = 50,
1521823321824:vjust = 1,
1521823321825:hjust = 1,
1521823321825:size = 7))
1521823321828:d.plot
1521823582861:data.to.plot <- inData
1521823582863:max.x <- max(data.to.plot$Position)
1521823582864:max.y <- max(data.to.plot$Depth)
1521823582865:alleles     <- unique(inData$Allele)
1521823582866:loci        <- as.character(unique(inData$Locus))
1521823582867:lociLabels  <- c()
1521823582868:name.x      <- c()
1521823582868:name.y      <- c()
1521823582869:info.x       <- c()
1521823582870:info.y       <- c()
1521823582870:covs        <- c()
1521823582871:meanDepths  <- c()
1521823582871:meanDepth.x <- c()
1521823582872:meanDepth.y <- c()
1521823582873:for (i in loci) {
1521823582874:lociLabels <- c(lociLabels, rep(i, 3))
1521823582874:}
1521823582878:for (allele in alleles) {
1521823582878:maxPos      <- max(inData[inData$Allele == allele, "Position"])
1521823582879:maxDepth    <- max(inData[inData$Allele == allele, "kmerDepth"])
1521823582879:name.x      <- c(name.x, (maxPos / 2))
1521823582880:name.y      <- c(name.y, (maxDepth * 0.2))
1521823582880:info.x       <- c(info.x, max.x * 0.05)
1521823582881:info.y       <- c(info.y, maxDepth * 0.9)
1521823582881:covs        <- c(covs, unique(inData[inData$Allele == allele, "Coverage"]))
1521823582881:meanDepths  <- c(meanDepths, unique(inData[inData$Allele == allele, "MeanKmerDepth"]))
1521823582882:# meanDepth.x <- c(meanDepth.x, max.x * 0.30)
1521823582882:# meanDepth.y <- c(meanDepth.y, maxDepth * 0.9)
1521823582883:}
1521823582940:# (labelsData <- data.frame(Allele = alleles, name.x = x, name.y = y))
1521823582940:# data.to.plot <- left_join(data.to.plot, labelsData)
1521823582940:(labelsData <- data.frame(Allele = alleles,
1521823582941:name.x = name.x,
1521823582941:name.y = name.y,
1521823582941:info = paste0("cov=", format(round(covs, 1), nsmall = 1), "%  ", paste0("md=", format(round(meanDepths, 1), nsmall = 1))),
1521823582942:info.x = info.x, info.y = info.y,
1521823582942:# meanDepth = paste0("md = ", format(round(meanDepths, 1), nsmall = 1)),
1521823582943:# meanDepth.x = meanDepth.x, meanDepth.y = meanDepth.y,
1521823582943:N = rep(c(1,2,3),7),
1521823582943:Locus = lociLabels))
1521823582952:# data.to.plot <- inData[inData$n_best_prof == prof, ]
1521823582952:# data.to.plot <- inData[inData$Locus == "abcZ", ]
1521823582952:# data.to.plot <- filter(inData, Locus == "abcZ", Allele == "abcZ_2")
1521823582952:# data.to.plot <- longData
1521823582953:# n.Alleles    <- length(unique(data.to.plot$Allele))
1521823582953:n.Alleles    <- length(unique(data.to.plot$Locus))
1521823582954:h.factor     <- 1.2
1521823582954:if (n.Alleles == 1)
1521823582954:h.factor <- 1.8
1521823582955:height       <- n.Alleles * h.factor
1521823582955:width        <- 6
1521823582956:# depth.plot   <- plotDepths(data.to.plot)
1521823582957:colourCount = length(unique(data.to.plot$Allele))
1521823582958:getPalette = colorRampPalette(brewer.pal(7, "Set1"))
1521823582959:x.limits <- seq(0, max.x, 100)
1521823582960:y.limits <- seq(0, max.y, 20)
1521823582961:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521823582961:y = kmerDepth),
1521823582962:size = 0.2)
1521823582963:d.plot <- d.plot + geom_area(alpha = 0.6,
1521823582963:aes(color = Allele,
1521823582963:# alpha = N,
1521823582964:fill = Allele
1521823582964:))
1521823582966:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521823582967:# d.plot <- d.plot + scale_color_hue(l = 40)
1521823582967:d.plot <- d.plot + geom_text(data = labelsData,
1521823582967:aes(x = name.x,
1521823582968:y = name.y,
1521823582968:label = Allele),
1521823582968:color = "#333333")
1521823582971:d.plot <- d.plot + geom_text(data = labelsData,
1521823582971:size = 3,
1521823582971:hjust = "left",
1521823582972:aes(x = info.x,
1521823582972:y = info.y,
1521823582972:label = info),
1521823582973:color = "#222222")
1521823582975:# d.plot <- d.plot + geom_text(data = labelsData,
1521823582975:#                              size = 3,
1521823582976:#                              hjust = "left",
1521823582976:#                              aes(x = meanDepth.x,
1521823582976:#                                  y = meanDepth.y,
1521823582977:#                                  label = meanDepth),
1521823582977:#                              color = "#333333")
1521823582977:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521823582979:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521823582979:expand = c(0, 2.0))
1521823582980:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521823582980:#                                     expand = c(0, 2))
1521823582981:# if (colourCount > 9) {
1521823582981:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521823582982:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521823582982:# } else {
1521823582982:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521823582982:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521823582983:# }
1521823582983:d.plot <- d.plot + theme_bw()
1521823582987:d.plot <- d.plot + labs(title = "K-mer Depth",
1521823582987:subtitle = basename(input.file),
1521823582988:x     = "Position along sequence (bp)",
1521823582988:y     = "k-mer Depth")
1521823582989:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521823582989:# color = FALSE)
1521823582990:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521823582990:plot.subtitle = element_text(hjust = 0.5),
1521823582990:axis.info.x = element_text(angle = 50,
1521823582991:vjust = 1,
1521823582991:hjust = 1,
1521823582991:size = 7))
1521823582994:d.plot
1521823620507:data.to.plot <- inData
1521823620510:max.x <- max(data.to.plot$Position)
1521823620512:max.y <- max(data.to.plot$Depth)
1521823620514:alleles     <- unique(inData$Allele)
1521823620516:loci        <- as.character(unique(inData$Locus))
1521823620518:lociLabels  <- c()
1521823620519:name.x      <- c()
1521823620520:name.y      <- c()
1521823620521:info.x       <- c()
1521823620522:info.y       <- c()
1521823620523:covs        <- c()
1521823620524:meanDepths  <- c()
1521823620525:meanDepth.x <- c()
1521823620526:meanDepth.y <- c()
1521823620527:for (i in loci) {
1521823620527:lociLabels <- c(lociLabels, rep(i, 3))
1521823620528:}
1521823620533:for (allele in alleles) {
1521823620534:maxPos      <- max(inData[inData$Allele == allele, "Position"])
1521823620534:maxDepth    <- max(inData[inData$Allele == allele, "kmerDepth"])
1521823620535:name.x      <- c(name.x, (maxPos / 2))
1521823620535:name.y      <- c(name.y, (maxDepth * 0.2))
1521823620536:info.x       <- c(info.x, max.x * 0.05)
1521823620537:info.y       <- c(info.y, maxDepth * 0.9)
1521823620537:covs        <- c(covs, unique(inData[inData$Allele == allele, "Coverage"]))
1521823620538:meanDepths  <- c(meanDepths, unique(inData[inData$Allele == allele, "MeanKmerDepth"]))
1521823620538:# meanDepth.x <- c(meanDepth.x, max.x * 0.30)
1521823620539:# meanDepth.y <- c(meanDepth.y, maxDepth * 0.9)
1521823620539:}
1521823620621:# (labelsData <- data.frame(Allele = alleles, name.x = x, name.y = y))
1521823620621:# data.to.plot <- left_join(data.to.plot, labelsData)
1521823620621:(labelsData <- data.frame(Allele = alleles,
1521823620622:name.x = name.x,
1521823620622:name.y = name.y,
1521823620622:info = paste0("cov=", format(round(covs, 1), nsmall = 1), "%  ", paste0("md=", format(round(meanDepths, 1), nsmall = 1))),
1521823620623:info.x = info.x, info.y = info.y,
1521823620623:# meanDepth = paste0("md = ", format(round(meanDepths, 1), nsmall = 1)),
1521823620623:# meanDepth.x = meanDepth.x, meanDepth.y = meanDepth.y,
1521823620624:N = rep(c(1,2,3),7),
1521823620624:Locus = lociLabels))
1521823620634:# data.to.plot <- inData[inData$n_best_prof == prof, ]
1521823620634:# data.to.plot <- inData[inData$Locus == "abcZ", ]
1521823620635:# data.to.plot <- filter(inData, Locus == "abcZ", Allele == "abcZ_2")
1521823620635:# data.to.plot <- longData
1521823620635:# n.Alleles    <- length(unique(data.to.plot$Allele))
1521823620636:n.Alleles    <- length(unique(data.to.plot$Locus))
1521823620636:h.factor     <- 1.2
1521823620637:if (n.Alleles == 1)
1521823620637:h.factor <- 1.8
1521823620638:height       <- n.Alleles * h.factor
1521823620638:width        <- 6
1521823620639:# depth.plot   <- plotDepths(data.to.plot)
1521823620640:colourCount = length(unique(data.to.plot$Allele))
1521823620640:getPalette = colorRampPalette(brewer.pal(7, "Set1"))
1521823620642:x.limits <- seq(0, max.x, 100)
1521823620642:y.limits <- seq(0, max.y, 20)
1521823620644:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521823620644:y = kmerDepth),
1521823620645:size = 0.2)
1521823620646:d.plot <- d.plot + geom_area(alpha = 0.6,
1521823620646:aes(color = Allele,
1521823620647:# alpha = N,
1521823620647:fill = Allele
1521823620647:))
1521823620650:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521823620651:# d.plot <- d.plot + scale_color_hue(l = 40)
1521823620651:d.plot <- d.plot + geom_text(data = labelsData,
1521823620651:aes(x = name.x,
1521823620652:y = name.y,
1521823620652:label = Allele),
1521823620652:color = "#333333")
1521823620656:d.plot <- d.plot + geom_text(data = labelsData,
1521823620656:size = 3,
1521823620656:hjust = "left",
1521823620657:aes(x = info.x,
1521823620657:y = info.y,
1521823620657:label = info),
1521823620658:color = "#222222")
1521823620662:# d.plot <- d.plot + geom_text(data = labelsData,
1521823620662:#                              size = 3,
1521823620663:#                              hjust = "left",
1521823620664:#                              aes(x = meanDepth.x,
1521823620664:#                                  y = meanDepth.y,
1521823620665:#                                  label = meanDepth),
1521823620665:#                              color = "#333333")
1521823620665:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521823620667:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521823620667:expand = c(0, 2.0))
1521823620668:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521823620669:#                                     expand = c(0, 2))
1521823620669:# if (colourCount > 9) {
1521823620670:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521823620670:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521823620670:# } else {
1521823620670:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521823620671:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521823620671:# }
1521823620671:d.plot <- d.plot + theme_bw()
1521823620677:d.plot <- d.plot + labs(title = "K-mer Depth",
1521823620677:subtitle = basename(input.file),
1521823620677:x     = "Position along sequence (bp)",
1521823620678:y     = "k-mer Depth")
1521823620679:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521823620680:# color = FALSE)
1521823620680:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521823620680:plot.subtitle = element_text(hjust = 0.5),
1521823620681:axis.text.x = element_text(angle = 50,
1521823620681:vjust = 1,
1521823620681:hjust = 1,
1521823620682:size = 7))
1521823620685:d.plot
1521823679451:data.to.plot <- inData
1521823679453:max.x <- max(data.to.plot$Position)
1521823679453:max.y <- max(data.to.plot$Depth)
1521823679455:alleles     <- unique(inData$Allele)
1521823679456:loci        <- as.character(unique(inData$Locus))
1521823679456:lociLabels  <- c()
1521823679457:name.x      <- c()
1521823679458:name.y      <- c()
1521823679458:info.x       <- c()
1521823679459:info.y       <- c()
1521823679459:covs        <- c()
1521823679460:meanDepths  <- c()
1521823679460:meanDepth.x <- c()
1521823679461:meanDepth.y <- c()
1521823679462:for (i in loci) {
1521823679462:lociLabels <- c(lociLabels, rep(i, 3))
1521823679463:}
1521823679466:for (allele in alleles) {
1521823679467:maxPos      <- max(inData[inData$Allele == allele, "Position"])
1521823679467:maxDepth    <- max(inData[inData$Allele == allele, "kmerDepth"])
1521823679468:name.x      <- c(name.x, (maxPos / 2))
1521823679468:name.y      <- c(name.y, (maxDepth * 0.2))
1521823679469:info.x       <- c(info.x, max.x * 0.02)
1521823679469:info.y       <- c(info.y, maxDepth * 0.9)
1521823679469:covs        <- c(covs, unique(inData[inData$Allele == allele, "Coverage"]))
1521823679470:meanDepths  <- c(meanDepths, unique(inData[inData$Allele == allele, "MeanKmerDepth"]))
1521823679470:# meanDepth.x <- c(meanDepth.x, max.x * 0.30)
1521823679470:# meanDepth.y <- c(meanDepth.y, maxDepth * 0.9)
1521823679471:}
1521823679525:# (labelsData <- data.frame(Allele = alleles, name.x = x, name.y = y))
1521823679525:# data.to.plot <- left_join(data.to.plot, labelsData)
1521823679525:(labelsData <- data.frame(Allele = alleles,
1521823679526:name.x = name.x,
1521823679526:name.y = name.y,
1521823679526:info = paste0("cov=", format(round(covs, 1), nsmall = 1), "%  ", paste0("md=", format(round(meanDepths, 1), nsmall = 1))),
1521823679527:info.x = info.x, info.y = info.y,
1521823679527:# meanDepth = paste0("md = ", format(round(meanDepths, 1), nsmall = 1)),
1521823679527:# meanDepth.x = meanDepth.x, meanDepth.y = meanDepth.y,
1521823679528:N = rep(c(1,2,3),7),
1521823679528:Locus = lociLabels))
1521823679538:# data.to.plot <- inData[inData$n_best_prof == prof, ]
1521823679539:# data.to.plot <- inData[inData$Locus == "abcZ", ]
1521823679539:# data.to.plot <- filter(inData, Locus == "abcZ", Allele == "abcZ_2")
1521823679540:# data.to.plot <- longData
1521823679540:# n.Alleles    <- length(unique(data.to.plot$Allele))
1521823679540:n.Alleles    <- length(unique(data.to.plot$Locus))
1521823679541:h.factor     <- 1.2
1521823679542:if (n.Alleles == 1)
1521823679542:h.factor <- 1.8
1521823679543:height       <- n.Alleles * h.factor
1521823679543:width        <- 6
1521823679544:# depth.plot   <- plotDepths(data.to.plot)
1521823679545:colourCount = length(unique(data.to.plot$Allele))
1521823679545:getPalette = colorRampPalette(brewer.pal(7, "Set1"))
1521823679547:x.limits <- seq(0, max.x, 100)
1521823679548:y.limits <- seq(0, max.y, 20)
1521823679549:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521823679550:y = kmerDepth),
1521823679550:size = 0.2)
1521823679551:d.plot <- d.plot + geom_area(alpha = 0.6,
1521823679552:aes(color = Allele,
1521823679552:# alpha = N,
1521823679552:fill = Allele
1521823679553:))
1521823679556:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521823679557:# d.plot <- d.plot + scale_color_hue(l = 40)
1521823679558:d.plot <- d.plot + geom_text(data = labelsData,
1521823679558:aes(x = name.x,
1521823679558:y = name.y,
1521823679559:label = Allele),
1521823679559:color = "#333333")
1521823679563:d.plot <- d.plot + geom_text(data = labelsData,
1521823679563:size = 3,
1521823679564:hjust = "left",
1521823679565:aes(x = info.x,
1521823679565:y = info.y,
1521823679566:label = info),
1521823679566:color = "#222222")
1521823679569:# d.plot <- d.plot + geom_text(data = labelsData,
1521823679570:#                              size = 3,
1521823679570:#                              hjust = "left",
1521823679570:#                              aes(x = meanDepth.x,
1521823679571:#                                  y = meanDepth.y,
1521823679571:#                                  label = meanDepth),
1521823679571:#                              color = "#333333")
1521823679572:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521823679573:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521823679573:expand = c(0, 2.0))
1521823679575:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521823679575:#                                     expand = c(0, 2))
1521823679576:# if (colourCount > 9) {
1521823679576:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521823679576:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521823679577:# } else {
1521823679577:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521823679578:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521823679578:# }
1521823679579:d.plot <- d.plot + theme_bw()
1521823679586:d.plot <- d.plot + labs(title = "K-mer Depth",
1521823679586:subtitle = basename(input.file),
1521823679587:x     = "Position along sequence (bp)",
1521823679587:y     = "k-mer Depth")
1521823679588:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521823679589:# color = FALSE)
1521823679589:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521823679590:plot.subtitle = element_text(hjust = 0.5),
1521823679590:axis.text.x = element_text(angle = 50,
1521823679590:vjust = 1,
1521823679591:hjust = 1,
1521823679591:size = 7))
1521823679594:d.plot
1521823797354:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521823797355:y = kmerDepth),
1521823797356:size = 0.2)
1521823797358:d.plot <- d.plot + geom_area(alpha = 0.6,
1521823797358:aes(color = Allele,
1521823797359:# alpha = N,
1521823797360:fill = Allele
1521823797360:))
1521823797363:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521823797363:# d.plot <- d.plot + scale_color_hue(l = 40)
1521823797363:d.plot <- d.plot + geom_text(data = labelsData,
1521823797364:aes(x = name.x,
1521823797364:y = name.y,
1521823797364:label = Allele),
1521823797364:color = "#333333")
1521823797367:d.plot <- d.plot + geom_text(data = labelsData,
1521823797367:size = 3,
1521823797367:hjust = "left",
1521823797368:aes(x = info.x,
1521823797368:y = info.y,
1521823797368:label = info),
1521823797368:color = "#222222")
1521823797371:# d.plot <- d.plot + geom_text(data = labelsData,
1521823797371:#                              size = 3,
1521823797372:#                              hjust = "left",
1521823797372:#                              aes(x = meanDepth.x,
1521823797373:#                                  y = meanDepth.y,
1521823797373:#                                  label = meanDepth),
1521823797373:#                              color = "#333333")
1521823797374:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521823797375:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521823797375:expand = c(0, 2.0))
1521823797376:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521823797376:#                                     expand = c(0, 2))
1521823797377:# if (colourCount > 9) {
1521823797377:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521823797378:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521823797378:# } else {
1521823797378:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521823797378:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521823797379:# }
1521823797379:d.plot <- d.plot + theme_bw()
1521823797383:d.plot <- d.plot + labs(title = "K-mer Depth",
1521823797384:subtitle = basename(input.file),
1521823797384:x     = "Position along sequence (bp)",
1521823797384:y     = "k-mer Depth")
1521823797386:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521823797386:# color = FALSE)
1521823797386:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521823797387:plot.subtitle = element_text(hjust = 0.5),
1521823797387:axis.text.x = element_text(angle = 50,
1521823797387:vjust = 1,
1521823797388:hjust = 1,
1521823797388:size = 7),
1521823797388:legend.position = "none")
1521823797391:d.plot
1521824041247:unique(data.to.plot$N)
1521824080997:length(unique(data.to.plot$Locus))
1521824126767:n.Loci   <- length(unique(data.to.plot$Locus))
1521824127543:h.factor <- 1.2
1521824163872:n.Loci    <- length(unique(data.to.plot$Locus))
1521824164173:n.Alleles <- length(unique(data.to.plot$N))
1521824165488:n.Alleles
1521824168225:n.Loci
1521824194204:nLoci    <- length(unique(data.to.plot$Locus))
1521824194416:nAlleles <- length(unique(data.to.plot$N))
1521824223571:nLoci
1521824332641:data.to.plot <- inData
1521824332644:max.x <- max(data.to.plot$Position)
1521824332646:max.y <- max(data.to.plot$Depth)
1521824332649:nLoci    <- length(unique(data.to.plot$Locus))
1521824332651:nAlleles <- length(unique(data.to.plot$N))
1521824332653:alleles     <- unique(inData$Allele)
1521824332655:loci        <- as.character(unique(inData$Locus))
1521824332656:lociLabels  <- c()
1521824332657:name.x      <- c()
1521824332657:name.y      <- c()
1521824332658:info.x      <- c()
1521824332659:info.y      <- c()
1521824332660:covs        <- c()
1521824332660:meanDepths  <- c()
1521824332661:meanDepth.x <- c()
1521824332662:meanDepth.y <- c()
1521824332663:for (i in loci) {
1521824332663:lociLabels <- c(lociLabels, rep(i, 3))
1521824332664:}
1521824332671:for (allele in alleles) {
1521824332672:maxPos      <- max(data.to.plot[data.to.plot$Allele == allele, "Position"])
1521824332672:maxDepth    <- max(data.to.plot[data.to.plot$Allele == allele, "kmerDepth"])
1521824332673:name.x      <- c(name.x, (maxPos / 2))
1521824332674:name.y      <- c(name.y, (maxDepth * 0.2))
1521824332675:info.x       <- c(info.x, max.x * 0.02)
1521824332676:info.y       <- c(info.y, maxDepth * 0.9)
1521824332677:covs        <- c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"]))
1521824332677:meanDepths  <- c(meanDepths, unique(data.to.plot[data.to.plot$Allele == allele, "MeanKmerDepth"]))
1521824332678:# meanDepth.x <- c(meanDepth.x, max.x * 0.30)
1521824332679:# meanDepth.y <- c(meanDepth.y, maxDepth * 0.9)
1521824332680:}
1521824332773:# (labelsData <- data.frame(Allele = alleles, name.x = x, name.y = y))
1521824332773:# data.to.plot <- left_join(data.to.plot, labelsData)
1521824332774:(labelsData <- data.frame(Allele = alleles,
1521824332775:name.x = name.x,
1521824332775:name.y = name.y,
1521824332776:info = paste0("cov=", format(round(covs, 1), nsmall = 1), "%  ", paste0("md=", format(round(meanDepths, 1), nsmall = 1))),
1521824332776:info.x = info.x, info.y = info.y,
1521824332777:# meanDepth = paste0("md = ", format(round(meanDepths, 1), nsmall = 1)),
1521824332777:# meanDepth.x = meanDepth.x, meanDepth.y = meanDepth.y,
1521824332778:N = rep(unique(data.to.plot$N), nLoci),
1521824332779:Locus = lociLabels))
1521824332795:hFactor  <- 1.2
1521824332796:wFactor  <- 1.8
1521824332797:if (nLoci == 1)
1521824332797:hFactor <- 1.8
1521824332798:height       <- nLoci * hFactor
1521824332799:width        <- nAlleles * wFactor
1521824332800:# depth.plot   <- plotDepths(data.to.plot)
1521824332801:colourCount = length(unique(data.to.plot$Allele))
1521824332802:getPalette = colorRampPalette(brewer.pal(7, "Set1"))
1521824332804:x.limits <- seq(0, max.x, 100)
1521824332805:y.limits <- seq(0, max.y, 20)
1521824332806:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521824332806:y = kmerDepth),
1521824332809:size = 0.2)
1521824332810:d.plot <- d.plot + geom_area(alpha = 0.6,
1521824332811:aes(color = Allele,
1521824332811:# alpha = N,
1521824332812:fill = Allele
1521824332812:))
1521824332815:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521824332815:# d.plot <- d.plot + scale_color_hue(l = 40)
1521824332815:d.plot <- d.plot + geom_text(data = labelsData,
1521824332816:aes(x = name.x,
1521824332816:y = name.y,
1521824332816:label = Allele),
1521824332817:color = "#333333")
1521824332819:d.plot <- d.plot + geom_text(data = labelsData,
1521824332820:size = 3,
1521824332820:hjust = "left",
1521824332820:aes(x = info.x,
1521824332821:y = info.y,
1521824332821:label = info),
1521824332821:color = "#222222")
1521824332826:# d.plot <- d.plot + geom_text(data = labelsData,
1521824332826:#                              size = 3,
1521824332827:#                              hjust = "left",
1521824332828:#                              aes(x = meanDepth.x,
1521824332828:#                                  y = meanDepth.y,
1521824332829:#                                  label = meanDepth),
1521824332829:#                              color = "#333333")
1521824332830:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521824332832:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521824332833:expand = c(0, 2.0))
1521824332834:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521824332835:#                                     expand = c(0, 2))
1521824332836:# if (colourCount > 9) {
1521824332837:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521824332837:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521824332838:# } else {
1521824332838:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521824332839:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521824332839:# }
1521824332840:d.plot <- d.plot + theme_bw()
1521824332848:d.plot <- d.plot + labs(title = "K-mer Depth",
1521824332849:subtitle = basename(input.file),
1521824332849:x     = "Position along sequence (bp)",
1521824332850:y     = "k-mer Depth")
1521824332853:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521824332853:# color = FALSE)
1521824332854:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521824332854:plot.subtitle = element_text(hjust = 0.5),
1521824332855:axis.text.x = element_text(angle = 50,
1521824332855:vjust = 1,
1521824332856:hjust = 1,
1521824332857:size = 7),
1521824332857:legend.position = "none")
1521824332863:d.plot
1521824474907:plotDepth <- function(data.to.plot, labelsData) {
1521824474908:colourCount = length(unique(data.to.plot$Allele))
1521824474909:getPalette = colorRampPalette(brewer.pal(7, "Set1"))
1521824474911:x.limits <- seq(0, max.x, 100)
1521824474911:y.limits <- seq(0, max.y, 20)
1521824474913:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521824474913:y = kmerDepth),
1521824474914:size = 0.2)
1521824474915:d.plot <- d.plot + geom_area(alpha = 0.6,
1521824474915:aes(color = Allele,
1521824474916:# alpha = N,
1521824474917:fill = Allele
1521824474917:))
1521824474918:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521824474919:# d.plot <- d.plot + scale_color_hue(l = 40)
1521824474919:d.plot <- d.plot + geom_text(data = labelsData,
1521824474920:aes(x = name.x,
1521824474920:y = name.y,
1521824474921:label = Allele),
1521824474922:color = "#333333")
1521824474922:d.plot <- d.plot + geom_text(data = labelsData,
1521824474923:size = 3,
1521824474924:hjust = "left",
1521824474924:aes(x = info.x,
1521824474925:y = info.y,
1521824474926:label = info),
1521824474926:color = "#222222")
1521824474927:# d.plot <- d.plot + geom_text(data = labelsData,
1521824474928:#                              size = 3,
1521824474928:#                              hjust = "left",
1521824474929:#                              aes(x = meanDepth.x,
1521824474930:#                                  y = meanDepth.y,
1521824474930:#                                  label = meanDepth),
1521824474931:#                              color = "#333333")
1521824474932:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521824474932:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521824474933:expand = c(0, 2.0))
1521824474934:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521824474934:#                                     expand = c(0, 2))
1521824474936:# if (colourCount > 9) {
1521824474936:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521824474937:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521824474938:# } else {
1521824474938:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521824474939:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521824474940:# }
1521824474940:d.plot <- d.plot + theme_bw()
1521824474941:d.plot <- d.plot + labs(title = "K-mer Depth",
1521824474942:subtitle = basename(input.file),
1521824474942:x     = "Position along sequence (bp)",
1521824474943:y     = "k-mer Depth")
1521824474944:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521824474944:# color = FALSE)
1521824474945:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521824474946:plot.subtitle = element_text(hjust = 0.5),
1521824474946:axis.text.x = element_text(angle = 50,
1521824474947:vjust = 1,
1521824474948:hjust = 1,
1521824474949:size = 7),
1521824474949:legend.position = "none")
1521824474950:d.plot
1521824474951:}
1521824482021:depth.plot   <- plotDepth(data.to.plot)
1521824524032:max.x <- max(data.to.plot$Position)
1521824524549:max.y <- max(data.to.plot$Depth)
1521824525002:x.limits <- seq(0, max.x, 100)
1521824525486:y.limits <- seq(0, max.y, 20)
1521824529345:max.y
1521824534685:max(data.to.plot$Depth)
1521824544330:max(data.to.plot$kmerDepth)
1521824545658:max.x <- max(data.to.plot$Position)
1521824545947:max.y <- max(data.to.plot$kmerDepth)
1521824546591:x.limits <- seq(0, max.x, 100)
1521824546958:y.limits <- seq(0, max.y, 20)
1521824549616:# longData <- inData %>% gather(DepthType, Depth, -c(Allele, Position))
1521824549617:# longData <- inData %>% gather(DepthType, Depth, -c(Allele, Position)) %>%
1521824549617:# filter(DepthType == 'k-mer Depth')
1521824549618:# profiles <- unique(inData$n_best_prof)
1521824549619:# profiles <- c(1)
1521824549620:# ==============================================================
1521824549620:plotDepth <- function(data.to.plot, labelsData) {
1521824549621:colourCount = length(unique(data.to.plot$Allele))
1521824549622:getPalette = colorRampPalette(brewer.pal(7, "Set1"))
1521824549623:max.x <- max(data.to.plot$Position)
1521824549624:max.y <- max(data.to.plot$kmerDepth)
1521824549625:x.limits <- seq(0, max.x, 100)
1521824549626:y.limits <- seq(0, max.y, 20)
1521824549627:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521824549628:y = kmerDepth),
1521824549629:size = 0.2)
1521824549630:d.plot <- d.plot + geom_area(alpha = 0.6,
1521824549630:aes(color = Allele,
1521824549631:# alpha = N,
1521824549632:fill = Allele
1521824549632:))
1521824549633:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521824549634:# d.plot <- d.plot + scale_color_hue(l = 40)
1521824549634:d.plot <- d.plot + geom_text(data = labelsData,
1521824549635:aes(x = name.x,
1521824549636:y = name.y,
1521824549636:label = Allele),
1521824549637:color = "#333333")
1521824549638:d.plot <- d.plot + geom_text(data = labelsData,
1521824549638:size = 3,
1521824549639:hjust = "left",
1521824549640:aes(x = info.x,
1521824549640:y = info.y,
1521824549641:label = info),
1521824549642:color = "#222222")
1521824549642:# d.plot <- d.plot + geom_text(data = labelsData,
1521824549643:#                              size = 3,
1521824549643:#                              hjust = "left",
1521824549644:#                              aes(x = meanDepth.x,
1521824549645:#                                  y = meanDepth.y,
1521824549646:#                                  label = meanDepth),
1521824549647:#                              color = "#333333")
1521824549649:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521824549650:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521824549651:expand = c(0, 2.0))
1521824549652:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521824549653:#                                     expand = c(0, 2))
1521824549655:# if (colourCount > 9) {
1521824549656:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521824549657:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521824549658:# } else {
1521824549659:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521824549660:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521824549662:# }
1521824549663:d.plot <- d.plot + theme_bw()
1521824549664:d.plot <- d.plot + labs(title = "K-mer Depth",
1521824549665:subtitle = basename(input.file),
1521824549666:x     = "Position along sequence (bp)",
1521824549667:y     = "k-mer Depth")
1521824549668:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521824549669:# color = FALSE)
1521824549670:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521824549672:plot.subtitle = element_text(hjust = 0.5),
1521824549673:axis.text.x = element_text(angle = 50,
1521824549674:vjust = 1,
1521824549675:hjust = 1,
1521824549676:size = 7),
1521824549677:legend.position = "none")
1521824549678:d.plot
1521824549679:}
1521824556113:# ==============================================================
1521824556114:data.to.plot <- inData
1521824556115:max.x <- max(data.to.plot$Position)
1521824556116:max.y <- max(data.to.plot$Depth)
1521824556119:nLoci    <- length(unique(data.to.plot$Locus))
1521824556120:nAlleles <- length(unique(data.to.plot$N))
1521824556122:alleles     <- unique(inData$Allele)
1521824556124:loci        <- as.character(unique(inData$Locus))
1521824556126:lociLabels  <- c()
1521824556127:name.x      <- c()
1521824556128:name.y      <- c()
1521824556129:info.x      <- c()
1521824556130:info.y      <- c()
1521824556130:covs        <- c()
1521824556131:meanDepths  <- c()
1521824556132:meanDepth.x <- c()
1521824556133:meanDepth.y <- c()
1521824556134:for (i in loci) {
1521824556134:lociLabels <- c(lociLabels, rep(i, 3))
1521824556135:}
1521824556140:for (allele in alleles) {
1521824556140:maxPos      <- max(data.to.plot[data.to.plot$Allele == allele, "Position"])
1521824556141:maxDepth    <- max(data.to.plot[data.to.plot$Allele == allele, "kmerDepth"])
1521824556141:name.x      <- c(name.x, (maxPos / 2))
1521824556142:name.y      <- c(name.y, (maxDepth * 0.2))
1521824556143:info.x       <- c(info.x, max.x * 0.02)
1521824556143:info.y       <- c(info.y, maxDepth * 0.9)
1521824556144:covs        <- c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"]))
1521824556144:meanDepths  <- c(meanDepths, unique(data.to.plot[data.to.plot$Allele == allele, "MeanKmerDepth"]))
1521824556145:# meanDepth.x <- c(meanDepth.x, max.x * 0.30)
1521824556145:# meanDepth.y <- c(meanDepth.y, maxDepth * 0.9)
1521824556146:}
1521824556244:# (labelsData <- data.frame(Allele = alleles, name.x = x, name.y = y))
1521824556244:# data.to.plot <- left_join(data.to.plot, labelsData)
1521824556245:(labelsData <- data.frame(Allele = alleles,
1521824556245:name.x = name.x,
1521824556245:name.y = name.y,
1521824556246:info = paste0("cov=", format(round(covs, 1), nsmall = 1), "%  ", paste0("md=", format(round(meanDepths, 1), nsmall = 1))),
1521824556246:info.x = info.x, info.y = info.y,
1521824556246:# meanDepth = paste0("md = ", format(round(meanDepths, 1), nsmall = 1)),
1521824556247:# meanDepth.x = meanDepth.x, meanDepth.y = meanDepth.y,
1521824556247:N = rep(unique(data.to.plot$N), nLoci),
1521824556247:Locus = lociLabels))
1521824564589:hFactor  <- 1.2
1521824564887:wFactor  <- 1.8
1521824565097:if (nLoci == 1)
1521824565327:hFactor <- 1.8
1521824565619:height       <- nLoci * hFactor
1521824565952:width        <- nAlleles * wFactor
1521824566357:depth.plot   <- plotDepth(data.to.plot, labelsData)
1521824569729:depth.plot
1521824795652:hFactor  <- 1.2
1521824795653:wFactor  <- 1.8
1521824795654:if (nLoci == 1)
1521824795654:hFactor <- 1.8
1521824795655:height       <- nLoci * hFactor
1521824795656:width        <- nAlleles * wFactor
1521824795658:depth.plot   <- plotDepth(data.to.plot, labelsData)
1521824795684:depth.plot
1521824802456:out.filename <- paste0(out.prefix, "_", i, ".", out.format)
1521824802457:if (out.format == "png") {
1521824802458:ggsave(filename = out.filename, plot = depth.plot,
1521824802458:width  = width,
1521824802458:height = height,
1521824802459:type = "cairo-png",
1521824802459:dpi = 300)
1521824802459:} else {
1521824802460:ggsave(filename = out.filename, plot = depth.plot,
1521824802460:width  = width,
1521824802460:height = height,
1521824802461:dpi = 400)
1521824802461:}
1521824811340:cat("Done! \n")
1521824980067:plotDepth <- function(data.to.plot, labelsData) {
1521824980068:colourCount = length(unique(data.to.plot$Allele))
1521824980068:getPalette = colorRampPalette(brewer.pal(7, "Set1"))
1521824980069:max.x <- max(data.to.plot$Position)
1521824980070:max.y <- max(data.to.plot$kmerDepth)
1521824980070:x.limits <- seq(0, max.x, 100)
1521824980071:y.limits <- seq(0, max.y, 20)
1521824980072:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521824980072:y = kmerDepth),
1521824980073:size = 0.2)
1521824980073:d.plot <- d.plot + geom_area(alpha = 0.6,
1521824980074:aes(color = Allele,
1521824980075:# alpha = N,
1521824980075:fill = Allele
1521824980076:))
1521824980076:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521824980077:# d.plot <- d.plot + scale_color_hue(l = 40)
1521824980078:d.plot <- d.plot + geom_text(data = labelsData,
1521824980078:size = 2,
1521824980079:aes(x = name.x,
1521824980080:y = name.y,
1521824980080:label = Allele),
1521824980081:color = "#333333")
1521824980082:d.plot <- d.plot + geom_text(data = labelsData,
1521824980082:size = 2,
1521824980083:hjust = "left",
1521824980083:aes(x = info.x,
1521824980084:y = info.y,
1521824980085:label = info),
1521824980085:color = "#222222")
1521824980086:# d.plot <- d.plot + geom_text(data = labelsData,
1521824980086:#                              size = 3,
1521824980087:#                              hjust = "left",
1521824980088:#                              aes(x = meanDepth.x,
1521824980088:#                                  y = meanDepth.y,
1521824980089:#                                  label = meanDepth),
1521824980090:#                              color = "#333333")
1521824980090:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521824980091:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521824980092:expand = c(0, 2.0))
1521824980092:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521824980093:#                                     expand = c(0, 2))
1521824980094:# if (colourCount > 9) {
1521824980095:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521824980096:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521824980096:# } else {
1521824980097:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521824980098:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521824980098:# }
1521824980099:d.plot <- d.plot + theme_bw()
1521824980100:d.plot <- d.plot + labs(title = "K-mer Depth",
1521824980100:subtitle = basename(input.file),
1521824980101:x     = "Position along sequence (bp)",
1521824980102:y     = "k-mer Depth")
1521824980102:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521824980103:# color = FALSE)
1521824980104:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521824980104:plot.subtitle = element_text(hjust = 0.5),
1521824980105:axis.text.x = element_text(angle = 50,
1521824980106:vjust = 1,
1521824980107:hjust = 1,
1521824980108:size = 7),
1521824980108:legend.position = "none")
1521824980109:d.plot
1521824980110:}
1521824980112:# ==============================================================
1521824980113:data.to.plot <- inData
1521824980115:max.x <- max(data.to.plot$Position)
1521824980115:max.y <- max(data.to.plot$Depth)
1521824980117:nLoci    <- length(unique(data.to.plot$Locus))
1521824980118:nAlleles <- length(unique(data.to.plot$N))
1521824980119:alleles     <- unique(inData$Allele)
1521824980120:loci        <- as.character(unique(inData$Locus))
1521824980121:lociLabels  <- c()
1521824980121:name.x      <- c()
1521824980122:name.y      <- c()
1521824980123:info.x      <- c()
1521824980123:info.y      <- c()
1521824980124:covs        <- c()
1521824980124:meanDepths  <- c()
1521824980125:meanDepth.x <- c()
1521824980126:meanDepth.y <- c()
1521824980126:for (i in loci) {
1521824980127:lociLabels <- c(lociLabels, rep(i, 3))
1521824980127:}
1521824980132:for (allele in alleles) {
1521824980132:maxPos      <- max(data.to.plot[data.to.plot$Allele == allele, "Position"])
1521824980133:maxDepth    <- max(data.to.plot[data.to.plot$Allele == allele, "kmerDepth"])
1521824980133:name.x      <- c(name.x, (maxPos / 2))
1521824980133:name.y      <- c(name.y, (maxDepth * 0.2))
1521824980134:info.x       <- c(info.x, max.x * 0.02)
1521824980134:info.y       <- c(info.y, maxDepth * 0.9)
1521824980135:covs        <- c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"]))
1521824980135:meanDepths  <- c(meanDepths, unique(data.to.plot[data.to.plot$Allele == allele, "MeanKmerDepth"]))
1521824980136:# meanDepth.x <- c(meanDepth.x, max.x * 0.30)
1521824980136:# meanDepth.y <- c(meanDepth.y, maxDepth * 0.9)
1521824980136:}
1521824980193:# (labelsData <- data.frame(Allele = alleles, name.x = x, name.y = y))
1521824980194:# data.to.plot <- left_join(data.to.plot, labelsData)
1521824980194:(labelsData <- data.frame(Allele = alleles,
1521824980194:name.x = name.x,
1521824980195:name.y = name.y,
1521824980195:info = paste0("cov=", format(round(covs, 1), nsmall = 1), "%  ", paste0("md=", format(round(meanDepths, 1), nsmall = 1))),
1521824980195:info.x = info.x, info.y = info.y,
1521824980196:# meanDepth = paste0("md = ", format(round(meanDepths, 1), nsmall = 1)),
1521824980196:# meanDepth.x = meanDepth.x, meanDepth.y = meanDepth.y,
1521824980197:N = rep(unique(data.to.plot$N), nLoci),
1521824980197:Locus = lociLabels))
1521824980207:hFactor  <- 1.1
1521824980208:wFactor  <- 2.1
1521824980208:if (nLoci == 1)
1521824980209:hFactor <- 1.8
1521824980209:height       <- nLoci * hFactor
1521824980210:width        <- nAlleles * wFactor
1521824980210:depth.plot   <- plotDepth(data.to.plot, labelsData)
1521824980255:depth.plot
1521824986918:out.filename <- paste0(out.prefix, "_", i, ".", out.format)
1521824986918:if (out.format == "png") {
1521824986919:ggsave(filename = out.filename, plot = depth.plot,
1521824986919:width  = width,
1521824986919:height = height,
1521824986920:type = "cairo-png",
1521824986920:dpi = 300)
1521824986920:} else {
1521824986921:ggsave(filename = out.filename, plot = depth.plot,
1521824986921:width  = width,
1521824986921:height = height,
1521824986922:dpi = 400)
1521824986922:}
1521824993543:cat("Done! \n")
1521825070950:plotDepth <- function(data.to.plot, labelsData) {
1521825070951:colourCount = length(unique(data.to.plot$Allele))
1521825070952:getPalette = colorRampPalette(brewer.pal(7, "Set1"))
1521825070953:max.x <- max(data.to.plot$Position)
1521825070954:max.y <- max(data.to.plot$kmerDepth)
1521825070954:x.limits <- seq(0, max.x, 100)
1521825070955:y.limits <- seq(0, max.y, 20)
1521825070956:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521825070957:y = kmerDepth),
1521825070958:size = 0.2)
1521825070959:d.plot <- d.plot + geom_area(alpha = 0.6,
1521825070960:aes(color = Allele,
1521825070961:# alpha = N,
1521825070961:fill = Allele
1521825070962:))
1521825070963:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521825070964:# d.plot <- d.plot + scale_color_hue(l = 40)
1521825070965:d.plot <- d.plot + geom_text(data = labelsData,
1521825070965:size = 3,
1521825070966:aes(x = name.x,
1521825070967:y = name.y,
1521825070968:label = Allele),
1521825070969:color = "#333333")
1521825070969:d.plot <- d.plot + geom_text(data = labelsData,
1521825070970:size = 2,
1521825070971:hjust = "left",
1521825070972:aes(x = info.x,
1521825070972:y = info.y,
1521825070973:label = info),
1521825070973:color = "#222222")
1521825070974:# d.plot <- d.plot + geom_text(data = labelsData,
1521825070975:#                              size = 3,
1521825070975:#                              hjust = "left",
1521825070976:#                              aes(x = meanDepth.x,
1521825070976:#                                  y = meanDepth.y,
1521825070977:#                                  label = meanDepth),
1521825070978:#                              color = "#333333")
1521825070978:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521825070979:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521825070980:expand = c(0, 2.0))
1521825070980:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521825070981:#                                     expand = c(0, 2))
1521825070982:# if (colourCount > 9) {
1521825070983:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521825070983:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521825070984:# } else {
1521825070985:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521825070985:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521825070986:# }
1521825070987:d.plot <- d.plot + theme_bw()
1521825070988:d.plot <- d.plot + labs(title = "K-mer Depth",
1521825070988:subtitle = basename(input.file),
1521825070989:x     = "Position along sequence (bp)",
1521825070989:y     = "k-mer Depth")
1521825070990:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521825070991:# color = FALSE)
1521825070992:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521825070992:plot.subtitle = element_text(hjust = 0.5),
1521825070993:axis.text.x = element_text(angle = 50,
1521825070994:vjust = 1,
1521825070994:hjust = 1,
1521825070995:size = 7),
1521825070996:legend.position = "none")
1521825070996:d.plot
1521825070997:}
1521825070999:# ==============================================================
1521825070999:data.to.plot <- inData
1521825071000:max.x <- max(data.to.plot$Position)
1521825071001:max.y <- max(data.to.plot$Depth)
1521825071002:nLoci    <- length(unique(data.to.plot$Locus))
1521825071004:nAlleles <- length(unique(data.to.plot$N))
1521825071005:alleles     <- unique(inData$Allele)
1521825071006:loci        <- as.character(unique(inData$Locus))
1521825071007:lociLabels  <- c()
1521825071008:name.x      <- c()
1521825071008:name.y      <- c()
1521825071009:info.x      <- c()
1521825071009:info.y      <- c()
1521825071010:covs        <- c()
1521825071011:meanDepths  <- c()
1521825071011:meanDepth.x <- c()
1521825071012:meanDepth.y <- c()
1521825071012:for (i in loci) {
1521825071013:lociLabels <- c(lociLabels, rep(i, 3))
1521825071013:}
1521825071018:for (allele in alleles) {
1521825071018:maxPos      <- max(data.to.plot[data.to.plot$Allele == allele, "Position"])
1521825071018:maxDepth    <- max(data.to.plot[data.to.plot$Allele == allele, "kmerDepth"])
1521825071019:name.x      <- c(name.x, (maxPos / 2))
1521825071019:name.y      <- c(name.y, (maxDepth * 0.2))
1521825071020:info.x       <- c(info.x, max.x * 0.02)
1521825071020:info.y       <- c(info.y, maxDepth * 0.9)
1521825071021:covs        <- c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"]))
1521825071021:meanDepths  <- c(meanDepths, unique(data.to.plot[data.to.plot$Allele == allele, "MeanKmerDepth"]))
1521825071021:# meanDepth.x <- c(meanDepth.x, max.x * 0.30)
1521825071022:# meanDepth.y <- c(meanDepth.y, maxDepth * 0.9)
1521825071022:}
1521825071078:# (labelsData <- data.frame(Allele = alleles, name.x = x, name.y = y))
1521825071078:# data.to.plot <- left_join(data.to.plot, labelsData)
1521825071078:(labelsData <- data.frame(Allele = alleles,
1521825071079:name.x = name.x,
1521825071079:name.y = name.y,
1521825071080:info = paste0("cov=", format(round(covs, 1), nsmall = 1), "%  ", paste0("md=", format(round(meanDepths, 1), nsmall = 1))),
1521825071080:info.x = info.x, info.y = info.y,
1521825071080:# meanDepth = paste0("md = ", format(round(meanDepths, 1), nsmall = 1)),
1521825071081:# meanDepth.x = meanDepth.x, meanDepth.y = meanDepth.y,
1521825071081:N = rep(unique(data.to.plot$N), nLoci),
1521825071081:Locus = lociLabels))
1521825071092:hFactor  <- 1.1
1521825071093:wFactor  <- 2.5
1521825071094:if (nLoci == 1)
1521825071094:hFactor <- 1.8
1521825071095:height       <- nLoci * hFactor
1521825071095:width        <- nAlleles * wFactor
1521825071096:depth.plot   <- plotDepth(data.to.plot, labelsData)
1521825071149:depth.plot
1521825077884:out.filename <- paste0(out.prefix, "_", i, ".", out.format)
1521825077885:if (out.format == "png") {
1521825077885:ggsave(filename = out.filename, plot = depth.plot,
1521825077886:width  = width,
1521825077886:height = height,
1521825077886:type = "cairo-png",
1521825077887:dpi = 300)
1521825077887:} else {
1521825077888:ggsave(filename = out.filename, plot = depth.plot,
1521825077888:width  = width,
1521825077888:height = height,
1521825077889:dpi = 400)
1521825077889:}
1521825084308:cat("Done! \n")
1521825125321:plotDepth <- function(data.to.plot, labelsData) {
1521825125321:colourCount = length(unique(data.to.plot$Allele))
1521825125322:getPalette = colorRampPalette(brewer.pal(7, "Set1"))
1521825125323:max.x <- max(data.to.plot$Position)
1521825125323:max.y <- max(data.to.plot$kmerDepth)
1521825125324:x.limits <- seq(0, max.x, 100)
1521825125325:y.limits <- seq(0, max.y, 20)
1521825125326:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521825125327:y = kmerDepth),
1521825125328:size = 0.2)
1521825125329:d.plot <- d.plot + geom_area(alpha = 0.6,
1521825125330:aes(color = Allele,
1521825125331:# alpha = N,
1521825125331:fill = Allele
1521825125332:))
1521825125333:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521825125333:# d.plot <- d.plot + scale_color_hue(l = 40)
1521825125334:d.plot <- d.plot + geom_text(data = labelsData,
1521825125334:size = 3,
1521825125335:aes(x = name.x,
1521825125335:y = name.y,
1521825125336:label = Allele),
1521825125336:color = "#333333")
1521825125337:d.plot <- d.plot + geom_text(data = labelsData,
1521825125337:size = 3,
1521825125337:hjust = "left",
1521825125338:aes(x = info.x,
1521825125338:y = info.y,
1521825125338:label = info),
1521825125339:color = "#222222")
1521825125339:# d.plot <- d.plot + geom_text(data = labelsData,
1521825125340:#                              size = 3,
1521825125340:#                              hjust = "left",
1521825125341:#                              aes(x = meanDepth.x,
1521825125341:#                                  y = meanDepth.y,
1521825125342:#                                  label = meanDepth),
1521825125343:#                              color = "#333333")
1521825125343:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521825125343:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521825125344:expand = c(0, 2.0))
1521825125344:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521825125345:#                                     expand = c(0, 2))
1521825125346:# if (colourCount > 9) {
1521825125346:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521825125347:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521825125347:# } else {
1521825125348:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521825125348:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521825125349:# }
1521825125349:d.plot <- d.plot + theme_bw()
1521825125350:d.plot <- d.plot + labs(title = "K-mer Depth",
1521825125350:subtitle = basename(input.file),
1521825125351:x     = "Position along sequence (bp)",
1521825125351:y     = "k-mer Depth")
1521825125352:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521825125353:# color = FALSE)
1521825125353:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521825125354:plot.subtitle = element_text(hjust = 0.5),
1521825125354:axis.text.x = element_text(angle = 50,
1521825125355:vjust = 1,
1521825125355:hjust = 1,
1521825125357:size = 7),
1521825125358:legend.position = "none")
1521825125358:d.plot
1521825125359:}
1521825125360:# ==============================================================
1521825125361:data.to.plot <- inData
1521825125362:max.x <- max(data.to.plot$Position)
1521825125362:max.y <- max(data.to.plot$Depth)
1521825125364:nLoci    <- length(unique(data.to.plot$Locus))
1521825125364:nAlleles <- length(unique(data.to.plot$N))
1521825125365:alleles     <- unique(inData$Allele)
1521825125366:loci        <- as.character(unique(inData$Locus))
1521825125367:lociLabels  <- c()
1521825125367:name.x      <- c()
1521825125368:name.y      <- c()
1521825125368:info.x      <- c()
1521825125369:info.y      <- c()
1521825125369:covs        <- c()
1521825125370:meanDepths  <- c()
1521825125370:meanDepth.x <- c()
1521825125371:meanDepth.y <- c()
1521825125371:for (i in loci) {
1521825125372:lociLabels <- c(lociLabels, rep(i, 3))
1521825125372:}
1521825125376:for (allele in alleles) {
1521825125376:maxPos      <- max(data.to.plot[data.to.plot$Allele == allele, "Position"])
1521825125377:maxDepth    <- max(data.to.plot[data.to.plot$Allele == allele, "kmerDepth"])
1521825125377:name.x      <- c(name.x, (maxPos / 2))
1521825125377:name.y      <- c(name.y, (maxDepth * 0.2))
1521825125378:info.x       <- c(info.x, max.x * 0.02)
1521825125378:info.y       <- c(info.y, maxDepth * 0.9)
1521825125378:covs        <- c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"]))
1521825125379:meanDepths  <- c(meanDepths, unique(data.to.plot[data.to.plot$Allele == allele, "MeanKmerDepth"]))
1521825125379:# meanDepth.x <- c(meanDepth.x, max.x * 0.30)
1521825125380:# meanDepth.y <- c(meanDepth.y, maxDepth * 0.9)
1521825125380:}
1521825125435:# (labelsData <- data.frame(Allele = alleles, name.x = x, name.y = y))
1521825125436:# data.to.plot <- left_join(data.to.plot, labelsData)
1521825125436:(labelsData <- data.frame(Allele = alleles,
1521825125437:name.x = name.x,
1521825125437:name.y = name.y,
1521825125437:info = paste0("cov=", format(round(covs, 1), nsmall = 1), "%  ", paste0("md=", format(round(meanDepths, 1), nsmall = 1))),
1521825125438:info.x = info.x, info.y = info.y,
1521825125438:# meanDepth = paste0("md = ", format(round(meanDepths, 1), nsmall = 1)),
1521825125438:# meanDepth.x = meanDepth.x, meanDepth.y = meanDepth.y,
1521825125439:N = rep(unique(data.to.plot$N), nLoci),
1521825125439:Locus = lociLabels))
1521825125449:hFactor  <- 1.1
1521825125450:wFactor  <- 2.5
1521825125450:if (nLoci == 1)
1521825125450:hFactor <- 1.8
1521825125451:height       <- nLoci * hFactor
1521825125451:width        <- nAlleles * wFactor
1521825125452:depth.plot   <- plotDepth(data.to.plot, labelsData)
1521825125501:depth.plot
1521825132137:out.filename <- paste0(out.prefix, "_", i, ".", out.format)
1521825132137:if (out.format == "png") {
1521825132138:ggsave(filename = out.filename, plot = depth.plot,
1521825132138:width  = width,
1521825132138:height = height,
1521825132139:type = "cairo-png",
1521825132143:dpi = 300)
1521825132143:} else {
1521825132144:ggsave(filename = out.filename, plot = depth.plot,
1521825132144:width  = width,
1521825132144:height = height,
1521825132145:dpi = 400)
1521825132145:}
1521825138740:cat("Done! \n")
1521825151996:plotDepth <- function(data.to.plot, labelsData) {
1521825151996:colourCount = length(unique(data.to.plot$Allele))
1521825151997:getPalette = colorRampPalette(brewer.pal(7, "Set1"))
1521825151998:max.x <- max(data.to.plot$Position)
1521825151999:max.y <- max(data.to.plot$kmerDepth)
1521825152000:x.limits <- seq(0, max.x, 100)
1521825152001:y.limits <- seq(0, max.y, 20)
1521825152002:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521825152003:y = kmerDepth),
1521825152004:size = 0.2)
1521825152005:d.plot <- d.plot + geom_area(alpha = 0.6,
1521825152006:aes(color = Allele,
1521825152007:# alpha = N,
1521825152007:fill = Allele
1521825152008:))
1521825152009:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521825152009:# d.plot <- d.plot + scale_color_hue(l = 40)
1521825152010:d.plot <- d.plot + geom_text(data = labelsData,
1521825152010:size = 3,
1521825152011:aes(x = name.x,
1521825152011:y = name.y,
1521825152012:label = Allele),
1521825152012:color = "#333333")
1521825152013:d.plot <- d.plot + geom_text(data = labelsData,
1521825152013:size = 3,
1521825152014:hjust = "left",
1521825152014:aes(x = info.x,
1521825152015:y = info.y,
1521825152016:label = info),
1521825152016:color = "#222222")
1521825152017:# d.plot <- d.plot + geom_text(data = labelsData,
1521825152017:#                              size = 3,
1521825152018:#                              hjust = "left",
1521825152019:#                              aes(x = meanDepth.x,
1521825152019:#                                  y = meanDepth.y,
1521825152020:#                                  label = meanDepth),
1521825152020:#                              color = "#333333")
1521825152021:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521825152021:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521825152022:expand = c(0, 2.0))
1521825152023:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521825152023:#                                     expand = c(0, 2))
1521825152025:# if (colourCount > 9) {
1521825152025:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521825152026:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521825152026:# } else {
1521825152027:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521825152028:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521825152028:# }
1521825152029:d.plot <- d.plot + theme_bw()
1521825152030:d.plot <- d.plot + labs(title = "K-mer Depth",
1521825152030:subtitle = basename(input.file),
1521825152031:x     = "Position along sequence (bp)",
1521825152031:y     = "k-mer Depth")
1521825152032:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521825152033:# color = FALSE)
1521825152033:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521825152034:plot.subtitle = element_text(hjust = 0.5),
1521825152034:axis.text.x = element_text(angle = 50,
1521825152035:vjust = 1,
1521825152036:hjust = 1,
1521825152037:size = 7),
1521825152037:legend.position = "none")
1521825152038:d.plot
1521825152038:}
1521825152040:# ==============================================================
1521825152041:data.to.plot <- inData
1521825152042:max.x <- max(data.to.plot$Position)
1521825152043:max.y <- max(data.to.plot$Depth)
1521825152044:nLoci    <- length(unique(data.to.plot$Locus))
1521825152045:nAlleles <- length(unique(data.to.plot$N))
1521825152046:alleles     <- unique(inData$Allele)
1521825152047:loci        <- as.character(unique(inData$Locus))
1521825152048:lociLabels  <- c()
1521825152048:name.x      <- c()
1521825152049:name.y      <- c()
1521825152049:info.x      <- c()
1521825152050:info.y      <- c()
1521825152050:covs        <- c()
1521825152051:meanDepths  <- c()
1521825152052:meanDepth.x <- c()
1521825152052:meanDepth.y <- c()
1521825152053:for (i in loci) {
1521825152053:lociLabels <- c(lociLabels, rep(i, 3))
1521825152053:}
1521825152057:for (allele in alleles) {
1521825152058:maxPos      <- max(data.to.plot[data.to.plot$Allele == allele, "Position"])
1521825152058:maxDepth    <- max(data.to.plot[data.to.plot$Allele == allele, "kmerDepth"])
1521825152058:name.x      <- c(name.x, (maxPos / 2))
1521825152059:name.y      <- c(name.y, (maxDepth * 0.2))
1521825152059:info.x       <- c(info.x, max.x * 0.02)
1521825152060:info.y       <- c(info.y, maxDepth * 0.9)
1521825152060:covs        <- c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"]))
1521825152061:meanDepths  <- c(meanDepths, unique(data.to.plot[data.to.plot$Allele == allele, "MeanKmerDepth"]))
1521825152061:# meanDepth.x <- c(meanDepth.x, max.x * 0.30)
1521825152062:# meanDepth.y <- c(meanDepth.y, maxDepth * 0.9)
1521825152062:}
1521825152118:# (labelsData <- data.frame(Allele = alleles, name.x = x, name.y = y))
1521825152118:# data.to.plot <- left_join(data.to.plot, labelsData)
1521825152119:(labelsData <- data.frame(Allele = alleles,
1521825152119:name.x = name.x,
1521825152119:name.y = name.y,
1521825152120:info = paste0("cov=", format(round(covs, 1), nsmall = 1), "%  ", paste0("md=", format(round(meanDepths, 1), nsmall = 1))),
1521825152120:info.x = info.x, info.y = info.y,
1521825152121:# meanDepth = paste0("md = ", format(round(meanDepths, 1), nsmall = 1)),
1521825152121:# meanDepth.x = meanDepth.x, meanDepth.y = meanDepth.y,
1521825152121:N = rep(unique(data.to.plot$N), nLoci),
1521825152122:Locus = lociLabels))
1521825152133:hFactor  <- 1.1
1521825152133:wFactor  <- 3
1521825152134:if (nLoci == 1)
1521825152135:hFactor <- 1.8
1521825152135:height       <- nLoci * hFactor
1521825152136:width        <- nAlleles * wFactor
1521825152137:depth.plot   <- plotDepth(data.to.plot, labelsData)
1521825152184:depth.plot
1521825158836:out.filename <- paste0(out.prefix, "_", i, ".", out.format)
1521825158836:if (out.format == "png") {
1521825158837:ggsave(filename = out.filename, plot = depth.plot,
1521825158837:width  = width,
1521825158838:height = height,
1521825158838:type = "cairo-png",
1521825158838:dpi = 300)
1521825158839:} else {
1521825158839:ggsave(filename = out.filename, plot = depth.plot,
1521825158839:width  = width,
1521825158840:height = height,
1521825158840:dpi = 400)
1521825158841:}
1521825165282:cat("Done! \n")
1521825341344:plotDepth <- function(data.to.plot, labelsData) {
1521825341345:colourCount = length(unique(data.to.plot$Allele))
1521825341346:getPalette = colorRampPalette(brewer.pal(7, "Set1"))
1521825341347:max.x <- max(data.to.plot$Position)
1521825341348:max.y <- max(data.to.plot$kmerDepth)
1521825341348:x.limits <- seq(0, max.x, 100)
1521825341349:y.limits <- seq(0, max.y, 20)
1521825341350:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521825341350:y = kmerDepth),
1521825341351:size = 0.2)
1521825341351:d.plot <- d.plot + geom_area(alpha = 0.6,
1521825341352:aes(color = Allele,
1521825341352:# alpha = N,
1521825341353:fill = Allele
1521825341353:))
1521825341354:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521825341355:# d.plot <- d.plot + scale_color_hue(l = 40)
1521825341355:d.plot <- d.plot + geom_text(data = labelsData,
1521825341356:size = 3,
1521825341356:aes(x = name.x,
1521825341357:y = name.y,
1521825341357:label = Allele),
1521825341358:color = "#333333")
1521825341359:d.plot <- d.plot + geom_text(data = labelsData,
1521825341359:size = 3,
1521825341360:hjust = "left",
1521825341360:aes(x = info.x,
1521825341361:y = info.y,
1521825341362:label = info),
1521825341363:color = "#222222")
1521825341363:# d.plot <- d.plot + geom_text(data = labelsData,
1521825341364:#                              size = 3,
1521825341364:#                              hjust = "left",
1521825341365:#                              aes(x = meanDepth.x,
1521825341365:#                                  y = meanDepth.y,
1521825341366:#                                  label = meanDepth),
1521825341367:#                              color = "#333333")
1521825341367:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521825341368:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521825341369:expand = c(0, 2.0))
1521825341369:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521825341370:#                                     expand = c(0, 2))
1521825341371:# if (colourCount > 9) {
1521825341372:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521825341372:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521825341373:# } else {
1521825341373:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521825341374:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521825341375:# }
1521825341375:d.plot <- d.plot + theme_bw()
1521825341376:d.plot <- d.plot + labs(title = "K-mer Depth",
1521825341376:subtitle = basename(input.file),
1521825341377:x     = "Position along sequence (bp)",
1521825341378:y     = "k-mer Depth")
1521825341379:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521825341379:# color = FALSE)
1521825341380:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521825341381:plot.subtitle = element_text(hjust = 0.5),
1521825341381:axis.text.x = element_text(angle = 50,
1521825341382:vjust = 1,
1521825341383:hjust = 1,
1521825341383:size = 7),
1521825341384:legend.position = "none")
1521825341385:d.plot
1521825341385:}
1521825341387:# ==============================================================
1521825341388:data.to.plot <- inData
1521825341389:max.x <- max(data.to.plot$Position)
1521825341389:max.y <- max(data.to.plot$Depth)
1521825341391:nLoci    <- length(unique(data.to.plot$Locus))
1521825341392:nAlleles <- length(unique(data.to.plot$N))
1521825341393:alleles     <- unique(inData$Allele)
1521825341394:loci        <- as.character(unique(inData$Locus))
1521825341395:lociLabels  <- c()
1521825341395:name.x      <- c()
1521825341396:name.y      <- c()
1521825341397:info.x      <- c()
1521825341397:info.y      <- c()
1521825341398:covs        <- c()
1521825341398:meanDepths  <- c()
1521825341399:meanDepth.x <- c()
1521825341399:meanDepth.y <- c()
1521825341400:for (i in loci) {
1521825341400:lociLabels <- c(lociLabels, rep(i, 3))
1521825341400:}
1521825341405:for (allele in alleles) {
1521825341405:maxPos      <- max(data.to.plot[data.to.plot$Allele == allele, "Position"])
1521825341406:maxDepth    <- max(data.to.plot[data.to.plot$Allele == allele, "kmerDepth"])
1521825341406:name.x      <- c(name.x, (maxPos / 2))
1521825341407:name.y      <- c(name.y, (maxDepth * 0.2))
1521825341407:info.x       <- c(info.x, max.x * 0.02)
1521825341407:info.y       <- c(info.y, maxDepth * 0.9)
1521825341408:covs        <- c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"]))
1521825341408:meanDepths  <- c(meanDepths, unique(data.to.plot[data.to.plot$Allele == allele, "MeanKmerDepth"]))
1521825341409:# meanDepth.x <- c(meanDepth.x, max.x * 0.30)
1521825341409:# meanDepth.y <- c(meanDepth.y, maxDepth * 0.9)
1521825341410:}
1521825341477:# (labelsData <- data.frame(Allele = alleles, name.x = x, name.y = y))
1521825341477:# data.to.plot <- left_join(data.to.plot, labelsData)
1521825341478:(labelsData <- data.frame(Allele = alleles,
1521825341478:name.x = name.x,
1521825341478:name.y = name.y,
1521825341479:info = paste0("cov=", format(round(covs, 1), nsmall = 1), "%  ", paste0("md=", format(round(meanDepths, 1), nsmall = 1))),
1521825341479:info.x = info.x, info.y = info.y,
1521825341479:# meanDepth = paste0("md = ", format(round(meanDepths, 1), nsmall = 1)),
1521825341480:# meanDepth.x = meanDepth.x, meanDepth.y = meanDepth.y,
1521825341480:N = rep(unique(data.to.plot$N), nLoci),
1521825341481:Locus = lociLabels))
1521825341491:hFactor  <- 1.1
1521825341491:wFactor  <- 4
1521825341492:if (nLoci == 1)
1521825341492:hFactor <- 1.8
1521825341493:height       <- nLoci * hFactor
1521825341493:width        <- nAlleles * wFactor
1521825341494:depth.plot   <- plotDepth(data.to.plot, labelsData)
1521825341545:depth.plot
1521825348244:out.filename <- paste0(out.prefix, "_", i, ".", out.format)
1521825348245:if (out.format == "png") {
1521825348245:ggsave(filename = out.filename, plot = depth.plot,
1521825348245:width  = width,
1521825348246:height = height,
1521825348246:type = "cairo-png",
1521825348246:dpi = 300)
1521825348247:} else {
1521825348247:ggsave(filename = out.filename, plot = depth.plot,
1521825348247:width  = width,
1521825348248:height = height,
1521825348248:dpi = 400)
1521825348249:}
1521825354915:cat("Done! \n")
1521826375138:d.plot <- ggplot(data.to.plot, aes(x = Allele, y = kmerDepth))
1521826377803:d.plot <- d.plot + geom_boxplot(aes(fill = Allele))
1521826379439:d.plot
1521826444685:d.plot <- ggplot(data.to.plot, aes(x = Allele, y = kmerDepth))
1521826445106:d.plot <- d.plot + geom_boxplot(aes(fill = Allele))
1521826445531:d.plot <- d.plot + facet_grid(Locus ~ .)
1521826448227:d.plot
1521826469964:d.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521826470241:d.plot <- d.plot + geom_boxplot(aes(fill = Allele))
1521826470540:d.plot <- d.plot + facet_grid(Locus ~ .)
1521826476818:d.plot
1521826541643:d.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521826541645:d.plot <- d.plot + geom_boxplot(aes(fill = Allele))
1521826541650:d.plot <- d.plot + facet_grid(Locus ~ .)
1521826541652:d.plot <- d.plot + theme(legend.position = "none")
1521826541654:d.plot
1521826665462:d.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521826665463:d.plot <- d.plot + geom_boxplot(aes(fill = Allele))
1521826665466:d.plot <- d.plot + facet_grid(Locus ~ .)
1521826665468:d.plot <- d.plot + labs(title = "K-mer Depth Distribution",
1521826665468:subtitle = basename(input.file),
1521826665468:x     = "Allele Ranking",
1521826665469:y     = "k-mer Depth")
1521826665471:d.plot <- d.plot + theme(legend.position = "none")
1521826665473:d.plot
1521826805681:d.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521826805683:d.plot <- d.plot + geom_boxplot(aes(fill = Allele))
1521826805688:d.plot <- d.plot + facet_grid(Locus ~ ., scales = "free_y")
1521826805690:d.plot <- d.plot + labs(title = "K-mer Depth Distribution",
1521826805691:subtitle = basename(input.file),
1521826805692:x     = "Allele Ranking",
1521826805692:y     = "k-mer Depth")
1521826805694:d.plot <- d.plot + theme(legend.position = "none")
1521826805696:d.plot
1521827171475:d.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521827171477:d.plot <- d.plot + geom_boxplot(aes(fill = Allele))
1521827171482:d.plot <- d.plot + facet_grid(Locus ~ ., scales = "free_y")
1521827171483:d.plot <- d.plot + labs(title = "K-mer Depth Distribution",
1521827171484:subtitle = basename(input.file),
1521827171484:x     = "Allele Ranking",
1521827171485:y     = "k-mer Depth")
1521827171487:d.plot <- d.plot + theme_light()
1521827171497:d.plot <- d.plot + theme(legend.position = "none")
1521827171502:d.plot
1521827191472:d.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521827191475:d.plot <- d.plot + geom_boxplot(aes(fill = Allele))
1521827191480:d.plot <- d.plot + facet_grid(Locus ~ ., scales = "free_y")
1521827191483:d.plot <- d.plot + labs(title = "K-mer Depth Distribution",
1521827191483:subtitle = basename(input.file),
1521827191484:x     = "Allele Ranking",
1521827191485:y     = "k-mer Depth")
1521827191487:d.plot <- d.plot + theme_linedraw()
1521827191497:d.plot <- d.plot + theme(legend.position = "none")
1521827191501:d.plot
1521827266758:plotDepth <- function(data.to.plot, labelsData) {
1521827266758:colourCount = length(unique(data.to.plot$Allele))
1521827266759:getPalette = colorRampPalette(brewer.pal(7, "Set1"))
1521827266760:max.x <- max(data.to.plot$Position)
1521827266761:max.y <- max(data.to.plot$kmerDepth)
1521827266762:x.limits <- seq(0, max.x, 100)
1521827266763:y.limits <- seq(0, max.y, 20)
1521827266764:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521827266765:y = kmerDepth),
1521827266766:size = 0.2)
1521827266766:d.plot <- d.plot + geom_area(alpha = 0.6,
1521827266767:aes(color = Allele,
1521827266768:# alpha = N,
1521827266769:fill = Allele
1521827266769:))
1521827266770:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521827266770:# d.plot <- d.plot + scale_color_hue(l = 40)
1521827266771:d.plot <- d.plot + geom_text(data = labelsData,
1521827266772:size = 3,
1521827266773:aes(x = name.x,
1521827266773:y = name.y,
1521827266774:label = Allele),
1521827266775:color = "#333333")
1521827266775:d.plot <- d.plot + geom_text(data = labelsData,
1521827266776:size = 3,
1521827266777:hjust = "left",
1521827266777:aes(x = info.x,
1521827266778:y = info.y,
1521827266778:label = info),
1521827266779:color = "#222222")
1521827266780:# d.plot <- d.plot + geom_text(data = labelsData,
1521827266780:#                              size = 3,
1521827266781:#                              hjust = "left",
1521827266781:#                              aes(x = meanDepth.x,
1521827266782:#                                  y = meanDepth.y,
1521827266783:#                                  label = meanDepth),
1521827266783:#                              color = "#333333")
1521827266784:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521827266785:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521827266785:expand = c(0, 2.0))
1521827266786:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521827266787:#                                     expand = c(0, 2))
1521827266788:# if (colourCount > 9) {
1521827266789:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521827266789:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521827266790:# } else {
1521827266791:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521827266791:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521827266792:# }
1521827266793:# d.plot <- d.plot + theme_bw()
1521827266793:d.plot <- d.plot + theme_linedraw()
1521827266794:d.plot <- d.plot + labs(title = "K-mer Depth",
1521827266795:subtitle = basename(input.file),
1521827266795:x     = "Position along sequence (bp)",
1521827266796:y     = "k-mer Depth")
1521827266797:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521827266797:# color = FALSE)
1521827266798:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521827266799:plot.subtitle = element_text(hjust = 0.5),
1521827266800:axis.text.x = element_text(angle = 50,
1521827266800:vjust = 1,
1521827266801:hjust = 1,
1521827266802:size = 7),
1521827266802:legend.position = "none")
1521827266803:d.plot
1521827266804:}
1521827266805:# ==============================================================
1521827266806:data.to.plot <- inData
1521827266807:max.x <- max(data.to.plot$Position)
1521827266807:max.y <- max(data.to.plot$Depth)
1521827266809:nLoci    <- length(unique(data.to.plot$Locus))
1521827266810:nAlleles <- length(unique(data.to.plot$N))
1521827266811:alleles     <- unique(inData$Allele)
1521827266812:loci        <- as.character(unique(inData$Locus))
1521827266812:lociLabels  <- c()
1521827266813:name.x      <- c()
1521827266814:name.y      <- c()
1521827266814:info.x      <- c()
1521827266815:info.y      <- c()
1521827266815:covs        <- c()
1521827266816:meanDepths  <- c()
1521827266817:meanDepth.x <- c()
1521827266817:meanDepth.y <- c()
1521827266818:for (i in loci) {
1521827266818:lociLabels <- c(lociLabels, rep(i, 3))
1521827266818:}
1521827266823:for (allele in alleles) {
1521827266823:maxPos      <- max(data.to.plot[data.to.plot$Allele == allele, "Position"])
1521827266823:maxDepth    <- max(data.to.plot[data.to.plot$Allele == allele, "kmerDepth"])
1521827266824:name.x      <- c(name.x, (maxPos / 2))
1521827266824:name.y      <- c(name.y, (maxDepth * 0.2))
1521827266825:info.x       <- c(info.x, max.x * 0.02)
1521827266825:info.y       <- c(info.y, maxDepth * 0.9)
1521827266826:covs        <- c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"]))
1521827266826:meanDepths  <- c(meanDepths, unique(data.to.plot[data.to.plot$Allele == allele, "MeanKmerDepth"]))
1521827266827:# meanDepth.x <- c(meanDepth.x, max.x * 0.30)
1521827266827:# meanDepth.y <- c(meanDepth.y, maxDepth * 0.9)
1521827266827:}
1521827266882:# (labelsData <- data.frame(Allele = alleles, name.x = x, name.y = y))
1521827266883:# data.to.plot <- left_join(data.to.plot, labelsData)
1521827266883:(labelsData <- data.frame(Allele = alleles,
1521827266883:name.x = name.x,
1521827266884:name.y = name.y,
1521827266884:info = paste0("cov=", format(round(covs, 1), nsmall = 1), "%  ", paste0("md=", format(round(meanDepths, 1), nsmall = 1))),
1521827266884:info.x = info.x, info.y = info.y,
1521827266885:# meanDepth = paste0("md = ", format(round(meanDepths, 1), nsmall = 1)),
1521827266885:# meanDepth.x = meanDepth.x, meanDepth.y = meanDepth.y,
1521827266885:N = rep(unique(data.to.plot$N), nLoci),
1521827266886:Locus = lociLabels))
1521827266896:hFactor  <- 1.1
1521827266897:wFactor  <- 4
1521827266897:if (nLoci == 1)
1521827266898:hFactor <- 1.8
1521827266898:height       <- nLoci * hFactor
1521827266898:width        <- nAlleles * wFactor
1521827266899:depth.plot   <- plotDepth(data.to.plot, labelsData)
1521827266943:depth.plot
1521827273477:out.filename <- paste0(out.prefix, "_", i, ".", out.format)
1521827273478:if (out.format == "png") {
1521827273478:ggsave(filename = out.filename, plot = depth.plot,
1521827273479:width  = width,
1521827273479:height = height,
1521827273479:type = "cairo-png",
1521827273480:dpi = 300)
1521827273480:} else {
1521827273480:ggsave(filename = out.filename, plot = depth.plot,
1521827273481:width  = width,
1521827273481:height = height,
1521827273481:dpi = 400)
1521827273482:}
1521827279847:cat("Done! \n")
1521827322736:plotDepth <- function(data.to.plot, labelsData) {
1521827322737:colourCount = length(unique(data.to.plot$Allele))
1521827322738:getPalette = colorRampPalette(brewer.pal(7, "Set1"))
1521827322739:max.x <- max(data.to.plot$Position)
1521827322740:max.y <- max(data.to.plot$kmerDepth)
1521827322740:x.limits <- seq(0, max.x, 100)
1521827322741:y.limits <- seq(0, max.y, 20)
1521827322742:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521827322743:y = kmerDepth),
1521827322743:size = 0.2)
1521827322744:d.plot <- d.plot + geom_area(alpha = 0.6,
1521827322745:aes(color = Allele,
1521827322745:# alpha = N,
1521827322746:fill = Allele
1521827322746:))
1521827322747:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521827322748:# d.plot <- d.plot + scale_color_hue(l = 40)
1521827322748:d.plot <- d.plot + geom_text(data = labelsData,
1521827322749:size = 3,
1521827322750:aes(x = name.x,
1521827322751:y = name.y,
1521827322751:label = Allele),
1521827322752:color = "#333333")
1521827322752:d.plot <- d.plot + geom_text(data = labelsData,
1521827322753:size = 3,
1521827322754:hjust = "left",
1521827322754:aes(x = info.x,
1521827322755:y = info.y,
1521827322756:label = info),
1521827322756:color = "#222222")
1521827322757:# d.plot <- d.plot + geom_text(data = labelsData,
1521827322757:#                              size = 3,
1521827322758:#                              hjust = "left",
1521827322759:#                              aes(x = meanDepth.x,
1521827322759:#                                  y = meanDepth.y,
1521827322760:#                                  label = meanDepth),
1521827322760:#                              color = "#333333")
1521827322761:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521827322762:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521827322762:expand = c(0, 2.0))
1521827322763:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521827322763:#                                     expand = c(0, 2))
1521827322765:# if (colourCount > 9) {
1521827322765:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521827322766:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521827322766:# } else {
1521827322767:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521827322768:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521827322768:# }
1521827322769:d.plot <- d.plot + theme_bw()
1521827322770:# d.plot <- d.plot + theme_linedraw()
1521827322770:d.plot <- d.plot + labs(title = "K-mer Depth",
1521827322771:subtitle = basename(input.file),
1521827322771:x     = "Position along sequence (bp)",
1521827322772:y     = "k-mer Depth")
1521827322773:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521827322773:# color = FALSE)
1521827322774:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521827322775:plot.subtitle = element_text(hjust = 0.5),
1521827322775:axis.text.x = element_text(angle = 50,
1521827322776:vjust = 1,
1521827322777:hjust = 1,
1521827322777:size = 7),
1521827322778:legend.position = "none")
1521827322779:d.plot
1521827322779:}
1521827322781:# ==============================================================
1521827322782:data.to.plot <- inData
1521827322782:max.x <- max(data.to.plot$Position)
1521827322783:max.y <- max(data.to.plot$Depth)
1521827322784:nLoci    <- length(unique(data.to.plot$Locus))
1521827322785:nAlleles <- length(unique(data.to.plot$N))
1521827322786:alleles     <- unique(inData$Allele)
1521827322787:loci        <- as.character(unique(inData$Locus))
1521827322788:lociLabels  <- c()
1521827322789:name.x      <- c()
1521827322789:name.y      <- c()
1521827322790:info.x      <- c()
1521827322790:info.y      <- c()
1521827322791:covs        <- c()
1521827322792:meanDepths  <- c()
1521827322792:meanDepth.x <- c()
1521827322793:meanDepth.y <- c()
1521827322793:for (i in loci) {
1521827322794:lociLabels <- c(lociLabels, rep(i, 3))
1521827322794:}
1521827322798:for (allele in alleles) {
1521827322798:maxPos      <- max(data.to.plot[data.to.plot$Allele == allele, "Position"])
1521827322798:maxDepth    <- max(data.to.plot[data.to.plot$Allele == allele, "kmerDepth"])
1521827322799:name.x      <- c(name.x, (maxPos / 2))
1521827322799:name.y      <- c(name.y, (maxDepth * 0.2))
1521827322800:info.x       <- c(info.x, max.x * 0.02)
1521827322800:info.y       <- c(info.y, maxDepth * 0.9)
1521827322800:covs        <- c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"]))
1521827322801:meanDepths  <- c(meanDepths, unique(data.to.plot[data.to.plot$Allele == allele, "MeanKmerDepth"]))
1521827322801:# meanDepth.x <- c(meanDepth.x, max.x * 0.30)
1521827322802:# meanDepth.y <- c(meanDepth.y, maxDepth * 0.9)
1521827322802:}
1521827322850:# (labelsData <- data.frame(Allele = alleles, name.x = x, name.y = y))
1521827322851:# data.to.plot <- left_join(data.to.plot, labelsData)
1521827322851:(labelsData <- data.frame(Allele = alleles,
1521827322851:name.x = name.x,
1521827322852:name.y = name.y,
1521827322852:info = paste0("cov=", format(round(covs, 1), nsmall = 1), "%  ", paste0("md=", format(round(meanDepths, 1), nsmall = 1))),
1521827322852:info.x = info.x, info.y = info.y,
1521827322853:# meanDepth = paste0("md = ", format(round(meanDepths, 1), nsmall = 1)),
1521827322853:# meanDepth.x = meanDepth.x, meanDepth.y = meanDepth.y,
1521827322853:N = rep(unique(data.to.plot$N), nLoci),
1521827322854:Locus = lociLabels))
1521827322862:hFactor  <- 1.1
1521827322863:wFactor  <- 4
1521827322863:if (nLoci == 1)
1521827322863:hFactor <- 1.8
1521827322864:height       <- nLoci * hFactor
1521827322864:width        <- nAlleles * wFactor
1521827322865:depth.plot   <- plotDepth(data.to.plot, labelsData)
1521827322907:depth.plot
1521827328519:out.filename <- paste0(out.prefix, "_", i, ".", out.format)
1521827328520:if (out.format == "png") {
1521827328520:ggsave(filename = out.filename, plot = depth.plot,
1521827328520:width  = width,
1521827328520:height = height,
1521827328521:type = "cairo-png",
1521827328521:dpi = 300)
1521827328521:} else {
1521827328522:ggsave(filename = out.filename, plot = depth.plot,
1521827328522:width  = width,
1521827328522:height = height,
1521827328523:dpi = 400)
1521827328523:}
1521827334460:cat("Done! \n")
1521827371639:d.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521827371642:d.plot <- d.plot + geom_boxplot(aes(fill = Allele))
1521827371646:d.plot <- d.plot + facet_grid(Locus ~ ., scales = "free_y")
1521827371649:d.plot <- d.plot + labs(title = "K-mer Depth Distribution",
1521827371649:subtitle = basename(input.file),
1521827371650:x     = "Allele Ranking",
1521827371650:y     = "k-mer Depth")
1521827371652:d.plot <- d.plot + theme_classic()
1521827371660:d.plot <- d.plot + theme(legend.position = "none")
1521827371664:d.plot
1521827388922:d.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521827388924:d.plot <- d.plot + geom_boxplot(aes(fill = Allele))
1521827388928:d.plot <- d.plot + facet_grid(Locus ~ ., scales = "free_y")
1521827388930:d.plot <- d.plot + labs(title = "K-mer Depth Distribution",
1521827388930:subtitle = basename(input.file),
1521827388931:x     = "Allele Ranking",
1521827388932:y     = "k-mer Depth")
1521827388934:d.plot <- d.plot + theme_bw()
1521827388939:d.plot <- d.plot + theme(legend.position = "none")
1521827388943:d.plot
1521827523325:unique(data.to.plot[data.to.plot$Allele == allele, "Position"])
1521827533311:unique(data.to.plot[data.to.plot$Allele == allele, "Locus"])
1521827548272:locus = as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1521827549363:locus
1521827818040:labelsData
1521827828747:d.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521827828749:d.plot <- d.plot + geom_boxplot(aes(fill = Allele))
1521827828753:d.plot <- d.plot + geom_text(data = labelsData,
1521827828754:size = 3,
1521827828754:aes(x = (N - 0.5),
1521827828755:y = info.y,
1521827828756:label = Allele),
1521827828756:color = "#333333")
1521827828761:d.plot <- d.plot + facet_grid(Locus ~ ., scales = "free_y")
1521827828763:d.plot <- d.plot + labs(title = "K-mer Depth Distribution",
1521827828763:subtitle = basename(input.file),
1521827828764:x     = "Allele Ranking",
1521827828764:y     = "k-mer Depth")
1521827828766:d.plot <- d.plot + theme_bw()
1521827828773:d.plot <- d.plot + theme(legend.position = "none")
1521827828777:d.plot
1521827928080:d.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521827928082:d.plot <- d.plot + geom_boxplot(aes(fill = Allele))
1521827928086:d.plot <- d.plot + geom_text(data = labelsData,
1521827928086:size = 3,
1521827928087:aes(x = (N - 0.3),
1521827928087:y = info.y,
1521827928087:label = Allele),
1521827928088:color = "#333333")
1521827928091:d.plot <- d.plot + facet_grid(Locus ~ ., scales = "free_y")
1521827928093:d.plot <- d.plot + labs(title = "K-mer Depth Distribution",
1521827928093:subtitle = basename(input.file),
1521827928094:x     = "Allele Ranking",
1521827928094:y     = "k-mer Depth")
1521827928096:d.plot <- d.plot + theme_bw()
1521827928101:d.plot <- d.plot + theme(legend.position = "none")
1521827928105:d.plot
1521827973530:d.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521827973532:d.plot <- d.plot + geom_boxplot(aes(fill = Allele))
1521827973535:d.plot <- d.plot + geom_text(data = labelsData,
1521827973536:size = 3,
1521827973536:aes(x = (N - 0.3),
1521827973537:y = info.y * 1.2,
1521827973537:label = Allele),
1521827973538:color = "#333333")
1521827973541:d.plot <- d.plot + facet_grid(Locus ~ ., scales = "free_y")
1521827973543:d.plot <- d.plot + labs(title = "K-mer Depth Distribution",
1521827973544:subtitle = basename(input.file),
1521827973544:x     = "Allele Ranking",
1521827973545:y     = "k-mer Depth")
1521827973546:d.plot <- d.plot + theme_bw()
1521827973552:d.plot <- d.plot + theme(legend.position = "none")
1521827973556:d.plot
1521827979592:d.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521827979594:d.plot <- d.plot + geom_boxplot(aes(fill = Allele))
1521827979600:d.plot <- d.plot + geom_text(data = labelsData,
1521827979601:size = 3,
1521827979601:aes(x = (N - 0.3),
1521827979602:y = info.y * 1.1,
1521827979603:label = Allele),
1521827979603:color = "#333333")
1521827979607:d.plot <- d.plot + facet_grid(Locus ~ ., scales = "free_y")
1521827979608:d.plot <- d.plot + labs(title = "K-mer Depth Distribution",
1521827979609:subtitle = basename(input.file),
1521827979609:x     = "Allele Ranking",
1521827979610:y     = "k-mer Depth")
1521827979611:d.plot <- d.plot + theme_bw()
1521827979620:d.plot <- d.plot + theme(legend.position = "none")
1521827979625:d.plot
1521827993950:d.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521827993952:d.plot <- d.plot + geom_boxplot(aes(fill = Allele))
1521827993957:d.plot <- d.plot + geom_text(data = labelsData,
1521827993958:size = 3,
1521827993958:aes(x = (N - 0.3),
1521827993959:y = info.y * 1.05,
1521827993960:label = Allele),
1521827993961:color = "#333333")
1521827993966:d.plot <- d.plot + facet_grid(Locus ~ ., scales = "free_y")
1521827993968:d.plot <- d.plot + labs(title = "K-mer Depth Distribution",
1521827993969:subtitle = basename(input.file),
1521827993969:x     = "Allele Ranking",
1521827993970:y     = "k-mer Depth")
1521827993972:d.plot <- d.plot + theme_bw()
1521827993978:d.plot <- d.plot + theme(legend.position = "none")
1521827993982:d.plot
1521828045377:d.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521828045380:d.plot <- d.plot + geom_boxplot(aes(fill = Allele))
1521828045385:d.plot <- d.plot + geom_text(data = labelsData,
1521828045386:size = 3,
1521828045386:# aes(x = (N - 0.3),
1521828045387:aes(x = N,
1521828045388:y = info.y * 1.05,
1521828045389:label = Allele),
1521828045389:color = "#333333")
1521828045394:d.plot <- d.plot + facet_grid(Locus ~ ., scales = "free_y")
1521828045396:d.plot <- d.plot + labs(title = "K-mer Depth Distribution",
1521828045396:subtitle = basename(input.file),
1521828045397:x     = "Allele Ranking",
1521828045397:y     = "k-mer Depth")
1521828045399:d.plot <- d.plot + theme_bw()
1521828045406:d.plot <- d.plot + theme(legend.position = "none")
1521828045409:d.plot
1521828072899:d.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521828072902:d.plot <- d.plot + geom_boxplot(aes(fill = Allele, color = Allele))
1521828072907:d.plot <- d.plot + geom_text(data = labelsData,
1521828072908:size = 3,
1521828072908:# aes(x = (N - 0.3),
1521828072909:aes(x = N,
1521828072909:y = info.y * 1.05,
1521828072909:label = Allele),
1521828072910:color = "#333333")
1521828072914:d.plot <- d.plot + facet_grid(Locus ~ ., scales = "free_y")
1521828072915:d.plot <- d.plot + labs(title = "K-mer Depth Distribution",
1521828072916:subtitle = basename(input.file),
1521828072916:x     = "Allele Ranking",
1521828072917:y     = "k-mer Depth")
1521828072918:d.plot <- d.plot + theme_bw()
1521828072925:d.plot <- d.plot + theme(legend.position = "none")
1521828072930:d.plot
1521828102126:d.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521828102128:d.plot <- d.plot + geom_boxplot(aes(fill = Allele))
1521828102132:d.plot <- d.plot + geom_text(data = labelsData,
1521828102133:size = 3,
1521828102134:# aes(x = (N - 0.3),
1521828102135:aes(x = N,
1521828102135:y = info.y * 1.05,
1521828102136:label = Allele),
1521828102136:color = "#333333")
1521828102141:d.plot <- d.plot + facet_grid(Locus ~ ., scales = "free_y")
1521828102142:d.plot <- d.plot + labs(title = "K-mer Depth Distribution",
1521828102143:subtitle = basename(input.file),
1521828102143:x     = "Allele Ranking",
1521828102144:y     = "k-mer Depth")
1521828102145:d.plot <- d.plot + theme_bw()
1521828102152:d.plot <- d.plot + theme(legend.position = "none")
1521828102155:d.plot
1521828142235:d.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521828142237:d.plot <- d.plot + geom_boxplot(alpha = 0.6, size = 0.5, aes(fill = Allele))
1521828142240:d.plot <- d.plot + geom_text(data = labelsData,
1521828142240:size = 3,
1521828142240:# aes(x = (N - 0.3),
1521828142241:aes(x = N,
1521828142241:y = info.y * 1.05,
1521828142241:label = Allele),
1521828142242:color = "#333333")
1521828142244:d.plot <- d.plot + facet_grid(Locus ~ ., scales = "free_y")
1521828142245:d.plot <- d.plot + labs(title = "K-mer Depth Distribution",
1521828142246:subtitle = basename(input.file),
1521828142246:x     = "Allele Ranking",
1521828142246:y     = "k-mer Depth")
1521828142248:d.plot <- d.plot + theme_bw()
1521828142253:d.plot <- d.plot + theme(legend.position = "none")
1521828142255:d.plot
1521828196256:d.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521828196258:d.plot <- d.plot + geom_boxplot(alpha = 0.6, size = 0.5, aes(fill = Allele))
1521828196262:d.plot <- d.plot + geom_text(data = labelsData,
1521828196263:size = 3,
1521828196263:aes(x = (N - 0.25),
1521828196263:# aes(x = N,
1521828196264:y = info.y * 1.05,
1521828196264:label = Allele),
1521828196265:color = "#333333")
1521828196268:d.plot <- d.plot + facet_grid(Locus ~ ., scales = "free_y")
1521828196269:d.plot <- d.plot + labs(title = "K-mer Depth Distribution",
1521828196270:subtitle = basename(input.file),
1521828196270:x     = "Allele Ranking",
1521828196271:y     = "k-mer Depth")
1521828196272:d.plot <- d.plot + theme_bw()
1521828196282:d.plot <- d.plot + theme(legend.position = "none")
1521828196286:d.plot
1521828287498:d.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521828287500:d.plot <- d.plot + geom_boxplot(alpha = 0.6, aes(fill = Allele))
1521828287503:d.plot <- d.plot + geom_text(data = labelsData,
1521828287503:size = 3,
1521828287503:aes(x = (N - 0.25),
1521828287504:# aes(x = N,
1521828287504:y = info.y * 1.05,
1521828287505:label = Allele),
1521828287505:color = "#333333")
1521828287508:d.plot <- d.plot + facet_grid(Locus ~ ., scales = "free_y")
1521828287510:d.plot <- d.plot + labs(title = "K-mer Depth Distribution",
1521828287510:subtitle = basename(input.file),
1521828287510:x     = "Allele Ranking",
1521828287511:y     = "k-mer Depth")
1521828287513:d.plot <- d.plot + theme_bw()
1521828287518:d.plot <- d.plot + theme(legend.position = "none")
1521828287521:d.plot
1521828299322:d.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521828299326:d.plot <- d.plot + geom_boxplot(alpha = 0.6, size = 0.2, aes(fill = Allele))
1521828299332:d.plot <- d.plot + geom_text(data = labelsData,
1521828299333:size = 3,
1521828299333:aes(x = (N - 0.25),
1521828299334:# aes(x = N,
1521828299335:y = info.y * 1.05,
1521828299335:label = Allele),
1521828299336:color = "#333333")
1521828299340:d.plot <- d.plot + facet_grid(Locus ~ ., scales = "free_y")
1521828299341:d.plot <- d.plot + labs(title = "K-mer Depth Distribution",
1521828299342:subtitle = basename(input.file),
1521828299342:x     = "Allele Ranking",
1521828299343:y     = "k-mer Depth")
1521828299344:d.plot <- d.plot + theme_bw()
1521828299350:d.plot <- d.plot + theme(legend.position = "none")
1521828299353:d.plot
1521828314445:d.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521828314447:d.plot <- d.plot + geom_boxplot(alpha = 0.6, size = 0.25, aes(fill = Allele))
1521828314450:d.plot <- d.plot + geom_text(data = labelsData,
1521828314450:size = 3,
1521828314451:aes(x = (N - 0.25),
1521828314451:# aes(x = N,
1521828314451:y = info.y * 1.05,
1521828314452:label = Allele),
1521828314452:color = "#333333")
1521828314455:d.plot <- d.plot + facet_grid(Locus ~ ., scales = "free_y")
1521828314456:d.plot <- d.plot + labs(title = "K-mer Depth Distribution",
1521828314456:subtitle = basename(input.file),
1521828314457:x     = "Allele Ranking",
1521828314457:y     = "k-mer Depth")
1521828314458:d.plot <- d.plot + theme_bw()
1521828314463:d.plot <- d.plot + theme(legend.position = "none")
1521828314466:d.plot
1521828352959:d.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521828352962:d.plot <- d.plot + geom_boxplot(alpha = 0.6, size = 0.25, aes(fill = Allele))
1521828352967:d.plot <- d.plot + geom_text(data = labelsData,
1521828352968:size = 3,
1521828352968:hjust = "left",
1521828352969:aes(x = (N - 0.25),
1521828352969:y = info.y * 1.05,
1521828352970:label = Allele),
1521828352970:color = "#333333")
1521828352976:d.plot <- d.plot + facet_grid(Locus ~ ., scales = "free_y")
1521828352978:d.plot <- d.plot + labs(title = "K-mer Depth Distribution",
1521828352978:subtitle = basename(input.file),
1521828352979:x     = "Allele Ranking",
1521828352979:y     = "k-mer Depth")
1521828352981:d.plot <- d.plot + theme_bw()
1521828352988:d.plot <- d.plot + theme(legend.position = "none")
1521828352992:d.plot
1521828362909:d.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521828362912:d.plot <- d.plot + geom_boxplot(alpha = 0.6, size = 0.25, aes(fill = Allele))
1521828362916:d.plot <- d.plot + geom_text(data = labelsData,
1521828362916:size = 3,
1521828362917:hjust = "left",
1521828362917:aes(x = (N - 0.5),
1521828362918:y = info.y * 1.05,
1521828362919:label = Allele),
1521828362919:color = "#333333")
1521828362923:d.plot <- d.plot + facet_grid(Locus ~ ., scales = "free_y")
1521828362924:d.plot <- d.plot + labs(title = "K-mer Depth Distribution",
1521828362925:subtitle = basename(input.file),
1521828362925:x     = "Allele Ranking",
1521828362926:y     = "k-mer Depth")
1521828362928:d.plot <- d.plot + theme_bw()
1521828362936:d.plot <- d.plot + theme(legend.position = "none")
1521828362940:d.plot
1521828463584:d.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521828463586:d.plot <- d.plot + geom_boxplot(alpha = 0.6, size = 0.25, aes(fill = Allele))
1521828463588:d.plot <- d.plot + geom_text(data = labelsData,
1521828463589:size = 3,
1521828463589:hjust = "left",
1521828463589:aes(x = (N - 0.5),
1521828463589:y = info.y * 1.05,
1521828463590:label = Allele),
1521828463590:color = "#333333")
1521828463593:d.plot <- d.plot + facet_grid(Locus ~ ., scales = "free_y")
1521828463594:d.plot <- d.plot + labs(title = "K-mer Depth Distribution",
1521828463594:subtitle = basename(input.file),
1521828463594:x     = "Allele Ranking",
1521828463595:y     = "k-mer Depth")
1521828463596:d.plot <- d.plot + theme_bw()
1521828463600:d.plot <- d.plot + theme(legend.position = "none",
1521828463601:plot.title = element_text(hjust = 0.5),
1521828463601:plot.subtitle = element_text(hjust = 0.5))
1521828463604:d.plot
1521828702978:d.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521828702980:d.plot <- d.plot + geom_boxplot(alpha = 0.6, size = 0.25, aes(fill = Allele))
1521828702985:d.plot <- d.plot + geom_text(data = labelsData,
1521828702986:size = 3,
1521828702986:hjust = "left",
1521828702987:aes(x = (N - 0.5),
1521828702988:y = info.y * 1.05,
1521828702988:label = Allele),
1521828702989:color = "#333333")
1521828702994:d.plot <- d.plot + facet_grid(Locus ~ ., scales = "free_y")
1521828702995:d.plot <- d.plot + labs(title = "K-mer Depth Distribution",
1521828702996:subtitle = basename(input.file),
1521828702997:x     = "Allele Ranking",
1521828702997:y     = "k-mer Depth")
1521828702999:d.plot <- d.plot + theme_bw()
1521828703006:d.plot <- d.plot + scale_x_discrete(position = "top")
1521828703007:d.plot <- d.plot + theme(legend.position = "none",
1521828703008:plot.title = element_text(hjust = 0.5),
1521828703008:plot.subtitle = element_text(hjust = 0.5))
1521828703013:d.plot
1521828749293:d.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521828749295:d.plot <- d.plot + geom_boxplot(alpha = 0.6, size = 0.25, aes(fill = Allele))
1521828749301:d.plot <- d.plot + geom_text(data = labelsData,
1521828749302:size = 3,
1521828749302:hjust = "left",
1521828749303:aes(x = (N - 0.5),
1521828749304:y = info.y * 1.05,
1521828749305:label = Allele),
1521828749305:color = "#333333")
1521828749311:d.plot <- d.plot + facet_grid(Locus ~ ., scales = "free_y")
1521828749313:d.plot <- d.plot + labs(title = "K-mer Depth Distribution",
1521828749314:subtitle = basename(input.file),
1521828749314:x     = "Allele Ranking",
1521828749315:y     = "k-mer Depth")
1521828749318:d.plot <- d.plot + theme_bw()
1521828749329:d.plot <- d.plot + theme(legend.position = "none",
1521828749330:plot.title = element_text(hjust = 0.5),
1521828749331:plot.subtitle = element_text(hjust = 0.5))
1521828749337:d.plot
1521828983261:d.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521828983263:d.plot <- d.plot + geom_boxplot(alpha = 0.6, size = 0.25, aes(fill = Allele))
1521828983267:d.plot <- d.plot + geom_text(data = labelsData,
1521828983267:size = 3,
1521828983268:hjust = "left",
1521828983268:aes(x = (N - 0.5),
1521828983269:y = info.y * 1.05,
1521828983269:label = Allele),
1521828983270:color = "#333333")
1521828983273:d.plot <- d.plot + geom_point(aes(x = N, y = meanKmerDepth))
1521828983277:d.plot <- d.plot + facet_grid(Locus ~ ., scales = "free_y")
1521828983279:d.plot <- d.plot + labs(title = "K-mer Depth Distribution",
1521828983279:subtitle = basename(input.file),
1521828983280:x     = "Allele Ranking",
1521828983280:y     = "k-mer Depth")
1521828983282:d.plot <- d.plot + theme_bw()
1521828983288:d.plot <- d.plot + theme(legend.position = "none",
1521828983288:plot.title = element_text(hjust = 0.5),
1521828983289:plot.subtitle = element_text(hjust = 0.5))
1521828983291:d.plot
1521828990881:data.to.plot
1521829004932:data.to.plot
1521829009214:d.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521829009217:d.plot <- d.plot + geom_boxplot(alpha = 0.6, size = 0.25, aes(fill = Allele))
1521829009222:d.plot <- d.plot + geom_text(data = labelsData,
1521829009223:size = 3,
1521829009224:hjust = "left",
1521829009224:aes(x = (N - 0.5),
1521829009225:y = info.y * 1.05,
1521829009225:label = Allele),
1521829009226:color = "#333333")
1521829009231:d.plot <- d.plot + geom_point(aes(x = N, y = MeanKmerDepth))
1521829009234:d.plot <- d.plot + facet_grid(Locus ~ ., scales = "free_y")
1521829009236:d.plot <- d.plot + labs(title = "K-mer Depth Distribution",
1521829009236:subtitle = basename(input.file),
1521829009236:x     = "Allele Ranking",
1521829009237:y     = "k-mer Depth")
1521829009238:d.plot <- d.plot + theme_bw()
1521829009247:d.plot <- d.plot + theme(legend.position = "none",
1521829009247:plot.title = element_text(hjust = 0.5),
1521829009248:plot.subtitle = element_text(hjust = 0.5))
1521829009252:d.plot
1521829135657:d.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521829135660:d.plot <- d.plot + geom_boxplot(alpha = 0.6, size = 0.25, aes(fill = Allele))
1521829135667:d.plot <- d.plot + geom_text(data = labelsData,
1521829135667:size = 3,
1521829135668:hjust = "left",
1521829135669:aes(x = (N - 0.5),
1521829135669:y = info.y * 1.05,
1521829135670:label = Allele),
1521829135671:color = "#333333")
1521829135675:d.plot <- d.plot + geom_point(aes(x = N, y = MeanKmerDepth, group = Allele))
1521829135681:d.plot <- d.plot + facet_grid(Locus ~ ., scales = "free_y")
1521829135684:d.plot <- d.plot + labs(title = "K-mer Depth Distribution",
1521829135685:subtitle = basename(input.file),
1521829135686:x     = "Allele Ranking",
1521829135686:y     = "k-mer Depth")
1521829135689:d.plot <- d.plot + theme_bw()
1521829135696:d.plot <- d.plot + theme(legend.position = "none",
1521829135697:plot.title = element_text(hjust = 0.5),
1521829135697:plot.subtitle = element_text(hjust = 0.5))
1521829135701:d.plot
1521829169118:labelsData
1521829205645:meanDepths
1521829236754:(labelsData <- data.frame(Allele = alleles,
1521829236755:name.x = name.x,
1521829236756:name.y = name.y,
1521829236756:info = paste0("cov=", format(round(covs, 1), nsmall = 1), "%  ", paste0("md=", format(round(meanDepths, 1), nsmall = 1))),
1521829236757:info.x = info.x, info.y = info.y,
1521829236757:meanDepth = meanDepths,
1521829236758:# meanDepth.x = meanDepth.x, meanDepth.y = meanDepth.y,
1521829236759:N = rep(unique(data.to.plot$N), nLoci),
1521829236760:Locus = lociLabels))
1521829276260:d.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521829276261:d.plot <- d.plot + geom_boxplot(alpha = 0.6, size = 0.25, aes(fill = Allele))
1521829276265:d.plot <- d.plot + geom_text(data = labelsData,
1521829276266:size = 3,
1521829276266:hjust = "left",
1521829276267:aes(x = (N - 0.5),
1521829276267:y = info.y * 1.05,
1521829276268:label = Allele),
1521829276268:color = "#333333")
1521829276272:d.plot <- d.plot + geom_point(data = labelsData,
1521829276272:aes(x = N, y = meanDepth))
1521829276276:d.plot <- d.plot + facet_grid(Locus ~ ., scales = "free_y")
1521829276278:d.plot <- d.plot + labs(title = "K-mer Depth Distribution",
1521829276278:subtitle = basename(input.file),
1521829276279:x     = "Allele Ranking",
1521829276279:y     = "k-mer Depth")
1521829276281:d.plot <- d.plot + theme_bw()
1521829276287:d.plot <- d.plot + theme(legend.position = "none",
1521829276288:plot.title = element_text(hjust = 0.5),
1521829276288:plot.subtitle = element_text(hjust = 0.5))
1521829276292:d.plot
1521829493627:d.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521829493630:d.plot <- d.plot + geom_boxplot(alpha = 0.6, size = 0.25, aes(fill = Allele))
1521829493635:d.plot <- d.plot + geom_text(data = labelsData,
1521829493636:size = 3,
1521829493637:hjust = "left",
1521829493637:aes(x = (N - 0.5),
1521829493638:y = info.y * 1.05,
1521829493639:label = Allele),
1521829493639:color = "#333333")
1521829493644:d.plot <- d.plot + geom_point(data = labelsData,
1521829493644:shape = 23,
1521829493645:aes(x = N, y = meanDepth))
1521829493650:d.plot <- d.plot + facet_grid(Locus ~ ., scales = "free_y")
1521829493652:d.plot <- d.plot + labs(title = "K-mer Depth Distribution",
1521829493653:subtitle = basename(input.file),
1521829493654:x     = "Allele Ranking",
1521829493655:y     = "k-mer Depth")
1521829493658:d.plot <- d.plot + theme_bw()
1521829493667:d.plot <- d.plot + theme(legend.position = "none",
1521829493668:plot.title = element_text(hjust = 0.5),
1521829493668:plot.subtitle = element_text(hjust = 0.5))
1521829493671:d.plot
1521829542873:d.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521829542875:d.plot <- d.plot + geom_boxplot(alpha = 0.6, size = 0.25, aes(fill = Allele))
1521829542878:d.plot <- d.plot + geom_text(data = labelsData,
1521829542879:size = 3,
1521829542879:hjust = "left",
1521829542879:aes(x = (N - 0.5),
1521829542880:y = info.y * 1.05,
1521829542880:label = Allele),
1521829542880:color = "#333333")
1521829542883:d.plot <- d.plot + geom_point(data = labelsData,
1521829542884:shape = 23, fill = "white",
1521829542884:aes(x = N, y = meanDepth))
1521829542887:d.plot <- d.plot + facet_grid(Locus ~ ., scales = "free_y")
1521829542889:d.plot <- d.plot + labs(title = "K-mer Depth Distribution",
1521829542890:subtitle = basename(input.file),
1521829542890:x     = "Allele Ranking",
1521829542891:y     = "k-mer Depth")
1521829542892:d.plot <- d.plot + theme_bw()
1521829542897:d.plot <- d.plot + theme(legend.position = "none",
1521829542898:plot.title = element_text(hjust = 0.5),
1521829542898:plot.subtitle = element_text(hjust = 0.5))
1521829542901:d.plot
1521829578378:d.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521829578380:d.plot <- d.plot + geom_boxplot(alpha = 0.6, size = 0.25, aes(fill = Allele))
1521829578385:d.plot <- d.plot + geom_text(data = labelsData,
1521829578386:size = 3,
1521829578386:hjust = "left",
1521829578387:aes(x = (N - 0.5),
1521829578388:y = info.y * 1.05,
1521829578388:label = Allele),
1521829578389:color = "#333333")
1521829578395:d.plot <- d.plot + geom_point(data = labelsData,
1521829578396:shape = 23, fill = "white",
1521829578396:aes(x = N, y = meanDepth))
1521829578400:d.plot <- d.plot + facet_grid(Locus ~ ., scales = "free_y")
1521829578401:d.plot <- d.plot + labs(title = "K-mer Depth Distribution",
1521829578402:subtitle = basename(input.file),
1521829578402:x     = "Allele Ranking",
1521829578402:y     = "k-mer Depth")
1521829578404:d.plot <- d.plot + theme_bw()
1521829578410:d.plot <- d.plot + theme(#legend.position = "none",
1521829578411:plot.title = element_text(hjust = 0.5),
1521829578411:plot.subtitle = element_text(hjust = 0.5))
1521829578417:d.plot
1521829626030:d.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521829626032:d.plot <- d.plot + geom_boxplot(alpha = 0.6, size = 0.25, aes(fill = Allele))
1521829626038:d.plot <- d.plot + geom_text(data = labelsData,
1521829626039:size = 3,
1521829626040:hjust = "left",
1521829626040:aes(x = (N - 0.5),
1521829626040:y = info.y * 1.05,
1521829626041:label = Allele),
1521829626041:color = "#333333")
1521829626046:d.plot <- d.plot + geom_point(data = labelsData,
1521829626047:shape = 23, fill = "white",
1521829626051:aes(x = N, y = meanDepth),
1521829626052:show.legend = TRUE)
1521829626057:d.plot <- d.plot + facet_grid(Locus ~ ., scales = "free_y")
1521829626059:d.plot <- d.plot + labs(title = "K-mer Depth Distribution",
1521829626060:subtitle = basename(input.file),
1521829626061:x     = "Allele Ranking",
1521829626061:y     = "k-mer Depth")
1521829626063:d.plot <- d.plot + theme_bw()
1521829626068:d.plot <- d.plot + theme(#legend.position = "none",
1521829626069:plot.title = element_text(hjust = 0.5),
1521829626069:plot.subtitle = element_text(hjust = 0.5))
1521829626072:d.plot
1521829671559:d.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521829671561:d.plot <- d.plot + geom_boxplot(alpha = 0.6, size = 0.25, aes(fill = Allele))
1521829671563:d.plot <- d.plot + geom_text(data = labelsData,
1521829671564:size = 3,
1521829671565:hjust = "left",
1521829671565:aes(x = (N - 0.5),
1521829671565:y = info.y * 1.05,
1521829671566:label = Allele),
1521829671566:color = "#333333")
1521829671569:d.plot <- d.plot + geom_point(data = labelsData,
1521829671569:shape = 23, fill = "white",
1521829671570:aes(x = N, y = meanDepth))
1521829671572:d.plot <- d.plot + facet_grid(Locus ~ ., scales = "free_y")
1521829671574:d.plot <- d.plot + labs(title = "K-mer Depth Distribution",
1521829671574:subtitle = basename(input.file),
1521829671575:x     = "Allele Ranking",
1521829671575:y     = "k-mer Depth")
1521829671576:d.plot <- d.plot + theme_bw()
1521829671581:d.plot <- d.plot + theme(legend.position = "none",
1521829671581:plot.title = element_text(hjust = 0.5),
1521829671582:plot.subtitle = element_text(hjust = 0.5))
1521829671585:d.plot
1521830135861:hFactor  <- 4
1521830135862:wFactor  <- 4
1521830135864:if (nLoci == 1)
1521830135865:hFactor <- 4.5
1521830135867:height       <- nLoci * hFactor
1521830135869:width        <- nAlleles * wFactor
1521830158313:out.prefix <- "~/kmer_ext_depth"
1521830185016:hFactor  <- 4
1521830185016:wFactor  <- 4
1521830185017:if (nLoci == 1)
1521830185017:hFactor <- 4.5
1521830185018:height       <- nLoci * hFactor
1521830185018:width        <- nAlleles * wFactor
1521830185019:out.filename <- paste0(out.prefix, "_dist.", out.format)
1521830185020:if (out.format == "png") {
1521830185021:ggsave(filename = out.filename, plot = dist.plot,
1521830185021:width  = width,
1521830185022:height = height,
1521830185023:type = "cairo-png",
1521830185023:dpi = 300)
1521830185023:} else {
1521830185024:ggsave(filename = out.filename, plot = dist.plot,
1521830185024:width  = width,
1521830185025:height = height,
1521830185025:dpi = 400)
1521830185025:}
1521830192026:dist.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521830192028:dist.plot <- dist.plot + geom_boxplot(alpha = 0.6, size = 0.25, aes(fill = Allele))
1521830192033:dist.plot <- dist.plot + geom_text(data = labelsData,
1521830192034:size = 3,
1521830192035:hjust = "left",
1521830192035:aes(x = (N - 0.5),
1521830192036:y = info.y * 1.05,
1521830192036:label = Allele),
1521830192037:color = "#333333")
1521830192042:dist.plot <- dist.plot + geom_point(data = labelsData,
1521830192042:shape = 23, fill = "white",
1521830192043:aes(x = N, y = meanDepth))
1521830192047:dist.plot <- dist.plot + facet_grid(Locus ~ ., scales = "free_y")
1521830192049:dist.plot <- dist.plot + labs(title = "K-mer Depth Distribution",
1521830192049:subtitle = basename(input.file),
1521830192050:x     = "Allele Ranking",
1521830192050:y     = "k-mer Depth")
1521830192052:dist.plot <- dist.plot + theme_bw()
1521830192058:dist.plot <- dist.plot + theme(legend.position = "none",
1521830192059:plot.title = element_text(hjust = 0.5),
1521830192059:plot.subtitle = element_text(hjust = 0.5))
1521830192063:dist.plot
1521830197604:hFactor  <- 4
1521830197605:wFactor  <- 4
1521830197606:if (nLoci == 1)
1521830197607:hFactor <- 4.5
1521830197608:height       <- nLoci * hFactor
1521830197610:width        <- nAlleles * wFactor
1521830197611:out.filename <- paste0(out.prefix, "_dist.", out.format)
1521830197612:if (out.format == "png") {
1521830197613:ggsave(filename = out.filename, plot = dist.plot,
1521830197614:width  = width,
1521830197615:height = height,
1521830197615:type = "cairo-png",
1521830197616:dpi = 300)
1521830197616:} else {
1521830197617:ggsave(filename = out.filename, plot = dist.plot,
1521830197618:width  = width,
1521830197618:height = height,
1521830197619:dpi = 400)
1521830197620:}
1521830229264:hFactor  <- 4
1521830229265:wFactor  <- 2
1521830229266:if (nLoci == 1)
1521830229267:hFactor <- 4.5
1521830229268:height       <- nLoci * hFactor
1521830229268:width        <- nAlleles * wFactor
1521830229270:out.filename <- paste0(out.prefix, "_dist.", out.format)
1521830229271:if (out.format == "png") {
1521830229271:ggsave(filename = out.filename, plot = dist.plot,
1521830229272:width  = width,
1521830229272:height = height,
1521830229273:type = "cairo-png",
1521830229273:dpi = 300)
1521830229274:} else {
1521830229274:ggsave(filename = out.filename, plot = dist.plot,
1521830229275:width  = width,
1521830229276:height = height,
1521830229276:dpi = 400)
1521830229277:}
1521830294805:dist.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521830294807:dist.plot <- dist.plot + geom_boxplot(alpha = 0.6, size = 0.4, aes(fill = Allele))
1521830294813:dist.plot <- dist.plot + geom_text(data = labelsData,
1521830294814:size = 3,
1521830294814:hjust = "left",
1521830294815:aes(x = (N - 0.5),
1521830294816:y = info.y * 1.05,
1521830294817:label = Allele),
1521830294817:color = "#333333")
1521830294823:dist.plot <- dist.plot + geom_point(data = labelsData,
1521830294824:shape = 23, fill = "white",
1521830294824:aes(x = N, y = meanDepth))
1521830294829:dist.plot <- dist.plot + facet_grid(Locus ~ ., scales = "free_y")
1521830294831:dist.plot <- dist.plot + labs(title = "K-mer Depth Distribution",
1521830294831:subtitle = basename(input.file),
1521830294832:x     = "Allele Ranking",
1521830294832:y     = "k-mer Depth")
1521830294835:dist.plot <- dist.plot + theme_bw()
1521830294841:dist.plot <- dist.plot + theme(legend.position = "none",
1521830294842:plot.title = element_text(hjust = 0.5),
1521830294843:plot.subtitle = element_text(hjust = 0.5))
1521830294847:dist.plot
1521830296074:hFactor  <- 4
1521830296075:wFactor  <- 2
1521830296075:if (nLoci == 1)
1521830296075:hFactor <- 4.5
1521830296076:height       <- nLoci * hFactor
1521830296077:width        <- nAlleles * wFactor
1521830296077:out.filename <- paste0(out.prefix, "_dist.", out.format)
1521830296078:if (out.format == "png") {
1521830296078:ggsave(filename = out.filename, plot = dist.plot,
1521830296079:width  = width,
1521830296079:height = height,
1521830296079:type = "cairo-png",
1521830296080:dpi = 300)
1521830296080:} else {
1521830296080:ggsave(filename = out.filename, plot = dist.plot,
1521830296081:width  = width,
1521830296081:height = height,
1521830296081:dpi = 400)
1521830296082:}
1521830316593:dist.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521830316595:dist.plot <- dist.plot + geom_boxplot(alpha = 0.6, size = 0.4, aes(fill = Allele))
1521830316603:dist.plot <- dist.plot + geom_text(data = labelsData,
1521830316604:size = 4,
1521830316604:hjust = "left",
1521830316605:aes(x = (N - 0.5),
1521830316606:y = info.y * 1.05,
1521830316606:label = Allele),
1521830316607:color = "#333333")
1521830316612:dist.plot <- dist.plot + geom_point(data = labelsData,
1521830316613:shape = 23, fill = "white",
1521830316613:aes(x = N, y = meanDepth))
1521830316617:dist.plot <- dist.plot + facet_grid(Locus ~ ., scales = "free_y")
1521830316619:dist.plot <- dist.plot + labs(title = "K-mer Depth Distribution",
1521830316620:subtitle = basename(input.file),
1521830316621:x     = "Allele Ranking",
1521830316622:y     = "k-mer Depth")
1521830316625:dist.plot <- dist.plot + theme_bw()
1521830316632:dist.plot <- dist.plot + theme(legend.position = "none",
1521830316632:plot.title = element_text(hjust = 0.5),
1521830316633:plot.subtitle = element_text(hjust = 0.5))
1521830316637:dist.plot
1521830317820:hFactor  <- 4
1521830317821:wFactor  <- 2
1521830317821:if (nLoci == 1)
1521830317821:hFactor <- 4.5
1521830317822:height       <- nLoci * hFactor
1521830317822:width        <- nAlleles * wFactor
1521830317823:out.filename <- paste0(out.prefix, "_dist.", out.format)
1521830317824:if (out.format == "png") {
1521830317824:ggsave(filename = out.filename, plot = dist.plot,
1521830317824:width  = width,
1521830317825:height = height,
1521830317825:type = "cairo-png",
1521830317825:dpi = 300)
1521830317826:} else {
1521830317826:ggsave(filename = out.filename, plot = dist.plot,
1521830317826:width  = width,
1521830317827:height = height,
1521830317827:dpi = 400)
1521830317827:}
1521830435520:data.to.plot <- inData
1521830435522:max.x <- max(data.to.plot$Position)
1521830435523:max.y <- max(data.to.plot$Depth)
1521830435525:nLoci    <- length(unique(data.to.plot$Locus))
1521830435526:nAlleles <- length(unique(data.to.plot$N))
1521830435527:alleles     <- unique(inData$Allele)
1521830435528:loci        <- as.character(unique(inData$Locus))
1521830435529:lociLabels  <- c()
1521830435529:name.x      <- c()
1521830435530:name.y      <- c()
1521830435531:info.x      <- c()
1521830435531:info.y      <- c()
1521830435532:covs        <- c()
1521830435532:meanDepths  <- c()
1521830435533:meanDepth.x <- c()
1521830435533:meanDepth.y <- c()
1521830435534:for (i in loci) {
1521830435534:lociLabels <- c(lociLabels, rep(i, 3))
1521830435535:}
1521830435539:for (allele in alleles) {
1521830435539:locus       <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1521830435539:# maxPos      <- max(data.to.plot[data.to.plot$Allele == allele, "Position"])
1521830435540:maxPos      <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1521830435540:# maxDepth    <- max(data.to.plot[data.to.plot$Allele == allele, "kmerDepth"])
1521830435541:maxDepth    <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1521830435541:name.x      <- c(name.x, (maxPos / 2))
1521830435542:name.y      <- c(name.y, (maxDepth * 0.2))
1521830435543:info.x      <- c(info.x, max.x * 0.02)
1521830435543:info.y      <- c(info.y, maxDepth * 0.9)
1521830435544:covs        <- c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"]))
1521830435545:meanDepths  <- c(meanDepths, unique(data.to.plot[data.to.plot$Allele == allele, "MeanKmerDepth"]))
1521830435546:# meanDepth.x <- c(meanDepth.x, max.x * 0.30)
1521830435547:# meanDepth.y <- c(meanDepth.y, maxDepth * 0.9)
1521830435547:}
1521830435650:# (labelsData <- data.frame(Allele = alleles, name.x = x, name.y = y))
1521830435651:# data.to.plot <- left_join(data.to.plot, labelsData)
1521830435652:(labelsData <- data.frame(Allele = alleles,
1521830435652:name.x = name.x,
1521830435653:name.y = name.y,
1521830435653:info = paste0("cov=", format(round(covs, 1), nsmall = 1), "%  ", paste0("md=", format(round(meanDepths, 1), nsmall = 1))),
1521830435654:info.x = info.x, info.y = info.y,
1521830435654:meanDepth = meanDepths,
1521830435655:# meanDepth.x = meanDepth.x, meanDepth.y = meanDepth.y,
1521830435656:N = rep(unique(data.to.plot$N), nLoci),
1521830435656:Locus = lociLabels))
1521830435672:hFactor  <- 1.1
1521830435673:wFactor  <- 4
1521830435673:if (nLoci == 1)
1521830435673:hFactor <- 1.8
1521830435674:height       <- nLoci * hFactor
1521830435674:width        <- nAlleles * wFactor
1521830435675:depth.plot   <- plotDepth(data.to.plot, labelsData)
1521830435697:depth.plot
1521830442825:out.filename <- paste0(out.prefix, ".", out.format)
1521830442825:if (out.format == "png") {
1521830442826:ggsave(filename = out.filename, plot = depth.plot,
1521830442826:width  = width,
1521830442827:height = height,
1521830442827:type = "cairo-png",
1521830442827:dpi = 300)
1521830442828:} else {
1521830442828:ggsave(filename = out.filename, plot = depth.plot,
1521830442828:width  = width,
1521830442829:height = height,
1521830442829:dpi = 400)
1521830442829:}
1521830450142:cat("Done! \n")
1521830450144:dist.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521830450145:dist.plot <- dist.plot + geom_boxplot(alpha = 0.6, size = 0.4, aes(fill = Allele))
1521830450148:dist.plot <- dist.plot + geom_text(data = labelsData,
1521830450148:size = 4,
1521830450148:hjust = "left",
1521830450149:aes(x = (N - 0.5),
1521830450149:y = info.y * 1.05,
1521830450149:label = Allele),
1521830450150:color = "#333333")
1521830451407:dist.plot <- dist.plot + geom_point(data = labelsData,
1521830451407:shape = 23, fill = "white",
1521830451407:aes(x = N, y = meanDepth))
1521830451410:dist.plot <- dist.plot + facet_grid(Locus ~ ., scales = "free_y")
1521830451411:dist.plot <- dist.plot + labs(title = "K-mer Depth Distribution",
1521830451412:subtitle = basename(input.file),
1521830451412:x     = "Allele Ranking",
1521830451412:y     = "k-mer Depth")
1521830451414:dist.plot <- dist.plot + theme_bw()
1521830451418:dist.plot <- dist.plot + theme(legend.position = "none",
1521830451419:plot.title = element_text(hjust = 0.5),
1521830451419:plot.subtitle = element_text(hjust = 0.5))
1521830451422:dist.plot
1521830452550:hFactor  <- 4
1521830452551:wFactor  <- 2
1521830452551:if (nLoci == 1)
1521830452552:hFactor <- 4.5
1521830452552:height       <- nLoci * hFactor
1521830452553:width        <- nAlleles * wFactor
1521830452554:out.filename <- paste0(out.prefix, "_dist.", out.format)
1521830452554:if (out.format == "png") {
1521830452554:ggsave(filename = out.filename, plot = dist.plot,
1521830452555:width  = width,
1521830452555:height = height,
1521830452555:type = "cairo-png",
1521830452556:dpi = 300)
1521830452556:} else {
1521830452557:ggsave(filename = out.filename, plot = dist.plot,
1521830452557:width  = width,
1521830452557:height = height,
1521830452558:dpi = 400)
1521830452558:}
1521830632823:dist.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521830632825:dist.plot <- dist.plot + geom_boxplot(alpha = 0.6, size = 0.4, aes(fill = Allele))
1521830632830:dist.plot <- dist.plot + geom_jitter(position=position_jitter(width=.2))
1521830632834:dist.plot <- dist.plot + geom_text(data = labelsData,
1521830632835:size = 4,
1521830632835:hjust = "left",
1521830632836:aes(x = (N - 0.5),
1521830632836:y = info.y * 1.05,
1521830632836:label = Allele),
1521830632837:color = "#333333")
1521830632840:dist.plot <- dist.plot + geom_point(data = labelsData,
1521830632840:shape = 23, fill = "white",
1521830632841:aes(x = N, y = meanDepth))
1521830632844:dist.plot <- dist.plot + facet_grid(Locus ~ ., scales = "free_y")
1521830632845:dist.plot <- dist.plot + labs(title = "K-mer Depth Distribution",
1521830632845:subtitle = basename(input.file),
1521830632846:x     = "Allele Ranking",
1521830632846:y     = "k-mer Depth")
1521830632847:dist.plot <- dist.plot + theme_bw()
1521830632852:dist.plot <- dist.plot + theme(legend.position = "none",
1521830632852:plot.title = element_text(hjust = 0.5),
1521830632853:plot.subtitle = element_text(hjust = 0.5))
1521830632856:dist.plot
1521830701690:dist.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521830701693:dist.plot <- dist.plot + geom_jitter(position = position_jitter(width=.2),
1521830701694:alpha = 0.4)
1521830701697:dist.plot <- dist.plot + geom_boxplot(alpha = 0.6, size = 0.4, aes(fill = Allele))
1521830701700:dist.plot <- dist.plot + geom_text(data = labelsData,
1521830701700:size = 4,
1521830701701:hjust = "left",
1521830701701:aes(x = (N - 0.5),
1521830701701:y = info.y * 1.05,
1521830701702:label = Allele),
1521830701702:color = "#333333")
1521830701705:dist.plot <- dist.plot + geom_point(data = labelsData,
1521830701706:shape = 23, fill = "white",
1521830701706:aes(x = N, y = meanDepth))
1521830701709:dist.plot <- dist.plot + facet_grid(Locus ~ ., scales = "free_y")
1521830701710:dist.plot <- dist.plot + labs(title = "K-mer Depth Distribution",
1521830701711:subtitle = basename(input.file),
1521830701711:x     = "Allele Ranking",
1521830701711:y     = "k-mer Depth")
1521830701713:dist.plot <- dist.plot + theme_bw()
1521830701719:dist.plot <- dist.plot + theme(legend.position = "none",
1521830701720:plot.title = element_text(hjust = 0.5),
1521830701721:plot.subtitle = element_text(hjust = 0.5))
1521830701726:dist.plot
1521835371291:inData %>%
1521835371291:group_by(Allele) %>%
1521835371292:summarise(var = var(kmerDepth))
1521835394784:inData %>%
1521835394785:group_by(Allele) %>%
1521835394786:summarise(sd = sd(kmerDepth))
1521835532222:sd <- inData %>%
1521835532222:group_by(Allele) %>%
1521835532223:summarise(sd = sd(kmerDepth))
1521835534726:sd
1521835557376:left_join(labelsData, sd)
1521835582420:sd
1521835586594:labelsData
1521835603237:(labelsData <- left_join(labelsData, sd))
1521835605810:labelsData
1521835639440:# (labelsData <- data.frame(Allele = alleles, name.x = x, name.y = y))
1521835639440:# data.to.plot <- left_join(data.to.plot, labelsData)
1521835639441:(labelsData <- data.frame(Allele = alleles,
1521835639441:name.x = name.x,
1521835639441:name.y = name.y,
1521835639442:info = paste0("cov=", format(round(covs, 1), nsmall = 1), "%  ", paste0("md=", format(round(meanDepths, 1), nsmall = 1))),
1521835639442:info.x = info.x, info.y = info.y,
1521835639442:meanDepth = meanDepths,
1521835639443:# meanDepth.x = meanDepth.x, meanDepth.y = meanDepth.y,
1521835639443:N = rep(unique(data.to.plot$N), nLoci),
1521835639443:Locus = lociLabels)
1521835639444:)
1521835673744:data.frame(Allele = alleles,
1521835673745:name.x = name.x,
1521835673746:name.y = name.y,
1521835673747:info = paste0("cov=", format(round(covs, 1), nsmall = 1), "%  ", paste0("md=", format(round(meanDepths, 1), nsmall = 1))),
1521835673747:info.x = info.x, info.y = info.y,
1521835673748:meanDepth = meanDepths,
1521835673749:# meanDepth.x = meanDepth.x, meanDepth.y = meanDepth.y,
1521835673749:N = rep(unique(data.to.plot$N), nLoci),
1521835673750:Locus = lociLabels) %>%
1521835673751:group_by(Allele) %>%
1521835673752:summarise(sd = sd(kmerDepth))
1521835681786:data.frame(Allele = alleles,
1521835681787:name.x = name.x,
1521835681788:name.y = name.y,
1521835681788:info = paste0("cov=", format(round(covs, 1), nsmall = 1), "%  ", paste0("md=", format(round(meanDepths, 1), nsmall = 1))),
1521835681789:info.x = info.x, info.y = info.y,
1521835681790:meanDepth = meanDepths,
1521835681791:# meanDepth.x = meanDepth.x, meanDepth.y = meanDepth.y,
1521835681792:N = rep(unique(data.to.plot$N), nLoci),
1521835681793:Locus = lociLabels) %>%
1521835681794:group_by(Allele)
1521835722249:data.frame(Allele = alleles,
1521835722250:name.x = name.x,
1521835722251:name.y = name.y,
1521835722252:info = paste0("cov=", format(round(covs, 1), nsmall = 1), "%  ", paste0("md=", format(round(meanDepths, 1), nsmall = 1))),
1521835722252:info.x = info.x, info.y = info.y,
1521835722253:meanDepth = meanDepths,
1521835722253:# meanDepth.x = meanDepth.x, meanDepth.y = meanDepth.y,
1521835722253:N = rep(unique(data.to.plot$N), nLoci),
1521835722254:Locus = lociLabels) %>%
1521835722254:left_join(labelsData, sd)
1521835732891:data.frame(Allele = alleles,
1521835732891:name.x = name.x,
1521835732892:name.y = name.y,
1521835732893:info = paste0("cov=", format(round(covs, 1), nsmall = 1), "%  ", paste0("md=", format(round(meanDepths, 1), nsmall = 1))),
1521835732894:info.x = info.x, info.y = info.y,
1521835732894:meanDepth = meanDepths,
1521835732895:# meanDepth.x = meanDepth.x, meanDepth.y = meanDepth.y,
1521835732896:N = rep(unique(data.to.plot$N), nLoci),
1521835732896:Locus = lociLabels) %>%
1521835732897:left_join(sd)
1521835759699:(labelsData <- data.frame(Allele = alleles,
1521835759700:name.x = name.x,
1521835759701:name.y = name.y,
1521835759702:info = paste0("cov=", format(round(covs, 1), nsmall = 1), "%  ", paste0("md=", format(round(meanDepths, 1), nsmall = 1))),
1521835759703:info.x = info.x, info.y = info.y,
1521835759704:meanDepth = meanDepths,
1521835759705:# meanDepth.x = meanDepth.x, meanDepth.y = meanDepth.y,
1521835759706:N = rep(unique(data.to.plot$N), nLoci),
1521835759707:Locus = lociLabels) %>%
1521835759708:left_join(inData %>%
1521835759708:group_by(Allele) %>%
1521835759709:summarise(sd = sd(kmerDepth)))
1521835759711:)
1521835782215:# (labelsData <- data.frame(Allele = alleles, name.x = x, name.y = y))
1521835782215:# data.to.plot <- left_join(data.to.plot, labelsData)
1521835782216:(labelsData <- data.frame(Allele = alleles,
1521835782216:name.x = name.x,
1521835782217:name.y = name.y,
1521835782217:info = paste0("cov=", format(round(covs, 1), nsmall = 1), "%  ", paste0("md=", format(round(meanDepths, 1), nsmall = 1))),
1521835782217:info.x = info.x, info.y = info.y,
1521835782218:meanDepth = meanDepths,
1521835782219:# meanDepth.x = meanDepth.x, meanDepth.y = meanDepth.y,
1521835782220:N = rep(unique(data.to.plot$N), nLoci),
1521835782220:Locus = lociLabels) %>%
1521835782221:left_join(inData %>%
1521835782222:group_by(Allele) %>%
1521835782222:summarise(sd = sd(kmerDepth)))
1521835782222:)
1521835865165:dist.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521835865167:# dist.plot <- dist.plot + geom_jitter(position = position_jitter(width=.2),
1521835865168:# alpha = 0.4)
1521835865168:dist.plot <- dist.plot + geom_boxplot(alpha = 0.6, size = 0.4, aes(fill = Allele))
1521835865172:dist.plot <- dist.plot + geom_text(data = labelsData,
1521835865172:size = 4,
1521835865173:hjust = "left",
1521835865173:aes(x = (N - 0.5),
1521835865174:y = info.y * 1.05,
1521835865174:label = Allele),
1521835865175:color = "#333333")
1521835865179:dist.plot <- dist.plot + geom_text(data = labelsData,
1521835865179:size = 4,
1521835865180:hjust = "left",
1521835865180:aes(x = (N - 0.5),
1521835865181:y = info.y * 0.1,
1521835865181:label = paste0("sd=",sd)),
1521835865182:color = "#333333")
1521835865186:dist.plot <- dist.plot + geom_point(data = labelsData,
1521835865187:shape = 23, fill = "white",
1521835865187:aes(x = N, y = meanDepth))
1521835865191:dist.plot <- dist.plot + facet_grid(Locus ~ ., scales = "free_y")
1521835865193:dist.plot <- dist.plot + labs(title = "K-mer Depth Distribution",
1521835865193:subtitle = basename(input.file),
1521835865194:x     = "Allele Ranking",
1521835865194:y     = "k-mer Depth")
1521835865196:dist.plot <- dist.plot + theme_bw()
1521835865201:dist.plot <- dist.plot + theme(legend.position = "none",
1521835865201:plot.title = element_text(hjust = 0.5),
1521835865202:plot.subtitle = element_text(hjust = 0.5))
1521835865205:dist.plot
1521835928491:dist.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521835928492:# dist.plot <- dist.plot + geom_jitter(position = position_jitter(width=.2),
1521835928493:# alpha = 0.4)
1521835928493:dist.plot <- dist.plot + geom_boxplot(alpha = 0.6, size = 0.4, aes(fill = Allele))
1521835928502:dist.plot <- dist.plot + geom_text(data = labelsData,
1521835928503:size = 4,
1521835928504:hjust = "left",
1521835928504:aes(x = (N - 0.5),
1521835928505:y = info.y * 1.05,
1521835928506:label = Allele),
1521835928506:color = "#333333")
1521835928510:dist.plot <- dist.plot + geom_text(data = labelsData,
1521835928510:size = 4,
1521835928510:hjust = "left",
1521835928511:aes(x = (N - 0.5),
1521835928511:y = info.y * 0.1,
1521835928512:label = paste0("sd=",format(round(sd, 1), nsmall = 1))),
1521835928512:color = "#333333")
1521835928516:dist.plot <- dist.plot + geom_point(data = labelsData,
1521835928516:shape = 23, fill = "white",
1521835928516:aes(x = N, y = meanDepth))
1521835928519:dist.plot <- dist.plot + facet_grid(Locus ~ ., scales = "free_y")
1521835928521:dist.plot <- dist.plot + labs(title = "K-mer Depth Distribution",
1521835928521:subtitle = basename(input.file),
1521835928521:x     = "Allele Ranking",
1521835928522:y     = "k-mer Depth")
1521835928523:dist.plot <- dist.plot + theme_bw()
1521835928528:dist.plot <- dist.plot + theme(legend.position = "none",
1521835928528:plot.title = element_text(hjust = 0.5),
1521835928528:plot.subtitle = element_text(hjust = 0.5))
1521835928531:dist.plot
1521835964405:dist.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521835964407:# dist.plot <- dist.plot + geom_jitter(position = position_jitter(width=.2),
1521835964408:# alpha = 0.4)
1521835964409:dist.plot <- dist.plot + geom_boxplot(alpha = 0.6, size = 0.4, aes(fill = Allele))
1521835964414:dist.plot <- dist.plot + geom_text(data = labelsData,
1521835964415:size = 4,
1521835964415:hjust = "left",
1521835964416:aes(x = (N - 0.5),
1521835964417:y = info.y * 1.05,
1521835964418:label = Allele),
1521835964419:color = "#333333")
1521835964424:dist.plot <- dist.plot + geom_text(data = labelsData,
1521835964424:size = 3,
1521835964425:hjust = "left",
1521835964425:aes(x = (N - 0.4),
1521835964426:y = info.y * 0.15,
1521835964426:label = paste0("sd=",format(round(sd, 1), nsmall = 1))),
1521835964427:color = "#333333")
1521835964437:dist.plot <- dist.plot + geom_point(data = labelsData,
1521835964438:shape = 23, fill = "white",
1521835964438:aes(x = N, y = meanDepth))
1521835964442:dist.plot <- dist.plot + facet_grid(Locus ~ ., scales = "free_y")
1521835964444:dist.plot <- dist.plot + labs(title = "K-mer Depth Distribution",
1521835964444:subtitle = basename(input.file),
1521835964445:x     = "Allele Ranking",
1521835964445:y     = "k-mer Depth")
1521835964447:dist.plot <- dist.plot + theme_bw()
1521835964453:dist.plot <- dist.plot + theme(legend.position = "none",
1521835964454:plot.title = element_text(hjust = 0.5),
1521835964454:plot.subtitle = element_text(hjust = 0.5))
1521835964458:dist.plot
1521835980647:dist.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521835980649:# dist.plot <- dist.plot + geom_jitter(position = position_jitter(width=.2),
1521835980649:# alpha = 0.4)
1521835980650:dist.plot <- dist.plot + geom_boxplot(alpha = 0.6, size = 0.4, aes(fill = Allele))
1521835980655:dist.plot <- dist.plot + geom_text(data = labelsData,
1521835980656:size = 4,
1521835980656:hjust = "left",
1521835980657:aes(x = (N - 0.5),
1521835980658:y = info.y * 1.05,
1521835980658:label = Allele),
1521835980659:color = "#333333")
1521835980663:dist.plot <- dist.plot + geom_text(data = labelsData,
1521835980664:size = 3,
1521835980664:hjust = "left",
1521835980665:aes(x = (N - 0.4),
1521835980665:y = info.y * 0.15,
1521835980666:label = paste0("sd=",format(round(sd, 1), nsmall = 1))),
1521835980666:color = "#333333")
1521835980671:dist.plot <- dist.plot + geom_point(data = labelsData,
1521835980671:shape = 23, fill = "white",
1521835980672:aes(x = N, y = meanDepth))
1521835980675:dist.plot <- dist.plot + facet_grid(Locus ~ ., scales = "free_y")
1521835980677:dist.plot <- dist.plot + labs(title = "K-mer Depth Distribution",
1521835980677:subtitle = basename(input.file),
1521835980678:x     = "Allele Ranking",
1521835980678:y     = "k-mer Depth")
1521835980680:dist.plot <- dist.plot + theme_bw()
1521835980688:dist.plot <- dist.plot + theme(legend.position = "none",
1521835980688:plot.title = element_text(hjust = 0.5),
1521835980689:plot.subtitle = element_text(hjust = 0.5))
1521835980694:dist.plot
1521835981974:hFactor  <- 4
1521835981975:wFactor  <- 2
1521835981975:if (nLoci == 1)
1521835981976:hFactor <- 4.5
1521835981976:height       <- nLoci * hFactor
1521835981977:width        <- nAlleles * wFactor
1521835981978:out.filename <- paste0(out.prefix, "_dist.", out.format)
1521835981978:if (out.format == "png") {
1521835981979:ggsave(filename = out.filename, plot = dist.plot,
1521835981979:width  = width,
1521835981979:height = height,
1521835981980:type = "cairo-png",
1521835981980:dpi = 300)
1521835981980:} else {
1521835981981:ggsave(filename = out.filename, plot = dist.plot,
1521835981981:width  = width,
1521835981981:height = height,
1521835981982:dpi = 400)
1521835981982:}
1521836032896:dist.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521836032899:# dist.plot <- dist.plot + geom_jitter(position = position_jitter(width=.2),
1521836032899:# alpha = 0.4)
1521836032900:dist.plot <- dist.plot + geom_boxplot(alpha = 0.6, size = 0.4, aes(fill = Allele))
1521836032904:dist.plot <- dist.plot + geom_text(data = labelsData,
1521836032904:size = 4,
1521836032905:hjust = "left",
1521836032905:aes(x = (N - 0.5),
1521836032906:y = info.y * 1.05,
1521836032906:label = Allele),
1521836032906:color = "#333333")
1521836032910:dist.plot <- dist.plot + geom_text(data = labelsData,
1521836032911:size = 3,
1521836032912:hjust = "left",
1521836032912:aes(x = (N - 0.4),
1521836032913:y = info.y * 0.1,
1521836032913:label = paste0("sd=",format(round(sd, 1), nsmall = 1))),
1521836032914:color = "#333333")
1521836032918:dist.plot <- dist.plot + geom_point(data = labelsData,
1521836032919:shape = 23, fill = "white",
1521836032919:aes(x = N, y = meanDepth))
1521836032924:dist.plot <- dist.plot + facet_grid(Locus ~ ., scales = "free_y")
1521836032925:dist.plot <- dist.plot + labs(title = "K-mer Depth Distribution",
1521836032926:subtitle = basename(input.file),
1521836032926:x     = "Allele Ranking",
1521836032927:y     = "k-mer Depth")
1521836032929:dist.plot <- dist.plot + theme_bw()
1521836032935:dist.plot <- dist.plot + theme(legend.position = "none",
1521836032935:plot.title = element_text(hjust = 0.5),
1521836032935:plot.subtitle = element_text(hjust = 0.5))
1521836032939:dist.plot
1521836034562:hFactor  <- 4
1521836034562:wFactor  <- 2
1521836034563:if (nLoci == 1)
1521836034563:hFactor <- 4.5
1521836034564:height       <- nLoci * hFactor
1521836034564:width        <- nAlleles * wFactor
1521836034565:out.filename <- paste0(out.prefix, "_dist.", out.format)
1521836034566:if (out.format == "png") {
1521836034566:ggsave(filename = out.filename, plot = dist.plot,
1521836034566:width  = width,
1521836034567:height = height,
1521836034567:type = "cairo-png",
1521836034568:dpi = 300)
1521836034568:} else {
1521836034568:ggsave(filename = out.filename, plot = dist.plot,
1521836034569:width  = width,
1521836034569:height = height,
1521836034569:dpi = 400)
1521836034570:}
1521836049020:dist.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521836049022:# dist.plot <- dist.plot + geom_jitter(position = position_jitter(width=.2),
1521836049023:# alpha = 0.4)
1521836049024:dist.plot <- dist.plot + geom_boxplot(alpha = 0.6, size = 0.4, aes(fill = Allele))
1521836049031:dist.plot <- dist.plot + geom_text(data = labelsData,
1521836049032:size = 4,
1521836049033:hjust = "left",
1521836049033:aes(x = (N - 0.5),
1521836049034:y = info.y * 1.05,
1521836049035:label = Allele),
1521836049035:color = "#333333")
1521836049042:dist.plot <- dist.plot + geom_text(data = labelsData,
1521836049043:size = 3,
1521836049044:hjust = "left",
1521836049044:aes(x = (N - 0.4),
1521836049045:y = info.y * 0.08,
1521836049045:label = paste0("sd=",format(round(sd, 1), nsmall = 1))),
1521836049046:color = "#333333")
1521836049050:dist.plot <- dist.plot + geom_point(data = labelsData,
1521836049051:shape = 23, fill = "white",
1521836049051:aes(x = N, y = meanDepth))
1521836049055:dist.plot <- dist.plot + facet_grid(Locus ~ ., scales = "free_y")
1521836049057:dist.plot <- dist.plot + labs(title = "K-mer Depth Distribution",
1521836049057:subtitle = basename(input.file),
1521836049058:x     = "Allele Ranking",
1521836049058:y     = "k-mer Depth")
1521836049064:dist.plot <- dist.plot + theme_bw()
1521836049070:dist.plot <- dist.plot + theme(legend.position = "none",
1521836049070:plot.title = element_text(hjust = 0.5),
1521836049071:plot.subtitle = element_text(hjust = 0.5))
1521836049074:dist.plot
1521836050369:hFactor  <- 4
1521836050370:wFactor  <- 2
1521836050370:if (nLoci == 1)
1521836050371:hFactor <- 4.5
1521836050371:height       <- nLoci * hFactor
1521836050372:width        <- nAlleles * wFactor
1521836050373:out.filename <- paste0(out.prefix, "_dist.", out.format)
1521836050373:if (out.format == "png") {
1521836050374:ggsave(filename = out.filename, plot = dist.plot,
1521836050374:width  = width,
1521836050374:height = height,
1521836050375:type = "cairo-png",
1521836050375:dpi = 300)
1521836050376:} else {
1521836050377:ggsave(filename = out.filename, plot = dist.plot,
1521836050377:width  = width,
1521836050378:height = height,
1521836050378:dpi = 400)
1521836050379:}
1521836175893:plotDepthDist <- function(data.to.plot, labelsData) {
1521836175894:dist.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521836175894:# dist.plot <- dist.plot + geom_jitter(position = position_jitter(width=.2),
1521836175895:# alpha = 0.4)
1521836175895:dist.plot <- dist.plot + geom_boxplot(alpha = 0.6, size = 0.4, aes(fill = Allele))
1521836175896:dist.plot <- dist.plot + geom_text(data = labelsData,
1521836175896:size = 4,
1521836175897:hjust = "left",
1521836175897:aes(x = (N - 0.5),
1521836175898:y = info.y * 1.05,
1521836175898:label = Allele),
1521836175899:color = "#333333")
1521836175900:dist.plot <- dist.plot + geom_text(data = labelsData,
1521836175900:size = 3,
1521836175901:hjust = "left",
1521836175901:aes(x = (N - 0.4),
1521836175902:y = info.y * 0.08,
1521836175902:label = paste0("sd=",format(round(sd, 1), nsmall = 1))),
1521836175903:color = "#333333")
1521836175905:dist.plot <- dist.plot + geom_point(data = labelsData,
1521836175905:shape = 23, fill = "white",
1521836175906:aes(x = N, y = meanDepth))
1521836175906:dist.plot <- dist.plot + facet_grid(Locus ~ ., scales = "free_y")
1521836175907:dist.plot <- dist.plot + labs(title = "K-mer Depth Distribution",
1521836175907:subtitle = basename(input.file),
1521836175908:x     = "Allele Ranking",
1521836175909:y     = "k-mer Depth")
1521836175910:dist.plot <- dist.plot + theme_bw()
1521836175910:dist.plot <- dist.plot + theme(legend.position = "none",
1521836175911:plot.title = element_text(hjust = 0.5),
1521836175912:plot.subtitle = element_text(hjust = 0.5))
1521836175912:dist.plot
1521836175913:}
1521836237014:dist.plot <- plotDepthDist(data.to.plot, labelsData)
1521836238491:out.filename <- paste0(out.prefix, "_dist.", out.format)
1521836239417:if (out.format == "png") {
1521836239419:ggsave(filename = out.filename, plot = dist.plot,
1521836239419:width  = width,
1521836239420:height = height,
1521836239421:type = "cairo-png",
1521836239421:dpi = 300)
1521836239422:} else {
1521836239423:ggsave(filename = out.filename, plot = dist.plot,
1521836239423:width  = width,
1521836239424:height = height,
1521836239424:dpi = 400)
1521836239425:}
1521836355569:getLabelsData <- function(data.to.plot) {
1521836355570:max.x <- max(data.to.plot$Position)
1521836355570:max.y <- max(data.to.plot$Depth)
1521836355572:nLoci    <- length(unique(data.to.plot$Locus))
1521836355572:nAlleles <- length(unique(data.to.plot$N))
1521836355574:alleles     <- unique(inData$Allele)
1521836355574:loci        <- as.character(unique(inData$Locus))
1521836355575:lociLabels  <- c()
1521836355576:name.x      <- c()
1521836355577:name.y      <- c()
1521836355578:info.x      <- c()
1521836355578:info.y      <- c()
1521836355579:covs        <- c()
1521836355581:meanDepths  <- c()
1521836355582:meanDepth.x <- c()
1521836355583:meanDepth.y <- c()
1521836355583:for (i in loci) {
1521836355584:lociLabels <- c(lociLabels, rep(i, 3))
1521836355585:}
1521836355585:for (allele in alleles) {
1521836355586:locus       <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1521836355587:# maxPos      <- max(data.to.plot[data.to.plot$Allele == allele, "Position"])
1521836355588:maxPos      <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1521836355590:# maxDepth    <- max(data.to.plot[data.to.plot$Allele == allele, "kmerDepth"])
1521836355591:maxDepth    <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1521836355591:name.x      <- c(name.x, (maxPos / 2))
1521836355592:name.y      <- c(name.y, (maxDepth * 0.2))
1521836355593:info.x      <- c(info.x, max.x * 0.02)
1521836355594:info.y      <- c(info.y, maxDepth * 0.9)
1521836355594:covs        <- c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"]))
1521836355595:meanDepths  <- c(meanDepths, unique(data.to.plot[data.to.plot$Allele == allele, "MeanKmerDepth"]))
1521836355596:# meanDepth.x <- c(meanDepth.x, max.x * 0.30)
1521836355597:# meanDepth.y <- c(meanDepth.y, maxDepth * 0.9)
1521836355597:}
1521836355598:# (labelsData <- data.frame(Allele = alleles, name.x = x, name.y = y))
1521836355599:# data.to.plot <- left_join(data.to.plot, labelsData)
1521836355599:labelsData <- data.frame(Allele = alleles,
1521836355600:name.x = name.x,
1521836355601:name.y = name.y,
1521836355602:info = paste0("cov=", format(round(covs, 1), nsmall = 1), "%  ", paste0("md=", format(round(meanDepths, 1), nsmall = 1))),
1521836355603:info.x = info.x, info.y = info.y,
1521836355603:meanDepth = meanDepths,
1521836355604:# meanDepth.x = meanDepth.x, meanDepth.y = meanDepth.y,
1521836355605:N = rep(unique(data.to.plot$N), nLoci),
1521836355606:Locus = lociLabels) %>%
1521836355606:left_join(inData %>%
1521836355607:group_by(Allele) %>%
1521836355608:summarise(sd = sd(kmerDepth)))
1521836355609:labelsData
1521836355610:}
1521836396506:# ==============================================================
1521836396507:data.to.plot <- inData
1521836397119:labelsData <- getLabelsData(data.to.plot)
1521836413130:getLabelsData <- function(data.to.plot) {
1521836413130:max.x <- max(data.to.plot$Position)
1521836413131:max.y <- max(data.to.plot$kmerDepth)
1521836413132:nLoci    <- length(unique(data.to.plot$Locus))
1521836413133:nAlleles <- length(unique(data.to.plot$N))
1521836413134:alleles     <- unique(data.to.plot$Allele)
1521836413135:loci        <- as.character(unique(data.to.plot$Locus))
1521836413135:lociLabels  <- c()
1521836413136:name.x      <- c()
1521836413137:name.y      <- c()
1521836413138:info.x      <- c()
1521836413138:info.y      <- c()
1521836413139:covs        <- c()
1521836413140:meanDepths  <- c()
1521836413140:meanDepth.x <- c()
1521836413141:meanDepth.y <- c()
1521836413142:for (i in loci) {
1521836413143:lociLabels <- c(lociLabels, rep(i, 3))
1521836413143:}
1521836413144:for (allele in alleles) {
1521836413145:locus       <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1521836413146:# maxPos      <- max(data.to.plot[data.to.plot$Allele == allele, "Position"])
1521836413146:maxPos      <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1521836413147:# maxDepth    <- max(data.to.plot[data.to.plot$Allele == allele, "kmerDepth"])
1521836413148:maxDepth    <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1521836413149:name.x      <- c(name.x, (maxPos / 2))
1521836413149:name.y      <- c(name.y, (maxDepth * 0.2))
1521836413150:info.x      <- c(info.x, max.x * 0.02)
1521836413155:info.y      <- c(info.y, maxDepth * 0.9)
1521836413156:covs        <- c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"]))
1521836413157:meanDepths  <- c(meanDepths, unique(data.to.plot[data.to.plot$Allele == allele, "MeanKmerDepth"]))
1521836413158:# meanDepth.x <- c(meanDepth.x, max.x * 0.30)
1521836413159:# meanDepth.y <- c(meanDepth.y, maxDepth * 0.9)
1521836413160:}
1521836413161:# (labelsData <- data.frame(Allele = alleles, name.x = x, name.y = y))
1521836413162:# data.to.plot <- left_join(data.to.plot, labelsData)
1521836413163:labelsData <- data.frame(Allele = alleles,
1521836413164:name.x = name.x,
1521836413165:name.y = name.y,
1521836413166:info = paste0("cov=", format(round(covs, 1), nsmall = 1), "%  ", paste0("md=", format(round(meanDepths, 1), nsmall = 1))),
1521836413167:info.x = info.x, info.y = info.y,
1521836413168:meanDepth = meanDepths,
1521836413169:# meanDepth.x = meanDepth.x, meanDepth.y = meanDepth.y,
1521836413170:N = rep(unique(data.to.plot$N), nLoci),
1521836413171:Locus = lociLabels) %>%
1521836413172:left_join(inData %>%
1521836413173:group_by(Allele) %>%
1521836413174:summarise(sd = sd(kmerDepth)))
1521836413175:labelsData
1521836413176:}
1521836414908:labelsData <- getLabelsData(data.to.plot)
1521836535848:#!/usr/bin/env Rscript
1521836535849:################################################################################
1521836535850:# Author:   Hector Fabio Espitia Navarro
1521836535850:#           Georgia Institute of Technology
1521836535851:#
1521836535852:# Version:  1.0
1521836535852:# Date:     02/18/2017
1521836535853:################################################################################
1521836535854:# Install required packages
1521836535855:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1521836535855:if(!file.exists(personal.lib.path))
1521836535856:dir.create(personal.lib.path)
1521836535857:installAndLoadPackages <- function(pkg){
1521836535857:cat("Please wait a moment! Checking for required packages... ")
1521836535858:cat("Done!\n")
1521836535858:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1521836535859:if (length(new.pkg)) {
1521836535859:cat("Installing new packages... ")
1521836535860:install.packages(new.pkg, dependencies = TRUE,
1521836535860:repos="http://cran.rstudio.com/",
1521836535861:lib = personal.lib.path)
1521836535861:cat("Done!\n")
1521836535862:}
1521836535863:cat("Loading required packages... ")
1521836535863:sapply(pkg, function(x){
1521836535864:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1521836535864:})
1521836535865:cat("Done!\n")
1521836535865:}
1521836535867:# github.packages <- c("tibble")
1521836535867:github.related.packages <- c("devtools", "Rcpp")
1521836535868:packages <- c("argparser", "tidyverse", "RColorBrewer")#, "ggplot2",  "tidyr")
1521836535869:installAndLoadPackages(packages)
1521836535877:# if(any(!(github.related.packages %in% installed.packages()))) {
1521836535878:#   cat("Please wait a moment! Installing required packages... ")
1521836535878:#   install.packages(github.related.packages[!(github.related.packages %in% installed.packages())],
1521836535879:#                    quiet = T, repos="http://cran.rstudio.com/",
1521836535879:#                    lib = personal.lib.path, dependencies = TRUE)
1521836535880:#   if(any(!(github.packages %in% installed.packages()))){
1521836535880:#     devtools::install_github("tidyverse/tibble",
1521836535880:#                              lib = personal.lib.path,
1521836535881:#                              quiet = T)
1521836535881:#   }
1521836535882:# }
1521836535882:#
1521836535882:# if(any(!(packages %in% installed.packages()))){
1521836535883:#   cat("Please wait a moment! Installing required packages... ")
1521836535883:#   install.packages(packages[!(packages %in% installed.packages())],
1521836535883:#                    quiet = T, repos="http://cran.rstudio.com/",
1521836535884:#                    lib = personal.lib.path, dependencies = TRUE)
1521836535884:#   cat("Done!\n\n\n")
1521836535885:#   cat("Executing the script:\n\n")
1521836535885:# }
1521836535885:#
1521836535886:# # Load packages
1521836535886:# suppressPackageStartupMessages(library(argparser, quietly = TRUE))
1521836535886:# suppressPackageStartupMessages(library(tidyverse, quietly = TRUE))
1521836535887:# # suppressPackageStartupMessages(library(ggplot2, quietly = TRUE))
1521836535887:# # suppressPackageStartupMessages(library(tidyr, quietly = TRUE))
1521836535888:# suppressPackageStartupMessages(library(RColorBrewer, quietly = TRUE))
1521836535888:################################################################################
1521836535889:# Get script name
1521836535889:initial.options <- commandArgs(trailingOnly = FALSE)
1521836535890:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1521836535891:# Process command line arguments
1521836535891:# Create a parser
1521836535892:p <- arg_parser("This script generates K-mer depth plots using as input data the file generated by STing typer tool (-t option).",
1521836535892:name = script.name)
1521836535894:# Add Positional arguments (required)
1521836535895:p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
1521836535896:# Add options
1521836535896:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1521836535896:default = "kmer_depth")
1521836535898:p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'",
1521836535898:default = "pdf")
1521836535899:# Parse command line arguments
1521836535900:argv <- parse_args(p)
1521836535904:# Initialization of variables
1521836535905:command.line = FALSE   # Turn to FALSE to test the script inside RStudio
1521836535905:if(command.line) {
1521836535906:# Get argument values from command line
1521836535906:input.file <- argv$input_file
1521836535906:out.format <- argv$format
1521836535907:out.prefix <- argv$prefix
1521836535907:} else {
1521836535907:# Values to test the script using RStudio
1521836535908:script.home = "/home/hspitia/projects/sting"
1521836535908:input.file <- paste(script.home, "ext_depth.tsv", sep = "/")
1521836535908:out.format <- "pdf"
1521836535909:out.prefix <- "~/kmer_ext_depth"
1521836535909:}
1521836535910:# ################################################################################
1521836535910:CheckFileExists <- function(file.list) {
1521836535911:non.exist.files <- !file.exists(file.list)
1521836535911:if(any(non.exist.files)) {
1521836535912:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1521836535912:}
1521836535912:}
1521836535913:# ################################################################################
1521836535913:# Check for input files
1521836535913:files.to.check <- c(input.file)
1521836535914:error.message  <- CheckFileExists(files.to.check)
1521836535915:if(!is.null(error.message)){
1521836535915:stop(error.message)
1521836535915:} else {
1521836535916:# ========================================================================
1521836535916:# Code core - Begin
1521836535916:# ========================================================================
1521836535917:cat("Plotting depths... ")
1521836535917:options(stringsAsFactors = T)
1521836535917:# Load data
1521836535918:inData <- read.delim(input.file)
1521836535918:# print(head(inData))
1521836535919:# colnames(inData) <- c("Allele", "Position", "k-mer Depth", "Weighted k-mer Depth")
1521836535919:colnames(inData) <- c("N", "Locus", "Allele", "Position", "kmerDepth",
1521836535920:"Norm. count", "Coverage", "MeanKmerDepth")
1521836535920:# inData$BestAllele <- paste0(inData$N, " - ", inData$Allele)
1521836535920:head(inData)
1521836535921:# Order data by Locus and N
1521836535922:inData <- arrange(inData, Locus, N)
1521836535922:inData <- inData %>%
1521836535922:mutate(Allele = factor(Allele, levels = unique(inData$Allele)))
1521836535923:# ==============================================================
1521836535924:plotDepth <- function(data.to.plot, labelsData) {
1521836535924:colourCount = length(unique(data.to.plot$Allele))
1521836535925:getPalette = colorRampPalette(brewer.pal(7, "Set1"))
1521836535925:max.x <- max(data.to.plot$Position)
1521836535926:max.y <- max(data.to.plot$kmerDepth)
1521836535926:x.limits <- seq(0, max.x, 100)
1521836535927:y.limits <- seq(0, max.y, 20)
1521836535928:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521836535928:y = kmerDepth),
1521836535928:size = 0.2)
1521836535929:d.plot <- d.plot + geom_area(alpha = 0.6,
1521836535929:aes(color = Allele,
1521836535930:# alpha = N,
1521836535930:fill = Allele
1521836535931:))
1521836535931:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521836535932:# d.plot <- d.plot + scale_color_hue(l = 40)
1521836535932:d.plot <- d.plot + geom_text(data = labelsData,
1521836535933:size = 3,
1521836535933:aes(x = name.x,
1521836535934:y = name.y,
1521836535934:label = Allele),
1521836535935:color = "#333333")
1521836535936:d.plot <- d.plot + geom_text(data = labelsData,
1521836535937:size = 3,
1521836535937:hjust = "left",
1521836535938:aes(x = info.x,
1521836535938:y = info.y,
1521836535939:label = info),
1521836535939:color = "#222222")
1521836535940:# d.plot <- d.plot + geom_text(data = labelsData,
1521836535940:#                              size = 3,
1521836535941:#                              hjust = "left",
1521836535942:#                              aes(x = meanDepth.x,
1521836535942:#                                  y = meanDepth.y,
1521836535943:#                                  label = meanDepth),
1521836535943:#                              color = "#333333")
1521836535944:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521836535944:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521836535945:expand = c(0, 2.0))
1521836535945:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521836535946:#                                     expand = c(0, 2))
1521836535947:# if (colourCount > 9) {
1521836535947:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521836535948:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521836535949:# } else {
1521836535950:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521836535951:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521836535952:# }
1521836535953:d.plot <- d.plot + theme_bw()
1521836535954:# d.plot <- d.plot + theme_linedraw()
1521836535955:d.plot <- d.plot + labs(title = "K-mer Depth",
1521836535956:subtitle = basename(input.file),
1521836535956:x     = "Position along sequence (bp)",
1521836535957:y     = "k-mer Depth")
1521836535957:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521836535958:# color = FALSE)
1521836535959:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521836535959:plot.subtitle = element_text(hjust = 0.5),
1521836535960:axis.text.x = element_text(angle = 50,
1521836535961:vjust = 1,
1521836535962:hjust = 1,
1521836535962:size = 7),
1521836535963:legend.position = "none")
1521836535964:d.plot
1521836535964:}
1521836535965:plotDepthDist <- function(data.to.plot, labelsData) {
1521836535966:dist.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521836535967:# dist.plot <- dist.plot + geom_jitter(position = position_jitter(width=.2),
1521836535967:# alpha = 0.4)
1521836535968:dist.plot <- dist.plot + geom_boxplot(alpha = 0.6, size = 0.4, aes(fill = Allele))
1521836535970:dist.plot <- dist.plot + geom_text(data = labelsData,
1521836535970:size = 4,
1521836535971:hjust = "left",
1521836535972:aes(x = (N - 0.5),
1521836535972:y = info.y * 1.05,
1521836535973:label = Allele),
1521836535974:color = "#333333")
1521836535976:dist.plot <- dist.plot + geom_text(data = labelsData,
1521836535976:size = 3,
1521836535977:hjust = "left",
1521836535978:aes(x = (N - 0.4),
1521836535978:y = info.y * 0.08,
1521836535979:label = paste0("sd=",format(round(sd, 1), nsmall = 1))),
1521836535980:color = "#333333")
1521836535981:dist.plot <- dist.plot + geom_point(data = labelsData,
1521836535982:shape = 23, fill = "white",
1521836535983:aes(x = N, y = meanDepth))
1521836535983:dist.plot <- dist.plot + facet_grid(Locus ~ ., scales = "free_y")
1521836535984:dist.plot <- dist.plot + labs(title = "K-mer Depth Distribution",
1521836535985:subtitle = basename(input.file),
1521836535986:x     = "Allele Ranking",
1521836535987:y     = "k-mer Depth")
1521836535987:dist.plot <- dist.plot + theme_bw()
1521836535988:dist.plot <- dist.plot + theme(legend.position = "none",
1521836535989:plot.title = element_text(hjust = 0.5),
1521836535990:plot.subtitle = element_text(hjust = 0.5))
1521836535991:dist.plot
1521836535991:}
1521836535993:getLabelsData <- function(data.to.plot) {
1521836535994:max.x <- max(data.to.plot$Position)
1521836535995:max.y <- max(data.to.plot$kmerDepth)
1521836535997:nLoci    <- length(unique(data.to.plot$Locus))
1521836535997:nAlleles <- length(unique(data.to.plot$N))
1521836535999:alleles     <- unique(data.to.plot$Allele)
1521836536000:loci        <- as.character(unique(data.to.plot$Locus))
1521836536001:lociLabels  <- c()
1521836536002:name.x      <- c()
1521836536003:name.y      <- c()
1521836536004:info.x      <- c()
1521836536005:info.y      <- c()
1521836536006:covs        <- c()
1521836536006:meanDepths  <- c()
1521836536007:meanDepth.x <- c()
1521836536008:meanDepth.y <- c()
1521836536009:for (i in loci) {
1521836536010:lociLabels <- c(lociLabels, rep(i, 3))
1521836536011:}
1521836536012:for (allele in alleles) {
1521836536013:locus       <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1521836536014:# maxPos      <- max(data.to.plot[data.to.plot$Allele == allele, "Position"])
1521836536015:maxPos      <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1521836536016:# maxDepth    <- max(data.to.plot[data.to.plot$Allele == allele, "kmerDepth"])
1521836536017:maxDepth    <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1521836536018:name.x      <- c(name.x, (maxPos / 2))
1521836536019:name.y      <- c(name.y, (maxDepth * 0.2))
1521836536020:info.x      <- c(info.x, max.x * 0.02)
1521836536021:info.y      <- c(info.y, maxDepth * 0.9)
1521836536022:covs        <- c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"]))
1521836536023:meanDepths  <- c(meanDepths, unique(data.to.plot[data.to.plot$Allele == allele, "MeanKmerDepth"]))
1521836536024:# meanDepth.x <- c(meanDepth.x, max.x * 0.30)
1521836536026:# meanDepth.y <- c(meanDepth.y, maxDepth * 0.9)
1521836536027:}
1521836536028:# (labelsData <- data.frame(Allele = alleles, name.x = x, name.y = y))
1521836536029:# data.to.plot <- left_join(data.to.plot, labelsData)
1521836536030:labelsData <- data.frame(Allele = alleles,
1521836536031:name.x = name.x,
1521836536032:name.y = name.y,
1521836536033:info = paste0("cov=", format(round(covs, 1), nsmall = 1), "%  ", paste0("md=", format(round(meanDepths, 1), nsmall = 1))),
1521836536035:info.x = info.x, info.y = info.y,
1521836536036:meanDepth = meanDepths,
1521836536037:# meanDepth.x = meanDepth.x, meanDepth.y = meanDepth.y,
1521836536038:N = rep(unique(data.to.plot$N), nLoci),
1521836536040:Locus = lociLabels) %>%
1521836536041:left_join(inData %>%
1521836536042:group_by(Allele) %>%
1521836536043:summarise(sd = sd(kmerDepth)))
1521836536044:labelsData
1521836536045:}
1521836536046:# ==============================================================
1521836536048:data.to.plot <- inData
1521836536049:labelsData   <- getLabelsData(data.to.plot)
1521836536051:hFactor  <- 1.1
1521836536052:wFactor  <- 4
1521836536054:if (nLoci == 1)
1521836536055:hFactor <- 1.8
1521836536057:height       <- nLoci * hFactor
1521836536059:width        <- nAlleles * wFactor
1521836536061:depth.plot   <- plotDepth(data.to.plot, labelsData)
1521836536062:depth.plot
1521836536064:out.filename <- paste0(out.prefix, ".", out.format)
1521836536066:if (out.format == "png") {
1521836536067:ggsave(filename = out.filename, plot = depth.plot,
1521836536068:width  = width,
1521836536069:height = height,
1521836536070:type = "cairo-png",
1521836536072:dpi = 300)
1521836536073:} else {
1521836536074:ggsave(filename = out.filename, plot = depth.plot,
1521836536076:width  = width,
1521836536078:height = height,
1521836536080:dpi = 400)
1521836536081:}
1521836536082:cat("Done! \n")
1521836536086:hFactor  <- 4
1521836536087:wFactor  <- 2
1521836536088:if (nLoci == 1)
1521836536090:hFactor <- 4.5
1521836536091:height       <- nLoci * hFactor
1521836536092:width        <- nAlleles * wFactor
1521836536095:dist.plot <- plotDepthDist(data.to.plot, labelsData)
1521836536096:dist.plot
1521836536098:out.filename <- paste0(out.prefix, "_dist.", out.format)
1521836536100:if (out.format == "png") {
1521836536101:ggsave(filename = out.filename, plot = dist.plot,
1521836536102:width  = width,
1521836536104:height = height,
1521836536105:type = "cairo-png",
1521836536106:dpi = 300)
1521836536107:} else {
1521836536109:ggsave(filename = out.filename, plot = dist.plot,
1521836536110:width  = width,
1521836536111:height = height,
1521836536112:dpi = 400)
1521836536114:}
1521836536116:# ========================================================================
1521836536117:# Code core - End
1521836536119:# ========================================================================
1521836536120:}
1521837400608:list
1521837485669:#!/usr/bin/env Rscript
1521837485670:################################################################################
1521837485671:# Author:   Hector Fabio Espitia Navarro
1521837485671:#           Georgia Institute of Technology
1521837485672:#
1521837485673:# Version:  1.0
1521837485674:# Date:     02/18/2017
1521837485674:################################################################################
1521837485675:# Install required packages
1521837485676:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1521837485677:if(!file.exists(personal.lib.path))
1521837485678:dir.create(personal.lib.path)
1521837485679:installAndLoadPackages <- function(pkg){
1521837485680:cat("Please wait a moment! Checking for required packages... ")
1521837485681:cat("Done!\n")
1521837485681:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1521837485682:if (length(new.pkg)) {
1521837485682:cat("Installing new packages... ")
1521837485683:install.packages(new.pkg, dependencies = TRUE,
1521837485683:repos="http://cran.rstudio.com/",
1521837485684:lib = personal.lib.path)
1521837485684:cat("Done!\n")
1521837485685:}
1521837485685:cat("Loading required packages... ")
1521837485686:sapply(pkg, function(x){
1521837485686:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1521837485687:})
1521837485688:cat("Done!\n")
1521837485688:}
1521837485690:# github.packages <- c("tibble")
1521837485690:github.related.packages <- c("devtools", "Rcpp")
1521837485691:packages <- c("argparser", "tidyverse", "RColorBrewer")#, "ggplot2",  "tidyr")
1521837485692:installAndLoadPackages(packages)
1521837485698:# if(any(!(github.related.packages %in% installed.packages()))) {
1521837485699:#   cat("Please wait a moment! Installing required packages... ")
1521837485699:#   install.packages(github.related.packages[!(github.related.packages %in% installed.packages())],
1521837485699:#                    quiet = T, repos="http://cran.rstudio.com/",
1521837485700:#                    lib = personal.lib.path, dependencies = TRUE)
1521837485700:#   if(any(!(github.packages %in% installed.packages()))){
1521837485701:#     devtools::install_github("tidyverse/tibble",
1521837485701:#                              lib = personal.lib.path,
1521837485702:#                              quiet = T)
1521837485702:#   }
1521837485702:# }
1521837485703:#
1521837485703:# if(any(!(packages %in% installed.packages()))){
1521837485704:#   cat("Please wait a moment! Installing required packages... ")
1521837485704:#   install.packages(packages[!(packages %in% installed.packages())],
1521837485704:#                    quiet = T, repos="http://cran.rstudio.com/",
1521837485705:#                    lib = personal.lib.path, dependencies = TRUE)
1521837485705:#   cat("Done!\n\n\n")
1521837485706:#   cat("Executing the script:\n\n")
1521837485706:# }
1521837485706:#
1521837485707:# # Load packages
1521837485707:# suppressPackageStartupMessages(library(argparser, quietly = TRUE))
1521837485708:# suppressPackageStartupMessages(library(tidyverse, quietly = TRUE))
1521837485708:# # suppressPackageStartupMessages(library(ggplot2, quietly = TRUE))
1521837485708:# # suppressPackageStartupMessages(library(tidyr, quietly = TRUE))
1521837485709:# suppressPackageStartupMessages(library(RColorBrewer, quietly = TRUE))
1521837485709:################################################################################
1521837485710:# Get script name
1521837485710:initial.options <- commandArgs(trailingOnly = FALSE)
1521837485711:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1521837485712:# Process command line arguments
1521837485712:# Create a parser
1521837485713:p <- arg_parser("This script generates K-mer depth plots using as input data the file generated by STing typer tool (-t option).",
1521837485713:name = script.name)
1521837485715:# Add Positional arguments (required)
1521837485716:p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
1521837485717:# Add options
1521837485717:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1521837485717:default = "kmer_depth")
1521837485719:p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'",
1521837485719:default = "pdf")
1521837485720:# Initialization of variables
1521837485721:# Values to test the script using RStudio
1521837485721:script.home = "/home/hspitia/projects/sting"
1521837485722:input.file <- paste(script.home, "ext_depth.tsv", sep = "/")
1521837485722:out.format <- "pdf"
1521837485723:out.prefix <- "~/kmer_ext_depth"
1521837485724:# Parse command line arguments
1521837485724:command.line = FALSE   # Turn to FALSE to test the script inside RStudio
1521837485725:if(command.line) {
1521837485725:argv <- parse_args(p)
1521837485726:} else {
1521837485726:argv <- parse_args(p, list(input.file, "--prefix", out.prefix,
1521837485726:"--format", out.format))
1521837485727:}
1521837485729:# command.line = TRUE   # Turn to FALSE to test the script inside RStudio
1521837485730:# if(command.line) {
1521837485730:#   # Get argument values from command line
1521837485731:#   input.file <- argv$input_file
1521837485731:#   out.format <- argv$format
1521837485731:#   out.prefix <- argv$prefix
1521837485732:# } else {
1521837485732:#   # Values to test the script using RStudio
1521837485732:#   script.home = "/home/hspitia/projects/sting"
1521837485733:#   input.file <- paste(script.home, "ext_depth.tsv", sep = "/")
1521837485733:#   out.format <- "pdf"
1521837485733:#   out.prefix <- "~/kmer_ext_depth"
1521837485734:# }
1521837485734:# ################################################################################
1521837485735:CheckFileExists <- function(file.list) {
1521837485735:non.exist.files <- !file.exists(file.list)
1521837485736:if(any(non.exist.files)) {
1521837485736:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1521837485736:}
1521837485737:}
1521837485737:# ################################################################################
1521837485738:# Check for input files
1521837485738:files.to.check <- c(input.file)
1521837485738:error.message  <- CheckFileExists(files.to.check)
1521837485739:if(!is.null(error.message)){
1521837485740:stop(error.message)
1521837485740:} else {
1521837485740:# ========================================================================
1521837485741:# Code core - Begin
1521837485741:# ========================================================================
1521837485741:cat("Plotting depths... ")
1521837485742:options(stringsAsFactors = T)
1521837485742:# Load data
1521837485742:inData <- read.delim(input.file)
1521837485743:# print(head(inData))
1521837485743:# colnames(inData) <- c("Allele", "Position", "k-mer Depth", "Weighted k-mer Depth")
1521837485744:colnames(inData) <- c("N", "Locus", "Allele", "Position", "kmerDepth",
1521837485744:"Norm. count", "Coverage", "MeanKmerDepth")
1521837485745:# inData$BestAllele <- paste0(inData$N, " - ", inData$Allele)
1521837485745:head(inData)
1521837485746:# Order data by Locus and N
1521837485746:inData <- arrange(inData, Locus, N)
1521837485747:inData <- inData %>%
1521837485747:mutate(Allele = factor(Allele, levels = unique(inData$Allele)))
1521837485748:# ==============================================================
1521837485748:plotDepth <- function(data.to.plot, labelsData) {
1521837485749:colourCount = length(unique(data.to.plot$Allele))
1521837485749:getPalette = colorRampPalette(brewer.pal(7, "Set1"))
1521837485750:max.x <- max(data.to.plot$Position)
1521837485750:max.y <- max(data.to.plot$kmerDepth)
1521837485751:x.limits <- seq(0, max.x, 100)
1521837485751:y.limits <- seq(0, max.y, 20)
1521837485752:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521837485752:y = kmerDepth),
1521837485753:size = 0.2)
1521837485753:d.plot <- d.plot + geom_area(alpha = 0.6,
1521837485754:aes(color = Allele,
1521837485754:# alpha = N,
1521837485755:fill = Allele
1521837485755:))
1521837485756:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521837485756:# d.plot <- d.plot + scale_color_hue(l = 40)
1521837485756:d.plot <- d.plot + geom_text(data = labelsData,
1521837485757:size = 3,
1521837485758:aes(x = name.x,
1521837485758:y = name.y,
1521837485759:label = Allele),
1521837485759:color = "#333333")
1521837485760:d.plot <- d.plot + geom_text(data = labelsData,
1521837485761:size = 3,
1521837485761:hjust = "left",
1521837485762:aes(x = info.x,
1521837485762:y = info.y,
1521837485763:label = info),
1521837485763:color = "#222222")
1521837485764:# d.plot <- d.plot + geom_text(data = labelsData,
1521837485765:#                              size = 3,
1521837485765:#                              hjust = "left",
1521837485766:#                              aes(x = meanDepth.x,
1521837485766:#                                  y = meanDepth.y,
1521837485767:#                                  label = meanDepth),
1521837485767:#                              color = "#333333")
1521837485768:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521837485769:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521837485769:expand = c(0, 2.0))
1521837485770:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521837485772:#                                     expand = c(0, 2))
1521837485774:# if (colourCount > 9) {
1521837485775:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521837485776:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521837485777:# } else {
1521837485778:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521837485779:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521837485780:# }
1521837485781:d.plot <- d.plot + theme_bw()
1521837485782:# d.plot <- d.plot + theme_linedraw()
1521837485783:d.plot <- d.plot + labs(title = "K-mer Depth",
1521837485783:subtitle = basename(input.file),
1521837485784:x     = "Position along sequence (bp)",
1521837485784:y     = "k-mer Depth")
1521837485785:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521837485786:# color = FALSE)
1521837485786:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521837485787:plot.subtitle = element_text(hjust = 0.5),
1521837485787:axis.text.x = element_text(angle = 50,
1521837485788:vjust = 1,
1521837485789:hjust = 1,
1521837485789:size = 7),
1521837485790:legend.position = "none")
1521837485790:d.plot
1521837485791:}
1521837485792:plotDepthDist <- function(data.to.plot, labelsData) {
1521837485793:dist.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521837485793:# dist.plot <- dist.plot + geom_jitter(position = position_jitter(width=.2),
1521837485794:# alpha = 0.4)
1521837485795:dist.plot <- dist.plot + geom_boxplot(alpha = 0.6, size = 0.4, aes(fill = Allele))
1521837485795:dist.plot <- dist.plot + geom_text(data = labelsData,
1521837485796:size = 4,
1521837485796:hjust = "left",
1521837485797:aes(x = (N - 0.5),
1521837485798:y = info.y * 1.05,
1521837485798:label = Allele),
1521837485799:color = "#333333")
1521837485800:dist.plot <- dist.plot + geom_text(data = labelsData,
1521837485801:size = 3,
1521837485802:hjust = "left",
1521837485802:aes(x = (N - 0.4),
1521837485803:y = info.y * 0.08,
1521837485804:label = paste0("sd=",format(round(sd, 1), nsmall = 1))),
1521837485804:color = "#333333")
1521837485806:dist.plot <- dist.plot + geom_point(data = labelsData,
1521837485807:shape = 23, fill = "white",
1521837485808:aes(x = N, y = meanDepth))
1521837485808:dist.plot <- dist.plot + facet_grid(Locus ~ ., scales = "free_y")
1521837485809:dist.plot <- dist.plot + labs(title = "K-mer Depth Distribution",
1521837485810:subtitle = basename(input.file),
1521837485811:x     = "Allele Ranking",
1521837485812:y     = "k-mer Depth")
1521837485813:dist.plot <- dist.plot + theme_bw()
1521837485814:dist.plot <- dist.plot + theme(legend.position = "none",
1521837485815:plot.title = element_text(hjust = 0.5),
1521837485816:plot.subtitle = element_text(hjust = 0.5))
1521837485816:dist.plot
1521837485817:}
1521837485819:getLabelsData <- function(data.to.plot) {
1521837485820:max.x <- max(data.to.plot$Position)
1521837485821:max.y <- max(data.to.plot$kmerDepth)
1521837485823:nLoci    <- length(unique(data.to.plot$Locus))
1521837485824:nAlleles <- length(unique(data.to.plot$N))
1521837485826:alleles     <- unique(data.to.plot$Allele)
1521837485827:loci        <- as.character(unique(data.to.plot$Locus))
1521837485828:lociLabels  <- c()
1521837485829:name.x      <- c()
1521837485830:name.y      <- c()
1521837485831:info.x      <- c()
1521837485832:info.y      <- c()
1521837485833:covs        <- c()
1521837485834:meanDepths  <- c()
1521837485835:meanDepth.x <- c()
1521837485836:meanDepth.y <- c()
1521837485837:for (i in loci) {
1521837485838:lociLabels <- c(lociLabels, rep(i, 3))
1521837485840:}
1521837485841:for (allele in alleles) {
1521837485842:locus       <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1521837485843:# maxPos      <- max(data.to.plot[data.to.plot$Allele == allele, "Position"])
1521837485844:maxPos      <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1521837485845:# maxDepth    <- max(data.to.plot[data.to.plot$Allele == allele, "kmerDepth"])
1521837485846:maxDepth    <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1521837485847:name.x      <- c(name.x, (maxPos / 2))
1521837485848:name.y      <- c(name.y, (maxDepth * 0.2))
1521837485849:info.x      <- c(info.x, max.x * 0.02)
1521837485851:info.y      <- c(info.y, maxDepth * 0.9)
1521837485852:covs        <- c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"]))
1521837485853:meanDepths  <- c(meanDepths, unique(data.to.plot[data.to.plot$Allele == allele, "MeanKmerDepth"]))
1521837485854:# meanDepth.x <- c(meanDepth.x, max.x * 0.30)
1521837485855:# meanDepth.y <- c(meanDepth.y, maxDepth * 0.9)
1521837485856:}
1521837485857:# (labelsData <- data.frame(Allele = alleles, name.x = x, name.y = y))
1521837485858:# data.to.plot <- left_join(data.to.plot, labelsData)
1521837485859:labelsData <- data.frame(Allele = alleles,
1521837485860:name.x = name.x,
1521837485862:name.y = name.y,
1521837485863:info = paste0("cov=", format(round(covs, 1), nsmall = 1), "%  ", paste0("md=", format(round(meanDepths, 1), nsmall = 1))),
1521837485864:info.x = info.x, info.y = info.y,
1521837485865:meanDepth = meanDepths,
1521837485866:# meanDepth.x = meanDepth.x, meanDepth.y = meanDepth.y,
1521837485867:N = rep(unique(data.to.plot$N), nLoci),
1521837485868:Locus = lociLabels) %>%
1521837485869:left_join(inData %>%
1521837485871:group_by(Allele) %>%
1521837485872:summarise(sd = sd(kmerDepth)))
1521837485873:labelsData
1521837485874:}
1521837485875:# ==============================================================
1521837485876:data.to.plot <- inData
1521837485878:labelsData   <- getLabelsData(data.to.plot)
1521837485880:nLoci    <- length(unique(data.to.plot$Locus))
1521837485881:nAlleles <- length(unique(data.to.plot$N))
1521837485883:hFactor  <- 1.1
1521837485885:wFactor  <- 4
1521837485886:if (nLoci == 1)
1521837485887:hFactor <- 1.8
1521837485888:height       <- nLoci * hFactor
1521837485889:width        <- nAlleles * wFactor
1521837485891:depth.plot   <- plotDepth(data.to.plot, labelsData)
1521837485893:depth.plot
1521837485895:out.filename <- paste0(out.prefix, ".", out.format)
1521837485897:if (out.format == "png") {
1521837485898:ggsave(filename = out.filename, plot = depth.plot,
1521837485899:width  = width,
1521837485900:height = height,
1521837485902:type = "cairo-png",
1521837485903:dpi = 300)
1521837485904:} else {
1521837485905:ggsave(filename = out.filename, plot = depth.plot,
1521837485907:width  = width,
1521837485908:height = height,
1521837485909:dpi = 400)
1521837485910:}
1521837485912:cat("Done! \n")
1521837485915:hFactor  <- 4
1521837485916:wFactor  <- 2
1521837485917:if (nLoci == 1)
1521837485919:hFactor <- 4.5
1521837485920:height       <- nLoci * hFactor
1521837485921:width        <- nAlleles * wFactor
1521837485923:dist.plot <- plotDepthDist(data.to.plot, labelsData)
1521837485924:dist.plot
1521837485927:out.filename <- paste0(out.prefix, "_dist.", out.format)
1521837485928:if (out.format == "png") {
1521837485929:ggsave(filename = out.filename, plot = dist.plot,
1521837485931:width  = width,
1521837485932:height = height,
1521837485934:type = "cairo-png",
1521837485935:dpi = 300)
1521837485936:} else {
1521837485938:ggsave(filename = out.filename, plot = dist.plot,
1521837485939:width  = width,
1521837485940:height = height,
1521837485942:dpi = 400)
1521837485943:}
1521837485946:# ========================================================================
1521837485948:# Code core - End
1521837485949:# ========================================================================
1521837485951:}
1521837500331:#!/usr/bin/env Rscript
1521837500333:################################################################################
1521837500333:# Author:   Hector Fabio Espitia Navarro
1521837500333:#           Georgia Institute of Technology
1521837500334:#
1521837500334:# Version:  1.0
1521837500334:# Date:     02/18/2017
1521837500335:################################################################################
1521837500335:# Install required packages
1521837500336:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1521837500337:if(!file.exists(personal.lib.path))
1521837500337:dir.create(personal.lib.path)
1521837500339:installAndLoadPackages <- function(pkg){
1521837500340:cat("Please wait a moment! Checking for required packages... ")
1521837500340:cat("Done!\n")
1521837500341:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1521837500342:if (length(new.pkg)) {
1521837500343:cat("Installing new packages... ")
1521837500343:install.packages(new.pkg, dependencies = TRUE,
1521837500343:repos="http://cran.rstudio.com/",
1521837500344:lib = personal.lib.path)
1521837500344:cat("Done!\n")
1521837500345:}
1521837500345:cat("Loading required packages... ")
1521837500345:sapply(pkg, function(x){
1521837500346:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1521837500346:})
1521837500346:cat("Done!\n")
1521837500347:}
1521837500348:# github.packages <- c("tibble")
1521837500349:github.related.packages <- c("devtools", "Rcpp")
1521837500350:packages <- c("argparser", "tidyverse", "RColorBrewer")#, "ggplot2",  "tidyr")
1521837500351:installAndLoadPackages(packages)
1521837500356:# if(any(!(github.related.packages %in% installed.packages()))) {
1521837500356:#   cat("Please wait a moment! Installing required packages... ")
1521837500357:#   install.packages(github.related.packages[!(github.related.packages %in% installed.packages())],
1521837500357:#                    quiet = T, repos="http://cran.rstudio.com/",
1521837500357:#                    lib = personal.lib.path, dependencies = TRUE)
1521837500358:#   if(any(!(github.packages %in% installed.packages()))){
1521837500358:#     devtools::install_github("tidyverse/tibble",
1521837500358:#                              lib = personal.lib.path,
1521837500359:#                              quiet = T)
1521837500359:#   }
1521837500359:# }
1521837500360:#
1521837500360:# if(any(!(packages %in% installed.packages()))){
1521837500360:#   cat("Please wait a moment! Installing required packages... ")
1521837500361:#   install.packages(packages[!(packages %in% installed.packages())],
1521837500361:#                    quiet = T, repos="http://cran.rstudio.com/",
1521837500361:#                    lib = personal.lib.path, dependencies = TRUE)
1521837500362:#   cat("Done!\n\n\n")
1521837500362:#   cat("Executing the script:\n\n")
1521837500362:# }
1521837500363:#
1521837500363:# # Load packages
1521837500363:# suppressPackageStartupMessages(library(argparser, quietly = TRUE))
1521837500364:# suppressPackageStartupMessages(library(tidyverse, quietly = TRUE))
1521837500364:# # suppressPackageStartupMessages(library(ggplot2, quietly = TRUE))
1521837500365:# # suppressPackageStartupMessages(library(tidyr, quietly = TRUE))
1521837500365:# suppressPackageStartupMessages(library(RColorBrewer, quietly = TRUE))
1521837500365:################################################################################
1521837500366:# Get script name
1521837500366:initial.options <- commandArgs(trailingOnly = FALSE)
1521837500367:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1521837500368:# Process command line arguments
1521837500368:# Create a parser
1521837500369:p <- arg_parser("This script generates K-mer depth plots using as input data the file generated by STing typer tool (-t option).",
1521837500370:name = script.name)
1521837500372:# Add Positional arguments (required)
1521837500372:p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
1521837500373:# Add options
1521837500374:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1521837500374:default = "kmer_depth")
1521837500375:p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'",
1521837500375:default = "pdf")
1521837500377:# Initialization of variables
1521837500377:# Values to test the script using RStudio
1521837500377:script.home = "/home/hspitia/projects/sting"
1521837500378:input.file <- paste(script.home, "ext_depth.tsv", sep = "/")
1521837500378:out.format <- "pdf"
1521837500379:out.prefix <- "~/kmer_ext_depth"
1521837500380:# Parse command line arguments
1521837500380:command.line = FALSE   # Turn to FALSE to test the script inside RStudio
1521837500380:if(command.line) {
1521837500381:argv <- parse_args(p)
1521837500381:} else {
1521837500381:argv <- parse_args(p, list(input.file, "--prefix", out.prefix,
1521837500382:"--format", out.format))
1521837500382:}
1521837500384:# command.line = TRUE   # Turn to FALSE to test the script inside RStudio
1521837500384:# if(command.line) {
1521837500385:#   # Get argument values from command line
1521837500385:#   input.file <- argv$input_file
1521837500385:#   out.format <- argv$format
1521837500386:#   out.prefix <- argv$prefix
1521837500386:# } else {
1521837500386:#   # Values to test the script using RStudio
1521837500387:#   script.home = "/home/hspitia/projects/sting"
1521837500387:#   input.file <- paste(script.home, "ext_depth.tsv", sep = "/")
1521837500387:#   out.format <- "pdf"
1521837500388:#   out.prefix <- "~/kmer_ext_depth"
1521837500388:# }
1521837500389:# ################################################################################
1521837500389:CheckFileExists <- function(file.list) {
1521837500389:non.exist.files <- !file.exists(file.list)
1521837500390:if(any(non.exist.files)) {
1521837500390:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1521837500390:}
1521837500391:}
1521837500391:# ################################################################################
1521837500391:# Check for input files
1521837500392:files.to.check <- c(input.file)
1521837500392:error.message  <- CheckFileExists(files.to.check)
1521837500393:if(!is.null(error.message)){
1521837500393:stop(error.message)
1521837500394:} else {
1521837500394:# ========================================================================
1521837500394:# Code core - Begin
1521837500395:# ========================================================================
1521837500395:cat("Plotting depths... ")
1521837500395:options(stringsAsFactors = T)
1521837500396:# Load data
1521837500396:inData <- read.delim(input.file)
1521837500396:# print(head(inData))
1521837500397:# colnames(inData) <- c("Allele", "Position", "k-mer Depth", "Weighted k-mer Depth")
1521837500397:colnames(inData) <- c("N", "Locus", "Allele", "Position", "kmerDepth",
1521837500398:"Norm. count", "Coverage", "MeanKmerDepth")
1521837500398:# inData$BestAllele <- paste0(inData$N, " - ", inData$Allele)
1521837500399:head(inData)
1521837500399:# Order data by Locus and N
1521837500400:inData <- arrange(inData, Locus, N)
1521837500400:inData <- inData %>%
1521837500400:mutate(Allele = factor(Allele, levels = unique(inData$Allele)))
1521837500401:# ==============================================================
1521837500402:plotDepth <- function(data.to.plot, labelsData) {
1521837500402:colourCount = length(unique(data.to.plot$Allele))
1521837500403:getPalette = colorRampPalette(brewer.pal(7, "Set1"))
1521837500404:max.x <- max(data.to.plot$Position)
1521837500404:max.y <- max(data.to.plot$kmerDepth)
1521837500405:x.limits <- seq(0, max.x, 100)
1521837500405:y.limits <- seq(0, max.y, 20)
1521837500406:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521837500406:y = kmerDepth),
1521837500407:size = 0.2)
1521837500407:d.plot <- d.plot + geom_area(alpha = 0.6,
1521837500408:aes(color = Allele,
1521837500408:# alpha = N,
1521837500409:fill = Allele
1521837500409:))
1521837500410:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521837500410:# d.plot <- d.plot + scale_color_hue(l = 40)
1521837500410:d.plot <- d.plot + geom_text(data = labelsData,
1521837500411:size = 3,
1521837500412:aes(x = name.x,
1521837500412:y = name.y,
1521837500413:label = Allele),
1521837500414:color = "#333333")
1521837500415:d.plot <- d.plot + geom_text(data = labelsData,
1521837500415:size = 3,
1521837500416:hjust = "left",
1521837500416:aes(x = info.x,
1521837500417:y = info.y,
1521837500418:label = info),
1521837500418:color = "#222222")
1521837500419:# d.plot <- d.plot + geom_text(data = labelsData,
1521837500419:#                              size = 3,
1521837500420:#                              hjust = "left",
1521837500420:#                              aes(x = meanDepth.x,
1521837500421:#                                  y = meanDepth.y,
1521837500421:#                                  label = meanDepth),
1521837500422:#                              color = "#333333")
1521837500422:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521837500423:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521837500424:expand = c(0, 2.0))
1521837500425:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521837500425:#                                     expand = c(0, 2))
1521837500427:# if (colourCount > 9) {
1521837500427:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521837500428:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521837500428:# } else {
1521837500429:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521837500430:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521837500430:# }
1521837500431:d.plot <- d.plot + theme_bw()
1521837500431:# d.plot <- d.plot + theme_linedraw()
1521837500432:d.plot <- d.plot + labs(title = "K-mer Depth",
1521837500433:subtitle = basename(input.file),
1521837500434:x     = "Position along sequence (bp)",
1521837500435:y     = "k-mer Depth")
1521837500435:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521837500436:# color = FALSE)
1521837500437:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521837500437:plot.subtitle = element_text(hjust = 0.5),
1521837500438:axis.text.x = element_text(angle = 50,
1521837500439:vjust = 1,
1521837500439:hjust = 1,
1521837500440:size = 7),
1521837500440:legend.position = "none")
1521837500441:d.plot
1521837500442:}
1521837500443:plotDepthDist <- function(data.to.plot, labelsData) {
1521837500444:dist.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521837500444:# dist.plot <- dist.plot + geom_jitter(position = position_jitter(width=.2),
1521837500445:# alpha = 0.4)
1521837500446:dist.plot <- dist.plot + geom_boxplot(alpha = 0.6, size = 0.4, aes(fill = Allele))
1521837500446:dist.plot <- dist.plot + geom_text(data = labelsData,
1521837500447:size = 4,
1521837500448:hjust = "left",
1521837500448:aes(x = (N - 0.5),
1521837500449:y = info.y * 1.05,
1521837500450:label = Allele),
1521837500451:color = "#333333")
1521837500452:dist.plot <- dist.plot + geom_text(data = labelsData,
1521837500453:size = 3,
1521837500453:hjust = "left",
1521837500454:aes(x = (N - 0.4),
1521837500455:y = info.y * 0.08,
1521837500456:label = paste0("sd=",format(round(sd, 1), nsmall = 1))),
1521837500456:color = "#333333")
1521837500458:dist.plot <- dist.plot + geom_point(data = labelsData,
1521837500459:shape = 23, fill = "white",
1521837500459:aes(x = N, y = meanDepth))
1521837500460:dist.plot <- dist.plot + facet_grid(Locus ~ ., scales = "free_y")
1521837500461:dist.plot <- dist.plot + labs(title = "K-mer Depth Distribution",
1521837500462:subtitle = basename(input.file),
1521837500463:x     = "Allele Ranking",
1521837500464:y     = "k-mer Depth")
1521837500464:dist.plot <- dist.plot + theme_bw()
1521837500465:dist.plot <- dist.plot + theme(legend.position = "none",
1521837500466:plot.title = element_text(hjust = 0.5),
1521837500467:plot.subtitle = element_text(hjust = 0.5))
1521837500468:dist.plot
1521837500469:}
1521837500470:getLabelsData <- function(data.to.plot) {
1521837500471:max.x <- max(data.to.plot$Position)
1521837500472:max.y <- max(data.to.plot$kmerDepth)
1521837500474:nLoci    <- length(unique(data.to.plot$Locus))
1521837500474:nAlleles <- length(unique(data.to.plot$N))
1521837500476:alleles     <- unique(data.to.plot$Allele)
1521837500477:loci        <- as.character(unique(data.to.plot$Locus))
1521837500478:lociLabels  <- c()
1521837500479:name.x      <- c()
1521837500480:name.y      <- c()
1521837500481:info.x      <- c()
1521837500482:info.y      <- c()
1521837500483:covs        <- c()
1521837500483:meanDepths  <- c()
1521837500484:meanDepth.x <- c()
1521837500485:meanDepth.y <- c()
1521837500486:for (i in loci) {
1521837500487:lociLabels <- c(lociLabels, rep(i, 3))
1521837500488:}
1521837500489:for (allele in alleles) {
1521837500490:locus       <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1521837500491:# maxPos      <- max(data.to.plot[data.to.plot$Allele == allele, "Position"])
1521837500492:maxPos      <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1521837500493:# maxDepth    <- max(data.to.plot[data.to.plot$Allele == allele, "kmerDepth"])
1521837500494:maxDepth    <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1521837500495:name.x      <- c(name.x, (maxPos / 2))
1521837500496:name.y      <- c(name.y, (maxDepth * 0.2))
1521837500497:info.x      <- c(info.x, max.x * 0.02)
1521837500498:info.y      <- c(info.y, maxDepth * 0.9)
1521837500499:covs        <- c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"]))
1521837500500:meanDepths  <- c(meanDepths, unique(data.to.plot[data.to.plot$Allele == allele, "MeanKmerDepth"]))
1521837500501:# meanDepth.x <- c(meanDepth.x, max.x * 0.30)
1521837500503:# meanDepth.y <- c(meanDepth.y, maxDepth * 0.9)
1521837500504:}
1521837500505:# (labelsData <- data.frame(Allele = alleles, name.x = x, name.y = y))
1521837500506:# data.to.plot <- left_join(data.to.plot, labelsData)
1521837500508:labelsData <- data.frame(Allele = alleles,
1521837500509:name.x = name.x,
1521837500510:name.y = name.y,
1521837500511:info = paste0("cov=", format(round(covs, 1), nsmall = 1), "%  ", paste0("md=", format(round(meanDepths, 1), nsmall = 1))),
1521837500512:info.x = info.x, info.y = info.y,
1521837500513:meanDepth = meanDepths,
1521837500514:# meanDepth.x = meanDepth.x, meanDepth.y = meanDepth.y,
1521837500515:N = rep(unique(data.to.plot$N), nLoci),
1521837500516:Locus = lociLabels) %>%
1521837500518:left_join(inData %>%
1521837500519:group_by(Allele) %>%
1521837500520:summarise(sd = sd(kmerDepth)))
1521837500521:labelsData
1521837500522:}
1521837500524:# ==============================================================
1521837500525:data.to.plot <- inData
1521837500526:labelsData   <- getLabelsData(data.to.plot)
1521837500528:nLoci    <- length(unique(data.to.plot$Locus))
1521837500529:nAlleles <- length(unique(data.to.plot$N))
1521837500531:hFactor  <- 1.1
1521837500532:wFactor  <- 4
1521837500533:if (nLoci == 1)
1521837500534:hFactor <- 1.8
1521837500536:height       <- nLoci * hFactor
1521837500537:width        <- nAlleles * wFactor
1521837500539:depth.plot   <- plotDepth(data.to.plot, labelsData)
1521837500540:depth.plot
1521837500542:out.filename <- paste0(out.prefix, ".", out.format)
1521837500543:if (out.format == "png") {
1521837500544:ggsave(filename = out.filename, plot = depth.plot,
1521837500545:width  = width,
1521837500547:height = height,
1521837500548:type = "cairo-png",
1521837500549:dpi = 300)
1521837500550:} else {
1521837500551:ggsave(filename = out.filename, plot = depth.plot,
1521837500552:width  = width,
1521837500554:height = height,
1521837500555:dpi = 400)
1521837500557:}
1521837500558:cat("Done! \n")
1521837500561:hFactor  <- 4
1521837500562:wFactor  <- 2
1521837500563:if (nLoci == 1)
1521837500565:hFactor <- 4.5
1521837500566:height       <- nLoci * hFactor
1521837500567:width        <- nAlleles * wFactor
1521837500569:dist.plot <- plotDepthDist(data.to.plot, labelsData)
1521837500570:dist.plot
1521837500572:out.filename <- paste0(out.prefix, "_dist.", out.format)
1521837500574:if (out.format == "png") {
1521837500575:ggsave(filename = out.filename, plot = dist.plot,
1521837500576:width  = width,
1521837500577:height = height,
1521837500578:type = "cairo-png",
1521837500580:dpi = 300)
1521837500581:} else {
1521837500582:ggsave(filename = out.filename, plot = dist.plot,
1521837500584:width  = width,
1521837500585:height = height,
1521837500587:dpi = 400)
1521837500588:}
1521837500590:# ========================================================================
1521837500591:# Code core - End
1521837500592:# ========================================================================
1521837500594:}
1521837987117:#!/usr/bin/env Rscript
1521837987118:################################################################################
1521837987119:# Author:   Hector Fabio Espitia Navarro
1521837987120:#           Georgia Institute of Technology
1521837987121:#
1521837987121:# Version:  1.0
1521837987122:# Date:     02/18/2017
1521837987123:################################################################################
1521837987124:# Install required packages
1521837987125:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1521837987126:if(!file.exists(personal.lib.path))
1521837987127:dir.create(personal.lib.path)
1521837987128:installAndLoadPackages <- function(pkg){
1521837987129:cat("Please wait a moment! Checking for required packages... ")
1521837987129:cat("Done!\n")
1521837987130:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1521837987130:if (length(new.pkg)) {
1521837987131:cat("Installing new packages... ")
1521837987131:install.packages(new.pkg, dependencies = TRUE,
1521837987132:repos="http://cran.rstudio.com/",
1521837987132:lib = personal.lib.path)
1521837987133:cat("Done!\n")
1521837987134:}
1521837987134:cat("Loading required packages... ")
1521837987135:sapply(pkg, function(x){
1521837987135:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1521837987136:})
1521837987136:cat("Done!\n")
1521837987137:}
1521837987138:# github.packages <- c("tibble")
1521837987139:github.related.packages <- c("devtools", "Rcpp")
1521837987139:packages <- c("argparser", "tidyverse", "RColorBrewer")#, "ggplot2",  "tidyr")
1521837987140:installAndLoadPackages(packages)
1521837987146:# if(any(!(github.related.packages %in% installed.packages()))) {
1521837987147:#   cat("Please wait a moment! Installing required packages... ")
1521837987147:#   install.packages(github.related.packages[!(github.related.packages %in% installed.packages())],
1521837987147:#                    quiet = T, repos="http://cran.rstudio.com/",
1521837987148:#                    lib = personal.lib.path, dependencies = TRUE)
1521837987148:#   if(any(!(github.packages %in% installed.packages()))){
1521837987149:#     devtools::install_github("tidyverse/tibble",
1521837987149:#                              lib = personal.lib.path,
1521837987149:#                              quiet = T)
1521837987150:#   }
1521837987150:# }
1521837987151:#
1521837987151:# if(any(!(packages %in% installed.packages()))){
1521837987151:#   cat("Please wait a moment! Installing required packages... ")
1521837987152:#   install.packages(packages[!(packages %in% installed.packages())],
1521837987152:#                    quiet = T, repos="http://cran.rstudio.com/",
1521837987153:#                    lib = personal.lib.path, dependencies = TRUE)
1521837987153:#   cat("Done!\n\n\n")
1521837987153:#   cat("Executing the script:\n\n")
1521837987154:# }
1521837987154:#
1521837987154:# # Load packages
1521837987155:# suppressPackageStartupMessages(library(argparser, quietly = TRUE))
1521837987155:# suppressPackageStartupMessages(library(tidyverse, quietly = TRUE))
1521837987156:# # suppressPackageStartupMessages(library(ggplot2, quietly = TRUE))
1521837987156:# # suppressPackageStartupMessages(library(tidyr, quietly = TRUE))
1521837987156:# suppressPackageStartupMessages(library(RColorBrewer, quietly = TRUE))
1521837987157:################################################################################
1521837987157:# Get script name
1521837987158:initial.options <- commandArgs(trailingOnly = FALSE)
1521837987159:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1521837987160:# Process command line arguments
1521837987160:# Create a parser
1521837987160:p <- arg_parser("This script generates K-mer depth plots using as input data the file generated by STing typer tool (-t option).",
1521837987161:name = script.name)
1521837987162:# Add Positional arguments (required)
1521837987163:p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
1521837987164:# Add options
1521837987164:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1521837987165:default = "kmer_depth")
1521837987166:p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'",
1521837987166:default = "pdf")
1521837987168:# Initialization of variables
1521837987168:# Values to test the script using RStudio
1521837987168:script.home <- "/home/hspitia/projects/sting"
1521837987169:inputFile  <- paste(script.home, "ext_depth.tsv", sep = "/")
1521837987169:# out.format  <- "pdf"
1521837987170:# out.prefix  <- "~/kmer_ext_depth"
1521837987170:# Parse command line arguments
1521837987171:command.line = FALSE   # Turn to FALSE to test the script inside RStudio
1521837987171:argv <- c()
1521837987172:if(command.line) {
1521837987172:argv <- parse_args(p)
1521837987173:} else {
1521837987173:argv <- parse_args(p, list(inputFile,
1521837987173:"--prefix", "pdf",
1521837987174:"--format", "~/kmer_ext_depth"))
1521837987174:}
1521837987176:# Get argument values from command line
1521837987177:input.file <- argv$input_file
1521837987178:out.format <- argv$format
1521837987178:out.prefix <- argv$prefix
1521837987179:# command.line = TRUE   # Turn to FALSE to test the script inside RStudio
1521837987180:# if(command.line) {
1521837987180:# Get argument values from command line
1521837987180:input.file <- argv$input_file
1521837987181:out.format <- argv$format
1521837987181:out.prefix <- argv$prefix
1521837987182:# } else {
1521837987182:#   # Values to test the script using RStudio
1521837987182:#   script.home = "/home/hspitia/projects/sting"
1521837987183:#   input.file <- paste(script.home, "ext_depth.tsv", sep = "/")
1521837987183:#   out.format <- "pdf"
1521837987183:#   out.prefix <- "~/kmer_ext_depth"
1521837987184:# }
1521837987184:# ################################################################################
1521837987185:CheckFileExists <- function(file.list) {
1521837987185:non.exist.files <- !file.exists(file.list)
1521837987185:if(any(non.exist.files)) {
1521837987186:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1521837987186:}
1521837987187:}
1521837987187:# ################################################################################
1521837987188:# Check for input files
1521837987188:files.to.check <- c(input.file)
1521837987189:error.message  <- CheckFileExists(files.to.check)
1521837987189:if(!is.null(error.message)){
1521837987190:stop(error.message)
1521837987190:} else {
1521837987190:# ========================================================================
1521837987191:# Code core - Begin
1521837987191:# ========================================================================
1521837987192:cat("Plotting depths... ")
1521837987192:options(stringsAsFactors = T)
1521837987193:# Load data
1521837987193:inData <- read.delim(input.file)
1521837987193:# print(head(inData))
1521837987194:# colnames(inData) <- c("Allele", "Position", "k-mer Depth", "Weighted k-mer Depth")
1521837987194:colnames(inData) <- c("N", "Locus", "Allele", "Position", "kmerDepth",
1521837987195:"Norm. count", "Coverage", "MeanKmerDepth")
1521837987195:# inData$BestAllele <- paste0(inData$N, " - ", inData$Allele)
1521837987196:head(inData)
1521837987196:# Order data by Locus and N
1521837987197:inData <- arrange(inData, Locus, N)
1521837987197:inData <- inData %>%
1521837987198:mutate(Allele = factor(Allele, levels = unique(inData$Allele)))
1521837987198:# ==============================================================
1521837987199:plotDepth <- function(data.to.plot, labelsData) {
1521837987199:colourCount = length(unique(data.to.plot$Allele))
1521837987199:getPalette = colorRampPalette(brewer.pal(7, "Set1"))
1521837987200:max.x <- max(data.to.plot$Position)
1521837987201:max.y <- max(data.to.plot$kmerDepth)
1521837987201:x.limits <- seq(0, max.x, 100)
1521837987201:y.limits <- seq(0, max.y, 20)
1521837987202:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521837987203:y = kmerDepth),
1521837987203:size = 0.2)
1521837987204:d.plot <- d.plot + geom_area(alpha = 0.6,
1521837987204:aes(color = Allele,
1521837987205:# alpha = N,
1521837987206:fill = Allele
1521837987206:))
1521837987207:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521837987208:# d.plot <- d.plot + scale_color_hue(l = 40)
1521837987208:d.plot <- d.plot + geom_text(data = labelsData,
1521837987209:size = 3,
1521837987209:aes(x = name.x,
1521837987210:y = name.y,
1521837987210:label = Allele),
1521837987211:color = "#333333")
1521837987211:d.plot <- d.plot + geom_text(data = labelsData,
1521837987212:size = 3,
1521837987213:hjust = "left",
1521837987213:aes(x = info.x,
1521837987214:y = info.y,
1521837987214:label = info),
1521837987215:color = "#222222")
1521837987215:# d.plot <- d.plot + geom_text(data = labelsData,
1521837987217:#                              size = 3,
1521837987218:#                              hjust = "left",
1521837987219:#                              aes(x = meanDepth.x,
1521837987220:#                                  y = meanDepth.y,
1521837987221:#                                  label = meanDepth),
1521837987222:#                              color = "#333333")
1521837987223:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521837987224:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521837987225:expand = c(0, 2.0))
1521837987226:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521837987227:#                                     expand = c(0, 2))
1521837987229:# if (colourCount > 9) {
1521837987229:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521837987230:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521837987231:# } else {
1521837987231:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521837987232:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521837987232:# }
1521837987233:d.plot <- d.plot + theme_bw()
1521837987234:# d.plot <- d.plot + theme_linedraw()
1521837987234:d.plot <- d.plot + labs(title = "K-mer Depth",
1521837987235:subtitle = basename(input.file),
1521837987235:x     = "Position along sequence (bp)",
1521837987236:y     = "k-mer Depth")
1521837987237:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521837987237:# color = FALSE)
1521837987238:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521837987238:plot.subtitle = element_text(hjust = 0.5),
1521837987239:axis.text.x = element_text(angle = 50,
1521837987240:vjust = 1,
1521837987240:hjust = 1,
1521837987241:size = 7),
1521837987242:legend.position = "none")
1521837987242:d.plot
1521837987243:}
1521837987244:plotDepthDist <- function(data.to.plot, labelsData) {
1521837987245:dist.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521837987246:# dist.plot <- dist.plot + geom_jitter(position = position_jitter(width=.2),
1521837987246:# alpha = 0.4)
1521837987247:dist.plot <- dist.plot + geom_boxplot(alpha = 0.6, size = 0.4, aes(fill = Allele))
1521837987248:dist.plot <- dist.plot + geom_text(data = labelsData,
1521837987248:size = 4,
1521837987249:hjust = "left",
1521837987250:aes(x = (N - 0.5),
1521837987251:y = info.y * 1.05,
1521837987251:label = Allele),
1521837987252:color = "#333333")
1521837987254:dist.plot <- dist.plot + geom_text(data = labelsData,
1521837987254:size = 3,
1521837987255:hjust = "left",
1521837987256:aes(x = (N - 0.4),
1521837987257:y = info.y * 0.08,
1521837987257:label = paste0("sd=",format(round(sd, 1), nsmall = 1))),
1521837987258:color = "#333333")
1521837987260:dist.plot <- dist.plot + geom_point(data = labelsData,
1521837987261:shape = 23, fill = "white",
1521837987261:aes(x = N, y = meanDepth))
1521837987262:dist.plot <- dist.plot + facet_grid(Locus ~ ., scales = "free_y")
1521837987263:dist.plot <- dist.plot + labs(title = "K-mer Depth Distribution",
1521837987264:subtitle = basename(input.file),
1521837987265:x     = "Allele Ranking",
1521837987265:y     = "k-mer Depth")
1521837987266:dist.plot <- dist.plot + theme_bw()
1521837987267:dist.plot <- dist.plot + theme(legend.position = "none",
1521837987268:plot.title = element_text(hjust = 0.5),
1521837987269:plot.subtitle = element_text(hjust = 0.5))
1521837987270:dist.plot
1521837987270:}
1521837987272:getLabelsData <- function(data.to.plot) {
1521837987273:max.x <- max(data.to.plot$Position)
1521837987274:max.y <- max(data.to.plot$kmerDepth)
1521837987275:nLoci    <- length(unique(data.to.plot$Locus))
1521837987276:nAlleles <- length(unique(data.to.plot$N))
1521837987278:alleles     <- unique(data.to.plot$Allele)
1521837987279:loci        <- as.character(unique(data.to.plot$Locus))
1521837987280:lociLabels  <- c()
1521837987281:name.x      <- c()
1521837987282:name.y      <- c()
1521837987283:info.x      <- c()
1521837987283:info.y      <- c()
1521837987284:covs        <- c()
1521837987285:meanDepths  <- c()
1521837987286:meanDepth.x <- c()
1521837987287:meanDepth.y <- c()
1521837987288:for (i in loci) {
1521837987289:lociLabels <- c(lociLabels, rep(i, 3))
1521837987290:}
1521837987291:for (allele in alleles) {
1521837987292:locus       <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1521837987293:# maxPos      <- max(data.to.plot[data.to.plot$Allele == allele, "Position"])
1521837987294:maxPos      <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1521837987295:# maxDepth    <- max(data.to.plot[data.to.plot$Allele == allele, "kmerDepth"])
1521837987296:maxDepth    <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1521837987297:name.x      <- c(name.x, (maxPos / 2))
1521837987298:name.y      <- c(name.y, (maxDepth * 0.2))
1521837987299:info.x      <- c(info.x, max.x * 0.02)
1521837987300:info.y      <- c(info.y, maxDepth * 0.9)
1521837987301:covs        <- c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"]))
1521837987303:meanDepths  <- c(meanDepths, unique(data.to.plot[data.to.plot$Allele == allele, "MeanKmerDepth"]))
1521837987304:# meanDepth.x <- c(meanDepth.x, max.x * 0.30)
1521837987305:# meanDepth.y <- c(meanDepth.y, maxDepth * 0.9)
1521837987306:}
1521837987307:# (labelsData <- data.frame(Allele = alleles, name.x = x, name.y = y))
1521837987308:# data.to.plot <- left_join(data.to.plot, labelsData)
1521837987309:labelsData <- data.frame(Allele = alleles,
1521837987310:name.x = name.x,
1521837987311:name.y = name.y,
1521837987312:info = paste0("cov=", format(round(covs, 1), nsmall = 1), "%  ", paste0("md=", format(round(meanDepths, 1), nsmall = 1))),
1521837987313:info.x = info.x, info.y = info.y,
1521837987314:meanDepth = meanDepths,
1521837987316:# meanDepth.x = meanDepth.x, meanDepth.y = meanDepth.y,
1521837987317:N = rep(unique(data.to.plot$N), nLoci),
1521837987318:Locus = lociLabels) %>%
1521837987319:left_join(inData %>%
1521837987320:group_by(Allele) %>%
1521837987321:summarise(sd = sd(kmerDepth)),
1521837987322:by = c("Allele" = "Allele"))
1521837987323:labelsData
1521837987325:}
1521837987326:# ==============================================================
1521837987327:data.to.plot <- inData
1521837987328:labelsData   <- getLabelsData(data.to.plot)
1521837987332:nLoci    <- length(unique(data.to.plot$Locus))
1521837987333:nAlleles <- length(unique(data.to.plot$N))
1521837987335:hFactor  <- 1.1
1521837987336:wFactor  <- 4
1521837987337:if (nLoci == 1)
1521837987339:hFactor <- 1.8
1521837987341:height       <- nLoci * hFactor
1521837987342:width        <- nAlleles * wFactor
1521837987345:depth.plot   <- plotDepth(data.to.plot, labelsData)
1521837987346:depth.plot
1521837987348:out.filename <- paste0(out.prefix, ".", out.format)
1521837987349:if (out.format == "png") {
1521837987351:ggsave(filename = out.filename, plot = depth.plot,
1521837987352:width  = width,
1521837987353:height = height,
1521837987354:type = "cairo-png",
1521837987355:dpi = 300)
1521837987356:} else {
1521837987357:ggsave(filename = out.filename, plot = depth.plot,
1521837987359:width  = width,
1521837987360:height = height,
1521837987361:dpi = 400)
1521837987362:}
1521837987363:cat("Done! \n")
1521837987367:hFactor  <- 4
1521837987368:wFactor  <- 2
1521837987369:if (nLoci == 1)
1521837987371:hFactor <- 4.5
1521837987372:height       <- nLoci * hFactor
1521837987374:width        <- nAlleles * wFactor
1521837987376:dist.plot <- plotDepthDist(data.to.plot, labelsData)
1521837987377:dist.plot
1521837987380:out.filename <- paste0(out.prefix, "_dist.", out.format)
1521837987381:if (out.format == "png") {
1521837987383:ggsave(filename = out.filename, plot = dist.plot,
1521837987384:width  = width,
1521837987385:height = height,
1521837987387:type = "cairo-png",
1521837987388:dpi = 300)
1521837987389:} else {
1521837987391:ggsave(filename = out.filename, plot = dist.plot,
1521837987392:width  = width,
1521837987393:height = height,
1521837987395:dpi = 400)
1521837987396:}
1521837987399:# ========================================================================
1521837987400:# Code core - End
1521837987402:# ========================================================================
1521837987403:}
1521838000553:#!/usr/bin/env Rscript
1521838000554:################################################################################
1521838000554:# Author:   Hector Fabio Espitia Navarro
1521838000554:#           Georgia Institute of Technology
1521838000555:#
1521838000555:# Version:  1.0
1521838000555:# Date:     02/18/2017
1521838000556:################################################################################
1521838000556:# Install required packages
1521838000556:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1521838000557:if(!file.exists(personal.lib.path))
1521838000557:dir.create(personal.lib.path)
1521838000558:installAndLoadPackages <- function(pkg){
1521838000558:cat("Please wait a moment! Checking for required packages... ")
1521838000558:cat("Done!\n")
1521838000559:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1521838000559:if (length(new.pkg)) {
1521838000560:cat("Installing new packages... ")
1521838000560:install.packages(new.pkg, dependencies = TRUE,
1521838000561:repos="http://cran.rstudio.com/",
1521838000561:lib = personal.lib.path)
1521838000562:cat("Done!\n")
1521838000562:}
1521838000563:cat("Loading required packages... ")
1521838000563:sapply(pkg, function(x){
1521838000564:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1521838000565:})
1521838000565:cat("Done!\n")
1521838000566:}
1521838000566:# github.packages <- c("tibble")
1521838000567:github.related.packages <- c("devtools", "Rcpp")
1521838000567:packages <- c("argparser", "tidyverse", "RColorBrewer")#, "ggplot2",  "tidyr")
1521838000568:installAndLoadPackages(packages)
1521838000573:# if(any(!(github.related.packages %in% installed.packages()))) {
1521838000573:#   cat("Please wait a moment! Installing required packages... ")
1521838000573:#   install.packages(github.related.packages[!(github.related.packages %in% installed.packages())],
1521838000574:#                    quiet = T, repos="http://cran.rstudio.com/",
1521838000574:#                    lib = personal.lib.path, dependencies = TRUE)
1521838000574:#   if(any(!(github.packages %in% installed.packages()))){
1521838000575:#     devtools::install_github("tidyverse/tibble",
1521838000575:#                              lib = personal.lib.path,
1521838000575:#                              quiet = T)
1521838000576:#   }
1521838000576:# }
1521838000576:#
1521838000577:# if(any(!(packages %in% installed.packages()))){
1521838000577:#   cat("Please wait a moment! Installing required packages... ")
1521838000577:#   install.packages(packages[!(packages %in% installed.packages())],
1521838000578:#                    quiet = T, repos="http://cran.rstudio.com/",
1521838000578:#                    lib = personal.lib.path, dependencies = TRUE)
1521838000578:#   cat("Done!\n\n\n")
1521838000579:#   cat("Executing the script:\n\n")
1521838000579:# }
1521838000579:#
1521838000580:# # Load packages
1521838000580:# suppressPackageStartupMessages(library(argparser, quietly = TRUE))
1521838000580:# suppressPackageStartupMessages(library(tidyverse, quietly = TRUE))
1521838000581:# # suppressPackageStartupMessages(library(ggplot2, quietly = TRUE))
1521838000581:# # suppressPackageStartupMessages(library(tidyr, quietly = TRUE))
1521838000581:# suppressPackageStartupMessages(library(RColorBrewer, quietly = TRUE))
1521838000582:################################################################################
1521838000582:# Get script name
1521838000583:initial.options <- commandArgs(trailingOnly = FALSE)
1521838000583:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1521838000584:# Process command line arguments
1521838000584:# Create a parser
1521838000585:p <- arg_parser("This script generates K-mer depth plots using as input data the file generated by STing typer tool (-t option).",
1521838000585:name = script.name)
1521838000587:# Add Positional arguments (required)
1521838000587:p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
1521838000588:# Add options
1521838000589:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1521838000589:default = "kmer_depth")
1521838000590:p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'",
1521838000591:default = "pdf")
1521838000592:# Initialization of variables
1521838000593:# Values to test the script using RStudio
1521838000593:script.home <- "/home/hspitia/projects/sting"
1521838000593:inputFile  <- paste(script.home, "ext_depth.tsv", sep = "/")
1521838000594:# out.format  <- "pdf"
1521838000594:# out.prefix  <- "~/kmer_ext_depth"
1521838000595:# Parse command line arguments
1521838000595:command.line = FALSE   # Turn to FALSE to test the script inside RStudio
1521838000596:argv <- c()
1521838000596:if(command.line) {
1521838000597:argv <- parse_args(p)
1521838000597:} else {
1521838000597:argv <- parse_args(p, list(inputFile,
1521838000598:"--prefix", "pdf",
1521838000598:"--format", "~/kmer_ext_depth"))
1521838000598:}
1521838000600:# Get argument values from command line
1521838000600:input.file <- argv$input_file
1521838000601:out.format <- argv$format
1521838000601:out.prefix <- argv$prefix
1521838000602:# command.line = TRUE   # Turn to FALSE to test the script inside RStudio
1521838000603:# if(command.line) {
1521838000603:# Get argument values from command line
1521838000603:input.file <- argv$input_file
1521838000604:out.format <- argv$format
1521838000604:out.prefix <- argv$prefix
1521838000605:# } else {
1521838000605:#   # Values to test the script using RStudio
1521838000606:#   script.home = "/home/hspitia/projects/sting"
1521838000606:#   input.file <- paste(script.home, "ext_depth.tsv", sep = "/")
1521838000606:#   out.format <- "pdf"
1521838000607:#   out.prefix <- "~/kmer_ext_depth"
1521838000607:# }
1521838000607:# ################################################################################
1521838000608:CheckFileExists <- function(file.list) {
1521838000608:non.exist.files <- !file.exists(file.list)
1521838000609:if(any(non.exist.files)) {
1521838000609:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1521838000609:}
1521838000610:}
1521838000610:# ################################################################################
1521838000611:# Check for input files
1521838000611:files.to.check <- c(input.file)
1521838000611:error.message  <- CheckFileExists(files.to.check)
1521838000612:if(!is.null(error.message)){
1521838000613:stop(error.message)
1521838000613:} else {
1521838000613:# ========================================================================
1521838000614:# Code core - Begin
1521838000614:# ========================================================================
1521838000614:cat("Plotting depths... ")
1521838000615:options(stringsAsFactors = T)
1521838000615:# Load data
1521838000615:inData <- read.delim(input.file)
1521838000616:# print(head(inData))
1521838000616:# colnames(inData) <- c("Allele", "Position", "k-mer Depth", "Weighted k-mer Depth")
1521838000617:colnames(inData) <- c("N", "Locus", "Allele", "Position", "kmerDepth",
1521838000617:"Norm. count", "Coverage", "MeanKmerDepth")
1521838000618:# inData$BestAllele <- paste0(inData$N, " - ", inData$Allele)
1521838000618:head(inData)
1521838000619:# Order data by Locus and N
1521838000619:inData <- arrange(inData, Locus, N)
1521838000619:inData <- inData %>%
1521838000620:mutate(Allele = factor(Allele, levels = unique(inData$Allele)))
1521838000621:# ==============================================================
1521838000621:plotDepth <- function(data.to.plot, labelsData) {
1521838000621:colourCount = length(unique(data.to.plot$Allele))
1521838000622:getPalette = colorRampPalette(brewer.pal(7, "Set1"))
1521838000622:max.x <- max(data.to.plot$Position)
1521838000623:max.y <- max(data.to.plot$kmerDepth)
1521838000623:x.limits <- seq(0, max.x, 100)
1521838000624:y.limits <- seq(0, max.y, 20)
1521838000625:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521838000625:y = kmerDepth),
1521838000626:size = 0.2)
1521838000627:d.plot <- d.plot + geom_area(alpha = 0.6,
1521838000627:aes(color = Allele,
1521838000628:# alpha = N,
1521838000628:fill = Allele
1521838000629:))
1521838000630:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521838000631:# d.plot <- d.plot + scale_color_hue(l = 40)
1521838000631:d.plot <- d.plot + geom_text(data = labelsData,
1521838000632:size = 3,
1521838000632:aes(x = name.x,
1521838000633:y = name.y,
1521838000633:label = Allele),
1521838000634:color = "#333333")
1521838000634:d.plot <- d.plot + geom_text(data = labelsData,
1521838000635:size = 3,
1521838000635:hjust = "left",
1521838000636:aes(x = info.x,
1521838000636:y = info.y,
1521838000637:label = info),
1521838000637:color = "#222222")
1521838000638:# d.plot <- d.plot + geom_text(data = labelsData,
1521838000638:#                              size = 3,
1521838000639:#                              hjust = "left",
1521838000639:#                              aes(x = meanDepth.x,
1521838000640:#                                  y = meanDepth.y,
1521838000640:#                                  label = meanDepth),
1521838000641:#                              color = "#333333")
1521838000641:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521838000642:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521838000642:expand = c(0, 2.0))
1521838000643:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521838000644:#                                     expand = c(0, 2))
1521838000645:# if (colourCount > 9) {
1521838000645:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521838000646:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521838000647:# } else {
1521838000647:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521838000648:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521838000649:# }
1521838000649:d.plot <- d.plot + theme_bw()
1521838000650:# d.plot <- d.plot + theme_linedraw()
1521838000651:d.plot <- d.plot + labs(title = "K-mer Depth",
1521838000652:subtitle = basename(input.file),
1521838000652:x     = "Position along sequence (bp)",
1521838000653:y     = "k-mer Depth")
1521838000653:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521838000654:# color = FALSE)
1521838000655:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521838000655:plot.subtitle = element_text(hjust = 0.5),
1521838000656:axis.text.x = element_text(angle = 50,
1521838000656:vjust = 1,
1521838000657:hjust = 1,
1521838000659:size = 7),
1521838000660:legend.position = "none")
1521838000661:d.plot
1521838000662:}
1521838000664:plotDepthDist <- function(data.to.plot, labelsData) {
1521838000665:dist.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521838000666:# dist.plot <- dist.plot + geom_jitter(position = position_jitter(width=.2),
1521838000668:# alpha = 0.4)
1521838000669:dist.plot <- dist.plot + geom_boxplot(alpha = 0.6, size = 0.4, aes(fill = Allele))
1521838000670:dist.plot <- dist.plot + geom_text(data = labelsData,
1521838000671:size = 4,
1521838000672:hjust = "left",
1521838000672:aes(x = (N - 0.5),
1521838000673:y = info.y * 1.05,
1521838000674:label = Allele),
1521838000675:color = "#333333")
1521838000676:dist.plot <- dist.plot + geom_text(data = labelsData,
1521838000677:size = 3,
1521838000678:hjust = "left",
1521838000679:aes(x = (N - 0.4),
1521838000680:y = info.y * 0.08,
1521838000680:label = paste0("sd=",format(round(sd, 1), nsmall = 1))),
1521838000681:color = "#333333")
1521838000682:dist.plot <- dist.plot + geom_point(data = labelsData,
1521838000683:shape = 23, fill = "white",
1521838000684:aes(x = N, y = meanDepth))
1521838000685:dist.plot <- dist.plot + facet_grid(Locus ~ ., scales = "free_y")
1521838000686:dist.plot <- dist.plot + labs(title = "K-mer Depth Distribution",
1521838000686:subtitle = basename(input.file),
1521838000687:x     = "Allele Ranking",
1521838000688:y     = "k-mer Depth")
1521838000689:dist.plot <- dist.plot + theme_bw()
1521838000690:dist.plot <- dist.plot + theme(legend.position = "none",
1521838000691:plot.title = element_text(hjust = 0.5),
1521838000692:plot.subtitle = element_text(hjust = 0.5))
1521838000692:dist.plot
1521838000693:}
1521838000695:getLabelsData <- function(data.to.plot) {
1521838000696:max.x <- max(data.to.plot$Position)
1521838000697:max.y <- max(data.to.plot$kmerDepth)
1521838000699:nLoci    <- length(unique(data.to.plot$Locus))
1521838000699:nAlleles <- length(unique(data.to.plot$N))
1521838000701:alleles     <- unique(data.to.plot$Allele)
1521838000702:loci        <- as.character(unique(data.to.plot$Locus))
1521838000703:lociLabels  <- c()
1521838000704:name.x      <- c()
1521838000705:name.y      <- c()
1521838000706:info.x      <- c()
1521838000707:info.y      <- c()
1521838000708:covs        <- c()
1521838000708:meanDepths  <- c()
1521838000709:meanDepth.x <- c()
1521838000710:meanDepth.y <- c()
1521838000711:for (i in loci) {
1521838000712:lociLabels <- c(lociLabels, rep(i, 3))
1521838000713:}
1521838000714:for (allele in alleles) {
1521838000715:locus       <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1521838000716:# maxPos      <- max(data.to.plot[data.to.plot$Allele == allele, "Position"])
1521838000717:maxPos      <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1521838000718:# maxDepth    <- max(data.to.plot[data.to.plot$Allele == allele, "kmerDepth"])
1521838000719:maxDepth    <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1521838000720:name.x      <- c(name.x, (maxPos / 2))
1521838000721:name.y      <- c(name.y, (maxDepth * 0.2))
1521838000723:info.x      <- c(info.x, max.x * 0.02)
1521838000724:info.y      <- c(info.y, maxDepth * 0.9)
1521838000725:covs        <- c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"]))
1521838000727:meanDepths  <- c(meanDepths, unique(data.to.plot[data.to.plot$Allele == allele, "MeanKmerDepth"]))
1521838000728:# meanDepth.x <- c(meanDepth.x, max.x * 0.30)
1521838000729:# meanDepth.y <- c(meanDepth.y, maxDepth * 0.9)
1521838000730:}
1521838000731:# (labelsData <- data.frame(Allele = alleles, name.x = x, name.y = y))
1521838000732:# data.to.plot <- left_join(data.to.plot, labelsData)
1521838000733:labelsData <- data.frame(Allele = alleles,
1521838000734:name.x = name.x,
1521838000736:name.y = name.y,
1521838000737:info = paste0("cov=", format(round(covs, 1), nsmall = 1), "%  ", paste0("md=", format(round(meanDepths, 1), nsmall = 1))),
1521838000738:info.x = info.x, info.y = info.y,
1521838000739:meanDepth = meanDepths,
1521838000740:# meanDepth.x = meanDepth.x, meanDepth.y = meanDepth.y,
1521838000742:N = rep(unique(data.to.plot$N), nLoci),
1521838000743:Locus = lociLabels) %>%
1521838000744:left_join(inData %>%
1521838000745:group_by(Allele) %>%
1521838000747:summarise(sd = sd(kmerDepth)),
1521838000749:by = c("Allele" = "Allele"))
1521838000751:labelsData
1521838000752:}
1521838000754:# ==============================================================
1521838000755:data.to.plot <- inData
1521838000756:labelsData   <- getLabelsData(data.to.plot)
1521838000758:nLoci    <- length(unique(data.to.plot$Locus))
1521838000759:nAlleles <- length(unique(data.to.plot$N))
1521838000762:hFactor  <- 1.1
1521838000763:wFactor  <- 4
1521838000764:if (nLoci == 1)
1521838000765:hFactor <- 1.8
1521838000767:height       <- nLoci * hFactor
1521838000768:width        <- nAlleles * wFactor
1521838000770:depth.plot   <- plotDepth(data.to.plot, labelsData)
1521838000771:depth.plot
1521838000775:out.filename <- paste0(out.prefix, ".", out.format)
1521838000777:if (out.format == "png") {
1521838000778:ggsave(filename = out.filename, plot = depth.plot,
1521838000780:width  = width,
1521838000781:height = height,
1521838000782:type = "cairo-png",
1521838000784:dpi = 300)
1521838000785:} else {
1521838000786:ggsave(filename = out.filename, plot = depth.plot,
1521838000788:width  = width,
1521838000789:height = height,
1521838000790:dpi = 400)
1521838000792:}
1521838000793:cat("Done! \n")
1521838000797:hFactor  <- 4
1521838000798:wFactor  <- 2
1521838000799:if (nLoci == 1)
1521838000800:hFactor <- 4.5
1521838000802:height       <- nLoci * hFactor
1521838000803:width        <- nAlleles * wFactor
1521838000805:dist.plot <- plotDepthDist(data.to.plot, labelsData)
1521838000807:dist.plot
1521838000809:out.filename <- paste0(out.prefix, "_dist.", out.format)
1521838000810:if (out.format == "png") {
1521838000812:ggsave(filename = out.filename, plot = dist.plot,
1521838000813:width  = width,
1521838000815:height = height,
1521838000816:type = "cairo-png",
1521838000817:dpi = 300)
1521838000819:} else {
1521838000820:ggsave(filename = out.filename, plot = dist.plot,
1521838000821:width  = width,
1521838000822:height = height,
1521838000824:dpi = 400)
1521838000825:}
1521838000828:# ========================================================================
1521838000829:# Code core - End
1521838000831:# ========================================================================
1521838000832:}
1521838021576:#!/usr/bin/env Rscript
1521838021578:################################################################################
1521838021578:# Author:   Hector Fabio Espitia Navarro
1521838021580:#           Georgia Institute of Technology
1521838021580:#
1521838021581:# Version:  1.0
1521838021582:# Date:     02/18/2017
1521838021582:################################################################################
1521838021583:# Install required packages
1521838021584:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1521838021585:if(!file.exists(personal.lib.path))
1521838021586:dir.create(personal.lib.path)
1521838021588:installAndLoadPackages <- function(pkg){
1521838021588:cat("Please wait a moment! Checking for required packages... ")
1521838021589:cat("Done!\n")
1521838021589:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1521838021590:if (length(new.pkg)) {
1521838021590:cat("Installing new packages... ")
1521838021591:install.packages(new.pkg, dependencies = TRUE,
1521838021591:repos="http://cran.rstudio.com/",
1521838021592:lib = personal.lib.path)
1521838021593:cat("Done!\n")
1521838021593:}
1521838021594:cat("Loading required packages... ")
1521838021594:sapply(pkg, function(x){
1521838021595:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1521838021596:})
1521838021596:cat("Done!\n")
1521838021597:}
1521838021598:# github.packages <- c("tibble")
1521838021599:github.related.packages <- c("devtools", "Rcpp")
1521838021599:packages <- c("argparser", "tidyverse", "RColorBrewer")#, "ggplot2",  "tidyr")
1521838021600:installAndLoadPackages(packages)
1521838021607:# if(any(!(github.related.packages %in% installed.packages()))) {
1521838021607:#   cat("Please wait a moment! Installing required packages... ")
1521838021608:#   install.packages(github.related.packages[!(github.related.packages %in% installed.packages())],
1521838021608:#                    quiet = T, repos="http://cran.rstudio.com/",
1521838021609:#                    lib = personal.lib.path, dependencies = TRUE)
1521838021609:#   if(any(!(github.packages %in% installed.packages()))){
1521838021609:#     devtools::install_github("tidyverse/tibble",
1521838021610:#                              lib = personal.lib.path,
1521838021610:#                              quiet = T)
1521838021611:#   }
1521838021611:# }
1521838021611:#
1521838021612:# if(any(!(packages %in% installed.packages()))){
1521838021612:#   cat("Please wait a moment! Installing required packages... ")
1521838021613:#   install.packages(packages[!(packages %in% installed.packages())],
1521838021613:#                    quiet = T, repos="http://cran.rstudio.com/",
1521838021613:#                    lib = personal.lib.path, dependencies = TRUE)
1521838021614:#   cat("Done!\n\n\n")
1521838021614:#   cat("Executing the script:\n\n")
1521838021615:# }
1521838021615:#
1521838021615:# # Load packages
1521838021616:# suppressPackageStartupMessages(library(argparser, quietly = TRUE))
1521838021616:# suppressPackageStartupMessages(library(tidyverse, quietly = TRUE))
1521838021617:# # suppressPackageStartupMessages(library(ggplot2, quietly = TRUE))
1521838021617:# # suppressPackageStartupMessages(library(tidyr, quietly = TRUE))
1521838021617:# suppressPackageStartupMessages(library(RColorBrewer, quietly = TRUE))
1521838021618:################################################################################
1521838021619:# Get script name
1521838021619:initial.options <- commandArgs(trailingOnly = FALSE)
1521838021620:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1521838021621:# Process command line arguments
1521838021621:# Create a parser
1521838021622:p <- arg_parser("This script generates K-mer depth plots using as input data the file generated by STing typer tool (-t option).",
1521838021622:name = script.name)
1521838021624:# Add Positional arguments (required)
1521838021625:p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
1521838021626:# Add options
1521838021626:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1521838021627:default = "kmer_depth")
1521838021628:p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'",
1521838021629:default = "pdf")
1521838021630:# Initialization of variables
1521838021630:# Values to test the script using RStudio
1521838021631:script.home <- "/home/hspitia/projects/sting"
1521838021631:inputFile  <- paste(script.home, "ext_depth.tsv", sep = "/")
1521838021632:# out.format  <- "pdf"
1521838021632:# out.prefix  <- "~/kmer_ext_depth"
1521838021633:# Parse command line arguments
1521838021633:command.line = FALSE   # Turn to FALSE to test the script inside RStudio
1521838021634:argv <- c()
1521838021635:if(command.line) {
1521838021635:argv <- parse_args(p)
1521838021635:} else {
1521838021636:argv <- parse_args(p, list(inputFile,
1521838021636:"--prefix", "pdf",
1521838021637:"--format", "~/kmer_ext_depth"))
1521838021637:}
1521838021639:# Get argument values from command line
1521838021639:input.file <- argv$input_file
1521838021640:out.format <- argv$format
1521838021640:out.prefix <- argv$prefix
1521838021641:# command.line = TRUE   # Turn to FALSE to test the script inside RStudio
1521838021642:# if(command.line) {
1521838021642:# Get argument values from command line
1521838021642:input.file <- argv$input_file
1521838021643:out.format <- argv$format
1521838021644:out.prefix <- argv$prefix
1521838021644:# } else {
1521838021645:#   # Values to test the script using RStudio
1521838021645:#   script.home = "/home/hspitia/projects/sting"
1521838021646:#   input.file <- paste(script.home, "ext_depth.tsv", sep = "/")
1521838021646:#   out.format <- "pdf"
1521838021646:#   out.prefix <- "~/kmer_ext_depth"
1521838021647:# }
1521838021647:# ################################################################################
1521838021648:CheckFileExists <- function(file.list) {
1521838021648:non.exist.files <- !file.exists(file.list)
1521838021649:if(any(non.exist.files)) {
1521838021649:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1521838021649:}
1521838021650:}
1521838021651:# ################################################################################
1521838021652:# Check for input files
1521838021653:files.to.check <- c(input.file)
1521838021654:error.message  <- CheckFileExists(files.to.check)
1521838021655:if(!is.null(error.message)){
1521838021656:stop(error.message)
1521838021656:} else {
1521838021657:# ========================================================================
1521838021658:# Code core - Begin
1521838021658:# ========================================================================
1521838021659:cat("Plotting depths... ")
1521838021659:options(stringsAsFactors = T)
1521838021660:# Load data
1521838021660:inData <- read.delim(input.file)
1521838021660:# print(head(inData))
1521838021661:# colnames(inData) <- c("Allele", "Position", "k-mer Depth", "Weighted k-mer Depth")
1521838021661:colnames(inData) <- c("N", "Locus", "Allele", "Position", "kmerDepth",
1521838021662:"Norm. count", "Coverage", "MeanKmerDepth")
1521838021662:# inData$BestAllele <- paste0(inData$N, " - ", inData$Allele)
1521838021663:head(inData)
1521838021663:# Order data by Locus and N
1521838021664:inData <- arrange(inData, Locus, N)
1521838021664:inData <- inData %>%
1521838021664:mutate(Allele = factor(Allele, levels = unique(inData$Allele)))
1521838021665:# ==============================================================
1521838021666:plotDepth <- function(data.to.plot, labelsData) {
1521838021666:colourCount = length(unique(data.to.plot$Allele))
1521838021666:getPalette = colorRampPalette(brewer.pal(7, "Set1"))
1521838021667:max.x <- max(data.to.plot$Position)
1521838021668:max.y <- max(data.to.plot$kmerDepth)
1521838021668:x.limits <- seq(0, max.x, 100)
1521838021668:y.limits <- seq(0, max.y, 20)
1521838021669:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521838021670:y = kmerDepth),
1521838021670:size = 0.2)
1521838021671:d.plot <- d.plot + geom_area(alpha = 0.6,
1521838021671:aes(color = Allele,
1521838021672:# alpha = N,
1521838021672:fill = Allele
1521838021673:))
1521838021673:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521838021673:# d.plot <- d.plot + scale_color_hue(l = 40)
1521838021674:d.plot <- d.plot + geom_text(data = labelsData,
1521838021674:size = 3,
1521838021675:aes(x = name.x,
1521838021675:y = name.y,
1521838021676:label = Allele),
1521838021676:color = "#333333")
1521838021677:d.plot <- d.plot + geom_text(data = labelsData,
1521838021677:size = 3,
1521838021678:hjust = "left",
1521838021679:aes(x = info.x,
1521838021679:y = info.y,
1521838021680:label = info),
1521838021680:color = "#222222")
1521838021681:# d.plot <- d.plot + geom_text(data = labelsData,
1521838021681:#                              size = 3,
1521838021682:#                              hjust = "left",
1521838021682:#                              aes(x = meanDepth.x,
1521838021683:#                                  y = meanDepth.y,
1521838021684:#                                  label = meanDepth),
1521838021684:#                              color = "#333333")
1521838021685:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521838021685:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521838021686:expand = c(0, 2.0))
1521838021686:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521838021687:#                                     expand = c(0, 2))
1521838021688:# if (colourCount > 9) {
1521838021689:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521838021689:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521838021690:# } else {
1521838021690:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521838021691:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521838021692:# }
1521838021692:d.plot <- d.plot + theme_bw()
1521838021693:# d.plot <- d.plot + theme_linedraw()
1521838021693:d.plot <- d.plot + labs(title = "K-mer Depth",
1521838021694:subtitle = basename(input.file),
1521838021695:x     = "Position along sequence (bp)",
1521838021695:y     = "k-mer Depth")
1521838021696:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521838021697:# color = FALSE)
1521838021697:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521838021698:plot.subtitle = element_text(hjust = 0.5),
1521838021698:axis.text.x = element_text(angle = 50,
1521838021699:vjust = 1,
1521838021700:hjust = 1,
1521838021701:size = 7),
1521838021701:legend.position = "none")
1521838021702:d.plot
1521838021702:}
1521838021704:plotDepthDist <- function(data.to.plot, labelsData) {
1521838021704:dist.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521838021705:# dist.plot <- dist.plot + geom_jitter(position = position_jitter(width=.2),
1521838021706:# alpha = 0.4)
1521838021706:dist.plot <- dist.plot + geom_boxplot(alpha = 0.6, size = 0.4, aes(fill = Allele))
1521838021707:dist.plot <- dist.plot + geom_text(data = labelsData,
1521838021708:size = 4,
1521838021708:hjust = "left",
1521838021709:aes(x = (N - 0.5),
1521838021710:y = info.y * 1.05,
1521838021711:label = Allele),
1521838021711:color = "#333333")
1521838021713:dist.plot <- dist.plot + geom_text(data = labelsData,
1521838021713:size = 3,
1521838021714:hjust = "left",
1521838021715:aes(x = (N - 0.4),
1521838021716:y = info.y * 0.08,
1521838021716:label = paste0("sd=",format(round(sd, 1), nsmall = 1))),
1521838021717:color = "#333333")
1521838021719:dist.plot <- dist.plot + geom_point(data = labelsData,
1521838021719:shape = 23, fill = "white",
1521838021720:aes(x = N, y = meanDepth))
1521838021721:dist.plot <- dist.plot + facet_grid(Locus ~ ., scales = "free_y")
1521838021722:dist.plot <- dist.plot + labs(title = "K-mer Depth Distribution",
1521838021722:subtitle = basename(input.file),
1521838021723:x     = "Allele Ranking",
1521838021724:y     = "k-mer Depth")
1521838021725:dist.plot <- dist.plot + theme_bw()
1521838021726:dist.plot <- dist.plot + theme(legend.position = "none",
1521838021726:plot.title = element_text(hjust = 0.5),
1521838021727:plot.subtitle = element_text(hjust = 0.5))
1521838021728:dist.plot
1521838021729:}
1521838021731:getLabelsData <- function(data.to.plot) {
1521838021732:max.x <- max(data.to.plot$Position)
1521838021733:max.y <- max(data.to.plot$kmerDepth)
1521838021735:nLoci    <- length(unique(data.to.plot$Locus))
1521838021735:nAlleles <- length(unique(data.to.plot$N))
1521838021737:alleles     <- unique(data.to.plot$Allele)
1521838021738:loci        <- as.character(unique(data.to.plot$Locus))
1521838021739:lociLabels  <- c()
1521838021740:name.x      <- c()
1521838021741:name.y      <- c()
1521838021742:info.x      <- c()
1521838021742:info.y      <- c()
1521838021743:covs        <- c()
1521838021744:meanDepths  <- c()
1521838021745:meanDepth.x <- c()
1521838021746:meanDepth.y <- c()
1521838021747:for (i in loci) {
1521838021748:lociLabels <- c(lociLabels, rep(i, 3))
1521838021749:}
1521838021750:for (allele in alleles) {
1521838021751:locus       <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1521838021752:# maxPos      <- max(data.to.plot[data.to.plot$Allele == allele, "Position"])
1521838021753:maxPos      <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1521838021754:# maxDepth    <- max(data.to.plot[data.to.plot$Allele == allele, "kmerDepth"])
1521838021755:maxDepth    <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1521838021757:name.x      <- c(name.x, (maxPos / 2))
1521838021758:name.y      <- c(name.y, (maxDepth * 0.2))
1521838021759:info.x      <- c(info.x, max.x * 0.02)
1521838021760:info.y      <- c(info.y, maxDepth * 0.9)
1521838021761:covs        <- c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"]))
1521838021762:meanDepths  <- c(meanDepths, unique(data.to.plot[data.to.plot$Allele == allele, "MeanKmerDepth"]))
1521838021763:# meanDepth.x <- c(meanDepth.x, max.x * 0.30)
1521838021764:# meanDepth.y <- c(meanDepth.y, maxDepth * 0.9)
1521838021765:}
1521838021766:# (labelsData <- data.frame(Allele = alleles, name.x = x, name.y = y))
1521838021767:# data.to.plot <- left_join(data.to.plot, labelsData)
1521838021768:labelsData <- data.frame(Allele = alleles,
1521838021769:name.x = name.x,
1521838021770:name.y = name.y,
1521838021771:info = paste0("cov=", format(round(covs, 1), nsmall = 1), "%  ", paste0("md=", format(round(meanDepths, 1), nsmall = 1))),
1521838021772:info.x = info.x, info.y = info.y,
1521838021773:meanDepth = meanDepths,
1521838021775:# meanDepth.x = meanDepth.x, meanDepth.y = meanDepth.y,
1521838021776:N = rep(unique(data.to.plot$N), nLoci),
1521838021777:Locus = lociLabels) %>%
1521838021778:left_join(inData %>%
1521838021779:group_by(Allele) %>%
1521838021780:summarise(sd = sd(kmerDepth)),
1521838021782:by = c("Allele" = "Allele"))
1521838021783:labelsData
1521838021784:}
1521838021785:# ==============================================================
1521838021786:data.to.plot <- inData
1521838021787:labelsData   <- getLabelsData(data.to.plot)
1521838021790:nLoci    <- length(unique(data.to.plot$Locus))
1521838021791:nAlleles <- length(unique(data.to.plot$N))
1521838021793:hFactor  <- 1.1
1521838021794:wFactor  <- 4
1521838021796:if (nLoci == 1)
1521838021797:hFactor <- 1.8
1521838021798:height       <- nLoci * hFactor
1521838021800:width        <- nAlleles * wFactor
1521838021802:depth.plot   <- plotDepth(data.to.plot, labelsData)
1521838021803:# depth.plot
1521838021806:out.filename <- paste0(out.prefix, ".", out.format)
1521838021807:if (out.format == "png") {
1521838021808:ggsave(filename = out.filename, plot = depth.plot,
1521838021809:width  = width,
1521838021811:height = height,
1521838021812:type = "cairo-png",
1521838021814:dpi = 300)
1521838021816:} else {
1521838021818:ggsave(filename = out.filename, plot = depth.plot,
1521838021819:width  = width,
1521838021820:height = height,
1521838021822:dpi = 400)
1521838021823:}
1521838021825:cat("Done! \n")
1521838021828:hFactor  <- 4
1521838021830:wFactor  <- 2
1521838021831:if (nLoci == 1)
1521838021834:hFactor <- 4.5
1521838021836:height       <- nLoci * hFactor
1521838021838:width        <- nAlleles * wFactor
1521838021842:dist.plot <- plotDepthDist(data.to.plot, labelsData)
1521838021845:# dist.plot
1521838021849:out.filename <- paste0(out.prefix, "_dist.", out.format)
1521838021850:if (out.format == "png") {
1521838021851:ggsave(filename = out.filename, plot = dist.plot,
1521838021852:width  = width,
1521838021854:height = height,
1521838021855:type = "cairo-png",
1521838021856:dpi = 300)
1521838021857:} else {
1521838021859:ggsave(filename = out.filename, plot = dist.plot,
1521838021860:width  = width,
1521838021861:height = height,
1521838021863:dpi = 400)
1521838021864:}
1521838021867:# ========================================================================
1521838021868:# Code core - End
1521838021869:# ========================================================================
1521838021871:}
1521838028913:#!/usr/bin/env Rscript
1521838028914:################################################################################
1521838028915:# Author:   Hector Fabio Espitia Navarro
1521838028916:#           Georgia Institute of Technology
1521838028916:#
1521838028917:# Version:  1.0
1521838028917:# Date:     02/18/2017
1521838028917:################################################################################
1521838028918:# Install required packages
1521838028918:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1521838028919:if(!file.exists(personal.lib.path))
1521838028920:dir.create(personal.lib.path)
1521838028921:installAndLoadPackages <- function(pkg){
1521838028921:cat("Please wait a moment! Checking for required packages... ")
1521838028922:cat("Done!\n")
1521838028922:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1521838028923:if (length(new.pkg)) {
1521838028923:cat("Installing new packages... ")
1521838028924:install.packages(new.pkg, dependencies = TRUE,
1521838028925:repos="http://cran.rstudio.com/",
1521838028926:lib = personal.lib.path)
1521838028926:cat("Done!\n")
1521838028926:}
1521838028927:cat("Loading required packages... ")
1521838028927:sapply(pkg, function(x){
1521838028928:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1521838028928:})
1521838028929:cat("Done!\n")
1521838028929:}
1521838028931:# github.packages <- c("tibble")
1521838028931:github.related.packages <- c("devtools", "Rcpp")
1521838028932:packages <- c("argparser", "tidyverse", "RColorBrewer")#, "ggplot2",  "tidyr")
1521838028933:installAndLoadPackages(packages)
1521838028939:# if(any(!(github.related.packages %in% installed.packages()))) {
1521838028939:#   cat("Please wait a moment! Installing required packages... ")
1521838028940:#   install.packages(github.related.packages[!(github.related.packages %in% installed.packages())],
1521838028940:#                    quiet = T, repos="http://cran.rstudio.com/",
1521838028940:#                    lib = personal.lib.path, dependencies = TRUE)
1521838028941:#   if(any(!(github.packages %in% installed.packages()))){
1521838028941:#     devtools::install_github("tidyverse/tibble",
1521838028942:#                              lib = personal.lib.path,
1521838028942:#                              quiet = T)
1521838028942:#   }
1521838028943:# }
1521838028943:#
1521838028944:# if(any(!(packages %in% installed.packages()))){
1521838028944:#   cat("Please wait a moment! Installing required packages... ")
1521838028944:#   install.packages(packages[!(packages %in% installed.packages())],
1521838028945:#                    quiet = T, repos="http://cran.rstudio.com/",
1521838028945:#                    lib = personal.lib.path, dependencies = TRUE)
1521838028946:#   cat("Done!\n\n\n")
1521838028946:#   cat("Executing the script:\n\n")
1521838028946:# }
1521838028947:#
1521838028947:# # Load packages
1521838028948:# suppressPackageStartupMessages(library(argparser, quietly = TRUE))
1521838028948:# suppressPackageStartupMessages(library(tidyverse, quietly = TRUE))
1521838028948:# # suppressPackageStartupMessages(library(ggplot2, quietly = TRUE))
1521838028949:# # suppressPackageStartupMessages(library(tidyr, quietly = TRUE))
1521838028949:# suppressPackageStartupMessages(library(RColorBrewer, quietly = TRUE))
1521838028950:################################################################################
1521838028950:# Get script name
1521838028951:initial.options <- commandArgs(trailingOnly = FALSE)
1521838028951:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1521838028952:# Process command line arguments
1521838028953:# Create a parser
1521838028953:p <- arg_parser("This script generates K-mer depth plots using as input data the file generated by STing typer tool (-t option).",
1521838028953:name = script.name)
1521838028955:# Add Positional arguments (required)
1521838028956:p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
1521838028957:# Add options
1521838028957:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1521838028958:default = "kmer_depth")
1521838028959:p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'",
1521838028960:default = "pdf")
1521838028961:# Initialization of variables
1521838028962:# Values to test the script using RStudio
1521838028962:script.home <- "/home/hspitia/projects/sting"
1521838028963:inputFile  <- paste(script.home, "ext_depth.tsv", sep = "/")
1521838028963:# out.format  <- "pdf"
1521838028964:# out.prefix  <- "~/kmer_ext_depth"
1521838028964:# Parse command line arguments
1521838028965:command.line = FALSE   # Turn to FALSE to test the script inside RStudio
1521838028965:argv <- c()
1521838028966:if(command.line) {
1521838028966:argv <- parse_args(p)
1521838028967:} else {
1521838028967:argv <- parse_args(p, list(inputFile,
1521838028967:"--prefix", "pdf",
1521838028968:"--format", "~/kmer_ext_depth"))
1521838028968:}
1521838028970:# Get argument values from command line
1521838028970:input.file <- argv$input_file
1521838028971:out.format <- argv$format
1521838028971:out.prefix <- argv$prefix
1521838028972:# command.line = TRUE   # Turn to FALSE to test the script inside RStudio
1521838028973:# if(command.line) {
1521838028973:# Get argument values from command line
1521838028973:input.file <- argv$input_file
1521838028974:out.format <- argv$format
1521838028974:out.prefix <- argv$prefix
1521838028975:# } else {
1521838028975:#   # Values to test the script using RStudio
1521838028975:#   script.home = "/home/hspitia/projects/sting"
1521838028976:#   input.file <- paste(script.home, "ext_depth.tsv", sep = "/")
1521838028976:#   out.format <- "pdf"
1521838028976:#   out.prefix <- "~/kmer_ext_depth"
1521838028977:# }
1521838028977:# ################################################################################
1521838028978:CheckFileExists <- function(file.list) {
1521838028978:non.exist.files <- !file.exists(file.list)
1521838028978:if(any(non.exist.files)) {
1521838028979:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1521838028979:}
1521838028979:}
1521838028980:# ################################################################################
1521838028980:# Check for input files
1521838028981:files.to.check <- c(input.file)
1521838028981:error.message  <- CheckFileExists(files.to.check)
1521838028982:if(!is.null(error.message)){
1521838028983:stop(error.message)
1521838028984:} else {
1521838028984:# ========================================================================
1521838028985:# Code core - Begin
1521838028985:# ========================================================================
1521838028986:cat("Plotting depths... ")
1521838028986:options(stringsAsFactors = T)
1521838028987:# Load data
1521838028987:inData <- read.delim(input.file)
1521838028988:# print(head(inData))
1521838028988:# colnames(inData) <- c("Allele", "Position", "k-mer Depth", "Weighted k-mer Depth")
1521838028989:colnames(inData) <- c("N", "Locus", "Allele", "Position", "kmerDepth",
1521838028989:"Norm. count", "Coverage", "MeanKmerDepth")
1521838028990:# inData$BestAllele <- paste0(inData$N, " - ", inData$Allele)
1521838028991:head(inData)
1521838028992:# Order data by Locus and N
1521838028992:inData <- arrange(inData, Locus, N)
1521838028993:inData <- inData %>%
1521838028993:mutate(Allele = factor(Allele, levels = unique(inData$Allele)))
1521838028994:# ==============================================================
1521838028994:plotDepth <- function(data.to.plot, labelsData) {
1521838028995:colourCount = length(unique(data.to.plot$Allele))
1521838028995:getPalette = colorRampPalette(brewer.pal(7, "Set1"))
1521838028996:max.x <- max(data.to.plot$Position)
1521838028996:max.y <- max(data.to.plot$kmerDepth)
1521838028997:x.limits <- seq(0, max.x, 100)
1521838028997:y.limits <- seq(0, max.y, 20)
1521838028998:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521838028998:y = kmerDepth),
1521838028999:size = 0.2)
1521838028999:d.plot <- d.plot + geom_area(alpha = 0.6,
1521838029000:aes(color = Allele,
1521838029000:# alpha = N,
1521838029001:fill = Allele
1521838029001:))
1521838029002:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521838029002:# d.plot <- d.plot + scale_color_hue(l = 40)
1521838029002:d.plot <- d.plot + geom_text(data = labelsData,
1521838029003:size = 3,
1521838029003:aes(x = name.x,
1521838029004:y = name.y,
1521838029004:label = Allele),
1521838029005:color = "#333333")
1521838029005:d.plot <- d.plot + geom_text(data = labelsData,
1521838029006:size = 3,
1521838029006:hjust = "left",
1521838029007:aes(x = info.x,
1521838029007:y = info.y,
1521838029008:label = info),
1521838029008:color = "#222222")
1521838029009:# d.plot <- d.plot + geom_text(data = labelsData,
1521838029009:#                              size = 3,
1521838029010:#                              hjust = "left",
1521838029010:#                              aes(x = meanDepth.x,
1521838029011:#                                  y = meanDepth.y,
1521838029011:#                                  label = meanDepth),
1521838029012:#                              color = "#333333")
1521838029012:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521838029013:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521838029013:expand = c(0, 2.0))
1521838029014:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521838029015:#                                     expand = c(0, 2))
1521838029016:# if (colourCount > 9) {
1521838029016:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521838029017:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521838029017:# } else {
1521838029018:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521838029018:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521838029019:# }
1521838029020:d.plot <- d.plot + theme_bw()
1521838029020:# d.plot <- d.plot + theme_linedraw()
1521838029021:d.plot <- d.plot + labs(title = "K-mer Depth",
1521838029021:subtitle = basename(input.file),
1521838029022:x     = "Position along sequence (bp)",
1521838029022:y     = "k-mer Depth")
1521838029023:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521838029024:# color = FALSE)
1521838029024:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521838029025:plot.subtitle = element_text(hjust = 0.5),
1521838029026:axis.text.x = element_text(angle = 50,
1521838029026:vjust = 1,
1521838029027:hjust = 1,
1521838029028:size = 7),
1521838029028:legend.position = "none")
1521838029029:d.plot
1521838029029:}
1521838029031:plotDepthDist <- function(data.to.plot, labelsData) {
1521838029031:dist.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521838029032:# dist.plot <- dist.plot + geom_jitter(position = position_jitter(width=.2),
1521838029033:# alpha = 0.4)
1521838029033:dist.plot <- dist.plot + geom_boxplot(alpha = 0.6, size = 0.4, aes(fill = Allele))
1521838029034:dist.plot <- dist.plot + geom_text(data = labelsData,
1521838029035:size = 4,
1521838029035:hjust = "left",
1521838029036:aes(x = (N - 0.5),
1521838029037:y = info.y * 1.05,
1521838029037:label = Allele),
1521838029038:color = "#333333")
1521838029039:dist.plot <- dist.plot + geom_text(data = labelsData,
1521838029040:size = 3,
1521838029041:hjust = "left",
1521838029042:aes(x = (N - 0.4),
1521838029042:y = info.y * 0.08,
1521838029043:label = paste0("sd=",format(round(sd, 1), nsmall = 1))),
1521838029044:color = "#333333")
1521838029045:dist.plot <- dist.plot + geom_point(data = labelsData,
1521838029046:shape = 23, fill = "white",
1521838029047:aes(x = N, y = meanDepth))
1521838029048:dist.plot <- dist.plot + facet_grid(Locus ~ ., scales = "free_y")
1521838029048:dist.plot <- dist.plot + labs(title = "K-mer Depth Distribution",
1521838029049:subtitle = basename(input.file),
1521838029050:x     = "Allele Ranking",
1521838029051:y     = "k-mer Depth")
1521838029051:dist.plot <- dist.plot + theme_bw()
1521838029052:dist.plot <- dist.plot + theme(legend.position = "none",
1521838029053:plot.title = element_text(hjust = 0.5),
1521838029054:plot.subtitle = element_text(hjust = 0.5))
1521838029055:dist.plot
1521838029056:}
1521838029057:getLabelsData <- function(data.to.plot) {
1521838029058:max.x <- max(data.to.plot$Position)
1521838029059:max.y <- max(data.to.plot$kmerDepth)
1521838029061:nLoci    <- length(unique(data.to.plot$Locus))
1521838029062:nAlleles <- length(unique(data.to.plot$N))
1521838029064:alleles     <- unique(data.to.plot$Allele)
1521838029065:loci        <- as.character(unique(data.to.plot$Locus))
1521838029066:lociLabels  <- c()
1521838029066:name.x      <- c()
1521838029068:name.y      <- c()
1521838029068:info.x      <- c()
1521838029069:info.y      <- c()
1521838029070:covs        <- c()
1521838029071:meanDepths  <- c()
1521838029072:meanDepth.x <- c()
1521838029073:meanDepth.y <- c()
1521838029074:for (i in loci) {
1521838029075:lociLabels <- c(lociLabels, rep(i, 3))
1521838029076:}
1521838029077:for (allele in alleles) {
1521838029078:locus       <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1521838029079:# maxPos      <- max(data.to.plot[data.to.plot$Allele == allele, "Position"])
1521838029080:maxPos      <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1521838029081:# maxDepth    <- max(data.to.plot[data.to.plot$Allele == allele, "kmerDepth"])
1521838029082:maxDepth    <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1521838029083:name.x      <- c(name.x, (maxPos / 2))
1521838029084:name.y      <- c(name.y, (maxDepth * 0.2))
1521838029085:info.x      <- c(info.x, max.x * 0.02)
1521838029086:info.y      <- c(info.y, maxDepth * 0.9)
1521838029087:covs        <- c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"]))
1521838029088:meanDepths  <- c(meanDepths, unique(data.to.plot[data.to.plot$Allele == allele, "MeanKmerDepth"]))
1521838029089:# meanDepth.x <- c(meanDepth.x, max.x * 0.30)
1521838029090:# meanDepth.y <- c(meanDepth.y, maxDepth * 0.9)
1521838029091:}
1521838029092:# (labelsData <- data.frame(Allele = alleles, name.x = x, name.y = y))
1521838029093:# data.to.plot <- left_join(data.to.plot, labelsData)
1521838029094:labelsData <- data.frame(Allele = alleles,
1521838029095:name.x = name.x,
1521838029096:name.y = name.y,
1521838029097:info = paste0("cov=", format(round(covs, 1), nsmall = 1), "%  ", paste0("md=", format(round(meanDepths, 1), nsmall = 1))),
1521838029099:info.x = info.x, info.y = info.y,
1521838029100:meanDepth = meanDepths,
1521838029101:# meanDepth.x = meanDepth.x, meanDepth.y = meanDepth.y,
1521838029102:N = rep(unique(data.to.plot$N), nLoci),
1521838029103:Locus = lociLabels) %>%
1521838029104:left_join(inData %>%
1521838029105:group_by(Allele) %>%
1521838029106:summarise(sd = sd(kmerDepth)),
1521838029107:by = c("Allele" = "Allele"))
1521838029108:labelsData
1521838029110:}
1521838029111:# ==============================================================
1521838029112:data.to.plot <- inData
1521838029113:labelsData   <- getLabelsData(data.to.plot)
1521838029115:nLoci    <- length(unique(data.to.plot$Locus))
1521838029116:nAlleles <- length(unique(data.to.plot$N))
1521838029119:hFactor  <- 1.1
1521838029120:wFactor  <- 4
1521838029122:if (nLoci == 1)
1521838029124:hFactor <- 1.8
1521838029126:height       <- nLoci * hFactor
1521838029128:width        <- nAlleles * wFactor
1521838029130:depth.plot   <- plotDepth(data.to.plot, labelsData)
1521838029131:# depth.plot
1521838029135:out.filename <- paste0(out.prefix, ".", out.format)
1521838029136:if (out.format == "png") {
1521838029138:ggsave(filename = out.filename, plot = depth.plot,
1521838029139:width  = width,
1521838029141:height = height,
1521838029143:type = "cairo-png",
1521838029144:dpi = 300)
1521838029146:} else {
1521838029147:ggsave(filename = out.filename, plot = depth.plot,
1521838029148:width  = width,
1521838029150:height = height,
1521838029151:dpi = 400)
1521838029152:}
1521838029153:cat("Done! \n")
1521838029157:hFactor  <- 4
1521838029158:wFactor  <- 2
1521838029160:if (nLoci == 1)
1521838029161:hFactor <- 4.5
1521838029163:height       <- nLoci * hFactor
1521838029164:width        <- nAlleles * wFactor
1521838029166:dist.plot <- plotDepthDist(data.to.plot, labelsData)
1521838029167:# dist.plot
1521838029170:out.filename <- paste0(out.prefix, "_dist.", out.format)
1521838029171:if (out.format == "png") {
1521838029173:ggsave(filename = out.filename, plot = dist.plot,
1521838029174:width  = width,
1521838029175:height = height,
1521838029177:type = "cairo-png",
1521838029178:dpi = 300)
1521838029181:} else {
1521838029183:ggsave(filename = out.filename, plot = dist.plot,
1521838029184:width  = width,
1521838029186:height = height,
1521838029187:dpi = 400)
1521838029188:}
1521838029191:# ========================================================================
1521838029192:# Code core - End
1521838029194:# ========================================================================
1521838029195:}
1521838035113:View(argv)
1521838072763:#!/usr/bin/env Rscript
1521838072764:################################################################################
1521838072765:# Author:   Hector Fabio Espitia Navarro
1521838072765:#           Georgia Institute of Technology
1521838072766:#
1521838072766:# Version:  1.0
1521838072767:# Date:     02/18/2017
1521838072768:################################################################################
1521838072768:# Install required packages
1521838072768:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1521838072769:if(!file.exists(personal.lib.path))
1521838072770:dir.create(personal.lib.path)
1521838072771:installAndLoadPackages <- function(pkg){
1521838072772:cat("Please wait a moment! Checking for required packages... ")
1521838072773:cat("Done!\n")
1521838072774:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1521838072774:if (length(new.pkg)) {
1521838072775:cat("Installing new packages... ")
1521838072775:install.packages(new.pkg, dependencies = TRUE,
1521838072776:repos="http://cran.rstudio.com/",
1521838072776:lib = personal.lib.path)
1521838072776:cat("Done!\n")
1521838072777:}
1521838072777:cat("Loading required packages... ")
1521838072778:sapply(pkg, function(x){
1521838072778:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1521838072779:})
1521838072779:cat("Done!\n")
1521838072780:}
1521838072781:# github.packages <- c("tibble")
1521838072782:github.related.packages <- c("devtools", "Rcpp")
1521838072782:packages <- c("argparser", "tidyverse", "RColorBrewer")#, "ggplot2",  "tidyr")
1521838072783:installAndLoadPackages(packages)
1521838072791:# if(any(!(github.related.packages %in% installed.packages()))) {
1521838072792:#   cat("Please wait a moment! Installing required packages... ")
1521838072793:#   install.packages(github.related.packages[!(github.related.packages %in% installed.packages())],
1521838072794:#                    quiet = T, repos="http://cran.rstudio.com/",
1521838072794:#                    lib = personal.lib.path, dependencies = TRUE)
1521838072795:#   if(any(!(github.packages %in% installed.packages()))){
1521838072796:#     devtools::install_github("tidyverse/tibble",
1521838072796:#                              lib = personal.lib.path,
1521838072797:#                              quiet = T)
1521838072798:#   }
1521838072798:# }
1521838072799:#
1521838072800:# if(any(!(packages %in% installed.packages()))){
1521838072800:#   cat("Please wait a moment! Installing required packages... ")
1521838072801:#   install.packages(packages[!(packages %in% installed.packages())],
1521838072801:#                    quiet = T, repos="http://cran.rstudio.com/",
1521838072802:#                    lib = personal.lib.path, dependencies = TRUE)
1521838072803:#   cat("Done!\n\n\n")
1521838072803:#   cat("Executing the script:\n\n")
1521838072804:# }
1521838072805:#
1521838072805:# # Load packages
1521838072806:# suppressPackageStartupMessages(library(argparser, quietly = TRUE))
1521838072807:# suppressPackageStartupMessages(library(tidyverse, quietly = TRUE))
1521838072807:# # suppressPackageStartupMessages(library(ggplot2, quietly = TRUE))
1521838072808:# # suppressPackageStartupMessages(library(tidyr, quietly = TRUE))
1521838072809:# suppressPackageStartupMessages(library(RColorBrewer, quietly = TRUE))
1521838072809:################################################################################
1521838072810:# Get script name
1521838072811:initial.options <- commandArgs(trailingOnly = FALSE)
1521838072812:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1521838072814:# Process command line arguments
1521838072814:# Create a parser
1521838072815:p <- arg_parser("This script generates K-mer depth plots using as input data the file generated by STing typer tool (-t option).",
1521838072816:name = script.name)
1521838072819:# Add Positional arguments (required)
1521838072820:p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
1521838072822:# Add options
1521838072822:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1521838072823:default = "kmer_depth")
1521838072825:p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'",
1521838072826:default = "pdf")
1521838072828:# Initialization of variables
1521838072829:# Values to test the script using RStudio
1521838072829:script.home <- "/home/hspitia/projects/sting"
1521838072830:inputFile  <- paste(script.home, "ext_depth.tsv", sep = "/")
1521838072832:# out.format  <- "pdf"
1521838072832:# out.prefix  <- "~/kmer_ext_depth"
1521838072833:# Parse command line arguments
1521838072834:command.line = FALSE   # Turn to FALSE to test the script inside RStudio
1521838072835:argv <- list()
1521838072836:if(command.line) {
1521838072836:argv <- parse_args(p)
1521838072837:} else {
1521838072837:argv <- parse_args(p, list(inputFile,
1521838072838:"--prefix", "pdf",
1521838072838:"--format", "~/kmer_ext_depth"))
1521838072839:}
1521838072842:# Get argument values from command line
1521838072842:input.file <- argv$input_file
1521838072843:out.format <- argv$format
1521838072844:out.prefix <- argv$prefix
1521838072846:# command.line = TRUE   # Turn to FALSE to test the script inside RStudio
1521838072846:# if(command.line) {
1521838072847:# Get argument values from command line
1521838072848:input.file <- argv$input_file
1521838072848:out.format <- argv$format
1521838072849:out.prefix <- argv$prefix
1521838072850:# } else {
1521838072851:#   # Values to test the script using RStudio
1521838072851:#   script.home = "/home/hspitia/projects/sting"
1521838072852:#   input.file <- paste(script.home, "ext_depth.tsv", sep = "/")
1521838072853:#   out.format <- "pdf"
1521838072853:#   out.prefix <- "~/kmer_ext_depth"
1521838072854:# }
1521838072855:# ################################################################################
1521838072855:CheckFileExists <- function(file.list) {
1521838072856:non.exist.files <- !file.exists(file.list)
1521838072856:if(any(non.exist.files)) {
1521838072857:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1521838072858:}
1521838072858:}
1521838072859:# ################################################################################
1521838072860:# Check for input files
1521838072860:files.to.check <- c(input.file)
1521838072861:error.message  <- CheckFileExists(files.to.check)
1521838072862:if(!is.null(error.message)){
1521838072863:stop(error.message)
1521838072864:} else {
1521838072864:# ========================================================================
1521838072865:# Code core - Begin
1521838072865:# ========================================================================
1521838072866:cat("Plotting depths... ")
1521838072866:options(stringsAsFactors = T)
1521838072867:# Load data
1521838072868:inData <- read.delim(input.file)
1521838072868:# print(head(inData))
1521838072869:# colnames(inData) <- c("Allele", "Position", "k-mer Depth", "Weighted k-mer Depth")
1521838072870:colnames(inData) <- c("N", "Locus", "Allele", "Position", "kmerDepth",
1521838072870:"Norm. count", "Coverage", "MeanKmerDepth")
1521838072871:# inData$BestAllele <- paste0(inData$N, " - ", inData$Allele)
1521838072872:head(inData)
1521838072873:# Order data by Locus and N
1521838072874:inData <- arrange(inData, Locus, N)
1521838072874:inData <- inData %>%
1521838072875:mutate(Allele = factor(Allele, levels = unique(inData$Allele)))
1521838072876:# ==============================================================
1521838072876:plotDepth <- function(data.to.plot, labelsData) {
1521838072877:colourCount = length(unique(data.to.plot$Allele))
1521838072877:getPalette = colorRampPalette(brewer.pal(7, "Set1"))
1521838072878:max.x <- max(data.to.plot$Position)
1521838072879:max.y <- max(data.to.plot$kmerDepth)
1521838072879:x.limits <- seq(0, max.x, 100)
1521838072880:y.limits <- seq(0, max.y, 20)
1521838072880:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521838072881:y = kmerDepth),
1521838072881:size = 0.2)
1521838072882:d.plot <- d.plot + geom_area(alpha = 0.6,
1521838072882:aes(color = Allele,
1521838072883:# alpha = N,
1521838072884:fill = Allele
1521838072884:))
1521838072885:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521838072885:# d.plot <- d.plot + scale_color_hue(l = 40)
1521838072887:d.plot <- d.plot + geom_text(data = labelsData,
1521838072888:size = 3,
1521838072889:aes(x = name.x,
1521838072889:y = name.y,
1521838072890:label = Allele),
1521838072890:color = "#333333")
1521838072891:d.plot <- d.plot + geom_text(data = labelsData,
1521838072891:size = 3,
1521838072892:hjust = "left",
1521838072892:aes(x = info.x,
1521838072893:y = info.y,
1521838072893:label = info),
1521838072894:color = "#222222")
1521838072894:# d.plot <- d.plot + geom_text(data = labelsData,
1521838072895:#                              size = 3,
1521838072896:#                              hjust = "left",
1521838072896:#                              aes(x = meanDepth.x,
1521838072897:#                                  y = meanDepth.y,
1521838072897:#                                  label = meanDepth),
1521838072898:#                              color = "#333333")
1521838072898:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521838072899:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521838072900:expand = c(0, 2.0))
1521838072900:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521838072901:#                                     expand = c(0, 2))
1521838072903:# if (colourCount > 9) {
1521838072903:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521838072904:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521838072905:# } else {
1521838072905:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521838072906:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521838072906:# }
1521838072907:d.plot <- d.plot + theme_bw()
1521838072908:# d.plot <- d.plot + theme_linedraw()
1521838072908:d.plot <- d.plot + labs(title = "K-mer Depth",
1521838072909:subtitle = basename(input.file),
1521838072909:x     = "Position along sequence (bp)",
1521838072910:y     = "k-mer Depth")
1521838072910:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521838072911:# color = FALSE)
1521838072912:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521838072912:plot.subtitle = element_text(hjust = 0.5),
1521838072913:axis.text.x = element_text(angle = 50,
1521838072913:vjust = 1,
1521838072914:hjust = 1,
1521838072915:size = 7),
1521838072915:legend.position = "none")
1521838072916:d.plot
1521838072917:}
1521838072918:plotDepthDist <- function(data.to.plot, labelsData) {
1521838072919:dist.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521838072920:# dist.plot <- dist.plot + geom_jitter(position = position_jitter(width=.2),
1521838072921:# alpha = 0.4)
1521838072922:dist.plot <- dist.plot + geom_boxplot(alpha = 0.6, size = 0.4, aes(fill = Allele))
1521838072924:dist.plot <- dist.plot + geom_text(data = labelsData,
1521838072925:size = 4,
1521838072926:hjust = "left",
1521838072927:aes(x = (N - 0.5),
1521838072929:y = info.y * 1.05,
1521838072930:label = Allele),
1521838072931:color = "#333333")
1521838072933:dist.plot <- dist.plot + geom_text(data = labelsData,
1521838072935:size = 3,
1521838072936:hjust = "left",
1521838072937:aes(x = (N - 0.4),
1521838072938:y = info.y * 0.08,
1521838072940:label = paste0("sd=",format(round(sd, 1), nsmall = 1))),
1521838072941:color = "#333333")
1521838072943:dist.plot <- dist.plot + geom_point(data = labelsData,
1521838072945:shape = 23, fill = "white",
1521838072946:aes(x = N, y = meanDepth))
1521838072947:dist.plot <- dist.plot + facet_grid(Locus ~ ., scales = "free_y")
1521838072948:dist.plot <- dist.plot + labs(title = "K-mer Depth Distribution",
1521838072949:subtitle = basename(input.file),
1521838072950:x     = "Allele Ranking",
1521838072951:y     = "k-mer Depth")
1521838072952:dist.plot <- dist.plot + theme_bw()
1521838072953:dist.plot <- dist.plot + theme(legend.position = "none",
1521838072954:plot.title = element_text(hjust = 0.5),
1521838072954:plot.subtitle = element_text(hjust = 0.5))
1521838072955:dist.plot
1521838072956:}
1521838072958:getLabelsData <- function(data.to.plot) {
1521838072959:max.x <- max(data.to.plot$Position)
1521838072960:max.y <- max(data.to.plot$kmerDepth)
1521838072961:nLoci    <- length(unique(data.to.plot$Locus))
1521838072962:nAlleles <- length(unique(data.to.plot$N))
1521838072964:alleles     <- unique(data.to.plot$Allele)
1521838072965:loci        <- as.character(unique(data.to.plot$Locus))
1521838072966:lociLabels  <- c()
1521838072967:name.x      <- c()
1521838072968:name.y      <- c()
1521838072969:info.x      <- c()
1521838072970:info.y      <- c()
1521838072971:covs        <- c()
1521838072972:meanDepths  <- c()
1521838072973:meanDepth.x <- c()
1521838072973:meanDepth.y <- c()
1521838072974:for (i in loci) {
1521838072975:lociLabels <- c(lociLabels, rep(i, 3))
1521838072976:}
1521838072977:for (allele in alleles) {
1521838072978:locus       <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1521838072979:# maxPos      <- max(data.to.plot[data.to.plot$Allele == allele, "Position"])
1521838072981:maxPos      <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1521838072982:# maxDepth    <- max(data.to.plot[data.to.plot$Allele == allele, "kmerDepth"])
1521838072983:maxDepth    <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1521838072984:name.x      <- c(name.x, (maxPos / 2))
1521838072985:name.y      <- c(name.y, (maxDepth * 0.2))
1521838072986:info.x      <- c(info.x, max.x * 0.02)
1521838072988:info.y      <- c(info.y, maxDepth * 0.9)
1521838072990:covs        <- c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"]))
1521838072991:meanDepths  <- c(meanDepths, unique(data.to.plot[data.to.plot$Allele == allele, "MeanKmerDepth"]))
1521838072993:# meanDepth.x <- c(meanDepth.x, max.x * 0.30)
1521838072995:# meanDepth.y <- c(meanDepth.y, maxDepth * 0.9)
1521838072996:}
1521838072997:# (labelsData <- data.frame(Allele = alleles, name.x = x, name.y = y))
1521838072999:# data.to.plot <- left_join(data.to.plot, labelsData)
1521838073000:labelsData <- data.frame(Allele = alleles,
1521838073001:name.x = name.x,
1521838073002:name.y = name.y,
1521838073003:info = paste0("cov=", format(round(covs, 1), nsmall = 1), "%  ", paste0("md=", format(round(meanDepths, 1), nsmall = 1))),
1521838073004:info.x = info.x, info.y = info.y,
1521838073005:meanDepth = meanDepths,
1521838073006:# meanDepth.x = meanDepth.x, meanDepth.y = meanDepth.y,
1521838073008:N = rep(unique(data.to.plot$N), nLoci),
1521838073009:Locus = lociLabels) %>%
1521838073010:left_join(inData %>%
1521838073011:group_by(Allele) %>%
1521838073012:summarise(sd = sd(kmerDepth)),
1521838073013:by = c("Allele" = "Allele"))
1521838073015:labelsData
1521838073016:}
1521838073017:# ==============================================================
1521838073018:data.to.plot <- inData
1521838073019:labelsData   <- getLabelsData(data.to.plot)
1521838073022:nLoci    <- length(unique(data.to.plot$Locus))
1521838073023:nAlleles <- length(unique(data.to.plot$N))
1521838073027:hFactor  <- 1.1
1521838073028:wFactor  <- 4
1521838073029:if (nLoci == 1)
1521838073031:hFactor <- 1.8
1521838073032:height       <- nLoci * hFactor
1521838073033:width        <- nAlleles * wFactor
1521838073036:depth.plot   <- plotDepth(data.to.plot, labelsData)
1521838073037:# depth.plot
1521838073039:out.filename <- paste0(out.prefix, ".", out.format)
1521838073040:if (out.format == "png") {
1521838073042:ggsave(filename = out.filename, plot = depth.plot,
1521838073043:width  = width,
1521838073044:height = height,
1521838073045:type = "cairo-png",
1521838073046:dpi = 300)
1521838073048:} else {
1521838073049:ggsave(filename = out.filename, plot = depth.plot,
1521838073050:width  = width,
1521838073051:height = height,
1521838073053:dpi = 400)
1521838073054:}
1521838073055:cat("Done! \n")
1521838073059:hFactor  <- 4
1521838073060:wFactor  <- 2
1521838073061:if (nLoci == 1)
1521838073062:hFactor <- 4.5
1521838073064:height       <- nLoci * hFactor
1521838073065:width        <- nAlleles * wFactor
1521838073067:dist.plot <- plotDepthDist(data.to.plot, labelsData)
1521838073069:# dist.plot
1521838073071:out.filename <- paste0(out.prefix, "_dist.", out.format)
1521838073072:if (out.format == "png") {
1521838073074:ggsave(filename = out.filename, plot = dist.plot,
1521838073075:width  = width,
1521838073077:height = height,
1521838073078:type = "cairo-png",
1521838073080:dpi = 300)
1521838073081:} else {
1521838073082:ggsave(filename = out.filename, plot = dist.plot,
1521838073084:width  = width,
1521838073085:height = height,
1521838073087:dpi = 400)
1521838073088:}
1521838073090:# ========================================================================
1521838073092:# Code core - End
1521838073093:# ========================================================================
1521838073095:}
1521838105593:out.format
1521838136258:#!/usr/bin/env Rscript
1521838136258:################################################################################
1521838136259:# Author:   Hector Fabio Espitia Navarro
1521838136260:#           Georgia Institute of Technology
1521838136260:#
1521838136261:# Version:  1.0
1521838136261:# Date:     02/18/2017
1521838136261:################################################################################
1521838136262:# Install required packages
1521838136262:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1521838136263:if(!file.exists(personal.lib.path))
1521838136263:dir.create(personal.lib.path)
1521838136264:installAndLoadPackages <- function(pkg){
1521838136265:cat("Please wait a moment! Checking for required packages... ")
1521838136265:cat("Done!\n")
1521838136265:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1521838136266:if (length(new.pkg)) {
1521838136266:cat("Installing new packages... ")
1521838136266:install.packages(new.pkg, dependencies = TRUE,
1521838136267:repos="http://cran.rstudio.com/",
1521838136267:lib = personal.lib.path)
1521838136268:cat("Done!\n")
1521838136269:}
1521838136269:cat("Loading required packages... ")
1521838136270:sapply(pkg, function(x){
1521838136270:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1521838136270:})
1521838136271:cat("Done!\n")
1521838136272:}
1521838136273:# github.packages <- c("tibble")
1521838136273:github.related.packages <- c("devtools", "Rcpp")
1521838136274:packages <- c("argparser", "tidyverse", "RColorBrewer")#, "ggplot2",  "tidyr")
1521838136274:installAndLoadPackages(packages)
1521838136281:# if(any(!(github.related.packages %in% installed.packages()))) {
1521838136282:#   cat("Please wait a moment! Installing required packages... ")
1521838136282:#   install.packages(github.related.packages[!(github.related.packages %in% installed.packages())],
1521838136283:#                    quiet = T, repos="http://cran.rstudio.com/",
1521838136283:#                    lib = personal.lib.path, dependencies = TRUE)
1521838136284:#   if(any(!(github.packages %in% installed.packages()))){
1521838136284:#     devtools::install_github("tidyverse/tibble",
1521838136285:#                              lib = personal.lib.path,
1521838136286:#                              quiet = T)
1521838136286:#   }
1521838136287:# }
1521838136287:#
1521838136288:# if(any(!(packages %in% installed.packages()))){
1521838136288:#   cat("Please wait a moment! Installing required packages... ")
1521838136289:#   install.packages(packages[!(packages %in% installed.packages())],
1521838136289:#                    quiet = T, repos="http://cran.rstudio.com/",
1521838136290:#                    lib = personal.lib.path, dependencies = TRUE)
1521838136290:#   cat("Done!\n\n\n")
1521838136291:#   cat("Executing the script:\n\n")
1521838136292:# }
1521838136292:#
1521838136293:# # Load packages
1521838136293:# suppressPackageStartupMessages(library(argparser, quietly = TRUE))
1521838136294:# suppressPackageStartupMessages(library(tidyverse, quietly = TRUE))
1521838136294:# # suppressPackageStartupMessages(library(ggplot2, quietly = TRUE))
1521838136295:# # suppressPackageStartupMessages(library(tidyr, quietly = TRUE))
1521838136296:# suppressPackageStartupMessages(library(RColorBrewer, quietly = TRUE))
1521838136296:################################################################################
1521838136297:# Get script name
1521838136298:initial.options <- commandArgs(trailingOnly = FALSE)
1521838136299:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1521838136301:# Process command line arguments
1521838136301:# Create a parser
1521838136302:p <- arg_parser("This script generates K-mer depth plots using as input data the file generated by STing typer tool (-t option).",
1521838136303:name = script.name)
1521838136305:# Add Positional arguments (required)
1521838136306:p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
1521838136308:# Add options
1521838136308:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1521838136309:default = "kmer_depth")
1521838136311:p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'",
1521838136311:default = "pdf")
1521838136314:# Initialization of variables
1521838136314:# Values to test the script using RStudio
1521838136315:script.home <- "/home/hspitia/projects/sting"
1521838136316:inputFile  <- paste(script.home, "ext_depth.tsv", sep = "/")
1521838136317:# out.format  <- "pdf"
1521838136317:# out.prefix  <- "~/kmer_ext_depth"
1521838136318:# Parse command line arguments
1521838136319:command.line = FALSE   # Turn to FALSE to test the script inside RStudio
1521838136320:argv <- list()
1521838136320:if(command.line) {
1521838136321:argv <- parse_args(p)
1521838136321:} else {
1521838136322:argv <- parse_args(p, list(inputFile,
1521838136323:"--prefix", "kmer_ext_depth",
1521838136324:"--format", "pdf"))
1521838136324:}
1521838136326:# Get argument values from command line
1521838136327:input.file <- argv$input_file
1521838136328:out.format <- argv$format
1521838136328:out.prefix <- argv$prefix
1521838136330:# command.line = TRUE   # Turn to FALSE to test the script inside RStudio
1521838136330:# if(command.line) {
1521838136331:# Get argument values from command line
1521838136331:input.file <- argv$input_file
1521838136332:out.format <- argv$format
1521838136333:out.prefix <- argv$prefix
1521838136334:# } else {
1521838136334:#   # Values to test the script using RStudio
1521838136335:#   script.home = "/home/hspitia/projects/sting"
1521838136336:#   input.file <- paste(script.home, "ext_depth.tsv", sep = "/")
1521838136336:#   out.format <- "pdf"
1521838136337:#   out.prefix <- "~/kmer_ext_depth"
1521838136337:# }
1521838136338:# ################################################################################
1521838136339:CheckFileExists <- function(file.list) {
1521838136339:non.exist.files <- !file.exists(file.list)
1521838136340:if(any(non.exist.files)) {
1521838136340:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1521838136341:}
1521838136341:}
1521838136342:# ################################################################################
1521838136343:# Check for input files
1521838136343:files.to.check <- c(input.file)
1521838136344:error.message  <- CheckFileExists(files.to.check)
1521838136346:if(!is.null(error.message)){
1521838136346:stop(error.message)
1521838136347:} else {
1521838136347:# ========================================================================
1521838136348:# Code core - Begin
1521838136348:# ========================================================================
1521838136349:cat("Plotting depths... ")
1521838136349:options(stringsAsFactors = T)
1521838136350:# Load data
1521838136350:inData <- read.delim(input.file)
1521838136351:# print(head(inData))
1521838136351:# colnames(inData) <- c("Allele", "Position", "k-mer Depth", "Weighted k-mer Depth")
1521838136352:colnames(inData) <- c("N", "Locus", "Allele", "Position", "kmerDepth",
1521838136352:"Norm. count", "Coverage", "MeanKmerDepth")
1521838136353:# inData$BestAllele <- paste0(inData$N, " - ", inData$Allele)
1521838136353:head(inData)
1521838136354:# Order data by Locus and N
1521838136354:inData <- arrange(inData, Locus, N)
1521838136354:inData <- inData %>%
1521838136355:mutate(Allele = factor(Allele, levels = unique(inData$Allele)))
1521838136355:# ==============================================================
1521838136356:plotDepth <- function(data.to.plot, labelsData) {
1521838136356:colourCount = length(unique(data.to.plot$Allele))
1521838136357:getPalette = colorRampPalette(brewer.pal(7, "Set1"))
1521838136357:max.x <- max(data.to.plot$Position)
1521838136358:max.y <- max(data.to.plot$kmerDepth)
1521838136358:x.limits <- seq(0, max.x, 100)
1521838136359:y.limits <- seq(0, max.y, 20)
1521838136359:d.plot <- ggplot(data = data.to.plot, aes(x = Position,
1521838136360:y = kmerDepth),
1521838136361:size = 0.2)
1521838136362:d.plot <- d.plot + geom_area(alpha = 0.6,
1521838136362:aes(color = Allele,
1521838136363:# alpha = N,
1521838136363:fill = Allele
1521838136364:))
1521838136364:# d.plot <- d.plot + scale_fill_hue(l = 40)
1521838136365:# d.plot <- d.plot + scale_color_hue(l = 40)
1521838136365:d.plot <- d.plot + geom_text(data = labelsData,
1521838136366:size = 3,
1521838136366:aes(x = name.x,
1521838136367:y = name.y,
1521838136367:label = Allele),
1521838136368:color = "#333333")
1521838136368:d.plot <- d.plot + geom_text(data = labelsData,
1521838136369:size = 3,
1521838136369:hjust = "left",
1521838136369:aes(x = info.x,
1521838136370:y = info.y,
1521838136370:label = info),
1521838136371:color = "#222222")
1521838136372:# d.plot <- d.plot + geom_text(data = labelsData,
1521838136373:#                              size = 3,
1521838136373:#                              hjust = "left",
1521838136374:#                              aes(x = meanDepth.x,
1521838136374:#                                  y = meanDepth.y,
1521838136375:#                                  label = meanDepth),
1521838136375:#                              color = "#333333")
1521838136376:d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
1521838136376:d.plot <- d.plot + scale_x_discrete(limits = x.limits,
1521838136377:expand = c(0, 2.0))
1521838136378:# d.plot <- d.plot + scale_y_discrete(limits = y.limits,
1521838136378:#                                     expand = c(0, 2))
1521838136379:# if (colourCount > 9) {
1521838136380:# d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
1521838136380:# d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
1521838136381:# } else {
1521838136381:# d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
1521838136382:# d.plot <- d.plot + scale_color_brewer(palette = "Set1")
1521838136383:# }
1521838136383:d.plot <- d.plot + theme_bw()
1521838136384:# d.plot <- d.plot + theme_linedraw()
1521838136384:d.plot <- d.plot + labs(title = "K-mer Depth",
1521838136385:subtitle = basename(input.file),
1521838136386:x     = "Position along sequence (bp)",
1521838136386:y     = "k-mer Depth")
1521838136387:# d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
1521838136388:# color = FALSE)
1521838136388:d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
1521838136389:plot.subtitle = element_text(hjust = 0.5),
1521838136390:axis.text.x = element_text(angle = 50,
1521838136390:vjust = 1,
1521838136391:hjust = 1,
1521838136392:size = 7),
1521838136392:legend.position = "none")
1521838136393:d.plot
1521838136394:}
1521838136395:plotDepthDist <- function(data.to.plot, labelsData) {
1521838136395:dist.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
1521838136396:# dist.plot <- dist.plot + geom_jitter(position = position_jitter(width=.2),
1521838136397:# alpha = 0.4)
1521838136397:dist.plot <- dist.plot + geom_boxplot(alpha = 0.6, size = 0.4, aes(fill = Allele))
1521838136398:dist.plot <- dist.plot + geom_text(data = labelsData,
1521838136399:size = 4,
1521838136400:hjust = "left",
1521838136400:aes(x = (N - 0.5),
1521838136401:y = info.y * 1.05,
1521838136402:label = Allele),
1521838136402:color = "#333333")
1521838136404:dist.plot <- dist.plot + geom_text(data = labelsData,
1521838136404:size = 3,
1521838136405:hjust = "left",
1521838136406:aes(x = (N - 0.4),
1521838136407:y = info.y * 0.08,
1521838136407:label = paste0("sd=",format(round(sd, 1), nsmall = 1))),
1521838136408:color = "#333333")
1521838136410:dist.plot <- dist.plot + geom_point(data = labelsData,
1521838136410:shape = 23, fill = "white",
1521838136411:aes(x = N, y = meanDepth))
1521838136412:dist.plot <- dist.plot + facet_grid(Locus ~ ., scales = "free_y")
1521838136413:dist.plot <- dist.plot + labs(title = "K-mer Depth Distribution",
1521838136414:subtitle = basename(input.file),
1521838136414:x     = "Allele Ranking",
1521838136415:y     = "k-mer Depth")
1521838136416:dist.plot <- dist.plot + theme_bw()
1521838136417:dist.plot <- dist.plot + theme(legend.position = "none",
1521838136418:plot.title = element_text(hjust = 0.5),
1521838136419:plot.subtitle = element_text(hjust = 0.5))
1521838136419:dist.plot
1521838136420:}
1521838136422:getLabelsData <- function(data.to.plot) {
1521838136423:max.x <- max(data.to.plot$Position)
1521838136424:max.y <- max(data.to.plot$kmerDepth)
1521838136425:nLoci    <- length(unique(data.to.plot$Locus))
1521838136426:nAlleles <- length(unique(data.to.plot$N))
1521838136428:alleles     <- unique(data.to.plot$Allele)
1521838136429:loci        <- as.character(unique(data.to.plot$Locus))
1521838136430:lociLabels  <- c()
1521838136431:name.x      <- c()
1521838136432:name.y      <- c()
1521838136433:info.x      <- c()
1521838136434:info.y      <- c()
1521838136435:covs        <- c()
1521838136436:meanDepths  <- c()
1521838136437:meanDepth.x <- c()
1521838136438:meanDepth.y <- c()
1521838136439:for (i in loci) {
1521838136439:lociLabels <- c(lociLabels, rep(i, 3))
1521838136440:}
1521838136441:for (allele in alleles) {
1521838136442:locus       <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1521838136443:# maxPos      <- max(data.to.plot[data.to.plot$Allele == allele, "Position"])
1521838136444:maxPos      <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1521838136445:# maxDepth    <- max(data.to.plot[data.to.plot$Allele == allele, "kmerDepth"])
1521838136446:maxDepth    <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1521838136447:name.x      <- c(name.x, (maxPos / 2))
1521838136448:name.y      <- c(name.y, (maxDepth * 0.2))
1521838136449:info.x      <- c(info.x, max.x * 0.02)
1521838136450:info.y      <- c(info.y, maxDepth * 0.9)
1521838136451:covs        <- c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"]))
1521838136452:meanDepths  <- c(meanDepths, unique(data.to.plot[data.to.plot$Allele == allele, "MeanKmerDepth"]))
1521838136453:# meanDepth.x <- c(meanDepth.x, max.x * 0.30)
1521838136454:# meanDepth.y <- c(meanDepth.y, maxDepth * 0.9)
1521838136456:}
1521838136457:# (labelsData <- data.frame(Allele = alleles, name.x = x, name.y = y))
1521838136458:# data.to.plot <- left_join(data.to.plot, labelsData)
1521838136459:labelsData <- data.frame(Allele = alleles,
1521838136460:name.x = name.x,
1521838136461:name.y = name.y,
1521838136462:info = paste0("cov=", format(round(covs, 1), nsmall = 1), "%  ", paste0("md=", format(round(meanDepths, 1), nsmall = 1))),
1521838136463:info.x = info.x, info.y = info.y,
1521838136464:meanDepth = meanDepths,
1521838136465:# meanDepth.x = meanDepth.x, meanDepth.y = meanDepth.y,
1521838136466:N = rep(unique(data.to.plot$N), nLoci),
1521838136467:Locus = lociLabels) %>%
1521838136469:left_join(inData %>%
1521838136470:group_by(Allele) %>%
1521838136471:summarise(sd = sd(kmerDepth)),
1521838136472:by = c("Allele" = "Allele"))
1521838136473:labelsData
1521838136474:}
1521838136475:# ==============================================================
1521838136476:data.to.plot <- inData
1521838136478:labelsData   <- getLabelsData(data.to.plot)
1521838136480:nLoci    <- length(unique(data.to.plot$Locus))
1521838136481:nAlleles <- length(unique(data.to.plot$N))
1521838136483:hFactor  <- 1.1
1521838136484:wFactor  <- 4
1521838136485:if (nLoci == 1)
1521838136486:hFactor <- 1.8
1521838136488:height       <- nLoci * hFactor
1521838136489:width        <- nAlleles * wFactor
1521838136491:depth.plot   <- plotDepth(data.to.plot, labelsData)
1521838136492:# depth.plot
1521838136495:out.filename <- paste0(out.prefix, ".", out.format)
1521838136496:if (out.format == "png") {
1521838136497:ggsave(filename = out.filename, plot = depth.plot,
1521838136498:width  = width,
1521838136499:height = height,
1521838136500:type = "cairo-png",
1521838136502:dpi = 300)
1521838136503:} else {
1521838136504:ggsave(filename = out.filename, plot = depth.plot,
1521838136505:width  = width,
1521838136506:height = height,
1521838136508:dpi = 400)
1521838136509:}
1521838136510:cat("Done! \n")
1521838136514:hFactor  <- 4
1521838136516:wFactor  <- 2
1521838136517:if (nLoci == 1)
1521838136518:hFactor <- 4.5
1521838136519:height       <- nLoci * hFactor
1521838136521:width        <- nAlleles * wFactor
1521838136523:dist.plot <- plotDepthDist(data.to.plot, labelsData)
1521838136525:# dist.plot
1521838136527:out.filename <- paste0(out.prefix, "_dist.", out.format)
1521838136528:if (out.format == "png") {
1521838136530:ggsave(filename = out.filename, plot = dist.plot,
1521838136531:width  = width,
1521838136532:height = height,
1521838136534:type = "cairo-png",
1521838136535:dpi = 300)
1521838136536:} else {
1521838136538:ggsave(filename = out.filename, plot = dist.plot,
1521838136539:width  = width,
1521838136540:height = height,
1521838136542:dpi = 400)
1521838136543:}
1521838136546:# ========================================================================
1521838136547:# Code core - End
1521838136548:# ========================================================================
1521838136550:}
1521844340197:# Figure 2
1521844340235:# Sources -----------------------------------------------------------------
1521844340235:source("scripts/auxiliary_functions.R")
1521844341138:# Packages ----------------------------------------------------------------
1521844341138:requiredPackages <- c("tidyverse", "rlang", "dendsort", "ggfortify", "ggpubr", "pheatmap",
1521844341138:"RColorBrewer", "vegan", "formatR")
1521844341139:installAndLoadPackages(requiredPackages)
1521844352331:# Loading Data ------------------------------------------------------------
1521844352331:extDataFile <- "data/gt_and_tumaco_samples.otu_table.tsv"
1521844352332:extData     <- read.delim(extDataFile, check.names = FALSE,
1521844352332:stringsAsFactors = F)
1521844352380:extData     <- as_tibble(extData)
1521844352383:attributes(extData)
1521844352408:metadataFile <- "data/metadata.tsv"
1521844352408:metadata     <- read_tsv(metadataFile)
1521844352825:attributes(metadata)
1521844352869:# General configuration ---------------------------------------------------
1521844352870:useOnlyGTSamples <- FALSE
1521844352870:dataGroups   <- c("Coast", "Mountain")
1521844352871:groupVar     <- "Population"
1521844352871:titles       <- c(dataGroups, "General\nProfile")
1521844352871:labels       <- c(y = "Relative Abundance")
1521844352872:nTopElements <- 10
1521844352873:# Preparing data ----------------------------------------------------------
1521844352873:# Get samples sequenced through GT
1521844352873:gtSamples <- metadata %>%
1521844352874:filter(Seq_Origin == "GT1" | Seq_Origin == "GT2") %>%
1521844352874:select(Sample)
1521844352960:tumacoSamples <- metadata %>%
1521844352961:filter(Additional_Sample == 1) %>%
1521844352961:select(Sample)
1521844352998:pull(gtSamples)
1521844353000:pull(tumacoSamples)
1521844353001:# Select samples
1521844353001:if (useOnlyGTSamples) {
1521844353002:# Indices for samples from GT only and Tumaco Additional Samples
1521844353002:samples <- pull(gtSamples)
1521844353002:} else {
1521844353003:# Include Tumaco additional samples
1521844353003:samples <- c(pull(gtSamples), pull(tumacoSamples))
1521844353003:}
1521844353004:# Indices of sample columns
1521844353005:samplesInd <- which(colnames(extData) %in% samples)
1521844353005:# Select metadata
1521844353005:partialMetadata <- metadata %>%
1521844353006:# filter(Included_In_Study == 1) %>%
1521844353006:filter(Sample %in% samples) %>%
1521844353006:select(Sample, Evolution, Population = Residence)
1521844353010:# Add "UNSUPPORTED MAPPING" to blank cells from the taxonomy columns
1521844353010:for(col in c("Class", "Order", "Family", "Genera", "Species")){
1521844353011:extData[extData[[col]] == "", col] = "UNSUPPORTED MAPPING"
1521844353011:}
1521844353017:# Add Reads column: total reads per OTU
1521844353018:extData <- extData %>%
1521844353018:mutate(Reads = rowSums(.[samplesInd]))
1521844353026:# Figure 2: Relative abundance (Family and Class) -------------------------
1521844353026:# Preparing data
1521844353026:# Calculate Relative Abundance per Family
1521844353027:(relAbundance <- extData %>%
1521844353027:group_by(Family) %>%                          # group by Family column
1521844353028:summarise_at(samplesInd, sum) %>%             # compute sum of reads for each Family
1521844353028:mutate_if(is.numeric, funs( . / sum(.))) %>%  # Normalize (rel. abundance)
1521844353028:mutate(TotalAbundance = rowSums(select(., -Family))) %>%
1521844353029:arrange(desc(TotalAbundance))
1521844353029:)
1521844353553:# Get top families by total abundance
1521844353553:top <- relAbundance %>%
1521844353553:top_n(nTopElements, TotalAbundance) %>%
1521844353554:select(-TotalAbundance)
1521844353582:# Group the rest of the families into the family "Others"
1521844353582:rest <- relAbundance %>%
1521844353582:top_n(-(nrow(relAbundance) - nTopElements), TotalAbundance) %>%
1521844353583:gather(Sample, Abundance, -Family) %>%
1521844353583:group_by(Sample) %>%
1521844353583:summarise(Total = sum(Abundance)) %>%
1521844353584:spread(Sample, Total) %>%
1521844353584:mutate(Family = c("Others")) %>%
1521844353584:select(Family, -TotalAbundance, everything()) %>%
1521844353585:select(-TotalAbundance)
1521844353755:# Bind top and rest families into a single table (tibble)
1521844353756:briefRelAbundance <- rbind.data.frame(top, rest)
1521844353758:# Get the order of families by total abundance (originally
1521844353759:# from relAbundance table)
1521844353759:orderedFamilies <- briefRelAbundance$Family
1521844353759:# Get the order of samples by the most abundant family
1521844353760:orderedSamples  <- names(sort(as.vector(as.data.frame(briefRelAbundance[1,-1]))))
1521844353775:# Change the order of Families and Samples
1521844353775:(briefRelAbundance <- briefRelAbundance %>%
1521844353775:gather(Sample, Abundance, -Family) %>%
1521844353776:spread(Family, Abundance) %>%
1521844353776:right_join(partialMetadata) %>%
1521844353776:gather(Family, Abundance, -Sample, -Population, -Evolution) %>%
1521844353777:mutate(Family = factor(Family, levels = rev(orderedFamilies))) %>%
1521844353777:mutate(Sample = factor(Sample, levels = orderedSamples)) # %>%
1521844353777:)
1521844354136:# Visualize colors
1521844354136:pal(rev(palette))
1521844354182:pal(palette)
1521844354235:# Plot Abundance --------------------------------------------------------
1521844354235:dataToPlot <- briefRelAbundance
1521844354236:# ggpubr ------------------------------------------------------------------
1521844354236:ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1521844354237:fill = "Family",               # change fill color by cyl
1521844354237:# color = "white",            # Set bar border colors to white
1521844354237:# palette = "jco",            # jco journal color palett. see ?ggpar
1521844354238:palette = rev(palette[1:(nTopElements+1)]),
1521844354238:# sort.val = "desc",          # Sort the value in dscending order
1521844354238:# sort.by.groups = FALSE,     # Don't sort inside each group
1521844354238:x.text.angle = 50 #, # Rotate vertically x axis texts
1521844354239:# position = "stack"
1521844354239:) +
1521844354239:facet_wrap(~ Evolution, scales = "free_x") +
1521844354240:theme(panel.grid.major = element_blank(),
1521844354240:axis.text.x = element_text(angle = 50, hjust = 1),
1521844354240:strip.background = element_blank(),
1521844354240:panel.border = element_blank()
1521844354241:)
1521844360555:# Figure 2
1521844360556:# Sources -----------------------------------------------------------------
1521844360557:source("scripts/auxiliary_functions.R")
1521844360588:# Packages ----------------------------------------------------------------
1521844360589:requiredPackages <- c("tidyverse", "rlang", "dendsort", "ggfortify", "ggpubr", "pheatmap",
1521844360590:"RColorBrewer", "vegan", "formatR")
1521844360591:installAndLoadPackages(requiredPackages)
1521844360597:# Loading Data ------------------------------------------------------------
1521844360598:extDataFile <- "data/gt_and_tumaco_samples.otu_table.tsv"
1521844360598:extData     <- read.delim(extDataFile, check.names = FALSE,
1521844360599:stringsAsFactors = F)
1521844360652:extData     <- as_tibble(extData)
1521844360654:attributes(extData)
1521844360684:metadataFile <- "data/metadata.tsv"
1521844360685:metadata     <- read_tsv(metadataFile)
1521844360798:attributes(metadata)
1521844360808:# General configuration ---------------------------------------------------
1521844360808:useOnlyGTSamples <- FALSE
1521844360809:dataGroups   <- c("Coast", "Mountain")
1521844360809:groupVar     <- "Population"
1521844360810:titles       <- c(dataGroups, "General\nProfile")
1521844360810:labels       <- c(y = "Relative Abundance")
1521844360811:nTopElements <- 10
1521844360811:# Preparing data ----------------------------------------------------------
1521844360812:# Get samples sequenced through GT
1521844360812:gtSamples <- metadata %>%
1521844360812:filter(Seq_Origin == "GT1" | Seq_Origin == "GT2") %>%
1521844360813:select(Sample)
1521844360817:tumacoSamples <- metadata %>%
1521844360817:filter(Additional_Sample == 1) %>%
1521844360818:select(Sample)
1521844360821:pull(gtSamples)
1521844360823:pull(tumacoSamples)
1521844360824:# Select samples
1521844360825:if (useOnlyGTSamples) {
1521844360825:# Indices for samples from GT only and Tumaco Additional Samples
1521844360825:samples <- pull(gtSamples)
1521844360825:} else {
1521844360826:# Include Tumaco additional samples
1521844360826:samples <- c(pull(gtSamples), pull(tumacoSamples))
1521844360826:}
1521844360827:# Indices of sample columns
1521844360828:samplesInd <- which(colnames(extData) %in% samples)
1521844360828:# Select metadata
1521844360829:partialMetadata <- metadata %>%
1521844360829:# filter(Included_In_Study == 1) %>%
1521844360830:filter(Sample %in% samples) %>%
1521844360830:select(Sample, Evolution, Population = Residence)
1521844360835:# Add "UNSUPPORTED MAPPING" to blank cells from the taxonomy columns
1521844360835:for(col in c("Class", "Order", "Family", "Genera", "Species")){
1521844360835:extData[extData[[col]] == "", col] = "UNSUPPORTED MAPPING"
1521844360836:}
1521844360845:# Add Reads column: total reads per OTU
1521844360845:extData <- extData %>%
1521844360846:mutate(Reads = rowSums(.[samplesInd]))
1521844360851:# Figure 2: Relative abundance (Family and Class) -------------------------
1521844360851:# Preparing data
1521844360852:# Calculate Relative Abundance per Family
1521844360852:(relAbundance <- extData %>%
1521844360852:group_by(Family) %>%                          # group by Family column
1521844360853:summarise_at(samplesInd, sum) %>%             # compute sum of reads for each Family
1521844360853:mutate_if(is.numeric, funs( . / sum(.))) %>%  # Normalize (rel. abundance)
1521844360853:mutate(TotalAbundance = rowSums(select(., -Family))) %>%
1521844360854:arrange(desc(TotalAbundance))
1521844360854:)
1521844361078:# Get top families by total abundance
1521844361078:top <- relAbundance %>%
1521844361079:top_n(nTopElements, TotalAbundance) %>%
1521844361079:select(-TotalAbundance)
1521844361083:# Group the rest of the families into the family "Others"
1521844361084:rest <- relAbundance %>%
1521844361084:top_n(-(nrow(relAbundance) - nTopElements), TotalAbundance) %>%
1521844361084:gather(Sample, Abundance, -Family) %>%
1521844361084:group_by(Sample) %>%
1521844361085:summarise(Total = sum(Abundance)) %>%
1521844361085:spread(Sample, Total) %>%
1521844361085:mutate(Family = c("Others")) %>%
1521844361086:select(Family, -TotalAbundance, everything()) %>%
1521844361086:select(-TotalAbundance)
1521844361105:# Bind top and rest families into a single table (tibble)
1521844361106:briefRelAbundance <- rbind.data.frame(top, rest)
1521844361107:# Get the order of families by total abundance (originally
1521844361108:# from relAbundance table)
1521844361108:orderedFamilies <- briefRelAbundance$Family
1521844361109:# Get the order of samples by the most abundant family
1521844361109:orderedSamples  <- names(sort(as.vector(as.data.frame(briefRelAbundance[1,-1]))))
1521844361111:# Change the order of Families and Samples
1521844361111:(briefRelAbundance <- briefRelAbundance %>%
1521844361111:gather(Sample, Abundance, -Family) %>%
1521844361112:spread(Family, Abundance) %>%
1521844361112:right_join(partialMetadata) %>%
1521844361112:gather(Family, Abundance, -Sample, -Population, -Evolution) %>%
1521844361113:mutate(Family = factor(Family, levels = rev(orderedFamilies))) %>%
1521844361113:mutate(Sample = factor(Sample, levels = orderedSamples)) # %>%
1521844361113:)
1521844361190:# Visualize colors
1521844361190:pal(rev(palette))
1521844361194:pal(palette)
1521844361211:# Plot Abundance --------------------------------------------------------
1521844361211:dataToPlot <- briefRelAbundance
1521844361212:# ggpubr ------------------------------------------------------------------
1521844361212:ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1521844361212:fill = "Family",               # change fill color by cyl
1521844361213:# color = "white",            # Set bar border colors to white
1521844361213:# palette = "jco",            # jco journal color palett. see ?ggpar
1521844361213:palette = rev(palette[1:(nTopElements+1)]),
1521844361214:# sort.val = "desc",          # Sort the value in dscending order
1521844361214:# sort.by.groups = FALSE,     # Don't sort inside each group
1521844361214:x.text.angle = 50 #, # Rotate vertically x axis texts
1521844361215:# position = "stack"
1521844361215:) +
1521844361215:facet_wrap(~ Evolution, scales = "free_x") +
1521844361215:theme(panel.grid.major = element_blank(),
1521844361216:axis.text.x = element_text(angle = 50, hjust = 1),
1521844361216:strip.background = element_blank(),
1521844361216:panel.border = element_blank()
1521844361217:)
1521844451906:ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1521844451907:fill = "Family",               # change fill color by cyl
1521844451908:# color = "white",            # Set bar border colors to white
1521844451909:# palette = "jco",            # jco journal color palett. see ?ggpar
1521844451910:palette = rev(palette[1:(nTopElements+1)]),
1521844451910:# sort.val = "desc",          # Sort the value in dscending order
1521844451911:# sort.by.groups = FALSE,     # Don't sort inside each group
1521844451912:x.text.angle = 50 #, # Rotate vertically x axis texts
1521844451912:# position = "stack"
1521844451913:) +
1521844451914:facet_wrap(~ Population, scales = "free_x") +
1521844451914:theme(panel.grid.major = element_blank(),
1521844451915:axis.text.x = element_text(angle = 50, hjust = 1),
1521844451915:strip.background = element_blank(),
1521844451916:panel.border = element_blank()
1521844451916:)
1521844507693:# ggplot2 -----------------------------------------------------------------
1521844507694:# Base variables
1521844507694:width        <- 8
1521844507695:lineSize     <- 0.5
1521844507697:baseTextSize <- 14
1521844507697:height       <- width * 0.618
1521844507698:axisColor    <- "#333333"
1521844507700:gridColor    <- "#cccccc"
1521844507701:textColor    <- "#333333"
1521844507702:# Generate plot 1: Coast
1521844507703:dGroup <- 1
1521844507704:dataToPlot <- briefRelAbundance %>% filter(Population == dataGroups[dGroup])
1521844507707:pGroup1    <- ggplot(dataToPlot, aes(x = Sample, y = Abundance))
1521844507709:pGroup1    <- pGroup1 + geom_bar(stat = "identity", position = "stack",
1521844507710:aes(fill = Family)
1521844507710:# , alpha = 0.95,
1521844507711:, width = 0.8
1521844507711:, color = "#000000"
1521844507712:, size = 0.2
1521844507712:)
1521844507717:pGroup1 <- pGroup1 + scale_fill_manual(values = rev(palette[1:(nTopElements+1)]))
1521844507718:pGroup1 <- pGroup1 + scale_y_continuous(expand = c(0, 0))
1521844507720:pGroup1 <- pGroup1 + customTheme
1521844507721:pGroup1 <- pGroup1 + labs(title = titles[dGroup], y = labels["y"], x = "")
1521844507724:pGroup1 <- pGroup1 + theme(axis.line.x  = element_blank(),
1521844507724:axis.text.x  = element_text(angle = 50, hjust = 1),
1521844507725:axis.ticks.x = element_blank(),
1521844507725:strip.background = element_blank(),
1521844507726:strip.text.x = element_text(margin = margin(0.2,0,0.8,0, "cm"),
1521844507727:size = baseTextSize * 1.025),
1521844507727:panel.spacing    = unit(2, "lines"))
1521844507731:pGroup1
1521844522112:# Sources -----------------------------------------------------------------
1521844522113:source("scripts/auxiliary_functions.R")
1521844530317:# Packages ----------------------------------------------------------------
1521844530318:requiredPackages <- c("tidyverse", "rlang", "dendsort", "ggfortify", "ggpubr", "pheatmap",
1521844530320:"RColorBrewer", "vegan", "formatR")
1521844530321:installAndLoadPackages(requiredPackages)
1521844530330:# Loading Data ------------------------------------------------------------
1521844530332:extDataFile <- "data/gt_and_tumaco_samples.otu_table.tsv"
1521844530332:extData     <- read.delim(extDataFile, check.names = FALSE,
1521844530333:stringsAsFactors = F)
1521844530387:extData     <- as_tibble(extData)
1521844530389:attributes(extData)
1521844530417:metadataFile <- "data/metadata.tsv"
1521844530418:metadata     <- read_tsv(metadataFile)
1521844530426:attributes(metadata)
1521844530436:# General configuration ---------------------------------------------------
1521844530436:useOnlyGTSamples <- FALSE
1521844530437:dataGroups   <- c("Coast", "Mountain")
1521844530437:groupVar     <- "Population"
1521844530437:titles       <- c(dataGroups, "General\nProfile")
1521844530438:labels       <- c(y = "Relative Abundance")
1521844530438:nTopElements <- 10
1521844530439:# Preparing data ----------------------------------------------------------
1521844530439:# Get samples sequenced through GT
1521844530440:gtSamples <- metadata %>%
1521844530440:filter(Seq_Origin == "GT1" | Seq_Origin == "GT2") %>%
1521844530440:select(Sample)
1521844530444:tumacoSamples <- metadata %>%
1521844530444:filter(Additional_Sample == 1) %>%
1521844530444:select(Sample)
1521844530455:pull(gtSamples)
1521844530458:pull(tumacoSamples)
1521844530461:# Select samples
1521844530461:if (useOnlyGTSamples) {
1521844530462:# Indices for samples from GT only and Tumaco Additional Samples
1521844530462:samples <- pull(gtSamples)
1521844530463:} else {
1521844530463:# Include Tumaco additional samples
1521844530464:samples <- c(pull(gtSamples), pull(tumacoSamples))
1521844530464:}
1521844530466:# Indices of sample columns
1521844530466:samplesInd <- which(colnames(extData) %in% samples)
1521844530467:# Select metadata
1521844530468:partialMetadata <- metadata %>%
1521844530468:# filter(Included_In_Study == 1) %>%
1521844530469:filter(Sample %in% samples) %>%
1521844530469:select(Sample, Evolution, Population = Residence)
1521844530474:# Add "UNSUPPORTED MAPPING" to blank cells from the taxonomy columns
1521844530475:for(col in c("Class", "Order", "Family", "Genera", "Species")){
1521844530475:extData[extData[[col]] == "", col] = "UNSUPPORTED MAPPING"
1521844530476:}
1521844530484:# Add Reads column: total reads per OTU
1521844530484:extData <- extData %>%
1521844530484:mutate(Reads = rowSums(.[samplesInd]))
1521844530490:# Figure 2: Relative abundance (Family and Class) -------------------------
1521844530491:# Preparing data
1521844530491:# Calculate Relative Abundance per Family
1521844530491:(relAbundance <- extData %>%
1521844530492:group_by(Family) %>%                          # group by Family column
1521844530492:summarise_at(samplesInd, sum) %>%             # compute sum of reads for each Family
1521844530492:mutate_if(is.numeric, funs( . / sum(.))) %>%  # Normalize (rel. abundance)
1521844530492:mutate(TotalAbundance = rowSums(select(., -Family))) %>%
1521844530493:arrange(desc(TotalAbundance))
1521844530493:)
1521844530771:# Get top families by total abundance
1521844530772:top <- relAbundance %>%
1521844530772:top_n(nTopElements, TotalAbundance) %>%
1521844530772:select(-TotalAbundance)
1521844530777:# Group the rest of the families into the family "Others"
1521844530777:rest <- relAbundance %>%
1521844530778:top_n(-(nrow(relAbundance) - nTopElements), TotalAbundance) %>%
1521844530778:gather(Sample, Abundance, -Family) %>%
1521844530778:group_by(Sample) %>%
1521844530779:summarise(Total = sum(Abundance)) %>%
1521844530779:spread(Sample, Total) %>%
1521844530780:mutate(Family = c("Others")) %>%
1521844530780:select(Family, -TotalAbundance, everything()) %>%
1521844530781:select(-TotalAbundance)
1521844530805:# Bind top and rest families into a single table (tibble)
1521844530805:briefRelAbundance <- rbind.data.frame(top, rest)
1521844530807:# Get the order of families by total abundance (originally
1521844530807:# from relAbundance table)
1521844530807:orderedFamilies <- briefRelAbundance$Family
1521844530808:# Get the order of samples by the most abundant family
1521844530808:orderedSamples  <- names(sort(as.vector(as.data.frame(briefRelAbundance[1,-1]))))
1521844530810:# Change the order of Families and Samples
1521844530810:(briefRelAbundance <- briefRelAbundance %>%
1521844530811:gather(Sample, Abundance, -Family) %>%
1521844530811:spread(Family, Abundance) %>%
1521844530811:right_join(partialMetadata) %>%
1521844530811:gather(Family, Abundance, -Sample, -Population, -Evolution) %>%
1521844530812:mutate(Family = factor(Family, levels = rev(orderedFamilies))) %>%
1521844530812:mutate(Sample = factor(Sample, levels = orderedSamples)) # %>%
1521844530812:)
1521844530875:# Visualize colors
1521844530876:pal(rev(palette))
1521844530886:pal(palette)
1521844531137:# Plot Abundance --------------------------------------------------------
1521844531137:dataToPlot <- briefRelAbundance
1521844531138:# ggpubr ------------------------------------------------------------------
1521844531138:ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1521844531138:fill = "Family",               # change fill color by cyl
1521844531139:# color = "white",            # Set bar border colors to white
1521844531139:# palette = "jco",            # jco journal color palett. see ?ggpar
1521844531139:palette = rev(palette[1:(nTopElements+1)]),
1521844531140:# sort.val = "desc",          # Sort the value in dscending order
1521844531140:# sort.by.groups = FALSE,     # Don't sort inside each group
1521844531140:x.text.angle = 50 #, # Rotate vertically x axis texts
1521844531140:# position = "stack"
1521844531141:) +
1521844531141:facet_wrap(~ Population, scales = "free_x") +
1521844531141:theme(panel.grid.major = element_blank(),
1521844531142:axis.text.x = element_text(angle = 50, hjust = 1),
1521844531142:strip.background = element_blank(),
1521844531142:panel.border = element_blank()
1521844531143:)
1521844531748:# ggplot2 -----------------------------------------------------------------
1521844531748:# Base variables
1521844531749:width        <- 8
1521844531749:lineSize     <- 0.5
1521844531750:baseTextSize <- 14
1521844531750:height       <- width * 0.618
1521844531751:axisColor    <- "#333333"
1521844531751:gridColor    <- "#cccccc"
1521844531752:textColor    <- "#333333"
1521844531752:# Generate plot 1: Coast
1521844531753:dGroup <- 1
1521844531753:dataToPlot <- briefRelAbundance %>% filter(Population == dataGroups[dGroup])
1521844531754:pGroup1    <- ggplot(dataToPlot, aes(x = Sample, y = Abundance))
1521844531755:pGroup1    <- pGroup1 + geom_bar(stat = "identity", position = "stack",
1521844531756:aes(fill = Family)
1521844531756:# , alpha = 0.95,
1521844531756:, width = 0.8
1521844531757:, color = "#000000"
1521844531757:, size = 0.2
1521844531757:)
1521844531760:pGroup1 <- pGroup1 + scale_fill_manual(values = rev(palette[1:(nTopElements+1)]))
1521844531761:pGroup1 <- pGroup1 + scale_y_continuous(expand = c(0, 0))
1521844531762:pGroup1 <- pGroup1 + customTheme
1521844531764:pGroup1 <- pGroup1 + labs(title = titles[dGroup], y = labels["y"], x = "")
1521844531766:pGroup1 <- pGroup1 + theme(axis.line.x  = element_blank(),
1521844531766:axis.text.x  = element_text(angle = 50, hjust = 1),
1521844531766:axis.ticks.x = element_blank(),
1521844531767:strip.background = element_blank(),
1521844531767:strip.text.x = element_text(margin = margin(0.2,0,0.8,0, "cm"),
1521844531767:size = baseTextSize * 1.025),
1521844531768:panel.spacing    = unit(2, "lines"))
1521844531770:pGroup1
1521844651524:750 /2
1521844683537:(750 * 0.5) + (750 * 0.25)
1521844819469:0.25/2
1521844823693:(1500 * 0.25) + (1500 * 0.125)
1521844882836:# Figure 2
1521844882838:# Sources -----------------------------------------------------------------
1521844882839:source("scripts/auxiliary_functions.R")
1521844883117:# Packages ----------------------------------------------------------------
1521844883117:requiredPackages <- c("tidyverse", "rlang", "dendsort", "ggfortify", "ggpubr", "pheatmap",
1521844883117:"RColorBrewer", "vegan", "formatR")
1521844883118:installAndLoadPackages(requiredPackages)
1521844885386:# Loading Data ------------------------------------------------------------
1521844885387:extDataFile <- "data/gt_and_tumaco_samples.otu_table.tsv"
1521844885387:extData     <- read.delim(extDataFile, check.names = FALSE,
1521844885388:stringsAsFactors = F)
1521844885436:extData     <- as_tibble(extData)
1521844885440:attributes(extData)
1521844885480:metadataFile <- "data/metadata.tsv"
1521844885480:metadata     <- read_tsv(metadataFile)
1521844885701:attributes(metadata)
1521844885755:# General configuration ---------------------------------------------------
1521844885755:useOnlyGTSamples <- FALSE
1521844885756:dataGroups   <- c("Coast", "Mountain")
1521844885757:groupVar     <- "Population"
1521844885757:titles       <- c(dataGroups, "General\nProfile")
1521844885758:labels       <- c(y = "Relative Abundance")
1521844885758:nTopElements <- 10
1521844885759:# Preparing data ----------------------------------------------------------
1521844885760:# Get samples sequenced through GT
1521844885760:gtSamples <- metadata %>%
1521844885760:filter(Seq_Origin == "GT1" | Seq_Origin == "GT2") %>%
1521844885760:select(Sample)
1521844885785:tumacoSamples <- metadata %>%
1521844885786:filter(Additional_Sample == 1) %>%
1521844885786:select(Sample)
1521844885848:pull(gtSamples)
1521844885851:pull(tumacoSamples)
1521844885854:# Select samples
1521844885854:if (useOnlyGTSamples) {
1521844885855:# Indices for samples from GT only and Tumaco Additional Samples
1521844885855:samples <- pull(gtSamples)
1521844885856:} else {
1521844885856:# Include Tumaco additional samples
1521844885856:samples <- c(pull(gtSamples), pull(tumacoSamples))
1521844885857:}
1521844885859:# Indices of sample columns
1521844885859:samplesInd <- which(colnames(extData) %in% samples)
1521844885860:# Select metadata
1521844885861:partialMetadata <- metadata %>%
1521844885861:# filter(Included_In_Study == 1) %>%
1521844885862:filter(Sample %in% samples) %>%
1521844885862:select(Sample, Evolution, Population = Residence)
1521844885866:# Add "UNSUPPORTED MAPPING" to blank cells from the taxonomy columns
1521844885866:for(col in c("Class", "Order", "Family", "Genera", "Species")){
1521844885867:extData[extData[[col]] == "", col] = "UNSUPPORTED MAPPING"
1521844885867:}
1521844885878:# Add Reads column: total reads per OTU
1521844885878:extData <- extData %>%
1521844885878:mutate(Reads = rowSums(.[samplesInd]))
1521844885891:# Figure 2: Relative abundance (Family and Class) -------------------------
1521844885892:# Preparing data
1521844885892:# Calculate Relative Abundance per Family
1521844885893:(relAbundance <- extData %>%
1521844885893:group_by(Family) %>%                          # group by Family column
1521844885894:summarise_at(samplesInd, sum) %>%             # compute sum of reads for each Family
1521844885894:mutate_if(is.numeric, funs( . / sum(.))) %>%  # Normalize (rel. abundance)
1521844885895:mutate(TotalAbundance = rowSums(select(., -Family))) %>%
1521844885895:arrange(desc(TotalAbundance))
1521844885896:)
1521844886330:# Get top families by total abundance
1521844886330:top <- relAbundance %>%
1521844886330:top_n(nTopElements, TotalAbundance) %>%
1521844886331:select(-TotalAbundance)
1521844886335:# Group the rest of the families into the family "Others"
1521844886336:rest <- relAbundance %>%
1521844886336:top_n(-(nrow(relAbundance) - nTopElements), TotalAbundance) %>%
1521844886336:gather(Sample, Abundance, -Family) %>%
1521844886337:group_by(Sample) %>%
1521844886337:summarise(Total = sum(Abundance)) %>%
1521844886337:spread(Sample, Total) %>%
1521844886338:mutate(Family = c("Others")) %>%
1521844886338:select(Family, -TotalAbundance, everything()) %>%
1521844886338:select(-TotalAbundance)
1521844886568:# Bind top and rest families into a single table (tibble)
1521844886568:briefRelAbundance <- rbind.data.frame(top, rest)
1521844886570:# Get the order of families by total abundance (originally
1521844886570:# from relAbundance table)
1521844886570:orderedFamilies <- briefRelAbundance$Family
1521844886571:# Get the order of samples by the most abundant family
1521844886571:orderedSamples  <- names(sort(as.vector(as.data.frame(briefRelAbundance[1,-1]))))
1521844886590:# Change the order of Families and Samples
1521844886590:(briefRelAbundance <- briefRelAbundance %>%
1521844886591:gather(Sample, Abundance, -Family) %>%
1521844886591:spread(Family, Abundance) %>%
1521844886591:right_join(partialMetadata) %>%
1521844886591:gather(Family, Abundance, -Sample, -Population, -Evolution) %>%
1521844886592:mutate(Family = factor(Family, levels = rev(orderedFamilies))) %>%
1521844886593:mutate(Sample = factor(Sample, levels = orderedSamples)) # %>%
1521844886593:)
1521844886836:# Visualize colors
1521844886836:pal(rev(palette))
1521844886872:pal(palette)
1521844886893:# Plot Abundance --------------------------------------------------------
1521844886893:dataToPlot <- briefRelAbundance
1521844886894:# ggpubr ------------------------------------------------------------------
1521844886894:ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1521844886895:fill = "Family",               # change fill color by cyl
1521844886895:# color = "white",            # Set bar border colors to white
1521844886895:# palette = "jco",            # jco journal color palett. see ?ggpar
1521844886896:palette = rev(palette[1:(nTopElements+1)]),
1521844886896:# sort.val = "desc",          # Sort the value in dscending order
1521844886896:# sort.by.groups = FALSE,     # Don't sort inside each group
1521844886896:x.text.angle = 50 #, # Rotate vertically x axis texts
1521844886897:# position = "stack"
1521844886897:) +
1521844886897:facet_wrap(~ Population, scales = "free_x") +
1521844886898:theme(panel.grid.major = element_blank(),
1521844886898:axis.text.x = element_text(angle = 50, hjust = 1),
1521844886898:strip.background = element_blank(),
1521844886899:panel.border = element_blank()
1521844886899:)
1521844886900:# ggplot2 -----------------------------------------------------------------
1521844886900:# Base variables
1521844886900:width        <- 8
1521844886901:lineSize     <- 0.5
1521844886901:baseTextSize <- 14
1521844886902:height       <- width * 0.618
1521844886902:axisColor    <- "#333333"
1521844886903:gridColor    <- "#cccccc"
1521844886903:textColor    <- "#333333"
1521844886904:# Generate plot 1: Coast
1521844886904:dGroup <- 1
1521844886905:dataToPlot <- briefRelAbundance %>% filter(Population == dataGroups[dGroup])
1521844886906:pGroup1    <- ggplot(dataToPlot, aes(x = Sample, y = Abundance))
1521844886923:pGroup1    <- pGroup1 + geom_bar(stat = "identity", position = "stack",
1521844886923:aes(fill = Family)
1521844886924:# , alpha = 0.95,
1521844886924:, width = 0.8
1521844886924:, color = "#000000"
1521844886925:, size = 0.2
1521844886925:)
1521844886945:pGroup1 <- pGroup1 + scale_fill_manual(values = rev(palette[1:(nTopElements+1)]))
1521844886947:pGroup1 <- pGroup1 + scale_y_continuous(expand = c(0, 0))
1521844886949:pGroup1 <- pGroup1 + customTheme
1521844886950:pGroup1 <- pGroup1 + labs(title = titles[dGroup], y = labels["y"], x = "")
1521844886951:pGroup1 <- pGroup1 + theme(axis.line.x  = element_blank(),
1521844886952:axis.text.x  = element_text(angle = 50, hjust = 1),
1521844886952:axis.ticks.x = element_blank(),
1521844886952:strip.background = element_blank(),
1521844886952:strip.text.x = element_text(margin = margin(0.2,0,0.8,0, "cm"),
1521844886953:size = baseTextSize * 1.025),
1521844886953:panel.spacing    = unit(2, "lines"))
1521844887052:pGroup1
1521844889792:# Figure 2
1521844889793:# Sources -----------------------------------------------------------------
1521844889794:source("scripts/auxiliary_functions.R")
1521844889806:# Packages ----------------------------------------------------------------
1521844889806:requiredPackages <- c("tidyverse", "rlang", "dendsort", "ggfortify", "ggpubr", "pheatmap",
1521844889807:"RColorBrewer", "vegan", "formatR")
1521844889808:installAndLoadPackages(requiredPackages)
1521844889816:# Loading Data ------------------------------------------------------------
1521844889817:extDataFile <- "data/gt_and_tumaco_samples.otu_table.tsv"
1521844889818:extData     <- read.delim(extDataFile, check.names = FALSE,
1521844889818:stringsAsFactors = F)
1521844889861:extData     <- as_tibble(extData)
1521844889863:attributes(extData)
1521844889890:metadataFile <- "data/metadata.tsv"
1521844889890:metadata     <- read_tsv(metadataFile)
1521844890013:attributes(metadata)
1521844890022:# General configuration ---------------------------------------------------
1521844890023:useOnlyGTSamples <- FALSE
1521844890023:dataGroups   <- c("Coast", "Mountain")
1521844890024:groupVar     <- "Population"
1521844890024:titles       <- c(dataGroups, "General\nProfile")
1521844890025:labels       <- c(y = "Relative Abundance")
1521844890025:nTopElements <- 10
1521844890027:# Preparing data ----------------------------------------------------------
1521844890027:# Get samples sequenced through GT
1521844890028:gtSamples <- metadata %>%
1521844890028:filter(Seq_Origin == "GT1" | Seq_Origin == "GT2") %>%
1521844890028:select(Sample)
1521844890032:tumacoSamples <- metadata %>%
1521844890032:filter(Additional_Sample == 1) %>%
1521844890032:select(Sample)
1521844890040:pull(gtSamples)
1521844890042:pull(tumacoSamples)
1521844890043:# Select samples
1521844890044:if (useOnlyGTSamples) {
1521844890044:# Indices for samples from GT only and Tumaco Additional Samples
1521844890044:samples <- pull(gtSamples)
1521844890045:} else {
1521844890045:# Include Tumaco additional samples
1521844890045:samples <- c(pull(gtSamples), pull(tumacoSamples))
1521844890045:}
1521844890046:# Indices of sample columns
1521844890047:samplesInd <- which(colnames(extData) %in% samples)
1521844890048:# Select metadata
1521844890048:partialMetadata <- metadata %>%
1521844890049:# filter(Included_In_Study == 1) %>%
1521844890049:filter(Sample %in% samples) %>%
1521844890049:select(Sample, Evolution, Population = Residence)
1521844890053:# Add "UNSUPPORTED MAPPING" to blank cells from the taxonomy columns
1521844890053:for(col in c("Class", "Order", "Family", "Genera", "Species")){
1521844890054:extData[extData[[col]] == "", col] = "UNSUPPORTED MAPPING"
1521844890054:}
1521844890059:# Add Reads column: total reads per OTU
1521844890060:extData <- extData %>%
1521844890060:mutate(Reads = rowSums(.[samplesInd]))
1521844890066:# Figure 2: Relative abundance (Family and Class) -------------------------
1521844890066:# Preparing data
1521844890067:# Calculate Relative Abundance per Family
1521844890067:(relAbundance <- extData %>%
1521844890067:group_by(Family) %>%                          # group by Family column
1521844890068:summarise_at(samplesInd, sum) %>%             # compute sum of reads for each Family
1521844890068:mutate_if(is.numeric, funs( . / sum(.))) %>%  # Normalize (rel. abundance)
1521844890068:mutate(TotalAbundance = rowSums(select(., -Family))) %>%
1521844890069:arrange(desc(TotalAbundance))
1521844890069:)
1521844890267:# Get top families by total abundance
1521844890268:top <- relAbundance %>%
1521844890268:top_n(nTopElements, TotalAbundance) %>%
1521844890268:select(-TotalAbundance)
1521844890273:# Group the rest of the families into the family "Others"
1521844890273:rest <- relAbundance %>%
1521844890273:top_n(-(nrow(relAbundance) - nTopElements), TotalAbundance) %>%
1521844890273:gather(Sample, Abundance, -Family) %>%
1521844890274:group_by(Sample) %>%
1521844890274:summarise(Total = sum(Abundance)) %>%
1521844890274:spread(Sample, Total) %>%
1521844890275:mutate(Family = c("Others")) %>%
1521844890275:select(Family, -TotalAbundance, everything()) %>%
1521844890275:select(-TotalAbundance)
1521844890295:# Bind top and rest families into a single table (tibble)
1521844890296:briefRelAbundance <- rbind.data.frame(top, rest)
1521844890298:# Get the order of families by total abundance (originally
1521844890298:# from relAbundance table)
1521844890298:orderedFamilies <- briefRelAbundance$Family
1521844890299:# Get the order of samples by the most abundant family
1521844890299:orderedSamples  <- names(sort(as.vector(as.data.frame(briefRelAbundance[1,-1]))))
1521844890301:# Change the order of Families and Samples
1521844890301:(briefRelAbundance <- briefRelAbundance %>%
1521844890302:gather(Sample, Abundance, -Family) %>%
1521844890302:spread(Family, Abundance) %>%
1521844890302:right_join(partialMetadata) %>%
1521844890303:gather(Family, Abundance, -Sample, -Population, -Evolution) %>%
1521844890303:mutate(Family = factor(Family, levels = rev(orderedFamilies))) %>%
1521844890303:mutate(Sample = factor(Sample, levels = orderedSamples)) # %>%
1521844890304:)
1521844890385:# Visualize colors
1521844890386:pal(rev(palette))
1521844890391:pal(palette)
1521844890409:# Plot Abundance --------------------------------------------------------
1521844890409:dataToPlot <- briefRelAbundance
1521844890410:# ggpubr ------------------------------------------------------------------
1521844890410:ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1521844890410:fill = "Family",               # change fill color by cyl
1521844890411:# color = "white",            # Set bar border colors to white
1521844890411:# palette = "jco",            # jco journal color palett. see ?ggpar
1521844890411:palette = rev(palette[1:(nTopElements+1)]),
1521844890412:# sort.val = "desc",          # Sort the value in dscending order
1521844890412:# sort.by.groups = FALSE,     # Don't sort inside each group
1521844890412:x.text.angle = 50 #, # Rotate vertically x axis texts
1521844890413:# position = "stack"
1521844890413:) +
1521844890413:facet_wrap(~ Population, scales = "free_x") +
1521844890414:theme(panel.grid.major = element_blank(),
1521844890414:axis.text.x = element_text(angle = 50, hjust = 1),
1521844890414:strip.background = element_blank(),
1521844890415:panel.border = element_blank()
1521844890415:)
1521844891860:# ggplot2 -----------------------------------------------------------------
1521844891860:# Base variables
1521844891861:width        <- 8
1521844891861:lineSize     <- 0.5
1521844891862:baseTextSize <- 14
1521844891862:height       <- width * 0.618
1521844891863:axisColor    <- "#333333"
1521844891863:gridColor    <- "#cccccc"
1521844891863:textColor    <- "#333333"
1521844891864:# Generate plot 1: Coast
1521844891864:dGroup <- 1
1521844891865:dataToPlot <- briefRelAbundance %>% filter(Population == dataGroups[dGroup])
1521844891866:pGroup1    <- ggplot(dataToPlot, aes(x = Sample, y = Abundance))
1521844891867:pGroup1    <- pGroup1 + geom_bar(stat = "identity", position = "stack",
1521844891868:aes(fill = Family)
1521844891868:# , alpha = 0.95,
1521844891868:, width = 0.8
1521844891869:, color = "#000000"
1521844891869:, size = 0.2
1521844891869:)
1521844891872:pGroup1 <- pGroup1 + scale_fill_manual(values = rev(palette[1:(nTopElements+1)]))
1521844891873:pGroup1 <- pGroup1 + scale_y_continuous(expand = c(0, 0))
1521844891874:pGroup1 <- pGroup1 + customTheme
1521844891876:pGroup1 <- pGroup1 + labs(title = titles[dGroup], y = labels["y"], x = "")
1521844891877:pGroup1 <- pGroup1 + theme(axis.line.x  = element_blank(),
1521844891878:axis.text.x  = element_text(angle = 50, hjust = 1),
1521844891878:axis.ticks.x = element_blank(),
1521844891878:strip.background = element_blank(),
1521844891879:strip.text.x = element_text(margin = margin(0.2,0,0.8,0, "cm"),
1521844891879:size = baseTextSize * 1.025),
1521844891879:panel.spacing    = unit(2, "lines"))
1521844891882:pGroup1
1521844945689:briefRelAbundance
1521844981064:# Figure 2
1521844981065:# Sources -----------------------------------------------------------------
1521844981065:source("scripts/auxiliary_functions.R")
1521844981807:# Packages ----------------------------------------------------------------
1521844981807:requiredPackages <- c("tidyverse", "rlang", "dendsort", "ggfortify", "ggpubr", "pheatmap",
1521844981809:"RColorBrewer", "vegan", "formatR")
1521844981809:installAndLoadPackages(requiredPackages)
1521844981814:# Loading Data ------------------------------------------------------------
1521844981815:extDataFile <- "data/gt_and_tumaco_samples.otu_table.tsv"
1521844981815:extData     <- read.delim(extDataFile, check.names = FALSE,
1521844981816:stringsAsFactors = F)
1521844981855:extData     <- as_tibble(extData)
1521844981857:attributes(extData)
1521844981882:metadataFile <- "data/metadata.tsv"
1521844981883:metadata     <- read_tsv(metadataFile)
1521844981891:attributes(metadata)
1521844981901:# General configuration ---------------------------------------------------
1521844981902:useOnlyGTSamples <- FALSE
1521844981903:dataGroups   <- c("Coast", "Mountain")
1521844981903:groupVar     <- "Population"
1521844981904:titles       <- c(dataGroups, "General\nProfile")
1521844981904:labels       <- c(y = "Relative Abundance")
1521844981905:nTopElements <- 10
1521844981905:# Preparing data ----------------------------------------------------------
1521844981906:# Get samples sequenced through GT
1521844981906:gtSamples <- metadata %>%
1521844981907:filter(Seq_Origin == "GT1" | Seq_Origin == "GT2") %>%
1521844981907:select(Sample)
1521844981916:tumacoSamples <- metadata %>%
1521844981916:filter(Additional_Sample == 1) %>%
1521844981916:select(Sample)
1521844981920:pull(gtSamples)
1521844981921:pull(tumacoSamples)
1521844981923:# Select samples
1521844981923:if (useOnlyGTSamples) {
1521844981923:# Indices for samples from GT only and Tumaco Additional Samples
1521844981924:samples <- pull(gtSamples)
1521844981924:} else {
1521844981924:# Include Tumaco additional samples
1521844981924:samples <- c(pull(gtSamples), pull(tumacoSamples))
1521844981925:}
1521844981926:# Indices of sample columns
1521844981926:samplesInd <- which(colnames(extData) %in% samples)
1521844981927:# Select metadata
1521844981927:partialMetadata <- metadata %>%
1521844981927:# filter(Included_In_Study == 1) %>%
1521844981928:filter(Sample %in% samples) %>%
1521844981928:select(Sample, Evolution, Population = Residence)
1521844981932:# Add "UNSUPPORTED MAPPING" to blank cells from the taxonomy columns
1521844981932:for(col in c("Class", "Order", "Family", "Genera", "Species")){
1521844981932:extData[extData[[col]] == "", col] = "UNSUPPORTED MAPPING"
1521844981933:}
1521844981938:# Add Reads column: total reads per OTU
1521844981938:extData <- extData %>%
1521844981938:mutate(Reads = rowSums(.[samplesInd]))
1521844981945:# Figure 2: Relative abundance (Family and Class) -------------------------
1521844981945:# Preparing data
1521844981945:# Calculate Relative Abundance per Family
1521844981946:(relAbundance <- extData %>%
1521844981946:group_by(Family) %>%                          # group by Family column
1521844981946:summarise_at(samplesInd, sum) %>%             # compute sum of reads for each Family
1521844981947:mutate_if(is.numeric, funs( . / sum(.))) %>%  # Normalize (rel. abundance)
1521844981947:mutate(TotalAbundance = rowSums(select(., -Family))) %>%
1521844981947:arrange(desc(TotalAbundance))
1521844981948:)
1521844982150:# Get top families by total abundance
1521844982150:top <- relAbundance %>%
1521844982151:top_n(nTopElements, TotalAbundance) %>%
1521844982151:select(-TotalAbundance)
1521844982155:# Group the rest of the families into the family "Others"
1521844982156:rest <- relAbundance %>%
1521844982156:top_n(-(nrow(relAbundance) - nTopElements), TotalAbundance) %>%
1521844982156:gather(Sample, Abundance, -Family) %>%
1521844982156:group_by(Sample) %>%
1521844982157:summarise(Total = sum(Abundance)) %>%
1521844982157:spread(Sample, Total) %>%
1521844982157:mutate(Family = c("Others")) %>%
1521844982158:select(Family, -TotalAbundance, everything()) %>%
1521844982158:select(-TotalAbundance)
1521844982175:# Bind top and rest families into a single table (tibble)
1521844982175:briefRelAbundance <- rbind.data.frame(top, rest)
1521844982177:# Get the order of families by total abundance (originally
1521844982177:# from relAbundance table)
1521844982178:orderedFamilies <- briefRelAbundance$Family
1521844982178:# Get the order of samples by the most abundant family
1521844982179:orderedSamples  <- names(sort(as.vector(as.data.frame(briefRelAbundance[1,-1]))))
1521844982180:# Change the order of Families and Samples
1521844982181:(briefRelAbundance <- briefRelAbundance %>%
1521844982181:gather(Sample, Abundance, -Family) %>%
1521844982181:spread(Family, Abundance) %>%
1521844982182:left_join(partialMetadata) %>%
1521844982182:gather(Family, Abundance, -Sample, -Population, -Evolution) %>%
1521844982182:mutate(Family = factor(Family, levels = rev(orderedFamilies))) %>%
1521844982183:mutate(Sample = factor(Sample, levels = orderedSamples)) # %>%
1521844982183:)
1521844985159:briefRelAbundance
1521845012882:metadata
1521845405475:# Figure 2
1521845405477:# Sources -----------------------------------------------------------------
1521845405478:source("scripts/auxiliary_functions.R")
1521845405489:# Packages ----------------------------------------------------------------
1521845405490:requiredPackages <- c("tidyverse", "rlang", "dendsort", "ggfortify", "ggpubr", "pheatmap",
1521845405491:"RColorBrewer", "vegan", "formatR")
1521845405492:installAndLoadPackages(requiredPackages)
1521845405501:# Loading Data ------------------------------------------------------------
1521845405502:extDataFile <- "data/gt_and_tumaco_samples.otu_table.tsv"
1521845405503:extData     <- read.delim(extDataFile, check.names = FALSE,
1521845405504:stringsAsFactors = F)
1521845405563:extData     <- as_tibble(extData)
1521845405565:attributes(extData)
1521845405599:metadataFile <- "data/metadata.tsv"
1521845405599:metadata     <- read_tsv(metadataFile)
1521845405609:attributes(metadata)
1521845405620:# General configuration ---------------------------------------------------
1521845405621:useOnlyGTSamples <- FALSE
1521845405622:dataGroups   <- c("Coast", "Mountain")
1521845405622:groupVar     <- "Population"
1521845405623:titles       <- c(dataGroups, "General\nProfile")
1521845405623:labels       <- c(y = "Relative Abundance")
1521845405624:nTopElements <- 10
1521845405624:# Preparing data ----------------------------------------------------------
1521845405625:# Get samples sequenced through GT
1521845405625:gtSamples <- metadata %>%
1521845405626:filter(Seq_Origin == "GT1" | Seq_Origin == "GT2") %>%
1521845405626:select(Sample)
1521845405630:tumacoSamples <- metadata %>%
1521845405630:filter(Additional_Sample == 1) %>%
1521845405630:select(Sample)
1521845405634:pull(gtSamples)
1521845405636:pull(tumacoSamples)
1521845405638:# Select samples
1521845405638:if (useOnlyGTSamples) {
1521845405639:# Indices for samples from GT only and Tumaco Additional Samples
1521845405639:samples <- pull(gtSamples)
1521845405639:} else {
1521845405640:# Include Tumaco additional samples
1521845405640:samples <- c(pull(gtSamples), pull(tumacoSamples))
1521845405640:}
1521845405641:# Indices of sample columns
1521845405642:samplesInd <- which(colnames(extData) %in% samples)
1521845407323:# Select metadata
1521845407324:partialMetadata <- metadata %>%
1521845407325:# filter(Included_In_Study == 1) %>%
1521845407325:filter(Sample %in% samples) %>%
1521845407326:select(Sample, Evolution, Population = Residence,
1521845407327:Ae2, Aa1, Aea, Ae1)
1521845412188:# Select metadata
1521845412189:(partialMetadata <- metadata %>%
1521845412189:# filter(Included_In_Study == 1) %>%
1521845412190:filter(Sample %in% samples) %>%
1521845412191:select(Sample, Evolution, Population = Residence,
1521845412191:Ae2, Aa1, Aea, Ae1))
1521845422320:# Add "UNSUPPORTED MAPPING" to blank cells from the taxonomy columns
1521845422320:for(col in c("Class", "Order", "Family", "Genera", "Species")){
1521845422321:extData[extData[[col]] == "", col] = "UNSUPPORTED MAPPING"
1521845422322:}
1521845422328:# Add Reads column: total reads per OTU
1521845422329:extData <- extData %>%
1521845422329:mutate(Reads = rowSums(.[samplesInd]))
1521845422335:# Figure 2: Relative abundance (Family and Class) -------------------------
1521845422336:# Preparing data
1521845422336:# Calculate Relative Abundance per Family
1521845422337:(relAbundance <- extData %>%
1521845422337:group_by(Family) %>%                          # group by Family column
1521845422337:summarise_at(samplesInd, sum) %>%             # compute sum of reads for each Family
1521845422338:mutate_if(is.numeric, funs( . / sum(.))) %>%  # Normalize (rel. abundance)
1521845422338:mutate(TotalAbundance = rowSums(select(., -Family))) %>%
1521845422338:arrange(desc(TotalAbundance))
1521845422339:)
1521845433040:top <- relAbundance %>%
1521845433041:top_n(nTopElements, TotalAbundance) %>%
1521845433042:select(-TotalAbundance)
1521845433051:# Group the rest of the families into the family "Others"
1521845433052:rest <- relAbundance %>%
1521845433053:top_n(-(nrow(relAbundance) - nTopElements), TotalAbundance) %>%
1521845433054:gather(Sample, Abundance, -Family) %>%
1521845433054:group_by(Sample) %>%
1521845433055:summarise(Total = sum(Abundance)) %>%
1521845433056:spread(Sample, Total) %>%
1521845433057:mutate(Family = c("Others")) %>%
1521845433057:select(Family, -TotalAbundance, everything()) %>%
1521845433058:select(-TotalAbundance)
1521845433097:# Bind top and rest families into a single table (tibble)
1521845433097:briefRelAbundance <- rbind.data.frame(top, rest)
1521845433100:# Get the order of families by total abundance (originally
1521845433100:# from relAbundance table)
1521845433101:orderedFamilies <- briefRelAbundance$Family
1521845433102:# Get the order of samples by the most abundant family
1521845433102:orderedSamples  <- names(sort(as.vector(as.data.frame(briefRelAbundance[1,-1]))))
1521845433104:# Change the order of Families and Samples
1521845433105:(briefRelAbundance <- briefRelAbundance %>%
1521845433105:gather(Sample, Abundance, -Family) %>%
1521845433106:spread(Family, Abundance) %>%
1521845433106:left_join(partialMetadata) %>%
1521845433107:gather(Family, Abundance, -Sample, -Population, -Evolution) %>%
1521845433107:mutate(Family = factor(Family, levels = rev(orderedFamilies))) %>%
1521845433108:mutate(Sample = factor(Sample, levels = orderedSamples)) # %>%
1521845433108:)
1521845495810:# Figure 2
1521845495811:# Sources -----------------------------------------------------------------
1521845495812:source("scripts/auxiliary_functions.R")
1521845495818:# Packages ----------------------------------------------------------------
1521845495819:requiredPackages <- c("tidyverse", "rlang", "dendsort", "ggfortify", "ggpubr", "pheatmap",
1521845495819:"RColorBrewer", "vegan", "formatR")
1521845495820:installAndLoadPackages(requiredPackages)
1521845495825:# Loading Data ------------------------------------------------------------
1521845495826:extDataFile <- "data/gt_and_tumaco_samples.otu_table.tsv"
1521845495826:extData     <- read.delim(extDataFile, check.names = FALSE,
1521845495827:stringsAsFactors = F)
1521845495870:extData     <- as_tibble(extData)
1521845495873:attributes(extData)
1521845495902:metadataFile <- "data/metadata.tsv"
1521845495903:metadata     <- read_tsv(metadataFile)
1521845495912:attributes(metadata)
1521845495921:# General configuration ---------------------------------------------------
1521845495922:useOnlyGTSamples <- FALSE
1521845495923:dataGroups   <- c("Coast", "Mountain")
1521845495924:groupVar     <- "Population"
1521845495924:titles       <- c(dataGroups, "General\nProfile")
1521845495925:labels       <- c(y = "Relative Abundance")
1521845495925:nTopElements <- 10
1521845495926:# Preparing data ----------------------------------------------------------
1521845495926:# Get samples sequenced through GT
1521845495927:gtSamples <- metadata %>%
1521845495927:filter(Seq_Origin == "GT1" | Seq_Origin == "GT2") %>%
1521845495927:select(Sample)
1521845495931:tumacoSamples <- metadata %>%
1521845495931:filter(Additional_Sample == 1) %>%
1521845495931:select(Sample)
1521845495935:pull(gtSamples)
1521845495937:pull(tumacoSamples)
1521845495939:# Select samples
1521845495939:if (useOnlyGTSamples) {
1521845495940:# Indices for samples from GT only and Tumaco Additional Samples
1521845495940:samples <- pull(gtSamples)
1521845495940:} else {
1521845495940:# Include Tumaco additional samples
1521845495941:samples <- c(pull(gtSamples), pull(tumacoSamples))
1521845495941:}
1521845495942:# Indices of sample columns
1521845495943:samplesInd <- which(colnames(extData) %in% samples)
1521845495944:# Select metadata
1521845495944:(partialMetadata <- metadata %>%
1521845495945:# filter(Included_In_Study == 1) %>%
1521845495945:filter(Sample %in% samples) %>%
1521845495945:select(Sample, Evolution, Population = Residence,
1521845495946:Ae2, Aa1, Aea, Ae1))
1521845496033:# Add "UNSUPPORTED MAPPING" to blank cells from the taxonomy columns
1521845496033:for(col in c("Class", "Order", "Family", "Genera", "Species")){
1521845496033:extData[extData[[col]] == "", col] = "UNSUPPORTED MAPPING"
1521845496034:}
1521845496039:# Add Reads column: total reads per OTU
1521845496039:extData <- extData %>%
1521845496040:mutate(Reads = rowSums(.[samplesInd]))
1521845496046:# Figure 2: Relative abundance (Family and Class) -------------------------
1521845496046:# Preparing data
1521845496047:# Calculate Relative Abundance per Family
1521845496047:(relAbundance <- extData %>%
1521845496047:group_by(Family) %>%                          # group by Family column
1521845496048:summarise_at(samplesInd, sum) %>%             # compute sum of reads for each Family
1521845496048:mutate_if(is.numeric, funs( . / sum(.))) %>%  # Normalize (rel. abundance)
1521845496048:mutate(TotalAbundance = rowSums(select(., -Family))) %>%
1521845496049:arrange(desc(TotalAbundance))
1521845496049:)
1521845496248:# Get top families by total abundance
1521845496248:top <- relAbundance %>%
1521845496248:top_n(nTopElements, TotalAbundance) %>%
1521845496249:select(-TotalAbundance)
1521845496253:# Group the rest of the families into the family "Others"
1521845496254:rest <- relAbundance %>%
1521845496254:top_n(-(nrow(relAbundance) - nTopElements), TotalAbundance) %>%
1521845496254:gather(Sample, Abundance, -Family) %>%
1521845496255:group_by(Sample) %>%
1521845496255:summarise(Total = sum(Abundance)) %>%
1521845496255:spread(Sample, Total) %>%
1521845496256:mutate(Family = c("Others")) %>%
1521845496256:select(Family, -TotalAbundance, everything()) %>%
1521845496256:select(-TotalAbundance)
1521845496274:# Bind top and rest families into a single table (tibble)
1521845496275:briefRelAbundance <- rbind.data.frame(top, rest)
1521845496276:# Get the order of families by total abundance (originally
1521845496277:# from relAbundance table)
1521845496277:orderedFamilies <- briefRelAbundance$Family
1521845496278:# Get the order of samples by the most abundant family
1521845496278:orderedSamples  <- names(sort(as.vector(as.data.frame(briefRelAbundance[1,-1]))))
1521845500920:briefRelAbundance %>%
1521845500921:gather(Sample, Abundance, -Family) %>%
1521845500922:spread(Family, Abundance) %>%
1521845500923:left_join(partialMetadata)
1521845549177:briefRelAbundance %>%
1521845549177:gather(Sample, Abundance, -Family) %>%
1521845549178:spread(Family, Abundance) %>%
1521845549179:left_join(partialMetadata) %>%
1521845549179:gather(Family, Abundance, -Sample, -Population, -Evolution,
1521845549180:-Ae2, -Aa1, -Aea, -Ae1)
1521845690471:# Figure 2
1521845690472:# Sources -----------------------------------------------------------------
1521845690472:source("scripts/auxiliary_functions.R")
1521845690477:# Packages ----------------------------------------------------------------
1521845690478:requiredPackages <- c("tidyverse", "rlang", "dendsort", "ggfortify", "ggpubr", "pheatmap",
1521845690478:"RColorBrewer", "vegan", "formatR")
1521845690479:installAndLoadPackages(requiredPackages)
1521845690484:# Loading Data ------------------------------------------------------------
1521845690485:extDataFile <- "data/gt_and_tumaco_samples.otu_table.tsv"
1521845690485:extData     <- read.delim(extDataFile, check.names = FALSE,
1521845690486:stringsAsFactors = F)
1521845690536:extData     <- as_tibble(extData)
1521845690539:attributes(extData)
1521845690566:metadataFile <- "data/metadata.tsv"
1521845690566:metadata     <- read_tsv(metadataFile)
1521845690578:attributes(metadata)
1521845690590:# General configuration ---------------------------------------------------
1521845690591:useOnlyGTSamples <- FALSE
1521845690591:dataGroups   <- c("Coast", "Mountain")
1521845690592:groupVar     <- "Population"
1521845690592:titles       <- c(dataGroups, "General\nProfile")
1521845690593:labels       <- c(y = "Relative Abundance")
1521845690593:nTopElements <- 10
1521845690594:# Preparing data ----------------------------------------------------------
1521845690594:# Get samples sequenced through GT
1521845690595:gtSamples <- metadata %>%
1521845690595:filter(Seq_Origin == "GT1" | Seq_Origin == "GT2") %>%
1521845690596:select(Sample)
1521845690600:tumacoSamples <- metadata %>%
1521845690600:filter(Additional_Sample == 1) %>%
1521845690601:select(Sample)
1521845690604:pull(gtSamples)
1521845690606:pull(tumacoSamples)
1521845690608:# Select samples
1521845690608:if (useOnlyGTSamples) {
1521845690609:# Indices for samples from GT only and Tumaco Additional Samples
1521845690609:samples <- pull(gtSamples)
1521845690609:} else {
1521845690610:# Include Tumaco additional samples
1521845690610:samples <- c(pull(gtSamples), pull(tumacoSamples))
1521845690610:}
1521845690611:# Indices of sample columns
1521845690612:samplesInd <- which(colnames(extData) %in% samples)
1521845690612:# Select metadata
1521845690613:(partialMetadata <- metadata %>%
1521845690613:# filter(Included_In_Study == 1) %>%
1521845690613:filter(Sample %in% samples) %>%
1521845690614:select(Sample, Evolution, Population = Residence,
1521845690614:Ae2, Aa1, Aea, Ae1))
1521845690706:# Add "UNSUPPORTED MAPPING" to blank cells from the taxonomy columns
1521845690706:for(col in c("Class", "Order", "Family", "Genera", "Species")){
1521845690707:extData[extData[[col]] == "", col] = "UNSUPPORTED MAPPING"
1521845690707:}
1521845690713:# Add Reads column: total reads per OTU
1521845690713:extData <- extData %>%
1521845690714:mutate(Reads = rowSums(.[samplesInd]))
1521845690720:# Figure 2: Relative abundance (Family and Class) -------------------------
1521845690721:# Preparing data
1521845690721:# Calculate Relative Abundance per Family
1521845690721:(relAbundance <- extData %>%
1521845690722:group_by(Family) %>%                          # group by Family column
1521845690722:summarise_at(samplesInd, sum) %>%             # compute sum of reads for each Family
1521845690722:mutate_if(is.numeric, funs( . / sum(.))) %>%  # Normalize (rel. abundance)
1521845690723:mutate(TotalAbundance = rowSums(select(., -Family))) %>%
1521845690723:arrange(desc(TotalAbundance))
1521845690723:)
1521845690933:# Get top families by total abundance
1521845690933:top <- relAbundance %>%
1521845690933:top_n(nTopElements, TotalAbundance) %>%
1521845690934:select(-TotalAbundance)
1521845690938:# Group the rest of the families into the family "Others"
1521845690938:rest <- relAbundance %>%
1521845690938:top_n(-(nrow(relAbundance) - nTopElements), TotalAbundance) %>%
1521845690939:gather(Sample, Abundance, -Family) %>%
1521845690939:group_by(Sample) %>%
1521845690939:summarise(Total = sum(Abundance)) %>%
1521845690940:spread(Sample, Total) %>%
1521845690940:mutate(Family = c("Others")) %>%
1521845690940:select(Family, -TotalAbundance, everything()) %>%
1521845690941:select(-TotalAbundance)
1521845690959:# Bind top and rest families into a single table (tibble)
1521845690959:briefRelAbundance <- rbind.data.frame(top, rest)
1521845690961:# Get the order of families by total abundance (originally
1521845690961:# from relAbundance table)
1521845690962:orderedFamilies <- briefRelAbundance$Family
1521845690962:# Get the order of samples by the most abundant family
1521845690962:orderedSamples  <- names(sort(as.vector(as.data.frame(briefRelAbundance[1,-1]))))
1521845693399:briefRelAbundance
1521845757221:briefRelAbundance %>%
1521845757222:gather(Sample, Abundance, -Family) %>%
1521845757222:spread(Family, Abundance) %>%
1521845757223:left_join(partialMetadata) %>%
1521845757223:gather(Family, Abundance, -Sample, -Population, -Evolution,
1521845757224:-Ae2, -Aa1, -Aea, -Ae1)
1521845785739:briefRelAbundance %>%
1521845785740:gather(Sample, Abundance, -Family) %>%
1521845785741:spread(Family, Abundance) %>%
1521845785741:left_join(partialMetadata) %>%
1521845785742:gather(Family, Abundance, -Sample, -Population, -Evolution,
1521845785743:-Ae2, -Aa1, -Aea, -Ae1) %>%
1521845785744:gather(Ancestry, Proportion, -Sample, -Population, -Evolution,
1521845785745:-Family, -Abundance)
1521845794765:briefRelAbundance %>%
1521845794766:gather(Sample, Abundance, -Family) %>%
1521845794767:spread(Family, Abundance) %>%
1521845794768:left_join(partialMetadata) %>%
1521845794769:gather(Family, Abundance, -Sample, -Population, -Evolution,
1521845794769:-Ae2, -Aa1, -Aea, -Ae1) %>%
1521845794770:gather(Ancestry, Proportion, -Sample, -Population, -Evolution,
1521845794771:-Family, -Abundance)
1521845842220:(briefRelAbundance <- briefRelAbundance %>%
1521845842221:gather(Sample, Abundance, -Family) %>%
1521845842222:spread(Family, Abundance) %>%
1521845842223:left_join(partialMetadata) %>%
1521845842223:gather(Family, Abundance, -Sample, -Population, -Evolution,
1521845842224:-Ae2, -Aa1, -Aea, -Ae1) %>%
1521845842224:gather(Ancestry, Proportion, -Sample, -Population, -Evolution,
1521845842225:-Family, -Abundance) %>%
1521845842226:mutate(Family = factor(Family, levels = rev(orderedFamilies))) %>%
1521845842226:mutate(Sample = factor(Sample, levels = orderedSamples)) # %>%
1521845842227:)
1521845852151:# Figure 2
1521845852152:# Sources -----------------------------------------------------------------
1521845852153:source("scripts/auxiliary_functions.R")
1521845852159:# Packages ----------------------------------------------------------------
1521845852160:requiredPackages <- c("tidyverse", "rlang", "dendsort", "ggfortify", "ggpubr", "pheatmap",
1521845852160:"RColorBrewer", "vegan", "formatR")
1521845852161:installAndLoadPackages(requiredPackages)
1521845852167:# Loading Data ------------------------------------------------------------
1521845852168:extDataFile <- "data/gt_and_tumaco_samples.otu_table.tsv"
1521845852168:extData     <- read.delim(extDataFile, check.names = FALSE,
1521845852169:stringsAsFactors = F)
1521845852227:extData     <- as_tibble(extData)
1521845852230:attributes(extData)
1521845852267:metadataFile <- "data/metadata.tsv"
1521845852268:metadata     <- read_tsv(metadataFile)
1521845852284:attributes(metadata)
1521845852295:# General configuration ---------------------------------------------------
1521845852295:useOnlyGTSamples <- FALSE
1521845852296:dataGroups   <- c("Coast", "Mountain")
1521845852296:groupVar     <- "Population"
1521845852297:titles       <- c(dataGroups, "General\nProfile")
1521845852297:labels       <- c(y = "Relative Abundance")
1521845852298:nTopElements <- 10
1521845852299:# Preparing data ----------------------------------------------------------
1521845852299:# Get samples sequenced through GT
1521845852299:gtSamples <- metadata %>%
1521845852300:filter(Seq_Origin == "GT1" | Seq_Origin == "GT2") %>%
1521845852300:select(Sample)
1521845852304:tumacoSamples <- metadata %>%
1521845852304:filter(Additional_Sample == 1) %>%
1521845852305:select(Sample)
1521845852308:pull(gtSamples)
1521845852311:pull(tumacoSamples)
1521845852313:# Select samples
1521845852313:if (useOnlyGTSamples) {
1521845852314:# Indices for samples from GT only and Tumaco Additional Samples
1521845852314:samples <- pull(gtSamples)
1521845852315:} else {
1521845852316:# Include Tumaco additional samples
1521845852317:samples <- c(pull(gtSamples), pull(tumacoSamples))
1521845852318:}
1521845852320:# Indices of sample columns
1521845852321:samplesInd <- which(colnames(extData) %in% samples)
1521845852322:# Select metadata
1521845852322:(partialMetadata <- metadata %>%
1521845852323:# filter(Included_In_Study == 1) %>%
1521845852323:filter(Sample %in% samples) %>%
1521845852324:select(Sample, Evolution, Population = Residence,
1521845852324:Ae2, Aa1, Aea, Ae1))
1521845852367:# Add "UNSUPPORTED MAPPING" to blank cells from the taxonomy columns
1521845852367:for(col in c("Class", "Order", "Family", "Genera", "Species")){
1521845852368:extData[extData[[col]] == "", col] = "UNSUPPORTED MAPPING"
1521845852368:}
1521845852373:# Add Reads column: total reads per OTU
1521845852374:extData <- extData %>%
1521845852374:mutate(Reads = rowSums(.[samplesInd]))
1521845852380:# Figure 2: Relative abundance (Family and Class) -------------------------
1521845852381:# Preparing data
1521845852381:# Calculate Relative Abundance per Family
1521845852381:(relAbundance <- extData %>%
1521845852382:group_by(Family) %>%                          # group by Family column
1521845852382:summarise_at(samplesInd, sum) %>%             # compute sum of reads for each Family
1521845852382:mutate_if(is.numeric, funs( . / sum(.))) %>%  # Normalize (rel. abundance)
1521845852383:mutate(TotalAbundance = rowSums(select(., -Family))) %>%
1521845852383:arrange(desc(TotalAbundance))
1521845852383:)
1521845852573:# Get top families by total abundance
1521845852573:top <- relAbundance %>%
1521845852574:top_n(nTopElements, TotalAbundance) %>%
1521845852574:select(-TotalAbundance)
1521845852578:# Group the rest of the families into the family "Others"
1521845852579:rest <- relAbundance %>%
1521845852579:top_n(-(nrow(relAbundance) - nTopElements), TotalAbundance) %>%
1521845852579:gather(Sample, Abundance, -Family) %>%
1521845852580:group_by(Sample) %>%
1521845852580:summarise(Total = sum(Abundance)) %>%
1521845852580:spread(Sample, Total) %>%
1521845852581:mutate(Family = c("Others")) %>%
1521845852581:select(Family, -TotalAbundance, everything()) %>%
1521845852581:select(-TotalAbundance)
1521845852601:# Bind top and rest families into a single table (tibble)
1521845852601:briefRelAbundance <- rbind.data.frame(top, rest)
1521845852603:# Get the order of families by total abundance (originally
1521845852604:# from relAbundance table)
1521845852604:orderedFamilies <- briefRelAbundance$Family
1521845852605:# Get the order of samples by the most abundant family
1521845852605:orderedSamples  <- names(sort(as.vector(as.data.frame(briefRelAbundance[1,-1]))))
1521845852607:# Change the order of Families and Samples
1521845852608:(briefRelAbundance <- briefRelAbundance %>%
1521845852608:gather(Sample, Abundance, -Family) %>%
1521845852608:spread(Family, Abundance) %>%
1521845852609:left_join(partialMetadata) %>%
1521845852609:gather(Family, Abundance, -Sample, -Population, -Evolution,
1521845852609:-Ae2, -Aa1, -Aea, -Ae1) %>%
1521845852609:gather(Ancestry, Proportion, -Sample, -Population, -Evolution,
1521845852610:-Family, -Abundance) %>%
1521845852610:mutate(Family = factor(Family, levels = rev(orderedFamilies))) %>%
1521845852611:mutate(Sample = factor(Sample, levels = orderedSamples)) # %>%
1521845852611:)
1521845852656:# Visualize colors
1521845852656:pal(rev(palette))
1521845852663:pal(palette)
1521845852882:# Plot Abundance --------------------------------------------------------
1521845852882:dataToPlot <- briefRelAbundance
1521845852883:# ggpubr ------------------------------------------------------------------
1521845852883:ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1521845852884:fill = "Family",               # change fill color by cyl
1521845852884:# color = "white",            # Set bar border colors to white
1521845852884:# palette = "jco",            # jco journal color palett. see ?ggpar
1521845852885:palette = rev(palette[1:(nTopElements+1)]),
1521845852885:# sort.val = "desc",          # Sort the value in dscending order
1521845852885:# sort.by.groups = FALSE,     # Don't sort inside each group
1521845852886:x.text.angle = 50 #, # Rotate vertically x axis texts
1521845852886:# position = "stack"
1521845852886:) +
1521845852887:facet_wrap(~ Population, scales = "free_x") +
1521845852887:theme(panel.grid.major = element_blank(),
1521845852887:axis.text.x = element_text(angle = 50, hjust = 1),
1521845852887:strip.background = element_blank(),
1521845852888:panel.border = element_blank()
1521845852888:)
1521845892724:ggbarplot(dataToPlot, x = "Sample", y = "Porportion",
1521845892725:fill = "Ancestry",               # change fill color by cyl
1521845892726:# color = "white",            # Set bar border colors to white
1521845892727:# palette = "jco",            # jco journal color palett. see ?ggpar
1521845892727:palette = rev(palette[1:(nTopElements+1)]),
1521845892728:# sort.val = "desc",          # Sort the value in dscending order
1521845892729:# sort.by.groups = FALSE,     # Don't sort inside each group
1521845892730:x.text.angle = 50 #, # Rotate vertically x axis texts
1521845892731:# position = "stack"
1521845892731:) +
1521845892732:facet_wrap(~ Population, scales = "free_x") +
1521845892732:theme(panel.grid.major = element_blank(),
1521845892733:axis.text.x = element_text(angle = 50, hjust = 1),
1521845892733:strip.background = element_blank(),
1521845892734:panel.border = element_blank()
1521845892735:)
1521845902954:ggbarplot(dataToPlot, x = "Sample", y = "Prportion",
1521845902955:fill = "Ancestry",               # change fill color by cyl
1521845902955:# color = "white",            # Set bar border colors to white
1521845902956:# palette = "jco",            # jco journal color palett. see ?ggpar
1521845902957:palette = rev(palette[1:(nTopElements+1)]),
1521845902957:# sort.val = "desc",          # Sort the value in dscending order
1521845902958:# sort.by.groups = FALSE,     # Don't sort inside each group
1521845902958:x.text.angle = 50 #, # Rotate vertically x axis texts
1521845902959:# position = "stack"
1521845902959:) +
1521845902960:facet_wrap(~ Population, scales = "free_x") +
1521845902960:theme(panel.grid.major = element_blank(),
1521845902961:axis.text.x = element_text(angle = 50, hjust = 1),
1521845902962:strip.background = element_blank(),
1521845902962:panel.border = element_blank()
1521845902963:)
1521845910751:dataToPlot
1521845918969:dataToPlot
1521845923963:# ggpubr ------------------------------------------------------------------
1521845923964:ggbarplot(dataToPlot, x = "Sample", y = "Proportion",
1521845923965:fill = "Ancestry",               # change fill color by cyl
1521845923965:# color = "white",            # Set bar border colors to white
1521845923966:# palette = "jco",            # jco journal color palett. see ?ggpar
1521845923966:palette = rev(palette[1:(nTopElements+1)]),
1521845923967:# sort.val = "desc",          # Sort the value in dscending order
1521845923967:# sort.by.groups = FALSE,     # Don't sort inside each group
1521845923968:x.text.angle = 50 #, # Rotate vertically x axis texts
1521845923968:# position = "stack"
1521845923969:) +
1521845923969:facet_wrap(~ Population, scales = "free_x") +
1521845923970:theme(panel.grid.major = element_blank(),
1521845923970:axis.text.x = element_text(angle = 50, hjust = 1),
1521845923971:strip.background = element_blank(),
1521845923971:panel.border = element_blank()
1521845923972:)
1521845965511:ggbarplot(dataToPlot, x = "Sample", y = "Proportion",
1521845965511:fill = "Ancestry",               # change fill color by cyl
1521845965512:# color = "white",            # Set bar border colors to white
1521845965512:# palette = "jco",            # jco journal color palett. see ?ggpar
1521845965513:# palette = rev(palette[1:(nTopElements+1)]),
1521845965514:# sort.val = "desc",          # Sort the value in dscending order
1521845965515:# sort.by.groups = FALSE,     # Don't sort inside each group
1521845965516:x.text.angle = 50 #, # Rotate vertically x axis texts
1521845965516:# position = "stack"
1521845965517:) +
1521845965518:facet_wrap(~ Population, scales = "free_x") +
1521845965519:theme(panel.grid.major = element_blank(),
1521845965520:axis.text.x = element_text(angle = 50, hjust = 1),
1521845965520:strip.background = element_blank(),
1521845965522:panel.border = element_blank()
1521845965522:)
1521846018318:dataToPlot %>% select(Sample, Population, Ancestry, Proportion)
1521846059175:dataToPlot %>% group_by(Sample) %>% select(Sample, Population, Ancestry, Proportion)
1521846117845:# Figure 2
1521846117846:# Sources -----------------------------------------------------------------
1521846117847:source("scripts/auxiliary_functions.R")
1521846117855:# Packages ----------------------------------------------------------------
1521846117855:requiredPackages <- c("tidyverse", "rlang", "dendsort", "ggfortify", "ggpubr", "pheatmap",
1521846117856:"RColorBrewer", "vegan", "formatR")
1521846117858:installAndLoadPackages(requiredPackages)
1521846117865:# Loading Data ------------------------------------------------------------
1521846117866:extDataFile <- "data/gt_and_tumaco_samples.otu_table.tsv"
1521846117867:extData     <- read.delim(extDataFile, check.names = FALSE,
1521846117867:stringsAsFactors = F)
1521846117913:extData     <- as_tibble(extData)
1521846117916:attributes(extData)
1521846117949:metadataFile <- "data/metadata.tsv"
1521846117949:metadata     <- read_tsv(metadataFile)
1521846117968:attributes(metadata)
1521846117983:# General configuration ---------------------------------------------------
1521846117983:useOnlyGTSamples <- FALSE
1521846117984:dataGroups   <- c("Coast", "Mountain")
1521846117984:groupVar     <- "Population"
1521846117985:titles       <- c(dataGroups, "General\nProfile")
1521846117985:labels       <- c(y = "Relative Abundance")
1521846117986:nTopElements <- 10
1521846117987:# Preparing data ----------------------------------------------------------
1521846117987:# Get samples sequenced through GT
1521846117988:gtSamples <- metadata %>%
1521846117988:filter(Seq_Origin == "GT1" | Seq_Origin == "GT2") %>%
1521846117988:select(Sample)
1521846117992:tumacoSamples <- metadata %>%
1521846117992:filter(Additional_Sample == 1) %>%
1521846117993:select(Sample)
1521846117996:pull(gtSamples)
1521846117998:pull(tumacoSamples)
1521846118000:# Select samples
1521846118000:if (useOnlyGTSamples) {
1521846118001:# Indices for samples from GT only and Tumaco Additional Samples
1521846118001:samples <- pull(gtSamples)
1521846118001:} else {
1521846118002:# Include Tumaco additional samples
1521846118002:samples <- c(pull(gtSamples), pull(tumacoSamples))
1521846118002:}
1521846118003:# Indices of sample columns
1521846118004:samplesInd <- which(colnames(extData) %in% samples)
1521846118005:# Select metadata
1521846118005:(partialMetadata <- metadata %>%
1521846118005:# filter(Included_In_Study == 1) %>%
1521846118006:filter(Sample %in% samples) %>%
1521846118006:select(Sample, Evolution, Population = Residence,
1521846118006:Ae2, Aa1, Aea, Ae1))
1521846118053:# Add "UNSUPPORTED MAPPING" to blank cells from the taxonomy columns
1521846118053:for(col in c("Class", "Order", "Family", "Genera", "Species")){
1521846118053:extData[extData[[col]] == "", col] = "UNSUPPORTED MAPPING"
1521846118054:}
1521846118060:# Add Reads column: total reads per OTU
1521846118060:extData <- extData %>%
1521846118060:mutate(Reads = rowSums(.[samplesInd]))
1521846118067:# Figure 2: Relative abundance (Family and Class) -------------------------
1521846118067:# Preparing data
1521846118068:# Calculate Relative Abundance per Family
1521846118068:(relAbundance <- extData %>%
1521846118068:group_by(Family) %>%                          # group by Family column
1521846118069:summarise_at(samplesInd, sum) %>%             # compute sum of reads for each Family
1521846118069:mutate_if(is.numeric, funs( . / sum(.))) %>%  # Normalize (rel. abundance)
1521846118069:mutate(TotalAbundance = rowSums(select(., -Family))) %>%
1521846118070:arrange(desc(TotalAbundance))
1521846118070:)
1521846118285:# Get top families by total abundance
1521846118286:top <- relAbundance %>%
1521846118286:top_n(nTopElements, TotalAbundance) %>%
1521846118286:select(-TotalAbundance)
1521846118291:# Group the rest of the families into the family "Others"
1521846118292:rest <- relAbundance %>%
1521846118292:top_n(-(nrow(relAbundance) - nTopElements), TotalAbundance) %>%
1521846118292:gather(Sample, Abundance, -Family) %>%
1521846118293:group_by(Sample) %>%
1521846118293:summarise(Total = sum(Abundance)) %>%
1521846118293:spread(Sample, Total) %>%
1521846118294:mutate(Family = c("Others")) %>%
1521846118294:select(Family, -TotalAbundance, everything()) %>%
1521846118294:select(-TotalAbundance)
1521846118314:# Bind top and rest families into a single table (tibble)
1521846118314:briefRelAbundance <- rbind.data.frame(top, rest)
1521846118316:# Get the order of families by total abundance (originally
1521846118316:# from relAbundance table)
1521846118316:orderedFamilies <- briefRelAbundance$Family
1521846118317:# Get the order of samples by the most abundant family
1521846118317:orderedSamples  <- names(sort(as.vector(as.data.frame(briefRelAbundance[1,-1]))))
1521846166515:samples
1521846207548:metadata %>%
1521846207548:filter(Sample %in% samples) %>%
1521846207550:select(Sample, Evolution, Population = Residence,
1521846207550:Ae2, Aa1, Aea, Ae1)
1521846213845:metadata %>%
1521846213845:filter(Sample %in% samples) %>%
1521846213846:select(Sample, Evolution, Population = Residence,
1521846213846:Ae2, Aa1, Aea, Ae1)
1521846246774:metadata %>%
1521846246776:filter(Sample %in% samples) %>%
1521846246776:select(Sample, Evolution, Population = Residence,
1521846246777:Ae2, Aa1, Aea, Ae1) %>%
1521846246778:gather(Ancestry, Proportion, -Sample,
1521846246778:-Population, -Evolution)
1521846294016:metadata %>%
1521846294017:filter(Sample %in% samples) %>%
1521846294017:select(Sample, Evolution, Population = Residence,
1521846294018:Ae2, Aa1, Aea, Ae1) %>%
1521846294019:gather(Ancestry, Proportion, -Sample,
1521846294019:-Population, -Evolution) %>%
1521846294020:mutate(Sample = factor(Sample, levels = orderedSamples))
1521846316553:dataToPlot
1521846320847:# Plot Abundance --------------------------------------------------------
1521846320848:dataToPlot <- metadata %>%
1521846320849:filter(Sample %in% samples) %>%
1521846320849:select(Sample, Evolution, Population = Residence,
1521846320850:Ae2, Aa1, Aea, Ae1) %>%
1521846320851:gather(Ancestry, Proportion, -Sample,
1521846320851:-Population, -Evolution) %>%
1521846320852:mutate(Sample = factor(Sample, levels = orderedSamples))
1521846323259:dataToPlot
1521846339885:# ggpubr ------------------------------------------------------------------
1521846339886:ggbarplot(dataToPlot, x = "Sample", y = "Proportion",
1521846339887:fill = "Ancestry",               # change fill color by cyl
1521846339887:# color = "white",            # Set bar border colors to white
1521846339888:# palette = "jco",            # jco journal color palett. see ?ggpar
1521846339888:# palette = rev(palette[1:(nTopElements+1)]),
1521846339889:# sort.val = "desc",          # Sort the value in dscending order
1521846339889:# sort.by.groups = FALSE,     # Don't sort inside each group
1521846339890:x.text.angle = 50 #, # Rotate vertically x axis texts
1521846339890:# position = "stack"
1521846339891:) +
1521846339891:facet_wrap(~ Population, scales = "free_x") +
1521846339892:theme(panel.grid.major = element_blank(),
1521846339892:axis.text.x = element_text(angle = 50, hjust = 1),
1521846339892:strip.background = element_blank(),
1521846339893:panel.border = element_blank()
1521846339893:)
1521846407802:useOnlyGTSamples <- TRUE
1521846407804:dataGroups   <- c("Coast", "Mountain")
1521846407805:groupVar     <- "Population"
1521846407807:titles       <- c(dataGroups, "General\nProfile")
1521846407808:labels       <- c(y = "Relative Abundance")
1521846407809:nTopElements <- 10
1521846407811:# Preparing data ----------------------------------------------------------
1521846407812:# Get samples sequenced through GT
1521846407813:gtSamples <- metadata %>%
1521846407813:filter(Seq_Origin == "GT1" | Seq_Origin == "GT2") %>%
1521846407814:select(Sample)
1521846407821:tumacoSamples <- metadata %>%
1521846407821:filter(Additional_Sample == 1) %>%
1521846407822:select(Sample)
1521846407831:pull(gtSamples)
1521846407836:pull(tumacoSamples)
1521846407840:# Select samples
1521846407841:if (useOnlyGTSamples) {
1521846407842:# Indices for samples from GT only and Tumaco Additional Samples
1521846407842:samples <- pull(gtSamples)
1521846407843:} else {
1521846407844:# Include Tumaco additional samples
1521846407845:samples <- c(pull(gtSamples), pull(tumacoSamples))
1521846407845:}
1521846407848:# Indices of sample columns
1521846407848:samplesInd <- which(colnames(extData) %in% samples)
1521846407850:# Select metadata
1521846407851:(partialMetadata <- metadata %>%
1521846407852:# filter(Included_In_Study == 1) %>%
1521846407852:filter(Sample %in% samples) %>%
1521846407853:select(Sample, Evolution, Population = Residence,
1521846407854:Ae2, Aa1, Aea, Ae1))
1521846408054:# Add "UNSUPPORTED MAPPING" to blank cells from the taxonomy columns
1521846408054:for(col in c("Class", "Order", "Family", "Genera", "Species")){
1521846408055:extData[extData[[col]] == "", col] = "UNSUPPORTED MAPPING"
1521846408055:}
1521846408066:# Add Reads column: total reads per OTU
1521846408066:extData <- extData %>%
1521846408067:mutate(Reads = rowSums(.[samplesInd]))
1521846408082:# Figure 2: Relative abundance (Family and Class) -------------------------
1521846408083:# Preparing data
1521846408083:# Calculate Relative Abundance per Family
1521846408083:(relAbundance <- extData %>%
1521846408084:group_by(Family) %>%                          # group by Family column
1521846408084:summarise_at(samplesInd, sum) %>%             # compute sum of reads for each Family
1521846408084:mutate_if(is.numeric, funs( . / sum(.))) %>%  # Normalize (rel. abundance)
1521846408085:mutate(TotalAbundance = rowSums(select(., -Family))) %>%
1521846408085:arrange(desc(TotalAbundance))
1521846408085:)
1521846408333:# Get top families by total abundance
1521846408334:top <- relAbundance %>%
1521846408334:top_n(nTopElements, TotalAbundance) %>%
1521846408334:select(-TotalAbundance)
1521846408338:# Group the rest of the families into the family "Others"
1521846408338:rest <- relAbundance %>%
1521846408339:top_n(-(nrow(relAbundance) - nTopElements), TotalAbundance) %>%
1521846408339:gather(Sample, Abundance, -Family) %>%
1521846408339:group_by(Sample) %>%
1521846408340:summarise(Total = sum(Abundance)) %>%
1521846408340:spread(Sample, Total) %>%
1521846408340:mutate(Family = c("Others")) %>%
1521846408340:select(Family, -TotalAbundance, everything()) %>%
1521846408341:select(-TotalAbundance)
1521846408363:# Bind top and rest families into a single table (tibble)
1521846408364:briefRelAbundance <- rbind.data.frame(top, rest)
1521846408366:# Get the order of families by total abundance (originally
1521846408367:# from relAbundance table)
1521846408367:orderedFamilies <- briefRelAbundance$Family
1521846408368:# Get the order of samples by the most abundant family
1521846408368:orderedSamples  <- names(sort(as.vector(as.data.frame(briefRelAbundance[1,-1]))))
1521846408371:metadata %>%
1521846408371:filter(Sample %in% samples) %>%
1521846408372:select(Sample, Evolution, Population = Residence,
1521846408372:Ae2, Aa1, Aea, Ae1) %>%
1521846408373:gather(Ancestry, Proportion, -Sample,
1521846408373:-Population, -Evolution) %>%
1521846408374:mutate(Sample = factor(Sample, levels = orderedSamples))
1521846408453:# Visualize colors
1521846408453:pal(rev(palette))
1521846408472:pal(palette)
1521846408661:# Plot Abundance --------------------------------------------------------
1521846408662:dataToPlot <- metadata %>%
1521846408662:filter(Sample %in% samples) %>%
1521846408663:select(Sample, Evolution, Population = Residence,
1521846408663:Ae2, Aa1, Aea, Ae1) %>%
1521846408664:gather(Ancestry, Proportion, -Sample,
1521846408664:-Population, -Evolution) %>%
1521846408665:mutate(Sample = factor(Sample, levels = orderedSamples))
1521846408677:# ggpubr ------------------------------------------------------------------
1521846408678:ggbarplot(dataToPlot, x = "Sample", y = "Proportion",
1521846408678:fill = "Ancestry",               # change fill color by cyl
1521846408679:# color = "white",            # Set bar border colors to white
1521846408679:# palette = "jco",            # jco journal color palett. see ?ggpar
1521846408680:# palette = rev(palette[1:(nTopElements+1)]),
1521846408680:# sort.val = "desc",          # Sort the value in dscending order
1521846408681:# sort.by.groups = FALSE,     # Don't sort inside each group
1521846408681:x.text.angle = 50 #, # Rotate vertically x axis texts
1521846408682:# position = "stack"
1521846408682:) +
1521846408683:facet_wrap(~ Population, scales = "free_x") +
1521846408683:theme(panel.grid.major = element_blank(),
1521846408684:axis.text.x = element_text(angle = 50, hjust = 1),
1521846408684:strip.background = element_blank(),
1521846408685:panel.border = element_blank()
1521846408686:)
1521846630159:# ggpubr ------------------------------------------------------------------
1521846630160:ggbarplot(dataToPlot, x = "Sample", y = "Proportion",
1521846630161:fill = "Ancestry",               # change fill color by cyl
1521846630161:# color = "white",            # Set bar border colors to white
1521846630162:# palette = "jco",            # jco journal color palett. see ?ggpar
1521846630162:# palette = rev(palette[1:(nTopElements+1)]),
1521846630163:# sort.val = "desc",          # Sort the value in dscending order
1521846630164:# sort.by.groups = FALSE,     # Don't sort inside each group
1521846630164:x.text.angle = 50 #, # Rotate vertically x axis texts
1521846630164:# position = "stack"
1521846630165:) +
1521846630165:facet_wrap(~ Population, scales = "free_x", space = "free_x") +
1521846630166:theme(panel.grid.major = element_blank(),
1521846630166:axis.text.x = element_text(angle = 50, hjust = 1),
1521846630166:strip.background = element_blank(),
1521846630167:panel.border = element_blank()
1521846630167:)
1521846663139:# ggpubr ------------------------------------------------------------------
1521846663140:ggbarplot(dataToPlot, x = "Sample", y = "Proportion",
1521846663140:fill = "Ancestry",               # change fill color by cyl
1521846663141:# color = "white",            # Set bar border colors to white
1521846663141:# palette = "jco",            # jco journal color palett. see ?ggpar
1521846663142:# palette = rev(palette[1:(nTopElements+1)]),
1521846663142:# sort.val = "desc",          # Sort the value in dscending order
1521846663143:# sort.by.groups = FALSE,     # Don't sort inside each group
1521846663143:x.text.angle = 50 #, # Rotate vertically x axis texts
1521846663143:# position = "stack"
1521846663144:) +
1521846663144:facet_wrap(~ Population, scales = "free_x", shrink = TRUE) +
1521846663145:theme(panel.grid.major = element_blank(),
1521846663145:axis.text.x = element_text(angle = 50, hjust = 1),
1521846663145:strip.background = element_blank(),
1521846663146:panel.border = element_blank()
1521846663146:)
1521846773136:# ggpubr ------------------------------------------------------------------
1521846773137:ggbarplot(dataToPlot, x = "Sample", y = "Proportion",
1521846773137:fill = "Ancestry",               # change fill color by cyl
1521846773138:# color = "white",            # Set bar border colors to white
1521846773139:# palette = "jco",            # jco journal color palett. see ?ggpar
1521846773139:# palette = rev(palette[1:(nTopElements+1)]),
1521846773140:# sort.val = "desc",          # Sort the value in dscending order
1521846773140:# sort.by.groups = FALSE,     # Don't sort inside each group
1521846773141:x.text.angle = 50 #, # Rotate vertically x axis texts
1521846773142:# position = "stack"
1521846773142:) +
1521846773143:# facet_wrap(~ Population, scales = "free_x", shrink = "free_x") +
1521846773143:facet_grid(~ Population, scales = "free_x", shrink = "free_x") +
1521846773144:theme(panel.grid.major = element_blank(),
1521846773144:axis.text.x = element_text(angle = 50, hjust = 1),
1521846773145:strip.background = element_blank(),
1521846773145:panel.border = element_blank()
1521846773146:)
1521846783245:# ggpubr ------------------------------------------------------------------
1521846783246:ggbarplot(dataToPlot, x = "Sample", y = "Proportion",
1521846783247:fill = "Ancestry",               # change fill color by cyl
1521846783248:# color = "white",            # Set bar border colors to white
1521846783248:# palette = "jco",            # jco journal color palett. see ?ggpar
1521846783249:# palette = rev(palette[1:(nTopElements+1)]),
1521846783249:# sort.val = "desc",          # Sort the value in dscending order
1521846783250:# sort.by.groups = FALSE,     # Don't sort inside each group
1521846783251:x.text.angle = 50 #, # Rotate vertically x axis texts
1521846783252:# position = "stack"
1521846783253:) +
1521846783254:# facet_wrap(~ Population, scales = "free_x", shrink = "free_x") +
1521846783254:facet_grid(. ~ Population, scales = "free_x", shrink = "free_x") +
1521846783255:theme(panel.grid.major = element_blank(),
1521846783256:axis.text.x = element_text(angle = 50, hjust = 1),
1521846783256:strip.background = element_blank(),
1521846783257:panel.border = element_blank()
1521846783257:)
1521846808626:# ggpubr ------------------------------------------------------------------
1521846808627:ggbarplot(dataToPlot, x = "Sample", y = "Proportion",
1521846808627:fill = "Ancestry",               # change fill color by cyl
1521846808628:# color = "white",            # Set bar border colors to white
1521846808628:# palette = "jco",            # jco journal color palett. see ?ggpar
1521846808629:# palette = rev(palette[1:(nTopElements+1)]),
1521846808630:# sort.val = "desc",          # Sort the value in dscending order
1521846808630:# sort.by.groups = FALSE,     # Don't sort inside each group
1521846808631:x.text.angle = 50 #, # Rotate vertically x axis texts
1521846808632:# position = "stack"
1521846808632:) +
1521846808633:# facet_wrap(~ Population, scales = "free_x") +
1521846808633:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1521846808634:theme(panel.grid.major = element_blank(),
1521846808634:axis.text.x = element_text(angle = 50, hjust = 1),
1521846808635:strip.background = element_blank(),
1521846808635:panel.border = element_blank()
1521846808636:)
1521923408302:# Figure 2
1521923408353:# Sources -----------------------------------------------------------------
1521923408353:source("scripts/auxiliary_functions.R")
1521923409354:# Packages ----------------------------------------------------------------
1521923409354:requiredPackages <- c("tidyverse", "rlang", "dendsort", "ggfortify", "ggpubr", "pheatmap",
1521923409354:"RColorBrewer", "vegan", "formatR")
1521923409355:installAndLoadPackages(requiredPackages)
1521923420638:# Loading Data ------------------------------------------------------------
1521923420639:extDataFile <- "data/gt_and_tumaco_samples.otu_table.tsv"
1521923420640:extData     <- read.delim(extDataFile, check.names = FALSE,
1521923420640:stringsAsFactors = F)
1521923420715:extData     <- as_tibble(extData)
1521923420717:attributes(extData)
1521923420746:metadataFile <- "data/metadata.tsv"
1521923420747:metadata     <- read_tsv(metadataFile)
1521923421060:attributes(metadata)
1521923421121:# General configuration ---------------------------------------------------
1521923421122:useOnlyGTSamples <- FALSE
1521923421122:dataGroups   <- c("Coast", "Mountain")
1521923421123:groupVar     <- "Population"
1521923421123:titles       <- c(dataGroups, "General\nProfile")
1521923421124:labels       <- c(y = "Relative Abundance")
1521923421124:nTopElements <- 10
1521923421125:# Preparing data ----------------------------------------------------------
1521923421125:# Get samples sequenced through GT
1521923421126:gtSamples <- metadata %>%
1521923421126:filter(Seq_Origin == "GT1" | Seq_Origin == "GT2") %>%
1521923421126:select(Sample)
1521923421261:tumacoSamples <- metadata %>%
1521923421261:filter(Additional_Sample == 1) %>%
1521923421262:select(Sample)
1521923421293:pull(gtSamples)
1521923421295:pull(tumacoSamples)
1521923421297:# Select samples
1521923421297:if (useOnlyGTSamples) {
1521923421297:# Indices for samples from GT only and Tumaco Additional Samples
1521923421298:samples <- pull(gtSamples)
1521923421298:} else {
1521923421298:# Include Tumaco additional samples
1521923421298:samples <- c(pull(gtSamples), pull(tumacoSamples))
1521923421299:}
1521923421300:# Indices of sample columns
1521923421300:samplesInd <- which(colnames(extData) %in% samples)
1521923421301:# Select metadata
1521923421301:partialMetadata <- metadata %>%
1521923421301:# filter(Included_In_Study == 1) %>%
1521923421301:filter(Sample %in% samples) %>%
1521923421302:select(Sample, Evolution, Population = Residence)
1521923421305:# Add "UNSUPPORTED MAPPING" to blank cells from the taxonomy columns
1521923421306:for(col in c("Class", "Order", "Family", "Genera", "Species")){
1521923421306:extData[extData[[col]] == "", col] = "UNSUPPORTED MAPPING"
1521923421306:}
1521923421313:# Add Reads column: total reads per OTU
1521923421314:extData <- extData %>%
1521923421314:mutate(Reads = rowSums(.[samplesInd]))
1521923421321:# Figure 2: Relative abundance (Family and Class) -------------------------
1521923421322:# Preparing data
1521923421322:# Calculate Relative Abundance per Family
1521923421322:(relAbundance <- extData %>%
1521923421323:group_by(Family) %>%                          # group by Family column
1521923421323:summarise_at(samplesInd, sum) %>%             # compute sum of reads for each Family
1521923421323:mutate_if(is.numeric, funs( . / sum(.))) %>%  # Normalize (rel. abundance)
1521923421324:mutate(TotalAbundance = rowSums(select(., -Family))) %>%
1521923421324:arrange(desc(TotalAbundance))
1521923421324:)
1521923421813:# Get top families by total abundance
1521923421813:top <- relAbundance %>%
1521923421813:top_n(nTopElements, TotalAbundance) %>%
1521923421814:select(-TotalAbundance)
1521923421936:# Group the rest of the families into the family "Others"
1521923421937:rest <- relAbundance %>%
1521923421937:top_n(-(nrow(relAbundance) - nTopElements), TotalAbundance) %>%
1521923421937:gather(Sample, Abundance, -Family) %>%
1521923421938:group_by(Sample) %>%
1521923421938:summarise(Total = sum(Abundance)) %>%
1521923421938:spread(Sample, Total) %>%
1521923421939:mutate(Family = c("Others")) %>%
1521923421939:select(Family, -TotalAbundance, everything()) %>%
1521923421939:select(-TotalAbundance)
1521923422091:# Bind top and rest families into a single table (tibble)
1521923422091:briefRelAbundance <- rbind.data.frame(top, rest)
1521923422093:# Get the order of families by total abundance (originally
1521923422093:# from relAbundance table)
1521923422093:orderedFamilies <- briefRelAbundance$Family
1521923422094:# Get the order of samples by the most abundant family
1521923422094:orderedSamples  <- names(sort(as.vector(as.data.frame(briefRelAbundance[1,-1]))))
1521923422109:# Change the order of Families and Samples
1521923422110:(briefRelAbundance <- briefRelAbundance %>%
1521923422110:gather(Sample, Abundance, -Family) %>%
1521923422110:spread(Family, Abundance) %>%
1521923422111:left_join(partialMetadata) %>%
1521923422111:gather(Family, Abundance, -Sample, -Population, -Evolution) %>%
1521923422111:mutate(Family = factor(Family, levels = rev(orderedFamilies))) %>%
1521923422111:mutate(Sample = factor(Sample, levels = orderedSamples)) # %>%
1521923422112:)
1521923422427:# Visualize colors
1521923422428:pal(rev(palette))
1521923422462:pal(palette)
1521923422505:# Plot Abundance --------------------------------------------------------
1521923422505:dataToPlot <- briefRelAbundance
1521923422506:# ggpubr ------------------------------------------------------------------
1521923422506:ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1521923422507:fill = "Family",               # change fill color by cyl
1521923422507:# color = "white",            # Set bar border colors to white
1521923422508:# palette = "jco",            # jco journal color palett. see ?ggpar
1521923422508:palette = rev(palette[1:(nTopElements+1)]),
1521923422508:# sort.val = "desc",          # Sort the value in dscending order
1521923422509:# sort.by.groups = FALSE,     # Don't sort inside each group
1521923422509:x.text.angle = 50 #, # Rotate vertically x axis texts
1521923422509:# position = "stack"
1521923422510:) +
1521923422510:facet_grid(~ Population, scales = "free_x") +
1521923422510:theme(panel.grid.major = element_blank(),
1521923422511:axis.text.x = element_text(angle = 50, hjust = 1),
1521923422511:strip.background = element_blank(),
1521923422511:panel.border = element_blank()
1521923422512:)
1521923422513:# Figure 2
1521923422513:# Sources -----------------------------------------------------------------
1521923422514:source("scripts/auxiliary_functions.R")
1521923422532:# Packages ----------------------------------------------------------------
1521923422533:requiredPackages <- c("tidyverse", "rlang", "dendsort", "ggfortify", "ggpubr", "pheatmap",
1521923422533:"RColorBrewer", "vegan", "formatR")
1521923422533:installAndLoadPackages(requiredPackages)
1521923422539:# Loading Data ------------------------------------------------------------
1521923422540:extDataFile <- "data/gt_and_tumaco_samples.otu_table.tsv"
1521923422540:extData     <- read.delim(extDataFile, check.names = FALSE,
1521923422540:stringsAsFactors = F)
1521923422591:extData     <- as_tibble(extData)
1521923422594:attributes(extData)
1521923422622:metadataFile <- "data/metadata.tsv"
1521923422622:metadata     <- read_tsv(metadataFile)
1521923422749:attributes(metadata)
1521923422759:# General configuration ---------------------------------------------------
1521923422760:useOnlyGTSamples <- FALSE
1521923422761:dataGroups   <- c("Coast", "Mountain")
1521923422761:groupVar     <- "Population"
1521923422761:titles       <- c(dataGroups, "General\nProfile")
1521923422762:labels       <- c(y = "Relative Abundance")
1521923422762:nTopElements <- 10
1521923422763:# Preparing data ----------------------------------------------------------
1521923422764:# Get samples sequenced through GT
1521923422764:gtSamples <- metadata %>%
1521923422764:filter(Seq_Origin == "GT1" | Seq_Origin == "GT2") %>%
1521923422764:select(Sample)
1521923422768:tumacoSamples <- metadata %>%
1521923422768:filter(Additional_Sample == 1) %>%
1521923422769:select(Sample)
1521923422772:pull(gtSamples)
1521923422774:pull(tumacoSamples)
1521923422775:# Select samples
1521923422775:if (useOnlyGTSamples) {
1521923422776:# Indices for samples from GT only and Tumaco Additional Samples
1521923422776:samples <- pull(gtSamples)
1521923422776:} else {
1521923422777:# Include Tumaco additional samples
1521923422777:samples <- c(pull(gtSamples), pull(tumacoSamples))
1521923422777:}
1521923422778:# Indices of sample columns
1521923422778:samplesInd <- which(colnames(extData) %in% samples)
1521923422779:# Select metadata
1521923422779:partialMetadata <- metadata %>%
1521923422780:# filter(Included_In_Study == 1) %>%
1521923422780:filter(Sample %in% samples) %>%
1521923422780:select(Sample, Evolution, Population = Residence)
1521923422784:# Add "UNSUPPORTED MAPPING" to blank cells from the taxonomy columns
1521923422784:for(col in c("Class", "Order", "Family", "Genera", "Species")){
1521923422784:extData[extData[[col]] == "", col] = "UNSUPPORTED MAPPING"
1521923422785:}
1521923422790:# Add Reads column: total reads per OTU
1521923422790:extData <- extData %>%
1521923422791:mutate(Reads = rowSums(.[samplesInd]))
1521923422797:# Figure 2: Relative abundance (Family and Class) -------------------------
1521923422797:# Preparing data
1521923422797:# Calculate Relative Abundance per Family
1521923422798:(relAbundance <- extData %>%
1521923422798:group_by(Family) %>%                          # group by Family column
1521923422798:summarise_at(samplesInd, sum) %>%             # compute sum of reads for each Family
1521923422799:mutate_if(is.numeric, funs( . / sum(.))) %>%  # Normalize (rel. abundance)
1521923422799:mutate(TotalAbundance = rowSums(select(., -Family))) %>%
1521923422799:arrange(desc(TotalAbundance))
1521923422799:)
1521923423119:# Get top families by total abundance
1521923423119:top <- relAbundance %>%
1521923423120:top_n(nTopElements, TotalAbundance) %>%
1521923423120:select(-TotalAbundance)
1521923423127:# Group the rest of the families into the family "Others"
1521923423128:rest <- relAbundance %>%
1521923423128:top_n(-(nrow(relAbundance) - nTopElements), TotalAbundance) %>%
1521923423129:gather(Sample, Abundance, -Family) %>%
1521923423130:group_by(Sample) %>%
1521923423130:summarise(Total = sum(Abundance)) %>%
1521923423131:spread(Sample, Total) %>%
1521923423131:mutate(Family = c("Others")) %>%
1521923423132:select(Family, -TotalAbundance, everything()) %>%
1521923423132:select(-TotalAbundance)
1521923423160:# Bind top and rest families into a single table (tibble)
1521923423160:briefRelAbundance <- rbind.data.frame(top, rest)
1521923423181:# Get the order of families by total abundance (originally
1521923423182:# from relAbundance table)
1521923423182:orderedFamilies <- briefRelAbundance$Family
1521923423182:# Get the order of samples by the most abundant family
1521923423183:orderedSamples  <- names(sort(as.vector(as.data.frame(briefRelAbundance[1,-1]))))
1521923423184:# Change the order of Families and Samples
1521923423185:(briefRelAbundance <- briefRelAbundance %>%
1521923423185:gather(Sample, Abundance, -Family) %>%
1521923423185:spread(Family, Abundance) %>%
1521923423186:left_join(partialMetadata) %>%
1521923423186:gather(Family, Abundance, -Sample, -Population, -Evolution) %>%
1521923423186:mutate(Family = factor(Family, levels = rev(orderedFamilies))) %>%
1521923423187:mutate(Sample = factor(Sample, levels = orderedSamples)) # %>%
1521923423187:)
1521923423265:# Visualize colors
1521923423265:pal(rev(palette))
1521923423269:pal(palette)
1521923423288:# Plot Abundance --------------------------------------------------------
1521923423288:dataToPlot <- briefRelAbundance
1521923423289:# ggpubr ------------------------------------------------------------------
1521923423289:ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1521923423290:fill = "Family",               # change fill color by cyl
1521923423290:# color = "white",            # Set bar border colors to white
1521923423290:# palette = "jco",            # jco journal color palett. see ?ggpar
1521923423291:palette = rev(palette[1:(nTopElements+1)]),
1521923423291:# sort.val = "desc",          # Sort the value in dscending order
1521923423291:# sort.by.groups = FALSE,     # Don't sort inside each group
1521923423292:x.text.angle = 50 #, # Rotate vertically x axis texts
1521923423292:# position = "stack"
1521923423292:) +
1521923423292:facet_grid(~ Population, scales = "free_x") +
1521923423293:theme(panel.grid.major = element_blank(),
1521923423293:axis.text.x = element_text(angle = 50, hjust = 1),
1521923423293:strip.background = element_blank(),
1521923423294:panel.border = element_blank()
1521923423294:)
1521923432286:# Figure 2
1521923432287:# Sources -----------------------------------------------------------------
1521923432288:# Packages ----------------------------------------------------------------
1521923432289:requiredPackages <- c("tidyverse", "rlang", "dendsort", "ggfortify", "ggpubr", "pheatmap",
1521923432290:"RColorBrewer", "vegan", "formatR")
1521923432291:installAndLoadPackages(requiredPackages)
1521923432321:source("scripts/auxiliary_functions.R")
1521923432883:# Loading Data ------------------------------------------------------------
1521923432884:extDataFile <- "data/gt_and_tumaco_samples.otu_table.tsv"
1521923432884:extData     <- read.delim(extDataFile, check.names = FALSE,
1521923432885:stringsAsFactors = F)
1521923432927:extData     <- as_tibble(extData)
1521923432929:attributes(extData)
1521923432956:metadataFile <- "data/metadata.tsv"
1521923432957:metadata     <- read_tsv(metadataFile)
1521923432965:attributes(metadata)
1521923432976:# General configuration ---------------------------------------------------
1521923432977:useOnlyGTSamples <- FALSE
1521923432977:dataGroups   <- c("Coast", "Mountain")
1521923432978:groupVar     <- "Population"
1521923432978:titles       <- c(dataGroups, "General\nProfile")
1521923432979:labels       <- c(y = "Relative Abundance")
1521923432979:nTopElements <- 10
1521923432980:# Preparing data ----------------------------------------------------------
1521923432980:# Get samples sequenced through GT
1521923432980:gtSamples <- metadata %>%
1521923432981:filter(Seq_Origin == "GT1" | Seq_Origin == "GT2") %>%
1521923432981:select(Sample)
1521923432984:tumacoSamples <- metadata %>%
1521923432985:filter(Additional_Sample == 1) %>%
1521923432985:select(Sample)
1521923432989:pull(gtSamples)
1521923432991:pull(tumacoSamples)
1521923432992:# Select samples
1521923432993:if (useOnlyGTSamples) {
1521923432993:# Indices for samples from GT only and Tumaco Additional Samples
1521923432993:samples <- pull(gtSamples)
1521923432994:} else {
1521923432994:# Include Tumaco additional samples
1521923432994:samples <- c(pull(gtSamples), pull(tumacoSamples))
1521923432994:}
1521923432995:# Indices of sample columns
1521923432996:samplesInd <- which(colnames(extData) %in% samples)
1521923432996:# Select metadata
1521923432997:partialMetadata <- metadata %>%
1521923432997:# filter(Included_In_Study == 1) %>%
1521923432997:filter(Sample %in% samples) %>%
1521923432997:select(Sample, Evolution, Population = Residence)
1521923433001:# Add "UNSUPPORTED MAPPING" to blank cells from the taxonomy columns
1521923433001:for(col in c("Class", "Order", "Family", "Genera", "Species")){
1521923433002:extData[extData[[col]] == "", col] = "UNSUPPORTED MAPPING"
1521923433002:}
1521923433007:# Add Reads column: total reads per OTU
1521923433007:extData <- extData %>%
1521923433008:mutate(Reads = rowSums(.[samplesInd]))
1521923433014:# Figure 2: Relative abundance (Family and Class) -------------------------
1521923433014:# Preparing data
1521923433015:# Calculate Relative Abundance per Family
1521923433015:(relAbundance <- extData %>%
1521923433015:group_by(Family) %>%                          # group by Family column
1521923433016:summarise_at(samplesInd, sum) %>%             # compute sum of reads for each Family
1521923433016:mutate_if(is.numeric, funs( . / sum(.))) %>%  # Normalize (rel. abundance)
1521923433016:mutate(TotalAbundance = rowSums(select(., -Family))) %>%
1521923433017:arrange(desc(TotalAbundance))
1521923433017:)
1521923433209:# Get top families by total abundance
1521923433209:top <- relAbundance %>%
1521923433209:top_n(nTopElements, TotalAbundance) %>%
1521923433210:select(-TotalAbundance)
1521923433214:# Group the rest of the families into the family "Others"
1521923433214:rest <- relAbundance %>%
1521923433214:top_n(-(nrow(relAbundance) - nTopElements), TotalAbundance) %>%
1521923433215:gather(Sample, Abundance, -Family) %>%
1521923433215:group_by(Sample) %>%
1521923433215:summarise(Total = sum(Abundance)) %>%
1521923433216:spread(Sample, Total) %>%
1521923433216:mutate(Family = c("Others")) %>%
1521923433216:select(Family, -TotalAbundance, everything()) %>%
1521923433217:select(-TotalAbundance)
1521923433235:# Bind top and rest families into a single table (tibble)
1521923433235:briefRelAbundance <- rbind.data.frame(top, rest)
1521923433237:# Get the order of families by total abundance (originally
1521923433237:# from relAbundance table)
1521923433238:orderedFamilies <- briefRelAbundance$Family
1521923433238:# Get the order of samples by the most abundant family
1521923433238:orderedSamples  <- names(sort(as.vector(as.data.frame(briefRelAbundance[1,-1]))))
1521923433240:# Change the order of Families and Samples
1521923433241:(briefRelAbundance <- briefRelAbundance %>%
1521923433241:gather(Sample, Abundance, -Family) %>%
1521923433241:spread(Family, Abundance) %>%
1521923433242:left_join(partialMetadata) %>%
1521923433242:gather(Family, Abundance, -Sample, -Population, -Evolution) %>%
1521923433242:mutate(Family = factor(Family, levels = rev(orderedFamilies))) %>%
1521923433243:mutate(Sample = factor(Sample, levels = orderedSamples)) # %>%
1521923433243:)
1521923433301:# Visualize colors
1521923433301:pal(rev(palette))
1521923433312:pal(palette)
1521923433536:# Plot Abundance --------------------------------------------------------
1521923433537:dataToPlot <- briefRelAbundance
1521923433538:# ggpubr ------------------------------------------------------------------
1521923433538:ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1521923433539:fill = "Family",               # change fill color by cyl
1521923433539:# color = "white",            # Set bar border colors to white
1521923433540:# palette = "jco",            # jco journal color palett. see ?ggpar
1521923433540:palette = rev(palette[1:(nTopElements+1)]),
1521923433541:# sort.val = "desc",          # Sort the value in dscending order
1521923433541:# sort.by.groups = FALSE,     # Don't sort inside each group
1521923433542:x.text.angle = 50 #, # Rotate vertically x axis texts
1521923433542:# position = "stack"
1521923433542:) +
1521923433543:facet_grid(~ Population, scales = "free_x") +
1521923433543:theme(panel.grid.major = element_blank(),
1521923433544:axis.text.x = element_text(angle = 50, hjust = 1),
1521923433544:strip.background = element_blank(),
1521923433545:panel.border = element_blank()
1521923433546:)
1521923508532:# Figure 2
1521923508533:# Sources -----------------------------------------------------------------
1521923508534:# Packages ----------------------------------------------------------------
1521923508535:requiredPackages <- c("tidyverse", "rlang", "dendsort", "ggfortify", "ggpubr", "pheatmap",
1521923508535:"RColorBrewer", "vegan", "formatR")
1521923508537:installAndLoadPackages(requiredPackages)
1521923508546:source("scripts/auxiliary_functions.R")
1521923508555:# Loading Data ------------------------------------------------------------
1521923508556:extDataFile <- "data/gt_and_tumaco_samples.otu_table.tsv"
1521923508557:extData     <- read.delim(extDataFile, check.names = FALSE,
1521923508557:stringsAsFactors = F)
1521923508607:extData     <- as_tibble(extData)
1521923508610:attributes(extData)
1521923508639:metadataFile <- "data/metadata.tsv"
1521923508640:metadata     <- read_tsv(metadataFile)
1521923508649:attributes(metadata)
1521923508661:# General configuration ---------------------------------------------------
1521923508662:useOnlyGTSamples <- TRUE
1521923508662:dataGroups   <- c("Coast", "Mountain")
1521923508663:groupVar     <- "Population"
1521923508663:titles       <- c(dataGroups, "General\nProfile")
1521923508664:labels       <- c(y = "Relative Abundance")
1521923508664:nTopElements <- 10
1521923508665:# Preparing data ----------------------------------------------------------
1521923508665:# Get samples sequenced through GT
1521923508666:gtSamples <- metadata %>%
1521923508666:filter(Seq_Origin == "GT1" | Seq_Origin == "GT2") %>%
1521923508666:select(Sample)
1521923508670:tumacoSamples <- metadata %>%
1521923508671:filter(Additional_Sample == 1) %>%
1521923508671:select(Sample)
1521923508675:pull(gtSamples)
1521923508678:pull(tumacoSamples)
1521923508679:# Select samples
1521923508680:if (useOnlyGTSamples) {
1521923508680:# Indices for samples from GT only and Tumaco Additional Samples
1521923508680:samples <- pull(gtSamples)
1521923508681:} else {
1521923508681:# Include Tumaco additional samples
1521923508681:samples <- c(pull(gtSamples), pull(tumacoSamples))
1521923508681:}
1521923508682:# Indices of sample columns
1521923508683:samplesInd <- which(colnames(extData) %in% samples)
1521923508684:# Select metadata
1521923508684:(partialMetadata <- metadata %>%
1521923508684:# filter(Included_In_Study == 1) %>%
1521923508685:filter(Sample %in% samples) %>%
1521923508685:select(Sample, Evolution, Population = Residence,
1521923508685:Ae2, Aa1, Aea, Ae1))
1521923508764:# Add "UNSUPPORTED MAPPING" to blank cells from the taxonomy columns
1521923508765:for(col in c("Class", "Order", "Family", "Genera", "Species")){
1521923508765:extData[extData[[col]] == "", col] = "UNSUPPORTED MAPPING"
1521923508765:}
1521923508771:# Add Reads column: total reads per OTU
1521923508772:extData <- extData %>%
1521923508772:mutate(Reads = rowSums(.[samplesInd]))
1521923508779:# Figure 2: Relative abundance (Family and Class) -------------------------
1521923508779:# Preparing data
1521923508780:# Calculate Relative Abundance per Family
1521923508780:(relAbundance <- extData %>%
1521923508780:group_by(Family) %>%                          # group by Family column
1521923508781:summarise_at(samplesInd, sum) %>%             # compute sum of reads for each Family
1521923508781:mutate_if(is.numeric, funs( . / sum(.))) %>%  # Normalize (rel. abundance)
1521923508781:mutate(TotalAbundance = rowSums(select(., -Family))) %>%
1521923508782:arrange(desc(TotalAbundance))
1521923508782:)
1521923508931:# Get top families by total abundance
1521923508932:top <- relAbundance %>%
1521923508932:top_n(nTopElements, TotalAbundance) %>%
1521923508932:select(-TotalAbundance)
1521923508936:# Group the rest of the families into the family "Others"
1521923508937:rest <- relAbundance %>%
1521923508937:top_n(-(nrow(relAbundance) - nTopElements), TotalAbundance) %>%
1521923508937:gather(Sample, Abundance, -Family) %>%
1521923508937:group_by(Sample) %>%
1521923508938:summarise(Total = sum(Abundance)) %>%
1521923508938:spread(Sample, Total) %>%
1521923508938:mutate(Family = c("Others")) %>%
1521923508939:select(Family, -TotalAbundance, everything()) %>%
1521923508939:select(-TotalAbundance)
1521923508963:# Bind top and rest families into a single table (tibble)
1521923508963:briefRelAbundance <- rbind.data.frame(top, rest)
1521923508965:# Get the order of families by total abundance (originally
1521923508965:# from relAbundance table)
1521923508965:orderedFamilies <- briefRelAbundance$Family
1521923508966:# Get the order of samples by the most abundant family
1521923508966:orderedSamples  <- names(sort(as.vector(as.data.frame(briefRelAbundance[1,-1]))))
1521923508968:metadata %>%
1521923508968:filter(Sample %in% samples) %>%
1521923508968:select(Sample, Evolution, Population = Residence,
1521923508969:Ae2, Aa1, Aea, Ae1) %>%
1521923508969:gather(Ancestry, Proportion, -Sample,
1521923508969:-Population, -Evolution) %>%
1521923508970:mutate(Sample = factor(Sample, levels = orderedSamples))
1521923509023:# Visualize colors
1521923509023:pal(rev(palette))
1521923509034:pal(palette)
1521923509339:# Plot Abundance --------------------------------------------------------
1521923509340:dataToPlot <- metadata %>%
1521923509340:filter(Sample %in% samples) %>%
1521923509340:select(Sample, Evolution, Population = Residence,
1521923509341:Ae2, Aa1, Aea, Ae1) %>%
1521923509341:gather(Ancestry, Proportion, -Sample,
1521923509341:-Population, -Evolution) %>%
1521923509342:mutate(Sample = factor(Sample, levels = orderedSamples))
1521923509349:# ggpubr ------------------------------------------------------------------
1521923509349:ggbarplot(dataToPlot, x = "Sample", y = "Proportion",
1521923509349:fill = "Ancestry",               # change fill color by cyl
1521923509350:# color = "white",            # Set bar border colors to white
1521923509350:# palette = "jco",            # jco journal color palett. see ?ggpar
1521923509350:# palette = rev(palette[1:(nTopElements+1)]),
1521923509351:# sort.val = "desc",          # Sort the value in dscending order
1521923509351:# sort.by.groups = FALSE,     # Don't sort inside each group
1521923509351:x.text.angle = 50 #, # Rotate vertically x axis texts
1521923509352:# position = "stack"
1521923509352:) +
1521923509352:# facet_wrap(~ Population, scales = "free_x") +
1521923509352:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1521923509353:theme(panel.grid.major = element_blank(),
1521923509353:axis.text.x = element_text(angle = 50, hjust = 1),
1521923509353:strip.background = element_blank(),
1521923509354:panel.border = element_blank()
1521923509354:)
1521923509822:# ggpubr ------------------------------------------------------------------
1521923509823:ggbarplot(briefRelAbundance, x = "Sample", y = "Proportion",
1521923509823:fill = "Population",               # change fill color by cyl
1521923509823:# color = "white",            # Set bar border colors to white
1521923509824:# palette = "jco",            # jco journal color palett. see ?ggpar
1521923509824:# palette = rev(palette[1:(nTopElements+1)]),
1521923509824:# sort.val = "desc",          # Sort the value in dscending order
1521923509825:# sort.by.groups = FALSE,     # Don't sort inside each group
1521923509825:x.text.angle = 50 #, # Rotate vertically x axis texts
1521923509825:# position = "stack"
1521923509826:) +
1521923509826:# facet_wrap(~ Population, scales = "free_x") +
1521923509826:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1521923509827:theme(panel.grid.major = element_blank(),
1521923509827:axis.text.x = element_text(angle = 50, hjust = 1),
1521923509827:strip.background = element_blank(),
1521923509828:panel.border = element_blank()
1521923509828:)
1521923519291:# Figure 2
1521923519293:# Sources -----------------------------------------------------------------
1521923519294:# Packages ----------------------------------------------------------------
1521923519295:requiredPackages <- c("tidyverse", "rlang", "dendsort", "ggfortify", "ggpubr", "pheatmap",
1521923519296:"RColorBrewer", "vegan", "formatR")
1521923519297:installAndLoadPackages(requiredPackages)
1521923519306:source("scripts/auxiliary_functions.R")
1521923519316:# Loading Data ------------------------------------------------------------
1521923519317:extDataFile <- "data/gt_and_tumaco_samples.otu_table.tsv"
1521923519317:extData     <- read.delim(extDataFile, check.names = FALSE,
1521923519318:stringsAsFactors = F)
1521923519378:extData     <- as_tibble(extData)
1521923519381:attributes(extData)
1521923519416:metadataFile <- "data/metadata.tsv"
1521923519417:metadata     <- read_tsv(metadataFile)
1521923519428:attributes(metadata)
1521923519440:# General configuration ---------------------------------------------------
1521923519441:useOnlyGTSamples <- TRUE
1521923519442:dataGroups   <- c("Coast", "Mountain")
1521923519443:groupVar     <- "Population"
1521923519443:titles       <- c(dataGroups, "General\nProfile")
1521923519444:labels       <- c(y = "Relative Abundance")
1521923519445:nTopElements <- 10
1521923519446:# Preparing data ----------------------------------------------------------
1521923519446:# Get samples sequenced through GT
1521923519447:gtSamples <- metadata %>%
1521923519447:filter(Seq_Origin == "GT1" | Seq_Origin == "GT2") %>%
1521923519447:select(Sample)
1521923519451:tumacoSamples <- metadata %>%
1521923519451:filter(Additional_Sample == 1) %>%
1521923519452:select(Sample)
1521923519456:pull(gtSamples)
1521923519458:pull(tumacoSamples)
1521923519460:# Select samples
1521923519460:if (useOnlyGTSamples) {
1521923519460:# Indices for samples from GT only and Tumaco Additional Samples
1521923519461:samples <- pull(gtSamples)
1521923519461:} else {
1521923519461:# Include Tumaco additional samples
1521923519461:samples <- c(pull(gtSamples), pull(tumacoSamples))
1521923519462:}
1521923519463:# Indices of sample columns
1521923519463:samplesInd <- which(colnames(extData) %in% samples)
1521923519464:# Select metadata
1521923519464:(partialMetadata <- metadata %>%
1521923519464:# filter(Included_In_Study == 1) %>%
1521923519465:filter(Sample %in% samples) %>%
1521923519465:select(Sample, Evolution, Population = Residence,
1521923519465:Ae2, Aa1, Aea, Ae1))
1521923519535:# Add "UNSUPPORTED MAPPING" to blank cells from the taxonomy columns
1521923519536:for(col in c("Class", "Order", "Family", "Genera", "Species")){
1521923519536:extData[extData[[col]] == "", col] = "UNSUPPORTED MAPPING"
1521923519536:}
1521923519543:# Add Reads column: total reads per OTU
1521923519543:extData <- extData %>%
1521923519543:mutate(Reads = rowSums(.[samplesInd]))
1521923519549:# Figure 2: Relative abundance (Family and Class) -------------------------
1521923519550:# Preparing data
1521923519550:# Calculate Relative Abundance per Family
1521923519551:(relAbundance <- extData %>%
1521923519551:group_by(Family) %>%                          # group by Family column
1521923519551:summarise_at(samplesInd, sum) %>%             # compute sum of reads for each Family
1521923519552:mutate_if(is.numeric, funs( . / sum(.))) %>%  # Normalize (rel. abundance)
1521923519552:mutate(TotalAbundance = rowSums(select(., -Family))) %>%
1521923519552:arrange(desc(TotalAbundance))
1521923519553:)
1521923519748:# Get top families by total abundance
1521923519749:top <- relAbundance %>%
1521923519749:top_n(nTopElements, TotalAbundance) %>%
1521923519749:select(-TotalAbundance)
1521923519756:# Group the rest of the families into the family "Others"
1521923519756:rest <- relAbundance %>%
1521923519757:top_n(-(nrow(relAbundance) - nTopElements), TotalAbundance) %>%
1521923519757:gather(Sample, Abundance, -Family) %>%
1521923519758:group_by(Sample) %>%
1521923519758:summarise(Total = sum(Abundance)) %>%
1521923519758:spread(Sample, Total) %>%
1521923519759:mutate(Family = c("Others")) %>%
1521923519759:select(Family, -TotalAbundance, everything()) %>%
1521923519760:select(-TotalAbundance)
1521923519788:# Bind top and rest families into a single table (tibble)
1521923519788:briefRelAbundance <- rbind.data.frame(top, rest)
1521923519791:# Get the order of families by total abundance (originally
1521923519791:# from relAbundance table)
1521923519791:orderedFamilies <- briefRelAbundance$Family
1521923519792:# Get the order of samples by the most abundant family
1521923519793:orderedSamples  <- names(sort(as.vector(as.data.frame(briefRelAbundance[1,-1]))))
1521923519795:metadata %>%
1521923519796:filter(Sample %in% samples) %>%
1521923519796:select(Sample, Evolution, Population = Residence,
1521923519797:Ae2, Aa1, Aea, Ae1) %>%
1521923519797:gather(Ancestry, Proportion, -Sample,
1521923519798:-Population, -Evolution) %>%
1521923519798:mutate(Sample = factor(Sample, levels = orderedSamples))
1521923519854:# Visualize colors
1521923519855:pal(rev(palette))
1521923519869:pal(palette)
1521923520013:# Plot Abundance --------------------------------------------------------
1521923520014:dataToPlot <- metadata %>%
1521923520014:filter(Sample %in% samples) %>%
1521923520014:select(Sample, Evolution, Population = Residence,
1521923520014:Ae2, Aa1, Aea, Ae1) %>%
1521923520015:gather(Ancestry, Proportion, -Sample,
1521923520015:-Population, -Evolution) %>%
1521923520015:mutate(Sample = factor(Sample, levels = orderedSamples))
1521923520023:# ggpubr ------------------------------------------------------------------
1521923520024:ggbarplot(dataToPlot, x = "Sample", y = "Proportion",
1521923520024:fill = "Ancestry",               # change fill color by cyl
1521923520024:# color = "white",            # Set bar border colors to white
1521923520025:# palette = "jco",            # jco journal color palett. see ?ggpar
1521923520025:# palette = rev(palette[1:(nTopElements+1)]),
1521923520025:# sort.val = "desc",          # Sort the value in dscending order
1521923520026:# sort.by.groups = FALSE,     # Don't sort inside each group
1521923520026:x.text.angle = 50 #, # Rotate vertically x axis texts
1521923520027:# position = "stack"
1521923520027:) +
1521923520027:# facet_wrap(~ Population, scales = "free_x") +
1521923520027:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1521923520028:theme(panel.grid.major = element_blank(),
1521923520028:axis.text.x = element_text(angle = 50, hjust = 1),
1521923520029:strip.background = element_blank(),
1521923520029:panel.border = element_blank()
1521923520029:)
1521923544142:# ggpubr ------------------------------------------------------------------
1521923544143:ggbarplot(briefRelAbundance, x = "Sample", y = "Proportion",
1521923544144:fill = "Population",               # change fill color by cyl
1521923544145:# color = "white",            # Set bar border colors to white
1521923544146:# palette = "jco",            # jco journal color palett. see ?ggpar
1521923544146:# palette = rev(palette[1:(nTopElements+1)]),
1521923544147:# sort.val = "desc",          # Sort the value in dscending order
1521923544148:# sort.by.groups = FALSE,     # Don't sort inside each group
1521923544149:x.text.angle = 50 #, # Rotate vertically x axis texts
1521923544150:# position = "stack"
1521923544151:) +
1521923544151:# facet_wrap(~ Population, scales = "free_x") +
1521923544152:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1521923544153:theme(panel.grid.major = element_blank(),
1521923544154:axis.text.x = element_text(angle = 50, hjust = 1),
1521923544155:strip.background = element_blank(),
1521923544156:panel.border = element_blank()
1521923544156:)
1521923557569:# ggpubr ------------------------------------------------------------------
1521923557569:ggbarplot(briefRelAbundance, x = "Sample", y = "Abundance",
1521923557570:fill = "Population",               # change fill color by cyl
1521923557570:# color = "white",            # Set bar border colors to white
1521923557570:# palette = "jco",            # jco journal color palett. see ?ggpar
1521923557571:# palette = rev(palette[1:(nTopElements+1)]),
1521923557571:# sort.val = "desc",          # Sort the value in dscending order
1521923557571:# sort.by.groups = FALSE,     # Don't sort inside each group
1521923557572:x.text.angle = 50 #, # Rotate vertically x axis texts
1521923557572:# position = "stack"
1521923557572:) +
1521923557573:# facet_wrap(~ Population, scales = "free_x") +
1521923557573:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1521923557573:theme(panel.grid.major = element_blank(),
1521923557574:axis.text.x = element_text(angle = 50, hjust = 1),
1521923557574:strip.background = element_blank(),
1521923557574:panel.border = element_blank()
1521923557575:)
1521923560690:briefRelAbundance
1521923657087:# Figure 2
1521923657088:# Sources -----------------------------------------------------------------
1521923657089:# Packages ----------------------------------------------------------------
1521923657090:requiredPackages <- c("tidyverse", "rlang", "dendsort", "ggfortify", "ggpubr", "pheatmap",
1521923657091:"RColorBrewer", "vegan", "formatR")
1521923657091:installAndLoadPackages(requiredPackages)
1521923657100:source("scripts/auxiliary_functions.R")
1521923657110:# Loading Data ------------------------------------------------------------
1521923657110:extDataFile <- "data/gt_and_tumaco_samples.otu_table.tsv"
1521923657111:extData     <- read.delim(extDataFile, check.names = FALSE,
1521923657112:stringsAsFactors = F)
1521923657168:extData     <- as_tibble(extData)
1521923657171:attributes(extData)
1521923657207:metadataFile <- "data/metadata.tsv"
1521923657208:metadata     <- read_tsv(metadataFile)
1521923657221:attributes(metadata)
1521923657233:# General configuration ---------------------------------------------------
1521923657234:useOnlyGTSamples <- TRUE
1521923657234:dataGroups   <- c("Coast", "Mountain")
1521923657235:groupVar     <- "Population"
1521923657235:titles       <- c(dataGroups, "General\nProfile")
1521923657236:labels       <- c(y = "Relative Abundance")
1521923657236:nTopElements <- 10
1521923657237:# Preparing data ----------------------------------------------------------
1521923657237:# Get samples sequenced through GT
1521923657238:gtSamples <- metadata %>%
1521923657238:filter(Seq_Origin == "GT1" | Seq_Origin == "GT2") %>%
1521923657238:select(Sample)
1521923657242:tumacoSamples <- metadata %>%
1521923657243:filter(Additional_Sample == 1) %>%
1521923657243:select(Sample)
1521923657248:pull(gtSamples)
1521923657250:pull(tumacoSamples)
1521923657251:# Select samples
1521923657252:if (useOnlyGTSamples) {
1521923657252:# Indices for samples from GT only and Tumaco Additional Samples
1521923657252:samples <- pull(gtSamples)
1521923657252:} else {
1521923657253:# Include Tumaco additional samples
1521923657253:samples <- c(pull(gtSamples), pull(tumacoSamples))
1521923657253:}
1521923657254:# Indices of sample columns
1521923657255:samplesInd <- which(colnames(extData) %in% samples)
1521923657255:# Select metadata
1521923657256:(partialMetadata <- metadata %>%
1521923657256:# filter(Included_In_Study == 1) %>%
1521923657256:filter(Sample %in% samples) %>%
1521923657257:select(Sample, Evolution, Population = Residence,
1521923657257:Ae2, Aa1, Aea, Ae1))
1521923657334:# Add "UNSUPPORTED MAPPING" to blank cells from the taxonomy columns
1521923657335:for(col in c("Class", "Order", "Family", "Genera", "Species")){
1521923657335:extData[extData[[col]] == "", col] = "UNSUPPORTED MAPPING"
1521923657335:}
1521923657343:# Add Reads column: total reads per OTU
1521923657343:extData <- extData %>%
1521923657344:mutate(Reads = rowSums(.[samplesInd]))
1521923657350:# Figure 2: Relative abundance (Family and Class) -------------------------
1521923657351:# Preparing data
1521923657351:# Calculate Relative Abundance per Family
1521923657351:(relAbundance <- extData %>%
1521923657352:group_by(Family) %>%                          # group by Family column
1521923657352:summarise_at(samplesInd, sum) %>%             # compute sum of reads for each Family
1521923657352:mutate_if(is.numeric, funs( . / sum(.))) %>%  # Normalize (rel. abundance)
1521923657352:mutate(TotalAbundance = rowSums(select(., -Family))) %>%
1521923657353:arrange(desc(TotalAbundance))
1521923657353:)
1521923657516:# Get top families by total abundance
1521923657516:top <- relAbundance %>%
1521923657516:top_n(nTopElements, TotalAbundance) %>%
1521923657517:select(-TotalAbundance)
1521923657521:# Group the rest of the families into the family "Others"
1521923657521:rest <- relAbundance %>%
1521923657522:top_n(-(nrow(relAbundance) - nTopElements), TotalAbundance) %>%
1521923657522:gather(Sample, Abundance, -Family) %>%
1521923657522:group_by(Sample) %>%
1521923657523:summarise(Total = sum(Abundance)) %>%
1521923657523:spread(Sample, Total) %>%
1521923657523:mutate(Family = c("Others")) %>%
1521923657524:select(Family, -TotalAbundance, everything()) %>%
1521923657524:select(-TotalAbundance)
1521923657542:# Bind top and rest families into a single table (tibble)
1521923657542:briefRelAbundance <- rbind.data.frame(top, rest)
1521923657544:# Get the order of families by total abundance (originally
1521923657544:# from relAbundance table)
1521923657544:orderedFamilies <- briefRelAbundance$Family
1521923657545:# Get the order of samples by the most abundant family
1521923657545:orderedSamples  <- names(sort(as.vector(as.data.frame(briefRelAbundance[1,-1]))))
1521923657547:# Change the order of Families and Samples
1521923657547:(briefRelAbundance <- briefRelAbundance %>%
1521923657547:gather(Sample, Abundance, -Family) %>%
1521923657548:spread(Family, Abundance) %>%
1521923657548:left_join(partialMetadata) %>%
1521923657548:gather(Family, Abundance, -Sample, -Population, -Evolution) %>%
1521923657549:mutate(Family = factor(Family, levels = rev(orderedFamilies))) %>%
1521923657549:mutate(Sample = factor(Sample, levels = orderedSamples)) # %>%
1521923657550:)
1521923664879:# ggpubr ------------------------------------------------------------------
1521923664880:ggbarplot(briefRelAbundance, x = "Sample", y = "Abundance",
1521923664881:fill = "Population",               # change fill color by cyl
1521923664882:# color = "white",            # Set bar border colors to white
1521923664883:# palette = "jco",            # jco journal color palett. see ?ggpar
1521923664883:# palette = rev(palette[1:(nTopElements+1)]),
1521923664884:# sort.val = "desc",          # Sort the value in dscending order
1521923664885:# sort.by.groups = FALSE,     # Don't sort inside each group
1521923664886:x.text.angle = 50 #, # Rotate vertically x axis texts
1521923664886:# position = "stack"
1521923664887:) +
1521923664888:# facet_wrap(~ Population, scales = "free_x") +
1521923664889:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1521923664889:theme(panel.grid.major = element_blank(),
1521923664890:axis.text.x = element_text(angle = 50, hjust = 1),
1521923664891:strip.background = element_blank(),
1521923664891:panel.border = element_blank()
1521923664892:)
1521923685405:# ggpubr ------------------------------------------------------------------
1521923685405:ggbarplot(briefRelAbundance, x = "Sample", y = "Abundance",
1521923685406:fill = "Family",               # change fill color by cyl
1521923685407:# color = "white",            # Set bar border colors to white
1521923685408:# palette = "jco",            # jco journal color palett. see ?ggpar
1521923685409:# palette = rev(palette[1:(nTopElements+1)]),
1521923685410:# sort.val = "desc",          # Sort the value in dscending order
1521923685410:# sort.by.groups = FALSE,     # Don't sort inside each group
1521923685411:x.text.angle = 50 #, # Rotate vertically x axis texts
1521923685411:# position = "stack"
1521923685412:) +
1521923685412:# facet_wrap(~ Population, scales = "free_x") +
1521923685412:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1521923685413:theme(panel.grid.major = element_blank(),
1521923685413:axis.text.x = element_text(angle = 50, hjust = 1),
1521923685413:strip.background = element_blank(),
1521923685414:panel.border = element_blank()
1521923685414:)
1521923708727:# Figure 2
1521923708728:# Sources -----------------------------------------------------------------
1521923708729:# Packages ----------------------------------------------------------------
1521923708730:requiredPackages <- c("tidyverse", "rlang", "dendsort", "ggfortify", "ggpubr", "pheatmap",
1521923708731:"RColorBrewer", "vegan", "formatR")
1521923708732:installAndLoadPackages(requiredPackages)
1521923708740:source("scripts/auxiliary_functions.R")
1521923708750:# Loading Data ------------------------------------------------------------
1521923708751:extDataFile <- "data/gt_and_tumaco_samples.otu_table.tsv"
1521923708751:extData     <- read.delim(extDataFile, check.names = FALSE,
1521923708752:stringsAsFactors = F)
1521923708807:extData     <- as_tibble(extData)
1521923708810:attributes(extData)
1521923708841:metadataFile <- "data/metadata.tsv"
1521923708841:metadata     <- read_tsv(metadataFile)
1521923708851:attributes(metadata)
1521923708861:# General configuration ---------------------------------------------------
1521923708862:useOnlyGTSamples <- FALSE
1521923708863:dataGroups   <- c("Coast", "Mountain")
1521923708863:groupVar     <- "Population"
1521923708864:titles       <- c(dataGroups, "General\nProfile")
1521923708864:labels       <- c(y = "Relative Abundance")
1521923708865:nTopElements <- 10
1521923708865:# Preparing data ----------------------------------------------------------
1521923708866:# Get samples sequenced through GT
1521923708867:gtSamples <- metadata %>%
1521923708867:filter(Seq_Origin == "GT1" | Seq_Origin == "GT2") %>%
1521923708867:select(Sample)
1521923708871:tumacoSamples <- metadata %>%
1521923708871:filter(Additional_Sample == 1) %>%
1521923708872:select(Sample)
1521923708875:pull(gtSamples)
1521923708877:pull(tumacoSamples)
1521923708879:# Select samples
1521923708879:if (useOnlyGTSamples) {
1521923708880:# Indices for samples from GT only and Tumaco Additional Samples
1521923708880:samples <- pull(gtSamples)
1521923708880:} else {
1521923708880:# Include Tumaco additional samples
1521923708881:samples <- c(pull(gtSamples), pull(tumacoSamples))
1521923708881:}
1521923708882:# Indices of sample columns
1521923708882:samplesInd <- which(colnames(extData) %in% samples)
1521923708883:# Select metadata
1521923708883:partialMetadata <- metadata %>%
1521923708884:# filter(Included_In_Study == 1) %>%
1521923708884:filter(Sample %in% samples) %>%
1521923708884:select(Sample, Evolution, Population = Residence)
1521923708888:# Add "UNSUPPORTED MAPPING" to blank cells from the taxonomy columns
1521923708888:for(col in c("Class", "Order", "Family", "Genera", "Species")){
1521923708888:extData[extData[[col]] == "", col] = "UNSUPPORTED MAPPING"
1521923708889:}
1521923708894:# Add Reads column: total reads per OTU
1521923708894:extData <- extData %>%
1521923708894:mutate(Reads = rowSums(.[samplesInd]))
1521923708900:# Figure 2: Relative abundance (Family and Class) -------------------------
1521923708901:# Preparing data
1521923708901:# Calculate Relative Abundance per Family
1521923708902:(relAbundance <- extData %>%
1521923708902:group_by(Family) %>%                          # group by Family column
1521923708902:summarise_at(samplesInd, sum) %>%             # compute sum of reads for each Family
1521923708903:mutate_if(is.numeric, funs( . / sum(.))) %>%  # Normalize (rel. abundance)
1521923708904:mutate(TotalAbundance = rowSums(select(., -Family))) %>%
1521923708904:arrange(desc(TotalAbundance))
1521923708905:)
1521923709133:# Get top families by total abundance
1521923709133:top <- relAbundance %>%
1521923709134:top_n(nTopElements, TotalAbundance) %>%
1521923709134:select(-TotalAbundance)
1521923709141:# Group the rest of the families into the family "Others"
1521923709142:rest <- relAbundance %>%
1521923709142:top_n(-(nrow(relAbundance) - nTopElements), TotalAbundance) %>%
1521923709143:gather(Sample, Abundance, -Family) %>%
1521923709143:group_by(Sample) %>%
1521923709144:summarise(Total = sum(Abundance)) %>%
1521923709144:spread(Sample, Total) %>%
1521923709145:mutate(Family = c("Others")) %>%
1521923709145:select(Family, -TotalAbundance, everything()) %>%
1521923709146:select(-TotalAbundance)
1521923709177:# Bind top and rest families into a single table (tibble)
1521923709178:briefRelAbundance <- rbind.data.frame(top, rest)
1521923709181:# Get the order of families by total abundance (originally
1521923709181:# from relAbundance table)
1521923709182:orderedFamilies <- briefRelAbundance$Family
1521923709183:# Get the order of samples by the most abundant family
1521923709183:orderedSamples  <- names(sort(as.vector(as.data.frame(briefRelAbundance[1,-1]))))
1521923709187:# Change the order of Families and Samples
1521923709187:(briefRelAbundance <- briefRelAbundance %>%
1521923709188:gather(Sample, Abundance, -Family) %>%
1521923709189:spread(Family, Abundance) %>%
1521923709189:left_join(partialMetadata) %>%
1521923709190:gather(Family, Abundance, -Sample, -Population, -Evolution) %>%
1521923709190:mutate(Family = factor(Family, levels = rev(orderedFamilies))) %>%
1521923709191:mutate(Sample = factor(Sample, levels = orderedSamples)) # %>%
1521923709191:)
1521923709252:# Visualize colors
1521923709252:pal(rev(palette))
1521923709261:pal(palette)
1521923709425:# Plot Abundance --------------------------------------------------------
1521923709425:dataToPlot <- briefRelAbundance
1521923709426:# ggpubr ------------------------------------------------------------------
1521923709426:ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1521923709427:fill = "Family",               # change fill color by cyl
1521923709427:# color = "white",            # Set bar border colors to white
1521923709427:# palette = "jco",            # jco journal color palett. see ?ggpar
1521923709428:palette = rev(palette[1:(nTopElements+1)]),
1521923709428:# sort.val = "desc",          # Sort the value in dscending order
1521923709428:# sort.by.groups = FALSE,     # Don't sort inside each group
1521923709429:x.text.angle = 50 #, # Rotate vertically x axis texts
1521923709429:# position = "stack"
1521923709429:) +
1521923709429:facet_grid(~ Population, scales = "free_x") +
1521923709430:theme(panel.grid.major = element_blank(),
1521923709430:axis.text.x = element_text(angle = 50, hjust = 1),
1521923709430:strip.background = element_blank(),
1521923709431:panel.border = element_blank()
1521923709431:)
1521923778017:# Figure 2
1521923778018:# Sources -----------------------------------------------------------------
1521923778019:# Packages ----------------------------------------------------------------
1521923778019:requiredPackages <- c("tidyverse", "rlang", "dendsort", "ggfortify", "ggpubr", "pheatmap",
1521923778020:"RColorBrewer", "vegan", "formatR")
1521923778021:installAndLoadPackages(requiredPackages)
1521923778028:source("scripts/auxiliary_functions.R")
1521923778037:# Loading Data ------------------------------------------------------------
1521923778038:extDataFile <- "data/gt_and_tumaco_samples.otu_table.tsv"
1521923778039:extData     <- read.delim(extDataFile, check.names = FALSE,
1521923778039:stringsAsFactors = F)
1521923778090:extData     <- as_tibble(extData)
1521923778093:attributes(extData)
1521923778125:metadataFile <- "data/metadata.tsv"
1521923778125:metadata     <- read_tsv(metadataFile)
1521923778135:attributes(metadata)
1521923778147:# General configuration ---------------------------------------------------
1521923778147:useOnlyGTSamples <- FALSE
1521923778148:dataGroups   <- c("Coast", "Mountain")
1521923778148:groupVar     <- "Population"
1521923778149:titles       <- c(dataGroups, "General\nProfile")
1521923778149:labels       <- c(y = "Relative Abundance")
1521923778150:nTopElements <- 10
1521923778150:# Preparing data ----------------------------------------------------------
1521923778151:# Get samples sequenced through GT
1521923778151:gtSamples <- metadata %>%
1521923778151:filter(Seq_Origin == "GT1" | Seq_Origin == "GT2") %>%
1521923778152:select(Sample)
1521923778156:tumacoSamples <- metadata %>%
1521923778156:filter(Additional_Sample == 1) %>%
1521923778156:select(Sample)
1521923778160:pull(gtSamples)
1521923778163:pull(tumacoSamples)
1521923778165:# Select samples
1521923778165:if (useOnlyGTSamples) {
1521923778165:# Indices for samples from GT only and Tumaco Additional Samples
1521923778165:samples <- pull(gtSamples)
1521923778166:} else {
1521923778166:# Include Tumaco additional samples
1521923778166:samples <- c(pull(gtSamples), pull(tumacoSamples))
1521923778167:}
1521923778168:# Indices of sample columns
1521923778168:samplesInd <- which(colnames(extData) %in% samples)
1521923778169:# Select metadata
1521923778170:partialMetadata <- metadata %>%
1521923778170:# filter(Included_In_Study == 1) %>%
1521923778170:filter(Sample %in% samples) %>%
1521923778170:select(Sample, Evolution, Population = Residence)
1521923778175:# Add "UNSUPPORTED MAPPING" to blank cells from the taxonomy columns
1521923778175:for(col in c("Class", "Order", "Family", "Genera", "Species")){
1521923778176:extData[extData[[col]] == "", col] = "UNSUPPORTED MAPPING"
1521923778176:}
1521923778182:# Add Reads column: total reads per OTU
1521923778182:extData <- extData %>%
1521923778183:mutate(Reads = rowSums(.[samplesInd]))
1521923778195:# Figure 2: Relative abundance (Family and Class) -------------------------
1521923778196:# Preparing data
1521923778196:# Calculate Relative Abundance per Family
1521923778197:(relAbundance <- extData %>%
1521923778197:group_by(Family) %>%                          # group by Family column
1521923778197:summarise_at(samplesInd, sum) %>%             # compute sum of reads for each Family
1521923778198:mutate_if(is.numeric, funs( . / sum(.))) %>%  # Normalize (rel. abundance)
1521923778198:mutate(TotalAbundance = rowSums(select(., -Family))) %>%
1521923778198:arrange(desc(TotalAbundance))
1521923778199:)
1521923778443:# Get top families by total abundance
1521923778443:top <- relAbundance %>%
1521923778444:top_n(nTopElements, TotalAbundance) %>%
1521923778444:select(-TotalAbundance)
1521923778452:# Group the rest of the families into the family "Others"
1521923778452:rest <- relAbundance %>%
1521923778453:top_n(-(nrow(relAbundance) - nTopElements), TotalAbundance) %>%
1521923778453:gather(Sample, Abundance, -Family) %>%
1521923778454:group_by(Sample) %>%
1521923778454:summarise(Total = sum(Abundance)) %>%
1521923778455:spread(Sample, Total) %>%
1521923778455:mutate(Family = c("Others")) %>%
1521923778456:select(Family, -TotalAbundance, everything()) %>%
1521923778456:select(-TotalAbundance)
1521923778488:# Bind top and rest families into a single table (tibble)
1521923778488:briefRelAbundance <- rbind.data.frame(top, rest)
1521923778491:# Get the order of families by total abundance (originally
1521923778492:# from relAbundance table)
1521923778492:orderedFamilies <- briefRelAbundance$Family
1521923778493:# Get the order of samples by the most abundant family
1521923778493:orderedSamples  <- names(sort(as.vector(as.data.frame(briefRelAbundance[1,-1]))))
1521923778496:# Change the order of Families and Samples
1521923778497:(briefRelAbundance <- briefRelAbundance %>%
1521923778497:gather(Sample, Abundance, -Family) %>%
1521923778498:spread(Family, Abundance) %>%
1521923778498:left_join(partialMetadata) %>%
1521923778499:gather(Family, Abundance, -Sample, -Population, -Evolution) %>%
1521923778500:mutate(Family = factor(Family, levels = rev(orderedFamilies))) %>%
1521923778500:mutate(Sample = factor(Sample, levels = orderedSamples)) # %>%
1521923778501:)
1521923778576:# Visualize colors
1521923778577:pal(rev(palette))
1521923778592:pal(palette)
1521923778790:# Plot Abundance --------------------------------------------------------
1521923778790:dataToPlot <- briefRelAbundance
1521923778791:# ggpubr ------------------------------------------------------------------
1521923778791:ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1521923778791:fill = "Family",               # change fill color by cyl
1521923778792:# color = "white",            # Set bar border colors to white
1521923778792:# palette = "jco",            # jco journal color palett. see ?ggpar
1521923778792:palette = rev(palette[1:(nTopElements+1)]),
1521923778793:# sort.val = "desc",          # Sort the value in dscending order
1521923778793:# sort.by.groups = FALSE,     # Don't sort inside each group
1521923778793:x.text.angle = 50 #, # Rotate vertically x axis texts
1521923778793:# position = "stack"
1521923778794:) +
1521923778794:facet_grid(~ Population, scales = "free_x") +
1521923778794:theme(panel.grid.major = element_blank(),
1521923778795:axis.text.x = element_text(angle = 50, hjust = 1),
1521923778795:strip.background = element_blank(),
1521923778795:panel.border = element_blank()
1521923778796:)
1521950509863:# Plot Abundance --------------------------------------------------------
1521950509864:dataToPlot <- metadata %>%
1521950509865:filter(Sample %in% samples) %>%
1521950509865:select(Sample, Evolution, Population = Residence,
1521950509866:Ae2, Aa1, Aea, Ae1) %>%
1521950509867:gather(Ancestry, Proportion, -Sample,
1521950509868:-Population, -Evolution) %>%
1521950509868:mutate(Sample = factor(Sample, levels = orderedSamples))
1521950509879:# ggpubr ------------------------------------------------------------------
1521950509879:ggbarplot(dataToPlot, x = "Sample", y = "Proportion",
1521950509879:fill = "Ancestry",               # change fill color by cyl
1521950509880:# color = "white",            # Set bar border colors to white
1521950509880:# palette = "jco",            # jco journal color palett. see ?ggpar
1521950509880:# palette = rev(palette[1:(nTopElements+1)]),
1521950509881:# sort.val = "desc",          # Sort the value in dscending order
1521950509881:# sort.by.groups = FALSE,     # Don't sort inside each group
1521950509881:x.text.angle = 50 #, # Rotate vertically x axis texts
1521950509882:# position = "stack"
1521950509883:) +
1521950509883:# facet_wrap(~ Population, scales = "free_x") +
1521950509884:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1521950509884:theme(panel.grid.major = element_blank(),
1521950509885:axis.text.x = element_text(angle = 50, hjust = 1),
1521950509885:strip.background = element_blank(),
1521950509886:panel.border = element_blank()
1521950509887:)
1521950538463:useOnlyGTSamples <- TRUE
1521950538868:dataGroups   <- c("Coast", "Mountain")
1521950539080:groupVar     <- "Population"
1521950539243:titles       <- c(dataGroups, "General\nProfile")
1521950539431:labels       <- c(y = "Relative Abundance")
1521950539597:nTopElements <- 10
1521950539829:# Get samples sequenced through GT
1521950539830:gtSamples <- metadata %>%
1521950539830:filter(Seq_Origin == "GT1" | Seq_Origin == "GT2") %>%
1521950539831:select(Sample)
1521950540069:tumacoSamples <- metadata %>%
1521950540069:filter(Additional_Sample == 1) %>%
1521950540070:select(Sample)
1521950540309:pull(gtSamples)
1521950540564:pull(tumacoSamples)
1521950551189:# Select samples
1521950551189:if (useOnlyGTSamples) {
1521950551190:# Indices for samples from GT only and Tumaco Additional Samples
1521950551191:samples <- pull(gtSamples)
1521950551192:} else {
1521950551192:# Include Tumaco additional samples
1521950551193:samples <- c(pull(gtSamples), pull(tumacoSamples))
1521950551193:}
1521950551195:# Indices of sample columns
1521950551195:samplesInd <- which(colnames(extData) %in% samples)
1521950551197:# Select metadata
1521950551197:partialMetadata <- metadata %>%
1521950551198:# filter(Included_In_Study == 1) %>%
1521950551198:filter(Sample %in% samples) %>%
1521950551199:select(Sample, Evolution, Population = Residence)
1521950551205:# Add "UNSUPPORTED MAPPING" to blank cells from the taxonomy columns
1521950551205:for(col in c("Class", "Order", "Family", "Genera", "Species")){
1521950551206:extData[extData[[col]] == "", col] = "UNSUPPORTED MAPPING"
1521950551206:}
1521950551214:# Add Reads column: total reads per OTU
1521950551215:extData <- extData %>%
1521950551216:mutate(Reads = rowSums(.[samplesInd]))
1521950551228:# Figure 2: Relative abundance (Family and Class) -------------------------
1521950551229:# Preparing data
1521950551229:# Calculate Relative Abundance per Family
1521950551229:(relAbundance <- extData %>%
1521950551230:group_by(Family) %>%                          # group by Family column
1521950551230:summarise_at(samplesInd, sum) %>%             # compute sum of reads for each Family
1521950551231:mutate_if(is.numeric, funs( . / sum(.))) %>%  # Normalize (rel. abundance)
1521950551231:mutate(TotalAbundance = rowSums(select(., -Family))) %>%
1521950551232:arrange(desc(TotalAbundance))
1521950551232:)
1521950551377:# Get top families by total abundance
1521950551378:top <- relAbundance %>%
1521950551378:top_n(nTopElements, TotalAbundance) %>%
1521950551378:select(-TotalAbundance)
1521950551382:# Group the rest of the families into the family "Others"
1521950551382:rest <- relAbundance %>%
1521950551382:top_n(-(nrow(relAbundance) - nTopElements), TotalAbundance) %>%
1521950551383:gather(Sample, Abundance, -Family) %>%
1521950551383:group_by(Sample) %>%
1521950551383:summarise(Total = sum(Abundance)) %>%
1521950551384:spread(Sample, Total) %>%
1521950551384:mutate(Family = c("Others")) %>%
1521950551384:select(Family, -TotalAbundance, everything()) %>%
1521950551384:select(-TotalAbundance)
1521950551400:# Bind top and rest families into a single table (tibble)
1521950551401:briefRelAbundance <- rbind.data.frame(top, rest)
1521950551402:# Get the order of families by total abundance (originally
1521950551402:# from relAbundance table)
1521950551403:orderedFamilies <- briefRelAbundance$Family
1521950551403:# Get the order of samples by the most abundant family
1521950551404:orderedSamples  <- names(sort(as.vector(as.data.frame(briefRelAbundance[1,-1]))))
1521950551405:# Change the order of Families and Samples
1521950551406:(briefRelAbundance <- briefRelAbundance %>%
1521950551406:gather(Sample, Abundance, -Family) %>%
1521950551406:spread(Family, Abundance) %>%
1521950551407:left_join(partialMetadata) %>%
1521950551407:gather(Family, Abundance, -Sample, -Population, -Evolution) %>%
1521950551407:mutate(Family = factor(Family, levels = rev(orderedFamilies))) %>%
1521950551407:mutate(Sample = factor(Sample, levels = orderedSamples)) # %>%
1521950551408:)
1521950551462:# Visualize colors
1521950551462:pal(rev(palette))
1521950551473:pal(palette)
1521950551591:# Plot Abundance --------------------------------------------------------
1521950551592:dataToPlot <- briefRelAbundance
1521950551592:# ggpubr ------------------------------------------------------------------
1521950551593:ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1521950551593:fill = "Family",               # change fill color by cyl
1521950551593:# color = "white",            # Set bar border colors to white
1521950551594:# palette = "jco",            # jco journal color palett. see ?ggpar
1521950551594:palette = rev(palette[1:(nTopElements+1)]),
1521950551594:# sort.val = "desc",          # Sort the value in dscending order
1521950551595:# sort.by.groups = FALSE,     # Don't sort inside each group
1521950551595:x.text.angle = 50 #, # Rotate vertically x axis texts
1521950551595:# position = "stack"
1521950551595:) +
1521950551596:facet_grid(~ Population, scales = "free_x") +
1521950551596:theme(panel.grid.major = element_blank(),
1521950551596:axis.text.x = element_text(angle = 50, hjust = 1),
1521950551597:strip.background = element_blank(),
1521950551597:panel.border = element_blank()
1521950551598:)
1521950583859:# ggpubr ------------------------------------------------------------------
1521950583860:ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1521950583861:fill = "Family",               # change fill color by cyl
1521950583862:# color = "white",            # Set bar border colors to white
1521950583863:# palette = "jco",            # jco journal color palett. see ?ggpar
1521950583864:palette = rev(palette[1:(nTopElements+1)]),
1521950583865:# sort.val = "desc",          # Sort the value in dscending order
1521950583866:# sort.by.groups = FALSE,     # Don't sort inside each group
1521950583866:x.text.angle = 50 #, # Rotate vertically x axis texts
1521950583867:# position = "stack"
1521950583868:) +
1521950583869:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1521950583869:theme(panel.grid.major = element_blank(),
1521950583870:axis.text.x = element_text(angle = 50, hjust = 1),
1521950583871:strip.background = element_blank(),
1521950583872:panel.border = element_blank()
1521950583872:)
1521950599739:metadata %>%
1521950599740:filter(Sample %in% samples) %>%
1521950599740:select(Sample, Evolution, Population = Residence,
1521950599740:Ae2, Aa1, Aea, Ae1) %>%
1521950599741:gather(Ancestry, Proportion, -Sample,
1521950599741:-Population, -Evolution) %>%
1521950599741:mutate(Sample = factor(Sample, levels = orderedSamples))
1521950599787:# Visualize colors
1521950599787:pal(rev(palette))
1521950599797:pal(palette)
1521950599947:# Plot Abundance --------------------------------------------------------
1521950599947:dataToPlot <- metadata %>%
1521950599947:filter(Sample %in% samples) %>%
1521950599948:select(Sample, Evolution, Population = Residence,
1521950599948:Ae2, Aa1, Aea, Ae1) %>%
1521950599949:gather(Ancestry, Proportion, -Sample,
1521950599949:-Population, -Evolution) %>%
1521950599949:mutate(Sample = factor(Sample, levels = orderedSamples))
1521950599956:# ggpubr ------------------------------------------------------------------
1521950599956:ggbarplot(dataToPlot, x = "Sample", y = "Proportion",
1521950599957:fill = "Ancestry",               # change fill color by cyl
1521950599957:# color = "white",            # Set bar border colors to white
1521950599957:# palette = "jco",            # jco journal color palett. see ?ggpar
1521950599958:# palette = rev(palette[1:(nTopElements+1)]),
1521950599958:# sort.val = "desc",          # Sort the value in dscending order
1521950599958:# sort.by.groups = FALSE,     # Don't sort inside each group
1521950599958:x.text.angle = 50 #, # Rotate vertically x axis texts
1521950599959:# position = "stack"
1521950599959:) +
1521950599959:# facet_wrap(~ Population, scales = "free_x") +
1521950599960:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1521950599960:theme(panel.grid.major = element_blank(),
1521950599960:axis.text.x = element_text(angle = 50, hjust = 1),
1521950599960:strip.background = element_blank(),
1521950599961:panel.border = element_blank()
1521950599961:)
1522026319162:# Figure 2
1522026319181:# Sources -----------------------------------------------------------------
1522026319182:# Packages ----------------------------------------------------------------
1522026319182:requiredPackages <- c("tidyverse", "rlang", "dendsort", "ggfortify", "ggpubr", "pheatmap",
1522026319183:"RColorBrewer", "vegan", "formatR")
1522026319183:installAndLoadPackages(requiredPackages)
1522026319184:source("scripts/auxiliary_functions.R")
1522026320144:# Loading Data ------------------------------------------------------------
1522026320144:extDataFile <- "data/gt_and_tumaco_samples.otu_table.tsv"
1522026320145:extData     <- read.delim(extDataFile, check.names = FALSE,
1522026320146:stringsAsFactors = F)
1522026320201:extData     <- as_tibble(extData)
1522026320202:attributes(extData)
1522026320227:metadataFile <- "data/metadata.tsv"
1522026320228:metadata     <- read_tsv(metadataFile)
1522026320228:attributes(metadata)
1522026320229:# General configuration ---------------------------------------------------
1522026320230:useOnlyGTSamples <- TRUE
1522026320230:dataGroups   <- c("Coast", "Mountain")
1522026320230:groupVar     <- "Population"
1522026320231:titles       <- c(dataGroups, "General\nProfile")
1522026320231:labels       <- c(y = "Relative Abundance")
1522026320232:nTopElements <- 10
1522026320233:# Preparing data ----------------------------------------------------------
1522026320233:# Get samples sequenced through GT
1522026320233:gtSamples <- metadata %>%
1522026320234:filter(Seq_Origin == "GT1" | Seq_Origin == "GT2") %>%
1522026320234:select(Sample)
1522026320235:tumacoSamples <- metadata %>%
1522026320235:filter(Additional_Sample == 1) %>%
1522026320235:select(Sample)
1522026320236:pull(gtSamples)
1522026320237:pull(tumacoSamples)
1522026320238:# Select samples
1522026320238:if (useOnlyGTSamples) {
1522026320238:# Indices for samples from GT only and Tumaco Additional Samples
1522026320239:samples <- pull(gtSamples)
1522026320239:} else {
1522026320239:# Include Tumaco additional samples
1522026320240:samples <- c(pull(gtSamples), pull(tumacoSamples))
1522026320240:}
1522026320240:# Indices of sample columns
1522026320241:samplesInd <- which(colnames(extData) %in% samples)
1522026320241:# Select metadata
1522026320242:partialMetadata <- metadata %>%
1522026320242:# filter(Included_In_Study == 1) %>%
1522026320242:filter(Sample %in% samples) %>%
1522026320243:select(Sample, Evolution, Population = Residence)
1522026320243:# Add "UNSUPPORTED MAPPING" to blank cells from the taxonomy columns
1522026320244:for(col in c("Class", "Order", "Family", "Genera", "Species")){
1522026320244:extData[extData[[col]] == "", col] = "UNSUPPORTED MAPPING"
1522026320244:}
1522026320250:# Add Reads column: total reads per OTU
1522026320250:extData <- extData %>%
1522026320251:mutate(Reads = rowSums(.[samplesInd]))
1522026320252:# Figure 2: Relative abundance (Family and Class) -------------------------
1522026320252:# Preparing data
1522026320253:# Calculate Relative Abundance per Family
1522026320253:(relAbundance <- extData %>%
1522026320253:group_by(Family) %>%                          # group by Family column
1522026320253:summarise_at(samplesInd, sum) %>%             # compute sum of reads for each Family
1522026320254:mutate_if(is.numeric, funs( . / sum(.))) %>%  # Normalize (rel. abundance)
1522026320254:mutate(TotalAbundance = rowSums(select(., -Family))) %>%
1522026320254:arrange(desc(TotalAbundance))
1522026320254:)
1522026320255:# Get top families by total abundance
1522026320256:top <- relAbundance %>%
1522026320256:top_n(nTopElements, TotalAbundance) %>%
1522026320256:select(-TotalAbundance)
1522026320257:# Group the rest of the families into the family "Others"
1522026320257:rest <- relAbundance %>%
1522026320257:top_n(-(nrow(relAbundance) - nTopElements), TotalAbundance) %>%
1522026320258:gather(Sample, Abundance, -Family) %>%
1522026320258:group_by(Sample) %>%
1522026320258:summarise(Total = sum(Abundance)) %>%
1522026320259:spread(Sample, Total) %>%
1522026320259:mutate(Family = c("Others")) %>%
1522026320259:select(Family, -TotalAbundance, everything()) %>%
1522026320259:select(-TotalAbundance)
1522026320260:# Bind top and rest families into a single table (tibble)
1522026320261:briefRelAbundance <- rbind.data.frame(top, rest)
1522026320264:# Get the order of families by total abundance (originally
1522026320265:# from relAbundance table)
1522026320265:orderedFamilies <- briefRelAbundance$Family
1522026320265:# Get the order of samples by the most abundant family
1522026320266:orderedSamples  <- names(sort(as.vector(as.data.frame(briefRelAbundance[1,-1]))))
1522026320267:# Change the order of Families and Samples
1522026320267:(briefRelAbundance <- briefRelAbundance %>%
1522026320268:gather(Sample, Abundance, -Family) %>%
1522026320268:spread(Family, Abundance) %>%
1522026320268:left_join(partialMetadata) %>%
1522026320269:gather(Family, Abundance, -Sample, -Population, -Evolution) %>%
1522026320269:mutate(Family = factor(Family, levels = rev(orderedFamilies))) %>%
1522026320269:mutate(Sample = factor(Sample, levels = orderedSamples)) # %>%
1522026320269:)
1522026320270:# Visualize colors
1522026320271:pal(rev(palette))
1522026320272:pal(palette)
1522026320302:# Plot Abundance --------------------------------------------------------
1522026320303:dataToPlot <- briefRelAbundance
1522026320304:# ggpubr ------------------------------------------------------------------
1522026320304:ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1522026320304:fill = "Family",               # change fill color by cyl
1522026320305:# color = "white",            # Set bar border colors to white
1522026320305:# palette = "jco",            # jco journal color palett. see ?ggpar
1522026320305:palette = rev(palette[1:(nTopElements+1)]),
1522026320306:# sort.val = "desc",          # Sort the value in dscending order
1522026320306:# sort.by.groups = FALSE,     # Don't sort inside each group
1522026320306:x.text.angle = 50 #, # Rotate vertically x axis texts
1522026320306:# position = "stack"
1522026320307:) +
1522026320307:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522026320307:theme(panel.grid.major = element_blank(),
1522026320308:axis.text.x = element_text(angle = 50, hjust = 1),
1522026320308:strip.background = element_blank(),
1522026320308:panel.border = element_blank()
1522026320309:)
1522026320310:metadata %>%
1522026320310:filter(Sample %in% samples) %>%
1522026320310:select(Sample, Evolution, Population = Residence,
1522026320311:Ae2, Aa1, Aea, Ae1) %>%
1522026320311:gather(Ancestry, Proportion, -Sample,
1522026320311:-Population, -Evolution) %>%
1522026320311:mutate(Sample = factor(Sample, levels = orderedSamples))
1522026320312:# Visualize colors
1522026320313:pal(rev(palette))
1522026320314:pal(palette)
1522026320319:# Plot Abundance --------------------------------------------------------
1522026320320:dataToPlot <- metadata %>%
1522026320320:filter(Sample %in% samples) %>%
1522026320320:select(Sample, Evolution, Population = Residence,
1522026320321:Ae2, Aa1, Aea, Ae1) %>%
1522026320321:gather(Ancestry, Proportion, -Sample,
1522026320321:-Population, -Evolution) %>%
1522026320322:mutate(Sample = factor(Sample, levels = orderedSamples))
1522026320323:# ggpubr ------------------------------------------------------------------
1522026320323:ggbarplot(dataToPlot, x = "Sample", y = "Proportion",
1522026320323:fill = "Ancestry",               # change fill color by cyl
1522026320323:# color = "white",            # Set bar border colors to white
1522026320324:# palette = "jco",            # jco journal color palett. see ?ggpar
1522026320324:# palette = rev(palette[1:(nTopElements+1)]),
1522026320324:# sort.val = "desc",          # Sort the value in dscending order
1522026320325:# sort.by.groups = FALSE,     # Don't sort inside each group
1522026320325:x.text.angle = 50 #, # Rotate vertically x axis texts
1522026320325:# position = "stack"
1522026320325:) +
1522026320326:# facet_wrap(~ Population, scales = "free_x") +
1522026320326:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522026320326:theme(panel.grid.major = element_blank(),
1522026320327:axis.text.x = element_text(angle = 50, hjust = 1),
1522026320327:strip.background = element_blank(),
1522026320327:panel.border = element_blank()
1522026320328:)
1522026320329:# ggpubr ------------------------------------------------------------------
1522026320329:ggbarplot(briefRelAbundance, x = "Sample", y = "Abundance",
1522026320329:fill = "Family",               # change fill color by cyl
1522026320329:# color = "white",            # Set bar border colors to white
1522026320330:# palette = "jco",            # jco journal color palett. see ?ggpar
1522026320330:# palette = rev(palette[1:(nTopElements+1)]),
1522026320331:# sort.val = "desc",          # Sort the value in dscending order
1522026320331:# sort.by.groups = FALSE,     # Don't sort inside each group
1522026320331:x.text.angle = 50 #, # Rotate vertically x axis texts
1522026320331:# position = "stack"
1522026320332:) +
1522026320332:# facet_wrap(~ Population, scales = "free_x") +
1522026320332:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522026320333:theme(panel.grid.major = element_blank(),
1522026320333:axis.text.x = element_text(angle = 50, hjust = 1),
1522026320333:strip.background = element_blank(),
1522026320334:panel.border = element_blank()
1522026320334:)
1522026393924:# Figure 2
1522026393926:# Sources -----------------------------------------------------------------
1522026393926:# Packages ----------------------------------------------------------------
1522026393927:requiredPackages <- c("tidyverse", "rlang", "dendsort", "ggfortify", "ggpubr", "pheatmap",
1522026393927:"RColorBrewer", "vegan", "formatR")
1522026393930:installAndLoadPackages(requiredPackages)
1522026404846:source("scripts/auxiliary_functions.R")
1522026404986:# Loading Data ------------------------------------------------------------
1522026404986:extDataFile <- "data/gt_and_tumaco_samples.otu_table.tsv"
1522026404987:extData     <- read.delim(extDataFile, check.names = FALSE,
1522026404987:stringsAsFactors = F)
1522026405031:extData     <- as_tibble(extData)
1522026405033:attributes(extData)
1522026405067:metadataFile <- "data/metadata.tsv"
1522026405067:metadata     <- read_tsv(metadataFile)
1522026405375:attributes(metadata)
1522026405428:# General configuration ---------------------------------------------------
1522026405429:useOnlyGTSamples <- FALSE
1522026405430:dataGroups   <- c("Coast", "Mountain")
1522026405430:groupVar     <- "Population"
1522026405430:titles       <- c(dataGroups, "General\nProfile")
1522026405431:labels       <- c(y = "Relative Abundance")
1522026405431:nTopElements <- 10
1522026405432:# Preparing data ----------------------------------------------------------
1522026405433:# Get samples sequenced through GT
1522026405433:gtSamples <- metadata %>%
1522026405433:filter(Seq_Origin == "GT1" | Seq_Origin == "GT2") %>%
1522026405433:select(Sample)
1522026405516:tumacoSamples <- metadata %>%
1522026405516:filter(Additional_Sample == 1) %>%
1522026405516:select(Sample)
1522026405551:pull(gtSamples)
1522026405553:pull(tumacoSamples)
1522026405555:# Select samples
1522026405555:if (useOnlyGTSamples) {
1522026405556:# Indices for samples from GT only and Tumaco Additional Samples
1522026405556:samples <- pull(gtSamples)
1522026405556:} else {
1522026405557:# Include Tumaco additional samples
1522026405557:samples <- c(pull(gtSamples), pull(tumacoSamples))
1522026405557:}
1522026405558:# Indices of sample columns
1522026405558:samplesInd <- which(colnames(extData) %in% samples)
1522026405559:# Select metadata
1522026405560:partialMetadata <- metadata %>%
1522026405560:# filter(Included_In_Study == 1) %>%
1522026405560:filter(Sample %in% samples) %>%
1522026405560:select(Sample, Evolution, Population = Residence)
1522026405564:# Add "UNSUPPORTED MAPPING" to blank cells from the taxonomy columns
1522026405564:for(col in c("Class", "Order", "Family", "Genera", "Species")){
1522026405565:extData[extData[[col]] == "", col] = "UNSUPPORTED MAPPING"
1522026405565:}
1522026405570:# Add Reads column: total reads per OTU
1522026405571:extData <- extData %>%
1522026405571:mutate(Reads = rowSums(.[samplesInd]))
1522026405578:# Figure 2: Relative abundance (Family and Class) -------------------------
1522026405579:# Preparing data
1522026405579:# Calculate Relative Abundance per Family
1522026405580:(relAbundance <- extData %>%
1522026405580:group_by(Family) %>%                          # group by Family column
1522026405580:summarise_at(samplesInd, sum) %>%             # compute sum of reads for each Family
1522026405581:mutate_if(is.numeric, funs( . / sum(.))) %>%  # Normalize (rel. abundance)
1522026405581:mutate(TotalAbundance = rowSums(select(., -Family))) %>%
1522026405581:arrange(desc(TotalAbundance))
1522026405582:)
1522026406199:# Get top families by total abundance
1522026406199:top <- relAbundance %>%
1522026406199:top_n(nTopElements, TotalAbundance) %>%
1522026406200:select(-TotalAbundance)
1522026406215:# Group the rest of the families into the family "Others"
1522026406216:rest <- relAbundance %>%
1522026406216:top_n(-(nrow(relAbundance) - nTopElements), TotalAbundance) %>%
1522026406216:gather(Sample, Abundance, -Family) %>%
1522026406217:group_by(Sample) %>%
1522026406217:summarise(Total = sum(Abundance)) %>%
1522026406217:spread(Sample, Total) %>%
1522026406217:mutate(Family = c("Others")) %>%
1522026406218:select(Family, -TotalAbundance, everything()) %>%
1522026406218:select(-TotalAbundance)
1522026406373:# Bind top and rest families into a single table (tibble)
1522026406373:briefRelAbundance <- rbind.data.frame(top, rest)
1522026406375:# Get the order of families by total abundance (originally
1522026406376:# from relAbundance table)
1522026406376:orderedFamilies <- briefRelAbundance$Family
1522026406376:# Get the order of samples by the most abundant family
1522026406377:orderedSamples  <- names(sort(as.vector(as.data.frame(briefRelAbundance[1,-1]))))
1522026406394:# Change the order of Families and Samples
1522026406395:(briefRelAbundance <- briefRelAbundance %>%
1522026406395:gather(Sample, Abundance, -Family) %>%
1522026406395:spread(Family, Abundance) %>%
1522026406396:left_join(partialMetadata) %>%
1522026406396:gather(Family, Abundance, -Sample, -Population, -Evolution) %>%
1522026406396:mutate(Family = factor(Family, levels = rev(orderedFamilies))) %>%
1522026406397:mutate(Sample = factor(Sample, levels = orderedSamples)) # %>%
1522026406397:)
1522026406614:# Visualize colors
1522026406614:pal(rev(palette))
1522026406618:pal(palette)
1522026406632:# Plot Abundance --------------------------------------------------------
1522026406633:dataToPlot <- briefRelAbundance
1522026406633:# ggpubr ------------------------------------------------------------------
1522026406634:ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1522026406634:fill = "Family",               # change fill color by cyl
1522026406634:# color = "white",            # Set bar border colors to white
1522026406635:# palette = "jco",            # jco journal color palett. see ?ggpar
1522026406635:palette = rev(palette[1:(nTopElements+1)]),
1522026406635:# sort.val = "desc",          # Sort the value in dscending order
1522026406636:# sort.by.groups = FALSE,     # Don't sort inside each group
1522026406636:x.text.angle = 50 #, # Rotate vertically x axis texts
1522026406636:# position = "stack"
1522026406636:) +
1522026406637:facet_grid(~ Population, scales = "free_x") +
1522026406637:theme(panel.grid.major = element_blank(),
1522026406637:axis.text.x = element_text(angle = 50, hjust = 1),
1522026406638:strip.background = element_blank(),
1522026406638:panel.border = element_blank()
1522026406638:)
1522027174678:# Figure 2
1522027174679:# Sources -----------------------------------------------------------------
1522027174679:# Packages ----------------------------------------------------------------
1522027174680:requiredPackages <- c("tidyverse", "rlang", "dendsort", "ggfortify", "ggpubr", "pheatmap",
1522027174680:"RColorBrewer", "vegan", "formatR")
1522027174681:installAndLoadPackages(requiredPackages)
1522027174686:source("scripts/auxiliary_functions.R")
1522027175193:# Loading Data ------------------------------------------------------------
1522027175194:extDataFile <- "data/gt_and_tumaco_samples.otu_table.tsv"
1522027175194:extData     <- read.delim(extDataFile, check.names = FALSE,
1522027175195:stringsAsFactors = F)
1522027175234:extData     <- as_tibble(extData)
1522027175236:attributes(extData)
1522027175264:metadataFile <- "data/metadata.tsv"
1522027175264:metadata     <- read_tsv(metadataFile)
1522027175375:attributes(metadata)
1522027175384:# General configuration ---------------------------------------------------
1522027175385:useOnlyGTSamples <- FALSE
1522027175385:dataGroups   <- c("Coast", "Mountain")
1522027175386:groupVar     <- "Population"
1522027175386:titles       <- c(dataGroups, "General\nProfile")
1522027175387:labels       <- c(y = "Relative Abundance")
1522027175387:nTopElements <- 10
1522027175388:# Preparing data ----------------------------------------------------------
1522027175388:# Get samples sequenced through GT
1522027175389:gtSamples <- metadata %>%
1522027175389:filter(Seq_Origin == "GT1" | Seq_Origin == "GT2") %>%
1522027175389:select(Sample)
1522027175392:tumacoSamples <- metadata %>%
1522027175393:filter(Additional_Sample == 1) %>%
1522027175393:select(Sample)
1522027175396:pull(gtSamples)
1522027175398:pull(tumacoSamples)
1522027175400:# Select samples
1522027175400:if (useOnlyGTSamples) {
1522027175401:# Indices for samples from GT only and Tumaco Additional Samples
1522027175401:samples <- pull(gtSamples)
1522027175401:} else {
1522027175401:# Include Tumaco additional samples
1522027175402:samples <- c(pull(gtSamples), pull(tumacoSamples))
1522027175402:}
1522027175403:# Indices of sample columns
1522027175403:samplesInd <- which(colnames(extData) %in% samples)
1522027175404:# Select metadata
1522027175405:partialMetadata <- metadata %>%
1522027175405:# filter(Included_In_Study == 1) %>%
1522027175405:filter(Sample %in% samples) %>%
1522027175405:select(Sample, Evolution, Population = Residence)
1522027175409:# Add "UNSUPPORTED MAPPING" to blank cells from the taxonomy columns
1522027175409:for(col in c("Class", "Order", "Family", "Genera", "Species")){
1522027175409:extData[extData[[col]] == "", col] = "UNSUPPORTED MAPPING"
1522027175410:}
1522027175414:# Add Reads column: total reads per OTU
1522027175415:extData <- extData %>%
1522027175415:mutate(Reads = rowSums(.[samplesInd]))
1522027175441:# Figure 2: Relative abundance (Family and Class) -------------------------
1522027175442:# Preparing data
1522027175442:# Calculate Relative Abundance per Family
1522027175443:(relAbundance <- extData %>%
1522027175443:group_by(Family) %>%                          # group by Family column
1522027175443:summarise_at(samplesInd, sum) %>%             # compute sum of reads for each Family
1522027175444:mutate_if(is.numeric, funs( . / sum(.))) %>%  # Normalize (rel. abundance)
1522027175444:mutate(TotalAbundance = rowSums(select(., -Family))) %>%
1522027175445:arrange(desc(TotalAbundance))
1522027175445:)
1522027175701:# Get top families by total abundance
1522027175701:top <- relAbundance %>%
1522027175702:top_n(nTopElements, TotalAbundance) %>%
1522027175702:select(-TotalAbundance)
1522027175706:# Group the rest of the families into the family "Others"
1522027175707:rest <- relAbundance %>%
1522027175707:top_n(-(nrow(relAbundance) - nTopElements), TotalAbundance) %>%
1522027175707:gather(Sample, Abundance, -Family) %>%
1522027175707:group_by(Sample) %>%
1522027175708:summarise(Total = sum(Abundance)) %>%
1522027175708:spread(Sample, Total) %>%
1522027175708:mutate(Family = c("Others")) %>%
1522027175709:select(Family, -TotalAbundance, everything()) %>%
1522027175709:select(-TotalAbundance)
1522027175740:# Bind top and rest families into a single table (tibble)
1522027175740:briefRelAbundance <- rbind.data.frame(top, rest)
1522027175743:# Get the order of families by total abundance (originally
1522027175744:# from relAbundance table)
1522027175744:orderedFamilies <- briefRelAbundance$Family
1522027175745:# Get the order of samples by the most abundant family
1522027175746:orderedSamples  <- names(sort(as.vector(as.data.frame(briefRelAbundance[1,-1]))))
1522027175749:# Change the order of Families and Samples
1522027175749:(briefRelAbundance <- briefRelAbundance %>%
1522027175750:gather(Sample, Abundance, -Family) %>%
1522027175750:spread(Family, Abundance) %>%
1522027175751:left_join(partialMetadata) %>%
1522027175751:gather(Family, Abundance, -Sample, -Population, -Evolution) %>%
1522027175752:mutate(Family = factor(Family, levels = rev(orderedFamilies))) %>%
1522027175752:mutate(Sample = factor(Sample, levels = orderedSamples)) # %>%
1522027175753:)
1522027175839:# Visualize colors
1522027175839:pal(rev(palette))
1522027175849:pal(palette)
1522027176008:# Plot Abundance --------------------------------------------------------
1522027176009:dataToPlot <- briefRelAbundance
1522027176010:# ggpubr ------------------------------------------------------------------
1522027176010:ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1522027176010:fill = "Family",               # change fill color by cyl
1522027176010:# color = "white",            # Set bar border colors to white
1522027176011:# palette = "jco",            # jco journal color palett. see ?ggpar
1522027176011:palette = rev(palette[1:(nTopElements+1)]),
1522027176011:# sort.val = "desc",          # Sort the value in dscending order
1522027176012:# sort.by.groups = FALSE,     # Don't sort inside each group
1522027176012:x.text.angle = 50 #, # Rotate vertically x axis texts
1522027176012:# position = "stack"
1522027176013:) +
1522027176013:facet_grid(~ Population, scales = "free_x") +
1522027176013:theme(panel.grid.major = element_blank(),
1522027176014:axis.text.x = element_text(angle = 50, hjust = 1),
1522027176014:strip.background = element_blank(),
1522027176014:panel.border = element_blank()
1522027176015:)
1522027192693:# Figure 2
1522027192693:# Sources -----------------------------------------------------------------
1522027192694:# Packages ----------------------------------------------------------------
1522027192694:requiredPackages <- c("tidyverse", "rlang", "dendsort", "ggfortify", "ggpubr", "pheatmap",
1522027192695:"RColorBrewer", "vegan", "formatR")
1522027192695:installAndLoadPackages(requiredPackages)
1522027192703:source("scripts/auxiliary_functions.R")
1522027192708:# Loading Data ------------------------------------------------------------
1522027192709:extDataFile <- "data/gt_and_tumaco_samples.otu_table.tsv"
1522027192710:extData     <- read.delim(extDataFile, check.names = FALSE,
1522027192710:stringsAsFactors = F)
1522027192749:extData     <- as_tibble(extData)
1522027192751:attributes(extData)
1522027192775:metadataFile <- "data/metadata.tsv"
1522027192775:metadata     <- read_tsv(metadataFile)
1522027192784:attributes(metadata)
1522027192794:# General configuration ---------------------------------------------------
1522027192794:useOnlyGTSamples <- TRUE
1522027192795:dataGroups   <- c("Coast", "Mountain")
1522027192795:groupVar     <- "Population"
1522027192796:titles       <- c(dataGroups, "General\nProfile")
1522027192796:labels       <- c(y = "Relative Abundance")
1522027192797:nTopElements <- 10
1522027192797:# Preparing data ----------------------------------------------------------
1522027192798:# Get samples sequenced through GT
1522027192798:gtSamples <- metadata %>%
1522027192799:filter(Seq_Origin == "GT1" | Seq_Origin == "GT2") %>%
1522027192799:select(Sample)
1522027192803:tumacoSamples <- metadata %>%
1522027192803:filter(Additional_Sample == 1) %>%
1522027192803:select(Sample)
1522027192806:pull(gtSamples)
1522027192808:pull(tumacoSamples)
1522027192809:# Select samples
1522027192810:if (useOnlyGTSamples) {
1522027192810:# Indices for samples from GT only and Tumaco Additional Samples
1522027192810:samples <- pull(gtSamples)
1522027192811:} else {
1522027192811:# Include Tumaco additional samples
1522027192811:samples <- c(pull(gtSamples), pull(tumacoSamples))
1522027192811:}
1522027192812:# Indices of sample columns
1522027192812:samplesInd <- which(colnames(extData) %in% samples)
1522027192813:# Select metadata
1522027192813:partialMetadata <- metadata %>%
1522027192814:# filter(Included_In_Study == 1) %>%
1522027192814:filter(Sample %in% samples) %>%
1522027192814:select(Sample, Evolution, Population = Residence)
1522027192817:# Add "UNSUPPORTED MAPPING" to blank cells from the taxonomy columns
1522027192818:for(col in c("Class", "Order", "Family", "Genera", "Species")){
1522027192818:extData[extData[[col]] == "", col] = "UNSUPPORTED MAPPING"
1522027192818:}
1522027192823:# Add Reads column: total reads per OTU
1522027192824:extData <- extData %>%
1522027192824:mutate(Reads = rowSums(.[samplesInd]))
1522027192829:# Figure 2: Relative abundance (Family and Class) -------------------------
1522027192830:# Preparing data
1522027192830:# Calculate Relative Abundance per Family
1522027192831:(relAbundance <- extData %>%
1522027192831:group_by(Family) %>%                          # group by Family column
1522027192831:summarise_at(samplesInd, sum) %>%             # compute sum of reads for each Family
1522027192831:mutate_if(is.numeric, funs( . / sum(.))) %>%  # Normalize (rel. abundance)
1522027192832:mutate(TotalAbundance = rowSums(select(., -Family))) %>%
1522027192832:arrange(desc(TotalAbundance))
1522027192832:)
1522027192998:# Get top families by total abundance
1522027192998:top <- relAbundance %>%
1522027192999:top_n(nTopElements, TotalAbundance) %>%
1522027192999:select(-TotalAbundance)
1522027193006:# Group the rest of the families into the family "Others"
1522027193006:rest <- relAbundance %>%
1522027193007:top_n(-(nrow(relAbundance) - nTopElements), TotalAbundance) %>%
1522027193007:gather(Sample, Abundance, -Family) %>%
1522027193007:group_by(Sample) %>%
1522027193008:summarise(Total = sum(Abundance)) %>%
1522027193008:spread(Sample, Total) %>%
1522027193008:mutate(Family = c("Others")) %>%
1522027193008:select(Family, -TotalAbundance, everything()) %>%
1522027193009:select(-TotalAbundance)
1522027193023:# Bind top and rest families into a single table (tibble)
1522027193024:briefRelAbundance <- rbind.data.frame(top, rest)
1522027193025:# Get the order of families by total abundance (originally
1522027193026:# from relAbundance table)
1522027193026:orderedFamilies <- briefRelAbundance$Family
1522027193026:# Get the order of samples by the most abundant family
1522027193027:orderedSamples  <- names(sort(as.vector(as.data.frame(briefRelAbundance[1,-1]))))
1522027193028:# Change the order of Families and Samples
1522027193029:(briefRelAbundance <- briefRelAbundance %>%
1522027193029:gather(Sample, Abundance, -Family) %>%
1522027193029:spread(Family, Abundance) %>%
1522027193029:left_join(partialMetadata) %>%
1522027193030:gather(Family, Abundance, -Sample, -Population, -Evolution) %>%
1522027193030:mutate(Family = factor(Family, levels = rev(orderedFamilies))) %>%
1522027193030:mutate(Sample = factor(Sample, levels = orderedSamples)) # %>%
1522027193031:)
1522027193087:# Visualize colors
1522027193088:pal(rev(palette))
1522027193098:pal(palette)
1522027193259:# Plot Abundance --------------------------------------------------------
1522027193259:dataToPlot <- briefRelAbundance
1522027193260:# ggpubr ------------------------------------------------------------------
1522027193260:ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1522027193260:fill = "Family",               # change fill color by cyl
1522027193261:# color = "white",            # Set bar border colors to white
1522027193261:# palette = "jco",            # jco journal color palett. see ?ggpar
1522027193261:palette = rev(palette[1:(nTopElements+1)]),
1522027193261:# sort.val = "desc",          # Sort the value in dscending order
1522027193262:# sort.by.groups = FALSE,     # Don't sort inside each group
1522027193262:x.text.angle = 50 #, # Rotate vertically x axis texts
1522027193262:# position = "stack"
1522027193263:) +
1522027193263:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522027193263:theme(panel.grid.major = element_blank(),
1522027193264:axis.text.x = element_text(angle = 50, hjust = 1),
1522027193264:strip.background = element_blank(),
1522027193264:panel.border = element_blank()
1522027193265:)
1522027193742:metadata %>%
1522027193743:filter(Sample %in% samples) %>%
1522027193743:select(Sample, Evolution, Population = Residence,
1522027193743:Ae2, Aa1, Aea, Ae1) %>%
1522027193744:gather(Ancestry, Proportion, -Sample,
1522027193744:-Population, -Evolution) %>%
1522027193744:mutate(Sample = factor(Sample, levels = orderedSamples))
1522027193790:# Visualize colors
1522027193790:pal(rev(palette))
1522027193951:pal(palette)
1522027194101:# Plot Abundance --------------------------------------------------------
1522027194102:dataToPlot <- metadata %>%
1522027194102:filter(Sample %in% samples) %>%
1522027194102:select(Sample, Evolution, Population = Residence,
1522027194103:Ae2, Aa1, Aea, Ae1) %>%
1522027194103:gather(Ancestry, Proportion, -Sample,
1522027194103:-Population, -Evolution) %>%
1522027194103:mutate(Sample = factor(Sample, levels = orderedSamples))
1522027194110:# ggpubr ------------------------------------------------------------------
1522027194111:ggbarplot(dataToPlot, x = "Sample", y = "Proportion",
1522027194111:fill = "Ancestry",               # change fill color by cyl
1522027194111:# color = "white",            # Set bar border colors to white
1522027194112:# palette = "jco",            # jco journal color palett. see ?ggpar
1522027194112:# palette = rev(palette[1:(nTopElements+1)]),
1522027194112:# sort.val = "desc",          # Sort the value in dscending order
1522027194112:# sort.by.groups = FALSE,     # Don't sort inside each group
1522027194113:x.text.angle = 50 #, # Rotate vertically x axis texts
1522027194113:# position = "stack"
1522027194113:) +
1522027194114:# facet_wrap(~ Population, scales = "free_x") +
1522027194114:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522027194114:theme(panel.grid.major = element_blank(),
1522027194114:axis.text.x = element_text(angle = 50, hjust = 1),
1522027194115:strip.background = element_blank(),
1522027194115:panel.border = element_blank()
1522027194115:)
1522027202246:# Figure 2
1522027202247:# Sources -----------------------------------------------------------------
1522027202248:# Packages ----------------------------------------------------------------
1522027202248:requiredPackages <- c("tidyverse", "rlang", "dendsort", "ggfortify", "ggpubr", "pheatmap",
1522027202249:"RColorBrewer", "vegan", "formatR")
1522027202250:installAndLoadPackages(requiredPackages)
1522027202252:source("scripts/auxiliary_functions.R")
1522027202264:# Loading Data ------------------------------------------------------------
1522027202264:extDataFile <- "data/gt_and_tumaco_samples.otu_table.tsv"
1522027202265:extData     <- read.delim(extDataFile, check.names = FALSE,
1522027202265:stringsAsFactors = F)
1522027202305:extData     <- as_tibble(extData)
1522027202307:attributes(extData)
1522027202337:metadataFile <- "data/metadata.tsv"
1522027202337:metadata     <- read_tsv(metadataFile)
1522027202345:attributes(metadata)
1522027202355:# General configuration ---------------------------------------------------
1522027202355:useOnlyGTSamples <- TRUE
1522027202356:dataGroups   <- c("Coast", "Mountain")
1522027202356:groupVar     <- "Population"
1522027202357:titles       <- c(dataGroups, "General\nProfile")
1522027202357:labels       <- c(y = "Relative Abundance")
1522027202358:nTopElements <- 10
1522027202358:# Preparing data ----------------------------------------------------------
1522027202359:# Get samples sequenced through GT
1522027202359:gtSamples <- metadata %>%
1522027202359:filter(Seq_Origin == "GT1" | Seq_Origin == "GT2") %>%
1522027202360:select(Sample)
1522027202363:tumacoSamples <- metadata %>%
1522027202363:filter(Additional_Sample == 1) %>%
1522027202363:select(Sample)
1522027202366:pull(gtSamples)
1522027202368:pull(tumacoSamples)
1522027202370:# Select samples
1522027202370:if (useOnlyGTSamples) {
1522027202370:# Indices for samples from GT only and Tumaco Additional Samples
1522027202371:samples <- pull(gtSamples)
1522027202371:} else {
1522027202371:# Include Tumaco additional samples
1522027202372:samples <- c(pull(gtSamples), pull(tumacoSamples))
1522027202372:}
1522027202373:# Indices of sample columns
1522027202373:samplesInd <- which(colnames(extData) %in% samples)
1522027202374:# Select metadata
1522027202374:partialMetadata <- metadata %>%
1522027202374:# filter(Included_In_Study == 1) %>%
1522027202374:filter(Sample %in% samples) %>%
1522027202375:select(Sample, Evolution, Population = Residence)
1522027202378:# Add "UNSUPPORTED MAPPING" to blank cells from the taxonomy columns
1522027202378:for(col in c("Class", "Order", "Family", "Genera", "Species")){
1522027202379:extData[extData[[col]] == "", col] = "UNSUPPORTED MAPPING"
1522027202379:}
1522027202384:# Add Reads column: total reads per OTU
1522027202384:extData <- extData %>%
1522027202385:mutate(Reads = rowSums(.[samplesInd]))
1522027202392:# Figure 2: Relative abundance (Family and Class) -------------------------
1522027202392:# Preparing data
1522027202393:# Calculate Relative Abundance per Family
1522027202393:(relAbundance <- extData %>%
1522027202393:group_by(Family) %>%                          # group by Family column
1522027202394:summarise_at(samplesInd, sum) %>%             # compute sum of reads for each Family
1522027202394:mutate_if(is.numeric, funs( . / sum(.))) %>%  # Normalize (rel. abundance)
1522027202394:mutate(TotalAbundance = rowSums(select(., -Family))) %>%
1522027202395:arrange(desc(TotalAbundance))
1522027202395:)
1522027202564:# Get top families by total abundance
1522027202564:top <- relAbundance %>%
1522027202565:top_n(nTopElements, TotalAbundance) %>%
1522027202565:select(-TotalAbundance)
1522027202569:# Group the rest of the families into the family "Others"
1522027202569:rest <- relAbundance %>%
1522027202569:top_n(-(nrow(relAbundance) - nTopElements), TotalAbundance) %>%
1522027202570:gather(Sample, Abundance, -Family) %>%
1522027202570:group_by(Sample) %>%
1522027202570:summarise(Total = sum(Abundance)) %>%
1522027202571:spread(Sample, Total) %>%
1522027202571:mutate(Family = c("Others")) %>%
1522027202571:select(Family, -TotalAbundance, everything()) %>%
1522027202572:select(-TotalAbundance)
1522027202588:# Bind top and rest families into a single table (tibble)
1522027202588:briefRelAbundance <- rbind.data.frame(top, rest)
1522027202590:# Get the order of families by total abundance (originally
1522027202590:# from relAbundance table)
1522027202590:orderedFamilies <- briefRelAbundance$Family
1522027202591:# Get the order of samples by the most abundant family
1522027202591:orderedSamples  <- names(sort(as.vector(as.data.frame(briefRelAbundance[1,-1]))))
1522027202592:# Change the order of Families and Samples
1522027202593:(briefRelAbundance <- briefRelAbundance %>%
1522027202593:gather(Sample, Abundance, -Family) %>%
1522027202593:spread(Family, Abundance) %>%
1522027202594:left_join(partialMetadata) %>%
1522027202594:gather(Family, Abundance, -Sample, -Population, -Evolution) %>%
1522027202594:mutate(Family = factor(Family, levels = rev(orderedFamilies))) %>%
1522027202594:mutate(Sample = factor(Sample, levels = orderedSamples)) # %>%
1522027202595:)
1522027202655:# Visualize colors
1522027202655:pal(rev(palette))
1522027202669:pal(palette)
1522027202793:# Plot Abundance --------------------------------------------------------
1522027202793:dataToPlot <- briefRelAbundance
1522027202794:# ggpubr ------------------------------------------------------------------
1522027202794:ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1522027202795:fill = "Family",               # change fill color by cyl
1522027202795:# color = "white",            # Set bar border colors to white
1522027202795:# palette = "jco",            # jco journal color palett. see ?ggpar
1522027202796:palette = rev(palette[1:(nTopElements+1)]),
1522027202796:# sort.val = "desc",          # Sort the value in dscending order
1522027202796:# sort.by.groups = FALSE,     # Don't sort inside each group
1522027202797:x.text.angle = 50 #, # Rotate vertically x axis texts
1522027202797:# position = "stack"
1522027202797:) +
1522027202797:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522027202798:theme(panel.grid.major = element_blank(),
1522027202798:axis.text.x = element_text(angle = 50, hjust = 1),
1522027202798:strip.background = element_blank(),
1522027202799:panel.border = element_blank()
1522027202799:)
1522027203264:metadata %>%
1522027203264:filter(Sample %in% samples) %>%
1522027203265:select(Sample, Evolution, Population = Residence,
1522027203265:Ae2, Aa1, Aea, Ae1) %>%
1522027203265:gather(Ancestry, Proportion, -Sample,
1522027203266:-Population, -Evolution) %>%
1522027203266:mutate(Sample = factor(Sample, levels = orderedSamples))
1522027203311:# Visualize colors
1522027203312:pal(rev(palette))
1522027203616:pal(palette)
1522027203759:# Plot Abundance --------------------------------------------------------
1522027203760:dataToPlot <- metadata %>%
1522027203760:filter(Sample %in% samples) %>%
1522027203760:select(Sample, Evolution, Population = Residence,
1522027203761:Ae2, Aa1, Aea, Ae1) %>%
1522027203761:gather(Ancestry, Proportion, -Sample,
1522027203761:-Population, -Evolution) %>%
1522027203762:mutate(Sample = factor(Sample, levels = orderedSamples))
1522027203769:# ggpubr ------------------------------------------------------------------
1522027203769:ggbarplot(dataToPlot, x = "Sample", y = "Proportion",
1522027203769:fill = "Ancestry",               # change fill color by cyl
1522027203769:# color = "white",            # Set bar border colors to white
1522027203770:# palette = "jco",            # jco journal color palett. see ?ggpar
1522027203770:# palette = rev(palette[1:(nTopElements+1)]),
1522027203770:# sort.val = "desc",          # Sort the value in dscending order
1522027203771:# sort.by.groups = FALSE,     # Don't sort inside each group
1522027203771:x.text.angle = 50 #, # Rotate vertically x axis texts
1522027203771:# position = "stack"
1522027203772:) +
1522027203772:# facet_wrap(~ Population, scales = "free_x") +
1522027203772:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522027203773:theme(panel.grid.major = element_blank(),
1522027203773:axis.text.x = element_text(angle = 50, hjust = 1),
1522027203773:strip.background = element_blank(),
1522027203773:panel.border = element_blank()
1522027203774:)
1522027341947:# ggpubr ------------------------------------------------------------------
1522027341948:ggbarplot(dataToPlot, x = "Sample", y = "Proportion",
1522027341949:fill = "Ancestry",               # change fill color by cyl
1522027341949:# color = "white",            # Set bar border colors to white
1522027341950:# palette = "jco",            # jco journal color palett. see ?ggpar
1522027341950:# palette = rev(palette[1:(nTopElements+1)]),
1522027341950:# sort.val = "desc",          # Sort the value in dscending order
1522027341951:# sort.by.groups = FALSE,     # Don't sort inside each group
1522027341951:x.text.angle = 50, #, # Rotate vertically x axis texts
1522027341952:position = position_dodge(width=0.5)
1522027341952:) +
1522027341953:# facet_wrap(~ Population, scales = "free_x") +
1522027341953:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522027341954:theme(panel.grid.major = element_blank(),
1522027341954:axis.text.x = element_text(angle = 50, hjust = 1),
1522027341955:strip.background = element_blank(),
1522027341955:panel.border = element_blank()
1522027341956:)
1522027360221:# ggpubr ------------------------------------------------------------------
1522027360221:ggbarplot(dataToPlot, x = "Sample", y = "Proportion",
1522027360222:fill = "Ancestry",               # change fill color by cyl
1522027360223:# color = "white",            # Set bar border colors to white
1522027360223:# palette = "jco",            # jco journal color palett. see ?ggpar
1522027360223:# palette = rev(palette[1:(nTopElements+1)]),
1522027360224:# sort.val = "desc",          # Sort the value in dscending order
1522027360224:# sort.by.groups = FALSE,     # Don't sort inside each group
1522027360225:x.text.angle = 50 #, # Rotate vertically x axis texts
1522027360225:# position = "stack"
1522027360226:) +
1522027360226:# facet_wrap(~ Population, scales = "free_x") +
1522027360226:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522027360227:theme(panel.grid.major = element_blank(),
1522027360227:axis.text.x = element_text(angle = 50, hjust = 1),
1522027360228:strip.background = element_blank(),
1522027360228:panel.border = element_blank()
1522027360229:)
1522027550538:# ggpubr ------------------------------------------------------------------
1522027550538:ggbarplot(dataToPlot, x = "Sample", y = "Proportion",
1522027550539:fill = "Ancestry",               # change fill color by cyl
1522027550539:# color = "white",            # Set bar border colors to white
1522027550540:# palette = "jco",            # jco journal color palett. see ?ggpar
1522027550540:# palette = rev(palette[1:(nTopElements+1)]),
1522027550541:# sort.val = "desc",          #f- Sort the value in dscending order
1522027550541:# sort.by.groups = FALSE,     # Don't sort inside each group
1522027550542:x.text.angle = 50, # Rotate vertically x axis texts
1522027550542:position = position_stack(width = 0.5)
1522027550542:) +
1522027550543:# facet_wrap(~ Population, scales = "free_x") +
1522027550543:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522027550544:theme(panel.grid.major = element_blank(),
1522027550544:axis.text.x = element_text(angle = 50, hjust = 1),
1522027550545:strip.background = element_blank(),
1522027550545:panel.border = element_blank()
1522027550546:)
1522027615201:# ggpubr ------------------------------------------------------------------
1522027615202:ggbarplot(dataToPlot, x = "Sample", y = "Proportion",
1522027615203:fill = "Ancestry",               # change fill color by cyl
1522027615203:# color = "white",            # Set bar border colors to white
1522027615204:# palette = "jco",            # jco journal color palett. see ?ggpar
1522027615204:# palette = rev(palette[1:(nTopElements+1)]),
1522027615205:# sort.val = "desc",          #f- Sort the value in dscending order
1522027615205:# sort.by.groups = FALSE,     # Don't sort inside each group
1522027615206:x.text.angle = 50, # Rotate vertically x axis texts
1522027615206:position = position_stack()
1522027615207:) +
1522027615207:# facet_wrap(~ Population, scales = "free_x") +
1522027615208:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522027615208:theme(panel.grid.major = element_blank(),
1522027615209:axis.text.x = element_text(angle = 50, hjust = 1),
1522027615209:strip.background = element_blank(),
1522027615210:panel.border = element_blank()
1522027615211:)
1522027699941:# ggpubr ------------------------------------------------------------------
1522027699942:ggbarplot(dataToPlot, x = "Sample", y = "Proportion",
1522027699942:fill = "Ancestry",               # change fill color by cyl
1522027699943:# color = "white",            # Set bar border colors to white
1522027699943:# palette = "jco",            # jco journal color palett. see ?ggpar
1522027699943:# palette = rev(palette[1:(nTopElements+1)]),
1522027699944:# sort.val = "desc",          #f- Sort the value in dscending order
1522027699944:# sort.by.groups = FALSE,     # Don't sort inside each group
1522027699944:x.text.angle = 50, # Rotate vertically x axis texts
1522027699945:width = 1
1522027699945:) +
1522027699945:# facet_wrap(~ Population, scales = "free_x") +
1522027699946:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522027699946:theme(panel.grid.major = element_blank(),
1522027699946:axis.text.x = element_text(angle = 50, hjust = 1),
1522027699947:strip.background = element_blank(),
1522027699947:panel.border = element_blank()
1522027699947:)
1522027789991:# ggpubr ------------------------------------------------------------------
1522027789991:abundancePLot <- ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1522027789992:fill = "Family",               # change fill color by cyl
1522027789992:# color = "white",            # Set bar border colors to white
1522027789993:# palette = "jco",            # jco journal color palett. see ?ggpar
1522027789993:palette = rev(palette[1:(nTopElements+1)]),
1522027789994:# sort.val = "desc",          # Sort the value in dscending order
1522027789994:# sort.by.groups = FALSE,     # Don't sort inside each group
1522027789995:x.text.angle = 50 #, # Rotate vertically x axis texts
1522027789995:# position = "stack"
1522027789996:) +
1522027789996:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522027789996:theme(panel.grid.major = element_blank(),
1522027789997:axis.text.x = element_text(angle = 50, hjust = 1),
1522027789997:strip.background = element_blank(),
1522027789998:panel.border = element_blank()
1522027789998:)
1522027796936:# ggpubr ------------------------------------------------------------------
1522027796937:abundancePLot <- ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1522027796937:fill = "Family",               # change fill color by cyl
1522027796938:# color = "white",            # Set bar border colors to white
1522027796938:# palette = "jco",            # jco journal color palett. see ?ggpar
1522027796939:palette = rev(palette[1:(nTopElements+1)]),
1522027796939:# sort.val = "desc",          # Sort the value in dscending order
1522027796940:# sort.by.groups = FALSE,     # Don't sort inside each group
1522027796940:x.text.angle = 50 #, # Rotate vertically x axis texts
1522027796940:# position = "stack"
1522027796941:) +
1522027796941:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522027796942:theme(panel.grid.major = element_blank(),
1522027796942:axis.text.x = element_text(angle = 50, hjust = 1),
1522027796943:strip.background = element_blank(),
1522027796943:panel.border = element_blank()
1522027796944:)
1522027802645:# Figure 2
1522027802647:# Sources -----------------------------------------------------------------
1522027802648:# Packages ----------------------------------------------------------------
1522027802649:requiredPackages <- c("tidyverse", "rlang", "dendsort", "ggfortify", "ggpubr", "pheatmap",
1522027802650:"RColorBrewer", "vegan", "formatR")
1522027802652:installAndLoadPackages(requiredPackages)
1522027802661:source("scripts/auxiliary_functions.R")
1522027802675:# Loading Data ------------------------------------------------------------
1522027802676:extDataFile <- "data/gt_and_tumaco_samples.otu_table.tsv"
1522027802677:extData     <- read.delim(extDataFile, check.names = FALSE,
1522027802678:stringsAsFactors = F)
1522027802735:extData     <- as_tibble(extData)
1522027802739:attributes(extData)
1522027802773:metadataFile <- "data/metadata.tsv"
1522027802773:metadata     <- read_tsv(metadataFile)
1522027802782:attributes(metadata)
1522027802792:# General configuration ---------------------------------------------------
1522027802792:useOnlyGTSamples <- TRUE
1522027802793:dataGroups   <- c("Coast", "Mountain")
1522027802793:groupVar     <- "Population"
1522027802794:titles       <- c(dataGroups, "General\nProfile")
1522027802794:labels       <- c(y = "Relative Abundance")
1522027802794:nTopElements <- 10
1522027802795:# Preparing data ----------------------------------------------------------
1522027802796:# Get samples sequenced through GT
1522027802796:gtSamples <- metadata %>%
1522027802796:filter(Seq_Origin == "GT1" | Seq_Origin == "GT2") %>%
1522027802797:select(Sample)
1522027802800:tumacoSamples <- metadata %>%
1522027802801:filter(Additional_Sample == 1) %>%
1522027802801:select(Sample)
1522027802805:pull(gtSamples)
1522027802807:pull(tumacoSamples)
1522027802808:# Select samples
1522027802809:if (useOnlyGTSamples) {
1522027802809:# Indices for samples from GT only and Tumaco Additional Samples
1522027802809:samples <- pull(gtSamples)
1522027802809:} else {
1522027802810:# Include Tumaco additional samples
1522027802810:samples <- c(pull(gtSamples), pull(tumacoSamples))
1522027802810:}
1522027802811:# Indices of sample columns
1522027802812:samplesInd <- which(colnames(extData) %in% samples)
1522027802812:# Select metadata
1522027802813:partialMetadata <- metadata %>%
1522027802813:# filter(Included_In_Study == 1) %>%
1522027802813:filter(Sample %in% samples) %>%
1522027802814:select(Sample, Evolution, Population = Residence)
1522027802818:# Add "UNSUPPORTED MAPPING" to blank cells from the taxonomy columns
1522027802818:for(col in c("Class", "Order", "Family", "Genera", "Species")){
1522027802819:extData[extData[[col]] == "", col] = "UNSUPPORTED MAPPING"
1522027802819:}
1522027802825:# Add Reads column: total reads per OTU
1522027802825:extData <- extData %>%
1522027802825:mutate(Reads = rowSums(.[samplesInd]))
1522027802832:# Figure 2: Relative abundance (Family and Class) -------------------------
1522027802833:# Preparing data
1522027802833:# Calculate Relative Abundance per Family
1522027802833:(relAbundance <- extData %>%
1522027802834:group_by(Family) %>%                          # group by Family column
1522027802834:summarise_at(samplesInd, sum) %>%             # compute sum of reads for each Family
1522027802834:mutate_if(is.numeric, funs( . / sum(.))) %>%  # Normalize (rel. abundance)
1522027802835:mutate(TotalAbundance = rowSums(select(., -Family))) %>%
1522027802835:arrange(desc(TotalAbundance))
1522027802835:)
1522027803014:# Get top families by total abundance
1522027803014:top <- relAbundance %>%
1522027803014:top_n(nTopElements, TotalAbundance) %>%
1522027803014:select(-TotalAbundance)
1522027803018:# Group the rest of the families into the family "Others"
1522027803018:rest <- relAbundance %>%
1522027803019:top_n(-(nrow(relAbundance) - nTopElements), TotalAbundance) %>%
1522027803019:gather(Sample, Abundance, -Family) %>%
1522027803019:group_by(Sample) %>%
1522027803020:summarise(Total = sum(Abundance)) %>%
1522027803020:spread(Sample, Total) %>%
1522027803020:mutate(Family = c("Others")) %>%
1522027803021:select(Family, -TotalAbundance, everything()) %>%
1522027803021:select(-TotalAbundance)
1522027803036:# Bind top and rest families into a single table (tibble)
1522027803037:briefRelAbundance <- rbind.data.frame(top, rest)
1522027803038:# Get the order of families by total abundance (originally
1522027803038:# from relAbundance table)
1522027803039:orderedFamilies <- briefRelAbundance$Family
1522027803039:# Get the order of samples by the most abundant family
1522027803040:orderedSamples  <- names(sort(as.vector(as.data.frame(briefRelAbundance[1,-1]))))
1522027803042:# Change the order of Families and Samples
1522027803042:(briefRelAbundance <- briefRelAbundance %>%
1522027803043:gather(Sample, Abundance, -Family) %>%
1522027803043:spread(Family, Abundance) %>%
1522027803043:left_join(partialMetadata) %>%
1522027803044:gather(Family, Abundance, -Sample, -Population, -Evolution) %>%
1522027803044:mutate(Family = factor(Family, levels = rev(orderedFamilies))) %>%
1522027803044:mutate(Sample = factor(Sample, levels = orderedSamples)) # %>%
1522027803045:)
1522027803099:# Visualize colors
1522027803099:pal(rev(palette))
1522027803109:pal(palette)
1522027803239:# Plot Abundance --------------------------------------------------------
1522027803239:dataToPlot <- briefRelAbundance
1522027804911:# ggpubr ------------------------------------------------------------------
1522027804912:abundancePLot <- ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1522027804912:fill = "Family",               # change fill color by cyl
1522027804913:# color = "white",            # Set bar border colors to white
1522027804913:# palette = "jco",            # jco journal color palett. see ?ggpar
1522027804914:palette = rev(palette[1:(nTopElements+1)]),
1522027804914:# sort.val = "desc",          # Sort the value in dscending order
1522027804915:# sort.by.groups = FALSE,     # Don't sort inside each group
1522027804915:x.text.angle = 50 #, # Rotate vertically x axis texts
1522027804915:# position = "stack"
1522027804916:) +
1522027804916:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522027804917:theme(panel.grid.major = element_blank(),
1522027804917:axis.text.x = element_text(angle = 50, hjust = 1),
1522027804918:strip.background = element_blank(),
1522027804918:panel.border = element_blank()
1522027804918:)
1522027808295:abundancePLot
1522027825158:# ggpubr ------------------------------------------------------------------
1522027825159:abundancePLot <- ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1522027825160:fill = "Family",               # change fill color by cyl
1522027825161:# color = "white",            # Set bar border colors to white
1522027825161:# palette = "jco",            # jco journal color palett. see ?ggpar
1522027825162:palette = rev(palette[1:(nTopElements+1)]),
1522027825163:# sort.val = "desc",          # Sort the value in dscending order
1522027825164:# sort.by.groups = FALSE,     # Don't sort inside each group
1522027825165:x.text.angle = 50, # Rotate vertically x axis texts
1522027825166:width = 1
1522027825167:) +
1522027825167:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522027825168:theme(panel.grid.major = element_blank(),
1522027825169:axis.text.x = element_text(angle = 50, hjust = 1),
1522027825170:strip.background = element_blank(),
1522027825171:panel.border = element_blank()
1522027825172:)
1522027827356:abundancePLot
1522027980552:(finalPlot <- ggarrange(abundancePLot# + rremove("xlab")
1522027980553:# + theme(plot.margin = unit(c(1,2,1,1), "mm"))
1522027980553:, ancestryPlot# + rremove("y.text") + rremove("y.axis")
1522027980554:# + rremove("ylab") + rremove("y.ticks")
1522027980555:# + theme(plot.margin = unit(c(1,5,1,0), "mm"))
1522027980555:# , pGeneral
1522027980556:# + theme(plot.margin = unit(c(1,4,1,1), "mm"))
1522027980557:# + rremove("y.text") + rremove("y.axis") + rremove("ylab") + rremove("y.ticks")
1522027980558:# # ramPlot + theme(plot.margin = unit(c(1,18,1,1), "mm")) + rremove("y.text"),
1522027980560:# , labels = c("A", "", "B")
1522027980561:# , ncol = 3, nrow = 1
1522027980562:# , widths = widths
1522027980563:# , align = "h"
1522027980564:# , common.legend = TRUE
1522027980565:# , legend = c("bottom")
1522027980565:))
1522027985044:# ggpubr ------------------------------------------------------------------
1522027985044:ancestryPlot <- ggbarplot(dataToPlot, x = "Sample", y = "Proportion",
1522027985044:fill = "Ancestry",               # change fill color by cyl
1522027985045:# color = "white",            # Set bar border colors to white
1522027985045:# palette = "jco",            # jco journal color palett. see ?ggpar
1522027985045:# palette = rev(palette[1:(nTopElements+1)]),
1522027985046:# sort.val = "desc",          #f- Sort the value in dscending order
1522027985046:# sort.by.groups = FALSE,     # Don't sort inside each group
1522027985046:x.text.angle = 50, # Rotate vertically x axis texts
1522027985047:width = 1
1522027985047:) +
1522027985047:# facet_wrap(~ Population, scales = "free_x") +
1522027985048:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522027985048:theme(panel.grid.major = element_blank(),
1522027985048:axis.text.x = element_text(angle = 50, hjust = 1),
1522027985049:strip.background = element_blank(),
1522027985049:panel.border = element_blank()
1522027985050:)
1522027987374:# Figure 2
1522027987375:# Sources -----------------------------------------------------------------
1522027987377:# Packages ----------------------------------------------------------------
1522027987378:requiredPackages <- c("tidyverse", "rlang", "dendsort", "ggfortify", "ggpubr", "pheatmap",
1522027987378:"RColorBrewer", "vegan", "formatR")
1522027987380:installAndLoadPackages(requiredPackages)
1522027987389:source("scripts/auxiliary_functions.R")
1522027987402:# Loading Data ------------------------------------------------------------
1522027987403:extDataFile <- "data/gt_and_tumaco_samples.otu_table.tsv"
1522027987404:extData     <- read.delim(extDataFile, check.names = FALSE,
1522027987404:stringsAsFactors = F)
1522027987465:extData     <- as_tibble(extData)
1522027987467:attributes(extData)
1522027987497:metadataFile <- "data/metadata.tsv"
1522027987497:metadata     <- read_tsv(metadataFile)
1522027987515:attributes(metadata)
1522027987525:# General configuration ---------------------------------------------------
1522027987526:useOnlyGTSamples <- TRUE
1522027987526:dataGroups   <- c("Coast", "Mountain")
1522027987527:groupVar     <- "Population"
1522027987528:titles       <- c(dataGroups, "General\nProfile")
1522027987528:labels       <- c(y = "Relative Abundance")
1522027987529:nTopElements <- 10
1522027987530:# Preparing data ----------------------------------------------------------
1522027987531:# Get samples sequenced through GT
1522027987531:gtSamples <- metadata %>%
1522027987532:filter(Seq_Origin == "GT1" | Seq_Origin == "GT2") %>%
1522027987532:select(Sample)
1522027987536:tumacoSamples <- metadata %>%
1522027987537:filter(Additional_Sample == 1) %>%
1522027987537:select(Sample)
1522027987540:pull(gtSamples)
1522027987542:pull(tumacoSamples)
1522027987544:# Select samples
1522027987544:if (useOnlyGTSamples) {
1522027987544:# Indices for samples from GT only and Tumaco Additional Samples
1522027987545:samples <- pull(gtSamples)
1522027987545:} else {
1522027987545:# Include Tumaco additional samples
1522027987546:samples <- c(pull(gtSamples), pull(tumacoSamples))
1522027987546:}
1522027987547:# Indices of sample columns
1522027987547:samplesInd <- which(colnames(extData) %in% samples)
1522027987548:# Select metadata
1522027987548:partialMetadata <- metadata %>%
1522027987548:# filter(Included_In_Study == 1) %>%
1522027987548:filter(Sample %in% samples) %>%
1522027987549:select(Sample, Evolution, Population = Residence)
1522027987552:# Add "UNSUPPORTED MAPPING" to blank cells from the taxonomy columns
1522027987553:for(col in c("Class", "Order", "Family", "Genera", "Species")){
1522027987553:extData[extData[[col]] == "", col] = "UNSUPPORTED MAPPING"
1522027987553:}
1522027987559:# Add Reads column: total reads per OTU
1522027987560:extData <- extData %>%
1522027987560:mutate(Reads = rowSums(.[samplesInd]))
1522027987566:# Figure 2: Relative abundance (Family and Class) -------------------------
1522027987567:# Preparing data
1522027987567:# Calculate Relative Abundance per Family
1522027987567:(relAbundance <- extData %>%
1522027987568:group_by(Family) %>%                          # group by Family column
1522027987568:summarise_at(samplesInd, sum) %>%             # compute sum of reads for each Family
1522027987568:mutate_if(is.numeric, funs( . / sum(.))) %>%  # Normalize (rel. abundance)
1522027987569:mutate(TotalAbundance = rowSums(select(., -Family))) %>%
1522027987569:arrange(desc(TotalAbundance))
1522027987569:)
1522027987886:# Get top families by total abundance
1522027987886:top <- relAbundance %>%
1522027987887:top_n(nTopElements, TotalAbundance) %>%
1522027987887:select(-TotalAbundance)
1522027987890:# Group the rest of the families into the family "Others"
1522027987891:rest <- relAbundance %>%
1522027987891:top_n(-(nrow(relAbundance) - nTopElements), TotalAbundance) %>%
1522027987891:gather(Sample, Abundance, -Family) %>%
1522027987892:group_by(Sample) %>%
1522027987892:summarise(Total = sum(Abundance)) %>%
1522027987892:spread(Sample, Total) %>%
1522027987892:mutate(Family = c("Others")) %>%
1522027987893:select(Family, -TotalAbundance, everything()) %>%
1522027987893:select(-TotalAbundance)
1522027987910:# Bind top and rest families into a single table (tibble)
1522027987911:briefRelAbundance <- rbind.data.frame(top, rest)
1522027987913:# Get the order of families by total abundance (originally
1522027987913:# from relAbundance table)
1522027987914:orderedFamilies <- briefRelAbundance$Family
1522027987915:# Get the order of samples by the most abundant family
1522027987915:orderedSamples  <- names(sort(as.vector(as.data.frame(briefRelAbundance[1,-1]))))
1522027987918:# Change the order of Families and Samples
1522027987919:(briefRelAbundance <- briefRelAbundance %>%
1522027987919:gather(Sample, Abundance, -Family) %>%
1522027987920:spread(Family, Abundance) %>%
1522027987920:left_join(partialMetadata) %>%
1522027987921:gather(Family, Abundance, -Sample, -Population, -Evolution) %>%
1522027987921:mutate(Family = factor(Family, levels = rev(orderedFamilies))) %>%
1522027987921:mutate(Sample = factor(Sample, levels = orderedSamples)) # %>%
1522027987922:)
1522027987976:# Visualize colors
1522027987977:pal(rev(palette))
1522027987986:pal(palette)
1522027988148:# Plot Abundance --------------------------------------------------------
1522027988148:dataToPlot <- briefRelAbundance
1522027988149:# ggpubr ------------------------------------------------------------------
1522027988149:abundancePLot <- ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1522027988149:fill = "Family",               # change fill color by cyl
1522027988150:# color = "white",            # Set bar border colors to white
1522027988150:# palette = "jco",            # jco journal color palett. see ?ggpar
1522027988150:palette = rev(palette[1:(nTopElements+1)]),
1522027988150:# sort.val = "desc",          # Sort the value in dscending order
1522027988151:# sort.by.groups = FALSE,     # Don't sort inside each group
1522027988151:x.text.angle = 50, # Rotate vertically x axis texts
1522027988151:width = 1
1522027988152:) +
1522027988152:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522027988152:theme(panel.grid.major = element_blank(),
1522027988153:axis.text.x = element_text(angle = 50, hjust = 1),
1522027988153:strip.background = element_blank(),
1522027988153:panel.border = element_blank()
1522027988154:)
1522027988180:metadata %>%
1522027988180:filter(Sample %in% samples) %>%
1522027988181:select(Sample, Evolution, Population = Residence,
1522027988181:Ae2, Aa1, Aea, Ae1) %>%
1522027988181:gather(Ancestry, Proportion, -Sample,
1522027988181:-Population, -Evolution) %>%
1522027988182:mutate(Sample = factor(Sample, levels = orderedSamples))
1522027988385:# Visualize colors
1522027988385:pal(rev(palette))
1522027988389:pal(palette)
1522027988534:# Plot Abundance --------------------------------------------------------
1522027988534:dataToPlot <- metadata %>%
1522027988534:filter(Sample %in% samples) %>%
1522027988535:select(Sample, Evolution, Population = Residence,
1522027988535:Ae2, Aa1, Aea, Ae1) %>%
1522027988535:gather(Ancestry, Proportion, -Sample,
1522027988536:-Population, -Evolution) %>%
1522027988536:mutate(Sample = factor(Sample, levels = orderedSamples))
1522027988543:# ggpubr ------------------------------------------------------------------
1522027988543:ancestryPlot <- ggbarplot(dataToPlot, x = "Sample", y = "Proportion",
1522027988544:fill = "Ancestry",               # change fill color by cyl
1522027988544:# color = "white",            # Set bar border colors to white
1522027988544:# palette = "jco",            # jco journal color palett. see ?ggpar
1522027988545:# palette = rev(palette[1:(nTopElements+1)]),
1522027988545:# sort.val = "desc",          #f- Sort the value in dscending order
1522027988545:# sort.by.groups = FALSE,     # Don't sort inside each group
1522027988546:x.text.angle = 50, # Rotate vertically x axis texts
1522027988546:width = 1
1522027988547:) +
1522027988547:# facet_wrap(~ Population, scales = "free_x") +
1522027988547:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522027988548:theme(panel.grid.major = element_blank(),
1522027988548:axis.text.x = element_text(angle = 50, hjust = 1),
1522027988548:strip.background = element_blank(),
1522027988549:panel.border = element_blank()
1522027988549:)
1522027997235:ancestryPlot
1522028001626:abundancePLot
1522028005727:(finalPlot <- ggarrange(abundancePLot# + rremove("xlab")
1522028005727:# + theme(plot.margin = unit(c(1,2,1,1), "mm"))
1522028005728:, ancestryPlot# + rremove("y.text") + rremove("y.axis")
1522028005729:# + rremove("ylab") + rremove("y.ticks")
1522028005729:# + theme(plot.margin = unit(c(1,5,1,0), "mm"))
1522028005730:# , pGeneral
1522028005730:# + theme(plot.margin = unit(c(1,4,1,1), "mm"))
1522028005731:# + rremove("y.text") + rremove("y.axis") + rremove("ylab") + rremove("y.ticks")
1522028005731:# # ramPlot + theme(plot.margin = unit(c(1,18,1,1), "mm")) + rremove("y.text"),
1522028005732:# , labels = c("A", "", "B")
1522028005732:# , ncol = 3, nrow = 1
1522028005733:# , widths = widths
1522028005733:# , align = "h"
1522028005733:# , common.legend = TRUE
1522028005734:# , legend = c("bottom")
1522028005734:))
1522028051919:(finalPlot <- ggarrange(abundancePLot# + rremove("xlab")
1522028051919:# + theme(plot.margin = unit(c(1,2,1,1), "mm"))
1522028051919:, ancestryPlot# + rremove("y.text") + rremove("y.axis")
1522028051920:# + rremove("ylab") + rremove("y.ticks")
1522028051920:# + theme(plot.margin = unit(c(1,5,1,0), "mm"))
1522028051921:# , pGeneral
1522028051922:# + theme(plot.margin = unit(c(1,4,1,1), "mm"))
1522028051922:# + rremove("y.text") + rremove("y.axis") + rremove("ylab") + rremove("y.ticks")
1522028051923:# # ramPlot + theme(plot.margin = unit(c(1,18,1,1), "mm")) + rremove("y.text"),
1522028051923:# , labels = c("A", "", "B")
1522028051924:, ncol = 1, nrow = 2
1522028051924:# , widths = widths
1522028051925:# , align = "h"
1522028051925:# , common.legend = TRUE
1522028051926:# , legend = c("bottom")
1522028051926:))
1522028101609:(finalPlot <- ggarrange(abundancePLot + rremove("xlab")
1522028101609:# + theme(plot.margin = unit(c(1,2,1,1), "mm"))
1522028101610:, ancestryPlot# + rremove("y.text") + rremove("y.axis")
1522028101610:# + rremove("ylab") + rremove("y.ticks")
1522028101611:# + theme(plot.margin = unit(c(1,5,1,0), "mm"))
1522028101611:# , pGeneral
1522028101612:# + theme(plot.margin = unit(c(1,4,1,1), "mm"))
1522028101612:# + rremove("y.text") + rremove("y.axis") + rremove("ylab") + rremove("y.ticks")
1522028101613:# # ramPlot + theme(plot.margin = unit(c(1,18,1,1), "mm")) + rremove("y.text"),
1522028101613:# , labels = c("A", "", "B")
1522028101614:, ncol = 1, nrow = 2
1522028101614:# , widths = widths
1522028101615:# , align = "h"
1522028101615:# , common.legend = TRUE
1522028101616:# , legend = c("bottom")
1522028101616:))
1522028152803:(finalPlot <- ggarrange(abundancePLot + rremove("xlab", "axis.ticks.x")
1522028152804:# + theme(plot.margin = unit(c(1,2,1,1), "mm"))
1522028152805:, ancestryPlot# + rremove("y.text") + rremove("y.axis")
1522028152806:# + rremove("ylab") + rremove("y.ticks")
1522028152806:# + theme(plot.margin = unit(c(1,5,1,0), "mm"))
1522028152807:# , pGeneral
1522028152807:# + theme(plot.margin = unit(c(1,4,1,1), "mm"))
1522028152808:# + rremove("y.text") + rremove("y.axis") + rremove("ylab") + rremove("y.ticks")
1522028152808:# # ramPlot + theme(plot.margin = unit(c(1,18,1,1), "mm")) + rremove("y.text"),
1522028152809:# , labels = c("A", "", "B")
1522028152809:, ncol = 1, nrow = 2
1522028152810:# , widths = widths
1522028152810:# , align = "h"
1522028152811:# , common.legend = TRUE
1522028152811:# , legend = c("bottom")
1522028152812:))
1522028169026:(finalPlot <- ggarrange(abundancePLot + rremove("xlab", "x.axis")
1522028169027:# + theme(plot.margin = unit(c(1,2,1,1), "mm"))
1522028169027:, ancestryPlot# + rremove("y.text") + rremove("y.axis")
1522028169027:# + rremove("ylab") + rremove("y.ticks")
1522028169028:# + theme(plot.margin = unit(c(1,5,1,0), "mm"))
1522028169028:# , pGeneral
1522028169028:# + theme(plot.margin = unit(c(1,4,1,1), "mm"))
1522028169029:# + rremove("y.text") + rremove("y.axis") + rremove("ylab") + rremove("y.ticks")
1522028169029:# # ramPlot + theme(plot.margin = unit(c(1,18,1,1), "mm")) + rremove("y.text"),
1522028169029:# , labels = c("A", "", "B")
1522028169030:, ncol = 1, nrow = 2
1522028169030:# , widths = widths
1522028169030:# , align = "h"
1522028169031:# , common.legend = TRUE
1522028169031:# , legend = c("bottom")
1522028169031:))
1522028211655:(finalPlot <- ggarrange(abundancePLot + rremove("xlab") + rremove("x.axis")
1522028211656:# + theme(plot.margin = unit(c(1,2,1,1), "mm"))
1522028211657:, ancestryPlot# + rremove("y.text") + rremove("y.axis")
1522028211658:# + rremove("ylab") + rremove("y.ticks")
1522028211658:# + theme(plot.margin = unit(c(1,5,1,0), "mm"))
1522028211659:# , pGeneral
1522028211659:# + theme(plot.margin = unit(c(1,4,1,1), "mm"))
1522028211659:# + rremove("y.text") + rremove("y.axis") + rremove("ylab") + rremove("y.ticks")
1522028211660:# # ramPlot + theme(plot.margin = unit(c(1,18,1,1), "mm")) + rremove("y.text"),
1522028211660:# , labels = c("A", "", "B")
1522028211661:, ncol = 1, nrow = 2
1522028211661:# , widths = widths
1522028211661:# , align = "h"
1522028211662:# , common.legend = TRUE
1522028211662:# , legend = c("bottom")
1522028211662:))
1522028246572:(finalPlot <- ggarrange(abundancePLot + rremove("xlab") + rremove("x.axis") + rremove("x.text")
1522028246573:# + theme(plot.margin = unit(c(1,2,1,1), "mm"))
1522028246573:, ancestryPlot# + rremove("y.text") + rremove("y.axis")
1522028246574:# + rremove("ylab") + rremove("y.ticks")
1522028246574:# + theme(plot.margin = unit(c(1,5,1,0), "mm"))
1522028246574:# , pGeneral
1522028246575:# + theme(plot.margin = unit(c(1,4,1,1), "mm"))
1522028246575:# + rremove("y.text") + rremove("y.axis") + rremove("ylab") + rremove("y.ticks")
1522028246575:# # ramPlot + theme(plot.margin = unit(c(1,18,1,1), "mm")) + rremove("y.text"),
1522028246576:# , labels = c("A", "", "B")
1522028246576:, ncol = 1, nrow = 2
1522028246576:# , widths = widths
1522028246577:# , align = "h"
1522028246577:# , common.legend = TRUE
1522028246577:# , legend = c("bottom")
1522028246578:))
1522029335754:# ggpubr ------------------------------------------------------------------
1522029335755:ancestryPlot <- ggbarplot(dataToPlot, x = "Sample", y = "Proportion",
1522029335755:fill = "Ancestry",               # change fill color by cyl
1522029335756:# color = "white",            # Set bar border colors to white
1522029335757:# palette = "jco",            # jco journal color palett. see ?ggpar
1522029335757:# palette = rev(palette[1:(nTopElements+1)]),
1522029335758:palette = c("#00AFBB", "#E7B800", "#FC4E07"),
1522029335758:# sort.val = "desc",          #f- Sort the value in dscending order
1522029335759:# sort.by.groups = FALSE,     # Don't sort inside each group
1522029335759:x.text.angle = 50, # Rotate vertically x axis texts
1522029335760:width = 1
1522029335760:) +
1522029335761:# facet_wrap(~ Population, scales = "free_x") +
1522029335761:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522029335762:theme(panel.grid.major = element_blank(),
1522029335762:axis.text.x = element_text(angle = 50, hjust = 1),
1522029335763:strip.background = element_blank(),
1522029335764:panel.border = element_blank()
1522029335764:)
1522029345408:ancestryPlot
1522029903282:# ggpubr ------------------------------------------------------------------
1522029903283:ancestryPlot <- ggbarplot(dataToPlot, x = "Sample", y = "Proportion",
1522029903283:fill = "Ancestry",               # change fill color by cyl
1522029903284:# color = "white",            # Set bar border colors to white
1522029903284:# palette = "jco",            # jco journal color palett. see ?ggpar
1522029903284:# palette = rev(palette[1:(nTopElements+1)]),
1522029903285:palette = c("#00AFBB", "#E7B800", "#FC4E07", "darkgrey"),
1522029903285:# sort.val = "desc",          #f- Sort the value in dscending order
1522029903285:# sort.by.groups = FALSE,     # Don't sort inside each group
1522029903286:x.text.angle = 50, # Rotate vertically x axis texts
1522029903286:width = 1
1522029903286:) +
1522029903287:# facet_wrap(~ Population, scales = "free_x") +
1522029903287:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522029903287:theme(panel.grid.major = element_blank(),
1522029903288:axis.text.x = element_text(angle = 50, hjust = 1),
1522029903288:strip.background = element_blank(),
1522029903289:panel.border = element_blank()
1522029903289:)
1522029906218:ancestryPlot
1522029949432:(finalPlot <- ggarrange(abundancePLot + rremove("xlab") + rremove("x.axis") + rremove("x.text")
1522029949432:# + theme(plot.margin = unit(c(1,2,1,1), "mm"))
1522029949433:, ancestryPlot# + rremove("y.text") + rremove("y.axis")
1522029949434:# + rremove("ylab") + rremove("y.ticks")
1522029949434:# + theme(plot.margin = unit(c(1,5,1,0), "mm"))
1522029949435:# , pGeneral
1522029949436:# + theme(plot.margin = unit(c(1,4,1,1), "mm"))
1522029949436:# + rremove("y.text") + rremove("y.axis") + rremove("ylab") + rremove("y.ticks")
1522029949436:# # ramPlot + theme(plot.margin = unit(c(1,18,1,1), "mm")) + rremove("y.text"),
1522029949437:# , labels = c("A", "", "B")
1522029949437:, ncol = 1, nrow = 2
1522029949438:# , widths = widths
1522029949438:# , align = "h"
1522029949439:# , common.legend = TRUE
1522029949439:# , legend = c("bottom")
1522029949440:))
1522029993906:(finalPlot <- ggarrange(abundancePLot + rremove("xlab") + rremove("x.axis") + rremove("x.text") + rremove("x.ticks")
1522029993907:# + theme(plot.margin = unit(c(1,2,1,1), "mm"))
1522029993907:, ancestryPlot# + rremove("y.text") + rremove("y.axis")
1522029993908:# + rremove("ylab") + rremove("y.ticks")
1522029993908:# + theme(plot.margin = unit(c(1,5,1,0), "mm"))
1522029993909:# , pGeneral
1522029993909:# + theme(plot.margin = unit(c(1,4,1,1), "mm"))
1522029993910:# + rremove("y.text") + rremove("y.axis") + rremove("ylab") + rremove("y.ticks")
1522029993911:# # ramPlot + theme(plot.margin = unit(c(1,18,1,1), "mm")) + rremove("y.text"),
1522029993911:# , labels = c("A", "", "B")
1522029993912:, ncol = 1, nrow = 2
1522029993912:# , widths = widths
1522029993913:# , align = "h"
1522029993913:# , common.legend = TRUE
1522029993914:# , legend = c("bottom")
1522029993914:))
1522030127821:ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1522030127821:fill = "Family",               # change fill color by cyl
1522030127822:# color = "white",            # Set bar border colors to white
1522030127822:# palette = "jco",            # jco journal color palett. see ?ggpar
1522030127823:palette = rev(palette[1:(nTopElements+1)]),
1522030127823:# sort.val = "desc",          # Sort the value in dscending order
1522030127823:# sort.by.groups = FALSE,     # Don't sort inside each group
1522030127824:x.text.angle = 50, # Rotate vertically x axis texts
1522030127824:width = 1
1522030127824:) +
1522030127825:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522030127825:theme(panel.grid.major = element_blank(),
1522030127825:axis.text.x = element_text(angle = 50, hjust = 1),
1522030127826:strip.background = element_blank(),
1522030127826:panel.border = element_blank(),
1522030127826:legend.position = "left"
1522030127827:)
1522030133194:# ggpubr ------------------------------------------------------------------
1522030133195:abundancePLot <- ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1522030133196:fill = "Family",               # change fill color by cyl
1522030133196:# color = "white",            # Set bar border colors to white
1522030133197:# palette = "jco",            # jco journal color palett. see ?ggpar
1522030133197:palette = rev(palette[1:(nTopElements+1)]),
1522030133198:# sort.val = "desc",          # Sort the value in dscending order
1522030133198:# sort.by.groups = FALSE,     # Don't sort inside each group
1522030133199:x.text.angle = 50, # Rotate vertically x axis texts
1522030133199:width = 1
1522030133200:) +
1522030133200:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522030133200:theme(panel.grid.major = element_blank(),
1522030133201:axis.text.x = element_text(angle = 50, hjust = 1),
1522030133201:strip.background = element_blank(),
1522030133202:panel.border = element_blank(),
1522030133202:legend.position = "left"
1522030133203:)
1522030136925:# ggpubr ------------------------------------------------------------------
1522030136926:abundancePLot <- ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1522030136926:fill = "Family",               # change fill color by cyl
1522030136927:# color = "white",            # Set bar border colors to white
1522030136927:# palette = "jco",            # jco journal color palett. see ?ggpar
1522030136928:palette = rev(palette[1:(nTopElements+1)]),
1522030136929:# sort.val = "desc",          # Sort the value in dscending order
1522030136929:# sort.by.groups = FALSE,     # Don't sort inside each group
1522030136930:x.text.angle = 50, # Rotate vertically x axis texts
1522030136931:width = 1
1522030136931:) +
1522030136932:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522030136932:theme(panel.grid.major = element_blank(),
1522030136933:axis.text.x = element_text(angle = 50, hjust = 1),
1522030136933:strip.background = element_blank(),
1522030136934:panel.border = element_blank(),
1522030136934:legend.position = "left"
1522030136935:)
1522030140298:# Figure 2
1522030140299:# Sources -----------------------------------------------------------------
1522030140300:# Packages ----------------------------------------------------------------
1522030140300:requiredPackages <- c("tidyverse", "rlang", "dendsort", "ggfortify", "ggpubr", "pheatmap",
1522030140301:"RColorBrewer", "vegan", "formatR")
1522030140302:installAndLoadPackages(requiredPackages)
1522030140306:source("scripts/auxiliary_functions.R")
1522030140312:# Loading Data ------------------------------------------------------------
1522030140313:extDataFile <- "data/gt_and_tumaco_samples.otu_table.tsv"
1522030140313:extData     <- read.delim(extDataFile, check.names = FALSE,
1522030140313:stringsAsFactors = F)
1522030140373:extData     <- as_tibble(extData)
1522030140376:attributes(extData)
1522030140422:metadataFile <- "data/metadata.tsv"
1522030140422:metadata     <- read_tsv(metadataFile)
1522030140436:attributes(metadata)
1522030140453:# General configuration ---------------------------------------------------
1522030140454:useOnlyGTSamples <- TRUE
1522030140455:dataGroups   <- c("Coast", "Mountain")
1522030140455:groupVar     <- "Population"
1522030140456:titles       <- c(dataGroups, "General\nProfile")
1522030140457:labels       <- c(y = "Relative Abundance")
1522030140458:nTopElements <- 10
1522030140459:# Preparing data ----------------------------------------------------------
1522030140460:# Get samples sequenced through GT
1522030140460:gtSamples <- metadata %>%
1522030140461:filter(Seq_Origin == "GT1" | Seq_Origin == "GT2") %>%
1522030140461:select(Sample)
1522030140468:tumacoSamples <- metadata %>%
1522030140469:filter(Additional_Sample == 1) %>%
1522030140469:select(Sample)
1522030140475:pull(gtSamples)
1522030140478:pull(tumacoSamples)
1522030140481:# Select samples
1522030140482:if (useOnlyGTSamples) {
1522030140482:# Indices for samples from GT only and Tumaco Additional Samples
1522030140482:samples <- pull(gtSamples)
1522030140483:} else {
1522030140483:# Include Tumaco additional samples
1522030140484:samples <- c(pull(gtSamples), pull(tumacoSamples))
1522030140484:}
1522030140486:# Indices of sample columns
1522030140486:samplesInd <- which(colnames(extData) %in% samples)
1522030140487:# Select metadata
1522030140488:partialMetadata <- metadata %>%
1522030140488:# filter(Included_In_Study == 1) %>%
1522030140489:filter(Sample %in% samples) %>%
1522030140489:select(Sample, Evolution, Population = Residence)
1522030140495:# Add "UNSUPPORTED MAPPING" to blank cells from the taxonomy columns
1522030140495:for(col in c("Class", "Order", "Family", "Genera", "Species")){
1522030140496:extData[extData[[col]] == "", col] = "UNSUPPORTED MAPPING"
1522030140496:}
1522030140505:# Add Reads column: total reads per OTU
1522030140506:extData <- extData %>%
1522030140506:mutate(Reads = rowSums(.[samplesInd]))
1522030140516:# Figure 2: Relative abundance (Family and Class) -------------------------
1522030140517:# Preparing data
1522030140518:# Calculate Relative Abundance per Family
1522030140518:(relAbundance <- extData %>%
1522030140519:group_by(Family) %>%                          # group by Family column
1522030140519:summarise_at(samplesInd, sum) %>%             # compute sum of reads for each Family
1522030140519:mutate_if(is.numeric, funs( . / sum(.))) %>%  # Normalize (rel. abundance)
1522030140520:mutate(TotalAbundance = rowSums(select(., -Family))) %>%
1522030140520:arrange(desc(TotalAbundance))
1522030140521:)
1522030140743:# Get top families by total abundance
1522030140744:top <- relAbundance %>%
1522030140744:top_n(nTopElements, TotalAbundance) %>%
1522030140745:select(-TotalAbundance)
1522030140751:# Group the rest of the families into the family "Others"
1522030140751:rest <- relAbundance %>%
1522030140752:top_n(-(nrow(relAbundance) - nTopElements), TotalAbundance) %>%
1522030140752:gather(Sample, Abundance, -Family) %>%
1522030140753:group_by(Sample) %>%
1522030140754:summarise(Total = sum(Abundance)) %>%
1522030140754:spread(Sample, Total) %>%
1522030140755:mutate(Family = c("Others")) %>%
1522030140755:select(Family, -TotalAbundance, everything()) %>%
1522030140756:select(-TotalAbundance)
1522030140781:# Bind top and rest families into a single table (tibble)
1522030140781:briefRelAbundance <- rbind.data.frame(top, rest)
1522030140784:# Get the order of families by total abundance (originally
1522030140784:# from relAbundance table)
1522030140785:orderedFamilies <- briefRelAbundance$Family
1522030140786:# Get the order of samples by the most abundant family
1522030140786:orderedSamples  <- names(sort(as.vector(as.data.frame(briefRelAbundance[1,-1]))))
1522030140789:# Change the order of Families and Samples
1522030140789:(briefRelAbundance <- briefRelAbundance %>%
1522030140790:gather(Sample, Abundance, -Family) %>%
1522030140790:spread(Family, Abundance) %>%
1522030140791:left_join(partialMetadata) %>%
1522030140791:gather(Family, Abundance, -Sample, -Population, -Evolution) %>%
1522030140792:mutate(Family = factor(Family, levels = rev(orderedFamilies))) %>%
1522030140792:mutate(Sample = factor(Sample, levels = orderedSamples)) # %>%
1522030140793:)
1522030140873:# Visualize colors
1522030140873:pal(rev(palette))
1522030140887:pal(palette)
1522030141317:# Plot Abundance --------------------------------------------------------
1522030141318:dataToPlot <- briefRelAbundance
1522030144564:# ggpubr ------------------------------------------------------------------
1522030144565:abundancePLot <- ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1522030144566:fill = "Family",               # change fill color by cyl
1522030144567:# color = "white",            # Set bar border colors to white
1522030144567:# palette = "jco",            # jco journal color palett. see ?ggpar
1522030144568:palette = rev(palette[1:(nTopElements+1)]),
1522030144568:# sort.val = "desc",          # Sort the value in dscending order
1522030144569:# sort.by.groups = FALSE,     # Don't sort inside each group
1522030144569:x.text.angle = 50, # Rotate vertically x axis texts
1522030144570:width = 1
1522030144570:) +
1522030144571:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522030144572:theme(panel.grid.major = element_blank(),
1522030144572:axis.text.x = element_text(angle = 50, hjust = 1),
1522030144572:strip.background = element_blank(),
1522030144573:panel.border = element_blank(),
1522030144573:legend.position = "left"
1522030144574:)
1522030146933:abundancePLot
1522030167924:# ggpubr ------------------------------------------------------------------
1522030167925:(abundancePLot <- ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1522030167925:fill = "Family",               # change fill color by cyl
1522030167926:# color = "white",            # Set bar border colors to white
1522030167927:# palette = "jco",            # jco journal color palett. see ?ggpar
1522030167927:palette = rev(palette[1:(nTopElements+1)]),
1522030167928:# sort.val = "desc",          # Sort the value in dscending order
1522030167928:# sort.by.groups = FALSE,     # Don't sort inside each group
1522030167929:x.text.angle = 50, # Rotate vertically x axis texts
1522030167929:width = 1
1522030167929:) +
1522030167930:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522030167930:theme(panel.grid.major = element_blank(),
1522030167931:axis.text.x = element_text(angle = 50, hjust = 1),
1522030167931:strip.background = element_blank(),
1522030167931:panel.border = element_blank(),
1522030167932:legend.position = "right"
1522030167933:))
1522030212764:# ggpubr ------------------------------------------------------------------
1522030212764:(ancestryPlot <- ggbarplot(dataToPlot, x = "Sample", y = "Proportion",
1522030212765:fill = "Ancestry",               # change fill color by cyl
1522030212765:# color = "white",            # Set bar border colors to white
1522030212765:# palette = "jco",            # jco journal color palett. see ?ggpar
1522030212766:# palette = rev(palette[1:(nTopElements+1)]),
1522030212766:palette = c("#00AFBB", "#E7B800", "#FC4E07", "darkgrey"),
1522030212766:# sort.val = "desc",          #f- Sort the value in dscending order
1522030212767:# sort.by.groups = FALSE,     # Don't sort inside each group
1522030212767:x.text.angle = 50, # Rotate vertically x axis texts
1522030212767:width = 1
1522030212768:) +
1522030212768:# facet_wrap(~ Population, scales = "free_x") +
1522030212768:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522030212769:theme(panel.grid.major = element_blank(),
1522030212769:axis.text.x = element_text(angle = 50, hjust = 1),
1522030212769:strip.background = element_blank(),
1522030212770:panel.border = element_blank(),
1522030212770:legend.position = "right"
1522030212771:))
1522030217262:# Figure 2
1522030217263:# Sources -----------------------------------------------------------------
1522030217264:# Packages ----------------------------------------------------------------
1522030217264:requiredPackages <- c("tidyverse", "rlang", "dendsort", "ggfortify", "ggpubr", "pheatmap",
1522030217265:"RColorBrewer", "vegan", "formatR")
1522030217266:installAndLoadPackages(requiredPackages)
1522030217275:source("scripts/auxiliary_functions.R")
1522030217283:# Loading Data ------------------------------------------------------------
1522030217284:extDataFile <- "data/gt_and_tumaco_samples.otu_table.tsv"
1522030217285:extData     <- read.delim(extDataFile, check.names = FALSE,
1522030217285:stringsAsFactors = F)
1522030217331:extData     <- as_tibble(extData)
1522030217333:attributes(extData)
1522030217367:metadataFile <- "data/metadata.tsv"
1522030217367:metadata     <- read_tsv(metadataFile)
1522030217376:attributes(metadata)
1522030217387:# General configuration ---------------------------------------------------
1522030217388:useOnlyGTSamples <- TRUE
1522030217388:dataGroups   <- c("Coast", "Mountain")
1522030217389:groupVar     <- "Population"
1522030217389:titles       <- c(dataGroups, "General\nProfile")
1522030217390:labels       <- c(y = "Relative Abundance")
1522030217390:nTopElements <- 10
1522030217391:# Preparing data ----------------------------------------------------------
1522030217392:# Get samples sequenced through GT
1522030217392:gtSamples <- metadata %>%
1522030217392:filter(Seq_Origin == "GT1" | Seq_Origin == "GT2") %>%
1522030217393:select(Sample)
1522030217396:tumacoSamples <- metadata %>%
1522030217397:filter(Additional_Sample == 1) %>%
1522030217397:select(Sample)
1522030217401:pull(gtSamples)
1522030217404:pull(tumacoSamples)
1522030217405:# Select samples
1522030217406:if (useOnlyGTSamples) {
1522030217406:# Indices for samples from GT only and Tumaco Additional Samples
1522030217406:samples <- pull(gtSamples)
1522030217406:} else {
1522030217407:# Include Tumaco additional samples
1522030217407:samples <- c(pull(gtSamples), pull(tumacoSamples))
1522030217407:}
1522030217408:# Indices of sample columns
1522030217409:samplesInd <- which(colnames(extData) %in% samples)
1522030217409:# Select metadata
1522030217410:partialMetadata <- metadata %>%
1522030217410:# filter(Included_In_Study == 1) %>%
1522030217410:filter(Sample %in% samples) %>%
1522030217411:select(Sample, Evolution, Population = Residence)
1522030217424:# Add "UNSUPPORTED MAPPING" to blank cells from the taxonomy columns
1522030217425:for(col in c("Class", "Order", "Family", "Genera", "Species")){
1522030217425:extData[extData[[col]] == "", col] = "UNSUPPORTED MAPPING"
1522030217425:}
1522030217433:# Add Reads column: total reads per OTU
1522030217434:extData <- extData %>%
1522030217435:mutate(Reads = rowSums(.[samplesInd]))
1522030217443:# Figure 2: Relative abundance (Family and Class) -------------------------
1522030217443:# Preparing data
1522030217444:# Calculate Relative Abundance per Family
1522030217444:(relAbundance <- extData %>%
1522030217444:group_by(Family) %>%                          # group by Family column
1522030217445:summarise_at(samplesInd, sum) %>%             # compute sum of reads for each Family
1522030217445:mutate_if(is.numeric, funs( . / sum(.))) %>%  # Normalize (rel. abundance)
1522030217445:mutate(TotalAbundance = rowSums(select(., -Family))) %>%
1522030217445:arrange(desc(TotalAbundance))
1522030217446:)
1522030217619:# Get top families by total abundance
1522030217619:top <- relAbundance %>%
1522030217619:top_n(nTopElements, TotalAbundance) %>%
1522030217620:select(-TotalAbundance)
1522030217624:# Group the rest of the families into the family "Others"
1522030217624:rest <- relAbundance %>%
1522030217624:top_n(-(nrow(relAbundance) - nTopElements), TotalAbundance) %>%
1522030217625:gather(Sample, Abundance, -Family) %>%
1522030217625:group_by(Sample) %>%
1522030217625:summarise(Total = sum(Abundance)) %>%
1522030217625:spread(Sample, Total) %>%
1522030217626:mutate(Family = c("Others")) %>%
1522030217626:select(Family, -TotalAbundance, everything()) %>%
1522030217626:select(-TotalAbundance)
1522030217649:# Bind top and rest families into a single table (tibble)
1522030217649:briefRelAbundance <- rbind.data.frame(top, rest)
1522030217651:# Get the order of families by total abundance (originally
1522030217651:# from relAbundance table)
1522030217651:orderedFamilies <- briefRelAbundance$Family
1522030217652:# Get the order of samples by the most abundant family
1522030217652:orderedSamples  <- names(sort(as.vector(as.data.frame(briefRelAbundance[1,-1]))))
1522030217654:# Change the order of Families and Samples
1522030217654:(briefRelAbundance <- briefRelAbundance %>%
1522030217655:gather(Sample, Abundance, -Family) %>%
1522030217655:spread(Family, Abundance) %>%
1522030217655:left_join(partialMetadata) %>%
1522030217655:gather(Family, Abundance, -Sample, -Population, -Evolution) %>%
1522030217656:mutate(Family = factor(Family, levels = rev(orderedFamilies))) %>%
1522030217656:mutate(Sample = factor(Sample, levels = orderedSamples)) # %>%
1522030217656:)
1522030217726:# Visualize colors
1522030217727:pal(rev(palette))
1522030217745:pal(palette)
1522030217974:# Plot Abundance --------------------------------------------------------
1522030217975:dataToPlot <- briefRelAbundance
1522030217975:# ggpubr ------------------------------------------------------------------
1522030217976:(abundancePLot <- ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1522030217976:fill = "Family",               # change fill color by cyl
1522030217976:# color = "white",            # Set bar border colors to white
1522030217977:# palette = "jco",            # jco journal color palett. see ?ggpar
1522030217977:palette = rev(palette[1:(nTopElements+1)]),
1522030217977:# sort.val = "desc",          # Sort the value in dscending order
1522030217978:# sort.by.groups = FALSE,     # Don't sort inside each group
1522030217978:x.text.angle = 50, # Rotate vertically x axis texts
1522030217978:width = 1
1522030217979:) +
1522030217979:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522030217979:theme(panel.grid.major = element_blank(),
1522030217980:axis.text.x = element_text(angle = 50, hjust = 1),
1522030217980:strip.background = element_blank(),
1522030217981:panel.border = element_blank(),
1522030217981:legend.position = "right"
1522030217981:))
1522030218661:metadata %>%
1522030218662:filter(Sample %in% samples) %>%
1522030218662:select(Sample, Evolution, Population = Residence,
1522030218662:Ae2, Aa1, Aea, Ae1) %>%
1522030218663:gather(Ancestry, Proportion, -Sample,
1522030218663:-Population, -Evolution) %>%
1522030218663:mutate(Sample = factor(Sample, levels = orderedSamples))
1522030218710:# Visualize colors
1522030218710:pal(rev(palette))
1522030218879:pal(palette)
1522030219043:# Plot Abundance --------------------------------------------------------
1522030219044:dataToPlot <- metadata %>%
1522030219044:filter(Sample %in% samples) %>%
1522030219044:select(Sample, Evolution, Population = Residence,
1522030219045:Ae2, Aa1, Aea, Ae1) %>%
1522030219045:gather(Ancestry, Proportion, -Sample,
1522030219045:-Population, -Evolution) %>%
1522030219046:mutate(Sample = factor(Sample, levels = orderedSamples))
1522030219052:# ggpubr ------------------------------------------------------------------
1522030219053:(ancestryPlot <- ggbarplot(dataToPlot, x = "Sample", y = "Proportion",
1522030219053:fill = "Ancestry",               # change fill color by cyl
1522030219053:# color = "white",            # Set bar border colors to white
1522030219054:# palette = "jco",            # jco journal color palett. see ?ggpar
1522030219054:# palette = rev(palette[1:(nTopElements+1)]),
1522030219054:palette = c("#00AFBB", "#E7B800", "#FC4E07", "darkgrey"),
1522030219055:# sort.val = "desc",          #f- Sort the value in dscending order
1522030219055:# sort.by.groups = FALSE,     # Don't sort inside each group
1522030219055:x.text.angle = 50, # Rotate vertically x axis texts
1522030219055:width = 1
1522030219056:) +
1522030219056:# facet_wrap(~ Population, scales = "free_x") +
1522030219056:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522030219057:theme(panel.grid.major = element_blank(),
1522030219057:axis.text.x = element_text(angle = 50, hjust = 1),
1522030219057:strip.background = element_blank(),
1522030219058:panel.border = element_blank(),
1522030219058:legend.position = "right"
1522030219059:))
1522030227728:(finalPlot <- ggarrange(abundancePLot + rremove("xlab") + rremove("x.axis") + rremove("x.text") + rremove("x.ticks")
1522030227728:# + theme(plot.margin = unit(c(1,2,1,1), "mm"))
1522030227729:, ancestryPlot# + rremove("y.text") + rremove("y.axis")
1522030227729:# + rremove("ylab") + rremove("y.ticks")
1522030227730:# + theme(plot.margin = unit(c(1,5,1,0), "mm"))
1522030227730:# , pGeneral
1522030227731:# + theme(plot.margin = unit(c(1,4,1,1), "mm"))
1522030227731:# + rremove("y.text") + rremove("y.axis") + rremove("ylab") + rremove("y.ticks")
1522030227731:# # ramPlot + theme(plot.margin = unit(c(1,18,1,1), "mm")) + rremove("y.text"),
1522030227732:# , labels = c("A", "", "B")
1522030227732:, ncol = 1, nrow = 2
1522030227733:# , widths = widths
1522030227733:# , align = "h"
1522030227734:# , common.legend = TRUE
1522030227734:# , legend = c("bottom")
1522030227734:))
1522030258124:(finalPlot <- ggarrange(abundancePLot + rremove("xlab") + rremove("x.axis") + rremove("x.text") + rremove("x.ticks")
1522030258125:# + theme(plot.margin = unit(c(1,2,1,1), "mm"))
1522030258126:, ancestryPlot# + rremove("y.text") + rremove("y.axis")
1522030258126:# + rremove("ylab") + rremove("y.ticks")
1522030258126:# + theme(plot.margin = unit(c(1,5,1,0), "mm"))
1522030258127:# , pGeneral
1522030258127:# + theme(plot.margin = unit(c(1,4,1,1), "mm"))
1522030258127:# + rremove("y.text") + rremove("y.axis") + rremove("ylab") + rremove("y.ticks")
1522030258128:# # ramPlot + theme(plot.margin = unit(c(1,18,1,1), "mm")) + rremove("y.text"),
1522030258128:# , labels = c("A", "", "B")
1522030258129:, ncol = 1, nrow = 2
1522030258129:# , widths = widths
1522030258129:# , align = "h"
1522030258130:# , common.legend = TRUE
1522030258130:, legend = c("bottom")
1522030258131:))
1522030270439:(finalPlot <- ggarrange(abundancePLot + rremove("xlab") + rremove("x.axis") + rremove("x.text") + rremove("x.ticks")
1522030270440:# + theme(plot.margin = unit(c(1,2,1,1), "mm"))
1522030270440:, ancestryPlot# + rremove("y.text") + rremove("y.axis")
1522030270441:# + rremove("ylab") + rremove("y.ticks")
1522030270442:# + theme(plot.margin = unit(c(1,5,1,0), "mm"))
1522030270442:# , pGeneral
1522030270443:# + theme(plot.margin = unit(c(1,4,1,1), "mm"))
1522030270443:# + rremove("y.text") + rremove("y.axis") + rremove("ylab") + rremove("y.ticks")
1522030270444:# # ramPlot + theme(plot.margin = unit(c(1,18,1,1), "mm")) + rremove("y.text"),
1522030270444:# , labels = c("A", "", "B")
1522030270445:, ncol = 1, nrow = 2
1522030270445:# , widths = widths
1522030270446:# , align = "h"
1522030270446:, common.legend = TRUE
1522030270447:, legend = c("bottom")
1522030270447:))
1522030425981:# Figure 2
1522030425982:# Sources -----------------------------------------------------------------
1522030425983:# Packages ----------------------------------------------------------------
1522030425983:requiredPackages <- c("tidyverse", "rlang", "dendsort", "ggfortify", "ggpubr", "pheatmap",
1522030425984:"RColorBrewer", "vegan", "formatR")
1522030425986:installAndLoadPackages(requiredPackages)
1522030425995:source("scripts/auxiliary_functions.R")
1522030426004:# Loading Data ------------------------------------------------------------
1522030426005:extDataFile <- "data/gt_and_tumaco_samples.otu_table.tsv"
1522030426006:extData     <- read.delim(extDataFile, check.names = FALSE,
1522030426007:stringsAsFactors = F)
1522030426066:extData     <- as_tibble(extData)
1522030426069:attributes(extData)
1522030426106:metadataFile <- "data/metadata.tsv"
1522030426107:metadata     <- read_tsv(metadataFile)
1522030426116:attributes(metadata)
1522030426126:# General configuration ---------------------------------------------------
1522030426127:useOnlyGTSamples <- TRUE
1522030426127:dataGroups   <- c("Coast", "Mountain")
1522030426128:groupVar     <- "Population"
1522030426128:titles       <- c(dataGroups, "General\nProfile")
1522030426129:labels       <- c(y = "Relative Abundance")
1522030426129:nTopElements <- 10
1522030426130:# Preparing data ----------------------------------------------------------
1522030426130:# Get samples sequenced through GT
1522030426131:gtSamples <- metadata %>%
1522030426131:filter(Seq_Origin == "GT1" | Seq_Origin == "GT2") %>%
1522030426131:select(Sample)
1522030426135:tumacoSamples <- metadata %>%
1522030426136:filter(Additional_Sample == 1) %>%
1522030426136:select(Sample)
1522030426141:pull(gtSamples)
1522030426143:pull(tumacoSamples)
1522030426144:# Select samples
1522030426145:if (useOnlyGTSamples) {
1522030426145:# Indices for samples from GT only and Tumaco Additional Samples
1522030426145:samples <- pull(gtSamples)
1522030426146:} else {
1522030426146:# Include Tumaco additional samples
1522030426146:samples <- c(pull(gtSamples), pull(tumacoSamples))
1522030426147:}
1522030426147:# Indices of sample columns
1522030426148:samplesInd <- which(colnames(extData) %in% samples)
1522030426149:# Select metadata
1522030426149:partialMetadata <- metadata %>%
1522030426149:# filter(Included_In_Study == 1) %>%
1522030426149:filter(Sample %in% samples) %>%
1522030426150:select(Sample, Evolution, Population = Residence)
1522030426154:# Add "UNSUPPORTED MAPPING" to blank cells from the taxonomy columns
1522030426155:for(col in c("Class", "Order", "Family", "Genera", "Species")){
1522030426155:extData[extData[[col]] == "", col] = "UNSUPPORTED MAPPING"
1522030426155:}
1522030426161:# Add Reads column: total reads per OTU
1522030426162:extData <- extData %>%
1522030426162:mutate(Reads = rowSums(.[samplesInd]))
1522030426169:# Figure 2: Relative abundance (Family and Class) -------------------------
1522030426170:# Preparing data
1522030426170:# Calculate Relative Abundance per Family
1522030426170:(relAbundance <- extData %>%
1522030426171:group_by(Family) %>%                          # group by Family column
1522030426171:summarise_at(samplesInd, sum) %>%             # compute sum of reads for each Family
1522030426171:mutate_if(is.numeric, funs( . / sum(.))) %>%  # Normalize (rel. abundance)
1522030426171:mutate(TotalAbundance = rowSums(select(., -Family))) %>%
1522030426172:arrange(desc(TotalAbundance))
1522030426172:)
1522030426332:# Get top families by total abundance
1522030426333:top <- relAbundance %>%
1522030426333:top_n(nTopElements, TotalAbundance) %>%
1522030426333:select(-TotalAbundance)
1522030426337:# Group the rest of the families into the family "Others"
1522030426337:rest <- relAbundance %>%
1522030426338:top_n(-(nrow(relAbundance) - nTopElements), TotalAbundance) %>%
1522030426338:gather(Sample, Abundance, -Family) %>%
1522030426338:group_by(Sample) %>%
1522030426339:summarise(Total = sum(Abundance)) %>%
1522030426339:spread(Sample, Total) %>%
1522030426339:mutate(Family = c("Others")) %>%
1522030426340:select(Family, -TotalAbundance, everything()) %>%
1522030426340:select(-TotalAbundance)
1522030426363:# Bind top and rest families into a single table (tibble)
1522030426363:briefRelAbundance <- rbind.data.frame(top, rest)
1522030426365:# Get the order of families by total abundance (originally
1522030426365:# from relAbundance table)
1522030426365:orderedFamilies <- briefRelAbundance$Family
1522030426366:# Get the order of samples by the most abundant family
1522030426366:orderedSamples  <- names(sort(as.vector(as.data.frame(briefRelAbundance[1,-1]))))
1522030426368:# Change the order of Families and Samples
1522030426368:(briefRelAbundance <- briefRelAbundance %>%
1522030426369:gather(Sample, Abundance, -Family) %>%
1522030426369:spread(Family, Abundance) %>%
1522030426369:left_join(partialMetadata) %>%
1522030426369:gather(Family, Abundance, -Sample, -Population, -Evolution) %>%
1522030426370:mutate(Family = factor(Family, levels = rev(orderedFamilies))) %>%
1522030426370:mutate(Sample = factor(Sample, levels = orderedSamples)) # %>%
1522030426370:)
1522030426431:# Visualize colors
1522030426431:pal(rev(palette))
1522030426445:pal(palette)
1522030426924:# Plot Abundance --------------------------------------------------------
1522030426925:dataToPlot <- briefRelAbundance
1522030426926:# ggpubr ------------------------------------------------------------------
1522030426926:(abundancePLot <- ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1522030426927:fill = "Family",               # change fill color by cyl
1522030426927:# color = "white",            # Set bar border colors to white
1522030426927:# palette = "jco",            # jco journal color palett. see ?ggpar
1522030426928:palette = rev(palette[1:(nTopElements+1)]),
1522030426928:# sort.val = "desc",          # Sort the value in dscending order
1522030426928:# sort.by.groups = FALSE,     # Don't sort inside each group
1522030426929:x.text.angle = 50, # Rotate vertically x axis texts
1522030426929:width = 1
1522030426929:) +
1522030426930:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522030426930:theme(panel.grid.major = element_blank(),
1522030426930:axis.text.x = element_text(angle = 50, hjust = 1),
1522030426931:strip.background = element_blank(),
1522030426931:panel.border = element_blank(),
1522030426932:legend.position = "right"
1522030426932:))
1522030427650:metadata %>%
1522030427650:filter(Sample %in% samples) %>%
1522030427650:select(Sample, Evolution, Population = Residence,
1522030427651:Ae2, Aa1, Aea, Ae1) %>%
1522030427651:gather(Ancestry, Proportion, -Sample,
1522030427651:-Population, -Evolution) %>%
1522030427652:mutate(Sample = factor(Sample, levels = orderedSamples))
1522030427709:# Visualize colors
1522030427709:pal(rev(palette))
1522030428060:pal(palette)
1522030428206:# Plot Abundance --------------------------------------------------------
1522030428206:dataToPlot <- metadata %>%
1522030428206:filter(Sample %in% samples) %>%
1522030428207:select(Sample, Evolution, Population = Residence,
1522030428207:Ae2, Aa1, Aea, Ae1) %>%
1522030428207:gather(Ancestry, Proportion, -Sample,
1522030428208:-Population, -Evolution) %>%
1522030428208:mutate(Sample = factor(Sample, levels = orderedSamples))
1522030428215:# ggpubr ------------------------------------------------------------------
1522030428216:(ancestryPlot <- ggbarplot(dataToPlot, x = "Sample", y = "Proportion",
1522030428216:fill = "Ancestry",               # change fill color by cyl
1522030428216:# color = "white",            # Set bar border colors to white
1522030428217:# palette = "jco",            # jco journal color palett. see ?ggpar
1522030428217:# palette = rev(palette[1:(nTopElements+1)]),
1522030428217:palette = c("#00AFBB", "#E7B800", "#FC4E07", "darkgrey"),
1522030428217:# sort.val = "desc",          #f- Sort the value in dscending order
1522030428218:# sort.by.groups = FALSE,     # Don't sort inside each group
1522030428218:x.text.angle = 50, # Rotate vertically x axis texts
1522030428219:width = 1
1522030428219:) +
1522030428219:# facet_wrap(~ Population, scales = "free_x") +
1522030428220:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522030428220:theme(panel.grid.major = element_blank(),
1522030428220:axis.text.x = element_text(angle = 50, hjust = 1),
1522030428221:strip.background = element_blank(),
1522030428221:panel.border = element_blank(),
1522030428221:legend.position = "right",
1522030428222:strip.background = element_blank(),
1522030428222:strip.text.x = element_blank()
1522030428223:))
1522030428247:(finalPlot <- ggarrange(abundancePLot + rremove("xlab") + rremove("x.axis") + rremove("x.text") + rremove("x.ticks")
1522030428247:# + theme(plot.margin = unit(c(1,2,1,1), "mm"))
1522030428248:, ancestryPlot# + rremove("y.text") + rremove("y.axis")
1522030428248:# + rremove("ylab") + rremove("y.ticks")
1522030428248:# + theme(plot.margin = unit(c(1,5,1,0), "mm"))
1522030428249:# , pGeneral
1522030428249:# + theme(plot.margin = unit(c(1,4,1,1), "mm"))
1522030428249:# + rremove("y.text") + rremove("y.axis") + rremove("ylab") + rremove("y.ticks")
1522030428250:# # ramPlot + theme(plot.margin = unit(c(1,18,1,1), "mm")) + rremove("y.text"),
1522030428250:# , labels = c("A", "", "B")
1522030428250:, ncol = 1, nrow = 2
1522030428250:# , widths = widths
1522030428251:# , align = "h"
1522030428251:, common.legend = TRUE
1522030428251:, legend = c("bottom")
1522030428252:))
1522030439685:# ggpubr ------------------------------------------------------------------
1522030439685:(ancestryPlot <- ggbarplot(dataToPlot, x = "Sample", y = "Proportion",
1522030439686:fill = "Ancestry",               # change fill color by cyl
1522030439687:# color = "white",            # Set bar border colors to white
1522030439688:# palette = "jco",            # jco journal color palett. see ?ggpar
1522030439689:# palette = rev(palette[1:(nTopElements+1)]),
1522030439690:palette = c("#00AFBB", "#E7B800", "#FC4E07", "darkgrey"),
1522030439690:# sort.val = "desc",          #f- Sort the value in dscending order
1522030439691:# sort.by.groups = FALSE,     # Don't sort inside each group
1522030439692:x.text.angle = 50, # Rotate vertically x axis texts
1522030439692:width = 1
1522030439693:) +
1522030439694:# facet_wrap(~ Population, scales = "free_x") +
1522030439694:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522030439695:theme(panel.grid.major = element_blank(),
1522030439696:axis.text.x = element_text(angle = 50, hjust = 1),
1522030439697:strip.background = element_blank(),
1522030439697:panel.border = element_blank(),
1522030439698:legend.position = "right",
1522030439699:strip.background = element_blank(),
1522030439700:strip.text.x = element_blank()
1522030439701:))
1522030445010:# ggpubr ------------------------------------------------------------------
1522030445011:(ancestryPlot <- ggbarplot(dataToPlot, x = "Sample", y = "Proportion",
1522030445012:fill = "Ancestry",               # change fill color by cyl
1522030445013:# color = "white",            # Set bar border colors to white
1522030445013:# palette = "jco",            # jco journal color palett. see ?ggpar
1522030445014:# palette = rev(palette[1:(nTopElements+1)]),
1522030445015:palette = c("#00AFBB", "#E7B800", "#FC4E07", "darkgrey"),
1522030445016:# sort.val = "desc",          #f- Sort the value in dscending order
1522030445017:# sort.by.groups = FALSE,     # Don't sort inside each group
1522030445017:x.text.angle = 50, # Rotate vertically x axis texts
1522030445018:width = 1
1522030445019:) +
1522030445020:# facet_wrap(~ Population, scales = "free_x") +
1522030445021:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522030445022:theme(panel.grid.major = element_blank(),
1522030445023:axis.text.x = element_text(angle = 50, hjust = 1),
1522030445023:# strip.background = element_blank(),
1522030445024:panel.border = element_blank(),
1522030445025:legend.position = "right",
1522030445025:strip.background = element_blank(),
1522030445026:strip.text.x = element_blank()
1522030445027:))
1522030450110:(finalPlot <- ggarrange(abundancePLot + rremove("xlab") + rremove("x.axis") + rremove("x.text") + rremove("x.ticks")
1522030450110:# + theme(plot.margin = unit(c(1,2,1,1), "mm"))
1522030450111:, ancestryPlot# + rremove("y.text") + rremove("y.axis")
1522030450112:# + rremove("ylab") + rremove("y.ticks")
1522030450112:# + theme(plot.margin = unit(c(1,5,1,0), "mm"))
1522030450113:# , pGeneral
1522030450113:# + theme(plot.margin = unit(c(1,4,1,1), "mm"))
1522030450114:# + rremove("y.text") + rremove("y.axis") + rremove("ylab") + rremove("y.ticks")
1522030450114:# # ramPlot + theme(plot.margin = unit(c(1,18,1,1), "mm")) + rremove("y.text"),
1522030450114:# , labels = c("A", "", "B")
1522030450115:, ncol = 1, nrow = 2
1522030450115:# , widths = widths
1522030450116:# , align = "h"
1522030450116:, common.legend = TRUE
1522030450117:, legend = c("bottom")
1522030450117:))
1522030470212:(finalPlot <- ggarrange(abundancePLot + rremove("xlab") + rremove("x.axis") + rremove("x.text") + rremove("x.ticks")
1522030470212:# + theme(plot.margin = unit(c(1,2,1,1), "mm"))
1522030470213:, ancestryPlot# + rremove("y.text") + rremove("y.axis")
1522030470213:# + rremove("ylab") + rremove("y.ticks")
1522030470213:# + theme(plot.margin = unit(c(1,5,1,0), "mm"))
1522030470214:# , pGeneral
1522030470214:# + theme(plot.margin = unit(c(1,4,1,1), "mm"))
1522030470214:# + rremove("y.text") + rremove("y.axis") + rremove("ylab") + rremove("y.ticks")
1522030470215:# # ramPlot + theme(plot.margin = unit(c(1,18,1,1), "mm")) + rremove("y.text"),
1522030470215:# , labels = c("A", "", "B")
1522030470215:, ncol = 1, nrow = 2
1522030470216:# , widths = widths
1522030470216:, align = "v"
1522030470217:# , align = "h"
1522030470217:, common.legend = TRUE
1522030470217:, legend = c("bottom")
1522030470218:))
1522030513579:# Figure 2
1522030513582:# Sources -----------------------------------------------------------------
1522030513583:# Packages ----------------------------------------------------------------
1522030513584:requiredPackages <- c("tidyverse", "rlang", "dendsort", "ggfortify", "ggpubr", "pheatmap",
1522030513584:"RColorBrewer", "vegan", "formatR")
1522030513585:installAndLoadPackages(requiredPackages)
1522030513590:source("scripts/auxiliary_functions.R")
1522030513597:# Loading Data ------------------------------------------------------------
1522030513598:extDataFile <- "data/gt_and_tumaco_samples.otu_table.tsv"
1522030513599:extData     <- read.delim(extDataFile, check.names = FALSE,
1522030513599:stringsAsFactors = F)
1522030513643:extData     <- as_tibble(extData)
1522030513645:attributes(extData)
1522030513679:metadataFile <- "data/metadata.tsv"
1522030513679:metadata     <- read_tsv(metadataFile)
1522030513691:attributes(metadata)
1522030513701:# General configuration ---------------------------------------------------
1522030513702:useOnlyGTSamples <- FALSE
1522030513702:dataGroups   <- c("Coast", "Mountain")
1522030513703:groupVar     <- "Population"
1522030513703:titles       <- c(dataGroups, "General\nProfile")
1522030513704:labels       <- c(y = "Relative Abundance")
1522030513705:nTopElements <- 10
1522030513706:# Preparing data ----------------------------------------------------------
1522030513707:# Get samples sequenced through GT
1522030513708:gtSamples <- metadata %>%
1522030513708:filter(Seq_Origin == "GT1" | Seq_Origin == "GT2") %>%
1522030513708:select(Sample)
1522030513711:tumacoSamples <- metadata %>%
1522030513712:filter(Additional_Sample == 1) %>%
1522030513712:select(Sample)
1522030513716:pull(gtSamples)
1522030513718:pull(tumacoSamples)
1522030513720:# Select samples
1522030513721:if (useOnlyGTSamples) {
1522030513721:# Indices for samples from GT only and Tumaco Additional Samples
1522030513721:samples <- pull(gtSamples)
1522030513721:} else {
1522030513722:# Include Tumaco additional samples
1522030513722:samples <- c(pull(gtSamples), pull(tumacoSamples))
1522030513722:}
1522030513723:# Indices of sample columns
1522030513724:samplesInd <- which(colnames(extData) %in% samples)
1522030513724:# Select metadata
1522030513725:partialMetadata <- metadata %>%
1522030513725:# filter(Included_In_Study == 1) %>%
1522030513725:filter(Sample %in% samples) %>%
1522030513726:select(Sample, Evolution, Population = Residence)
1522030513729:# Add "UNSUPPORTED MAPPING" to blank cells from the taxonomy columns
1522030513729:for(col in c("Class", "Order", "Family", "Genera", "Species")){
1522030513729:extData[extData[[col]] == "", col] = "UNSUPPORTED MAPPING"
1522030513730:}
1522030513735:# Add Reads column: total reads per OTU
1522030513736:extData <- extData %>%
1522030513736:mutate(Reads = rowSums(.[samplesInd]))
1522030513743:# Figure 2: Relative abundance (Family and Class) -------------------------
1522030513744:# Preparing data
1522030513744:# Calculate Relative Abundance per Family
1522030513744:(relAbundance <- extData %>%
1522030513745:group_by(Family) %>%                          # group by Family column
1522030513745:summarise_at(samplesInd, sum) %>%             # compute sum of reads for each Family
1522030513745:mutate_if(is.numeric, funs( . / sum(.))) %>%  # Normalize (rel. abundance)
1522030513746:mutate(TotalAbundance = rowSums(select(., -Family))) %>%
1522030513746:arrange(desc(TotalAbundance))
1522030513746:)
1522030513974:# Get top families by total abundance
1522030513974:top <- relAbundance %>%
1522030513975:top_n(nTopElements, TotalAbundance) %>%
1522030513975:select(-TotalAbundance)
1522030513983:# Group the rest of the families into the family "Others"
1522030513983:rest <- relAbundance %>%
1522030513983:top_n(-(nrow(relAbundance) - nTopElements), TotalAbundance) %>%
1522030513984:gather(Sample, Abundance, -Family) %>%
1522030513984:group_by(Sample) %>%
1522030513984:summarise(Total = sum(Abundance)) %>%
1522030513985:spread(Sample, Total) %>%
1522030513985:mutate(Family = c("Others")) %>%
1522030513986:select(Family, -TotalAbundance, everything()) %>%
1522030513986:select(-TotalAbundance)
1522030514006:# Bind top and rest families into a single table (tibble)
1522030514007:briefRelAbundance <- rbind.data.frame(top, rest)
1522030514009:# Get the order of families by total abundance (originally
1522030514009:# from relAbundance table)
1522030514010:orderedFamilies <- briefRelAbundance$Family
1522030514011:# Get the order of samples by the most abundant family
1522030514011:orderedSamples  <- names(sort(as.vector(as.data.frame(briefRelAbundance[1,-1]))))
1522030514014:# Change the order of Families and Samples
1522030514015:(briefRelAbundance <- briefRelAbundance %>%
1522030514015:gather(Sample, Abundance, -Family) %>%
1522030514016:spread(Family, Abundance) %>%
1522030514016:left_join(partialMetadata) %>%
1522030514017:gather(Family, Abundance, -Sample, -Population, -Evolution) %>%
1522030514017:mutate(Family = factor(Family, levels = rev(orderedFamilies))) %>%
1522030514018:mutate(Sample = factor(Sample, levels = orderedSamples)) # %>%
1522030514018:)
1522030514080:# Visualize colors
1522030514081:pal(rev(palette))
1522030514095:pal(palette)
1522030514502:# Plot Abundance --------------------------------------------------------
1522030514503:dataToPlot <- briefRelAbundance
1522030514503:# ggpubr ------------------------------------------------------------------
1522030514504:ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1522030514504:fill = "Family",               # change fill color by cyl
1522030514504:# color = "white",            # Set bar border colors to white
1522030514505:# palette = "jco",            # jco journal color palett. see ?ggpar
1522030514505:palette = rev(palette[1:(nTopElements+1)]),
1522030514505:# sort.val = "desc",          # Sort the value in dscending order
1522030514506:# sort.by.groups = FALSE,     # Don't sort inside each group
1522030514506:x.text.angle = 50 #, # Rotate vertically x axis texts
1522030514507:# position = "stack"
1522030514507:) +
1522030514507:facet_grid(~ Population, scales = "free_x") +
1522030514507:theme(panel.grid.major = element_blank(),
1522030514508:axis.text.x = element_text(angle = 50, hjust = 1),
1522030514508:strip.background = element_blank(),
1522030514508:panel.border = element_blank()
1522030514509:)
1522030515295:# ggplot2 -----------------------------------------------------------------
1522030515296:# Base variables
1522030515296:width        <- 8
1522030515296:lineSize     <- 0.5
1522030515297:baseTextSize <- 14
1522030515297:height       <- width * 0.618
1522030515298:axisColor    <- "#333333"
1522030515298:gridColor    <- "#cccccc"
1522030515299:textColor    <- "#333333"
1522030516113:# Generate plot 1: Coast
1522030516114:dGroup <- 1
1522030516116:dataToPlot <- briefRelAbundance %>% filter(Population == dataGroups[dGroup])
1522030516549:pGroup1    <- ggplot(dataToPlot, aes(x = Sample, y = Abundance))
1522030516759:pGroup1    <- pGroup1 + geom_bar(stat = "identity", position = "stack",
1522030516760:aes(fill = Family)
1522030516760:# , alpha = 0.95,
1522030516761:, width = 0.8
1522030516761:, color = "#000000"
1522030516762:, size = 0.2
1522030516763:)
1522030516975:pGroup1 <- pGroup1 + scale_fill_manual(values = rev(palette[1:(nTopElements+1)]))
1522030517208:pGroup1 <- pGroup1 + scale_y_continuous(expand = c(0, 0))
1522030517459:pGroup1 <- pGroup1 + customTheme
1522030517643:pGroup1 <- pGroup1 + labs(title = titles[dGroup], y = labels["y"], x = "")
1522030517907:pGroup1 <- pGroup1 + theme(axis.line.x  = element_blank(),
1522030517908:axis.text.x  = element_text(angle = 50, hjust = 1),
1522030517908:axis.ticks.x = element_blank(),
1522030517909:strip.background = element_blank(),
1522030517909:strip.text.x = element_text(margin = margin(0.2,0,0.8,0, "cm"),
1522030517910:size = baseTextSize * 1.025),
1522030517910:panel.spacing    = unit(2, "lines"))
1522030518089:pGroup1
1522030526925:# Figure 2
1522030526926:# Sources -----------------------------------------------------------------
1522030526927:# Packages ----------------------------------------------------------------
1522030526927:requiredPackages <- c("tidyverse", "rlang", "dendsort", "ggfortify", "ggpubr", "pheatmap",
1522030526928:"RColorBrewer", "vegan", "formatR")
1522030526929:installAndLoadPackages(requiredPackages)
1522030526935:source("scripts/auxiliary_functions.R")
1522030526941:# Loading Data ------------------------------------------------------------
1522030526942:extDataFile <- "data/gt_and_tumaco_samples.otu_table.tsv"
1522030526943:extData     <- read.delim(extDataFile, check.names = FALSE,
1522030526943:stringsAsFactors = F)
1522030526988:extData     <- as_tibble(extData)
1522030526990:attributes(extData)
1522030527021:metadataFile <- "data/metadata.tsv"
1522030527021:metadata     <- read_tsv(metadataFile)
1522030527031:attributes(metadata)
1522030527042:# General configuration ---------------------------------------------------
1522030527043:useOnlyGTSamples <- FALSE
1522030527043:dataGroups   <- c("Coast", "Mountain")
1522030527044:groupVar     <- "Population"
1522030527044:titles       <- c(dataGroups, "General\nProfile")
1522030527045:labels       <- c(y = "Relative Abundance")
1522030527045:nTopElements <- 10
1522030527046:# Preparing data ----------------------------------------------------------
1522030527046:# Get samples sequenced through GT
1522030527047:gtSamples <- metadata %>%
1522030527047:filter(Seq_Origin == "GT1" | Seq_Origin == "GT2") %>%
1522030527047:select(Sample)
1522030527052:tumacoSamples <- metadata %>%
1522030527052:filter(Additional_Sample == 1) %>%
1522030527053:select(Sample)
1522030527056:pull(gtSamples)
1522030527058:pull(tumacoSamples)
1522030527060:# Select samples
1522030527060:if (useOnlyGTSamples) {
1522030527061:# Indices for samples from GT only and Tumaco Additional Samples
1522030527061:samples <- pull(gtSamples)
1522030527061:} else {
1522030527062:# Include Tumaco additional samples
1522030527062:samples <- c(pull(gtSamples), pull(tumacoSamples))
1522030527062:}
1522030527063:# Indices of sample columns
1522030527064:samplesInd <- which(colnames(extData) %in% samples)
1522030527064:# Select metadata
1522030527065:partialMetadata <- metadata %>%
1522030527065:# filter(Included_In_Study == 1) %>%
1522030527065:filter(Sample %in% samples) %>%
1522030527065:select(Sample, Evolution, Population = Residence)
1522030527070:# Add "UNSUPPORTED MAPPING" to blank cells from the taxonomy columns
1522030527070:for(col in c("Class", "Order", "Family", "Genera", "Species")){
1522030527070:extData[extData[[col]] == "", col] = "UNSUPPORTED MAPPING"
1522030527071:}
1522030527076:# Add Reads column: total reads per OTU
1522030527076:extData <- extData %>%
1522030527077:mutate(Reads = rowSums(.[samplesInd]))
1522030527083:# Figure 2: Relative abundance (Family and Class) -------------------------
1522030527083:# Preparing data
1522030527083:# Calculate Relative Abundance per Family
1522030527084:(relAbundance <- extData %>%
1522030527084:group_by(Family) %>%                          # group by Family column
1522030527084:summarise_at(samplesInd, sum) %>%             # compute sum of reads for each Family
1522030527085:mutate_if(is.numeric, funs( . / sum(.))) %>%  # Normalize (rel. abundance)
1522030527085:mutate(TotalAbundance = rowSums(select(., -Family))) %>%
1522030527085:arrange(desc(TotalAbundance))
1522030527085:)
1522030527286:# Get top families by total abundance
1522030527287:top <- relAbundance %>%
1522030527287:top_n(nTopElements, TotalAbundance) %>%
1522030527287:select(-TotalAbundance)
1522030527292:# Group the rest of the families into the family "Others"
1522030527292:rest <- relAbundance %>%
1522030527292:top_n(-(nrow(relAbundance) - nTopElements), TotalAbundance) %>%
1522030527293:gather(Sample, Abundance, -Family) %>%
1522030527293:group_by(Sample) %>%
1522030527293:summarise(Total = sum(Abundance)) %>%
1522030527294:spread(Sample, Total) %>%
1522030527294:mutate(Family = c("Others")) %>%
1522030527294:select(Family, -TotalAbundance, everything()) %>%
1522030527295:select(-TotalAbundance)
1522030527313:# Bind top and rest families into a single table (tibble)
1522030527314:briefRelAbundance <- rbind.data.frame(top, rest)
1522030527315:# Get the order of families by total abundance (originally
1522030527315:# from relAbundance table)
1522030527316:orderedFamilies <- briefRelAbundance$Family
1522030527316:# Get the order of samples by the most abundant family
1522030527317:orderedSamples  <- names(sort(as.vector(as.data.frame(briefRelAbundance[1,-1]))))
1522030527318:# Change the order of Families and Samples
1522030527319:(briefRelAbundance <- briefRelAbundance %>%
1522030527319:gather(Sample, Abundance, -Family) %>%
1522030527320:spread(Family, Abundance) %>%
1522030527320:left_join(partialMetadata) %>%
1522030527320:gather(Family, Abundance, -Sample, -Population, -Evolution) %>%
1522030527321:mutate(Family = factor(Family, levels = rev(orderedFamilies))) %>%
1522030527321:mutate(Sample = factor(Sample, levels = orderedSamples)) # %>%
1522030527321:)
1522030527379:# Visualize colors
1522030527379:pal(rev(palette))
1522030527392:pal(palette)
1522030527618:# Plot Abundance --------------------------------------------------------
1522030527618:dataToPlot <- briefRelAbundance
1522030527619:# ggpubr ------------------------------------------------------------------
1522030527619:ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1522030527620:fill = "Family",               # change fill color by cyl
1522030527621:# color = "white",            # Set bar border colors to white
1522030527621:# palette = "jco",            # jco journal color palett. see ?ggpar
1522030527621:palette = rev(palette[1:(nTopElements+1)]),
1522030527622:# sort.val = "desc",          # Sort the value in dscending order
1522030527622:# sort.by.groups = FALSE,     # Don't sort inside each group
1522030527622:x.text.angle = 50 #, # Rotate vertically x axis texts
1522030527622:# position = "stack"
1522030527623:) +
1522030527623:facet_grid(~ Population, scales = "free_x") +
1522030527623:theme(panel.grid.major = element_blank(),
1522030527624:axis.text.x = element_text(angle = 50, hjust = 1),
1522030527624:strip.background = element_blank(),
1522030527624:panel.border = element_blank()
1522030527625:)
1522030528427:# ggplot2 -----------------------------------------------------------------
1522030528428:# Base variables
1522030528428:width        <- 8
1522030528429:lineSize     <- 0.5
1522030528429:baseTextSize <- 14
1522030528430:height       <- width * 0.618
1522030528430:axisColor    <- "#333333"
1522030528431:gridColor    <- "#cccccc"
1522030528431:textColor    <- "#333333"
1522030528432:# Generate plot 1: Coast
1522030528432:dGroup <- 1
1522030528432:dataToPlot <- briefRelAbundance %>% filter(Population == dataGroups[dGroup])
1522030528434:pGroup1    <- ggplot(dataToPlot, aes(x = Sample, y = Abundance))
1522030528435:pGroup1    <- pGroup1 + geom_bar(stat = "identity", position = "stack",
1522030528436:aes(fill = Family)
1522030528436:# , alpha = 0.95,
1522030528436:, width = 0.8
1522030528436:, color = "#000000"
1522030528437:, size = 0.2
1522030528437:)
1522030528440:pGroup1 <- pGroup1 + scale_fill_manual(values = rev(palette[1:(nTopElements+1)]))
1522030528441:pGroup1 <- pGroup1 + scale_y_continuous(expand = c(0, 0))
1522030528442:pGroup1 <- pGroup1 + customTheme
1522030528444:pGroup1 <- pGroup1 + labs(title = titles[dGroup], y = labels["y"], x = "")
1522030528445:pGroup1 <- pGroup1 + theme(axis.line.x  = element_blank(),
1522030528446:axis.text.x  = element_text(angle = 50, hjust = 1),
1522030528446:axis.ticks.x = element_blank(),
1522030528446:strip.background = element_blank(),
1522030528447:strip.text.x = element_text(margin = margin(0.2,0,0.8,0, "cm"),
1522030528447:size = baseTextSize * 1.025),
1522030528447:panel.spacing    = unit(2, "lines"))
1522030528450:pGroup1
1522030589385:# Generate plot 1: Coast
1522030589386:dGroup <- 1
1522030595898:# Figure 2
1522030595899:# Sources -----------------------------------------------------------------
1522030595900:# Packages ----------------------------------------------------------------
1522030595901:requiredPackages <- c("tidyverse", "rlang", "dendsort", "ggfortify", "ggpubr", "pheatmap",
1522030595901:"RColorBrewer", "vegan", "formatR")
1522030595902:installAndLoadPackages(requiredPackages)
1522030595910:source("scripts/auxiliary_functions.R")
1522030595916:# Loading Data ------------------------------------------------------------
1522030595917:extDataFile <- "data/gt_and_tumaco_samples.otu_table.tsv"
1522030595918:extData     <- read.delim(extDataFile, check.names = FALSE,
1522030595919:stringsAsFactors = F)
1522030595967:extData     <- as_tibble(extData)
1522030595970:attributes(extData)
1522030595999:metadataFile <- "data/metadata.tsv"
1522030596000:metadata     <- read_tsv(metadataFile)
1522030596008:attributes(metadata)
1522030596020:# General configuration ---------------------------------------------------
1522030596020:useOnlyGTSamples <- TRUE
1522030596021:dataGroups   <- c("Coast", "Mountain")
1522030596021:groupVar     <- "Population"
1522030596022:titles       <- c(dataGroups, "General\nProfile")
1522030596022:labels       <- c(y = "Relative Abundance")
1522030596023:nTopElements <- 10
1522030596023:# Preparing data ----------------------------------------------------------
1522030596024:# Get samples sequenced through GT
1522030596024:gtSamples <- metadata %>%
1522030596024:filter(Seq_Origin == "GT1" | Seq_Origin == "GT2") %>%
1522030596025:select(Sample)
1522030596028:tumacoSamples <- metadata %>%
1522030596028:filter(Additional_Sample == 1) %>%
1522030596029:select(Sample)
1522030596032:pull(gtSamples)
1522030596035:pull(tumacoSamples)
1522030596036:# Select samples
1522030596037:if (useOnlyGTSamples) {
1522030596037:# Indices for samples from GT only and Tumaco Additional Samples
1522030596037:samples <- pull(gtSamples)
1522030596038:} else {
1522030596038:# Include Tumaco additional samples
1522030596038:samples <- c(pull(gtSamples), pull(tumacoSamples))
1522030596038:}
1522030596039:# Indices of sample columns
1522030596039:samplesInd <- which(colnames(extData) %in% samples)
1522030596040:# Select metadata
1522030596040:partialMetadata <- metadata %>%
1522030596041:# filter(Included_In_Study == 1) %>%
1522030596041:filter(Sample %in% samples) %>%
1522030596041:select(Sample, Evolution, Population = Residence)
1522030596045:# Add "UNSUPPORTED MAPPING" to blank cells from the taxonomy columns
1522030596046:for(col in c("Class", "Order", "Family", "Genera", "Species")){
1522030596046:extData[extData[[col]] == "", col] = "UNSUPPORTED MAPPING"
1522030596046:}
1522030596053:# Add Reads column: total reads per OTU
1522030596053:extData <- extData %>%
1522030596053:mutate(Reads = rowSums(.[samplesInd]))
1522030596059:# Figure 2: Relative abundance (Family and Class) -------------------------
1522030596060:# Preparing data
1522030596060:# Calculate Relative Abundance per Family
1522030596060:(relAbundance <- extData %>%
1522030596061:group_by(Family) %>%                          # group by Family column
1522030596061:summarise_at(samplesInd, sum) %>%             # compute sum of reads for each Family
1522030596061:mutate_if(is.numeric, funs( . / sum(.))) %>%  # Normalize (rel. abundance)
1522030596062:mutate(TotalAbundance = rowSums(select(., -Family))) %>%
1522030596062:arrange(desc(TotalAbundance))
1522030596062:)
1522030596231:# Get top families by total abundance
1522030596232:top <- relAbundance %>%
1522030596232:top_n(nTopElements, TotalAbundance) %>%
1522030596233:select(-TotalAbundance)
1522030596239:# Group the rest of the families into the family "Others"
1522030596240:rest <- relAbundance %>%
1522030596240:top_n(-(nrow(relAbundance) - nTopElements), TotalAbundance) %>%
1522030596241:gather(Sample, Abundance, -Family) %>%
1522030596241:group_by(Sample) %>%
1522030596241:summarise(Total = sum(Abundance)) %>%
1522030596241:spread(Sample, Total) %>%
1522030596242:mutate(Family = c("Others")) %>%
1522030596242:select(Family, -TotalAbundance, everything()) %>%
1522030596242:select(-TotalAbundance)
1522030596261:# Bind top and rest families into a single table (tibble)
1522030596261:briefRelAbundance <- rbind.data.frame(top, rest)
1522030596263:# Get the order of families by total abundance (originally
1522030596263:# from relAbundance table)
1522030596264:orderedFamilies <- briefRelAbundance$Family
1522030596264:# Get the order of samples by the most abundant family
1522030596265:orderedSamples  <- names(sort(as.vector(as.data.frame(briefRelAbundance[1,-1]))))
1522030596266:# Change the order of Families and Samples
1522030596267:(briefRelAbundance <- briefRelAbundance %>%
1522030596267:gather(Sample, Abundance, -Family) %>%
1522030596267:spread(Family, Abundance) %>%
1522030596267:left_join(partialMetadata) %>%
1522030596268:gather(Family, Abundance, -Sample, -Population, -Evolution) %>%
1522030596268:mutate(Family = factor(Family, levels = rev(orderedFamilies))) %>%
1522030596268:mutate(Sample = factor(Sample, levels = orderedSamples)) # %>%
1522030596269:)
1522030596327:# Visualize colors
1522030596327:pal(rev(palette))
1522030596339:pal(palette)
1522030596557:# Plot Abundance --------------------------------------------------------
1522030596557:dataToPlot <- briefRelAbundance
1522030596558:# ggpubr ------------------------------------------------------------------
1522030596558:(abundancePLot <- ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1522030596558:fill = "Family",               # change fill color by cyl
1522030596559:# color = "white",            # Set bar border colors to white
1522030596559:# palette = "jco",            # jco journal color palett. see ?ggpar
1522030596559:palette = rev(palette[1:(nTopElements+1)]),
1522030596559:# sort.val = "desc",          # Sort the value in dscending order
1522030596560:# sort.by.groups = FALSE,     # Don't sort inside each group
1522030596560:x.text.angle = 50, # Rotate vertically x axis texts
1522030596560:width = 1
1522030596561:) +
1522030596561:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522030596561:theme(panel.grid.major = element_blank(),
1522030596562:axis.text.x = element_text(angle = 50, hjust = 1),
1522030596562:strip.background = element_blank(),
1522030596562:panel.border = element_blank(),
1522030596563:legend.position = "right"
1522030596563:))
1522030597159:metadata %>%
1522030597160:filter(Sample %in% samples) %>%
1522030597160:select(Sample, Evolution, Population = Residence,
1522030597160:Ae2, Aa1, Aea, Ae1) %>%
1522030597161:gather(Ancestry, Proportion, -Sample,
1522030597161:-Population, -Evolution) %>%
1522030597161:mutate(Sample = factor(Sample, levels = orderedSamples))
1522030597216:# Visualize colors
1522030597217:pal(rev(palette))
1522030597389:pal(palette)
1522030597537:# Plot Abundance --------------------------------------------------------
1522030597537:dataToPlot <- metadata %>%
1522030597538:filter(Sample %in% samples) %>%
1522030597538:select(Sample, Evolution, Population = Residence,
1522030597538:Ae2, Aa1, Aea, Ae1) %>%
1522030597539:gather(Ancestry, Proportion, -Sample,
1522030597539:-Population, -Evolution) %>%
1522030597539:mutate(Sample = factor(Sample, levels = orderedSamples))
1522030597547:# ggpubr ------------------------------------------------------------------
1522030597547:(ancestryPlot <- ggbarplot(dataToPlot, x = "Sample", y = "Proportion",
1522030597547:fill = "Ancestry",               # change fill color by cyl
1522030597548:# color = "white",            # Set bar border colors to white
1522030597548:# palette = "jco",            # jco journal color palett. see ?ggpar
1522030597548:# palette = rev(palette[1:(nTopElements+1)]),
1522030597548:palette = c("#00AFBB", "#E7B800", "#FC4E07", "darkgrey"),
1522030597549:# sort.val = "desc",          #f- Sort the value in dscending order
1522030597549:# sort.by.groups = FALSE,     # Don't sort inside each group
1522030597549:x.text.angle = 50, # Rotate vertically x axis texts
1522030597550:width = 1
1522030597550:) +
1522030597550:# facet_wrap(~ Population, scales = "free_x") +
1522030597551:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522030597551:theme(panel.grid.major = element_blank(),
1522030597551:axis.text.x = element_text(angle = 50, hjust = 1),
1522030597552:# strip.background = element_blank(),
1522030597552:panel.border = element_blank(),
1522030597553:legend.position = "right",
1522030597553:strip.background = element_blank(),
1522030597553:strip.text.x = element_blank()
1522030597554:))
1522030598082:(finalPlot <- ggarrange(abundancePLot + rremove("xlab") + rremove("x.axis") + rremove("x.text") + rremove("x.ticks")
1522030598082:# + theme(plot.margin = unit(c(1,2,1,1), "mm"))
1522030598082:, ancestryPlot# + rremove("y.text") + rremove("y.axis")
1522030598083:# + rremove("ylab") + rremove("y.ticks")
1522030598083:# + theme(plot.margin = unit(c(1,5,1,0), "mm"))
1522030598083:# , pGeneral
1522030598084:# + theme(plot.margin = unit(c(1,4,1,1), "mm"))
1522030598084:# + rremove("y.text") + rremove("y.axis") + rremove("ylab") + rremove("y.ticks")
1522030598084:# # ramPlot + theme(plot.margin = unit(c(1,18,1,1), "mm")) + rremove("y.text"),
1522030598085:# , labels = c("A", "", "B")
1522030598085:, ncol = 1, nrow = 2
1522030598085:# , widths = widths
1522030598086:, align = "v"
1522030598086:# , align = "h"
1522030598086:, common.legend = TRUE
1522030598087:, legend = c("bottom")
1522030598087:))
1522030599353:# ggplot2 -----------------------------------------------------------------
1522030599354:# Base variables
1522030599354:width        <- 8
1522030599355:lineSize     <- 0.5
1522030599355:baseTextSize <- 14
1522030599356:height       <- width * 0.618
1522030599356:axisColor    <- "#333333"
1522030599357:gridColor    <- "#cccccc"
1522030599357:textColor    <- "#333333"
1522030599358:# Generate plot 1: Coast
1522030599358:dGroup <- 1
1522030599359:dataToPlot <- briefRelAbundance %>% filter(Population == dataGroups[dGroup])
1522030599360:pGroup1    <- ggplot(dataToPlot, aes(x = Sample, y = Abundance))
1522030599361:pGroup1    <- pGroup1 + geom_bar(stat = "identity", position = "stack",
1522030599361:aes(fill = Family)
1522030599362:# , alpha = 0.95,
1522030599362:, width = 0.8
1522030599362:, color = "#000000"
1522030599363:, size = 0.2
1522030599363:)
1522030599366:pGroup1 <- pGroup1 + scale_fill_manual(values = rev(palette[1:(nTopElements+1)]))
1522030599367:pGroup1 <- pGroup1 + scale_y_continuous(expand = c(0, 0))
1522030599368:pGroup1 <- pGroup1 + customTheme
1522030599371:pGroup1 <- pGroup1 + labs(title = titles[dGroup], y = labels["y"], x = "")
1522030599372:pGroup1 <- pGroup1 + theme(axis.line.x  = element_blank(),
1522030599373:axis.text.x  = element_text(angle = 50, hjust = 1),
1522030599373:axis.ticks.x = element_blank(),
1522030599373:strip.background = element_blank(),
1522030599374:strip.text.x = element_text(margin = margin(0.2,0,0.8,0, "cm"),
1522030599374:size = baseTextSize * 1.025),
1522030599375:panel.spacing    = unit(2, "lines"))
1522030599379:pGroup1
1522030619904:dGroup     <- 2
1522030619905:dataToPlot <- briefRelAbundance %>% filter(Population == dataGroups[dGroup])
1522030619907:pGroup2    <- ggplot(dataToPlot, aes(x = Sample, y = Abundance))
1522030619909:pGroup2    <- pGroup2 + geom_bar(stat = "identity", position = "stack",
1522030619910:aes(fill = Family)
1522030619910:# , alpha = 0.95,
1522030619910:, width = 0.8
1522030619911:, color = "#000000"
1522030619911:, size = 0.2
1522030619912:)
1522030619915:pGroup2 <- pGroup2 + scale_fill_manual(values = rev(palette[1:(nTopElements+1)]))
1522030619916:pGroup2 <- pGroup2 + scale_y_continuous(expand = c(0, 0))
1522030619917:pGroup2 <- pGroup2 + customTheme
1522030619920:pGroup2 <- pGroup2 + labs(title = titles[dGroup], y = labels["y"])
1522030619922:pGroup2 <- pGroup2 + theme(axis.line.x  = element_blank(),
1522030619923:axis.text.x  = element_text(angle = 50, hjust = 1),
1522030619923:axis.ticks.x = element_blank(),
1522030619923:strip.background = element_blank(),
1522030619924:strip.text.x = element_text(margin = margin(0.2,0,0.8,0, "cm"),
1522030619924:size = baseTextSize * 1.025),
1522030619924:panel.spacing    = unit(2, "lines"))
1522030619928:pGroup2
1522030683215:dGroup <- 1
1522030683217:dataToPlot <- briefRelAbundance %>% filter(Population == dataGroups[dGroup])
1522030683220:pGroup1    <- ggplot(dataToPlot, aes(x = Sample, y = Abundance))
1522030683221:pGroup1    <- pGroup1 + geom_bar(stat = "identity", position = "stack",
1522030683222:aes(fill = Family)
1522030683222:# , alpha = 0.95,
1522030683222:, width = 1
1522030683223:, color = "#000000"
1522030683223:, size = 0.2
1522030683224:)
1522030683226:pGroup1 <- pGroup1 + scale_fill_manual(values = rev(palette[1:(nTopElements+1)]))
1522030683227:pGroup1 <- pGroup1 + scale_y_continuous(expand = c(0, 0))
1522030683229:pGroup1 <- pGroup1 + customTheme
1522030683231:pGroup1 <- pGroup1 + labs(title = titles[dGroup], y = labels["y"], x = "")
1522030683233:pGroup1 <- pGroup1 + theme(axis.line.x  = element_blank(),
1522030683233:axis.text.x  = element_text(angle = 50, hjust = 1),
1522030683233:axis.ticks.x = element_blank(),
1522030683234:strip.background = element_blank(),
1522030683234:strip.text.x = element_text(margin = margin(0.2,0,0.8,0, "cm"),
1522030683234:size = baseTextSize * 1.025),
1522030683235:panel.spacing    = unit(2, "lines"))
1522030683238:pGroup1
1522030724001:# ggpubr ------------------------------------------------------------------
1522030724001:(abundancePLot <- ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1522030724002:fill = "Family",               # change fill color by cyl
1522030724002:# color = "white",            # Set bar border colors to white
1522030724003:# palette = "jco",            # jco journal color palett. see ?ggpar
1522030724003:palette = rev(palette[1:(nTopElements+1)]),
1522030724003:# sort.val = "desc",          # Sort the value in dscending order
1522030724004:# sort.by.groups = FALSE,     # Don't sort inside each group
1522030724004:x.text.angle = 50, # Rotate vertically x axis texts
1522030724005:width = 1
1522030724005:, size = 0.2
1522030724005:) +
1522030724006:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522030724006:theme(panel.grid.major = element_blank(),
1522030724006:axis.text.x = element_text(angle = 50, hjust = 1),
1522030724007:strip.background = element_blank(),
1522030724008:panel.border = element_blank(),
1522030724008:legend.position = "right"
1522030724009:))
1522030734602:abundancePLot
1522030744347:# ggpubr ------------------------------------------------------------------
1522030744348:(abundancePLot <- ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1522030744348:fill = "Family",               # change fill color by cyl
1522030744348:# color = "white",            # Set bar border colors to white
1522030744349:# palette = "jco",            # jco journal color palett. see ?ggpar
1522030744349:palette = rev(palette[1:(nTopElements+1)]),
1522030744350:# sort.val = "desc",          # Sort the value in dscending order
1522030744351:# sort.by.groups = FALSE,     # Don't sort inside each group
1522030744351:x.text.angle = 50, # Rotate vertically x axis texts
1522030744352:width = 1
1522030744352:, size = 0.2
1522030744352:) +
1522030744353:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522030744353:theme(panel.grid.major = element_blank(),
1522030744353:axis.text.x = element_text(angle = 50, hjust = 1),
1522030744354:strip.background = element_blank(),
1522030744354:panel.border = element_blank(),
1522030744354:legend.position = "right"
1522030744355:))
1522030748241:# Figure 2
1522030748242:# Sources -----------------------------------------------------------------
1522030748243:# Packages ----------------------------------------------------------------
1522030748244:requiredPackages <- c("tidyverse", "rlang", "dendsort", "ggfortify", "ggpubr", "pheatmap",
1522030748244:"RColorBrewer", "vegan", "formatR")
1522030748245:installAndLoadPackages(requiredPackages)
1522030748249:source("scripts/auxiliary_functions.R")
1522030748254:# Loading Data ------------------------------------------------------------
1522030748255:extDataFile <- "data/gt_and_tumaco_samples.otu_table.tsv"
1522030748256:extData     <- read.delim(extDataFile, check.names = FALSE,
1522030748257:stringsAsFactors = F)
1522030748296:extData     <- as_tibble(extData)
1522030748298:attributes(extData)
1522030748332:metadataFile <- "data/metadata.tsv"
1522030748332:metadata     <- read_tsv(metadataFile)
1522030748341:attributes(metadata)
1522030748351:# General configuration ---------------------------------------------------
1522030748352:useOnlyGTSamples <- TRUE
1522030748352:dataGroups   <- c("Coast", "Mountain")
1522030748353:groupVar     <- "Population"
1522030748353:titles       <- c(dataGroups, "General\nProfile")
1522030748354:labels       <- c(y = "Relative Abundance")
1522030748354:nTopElements <- 10
1522030748355:# Preparing data ----------------------------------------------------------
1522030748356:# Get samples sequenced through GT
1522030748356:gtSamples <- metadata %>%
1522030748356:filter(Seq_Origin == "GT1" | Seq_Origin == "GT2") %>%
1522030748357:select(Sample)
1522030748360:tumacoSamples <- metadata %>%
1522030748360:filter(Additional_Sample == 1) %>%
1522030748361:select(Sample)
1522030748375:pull(gtSamples)
1522030748378:pull(tumacoSamples)
1522030748380:# Select samples
1522030748380:if (useOnlyGTSamples) {
1522030748380:# Indices for samples from GT only and Tumaco Additional Samples
1522030748381:samples <- pull(gtSamples)
1522030748381:} else {
1522030748381:# Include Tumaco additional samples
1522030748382:samples <- c(pull(gtSamples), pull(tumacoSamples))
1522030748382:}
1522030748383:# Indices of sample columns
1522030748383:samplesInd <- which(colnames(extData) %in% samples)
1522030748384:# Select metadata
1522030748384:partialMetadata <- metadata %>%
1522030748385:# filter(Included_In_Study == 1) %>%
1522030748385:filter(Sample %in% samples) %>%
1522030748385:select(Sample, Evolution, Population = Residence)
1522030748389:# Add "UNSUPPORTED MAPPING" to blank cells from the taxonomy columns
1522030748389:for(col in c("Class", "Order", "Family", "Genera", "Species")){
1522030748389:extData[extData[[col]] == "", col] = "UNSUPPORTED MAPPING"
1522030748390:}
1522030748399:# Add Reads column: total reads per OTU
1522030748399:extData <- extData %>%
1522030748400:mutate(Reads = rowSums(.[samplesInd]))
1522030748409:# Figure 2: Relative abundance (Family and Class) -------------------------
1522030748409:# Preparing data
1522030748410:# Calculate Relative Abundance per Family
1522030748410:(relAbundance <- extData %>%
1522030748410:group_by(Family) %>%                          # group by Family column
1522030748411:summarise_at(samplesInd, sum) %>%             # compute sum of reads for each Family
1522030748411:mutate_if(is.numeric, funs( . / sum(.))) %>%  # Normalize (rel. abundance)
1522030748411:mutate(TotalAbundance = rowSums(select(., -Family))) %>%
1522030748412:arrange(desc(TotalAbundance))
1522030748412:)
1522030748556:# Get top families by total abundance
1522030748556:top <- relAbundance %>%
1522030748556:top_n(nTopElements, TotalAbundance) %>%
1522030748557:select(-TotalAbundance)
1522030748561:# Group the rest of the families into the family "Others"
1522030748561:rest <- relAbundance %>%
1522030748561:top_n(-(nrow(relAbundance) - nTopElements), TotalAbundance) %>%
1522030748562:gather(Sample, Abundance, -Family) %>%
1522030748562:group_by(Sample) %>%
1522030748562:summarise(Total = sum(Abundance)) %>%
1522030748563:spread(Sample, Total) %>%
1522030748563:mutate(Family = c("Others")) %>%
1522030748563:select(Family, -TotalAbundance, everything()) %>%
1522030748564:select(-TotalAbundance)
1522030748581:# Bind top and rest families into a single table (tibble)
1522030748581:briefRelAbundance <- rbind.data.frame(top, rest)
1522030748582:# Get the order of families by total abundance (originally
1522030748583:# from relAbundance table)
1522030748583:orderedFamilies <- briefRelAbundance$Family
1522030748584:# Get the order of samples by the most abundant family
1522030748584:orderedSamples  <- names(sort(as.vector(as.data.frame(briefRelAbundance[1,-1]))))
1522030748586:# Change the order of Families and Samples
1522030748586:(briefRelAbundance <- briefRelAbundance %>%
1522030748586:gather(Sample, Abundance, -Family) %>%
1522030748587:spread(Family, Abundance) %>%
1522030748587:left_join(partialMetadata) %>%
1522030748587:gather(Family, Abundance, -Sample, -Population, -Evolution) %>%
1522030748588:mutate(Family = factor(Family, levels = rev(orderedFamilies))) %>%
1522030748588:mutate(Sample = factor(Sample, levels = orderedSamples)) # %>%
1522030748589:)
1522030748658:# Visualize colors
1522030748658:pal(rev(palette))
1522030748669:pal(palette)
1522030748811:# Plot Abundance --------------------------------------------------------
1522030748811:dataToPlot <- briefRelAbundance
1522030752784:# ggpubr ------------------------------------------------------------------
1522030752785:(abundancePLot <- ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1522030752785:fill = "Family",               # change fill color by cyl
1522030752786:# color = "white",            # Set bar border colors to white
1522030752786:# palette = "jco",            # jco journal color palett. see ?ggpar
1522030752787:palette = rev(palette[1:(nTopElements+1)]),
1522030752787:# sort.val = "desc",          # Sort the value in dscending order
1522030752788:# sort.by.groups = FALSE,     # Don't sort inside each group
1522030752788:x.text.angle = 50, # Rotate vertically x axis texts
1522030752789:width = 1
1522030752790:, size = 0.2
1522030752791:) +
1522030752791:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522030752792:theme(panel.grid.major = element_blank(),
1522030752793:axis.text.x = element_text(angle = 50, hjust = 1),
1522030752794:strip.background = element_blank(),
1522030752794:panel.border = element_blank(),
1522030752795:legend.position = "right"
1522030752795:))
1522030761709:# ggpubr ------------------------------------------------------------------
1522030761710:(abundancePLot <- ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1522030761710:fill = "Family",               # change fill color by cyl
1522030761711:# color = "white",            # Set bar border colors to white
1522030761711:# palette = "jco",            # jco journal color palett. see ?ggpar
1522030761712:palette = rev(palette[1:(nTopElements+1)]),
1522030761712:# sort.val = "desc",          # Sort the value in dscending order
1522030761712:# sort.by.groups = FALSE,     # Don't sort inside each group
1522030761713:x.text.angle = 50, # Rotate vertically x axis texts
1522030761713:width = 1
1522030761714:, size = 0.5
1522030761714:) +
1522030761714:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522030761715:theme(panel.grid.major = element_blank(),
1522030761715:axis.text.x = element_text(angle = 50, hjust = 1),
1522030761716:strip.background = element_blank(),
1522030761716:panel.border = element_blank(),
1522030761717:legend.position = "right"
1522030761717:))
1522030776092:# ggpubr ------------------------------------------------------------------
1522030776093:(abundancePLot <- ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1522030776093:fill = "Family",               # change fill color by cyl
1522030776094:# color = "white",            # Set bar border colors to white
1522030776094:# palette = "jco",            # jco journal color palett. see ?ggpar
1522030776095:palette = rev(palette[1:(nTopElements+1)]),
1522030776095:# sort.val = "desc",          # Sort the value in dscending order
1522030776096:# sort.by.groups = FALSE,     # Don't sort inside each group
1522030776096:x.text.angle = 50, # Rotate vertically x axis texts
1522030776097:width = 1
1522030776098:, size = 0.3
1522030776099:) +
1522030776099:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522030776100:theme(panel.grid.major = element_blank(),
1522030776100:axis.text.x = element_text(angle = 50, hjust = 1),
1522030776100:strip.background = element_blank(),
1522030776101:panel.border = element_blank(),
1522030776101:legend.position = "right"
1522030776102:))
1522030793940:# ggpubr ------------------------------------------------------------------
1522030793941:(ancestryPlot <- ggbarplot(dataToPlot, x = "Sample", y = "Proportion",
1522030793941:fill = "Ancestry",               # change fill color by cyl
1522030793942:# color = "white",            # Set bar border colors to white
1522030793943:# palette = "jco",            # jco journal color palett. see ?ggpar
1522030793943:# palette = rev(palette[1:(nTopElements+1)]),
1522030793944:palette = c("#00AFBB", "#E7B800", "#FC4E07", "darkgrey"),
1522030793944:# sort.val = "desc",          #f- Sort the value in dscending order
1522030793945:# sort.by.groups = FALSE,     # Don't sort inside each group
1522030793946:x.text.angle = 50, # Rotate vertically x axis texts
1522030793946:width = 1
1522030793947:, size = 0.3
1522030793948:) +
1522030793948:# facet_wrap(~ Population, scales = "free_x") +
1522030793949:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522030793950:theme(panel.grid.major = element_blank(),
1522030793950:axis.text.x = element_text(angle = 50, hjust = 1),
1522030793951:# strip.background = element_blank(),
1522030793952:panel.border = element_blank(),
1522030793952:legend.position = "right",
1522030793953:strip.background = element_blank(),
1522030793953:strip.text.x = element_blank()
1522030793954:))
1522030795772:(finalPlot <- ggarrange(abundancePLot + rremove("xlab") + rremove("x.axis") + rremove("x.text") + rremove("x.ticks")
1522030795773:# + theme(plot.margin = unit(c(1,2,1,1), "mm"))
1522030795774:, ancestryPlot# + rremove("y.text") + rremove("y.axis")
1522030795774:# + rremove("ylab") + rremove("y.ticks")
1522030795775:# + theme(plot.margin = unit(c(1,5,1,0), "mm"))
1522030795775:# , pGeneral
1522030795775:# + theme(plot.margin = unit(c(1,4,1,1), "mm"))
1522030795776:# + rremove("y.text") + rremove("y.axis") + rremove("ylab") + rremove("y.ticks")
1522030795777:# # ramPlot + theme(plot.margin = unit(c(1,18,1,1), "mm")) + rremove("y.text"),
1522030795777:# , labels = c("A", "", "B")
1522030795778:, ncol = 1, nrow = 2
1522030795779:# , widths = widths
1522030795780:, align = "v"
1522030795780:# , align = "h"
1522030795781:, common.legend = TRUE
1522030795781:, legend = c("bottom")
1522030795782:))
1522030844631:# (finalPlot <- ggarrange(abundancePLot + rremove("xlab") + rremove("x.axis") + rremove("x.text") + rremove("x.ticks")
1522030844632:(finalPlot <- ggarrange(abundancePLot + rremove("xlab") + rremove("axis") + rremove("x.text") + rremove("x.ticks")
1522030844632:# + theme(plot.margin = unit(c(1,2,1,1), "mm"))
1522030844633:, ancestryPlot# + rremove("y.text") + rremove("y.axis")
1522030844634:# + rremove("ylab") + rremove("y.ticks")
1522030844634:# + theme(plot.margin = unit(c(1,5,1,0), "mm"))
1522030844635:# , pGeneral
1522030844635:# + theme(plot.margin = unit(c(1,4,1,1), "mm"))
1522030844636:# + rremove("y.text") + rremove("y.axis") + rremove("ylab") + rremove("y.ticks")
1522030844637:# # ramPlot + theme(plot.margin = unit(c(1,18,1,1), "mm")) + rremove("y.text"),
1522030844637:# , labels = c("A", "", "B")
1522030844638:, ncol = 1, nrow = 2
1522030844638:# , widths = widths
1522030844639:, align = "v"
1522030844639:# , align = "h"
1522030844640:, common.legend = TRUE
1522030844641:, legend = c("bottom")
1522030844642:))
1522030880216:(abundancePLot <- ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1522030880216:fill = "Family",               # change fill color by cyl
1522030880217:# color = "white",            # Set bar border colors to white
1522030880218:# palette = "jco",            # jco journal color palett. see ?ggpar
1522030880219:palette = rev(palette[1:(nTopElements+1)]),
1522030880220:# sort.val = "desc",          # Sort the value in dscending order
1522030880221:# sort.by.groups = FALSE,     # Don't sort inside each group
1522030880222:x.text.angle = 50, # Rotate vertically x axis texts
1522030880222:width = 1
1522030880223:, size = 0.3
1522030880224:) +
1522030880224:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522030880225:theme(panel.grid.major = element_blank(),
1522030880226:axis.text.x = element_text(angle = 50, hjust = 1),
1522030880227:strip.background = element_blank(),
1522030880228:panel.border = element_blank(),
1522030880228:legend.position = "right"
1522030880228:))
1522030880710:metadata %>%
1522030880710:filter(Sample %in% samples) %>%
1522030880710:select(Sample, Evolution, Population = Residence,
1522030880711:Ae2, Aa1, Aea, Ae1) %>%
1522030880711:gather(Ancestry, Proportion, -Sample,
1522030880711:-Population, -Evolution) %>%
1522030880712:mutate(Sample = factor(Sample, levels = orderedSamples))
1522030880758:# Visualize colors
1522030880758:pal(rev(palette))
1522030880933:pal(palette)
1522030881093:# Plot Abundance --------------------------------------------------------
1522030881093:dataToPlot <- metadata %>%
1522030881093:filter(Sample %in% samples) %>%
1522030881094:select(Sample, Evolution, Population = Residence,
1522030881094:Ae2, Aa1, Aea, Ae1) %>%
1522030881094:gather(Ancestry, Proportion, -Sample,
1522030881095:-Population, -Evolution) %>%
1522030881095:mutate(Sample = factor(Sample, levels = orderedSamples))
1522030881102:# ggpubr ------------------------------------------------------------------
1522030881103:(ancestryPlot <- ggbarplot(dataToPlot, x = "Sample", y = "Proportion",
1522030881103:fill = "Ancestry",               # change fill color by cyl
1522030881103:# color = "white",            # Set bar border colors to white
1522030881103:# palette = "jco",            # jco journal color palett. see ?ggpar
1522030881104:# palette = rev(palette[1:(nTopElements+1)]),
1522030881104:palette = c("#00AFBB", "#E7B800", "#FC4E07", "darkgrey"),
1522030881104:# sort.val = "desc",          #f- Sort the value in dscending order
1522030881105:# sort.by.groups = FALSE,     # Don't sort inside each group
1522030881105:x.text.angle = 50, # Rotate vertically x axis texts
1522030881105:width = 1
1522030881106:, size = 0.3
1522030881106:) +
1522030881106:# facet_wrap(~ Population, scales = "free_x") +
1522030881106:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522030881107:theme(panel.grid.major = element_blank(),
1522030881107:axis.text.x = element_text(angle = 50, hjust = 1),
1522030881108:# strip.background = element_blank(),
1522030881108:panel.border = element_blank(),
1522030881108:legend.position = "right",
1522030881109:strip.background = element_blank(),
1522030881109:strip.text.x = element_blank()
1522030881110:))
1522030881710:# (finalPlot <- ggarrange(abundancePLot + rremove("xlab") + rremove("x.axis") + rremove("x.text") + rremove("x.ticks")
1522030881710:(finalPlot <- ggarrange(abundancePLot + rremove("xlab") + rremove("axis") + rremove("x.text") + rremove("x.ticks")
1522030881711:# + theme(plot.margin = unit(c(1,2,1,1), "mm"))
1522030881711:, ancestryPlot# + rremove("y.text") + rremove("y.axis")
1522030881711:# + rremove("ylab") + rremove("y.ticks")
1522030881712:# + theme(plot.margin = unit(c(1,5,1,0), "mm"))
1522030881712:# , pGeneral
1522030881712:# + theme(plot.margin = unit(c(1,4,1,1), "mm"))
1522030881713:# + rremove("y.text") + rremove("y.axis") + rremove("ylab") + rremove("y.ticks")
1522030881713:# # ramPlot + theme(plot.margin = unit(c(1,18,1,1), "mm")) + rremove("y.text"),
1522030881713:# , labels = c("A", "", "B")
1522030881714:, ncol = 1, nrow = 2
1522030881714:# , widths = widths
1522030881714:, align = "v"
1522030881715:# , align = "h"
1522030881715:, common.legend = TRUE
1522030881715:, legend = c("bottom")
1522030881716:))
1522030932621:# (finalPlot <- ggarrange(abundancePLot + rremove("xlab") + rremove("x.axis") + rremove("x.text") + rremove("x.ticks")
1522030932621:(finalPlot <- ggarrange(abundancePLot + rremove("xlab") + rremove("axis") + rremove("x.text") + rremove("x.ticks")
1522030932622:# + theme(plot.margin = unit(c(1,2,1,1), "mm"))
1522030932622:, ancestryPlot + rremove("y.axis")
1522030932622:# + rremove("ylab") + rremove("y.ticks")
1522030932623:# + theme(plot.margin = unit(c(1,5,1,0), "mm"))
1522030932623:# , pGeneral
1522030932624:# + theme(plot.margin = unit(c(1,4,1,1), "mm"))
1522030932624:# + rremove("y.text") + rremove("y.axis") + rremove("ylab") + rremove("y.ticks")
1522030932624:# # ramPlot + theme(plot.margin = unit(c(1,18,1,1), "mm")) + rremove("y.text"),
1522030932625:# , labels = c("A", "", "B")
1522030932625:, ncol = 1, nrow = 2
1522030932626:# , widths = widths
1522030932626:, align = "v"
1522030932626:# , align = "h"
1522030932627:, common.legend = TRUE
1522030932627:, legend = c("bottom")
1522030932627:))
1522031025473:# (finalPlot <- ggarrange(abundancePLot + rremove("xlab") + rremove("x.axis") + rremove("x.text") + rremove("x.ticks")
1522031025474:(finalPlot <- ggarrange(abundancePLot + rremove("xlab") + rremove("axis") + rremove("x.text") + rremove("x.ticks")
1522031025474:+ theme(plot.margin = unit(c(1,2,1,1), "mm"))
1522031025475:, ancestryPlot + rremove("y.axis")
1522031025476:# + rremove("ylab") + rremove("y.ticks")
1522031025476:# + theme(plot.margin = unit(c(1,5,1,0), "mm"))
1522031025477:# , pGeneral
1522031025477:# + theme(plot.margin = unit(c(1,4,1,1), "mm"))
1522031025478:# + rremove("y.text") + rremove("y.axis") + rremove("ylab") + rremove("y.ticks")
1522031025478:# # ramPlot + theme(plot.margin = unit(c(1,18,1,1), "mm")) + rremove("y.text"),
1522031025478:# , labels = c("A", "", "B")
1522031025479:, ncol = 1, nrow = 2
1522031025479:# , widths = widths
1522031025480:, align = "v"
1522031025480:# , align = "h"
1522031025480:, common.legend = TRUE
1522031025481:, legend = c("bottom")
1522031025481:))
1522031102987:# ggpubr ------------------------------------------------------------------
1522031102988:(ancestryPlot <- ggbarplot(dataToPlot, x = "Sample", y = "Proportion",
1522031102989:fill = "Ancestry",               # change fill color by cyl
1522031102989:# color = "white",            # Set bar border colors to white
1522031102989:# palette = "jco",            # jco journal color palett. see ?ggpar
1522031102990:# palette = rev(palette[1:(nTopElements+1)]),
1522031102990:palette = c("#00AFBB", "#E7B800", "#FC4E07", "darkgrey"),
1522031102991:# sort.val = "desc",          #f- Sort the value in dscending order
1522031102991:# sort.by.groups = FALSE,     # Don't sort inside each group
1522031102992:x.text.angle = 50, # Rotate vertically x axis texts
1522031102992:width = 1
1522031102993:, size = 0.3
1522031102993:) +
1522031102994:# facet_wrap(~ Population, scales = "free_x") +
1522031102994:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522031102995:labs(y = "Relative Abundance") +
1522031102995:theme(panel.grid.major = element_blank(),
1522031102995:axis.text.x = element_text(angle = 50, hjust = 1),
1522031102996:# strip.background = element_blank(),
1522031102996:panel.border = element_blank(),
1522031102997:legend.position = "right",
1522031102998:strip.background = element_blank(),
1522031102998:strip.text.x = element_blank()
1522031102999:))
1522031159226:(abundancePLot <- ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1522031159227:fill = "Family",               # change fill color by cyl
1522031159228:# color = "white",            # Set bar border colors to white
1522031159228:# palette = "jco",            # jco journal color palett. see ?ggpar
1522031159229:palette = rev(palette[1:(nTopElements+1)]),
1522031159229:# sort.val = "desc",          # Sort the value in dscending order
1522031159230:# sort.by.groups = FALSE,     # Don't sort inside each group
1522031159230:x.text.angle = 50, # Rotate vertically x axis texts
1522031159231:width = 1
1522031159231:, size = 0.3
1522031159232:) +
1522031159232:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522031159233:labs(y = "Relative Abundance") +
1522031159233:theme(panel.grid.major = element_blank(),
1522031159233:axis.text.x = element_text(angle = 50, hjust = 1),
1522031159234:strip.background = element_blank(),
1522031159234:panel.border = element_blank(),
1522031159235:legend.position = "right"
1522031159235:))
1522031159260:metadata %>%
1522031159261:filter(Sample %in% samples) %>%
1522031159261:select(Sample, Evolution, Population = Residence,
1522031159261:Ae2, Aa1, Aea, Ae1) %>%
1522031159262:gather(Ancestry, Proportion, -Sample,
1522031159262:-Population, -Evolution) %>%
1522031159262:mutate(Sample = factor(Sample, levels = orderedSamples))
1522031159315:# Visualize colors
1522031159316:pal(rev(palette))
1522031159329:pal(palette)
1522031159438:# Plot Abundance --------------------------------------------------------
1522031159439:dataToPlot <- metadata %>%
1522031159439:filter(Sample %in% samples) %>%
1522031159439:select(Sample, Evolution, Population = Residence,
1522031159440:Ae2, Aa1, Aea, Ae1) %>%
1522031159440:gather(Ancestry, Proportion, -Sample,
1522031159440:-Population, -Evolution) %>%
1522031159441:mutate(Sample = factor(Sample, levels = orderedSamples))
1522031159448:# ggpubr ------------------------------------------------------------------
1522031159448:(ancestryPlot <- ggbarplot(dataToPlot, x = "Sample", y = "Proportion",
1522031159448:fill = "Ancestry",               # change fill color by cyl
1522031159448:# color = "white",            # Set bar border colors to white
1522031159449:# palette = "jco",            # jco journal color palett. see ?ggpar
1522031159449:# palette = rev(palette[1:(nTopElements+1)]),
1522031159449:palette = c("#00AFBB", "#E7B800", "#FC4E07", "darkgrey"),
1522031159450:# sort.val = "desc",          #f- Sort the value in dscending order
1522031159450:# sort.by.groups = FALSE,     # Don't sort inside each group
1522031159450:x.text.angle = 50, # Rotate vertically x axis texts
1522031159450:width = 1
1522031159451:, size = 0.3
1522031159451:) +
1522031159451:# facet_wrap(~ Population, scales = "free_x") +
1522031159452:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522031159452:labs(y = "Ancestry Proportion") +
1522031159452:theme(panel.grid.major = element_blank(),
1522031159453:axis.text.x = element_text(angle = 50, hjust = 1),
1522031159453:# strip.background = element_blank(),
1522031159453:panel.border = element_blank(),
1522031159454:legend.position = "right",
1522031159454:strip.background = element_blank(),
1522031159454:strip.text.x = element_blank()
1522031159455:))
1522031159869:# (finalPlot <- ggarrange(abundancePLot + rremove("xlab") + rremove("x.axis") + rremove("x.text") + rremove("x.ticks")
1522031159869:(finalPlot <- ggarrange(abundancePLot + rremove("xlab") + rremove("axis") + rremove("x.text") + rremove("x.ticks")
1522031159870:+ theme(plot.margin = unit(c(1,2,1,1), "mm"))
1522031159870:, ancestryPlot + rremove("y.axis")
1522031159870:# + rremove("ylab") + rremove("y.ticks")
1522031159871:# + theme(plot.margin = unit(c(1,5,1,0), "mm"))
1522031159871:# , pGeneral
1522031159871:# + theme(plot.margin = unit(c(1,4,1,1), "mm"))
1522031159872:# + rremove("y.text") + rremove("y.axis") + rremove("ylab") + rremove("y.ticks")
1522031159872:# # ramPlot + theme(plot.margin = unit(c(1,18,1,1), "mm")) + rremove("y.text"),
1522031159872:# , labels = c("A", "", "B")
1522031159873:, ncol = 1, nrow = 2
1522031159873:# , widths = widths
1522031159874:, align = "v"
1522031159874:# , align = "h"
1522031159874:, common.legend = TRUE
1522031159875:, legend = c("bottom")
1522031159875:))
1522031222059:dataToPlot <- briefRelAbundance
1522031222061:size = 0.4
1522031222062:# ggpubr ------------------------------------------------------------------
1522031222062:(abundancePLot <- ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1522031222063:fill = "Family",               # change fill color by cyl
1522031222064:# color = "white",            # Set bar border colors to white
1522031222064:# palette = "jco",            # jco journal color palett. see ?ggpar
1522031222065:palette = rev(palette[1:(nTopElements+1)]),
1522031222065:# sort.val = "desc",          # Sort the value in dscending order
1522031222066:# sort.by.groups = FALSE,     # Don't sort inside each group
1522031222066:x.text.angle = 50, # Rotate vertically x axis texts
1522031222067:width = 1
1522031222068:, size = size
1522031222068:) +
1522031222069:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522031222069:labs(y = "Relative Abundance") +
1522031222070:theme(panel.grid.major = element_blank(),
1522031222070:axis.text.x = element_text(angle = 50, hjust = 1),
1522031222071:strip.background = element_blank(),
1522031222072:panel.border = element_blank(),
1522031222072:legend.position = "right"
1522031222073:))
1522031222491:metadata %>%
1522031222491:filter(Sample %in% samples) %>%
1522031222492:select(Sample, Evolution, Population = Residence,
1522031222492:Ae2, Aa1, Aea, Ae1) %>%
1522031222492:gather(Ancestry, Proportion, -Sample,
1522031222493:-Population, -Evolution) %>%
1522031222493:mutate(Sample = factor(Sample, levels = orderedSamples))
1522031222538:# Visualize colors
1522031222539:pal(rev(palette))
1522031222853:pal(palette)
1522031223023:# Plot Abundance --------------------------------------------------------
1522031223023:dataToPlot <- metadata %>%
1522031223024:filter(Sample %in% samples) %>%
1522031223024:select(Sample, Evolution, Population = Residence,
1522031223024:Ae2, Aa1, Aea, Ae1) %>%
1522031223025:gather(Ancestry, Proportion, -Sample,
1522031223025:-Population, -Evolution) %>%
1522031223025:mutate(Sample = factor(Sample, levels = orderedSamples))
1522031223032:# ggpubr ------------------------------------------------------------------
1522031223033:(ancestryPlot <- ggbarplot(dataToPlot, x = "Sample", y = "Proportion",
1522031223033:fill = "Ancestry",               # change fill color by cyl
1522031223033:# color = "white",            # Set bar border colors to white
1522031223034:# palette = "jco",            # jco journal color palett. see ?ggpar
1522031223034:# palette = rev(palette[1:(nTopElements+1)]),
1522031223034:palette = c("#00AFBB", "#E7B800", "#FC4E07", "darkgrey"),
1522031223034:# sort.val = "desc",          #f- Sort the value in dscending order
1522031223035:# sort.by.groups = FALSE,     # Don't sort inside each group
1522031223035:x.text.angle = 50, # Rotate vertically x axis texts
1522031223035:width = 1
1522031223036:, size = size
1522031223036:) +
1522031223036:# facet_wrap(~ Population, scales = "free_x") +
1522031223036:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522031223037:labs(y = "Ancestry Proportion") +
1522031223037:theme(panel.grid.major = element_blank(),
1522031223038:axis.text.x = element_text(angle = 50, hjust = 1),
1522031223038:# strip.background = element_blank(),
1522031223039:panel.border = element_blank(),
1522031223040:legend.position = "right",
1522031223040:strip.background = element_blank(),
1522031223041:strip.text.x = element_blank()
1522031223042:))
1522031243973:dataToPlot <- briefRelAbundance
1522031243975:size = 0.4
1522031243975:# ggpubr ------------------------------------------------------------------
1522031243976:(abundancePLot <- ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1522031243977:fill = "Family",               # change fill color by cyl
1522031243977:# color = "white",            # Set bar border colors to white
1522031243978:# palette = "jco",            # jco journal color palett. see ?ggpar
1522031243978:palette = rev(palette[1:(nTopElements+1)]),
1522031243979:# sort.val = "desc",          # Sort the value in dscending order
1522031243980:# sort.by.groups = FALSE,     # Don't sort inside each group
1522031243981:x.text.angle = 50, # Rotate vertically x axis texts
1522031243982:width = 1
1522031243983:, size = size
1522031243983:) +
1522031243984:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522031243984:labs(y = "Relative Abundance") +
1522031243985:theme(panel.grid.major = element_blank(),
1522031243986:axis.text.x = element_text(angle = 50, hjust = 1),
1522031243987:strip.background = element_blank(),
1522031243987:panel.border = element_blank(),
1522031243988:legend.position = "right"
1522031243989:))
1522031244417:metadata %>%
1522031244418:filter(Sample %in% samples) %>%
1522031244418:select(Sample, Evolution, Population = Residence,
1522031244418:Ae2, Aa1, Aea, Ae1) %>%
1522031244419:gather(Ancestry, Proportion, -Sample,
1522031244419:-Population, -Evolution) %>%
1522031244419:mutate(Sample = factor(Sample, levels = orderedSamples))
1522031244464:# Visualize colors
1522031244464:pal(rev(palette))
1522031244633:pal(palette)
1522031244779:# Plot Abundance --------------------------------------------------------
1522031244780:dataToPlot <- metadata %>%
1522031244780:filter(Sample %in% samples) %>%
1522031244781:select(Sample, Evolution, Population = Residence,
1522031244781:Ae2, Aa1, Aea, Ae1) %>%
1522031244781:gather(Ancestry, Proportion, -Sample,
1522031244782:-Population, -Evolution) %>%
1522031244782:mutate(Sample = factor(Sample, levels = orderedSamples))
1522031244789:# ggpubr ------------------------------------------------------------------
1522031244789:(ancestryPlot <- ggbarplot(dataToPlot, x = "Sample", y = "Proportion",
1522031244789:fill = "Ancestry",               # change fill color by cyl
1522031244789:# color = "white",            # Set bar border colors to white
1522031244790:# palette = "jco",            # jco journal color palett. see ?ggpar
1522031244790:# palette = rev(palette[1:(nTopElements+1)]),
1522031244790:palette = c("#00AFBB", "#E7B800", "#FC4E07", "darkgrey"),
1522031244791:# sort.val = "desc",          #f- Sort the value in dscending order
1522031244791:# sort.by.groups = FALSE,     # Don't sort inside each group
1522031244791:x.text.angle = 50, # Rotate vertically x axis texts
1522031244791:width = 1
1522031244792:, size = size
1522031244792:) +
1522031244792:# facet_wrap(~ Population, scales = "free_x") +
1522031244793:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522031244793:labs(y = "Ancestry Proportion") +
1522031244793:theme(panel.grid.major = element_blank(),
1522031244793:axis.text.x = element_text(angle = 50, hjust = 1),
1522031244794:# strip.background = element_blank(),
1522031244794:panel.border = element_blank(),
1522031244794:legend.position = "right",
1522031244795:strip.background = element_blank(),
1522031244795:strip.text.x = element_blank()
1522031244796:))
1522031245278:# (finalPlot <- ggarrange(abundancePLot + rremove("xlab") + rremove("x.axis") + rremove("x.text") + rremove("x.ticks")
1522031245278:(finalPlot <- ggarrange(abundancePLot + rremove("xlab") + rremove("axis") + rremove("x.text") + rremove("x.ticks")
1522031245278:+ theme(plot.margin = unit(c(1,2,1,1), "mm"))
1522031245279:, ancestryPlot + rremove("y.axis")
1522031245279:# + rremove("ylab") + rremove("y.ticks")
1522031245279:# + theme(plot.margin = unit(c(1,5,1,0), "mm"))
