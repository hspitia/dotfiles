{
    "collab_server" : "",
    "contents" : "#!/usr/bin/env Rscript\n\n################################################################################\n# Author:   Hector Fabio Espitia Navarro\n#           Georgia Institute of Technology\n#           \n# Version:  2.0\n# Date:     12/03/2016\n################################################################################\n\n# Install required packages\npersonal.lib.path <- Sys.getenv(\"R_LIBS_USER\")\nif(!file.exists(personal.lib.path))                                                                                    \n  dir.create(personal.lib.path)\n\npackages <- c(\"argparser\")\nif(any(!(packages %in% installed.packages()))){\n  cat(\"Please wait a moment! Installing required packages... \")\n  install.packages(packages[!(packages %in% installed.packages())], \n                   quiet = T, repos=\"http://cran.rstudio.com/\",\n                   lib = personal.lib.path)\n  cat(\"Done!\\n\")\n}\n\n# Load packages\nsuppressPackageStartupMessages(library(argparser, quietly = TRUE))\n################################################################################\n\n# Get script name\ninitial.options <- commandArgs(trailingOnly = FALSE)\nscript.name     <- basename(sub(\"--file=\", \"\", initial.options[grep(\"--file=\", initial.options)]))\n\n# Process command line arguments\n# Create a parser\np <- arg_parser(\"This script generates a PCR plates design given a list of samples, and optionally a list of control samples.\",\n                name = script.name)\n# Add positional arguments (required)\np <- add_argument(p, \"samples\", help = \"Samples file. Text file with a list of sample names (line by line).\")\n# Add options\np <- add_argument(p, \"--controls\", help = \"Control samples file. Text file with a list of control samples names (line by line)\")\np <- add_argument(p, \"--expansions\", help = \"Number of expansions of sample names. E.g., -e 2, will expand the sample names using the first two letters of the alphabet: sample1.A, sample1.B; -e 3, gives sample1.A, sample1.B, sample1.C)\", default = 0)\np <- add_argument(p, \"--rows\", help = \"Number of rows in PCR plates.\", \n                  default = 8)\np <- add_argument(p, \"--cols\", help = \"Number of columns in PCR plates.\",\n                  default = 12)\np <- add_argument(p, \"--prefix\", help = \"Filename prefix for output files ([prefix].expanded_samples.csv and [prefix].pcr_plates.csv).\", \n                  default = \"output\")\n# Add flags\np <- add_argument(p, \"--begin\", help = \"Place control samples at the beginning of the plate. By default, controls are at the end of the plate.\",\n                  flag = TRUE)\np <- add_argument(p, \"--vertical\", help = \"Sort samples vertically. By default, samples are sorted horizontally.\",\n                  flag = TRUE)\n\n# Parse command line arguments\nargv <- parse_args(p)\n\n# Variables initialization\n\ncommand.line = TRUE   # Turn to FALSE to test the script inside RStudio\nif(command.line) {\n  # Get argument values from command line\n  samples.file   <- argv$samples\n  controls.file  <- argv$controls\n  controls.begin <- argv$begin\n  n.expansions   <- argv$expansions\n  n.rows         <- argv$rows\n  n.cols         <- argv$cols\n  vertical.order <- argv$vertical\n  out.prefix     <- argv$prefix\n  \n} else {\n  # Values to test the script using RStudio\n  script.home = \"/home/hspitia/Dropbox/apps_config/ubuntu/desktop/scripts/PCRPlatesGenerator\"\n  \n  samples.file   <- paste(script.home, \"samples.txt\", sep = \"/\")\n  controls.file  <- paste(script.home, \"controls.txt\", sep = \"/\")\n  controls.begin <- TRUE\n  n.expansions   <- 2\n  n.rows         <- 4\n  n.cols         <- 4\n  vertical.order <- TRUE\n  out.prefix     <- \"output\"\n}\n\n# # Check input argument values\n# print(paste(samples.file, n.expansions, controls.file, n.rows, n.cols, vertical.order, out.prefix))  # debug\n\n# ################################################################################\nCheckFileExists <- function(file.list) {\n  non.exist.files <- !file.exists(file.list)\n  if(any(non.exist.files)) {\n    sprintf(\"\\n  The file \\\"%s\\\" does not exist.\", file.list[non.exist.files])\n  }\n}\n# ################################################################################\n# Check for input files\nfiles.to.check <- c(samples.file)\n\nif(!is.na(controls.file)) files.to.check <- c(files.to.check, controls.file)\nerror.message  <- CheckFileExists(files.to.check)\n\nif(!is.null(error.message)){\n  stop(error.message)\n} else {\n  # ========================================================================\n  # Code core - Begin\n  # ========================================================================\n  options(stringsAsFactors = FALSE)\n  \n  # Defining output filenames\n  expanded.out.file   <- paste(out.prefix, \"expanded_samples.txt\", sep = \".\")\n  pcr.plates.out.file <- paste(out.prefix, \"pcr_plates.tsv\", sep = \".\")\n  \n  # Load samples data\n  cat(\"Reading samples... \")\n  samples <- scan(file = samples.file, what = \"character\", sep = \"\\n\", quiet = F)\n  # cat(\"Done!\\n\")\n  \n  # Load controls data\n  controls = c()\n  if(!is.na(controls.file)){\n    cat(\"Reading controls... \")\n    controls <- scan(file = controls.file, what = \"character\", sep = \"\\n\", quiet = F)\n    # cat(\"Done!\\n\")\n  }\n  # # Check input data\n  # print(samples) # debug\n  # print(controls) # debug\n  \n  # Expand samples names\n  expanded_samples <- samples\n  if(n.expansions > 0) {\n    cat(\"Expanding sample names... \")\n    for(name in samples) {\n      c_expansion <- paste(name, LETTERS[1:n.expansions], sep = \".\")\n      expanded_samples  <- c(expanded_samples, c_expansion)\n    }\n    cat(\" Done!\\n\")\n    # # Check expansion of samples\n    # print(expanded_samples) # debug\n    \n    # Write expanded sample names\n    write(x = expanded_samples, file = expanded.out.file)\n    cat(paste(\"Expanded sample names saved to \\\"\", expanded.out.file ,\"\\\"\\n\", sep = \"\"))\n  }\n    \n  cat(\"Generating plates design... \")\n  # Create PCR plates\n  rows             <- n.rows\n  cols             <- n.cols\n  n.samples.plate  <- (rows * cols) - length(controls)\n  n.samples        <- length(expanded_samples)\n\n  empty.row <- rep(\"\", cols)  # row for separating plates\n  n.plates  <- ceiling(n.samples / n.samples.plate)\n  \n  plate.design <- NULL\n  for(i in 0:(n.plates - 1)) {\n    start <- (i * n.samples.plate) + 1\n    end   <- start + n.samples.plate - 1\n    \n    plate <- NULL\n    if(i == (n.plates - 1)) { # last plate?\n      end <- n.samples\n    }\n    \n    # compute the number of empty samples at end of plate\n    complement <- (rows * cols) - (length(expanded_samples[start:end]) + length(controls))\n    \n    # controls at the end of the plate\n    samples.array <- c(expanded_samples[start:end], controls)\n    # controls at the beginning of the plate\n    \n    if(!controls.begin) samples.array <- c(controls, expanded_samples[start:end])\n    \n    # generate current plate\n    plate <- matrix(data = c(samples.array, rep(\"\", complement)), \n                   nrow = (rows), ncol = cols, byrow = !vertical.order)\n    # put empty row to separate plates in CSV file\n    plate <- rbind(plate, empty.row)\n    # merge current plate to the whole plate design\n    plate.design <- rbind(plate.design, plate)\n  }\n  \n  cat(\" Done!\\n\")\n  \n  # save to file\n  write.table(x = plate.design, file = pcr.plates.out.file, \n              sep = \"\\t\", row.names = FALSE, col.names = FALSE)\n  cat(paste(\"PCR plates design saved to \\\"\", pcr.plates.out.file ,\"\\\"\\n\", \n            sep = \"\"))\n  # ========================================================================\n  # Code core - Begin\n  # ========================================================================\n}\n\n\n",
    "created" : 1487386134360.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3020774447",
    "id" : "5601C3F0",
    "lastKnownWriteTime" : 1480791115,
    "last_content_update" : 1480791115,
    "path" : "~/Downloads/pcr_plates_generator/pcr_plates_generator.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}