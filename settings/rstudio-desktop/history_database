1522031245296:# , pGeneral
1522031245296:# + theme(plot.margin = unit(c(1,4,1,1), "mm"))
1522031245297:# + rremove("y.text") + rremove("y.axis") + rremove("ylab") + rremove("y.ticks")
1522031245297:# # ramPlot + theme(plot.margin = unit(c(1,18,1,1), "mm")) + rremove("y.text"),
1522031245297:# , labels = c("A", "", "B")
1522031245298:, ncol = 1, nrow = 2
1522031245298:# , widths = widths
1522031245298:, align = "v"
1522031245299:# , align = "h"
1522031245299:, common.legend = TRUE
1522031245299:, legend = c("bottom")
1522031245300:))
1522031357560:dataToPlot <- briefRelAbundance
1522031357562:size = 0.4
1522031357563:# ggpubr ------------------------------------------------------------------
1522031357564:(abundancePLot <- ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1522031357565:fill = "Family",               # change fill color by cyl
1522031357565:# color = "white",            # Set bar border colors to white
1522031357566:# palette = "jco",            # jco journal color palett. see ?ggpar
1522031357567:palette = rev(palette[1:(nTopElements+1)]),
1522031357568:# sort.val = "desc",          # Sort the value in dscending order
1522031357569:# sort.by.groups = FALSE,     # Don't sort inside each group
1522031357569:x.text.angle = 50, # Rotate vertically x axis texts
1522031357570:width = 1
1522031357571:, size = size
1522031357572:) +
1522031357572:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522031357573:labs(y = "Relative Abundance") +
1522031357573:theme(panel.grid.major = element_blank(),
1522031357574:axis.text.x = element_text(angle = 50, hjust = 1),
1522031357574:strip.background = element_blank(),
1522031357574:panel.border = element_blank(),
1522031357575:legend.position = "right"
1522031357575:))
1522031357965:metadata %>%
1522031357965:filter(Sample %in% samples) %>%
1522031357966:select(Sample, Evolution, Population = Residence,
1522031357966:Ae2, Aa1, Aea, Ae1) %>%
1522031357966:gather(Ancestry, Proportion, -Sample,
1522031357967:-Population, -Evolution) %>%
1522031357967:mutate(Sample = factor(Sample, levels = orderedSamples))
1522031358019:# Visualize colors
1522031358019:pal(rev(palette))
1522031358179:pal(palette)
1522031358323:# Plot Abundance --------------------------------------------------------
1522031358323:dataToPlot <- metadata %>%
1522031358323:filter(Sample %in% samples) %>%
1522031358324:select(Sample, Evolution, Population = Residence,
1522031358324:Ae2, Aa1, Aea, Ae1) %>%
1522031358324:gather(Ancestry, Proportion, -Sample,
1522031358325:-Population, -Evolution) %>%
1522031358325:mutate(Sample = factor(Sample, levels = orderedSamples))
1522031358332:# ggpubr ------------------------------------------------------------------
1522031358332:(ancestryPlot <- ggbarplot(dataToPlot, x = "Sample", y = "Proportion",
1522031358333:fill = "Ancestry",               # change fill color by cyl
1522031358333:# color = "white",            # Set bar border colors to white
1522031358333:# palette = "jco",            # jco journal color palett. see ?ggpar
1522031358334:# palette = rev(palette[1:(nTopElements+1)]),
1522031358334:palette = c("#00AFBB", "#E7B800", "#FC4E07", "darkgrey"),
1522031358334:# sort.val = "desc",          #f- Sort the value in dscending order
1522031358334:# sort.by.groups = FALSE,     # Don't sort inside each group
1522031358335:x.text.angle = 50, # Rotate vertically x axis texts
1522031358335:width = 1
1522031358335:, size = size
1522031358335:) +
1522031358338:# facet_wrap(~ Population, scales = "free_x") +
1522031358338:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522031358339:labs(y = "Ancestry Proportion") +
1522031358339:theme(panel.grid.major = element_blank(),
1522031358339:axis.text.x = element_text(angle = 50, hjust = 1),
1522031358340:# strip.background = element_blank(),
1522031358340:panel.border = element_blank(),
1522031358340:legend.position = "right",
1522031358340:strip.background = element_blank(),
1522031358341:strip.text.x = element_blank()
1522031358341:))
1522031358798:# (finalPlot <- ggarrange(abundancePLot + rremove("xlab") + rremove("x.axis") + rremove("x.text") + rremove("x.ticks")
1522031358798:(finalPlot <- ggarrange(abundancePLot + rremove("xlab") + rremove("axis") + rremove("x.text") + rremove("x.ticks")
1522031358798:+ theme(plot.margin = unit(c(1,2,1,1), "mm"))
1522031358799:, ancestryPlot + rremove("y.axis")
1522031358799:# + rremove("ylab") + rremove("y.ticks")
1522031358800:# + theme(plot.margin = unit(c(1,5,1,0), "mm"))
1522031358800:# , pGeneral
1522031358801:# + theme(plot.margin = unit(c(1,4,1,1), "mm"))
1522031358801:# + rremove("y.text") + rremove("y.axis") + rremove("ylab") + rremove("y.ticks")
1522031358801:# # ramPlot + theme(plot.margin = unit(c(1,18,1,1), "mm")) + rremove("y.text"),
1522031358802:# , labels = c("A", "", "B")
1522031358802:, ncol = 1, nrow = 2
1522031358802:# , widths = widths
1522031358803:, align = "v"
1522031358803:# , align = "h"
1522031358803:, common.legend = TRUE
1522031358804:, legend = c("rigth")
1522031358804:))
1522031370227:dataToPlot <- briefRelAbundance
1522031370228:size = 0.4
1522031370229:# ggpubr ------------------------------------------------------------------
1522031370230:(abundancePLot <- ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1522031370230:fill = "Family",               # change fill color by cyl
1522031370231:# color = "white",            # Set bar border colors to white
1522031370231:# palette = "jco",            # jco journal color palett. see ?ggpar
1522031370232:palette = rev(palette[1:(nTopElements+1)]),
1522031370233:# sort.val = "desc",          # Sort the value in dscending order
1522031370233:# sort.by.groups = FALSE,     # Don't sort inside each group
1522031370234:x.text.angle = 50, # Rotate vertically x axis texts
1522031370234:width = 1
1522031370235:, size = size
1522031370235:) +
1522031370236:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522031370237:labs(y = "Relative Abundance") +
1522031370237:theme(panel.grid.major = element_blank(),
1522031370238:axis.text.x = element_text(angle = 50, hjust = 1),
1522031370239:strip.background = element_blank(),
1522031370240:panel.border = element_blank(),
1522031370241:legend.position = "right"
1522031370241:))
1522031370651:metadata %>%
1522031370651:filter(Sample %in% samples) %>%
1522031370651:select(Sample, Evolution, Population = Residence,
1522031370652:Ae2, Aa1, Aea, Ae1) %>%
1522031370652:gather(Ancestry, Proportion, -Sample,
1522031370652:-Population, -Evolution) %>%
1522031370653:mutate(Sample = factor(Sample, levels = orderedSamples))
1522031370697:# Visualize colors
1522031370697:pal(rev(palette))
1522031370858:pal(palette)
1522031371007:# Plot Abundance --------------------------------------------------------
1522031371008:dataToPlot <- metadata %>%
1522031371008:filter(Sample %in% samples) %>%
1522031371008:select(Sample, Evolution, Population = Residence,
1522031371009:Ae2, Aa1, Aea, Ae1) %>%
1522031371009:gather(Ancestry, Proportion, -Sample,
1522031371009:-Population, -Evolution) %>%
1522031371010:mutate(Sample = factor(Sample, levels = orderedSamples))
1522031371016:# ggpubr ------------------------------------------------------------------
1522031371017:(ancestryPlot <- ggbarplot(dataToPlot, x = "Sample", y = "Proportion",
1522031371017:fill = "Ancestry",               # change fill color by cyl
1522031371017:# color = "white",            # Set bar border colors to white
1522031371018:# palette = "jco",            # jco journal color palett. see ?ggpar
1522031371018:# palette = rev(palette[1:(nTopElements+1)]),
1522031371018:palette = c("#00AFBB", "#E7B800", "#FC4E07", "darkgrey"),
1522031371018:# sort.val = "desc",          #f- Sort the value in dscending order
1522031371019:# sort.by.groups = FALSE,     # Don't sort inside each group
1522031371019:x.text.angle = 50, # Rotate vertically x axis texts
1522031371019:width = 1
1522031371020:, size = size
1522031371020:) +
1522031371020:# facet_wrap(~ Population, scales = "free_x") +
1522031371021:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522031371021:labs(y = "Ancestry Proportion") +
1522031371021:theme(panel.grid.major = element_blank(),
1522031371022:axis.text.x = element_text(angle = 50, hjust = 1),
1522031371022:# strip.background = element_blank(),
1522031371022:panel.border = element_blank(),
1522031371023:legend.position = "right",
1522031371023:strip.background = element_blank(),
1522031371023:strip.text.x = element_blank()
1522031371024:))
1522031371479:# (finalPlot <- ggarrange(abundancePLot + rremove("xlab") + rremove("x.axis") + rremove("x.text") + rremove("x.ticks")
1522031371479:(finalPlot <- ggarrange(abundancePLot + rremove("xlab") + rremove("axis") + rremove("x.text") + rremove("x.ticks")
1522031371480:+ theme(plot.margin = unit(c(1,2,1,1), "mm"))
1522031371480:, ancestryPlot + rremove("y.axis")
1522031371480:# + rremove("ylab") + rremove("y.ticks")
1522031371481:# + theme(plot.margin = unit(c(1,5,1,0), "mm"))
1522031371481:# , pGeneral
1522031371481:# + theme(plot.margin = unit(c(1,4,1,1), "mm"))
1522031371482:# + rremove("y.text") + rremove("y.axis") + rremove("ylab") + rremove("y.ticks")
1522031371482:# # ramPlot + theme(plot.margin = unit(c(1,18,1,1), "mm")) + rremove("y.text"),
1522031371482:# , labels = c("A", "", "B")
1522031371483:, ncol = 1, nrow = 2
1522031371483:# , widths = widths
1522031371483:, align = "v"
1522031371484:# , align = "h"
1522031371484:, common.legend = TRUE
1522031371484:, legend = c("right")
1522031371485:))
1522031446226:dataToPlot <- briefRelAbundance
1522031446227:size = 0.4
1522031446228:# ggpubr ------------------------------------------------------------------
1522031446229:(abundancePLot <- ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1522031446230:fill = "Family",               # change fill color by cyl
1522031446231:# color = "white",            # Set bar border colors to white
1522031446231:# palette = "jco",            # jco journal color palett. see ?ggpar
1522031446232:palette = rev(palette[1:(nTopElements+1)]),
1522031446233:# sort.val = "desc",          # Sort the value in dscending order
1522031446234:# sort.by.groups = FALSE,     # Don't sort inside each group
1522031446235:x.text.angle = 50, # Rotate vertically x axis texts
1522031446236:width = 1
1522031446237:, size = size
1522031446237:) +
1522031446238:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522031446239:labs(y = "Relative Abundance") +
1522031446239:theme(panel.grid.major = element_blank(),
1522031446240:axis.text.x = element_text(angle = 50, hjust = 1),
1522031446241:strip.background = element_blank(),
1522031446242:panel.border = element_blank(),
1522031446243:legend.position = "right"
1522031446243:))
1522031446704:metadata %>%
1522031446704:filter(Sample %in% samples) %>%
1522031446704:select(Sample, Evolution, Population = Residence,
1522031446705:Ae2, Aa1, Aea, Ae1) %>%
1522031446705:gather(Ancestry, Proportion, -Sample,
1522031446705:-Population, -Evolution) %>%
1522031446706:mutate(Sample = factor(Sample, levels = orderedSamples))
1522031446749:# Visualize colors
1522031446750:pal(rev(palette))
1522031446910:pal(palette)
1522031447108:# Plot Abundance --------------------------------------------------------
1522031447108:dataToPlot <- metadata %>%
1522031447109:filter(Sample %in% samples) %>%
1522031447109:select(Sample, Evolution, Population = Residence,
1522031447109:Ae2, Aa1, Aea, Ae1) %>%
1522031447110:gather(Ancestry, Proportion, -Sample,
1522031447110:-Population, -Evolution) %>%
1522031447110:mutate(Sample = factor(Sample, levels = orderedSamples))
1522031447117:# ggpubr ------------------------------------------------------------------
1522031447118:(ancestryPlot <- ggbarplot(dataToPlot, x = "Sample", y = "Proportion",
1522031447118:fill = "Ancestry",               # change fill color by cyl
1522031447118:# color = "white",            # Set bar border colors to white
1522031447119:# palette = "jco",            # jco journal color palett. see ?ggpar
1522031447119:# palette = rev(palette[1:(nTopElements+1)]),
1522031447119:palette = c("#00AFBB", "#E7B800", "#FC4E07", "darkgrey"),
1522031447120:# sort.val = "desc",          #f- Sort the value in dscending order
1522031447120:# sort.by.groups = FALSE,     # Don't sort inside each group
1522031447120:x.text.angle = 50, # Rotate vertically x axis texts
1522031447120:width = 1
1522031447121:, size = size
1522031447121:) +
1522031447121:# facet_wrap(~ Population, scales = "free_x") +
1522031447122:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522031447122:labs(y = "Ancestry Proportion") +
1522031447122:theme(panel.grid.major = element_blank(),
1522031447123:axis.text.x = element_text(angle = 50, hjust = 1),
1522031447123:# strip.background = element_blank(),
1522031447123:panel.border = element_blank(),
1522031447124:legend.position = "right",
1522031447124:strip.background = element_blank(),
1522031447125:strip.text.x = element_blank()
1522031447125:))
1522031447614:# (finalPlot <- ggarrange(abundancePLot + rremove("xlab") + rremove("x.axis") + rremove("x.text") + rremove("x.ticks")
1522031447615:(finalPlot <- ggarrange(abundancePLot + rremove("xlab") + rremove("axis") + rremove("x.text") + rremove("x.ticks")
1522031447615:+ theme(plot.margin = unit(c(1,2,1,1), "mm"))
1522031447615:, ancestryPlot + rremove("y.axis")
1522031447616:# + rremove("ylab") + rremove("y.ticks")
1522031447616:# + theme(plot.margin = unit(c(1,5,1,0), "mm"))
1522031447616:# , pGeneral
1522031447617:# + theme(plot.margin = unit(c(1,4,1,1), "mm"))
1522031447617:# + rremove("y.text") + rremove("y.axis") + rremove("ylab") + rremove("y.ticks")
1522031447617:# # ramPlot + theme(plot.margin = unit(c(1,18,1,1), "mm")) + rremove("y.text"),
1522031447618:# , labels = c("A", "", "B")
1522031447618:, ncol = 1, nrow = 2
1522031447618:# , widths = widths
1522031447619:, align = "v"
1522031447619:# , align = "h"
1522031447619:# , common.legend = TRUE
1522031447620:# , legend = c("right")
1522031447620:))
1522031553278:dataToPlot <- briefRelAbundance
1522031553280:size = 0.4
1522031553281:# ggpubr ------------------------------------------------------------------
1522031553282:(abundancePLot <- ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1522031553283:fill = "Family",               # change fill color by cyl
1522031553283:# color = "white",            # Set bar border colors to white
1522031553284:# palette = "jco",            # jco journal color palett. see ?ggpar
1522031553285:palette = rev(palette[1:(nTopElements+1)]),
1522031553286:# sort.val = "desc",          # Sort the value in dscending order
1522031553287:# sort.by.groups = FALSE,     # Don't sort inside each group
1522031553287:x.text.angle = 50, # Rotate vertically x axis texts
1522031553288:width = 1
1522031553289:, size = size
1522031553289:) +
1522031553290:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522031553290:labs(y = "Relative Abundance") +
1522031553291:theme(panel.grid.major = element_blank(),
1522031553291:axis.text.x = element_text(size = 7, angle = 50, hjust = 1),
1522031553292:strip.background = element_blank(),
1522031553293:panel.border = element_blank(),
1522031553293:legend.position = "right",
1522031553294:strip.text.x = element_text(size = 5)
1522031553294:))
1522031553771:metadata %>%
1522031553771:filter(Sample %in% samples) %>%
1522031553771:select(Sample, Evolution, Population = Residence,
1522031553772:Ae2, Aa1, Aea, Ae1) %>%
1522031553772:gather(Ancestry, Proportion, -Sample,
1522031553772:-Population, -Evolution) %>%
1522031553773:mutate(Sample = factor(Sample, levels = orderedSamples))
1522031554235:# Visualize colors
1522031554236:pal(rev(palette))
1522031554248:pal(palette)
1522031554403:# Plot Abundance --------------------------------------------------------
1522031554403:dataToPlot <- metadata %>%
1522031554404:filter(Sample %in% samples) %>%
1522031554404:select(Sample, Evolution, Population = Residence,
1522031554404:Ae2, Aa1, Aea, Ae1) %>%
1522031554405:gather(Ancestry, Proportion, -Sample,
1522031554405:-Population, -Evolution) %>%
1522031554405:mutate(Sample = factor(Sample, levels = orderedSamples))
1522031554413:# ggpubr ------------------------------------------------------------------
1522031554413:(ancestryPlot <- ggbarplot(dataToPlot, x = "Sample", y = "Proportion",
1522031554413:fill = "Ancestry",               # change fill color by cyl
1522031554414:# color = "white",            # Set bar border colors to white
1522031554414:# palette = "jco",            # jco journal color palett. see ?ggpar
1522031554414:# palette = rev(palette[1:(nTopElements+1)]),
1522031554415:palette = c("#00AFBB", "#E7B800", "#FC4E07", "darkgrey"),
1522031554415:# sort.val = "desc",          #f- Sort the value in dscending order
1522031554415:# sort.by.groups = FALSE,     # Don't sort inside each group
1522031554416:x.text.angle = 50, # Rotate vertically x axis texts
1522031554416:width = 1
1522031554416:, size = size
1522031554417:) +
1522031554417:# facet_wrap(~ Population, scales = "free_x") +
1522031554417:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522031554418:labs(y = "Ancestry Proportion") +
1522031554418:theme(panel.grid.major = element_blank(),
1522031554418:axis.text.x = element_text(size = 7, angle = 50, hjust = 1),
1522031554419:strip.background = element_blank(),
1522031554419:panel.border = element_blank(),
1522031554419:legend.position = "right",
1522031554420:strip.text.x = element_text(size = 5)
1522031554420:))
1522031555037:# (finalPlot <- ggarrange(abundancePLot + rremove("xlab") + rremove("x.axis") + rremove("x.text") + rremove("x.ticks")
1522031555037:(finalPlot <- ggarrange(abundancePLot + rremove("xlab") + rremove("axis") + rremove("x.text") + rremove("x.ticks")
1522031555038:+ theme(plot.margin = unit(c(1,2,1,1), "mm"))
1522031555038:, ancestryPlot + rremove("y.axis")
1522031555038:# + rremove("ylab") + rremove("y.ticks")
1522031555039:# + theme(plot.margin = unit(c(1,5,1,0), "mm"))
1522031555039:# , pGeneral
1522031555039:# + theme(plot.margin = unit(c(1,4,1,1), "mm"))
1522031555040:# + rremove("y.text") + rremove("y.axis") + rremove("ylab") + rremove("y.ticks")
1522031555040:# # ramPlot + theme(plot.margin = unit(c(1,18,1,1), "mm")) + rremove("y.text"),
1522031555040:# , labels = c("A", "", "B")
1522031555041:, ncol = 1, nrow = 2
1522031555041:# , widths = widths
1522031555041:, align = "v"
1522031555042:# , align = "h"
1522031555042:# , common.legend = TRUE
1522031555042:# , legend = c("right")
1522031555043:))
1522031580975:textSize = 12
1522031589634:textSize = 12
1522031593585:# Figure 2
1522031593586:# Sources -----------------------------------------------------------------
1522031593587:# Packages ----------------------------------------------------------------
1522031593587:requiredPackages <- c("tidyverse", "rlang", "dendsort", "ggfortify", "ggpubr", "pheatmap",
1522031593588:"RColorBrewer", "vegan", "formatR")
1522031593590:installAndLoadPackages(requiredPackages)
1522031593598:source("scripts/auxiliary_functions.R")
1522031593604:# Loading Data ------------------------------------------------------------
1522031593604:extDataFile <- "data/gt_and_tumaco_samples.otu_table.tsv"
1522031593605:extData     <- read.delim(extDataFile, check.names = FALSE,
1522031593605:stringsAsFactors = F)
1522031593645:extData     <- as_tibble(extData)
1522031593648:attributes(extData)
1522031593678:metadataFile <- "data/metadata.tsv"
1522031593679:metadata     <- read_tsv(metadataFile)
1522031593688:attributes(metadata)
1522031593698:# General configuration ---------------------------------------------------
1522031593699:useOnlyGTSamples <- TRUE
1522031593699:dataGroups   <- c("Coast", "Mountain")
1522031593700:groupVar     <- "Population"
1522031593700:titles       <- c(dataGroups, "General\nProfile")
1522031593701:labels       <- c(y = "Relative Abundance")
1522031593701:nTopElements <- 10
1522031593702:# Preparing data ----------------------------------------------------------
1522031593702:# Get samples sequenced through GT
1522031593703:gtSamples <- metadata %>%
1522031593703:filter(Seq_Origin == "GT1" | Seq_Origin == "GT2") %>%
1522031593703:select(Sample)
1522031593707:tumacoSamples <- metadata %>%
1522031593707:filter(Additional_Sample == 1) %>%
1522031593708:select(Sample)
1522031593712:pull(gtSamples)
1522031593715:pull(tumacoSamples)
1522031593717:# Select samples
1522031593717:if (useOnlyGTSamples) {
1522031593717:# Indices for samples from GT only and Tumaco Additional Samples
1522031593718:samples <- pull(gtSamples)
1522031593718:} else {
1522031593718:# Include Tumaco additional samples
1522031593718:samples <- c(pull(gtSamples), pull(tumacoSamples))
1522031593719:}
1522031593720:# Indices of sample columns
1522031593720:samplesInd <- which(colnames(extData) %in% samples)
1522031593721:# Select metadata
1522031593721:partialMetadata <- metadata %>%
1522031593721:# filter(Included_In_Study == 1) %>%
1522031593722:filter(Sample %in% samples) %>%
1522031593722:select(Sample, Evolution, Population = Residence)
1522031593728:# Add "UNSUPPORTED MAPPING" to blank cells from the taxonomy columns
1522031593729:for(col in c("Class", "Order", "Family", "Genera", "Species")){
1522031593729:extData[extData[[col]] == "", col] = "UNSUPPORTED MAPPING"
1522031593730:}
1522031593736:# Add Reads column: total reads per OTU
1522031593736:extData <- extData %>%
1522031593736:mutate(Reads = rowSums(.[samplesInd]))
1522031593743:# Figure 2: Relative abundance (Family and Class) -------------------------
1522031593743:# Preparing data
1522031593743:# Calculate Relative Abundance per Family
1522031593744:(relAbundance <- extData %>%
1522031593744:group_by(Family) %>%                          # group by Family column
1522031593744:summarise_at(samplesInd, sum) %>%             # compute sum of reads for each Family
1522031593745:mutate_if(is.numeric, funs( . / sum(.))) %>%  # Normalize (rel. abundance)
1522031593745:mutate(TotalAbundance = rowSums(select(., -Family))) %>%
1522031593745:arrange(desc(TotalAbundance))
1522031593746:)
1522031593934:# Get top families by total abundance
1522031593934:top <- relAbundance %>%
1522031593935:top_n(nTopElements, TotalAbundance) %>%
1522031593935:select(-TotalAbundance)
1522031593941:# Group the rest of the families into the family "Others"
1522031593942:rest <- relAbundance %>%
1522031593942:top_n(-(nrow(relAbundance) - nTopElements), TotalAbundance) %>%
1522031593942:gather(Sample, Abundance, -Family) %>%
1522031593943:group_by(Sample) %>%
1522031593943:summarise(Total = sum(Abundance)) %>%
1522031593943:spread(Sample, Total) %>%
1522031593944:mutate(Family = c("Others")) %>%
1522031593944:select(Family, -TotalAbundance, everything()) %>%
1522031593944:select(-TotalAbundance)
1522031593961:# Bind top and rest families into a single table (tibble)
1522031593962:briefRelAbundance <- rbind.data.frame(top, rest)
1522031593963:# Get the order of families by total abundance (originally
1522031593963:# from relAbundance table)
1522031593964:orderedFamilies <- briefRelAbundance$Family
1522031593964:# Get the order of samples by the most abundant family
1522031593965:orderedSamples  <- names(sort(as.vector(as.data.frame(briefRelAbundance[1,-1]))))
1522031593966:# Change the order of Families and Samples
1522031593967:(briefRelAbundance <- briefRelAbundance %>%
1522031593967:gather(Sample, Abundance, -Family) %>%
1522031593967:spread(Family, Abundance) %>%
1522031593968:left_join(partialMetadata) %>%
1522031593968:gather(Family, Abundance, -Sample, -Population, -Evolution) %>%
1522031593968:mutate(Family = factor(Family, levels = rev(orderedFamilies))) %>%
1522031593968:mutate(Sample = factor(Sample, levels = orderedSamples)) # %>%
1522031593969:)
1522031594024:# Visualize colors
1522031594025:pal(rev(palette))
1522031594039:pal(palette)
1522031594418:# Plot Abundance --------------------------------------------------------
1522031594418:dataToPlot <- briefRelAbundance
1522031594419:size = 0.4
1522031594419:textSize = 12
1522031594419:# ggpubr ------------------------------------------------------------------
1522031594420:(abundancePLot <- ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1522031594420:fill = "Family",               # change fill color by cyl
1522031594421:# color = "white",            # Set bar border colors to white
1522031594421:# palette = "jco",            # jco journal color palett. see ?ggpar
1522031594421:palette = rev(palette[1:(nTopElements+1)]),
1522031594422:# sort.val = "desc",          # Sort the value in dscending order
1522031594422:# sort.by.groups = FALSE,     # Don't sort inside each group
1522031594422:x.text.angle = 50, # Rotate vertically x axis texts
1522031594423:width = 1
1522031594423:, size = size
1522031594423:) +
1522031594424:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522031594424:labs(y = "Relative Abundance") +
1522031594424:theme(panel.grid.major = element_blank(),
1522031594425:axis.text.x = element_text(size = textSize, angle = 50, hjust = 1),
1522031594425:strip.background = element_blank(),
1522031594425:panel.border = element_blank(),
1522031594426:legend.position = "right",
1522031594426:strip.text.x = element_text(size = 5)
1522031594426:))
1522031595179:metadata %>%
1522031595179:filter(Sample %in% samples) %>%
1522031595180:select(Sample, Evolution, Population = Residence,
1522031595180:Ae2, Aa1, Aea, Ae1) %>%
1522031595180:gather(Ancestry, Proportion, -Sample,
1522031595181:-Population, -Evolution) %>%
1522031595181:mutate(Sample = factor(Sample, levels = orderedSamples))
1522031595229:# Visualize colors
1522031595229:pal(rev(palette))
1522031595397:pal(palette)
1522031595550:# Plot Abundance --------------------------------------------------------
1522031595551:dataToPlot <- metadata %>%
1522031595551:filter(Sample %in% samples) %>%
1522031595551:select(Sample, Evolution, Population = Residence,
1522031595552:Ae2, Aa1, Aea, Ae1) %>%
1522031595552:gather(Ancestry, Proportion, -Sample,
1522031595552:-Population, -Evolution) %>%
1522031595552:mutate(Sample = factor(Sample, levels = orderedSamples))
1522031595559:# ggpubr ------------------------------------------------------------------
1522031595559:(ancestryPlot <- ggbarplot(dataToPlot, x = "Sample", y = "Proportion",
1522031595560:fill = "Ancestry",               # change fill color by cyl
1522031595560:# color = "white",            # Set bar border colors to white
1522031595560:# palette = "jco",            # jco journal color palett. see ?ggpar
1522031595561:# palette = rev(palette[1:(nTopElements+1)]),
1522031595561:palette = c("#00AFBB", "#E7B800", "#FC4E07", "darkgrey"),
1522031595561:# sort.val = "desc",          #f- Sort the value in dscending order
1522031595561:# sort.by.groups = FALSE,     # Don't sort inside each group
1522031595562:x.text.angle = 50, # Rotate vertically x axis texts
1522031595562:width = 1
1522031595562:, size = size
1522031595563:) +
1522031595563:# facet_wrap(~ Population, scales = "free_x") +
1522031595563:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522031595563:labs(y = "Ancestry Proportion") +
1522031595564:theme(panel.grid.major = element_blank(),
1522031595564:axis.text.x = element_text(size = textSize, angle = 50, hjust = 1),
1522031595564:strip.background = element_blank(),
1522031595565:panel.border = element_blank(),
1522031595565:legend.position = "right",
1522031595565:strip.text.x = element_text(size = 5)
1522031595566:))
1522031596072:# (finalPlot <- ggarrange(abundancePLot + rremove("xlab") + rremove("x.axis") + rremove("x.text") + rremove("x.ticks")
1522031596072:(finalPlot <- ggarrange(abundancePLot + rremove("xlab") + rremove("axis") + rremove("x.text") + rremove("x.ticks")
1522031596072:+ theme(plot.margin = unit(c(1,2,1,1), "mm"))
1522031596073:, ancestryPlot + rremove("y.axis")
1522031596073:# + rremove("ylab") + rremove("y.ticks")
1522031596073:# + theme(plot.margin = unit(c(1,5,1,0), "mm"))
1522031596074:# , pGeneral
1522031596074:# + theme(plot.margin = unit(c(1,4,1,1), "mm"))
1522031596074:# + rremove("y.text") + rremove("y.axis") + rremove("ylab") + rremove("y.ticks")
1522031596075:# # ramPlot + theme(plot.margin = unit(c(1,18,1,1), "mm")) + rremove("y.text"),
1522031596075:# , labels = c("A", "", "B")
1522031596075:, ncol = 1, nrow = 2
1522031596076:# , widths = widths
1522031596076:, align = "v"
1522031596076:# , align = "h"
1522031596077:# , common.legend = TRUE
1522031596077:# , legend = c("right")
1522031596077:))
1522031628281:# Figure 2
1522031628282:# Sources -----------------------------------------------------------------
1522031628283:# Packages ----------------------------------------------------------------
1522031628283:requiredPackages <- c("tidyverse", "rlang", "dendsort", "ggfortify", "ggpubr", "pheatmap",
1522031628283:"RColorBrewer", "vegan", "formatR")
1522031628284:installAndLoadPackages(requiredPackages)
1522031628289:source("scripts/auxiliary_functions.R")
1522031628293:# Loading Data ------------------------------------------------------------
1522031628294:extDataFile <- "data/gt_and_tumaco_samples.otu_table.tsv"
1522031628294:extData     <- read.delim(extDataFile, check.names = FALSE,
1522031628295:stringsAsFactors = F)
1522031628334:extData     <- as_tibble(extData)
1522031628338:attributes(extData)
1522031628367:metadataFile <- "data/metadata.tsv"
1522031628367:metadata     <- read_tsv(metadataFile)
1522031628376:attributes(metadata)
1522031628386:# General configuration ---------------------------------------------------
1522031628387:useOnlyGTSamples <- TRUE
1522031628387:dataGroups   <- c("Coast", "Mountain")
1522031628388:groupVar     <- "Population"
1522031628388:titles       <- c(dataGroups, "General\nProfile")
1522031628389:labels       <- c(y = "Relative Abundance")
1522031628389:nTopElements <- 10
1522031628390:# Preparing data ----------------------------------------------------------
1522031628391:# Get samples sequenced through GT
1522031628392:gtSamples <- metadata %>%
1522031628392:filter(Seq_Origin == "GT1" | Seq_Origin == "GT2") %>%
1522031628392:select(Sample)
1522031628396:tumacoSamples <- metadata %>%
1522031628397:filter(Additional_Sample == 1) %>%
1522031628397:select(Sample)
1522031628401:pull(gtSamples)
1522031628404:pull(tumacoSamples)
1522031628406:# Select samples
1522031628406:if (useOnlyGTSamples) {
1522031628406:# Indices for samples from GT only and Tumaco Additional Samples
1522031628407:samples <- pull(gtSamples)
1522031628407:} else {
1522031628408:# Include Tumaco additional samples
1522031628408:samples <- c(pull(gtSamples), pull(tumacoSamples))
1522031628408:}
1522031628410:# Indices of sample columns
1522031628410:samplesInd <- which(colnames(extData) %in% samples)
1522031628411:# Select metadata
1522031628411:partialMetadata <- metadata %>%
1522031628412:# filter(Included_In_Study == 1) %>%
1522031628412:filter(Sample %in% samples) %>%
1522031628412:select(Sample, Evolution, Population = Residence)
1522031628416:# Add "UNSUPPORTED MAPPING" to blank cells from the taxonomy columns
1522031628417:for(col in c("Class", "Order", "Family", "Genera", "Species")){
1522031628417:extData[extData[[col]] == "", col] = "UNSUPPORTED MAPPING"
1522031628418:}
1522031628425:# Add Reads column: total reads per OTU
1522031628425:extData <- extData %>%
1522031628426:mutate(Reads = rowSums(.[samplesInd]))
1522031628432:# Figure 2: Relative abundance (Family and Class) -------------------------
1522031628432:# Preparing data
1522031628433:# Calculate Relative Abundance per Family
1522031628433:(relAbundance <- extData %>%
1522031628433:group_by(Family) %>%                          # group by Family column
1522031628434:summarise_at(samplesInd, sum) %>%             # compute sum of reads for each Family
1522031628434:mutate_if(is.numeric, funs( . / sum(.))) %>%  # Normalize (rel. abundance)
1522031628434:mutate(TotalAbundance = rowSums(select(., -Family))) %>%
1522031628435:arrange(desc(TotalAbundance))
1522031628435:)
1522031628579:# Get top families by total abundance
1522031628580:top <- relAbundance %>%
1522031628580:top_n(nTopElements, TotalAbundance) %>%
1522031628580:select(-TotalAbundance)
1522031628584:# Group the rest of the families into the family "Others"
1522031628584:rest <- relAbundance %>%
1522031628584:top_n(-(nrow(relAbundance) - nTopElements), TotalAbundance) %>%
1522031628585:gather(Sample, Abundance, -Family) %>%
1522031628585:group_by(Sample) %>%
1522031628585:summarise(Total = sum(Abundance)) %>%
1522031628586:spread(Sample, Total) %>%
1522031628586:mutate(Family = c("Others")) %>%
1522031628586:select(Family, -TotalAbundance, everything()) %>%
1522031628587:select(-TotalAbundance)
1522031628603:# Bind top and rest families into a single table (tibble)
1522031628603:briefRelAbundance <- rbind.data.frame(top, rest)
1522031628605:# Get the order of families by total abundance (originally
1522031628605:# from relAbundance table)
1522031628605:orderedFamilies <- briefRelAbundance$Family
1522031628606:# Get the order of samples by the most abundant family
1522031628606:orderedSamples  <- names(sort(as.vector(as.data.frame(briefRelAbundance[1,-1]))))
1522031628608:# Change the order of Families and Samples
1522031628608:(briefRelAbundance <- briefRelAbundance %>%
1522031628608:gather(Sample, Abundance, -Family) %>%
1522031628609:spread(Family, Abundance) %>%
1522031628609:left_join(partialMetadata) %>%
1522031628609:gather(Family, Abundance, -Sample, -Population, -Evolution) %>%
1522031628610:mutate(Family = factor(Family, levels = rev(orderedFamilies))) %>%
1522031628610:mutate(Sample = factor(Sample, levels = orderedSamples)) # %>%
1522031628610:)
1522031628674:# Visualize colors
1522031628674:pal(rev(palette))
1522031628687:pal(palette)
1522031629088:# Plot Abundance --------------------------------------------------------
1522031629089:dataToPlot <- briefRelAbundance
1522031629089:size = 0.4
1522031629090:textSize = 10
1522031629090:# ggpubr ------------------------------------------------------------------
1522031629090:(abundancePLot <- ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1522031629091:fill = "Family",               # change fill color by cyl
1522031629091:# color = "white",            # Set bar border colors to white
1522031629091:# palette = "jco",            # jco journal color palett. see ?ggpar
1522031629092:palette = rev(palette[1:(nTopElements+1)]),
1522031629092:# sort.val = "desc",          # Sort the value in dscending order
1522031629092:# sort.by.groups = FALSE,     # Don't sort inside each group
1522031629093:x.text.angle = 50, # Rotate vertically x axis texts
1522031629093:width = 1
1522031629093:, size = size
1522031629093:) +
1522031629094:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522031629094:labs(y = "Relative Abundance") +
1522031629094:theme(panel.grid.major = element_blank(),
1522031629095:axis.text.x = element_text(size = textSize, angle = 50, hjust = 1),
1522031629095:strip.background = element_blank(),
1522031629095:panel.border = element_blank(),
1522031629096:legend.position = "right",
1522031629096:strip.text.x = element_text(size = 12)
1522031629096:))
1522031629821:metadata %>%
1522031629821:filter(Sample %in% samples) %>%
1522031629822:select(Sample, Evolution, Population = Residence,
1522031629822:Ae2, Aa1, Aea, Ae1) %>%
1522031629823:gather(Ancestry, Proportion, -Sample,
1522031629823:-Population, -Evolution) %>%
1522031629824:mutate(Sample = factor(Sample, levels = orderedSamples))
1522031629869:# Visualize colors
1522031629870:pal(rev(palette))
1522031630036:pal(palette)
1522031630177:# Plot Abundance --------------------------------------------------------
1522031630178:dataToPlot <- metadata %>%
1522031630178:filter(Sample %in% samples) %>%
1522031630178:select(Sample, Evolution, Population = Residence,
1522031630179:Ae2, Aa1, Aea, Ae1) %>%
1522031630179:gather(Ancestry, Proportion, -Sample,
1522031630179:-Population, -Evolution) %>%
1522031630180:mutate(Sample = factor(Sample, levels = orderedSamples))
1522031630194:# ggpubr ------------------------------------------------------------------
1522031630194:(ancestryPlot <- ggbarplot(dataToPlot, x = "Sample", y = "Proportion",
1522031630195:fill = "Ancestry",               # change fill color by cyl
1522031630195:# color = "white",            # Set bar border colors to white
1522031630195:# palette = "jco",            # jco journal color palett. see ?ggpar
1522031630195:# palette = rev(palette[1:(nTopElements+1)]),
1522031630196:palette = c("#00AFBB", "#E7B800", "#FC4E07", "darkgrey"),
1522031630196:# sort.val = "desc",          #f- Sort the value in dscending order
1522031630196:# sort.by.groups = FALSE,     # Don't sort inside each group
1522031630197:x.text.angle = 50, # Rotate vertically x axis texts
1522031630197:width = 1
1522031630197:, size = size
1522031630197:) +
1522031630198:# facet_wrap(~ Population, scales = "free_x") +
1522031630198:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522031630198:labs(y = "Ancestry Proportion") +
1522031630199:theme(panel.grid.major = element_blank(),
1522031630199:axis.text.x = element_text(size = textSize, angle = 50, hjust = 1),
1522031630199:strip.background = element_blank(),
1522031630200:panel.border = element_blank(),
1522031630200:legend.position = "right",
1522031630200:strip.text.x = element_text(size = 5)
1522031630201:))
1522031630679:# (finalPlot <- ggarrange(abundancePLot + rremove("xlab") + rremove("x.axis") + rremove("x.text") + rremove("x.ticks")
1522031630679:(finalPlot <- ggarrange(abundancePLot + rremove("xlab") + rremove("axis") + rremove("x.text") + rremove("x.ticks")
1522031630680:+ theme(plot.margin = unit(c(1,2,1,1), "mm"))
1522031630680:, ancestryPlot + rremove("y.axis")
1522031630681:# + rremove("ylab") + rremove("y.ticks")
1522031630681:# + theme(plot.margin = unit(c(1,5,1,0), "mm"))
1522031630682:# , pGeneral
1522031630683:# + theme(plot.margin = unit(c(1,4,1,1), "mm"))
1522031630683:# + rremove("y.text") + rremove("y.axis") + rremove("ylab") + rremove("y.ticks")
1522031630684:# # ramPlot + theme(plot.margin = unit(c(1,18,1,1), "mm")) + rremove("y.text"),
1522031630684:# , labels = c("A", "", "B")
1522031630685:, ncol = 1, nrow = 2
1522031630685:# , widths = widths
1522031630686:, align = "v"
1522031630686:# , align = "h"
1522031630686:# , common.legend = TRUE
1522031630687:# , legend = c("right")
1522031630687:))
1522031663647:# Figure 2
1522031663647:# Sources -----------------------------------------------------------------
1522031663648:# Packages ----------------------------------------------------------------
1522031663649:requiredPackages <- c("tidyverse", "rlang", "dendsort", "ggfortify", "ggpubr", "pheatmap",
1522031663649:"RColorBrewer", "vegan", "formatR")
1522031663650:installAndLoadPackages(requiredPackages)
1522031663656:source("scripts/auxiliary_functions.R")
1522031663661:# Loading Data ------------------------------------------------------------
1522031663661:extDataFile <- "data/gt_and_tumaco_samples.otu_table.tsv"
1522031663662:extData     <- read.delim(extDataFile, check.names = FALSE,
1522031663662:stringsAsFactors = F)
1522031663717:extData     <- as_tibble(extData)
1522031663720:attributes(extData)
1522031663767:metadataFile <- "data/metadata.tsv"
1522031663768:metadata     <- read_tsv(metadataFile)
1522031663781:attributes(metadata)
1522031663795:# General configuration ---------------------------------------------------
1522031663796:useOnlyGTSamples <- TRUE
1522031663796:dataGroups   <- c("Coast", "Mountain")
1522031663796:groupVar     <- "Population"
1522031663797:titles       <- c(dataGroups, "General\nProfile")
1522031663797:labels       <- c(y = "Relative Abundance")
1522031663798:nTopElements <- 10
1522031663798:# Preparing data ----------------------------------------------------------
1522031663799:# Get samples sequenced through GT
1522031663799:gtSamples <- metadata %>%
1522031663800:filter(Seq_Origin == "GT1" | Seq_Origin == "GT2") %>%
1522031663800:select(Sample)
1522031663803:tumacoSamples <- metadata %>%
1522031663804:filter(Additional_Sample == 1) %>%
1522031663804:select(Sample)
1522031663808:pull(gtSamples)
1522031663811:pull(tumacoSamples)
1522031663813:# Select samples
1522031663814:if (useOnlyGTSamples) {
1522031663814:# Indices for samples from GT only and Tumaco Additional Samples
1522031663814:samples <- pull(gtSamples)
1522031663814:} else {
1522031663815:# Include Tumaco additional samples
1522031663815:samples <- c(pull(gtSamples), pull(tumacoSamples))
1522031663815:}
1522031663816:# Indices of sample columns
1522031663817:samplesInd <- which(colnames(extData) %in% samples)
1522031663817:# Select metadata
1522031663818:partialMetadata <- metadata %>%
1522031663818:# filter(Included_In_Study == 1) %>%
1522031663819:filter(Sample %in% samples) %>%
1522031663819:select(Sample, Evolution, Population = Residence)
1522031663824:# Add "UNSUPPORTED MAPPING" to blank cells from the taxonomy columns
1522031663824:for(col in c("Class", "Order", "Family", "Genera", "Species")){
1522031663825:extData[extData[[col]] == "", col] = "UNSUPPORTED MAPPING"
1522031663825:}
1522031663831:# Add Reads column: total reads per OTU
1522031663831:extData <- extData %>%
1522031663831:mutate(Reads = rowSums(.[samplesInd]))
1522031663838:# Figure 2: Relative abundance (Family and Class) -------------------------
1522031663838:# Preparing data
1522031663838:# Calculate Relative Abundance per Family
1522031663839:(relAbundance <- extData %>%
1522031663839:group_by(Family) %>%                          # group by Family column
1522031663839:summarise_at(samplesInd, sum) %>%             # compute sum of reads for each Family
1522031663840:mutate_if(is.numeric, funs( . / sum(.))) %>%  # Normalize (rel. abundance)
1522031663840:mutate(TotalAbundance = rowSums(select(., -Family))) %>%
1522031663840:arrange(desc(TotalAbundance))
1522031663841:)
1522031663981:# Get top families by total abundance
1522031663982:top <- relAbundance %>%
1522031663982:top_n(nTopElements, TotalAbundance) %>%
1522031663982:select(-TotalAbundance)
1522031663986:# Group the rest of the families into the family "Others"
1522031663986:rest <- relAbundance %>%
1522031663987:top_n(-(nrow(relAbundance) - nTopElements), TotalAbundance) %>%
1522031663987:gather(Sample, Abundance, -Family) %>%
1522031663987:group_by(Sample) %>%
1522031663987:summarise(Total = sum(Abundance)) %>%
1522031663988:spread(Sample, Total) %>%
1522031663988:mutate(Family = c("Others")) %>%
1522031663988:select(Family, -TotalAbundance, everything()) %>%
1522031663989:select(-TotalAbundance)
1522031664005:# Bind top and rest families into a single table (tibble)
1522031664006:briefRelAbundance <- rbind.data.frame(top, rest)
1522031664007:# Get the order of families by total abundance (originally
1522031664008:# from relAbundance table)
1522031664008:orderedFamilies <- briefRelAbundance$Family
1522031664008:# Get the order of samples by the most abundant family
1522031664009:orderedSamples  <- names(sort(as.vector(as.data.frame(briefRelAbundance[1,-1]))))
1522031664010:# Change the order of Families and Samples
1522031664011:(briefRelAbundance <- briefRelAbundance %>%
1522031664011:gather(Sample, Abundance, -Family) %>%
1522031664011:spread(Family, Abundance) %>%
1522031664012:left_join(partialMetadata) %>%
1522031664012:gather(Family, Abundance, -Sample, -Population, -Evolution) %>%
1522031664012:mutate(Family = factor(Family, levels = rev(orderedFamilies))) %>%
1522031664013:mutate(Sample = factor(Sample, levels = orderedSamples)) # %>%
1522031664013:)
1522031664085:# Visualize colors
1522031664086:pal(rev(palette))
1522031664101:pal(palette)
1522031664473:# Plot Abundance --------------------------------------------------------
1522031664473:dataToPlot <- briefRelAbundance
1522031664474:size = 0.4
1522031664474:textSize = 10
1522031664475:# ggpubr ------------------------------------------------------------------
1522031664475:(abundancePLot <- ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1522031664475:fill = "Family",               # change fill color by cyl
1522031664476:# color = "white",            # Set bar border colors to white
1522031664476:# palette = "jco",            # jco journal color palett. see ?ggpar
1522031664476:palette = rev(palette[1:(nTopElements+1)]),
1522031664477:# sort.val = "desc",          # Sort the value in dscending order
1522031664477:# sort.by.groups = FALSE,     # Don't sort inside each group
1522031664477:x.text.angle = 50, # Rotate vertically x axis texts
1522031664477:width = 1
1522031664478:, size = size
1522031664478:) +
1522031664478:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522031664479:labs(y = "Relative Abundance") +
1522031664479:theme(panel.grid.major = element_blank(),
1522031664479:axis.text.x = element_text(size = textSize, angle = 50, hjust = 1),
1522031664480:strip.background = element_blank(),
1522031664480:panel.border = element_blank(),
1522031664480:legend.position = "right",
1522031664481:strip.text.x = element_text(size = 12)
1522031664481:))
1522031665216:metadata %>%
1522031665216:filter(Sample %in% samples) %>%
1522031665217:select(Sample, Evolution, Population = Residence,
1522031665217:Ae2, Aa1, Aea, Ae1) %>%
1522031665217:gather(Ancestry, Proportion, -Sample,
1522031665217:-Population, -Evolution) %>%
1522031665218:mutate(Sample = factor(Sample, levels = orderedSamples))
1522031665265:# Visualize colors
1522031665265:pal(rev(palette))
1522031665430:pal(palette)
1522031665588:# Plot Abundance --------------------------------------------------------
1522031665588:dataToPlot <- metadata %>%
1522031665589:filter(Sample %in% samples) %>%
1522031665589:select(Sample, Evolution, Population = Residence,
1522031665589:Ae2, Aa1, Aea, Ae1) %>%
1522031665590:gather(Ancestry, Proportion, -Sample,
1522031665590:-Population, -Evolution) %>%
1522031665590:mutate(Sample = factor(Sample, levels = orderedSamples))
1522031665598:# ggpubr ------------------------------------------------------------------
1522031665598:(ancestryPlot <- ggbarplot(dataToPlot, x = "Sample", y = "Proportion",
1522031665598:fill = "Ancestry",               # change fill color by cyl
1522031665599:# color = "white",            # Set bar border colors to white
1522031665599:# palette = "jco",            # jco journal color palett. see ?ggpar
1522031665599:# palette = rev(palette[1:(nTopElements+1)]),
1522031665599:palette = c("#00AFBB", "#E7B800", "#FC4E07", "darkgrey"),
1522031665600:# sort.val = "desc",          #f- Sort the value in dscending order
1522031665600:# sort.by.groups = FALSE,     # Don't sort inside each group
1522031665600:x.text.angle = 50, # Rotate vertically x axis texts
1522031665601:width = 1
1522031665601:, size = size
1522031665601:) +
1522031665602:# facet_wrap(~ Population, scales = "free_x") +
1522031665602:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522031665602:labs(y = "Ancestry Proportion") +
1522031665603:theme(panel.grid.major = element_blank(),
1522031665603:axis.text.x = element_text(size = textSize, angle = 50, hjust = 1),
1522031665603:strip.background = element_blank(),
1522031665604:panel.border = element_blank(),
1522031665604:legend.position = "right",
1522031665605:# strip.text.x = element_text(size = 12)
1522031665605:strip.text.x = element_blank()
1522031665605:))
1522031666174:# (finalPlot <- ggarrange(abundancePLot + rremove("xlab") + rremove("x.axis") + rremove("x.text") + rremove("x.ticks")
1522031666174:(finalPlot <- ggarrange(abundancePLot + rremove("xlab") + rremove("axis") + rremove("x.text") + rremove("x.ticks")
1522031666175:+ theme(plot.margin = unit(c(1,2,1,1), "mm"))
1522031666175:, ancestryPlot + rremove("y.axis")
1522031666175:# + rremove("ylab") + rremove("y.ticks")
1522031666176:# + theme(plot.margin = unit(c(1,5,1,0), "mm"))
1522031666176:# , pGeneral
1522031666176:# + theme(plot.margin = unit(c(1,4,1,1), "mm"))
1522031666177:# + rremove("y.text") + rremove("y.axis") + rremove("ylab") + rremove("y.ticks")
1522031666177:# # ramPlot + theme(plot.margin = unit(c(1,18,1,1), "mm")) + rremove("y.text"),
1522031666177:# , labels = c("A", "", "B")
1522031666178:, ncol = 1, nrow = 2
1522031666178:# , widths = widths
1522031666178:, align = "v"
1522031666179:# , align = "h"
1522031666179:# , common.legend = TRUE
1522031666179:# , legend = c("right")
1522031666180:))
1522031690513:textSize = 8
1522031690514:# ggpubr ------------------------------------------------------------------
1522031690515:(abundancePLot <- ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1522031690515:fill = "Family",               # change fill color by cyl
1522031690516:# color = "white",            # Set bar border colors to white
1522031690516:# palette = "jco",            # jco journal color palett. see ?ggpar
1522031690517:palette = rev(palette[1:(nTopElements+1)]),
1522031690517:# sort.val = "desc",          # Sort the value in dscending order
1522031690518:# sort.by.groups = FALSE,     # Don't sort inside each group
1522031690518:x.text.angle = 50, # Rotate vertically x axis texts
1522031690519:width = 1
1522031690520:, size = size
1522031690520:) +
1522031690521:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522031690522:labs(y = "Relative Abundance") +
1522031690523:theme(panel.grid.major = element_blank(),
1522031690523:axis.text.x = element_text(size = textSize, angle = 50, hjust = 1),
1522031690524:strip.background = element_blank(),
1522031690525:panel.border = element_blank(),
1522031690525:legend.position = "right",
1522031690526:strip.text.x = element_text(size = 12)
1522031690527:))
1522031690550:metadata %>%
1522031690551:filter(Sample %in% samples) %>%
1522031690551:select(Sample, Evolution, Population = Residence,
1522031690551:Ae2, Aa1, Aea, Ae1) %>%
1522031690552:gather(Ancestry, Proportion, -Sample,
1522031690552:-Population, -Evolution) %>%
1522031690553:mutate(Sample = factor(Sample, levels = orderedSamples))
1522031690615:# Visualize colors
1522031690616:pal(rev(palette))
1522031690630:pal(palette)
1522031691324:# Plot Abundance --------------------------------------------------------
1522031691325:dataToPlot <- metadata %>%
1522031691325:filter(Sample %in% samples) %>%
1522031691325:select(Sample, Evolution, Population = Residence,
1522031691325:Ae2, Aa1, Aea, Ae1) %>%
1522031691326:gather(Ancestry, Proportion, -Sample,
1522031691326:-Population, -Evolution) %>%
1522031691326:mutate(Sample = factor(Sample, levels = orderedSamples))
1522031691333:# ggpubr ------------------------------------------------------------------
1522031691334:(ancestryPlot <- ggbarplot(dataToPlot, x = "Sample", y = "Proportion",
1522031691334:fill = "Ancestry",               # change fill color by cyl
1522031691334:# color = "white",            # Set bar border colors to white
1522031691335:# palette = "jco",            # jco journal color palett. see ?ggpar
1522031691335:# palette = rev(palette[1:(nTopElements+1)]),
1522031691335:palette = c("#00AFBB", "#E7B800", "#FC4E07", "darkgrey"),
1522031691336:# sort.val = "desc",          #f- Sort the value in dscending order
1522031691336:# sort.by.groups = FALSE,     # Don't sort inside each group
1522031691337:x.text.angle = 50, # Rotate vertically x axis texts
1522031691337:width = 1
1522031691338:, size = size
1522031691338:) +
1522031691339:# facet_wrap(~ Population, scales = "free_x") +
1522031691339:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522031691339:labs(y = "Ancestry Proportion") +
1522031691339:theme(panel.grid.major = element_blank(),
1522031691340:axis.text.x = element_text(size = textSize, angle = 50, hjust = 1),
1522031691340:strip.background = element_blank(),
1522031691340:panel.border = element_blank(),
1522031691341:legend.position = "right",
1522031691341:# strip.text.x = element_text(size = 12)
1522031691341:strip.text.x = element_blank()
1522031691342:))
1522031692013:# (finalPlot <- ggarrange(abundancePLot + rremove("xlab") + rremove("x.axis") + rremove("x.text") + rremove("x.ticks")
1522031692014:(finalPlot <- ggarrange(abundancePLot + rremove("xlab") + rremove("axis") + rremove("x.text") + rremove("x.ticks")
1522031692014:+ theme(plot.margin = unit(c(1,2,1,1), "mm"))
1522031692014:, ancestryPlot + rremove("y.axis")
1522031692015:# + rremove("ylab") + rremove("y.ticks")
1522031692015:# + theme(plot.margin = unit(c(1,5,1,0), "mm"))
1522031692015:# , pGeneral
1522031692016:# + theme(plot.margin = unit(c(1,4,1,1), "mm"))
1522031692016:# + rremove("y.text") + rremove("y.axis") + rremove("ylab") + rremove("y.ticks")
1522031692016:# # ramPlot + theme(plot.margin = unit(c(1,18,1,1), "mm")) + rremove("y.text"),
1522031692017:# , labels = c("A", "", "B")
1522031692017:, ncol = 1, nrow = 2
1522031692017:# , widths = widths
1522031692018:, align = "v"
1522031692018:# , align = "h"
1522031692018:# , common.legend = TRUE
1522031692019:# , legend = c("right")
1522031692019:))
1522031706272:# Figure 2
1522031706273:# Sources -----------------------------------------------------------------
1522031706274:# Packages ----------------------------------------------------------------
1522031706275:requiredPackages <- c("tidyverse", "rlang", "dendsort", "ggfortify", "ggpubr", "pheatmap",
1522031706275:"RColorBrewer", "vegan", "formatR")
1522031706277:installAndLoadPackages(requiredPackages)
1522031706284:source("scripts/auxiliary_functions.R")
1522031706292:# Loading Data ------------------------------------------------------------
1522031706293:extDataFile <- "data/gt_and_tumaco_samples.otu_table.tsv"
1522031706294:extData     <- read.delim(extDataFile, check.names = FALSE,
1522031706294:stringsAsFactors = F)
1522031706352:extData     <- as_tibble(extData)
1522031706355:attributes(extData)
1522031706388:metadataFile <- "data/metadata.tsv"
1522031706388:metadata     <- read_tsv(metadataFile)
1522031706407:attributes(metadata)
1522031706419:# General configuration ---------------------------------------------------
1522031706420:useOnlyGTSamples <- TRUE
1522031706421:dataGroups   <- c("Coast", "Mountain")
1522031706421:groupVar     <- "Population"
1522031706422:titles       <- c(dataGroups, "General\nProfile")
1522031706422:labels       <- c(y = "Relative Abundance")
1522031706423:nTopElements <- 10
1522031706423:# Preparing data ----------------------------------------------------------
1522031706424:# Get samples sequenced through GT
1522031706424:gtSamples <- metadata %>%
1522031706425:filter(Seq_Origin == "GT1" | Seq_Origin == "GT2") %>%
1522031706425:select(Sample)
1522031706430:tumacoSamples <- metadata %>%
1522031706430:filter(Additional_Sample == 1) %>%
1522031706431:select(Sample)
1522031706434:pull(gtSamples)
1522031706437:pull(tumacoSamples)
1522031706439:# Select samples
1522031706439:if (useOnlyGTSamples) {
1522031706439:# Indices for samples from GT only and Tumaco Additional Samples
1522031706440:samples <- pull(gtSamples)
1522031706440:} else {
1522031706440:# Include Tumaco additional samples
1522031706441:samples <- c(pull(gtSamples), pull(tumacoSamples))
1522031706441:}
1522031706442:# Indices of sample columns
1522031706442:samplesInd <- which(colnames(extData) %in% samples)
1522031706443:# Select metadata
1522031706443:partialMetadata <- metadata %>%
1522031706444:# filter(Included_In_Study == 1) %>%
1522031706444:filter(Sample %in% samples) %>%
1522031706444:select(Sample, Evolution, Population = Residence)
1522031706448:# Add "UNSUPPORTED MAPPING" to blank cells from the taxonomy columns
1522031706449:for(col in c("Class", "Order", "Family", "Genera", "Species")){
1522031706449:extData[extData[[col]] == "", col] = "UNSUPPORTED MAPPING"
1522031706449:}
1522031706455:# Add Reads column: total reads per OTU
1522031706456:extData <- extData %>%
1522031706456:mutate(Reads = rowSums(.[samplesInd]))
1522031706462:# Figure 2: Relative abundance (Family and Class) -------------------------
1522031706463:# Preparing data
1522031706463:# Calculate Relative Abundance per Family
1522031706464:(relAbundance <- extData %>%
1522031706464:group_by(Family) %>%                          # group by Family column
1522031706464:summarise_at(samplesInd, sum) %>%             # compute sum of reads for each Family
1522031706464:mutate_if(is.numeric, funs( . / sum(.))) %>%  # Normalize (rel. abundance)
1522031706465:mutate(TotalAbundance = rowSums(select(., -Family))) %>%
1522031706465:arrange(desc(TotalAbundance))
1522031706465:)
1522031706629:# Get top families by total abundance
1522031706629:top <- relAbundance %>%
1522031706629:top_n(nTopElements, TotalAbundance) %>%
1522031706630:select(-TotalAbundance)
1522031706634:# Group the rest of the families into the family "Others"
1522031706634:rest <- relAbundance %>%
1522031706634:top_n(-(nrow(relAbundance) - nTopElements), TotalAbundance) %>%
1522031706635:gather(Sample, Abundance, -Family) %>%
1522031706635:group_by(Sample) %>%
1522031706635:summarise(Total = sum(Abundance)) %>%
1522031706635:spread(Sample, Total) %>%
1522031706636:mutate(Family = c("Others")) %>%
1522031706636:select(Family, -TotalAbundance, everything()) %>%
1522031706636:select(-TotalAbundance)
1522031706654:# Bind top and rest families into a single table (tibble)
1522031706654:briefRelAbundance <- rbind.data.frame(top, rest)
1522031706656:# Get the order of families by total abundance (originally
1522031706656:# from relAbundance table)
1522031706656:orderedFamilies <- briefRelAbundance$Family
1522031706657:# Get the order of samples by the most abundant family
1522031706657:orderedSamples  <- names(sort(as.vector(as.data.frame(briefRelAbundance[1,-1]))))
1522031706659:# Change the order of Families and Samples
1522031706659:(briefRelAbundance <- briefRelAbundance %>%
1522031706659:gather(Sample, Abundance, -Family) %>%
1522031706660:spread(Family, Abundance) %>%
1522031706660:left_join(partialMetadata) %>%
1522031706660:gather(Family, Abundance, -Sample, -Population, -Evolution) %>%
1522031706661:mutate(Family = factor(Family, levels = rev(orderedFamilies))) %>%
1522031706661:mutate(Sample = factor(Sample, levels = orderedSamples)) # %>%
1522031706661:)
1522031706726:# Visualize colors
1522031706726:pal(rev(palette))
1522031706738:pal(palette)
1522031706884:# Plot Abundance --------------------------------------------------------
1522031706885:dataToPlot <- briefRelAbundance
1522031706885:size = 0.4
1522031706886:textSize = 8
1522031706887:# ggpubr ------------------------------------------------------------------
1522031706887:(abundancePLot <- ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1522031706888:fill = "Family",               # change fill color by cyl
1522031706888:# color = "white",            # Set bar border colors to white
1522031706889:# palette = "jco",            # jco journal color palett. see ?ggpar
1522031706889:palette = rev(palette[1:(nTopElements+1)]),
1522031706890:# sort.val = "desc",          # Sort the value in dscending order
1522031706890:# sort.by.groups = FALSE,     # Don't sort inside each group
1522031706890:x.text.angle = 50, # Rotate vertically x axis texts
1522031706891:width = 1
1522031706891:, size = size
1522031706892:) +
1522031706892:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522031706893:labs(y = "Relative Abundance") +
1522031706893:theme(panel.grid.major = element_blank(),
1522031706894:axis.text.x = element_text(size = textSize, angle = 50, hjust = 1),
1522031706894:strip.background = element_blank(),
1522031706895:panel.border = element_blank(),
1522031706895:legend.position = "right",
1522031706896:strip.text.x = element_text(size = 12)
1522031706896:))
1522031707460:metadata %>%
1522031707460:filter(Sample %in% samples) %>%
1522031707461:select(Sample, Evolution, Population = Residence,
1522031707461:Ae2, Aa1, Aea, Ae1) %>%
1522031707461:gather(Ancestry, Proportion, -Sample,
1522031707461:-Population, -Evolution) %>%
1522031707462:mutate(Sample = factor(Sample, levels = orderedSamples))
1522031707508:# Visualize colors
1522031707509:pal(rev(palette))
1522031707674:pal(palette)
1522031707829:# Plot Abundance --------------------------------------------------------
1522031707830:dataToPlot <- metadata %>%
1522031707830:filter(Sample %in% samples) %>%
1522031707830:select(Sample, Evolution, Population = Residence,
1522031707831:Ae2, Aa1, Aea, Ae1) %>%
1522031707831:gather(Ancestry, Proportion, -Sample,
1522031707831:-Population, -Evolution) %>%
1522031707831:mutate(Sample = factor(Sample, levels = orderedSamples))
1522031707839:# ggpubr ------------------------------------------------------------------
1522031707839:(ancestryPlot <- ggbarplot(dataToPlot, x = "Sample", y = "Proportion",
1522031707840:fill = "Ancestry",               # change fill color by cyl
1522031707840:# color = "white",            # Set bar border colors to white
1522031707841:# palette = "jco",            # jco journal color palett. see ?ggpar
1522031707841:# palette = rev(palette[1:(nTopElements+1)]),
1522031707841:palette = c("#00AFBB", "#E7B800", "#FC4E07", "darkgrey"),
1522031707842:# sort.val = "desc",          #f- Sort the value in dscending order
1522031707842:# sort.by.groups = FALSE,     # Don't sort inside each group
1522031707842:x.text.angle = 50, # Rotate vertically x axis texts
1522031707842:width = 1
1522031707843:, size = size
1522031707843:) +
1522031707843:# facet_wrap(~ Population, scales = "free_x") +
1522031707844:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522031707844:labs(y = "Ancestry Proportion") +
1522031707844:theme(panel.grid.major = element_blank(),
1522031707845:axis.text.x = element_text(size = textSize, angle = 50, hjust = 1),
1522031707845:strip.background = element_blank(),
1522031707846:panel.border = element_blank(),
1522031707846:legend.position = "right",
1522031707846:# strip.text.x = element_text(size = 12)
1522031707847:strip.text.x = element_blank()
1522031707847:))
1522031708309:# (finalPlot <- ggarrange(abundancePLot + rremove("xlab") + rremove("x.axis") + rremove("x.text") + rremove("x.ticks")
1522031708310:(finalPlot <- ggarrange(abundancePLot + rremove("xlab") + rremove("axis") + rremove("x.text") + rremove("x.ticks")
1522031708310:+ theme(plot.margin = unit(c(1,2,1,1), "mm"))
1522031708310:, ancestryPlot + rremove("y.axis")
1522031708311:# + rremove("ylab") + rremove("y.ticks")
1522031708311:# + theme(plot.margin = unit(c(1,5,1,0), "mm"))
1522031708311:# , pGeneral
1522031708312:# + theme(plot.margin = unit(c(1,4,1,1), "mm"))
1522031708312:# + rremove("y.text") + rremove("y.axis") + rremove("ylab") + rremove("y.ticks")
1522031708312:# # ramPlot + theme(plot.margin = unit(c(1,18,1,1), "mm")) + rremove("y.text"),
1522031708313:# , labels = c("A", "", "B")
1522031708313:, ncol = 1, nrow = 2
1522031708313:# , widths = widths
1522031708314:, align = "v"
1522031708314:# , align = "h"
1522031708314:# , common.legend = TRUE
1522031708315:# , legend = c("right")
1522031708315:))
1522031709397:# ggplot2 -----------------------------------------------------------------
1522031709397:# Base variables
1522031709397:width        <- 8
1522031709398:lineSize     <- 0.5
1522031709398:baseTextSize <- 14
1522031709399:height       <- width * 0.618
1522031709400:axisColor    <- "#333333"
1522031709401:gridColor    <- "#cccccc"
1522031709401:textColor    <- "#333333"
1522031709402:# Generate plot 1: Coast
1522031709402:dGroup <- 1
1522031709403:dataToPlot <- briefRelAbundance %>% filter(Population == dataGroups[dGroup])
1522031709404:pGroup1    <- ggplot(dataToPlot, aes(x = Sample, y = Abundance))
1522031709405:pGroup1    <- pGroup1 + geom_bar(stat = "identity", position = "stack",
1522031709405:aes(fill = Family)
1522031709406:# , alpha = 0.95,
1522031709406:, width = 1
1522031709406:, color = "#000000"
1522031709407:, size = 0.2
1522031709407:)
1522031709410:pGroup1 <- pGroup1 + scale_fill_manual(values = rev(palette[1:(nTopElements+1)]))
1522031709411:pGroup1 <- pGroup1 + scale_y_continuous(expand = c(0, 0))
1522031709412:pGroup1 <- pGroup1 + customTheme
1522031709415:pGroup1 <- pGroup1 + labs(title = titles[dGroup], y = labels["y"], x = "")
1522031709417:pGroup1 <- pGroup1 + theme(axis.line.x  = element_blank(),
1522031709417:axis.text.x  = element_text(angle = 50, hjust = 1),
1522031709418:axis.ticks.x = element_blank(),
1522031709418:strip.background = element_blank(),
1522031709419:strip.text.x = element_text(margin = margin(0.2,0,0.8,0, "cm"),
1522031709419:size = baseTextSize * 1.025),
1522031709420:panel.spacing    = unit(2, "lines"))
1522031709424:pGroup1
1522031710051:dGroup     <- 2
1522031710051:dataToPlot <- briefRelAbundance %>% filter(Population == dataGroups[dGroup])
1522031710053:pGroup2    <- ggplot(dataToPlot, aes(x = Sample, y = Abundance))
1522031710054:pGroup2    <- pGroup2 + geom_bar(stat = "identity", position = "stack",
1522031710054:aes(fill = Family)
1522031710054:# , alpha = 0.95,
1522031710055:, width = 0.8
1522031710055:, color = "#000000"
1522031710055:, size = 0.2
1522031710056:)
1522031710058:pGroup2 <- pGroup2 + scale_fill_manual(values = rev(palette[1:(nTopElements+1)]))
1522031710059:pGroup2 <- pGroup2 + scale_y_continuous(expand = c(0, 0))
1522031710061:pGroup2 <- pGroup2 + customTheme
1522031710063:pGroup2 <- pGroup2 + labs(title = titles[dGroup], y = labels["y"])
1522031710064:pGroup2 <- pGroup2 + theme(axis.line.x  = element_blank(),
1522031710064:axis.text.x  = element_text(angle = 50, hjust = 1),
1522031710065:axis.ticks.x = element_blank(),
1522031710065:strip.background = element_blank(),
1522031710065:strip.text.x = element_text(margin = margin(0.2,0,0.8,0, "cm"),
1522031710066:size = baseTextSize * 1.025),
1522031710066:panel.spacing    = unit(2, "lines"))
1522031710068:pGroup2
1522031710543:# ggsave(abundancePlot1, filename = "fig_02b.abundance_comparison.family.including_tumaco_samples.pdf", width = 10, height = 6)
1522031710543:# Plots for General Profile -----------------------------------------------
1522031710544:# Get samples of group 1
1522031710544:samplesGroup1 <- filter(metadata,
1522031710544:Residence == dataGroups[1],
1522031710545:Seq_Origin == "GT1" | Seq_Origin == "GT2") %>%
1522031710545:pull(Sample)
1522031710548:# Get samples of group 2
1522031710548:samplesGroup2 <- filter(metadata,
1522031710549:Residence == dataGroups[2],
1522031710549:Seq_Origin == "GT1" | Seq_Origin == "GT2") %>%
1522031710549:pull(Sample)
1522031710552:# Preparing data to plot general profile for group 1
1522031710552:(readsGroup1 <- extData %>%
1522031710553:group_by(Family) %>%                # group by Family column
1522031710553:summarise_at(samplesGroup1, sum) %>%
1522031710553:mutate(TotalReads = rowSums(select(., -1))) %>%
1522031710554:select(Family, TotalReads))# %>%
1522031710593:# Data corresponding to top families
1522031710593:(top <- readsGroup1 %>%
1522031710593:filter(Family %in% orderedFamilies))
1522031710625:# Group the rest of the families into the family "Others"
1522031710625:(rest <- readsGroup1 %>%
1522031710626:filter(! Family %in% orderedFamilies) %>%
1522031710626:summarise(TotalReads = sum(TotalReads)) %>%
1522031710626:mutate(Family = c("Others")) %>%
1522031710626:select(Family, TotalReads)
1522031710627:)
1522031711088:(briefRaGroup1 <- rbind.data.frame(top, rest) %>%
1522031711088:mutate_if(is.numeric, funs( . / sum(.))) %>%
1522031711089:rename(Abundance = TotalReads) %>%
1522031711089:mutate(Group = rep(dataGroups[1], nrow(.)))
1522031711089:)
1522031711129:# Preparing data to plot general profile for group 2
1522031711129:(raGroup2 <- getRelAbundance(otuTable = extData, groupLevel = Family,
1522031711129:samples = samplesGroup2))
1522031711265:(readsGroup2 <- extData %>%
1522031711266:group_by(Family) %>%                # group by Family column
1522031711266:summarise_at(samplesGroup2, sum) %>%
1522031711266:mutate(TotalReads = rowSums(select(., -1))) %>%
1522031711267:select(Family, TotalReads))# %>%
1522031711310:(top <- readsGroup2 %>%
1522031711310:filter(Family %in% orderedFamilies))
1522031711343:# Group the rest of the families into the family "Others"
1522031711343:(rest <- readsGroup2 %>%
1522031711343:filter(! Family %in% orderedFamilies) %>%
1522031711344:summarise(TotalReads = sum(TotalReads)) %>%
1522031711344:mutate(Family = c("Others")) %>%
1522031711344:select(Family, TotalReads)
1522031711344:)
1522031711366:(briefRaGroup2 <- rbind.data.frame(top, rest) %>%
1522031711366:mutate_if(is.numeric, funs( . / sum(.))) %>%
1522031711367:rename(Abundance = TotalReads) %>%
1522031711367:mutate(Group = rep(dataGroups[2], nrow(.)))
1522031711367:)
1522031711417:briefRaGroup1
1522031711474:briefRaGroup2
1522031711514:# Merge data from groups 1 and 2
1522031711515:briefRaTotal <- rbind.data.frame(briefRaGroup1, briefRaGroup2) %>%
1522031711515:mutate(Family = factor(Family, levels = rev(orderedFamilies)))
1522031711517:dataToPlot <- briefRaTotal
1522031711518:# Generate plot 1
1522031711518:pGeneral <- ggplot(dataToPlot, aes(x = Group, y = Abundance))
1522031711519:pGeneral <- pGeneral + geom_bar(stat = "identity", position = "stack",
1522031711520:aes(fill = Family)
1522031711520:# , alpha = 0.95,
1522031711520:, color = "#000000"
1522031711520:, size = 0.2
1522031711521:)
1522031711523:# pGeneral <- pGeneral + facet_wrap(~ Evolution, scales = "free_x")
1522031711524:# pGeneral <- pGeneral + facet_wrap(~ Population, scales = "free_x")
1522031711524:pGeneral <- pGeneral + scale_fill_manual(values = rev(palette[1:(nTopElements+1)]))
1522031711525:pGeneral <- pGeneral + scale_y_continuous(expand = c(0, 0))
1522031711526:pGeneral <- pGeneral + customTheme
1522031711528:pGeneral <- pGeneral + labs(title = titles[3],
1522031711529:x = "Population",
1522031711529:y = labels["y"])
1522031711531:pGeneral <- pGeneral + theme(axis.line.x  = element_blank(),
1522031711531:axis.text.x = element_text(angle = 50, hjust = 1),
1522031711531:axis.ticks.x = element_blank(),
1522031711532:strip.background = element_blank(),
1522031711532:strip.text.x = element_text(margin = margin(0.2,0,0.8,0, "cm"),
1522031711532:size = baseTextSize),
1522031711533:panel.spacing    = unit(2, "lines"))
1522031711536:pGroup1
1522031711832:pGroup2
1522031712328:pGeneral
1522031712812:# Multiplot Abundance ---------------------------------------------------------
1522031712812:if (useOnlyGTSamples) {
1522031712813:widths = c(0.28, 1, 0.15)
1522031712813:} else {
1522031712813:widths = c(1, 1, 0.15)
1522031712814:}
1522031712814:(finalPlot <- ggarrange(pGroup1 + rremove("xlab")
1522031712815:+ theme(plot.margin = unit(c(1,2,1,1), "mm"))
1522031712815:, pGroup2 + rremove("y.text") + rremove("y.axis")
1522031712815:+ rremove("ylab") + rremove("y.ticks")
1522031712816:+ theme(plot.margin = unit(c(1,5,1,0), "mm"))
1522031712816:, pGeneral
1522031712816:+ theme(plot.margin = unit(c(1,4,1,1), "mm"))
1522031712817:+ rremove("y.text") + rremove("y.axis") + rremove("ylab") + rremove("y.ticks")
1522031712817:# ramPlot + theme(plot.margin = unit(c(1,18,1,1), "mm")) + rremove("y.text"),
1522031712817:, labels = c("A", "", "B")
1522031712818:, ncol = 3, nrow = 1
1522031712818:, widths = widths
1522031712818:, align = "h"
1522031712819:, common.legend = TRUE
1522031712819:, legend = c("bottom")
1522031712819:))
1522031734397:# Figure 2
1522031734399:# Sources -----------------------------------------------------------------
1522031734400:# Packages ----------------------------------------------------------------
1522031734400:requiredPackages <- c("tidyverse", "rlang", "dendsort", "ggfortify", "ggpubr", "pheatmap",
1522031734401:"RColorBrewer", "vegan", "formatR")
1522031734402:installAndLoadPackages(requiredPackages)
1522031734410:source("scripts/auxiliary_functions.R")
1522031734418:# Loading Data ------------------------------------------------------------
1522031734419:extDataFile <- "data/gt_and_tumaco_samples.otu_table.tsv"
1522031734419:extData     <- read.delim(extDataFile, check.names = FALSE,
1522031734420:stringsAsFactors = F)
1522031734474:extData     <- as_tibble(extData)
1522031734477:attributes(extData)
1522031734514:metadataFile <- "data/metadata.tsv"
1522031734515:metadata     <- read_tsv(metadataFile)
1522031734524:attributes(metadata)
1522031734535:# General configuration ---------------------------------------------------
1522031734536:useOnlyGTSamples <- TRUE
1522031734536:dataGroups   <- c("Coast", "Mountain")
1522031734537:groupVar     <- "Population"
1522031734537:titles       <- c(dataGroups, "General\nProfile")
1522031734538:labels       <- c(y = "Relative Abundance")
1522031734538:nTopElements <- 10
1522031734539:# Preparing data ----------------------------------------------------------
1522031734539:# Get samples sequenced through GT
1522031734540:gtSamples <- metadata %>%
1522031734540:filter(Seq_Origin == "GT1" | Seq_Origin == "GT2") %>%
1522031734540:select(Sample)
1522031734543:tumacoSamples <- metadata %>%
1522031734544:filter(Additional_Sample == 1) %>%
1522031734544:select(Sample)
1522031734547:pull(gtSamples)
1522031734550:pull(tumacoSamples)
1522031734551:# Select samples
1522031734552:if (useOnlyGTSamples) {
1522031734552:# Indices for samples from GT only and Tumaco Additional Samples
1522031734553:samples <- pull(gtSamples)
1522031734553:} else {
1522031734553:# Include Tumaco additional samples
1522031734554:samples <- c(pull(gtSamples), pull(tumacoSamples))
1522031734554:}
1522031734555:# Indices of sample columns
1522031734555:samplesInd <- which(colnames(extData) %in% samples)
1522031734556:# Select metadata
1522031734557:partialMetadata <- metadata %>%
1522031734557:# filter(Included_In_Study == 1) %>%
1522031734557:filter(Sample %in% samples) %>%
1522031734557:select(Sample, Evolution, Population = Residence)
1522031734562:# Add "UNSUPPORTED MAPPING" to blank cells from the taxonomy columns
1522031734562:for(col in c("Class", "Order", "Family", "Genera", "Species")){
1522031734562:extData[extData[[col]] == "", col] = "UNSUPPORTED MAPPING"
1522031734562:}
1522031734569:# Add Reads column: total reads per OTU
1522031734569:extData <- extData %>%
1522031734569:mutate(Reads = rowSums(.[samplesInd]))
1522031734575:# Figure 2: Relative abundance (Family and Class) -------------------------
1522031734576:# Preparing data
1522031734576:# Calculate Relative Abundance per Family
1522031734577:(relAbundance <- extData %>%
1522031734577:group_by(Family) %>%                          # group by Family column
1522031734577:summarise_at(samplesInd, sum) %>%             # compute sum of reads for each Family
1522031734578:mutate_if(is.numeric, funs( . / sum(.))) %>%  # Normalize (rel. abundance)
1522031734578:mutate(TotalAbundance = rowSums(select(., -Family))) %>%
1522031734578:arrange(desc(TotalAbundance))
1522031734579:)
1522031734722:# Get top families by total abundance
1522031734723:top <- relAbundance %>%
1522031734723:top_n(nTopElements, TotalAbundance) %>%
1522031734723:select(-TotalAbundance)
1522031734727:# Group the rest of the families into the family "Others"
1522031734727:rest <- relAbundance %>%
1522031734728:top_n(-(nrow(relAbundance) - nTopElements), TotalAbundance) %>%
1522031734728:gather(Sample, Abundance, -Family) %>%
1522031734728:group_by(Sample) %>%
1522031734729:summarise(Total = sum(Abundance)) %>%
1522031734729:spread(Sample, Total) %>%
1522031734729:mutate(Family = c("Others")) %>%
1522031734730:select(Family, -TotalAbundance, everything()) %>%
1522031734730:select(-TotalAbundance)
1522031734761:# Bind top and rest families into a single table (tibble)
1522031734762:briefRelAbundance <- rbind.data.frame(top, rest)
1522031734763:# Get the order of families by total abundance (originally
1522031734764:# from relAbundance table)
1522031734764:orderedFamilies <- briefRelAbundance$Family
1522031734764:# Get the order of samples by the most abundant family
1522031734765:orderedSamples  <- names(sort(as.vector(as.data.frame(briefRelAbundance[1,-1]))))
1522031734766:# Change the order of Families and Samples
1522031734767:(briefRelAbundance <- briefRelAbundance %>%
1522031734767:gather(Sample, Abundance, -Family) %>%
1522031734767:spread(Family, Abundance) %>%
1522031734768:left_join(partialMetadata) %>%
1522031734768:gather(Family, Abundance, -Sample, -Population, -Evolution) %>%
1522031734768:mutate(Family = factor(Family, levels = rev(orderedFamilies))) %>%
1522031734769:mutate(Sample = factor(Sample, levels = orderedSamples)) # %>%
1522031734769:)
1522031734825:# Visualize colors
1522031734825:pal(rev(palette))
1522031734830:pal(palette)
1522031735469:# Plot Abundance --------------------------------------------------------
1522031735469:dataToPlot <- briefRelAbundance
1522031735469:size = 0.4
1522031735470:textSize = 8
1522031735471:# ggpubr ------------------------------------------------------------------
1522031735471:(abundancePLot <- ggbarplot(dataToPlot, x = "Sample", y = "Abundance",
1522031735471:fill = "Family",               # change fill color by cyl
1522031735472:# color = "white",            # Set bar border colors to white
1522031735472:# palette = "jco",            # jco journal color palett. see ?ggpar
1522031735472:palette = rev(palette[1:(nTopElements+1)]),
1522031735472:# sort.val = "desc",          # Sort the value in dscending order
1522031735473:# sort.by.groups = FALSE,     # Don't sort inside each group
1522031735473:x.text.angle = 50, # Rotate vertically x axis texts
1522031735473:width = 1
1522031735474:, size = size
1522031735474:) +
1522031735474:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522031735475:labs(y = "Relative Abundance") +
1522031735475:theme(panel.grid.major = element_blank(),
1522031735475:axis.text.x = element_text(size = textSize, angle = 50, hjust = 1),
1522031735476:strip.background = element_blank(),
1522031735476:panel.border = element_blank(),
1522031735476:legend.position = "right",
1522031735477:strip.text.x = element_text(size = 12)
1522031735477:))
1522031736545:metadata %>%
1522031736545:filter(Sample %in% samples) %>%
1522031736545:select(Sample, Evolution, Population = Residence,
1522031736546:Ae2, Aa1, Aea, Ae1) %>%
1522031736546:gather(Ancestry, Proportion, -Sample,
1522031736546:-Population, -Evolution) %>%
1522031736547:mutate(Sample = factor(Sample, levels = orderedSamples))
1522031736594:# Visualize colors
1522031736595:pal(rev(palette))
1522031736962:pal(palette)
1522031737109:# Plot Abundance --------------------------------------------------------
1522031737109:dataToPlot <- metadata %>%
1522031737110:filter(Sample %in% samples) %>%
1522031737110:select(Sample, Evolution, Population = Residence,
1522031737110:Ae2, Aa1, Aea, Ae1) %>%
1522031737111:gather(Ancestry, Proportion, -Sample,
1522031737111:-Population, -Evolution) %>%
1522031737111:mutate(Sample = factor(Sample, levels = orderedSamples))
1522031737118:# ggpubr ------------------------------------------------------------------
1522031737119:(ancestryPlot <- ggbarplot(dataToPlot, x = "Sample", y = "Proportion",
1522031737119:fill = "Ancestry",               # change fill color by cyl
1522031737119:# color = "white",            # Set bar border colors to white
1522031737120:# palette = "jco",            # jco journal color palett. see ?ggpar
1522031737120:# palette = rev(palette[1:(nTopElements+1)]),
1522031737120:palette = c("#00AFBB", "#E7B800", "#FC4E07", "darkgrey"),
1522031737121:# sort.val = "desc",          #f- Sort the value in dscending order
1522031737121:# sort.by.groups = FALSE,     # Don't sort inside each group
1522031737121:x.text.angle = 50, # Rotate vertically x axis texts
1522031737121:width = 1
1522031737122:, size = size
1522031737122:) +
1522031737122:# facet_wrap(~ Population, scales = "free_x") +
1522031737123:facet_grid(~ Population, scales = "free_x", space = "free_x") +
1522031737123:labs(y = "Ancestry Proportion") +
1522031737123:theme(panel.grid.major = element_blank(),
1522031737124:axis.text.x = element_text(size = textSize, angle = 50, hjust = 1),
1522031737124:strip.background = element_blank(),
1522031737125:panel.border = element_blank(),
1522031737125:legend.position = "right",
1522031737125:# strip.text.x = element_text(size = 12)
1522031737126:strip.text.x = element_blank()
1522031737126:))
1522031737588:# (finalPlot <- ggarrange(abundancePLot + rremove("xlab") + rremove("x.axis") + rremove("x.text") + rremove("x.ticks")
1522031737588:(finalPlot <- ggarrange(abundancePLot + rremove("xlab") + rremove("axis") + rremove("x.text") + rremove("x.ticks")
1522031737588:+ theme(plot.margin = unit(c(1,2,1,1), "mm"))
1522031737589:, ancestryPlot + rremove("y.axis")
1522031737589:# + rremove("ylab") + rremove("y.ticks")
1522031737589:# + theme(plot.margin = unit(c(1,5,1,0), "mm"))
1522031737590:# , pGeneral
1522031737590:# + theme(plot.margin = unit(c(1,4,1,1), "mm"))
1522031737590:# + rremove("y.text") + rremove("y.axis") + rremove("ylab") + rremove("y.ticks")
1522031737591:# # ramPlot + theme(plot.margin = unit(c(1,18,1,1), "mm")) + rremove("y.text"),
1522031737591:# , labels = c("A", "", "B")
1522031737591:, ncol = 1, nrow = 2
1522031737592:# , widths = widths
1522031737592:, align = "v"
1522031737592:# , align = "h"
1522031737593:# , common.legend = TRUE
1522031737593:# , legend = c("right")
1522031737593:))
1522031738767:# # ggplot2 -----------------------------------------------------------------
1522031738768:# # Base variables
1522031738768:# width        <- 8
1522031738768:# lineSize     <- 0.5
1522031738769:# baseTextSize <- 14
1522031738769:# height       <- width * 0.618
1522031738769:# axisColor    <- "#333333"
1522031738769:# gridColor    <- "#cccccc"
1522031738770:# textColor    <- "#333333"
1522031738770:#
1522031738770:# # Generate plot 1: Coast
1522031738771:# dGroup <- 1
1522031738771:# dataToPlot <- briefRelAbundance %>% filter(Population == dataGroups[dGroup])
1522031738771:# pGroup1    <- ggplot(dataToPlot, aes(x = Sample, y = Abundance))
1522031738772:# pGroup1    <- pGroup1 + geom_bar(stat = "identity", position = "stack",
1522031738772:#                                  aes(fill = Family)
1522031738772:#                                  # , alpha = 0.95,
1522031738772:#                                  , width = 1
1522031738773:#                                  , color = "#000000"
1522031738773:#                                  , size = 0.2
1522031738773:# )
1522031738774:# pGroup1 <- pGroup1 + scale_fill_manual(values = rev(palette[1:(nTopElements+1)]))
1522031738774:# pGroup1 <- pGroup1 + scale_y_continuous(expand = c(0, 0))
1522031738774:# pGroup1 <- pGroup1 + customTheme
1522031738775:# pGroup1 <- pGroup1 + labs(title = titles[dGroup], y = labels["y"], x = "")
1522031738775:# pGroup1 <- pGroup1 + theme(axis.line.x  = element_blank(),
1522031738775:#                            axis.text.x  = element_text(angle = 50, hjust = 1),
1522031738775:#                            axis.ticks.x = element_blank(),
1522031738776:#                            strip.background = element_blank(),
1522031738776:#                            strip.text.x = element_text(margin = margin(0.2,0,0.8,0, "cm"),
1522031738776:#                                                        size = baseTextSize * 1.025),
1522031738777:#                            panel.spacing    = unit(2, "lines"))
1522031738777:#
1522031738778:# pGroup1
1522031738778:#
1522031738778:# dGroup     <- 2
1522031738779:# dataToPlot <- briefRelAbundance %>% filter(Population == dataGroups[dGroup])
1522031738779:# pGroup2    <- ggplot(dataToPlot, aes(x = Sample, y = Abundance))
1522031738779:# pGroup2    <- pGroup2 + geom_bar(stat = "identity", position = "stack",
1522031738780:#                                  aes(fill = Family)
1522031738780:#                                  # , alpha = 0.95,
1522031738780:#                                  , width = 0.8
1522031738780:#                                  , color = "#000000"
1522031738781:#                                  , size = 0.2
1522031738781:# )
1522031738781:# pGroup2 <- pGroup2 + scale_fill_manual(values = rev(palette[1:(nTopElements+1)]))
1522031738782:# pGroup2 <- pGroup2 + scale_y_continuous(expand = c(0, 0))
1522031738782:# pGroup2 <- pGroup2 + customTheme
1522031738782:# pGroup2 <- pGroup2 + labs(title = titles[dGroup], y = labels["y"])
1522031738783:# pGroup2 <- pGroup2 + theme(axis.line.x  = element_blank(),
1522031738783:#                            axis.text.x  = element_text(angle = 50, hjust = 1),
1522031738783:#                            axis.ticks.x = element_blank(),
1522031738783:#                            strip.background = element_blank(),
1522031738784:#                            strip.text.x = element_text(margin = margin(0.2,0,0.8,0, "cm"),
1522031738784:#                                                        size = baseTextSize * 1.025),
1522031738784:#                            panel.spacing    = unit(2, "lines"))
1522031738785:#
1522031738785:# pGroup2
1522031738785:# # ggsave(abundancePlot1, filename = "fig_02b.abundance_comparison.family.including_tumaco_samples.pdf", width = 10, height = 6)
1522031738785:#
1522031738786:# # Plots for General Profile -----------------------------------------------
1522031738786:# # Get samples of group 1
1522031738786:# samplesGroup1 <- filter(metadata,
1522031738786:#                         Residence == dataGroups[1],
1522031738787:#                         Seq_Origin == "GT1" | Seq_Origin == "GT2") %>%
1522031738787:#   pull(Sample)
1522031738787:# # Get samples of group 2
1522031738788:# samplesGroup2 <- filter(metadata,
1522031738788:#                         Residence == dataGroups[2],
1522031738788:#                         Seq_Origin == "GT1" | Seq_Origin == "GT2") %>%
1522031738789:#   pull(Sample)
1522031738789:#
1522031738789:# # Preparing data to plot general profile for group 1
1522031738789:# (readsGroup1 <- extData %>%
1522031738790:#     group_by(Family) %>%                # group by Family column
1522031738790:#     summarise_at(samplesGroup1, sum) %>%
1522031738790:#     mutate(TotalReads = rowSums(select(., -1))) %>%
1522031738790:#     select(Family, TotalReads))# %>%
1522031738791:#
1522031738791:# # Data corresponding to top families
1522031738791:# (top <- readsGroup1 %>%
1522031738792:#     filter(Family %in% orderedFamilies))
1522031738792:#
1522031738792:# # Group the rest of the families into the family "Others"
1522031738792:# (rest <- readsGroup1 %>%
1522031738793:#     filter(! Family %in% orderedFamilies) %>%
1522031738793:#     summarise(TotalReads = sum(TotalReads)) %>%
1522031738793:#     mutate(Family = c("Others")) %>%
1522031738794:#     select(Family, TotalReads)
1522031738794:# )
1522031738795:#
1522031738795:# (briefRaGroup1 <- rbind.data.frame(top, rest) %>%
1522031738796:#     mutate_if(is.numeric, funs( . / sum(.))) %>%
1522031738796:#     rename(Abundance = TotalReads) %>%
1522031738797:#     mutate(Group = rep(dataGroups[1], nrow(.)))
1522031738797:# )
1522031738798:#
1522031738798:# # Preparing data to plot general profile for group 2
1522031738799:# (raGroup2 <- getRelAbundance(otuTable = extData, groupLevel = Family,
1522031738799:#                              samples = samplesGroup2))
1522031738799:#
1522031738800:# (readsGroup2 <- extData %>%
1522031738800:#     group_by(Family) %>%                # group by Family column
1522031738801:#     summarise_at(samplesGroup2, sum) %>%
1522031738801:#     mutate(TotalReads = rowSums(select(., -1))) %>%
1522031738801:#     select(Family, TotalReads))# %>%
1522031738802:#
1522031738802:# (top <- readsGroup2 %>%
1522031738803:#     filter(Family %in% orderedFamilies))
1522031738803:#
1522031738804:# # Group the rest of the families into the family "Others"
1522031738804:# (rest <- readsGroup2 %>%
1522031738804:#     filter(! Family %in% orderedFamilies) %>%
1522031738805:#     summarise(TotalReads = sum(TotalReads)) %>%
1522031738805:#     mutate(Family = c("Others")) %>%
1522031738806:#     select(Family, TotalReads)
1522031738806:# )
1522031738807:#
1522031738807:# (briefRaGroup2 <- rbind.data.frame(top, rest) %>%
1522031738808:#     mutate_if(is.numeric, funs( . / sum(.))) %>%
1522031738808:#     rename(Abundance = TotalReads) %>%
1522031738808:#     mutate(Group = rep(dataGroups[2], nrow(.)))
1522031738809:# )
1522031738809:#
1522031738810:# briefRaGroup1
1522031738810:# briefRaGroup2
1522031738811:#
1522031738811:# # Merge data from groups 1 and 2
1522031738812:# briefRaTotal <- rbind.data.frame(briefRaGroup1, briefRaGroup2) %>%
1522031738812:#   mutate(Family = factor(Family, levels = rev(orderedFamilies)))
1522031738812:#
1522031738813:# dataToPlot <- briefRaTotal
1522031738813:#
1522031738814:# # Generate plot 1
1522031738814:# pGeneral <- ggplot(dataToPlot, aes(x = Group, y = Abundance))
1522031738814:# pGeneral <- pGeneral + geom_bar(stat = "identity", position = "stack",
1522031738815:#                                 aes(fill = Family)
1522031738815:#                                 # , alpha = 0.95,
1522031738816:#                                 , color = "#000000"
1522031738816:#                                 , size = 0.2
1522031738817:# )
1522031738817:# # pGeneral <- pGeneral + facet_wrap(~ Evolution, scales = "free_x")
1522031738817:# # pGeneral <- pGeneral + facet_wrap(~ Population, scales = "free_x")
1522031738818:# pGeneral <- pGeneral + scale_fill_manual(values = rev(palette[1:(nTopElements+1)]))
1522031738818:# pGeneral <- pGeneral + scale_y_continuous(expand = c(0, 0))
1522031738819:# pGeneral <- pGeneral + customTheme
1522031738819:# pGeneral <- pGeneral + labs(title = titles[3],
1522031738820:#                             x = "Population",
1522031738820:#                             y = labels["y"])
1522031738820:# pGeneral <- pGeneral + theme(axis.line.x  = element_blank(),
1522031738821:#                              axis.text.x = element_text(angle = 50, hjust = 1),
1522031738821:#                              axis.ticks.x = element_blank(),
1522031738821:#                              strip.background = element_blank(),
1522031738821:#                              strip.text.x = element_text(margin = margin(0.2,0,0.8,0, "cm"),
1522031738822:#                                                          size = baseTextSize),
1522031738822:#                              panel.spacing    = unit(2, "lines"))
1522031738822:#
1522031738823:# pGroup1
1522031738823:# pGroup2
1522031738823:# pGeneral
1522031738823:#
1522031738824:# # Multiplot Abundance ---------------------------------------------------------
1522031738824:# if (useOnlyGTSamples) {
1522031738824:#   widths = c(0.28, 1, 0.15)
1522031738825:# } else {
1522031738825:#   widths = c(1, 1, 0.15)
1522031738825:# }
1522031738825:#
1522031738826:# (finalPlot <- ggarrange(pGroup1 + rremove("xlab")
1522031738826:#                         + theme(plot.margin = unit(c(1,2,1,1), "mm"))
1522031738826:#                         , pGroup2 + rremove("y.text") + rremove("y.axis")
1522031738827:#                         + rremove("ylab") + rremove("y.ticks")
1522031738827:#                         + theme(plot.margin = unit(c(1,5,1,0), "mm"))
1522031738827:#                         , pGeneral
1522031738828:#                         + theme(plot.margin = unit(c(1,4,1,1), "mm"))
1522031738828:#                         + rremove("y.text") + rremove("y.axis") + rremove("ylab") + rremove("y.ticks")
1522031738828:#                         # ramPlot + theme(plot.margin = unit(c(1,18,1,1), "mm")) + rremove("y.text"),
1522031738829:#                         , labels = c("A", "", "B")
1522031738829:#                         , ncol = 3, nrow = 1
1522031738829:#                         , widths = widths
1522031738829:#                         , align = "h"
1522031738830:#                         , common.legend = TRUE
1522031738830:#                         , legend = c("bottom")
1522031738830:# ))
1522031738831:# if (useOnlyGTSamples) {
1522031738831:#   ggsave("figures/fig_02a.abundance_family.pdf", finalPlot, width = 11, height = 5)
1522031738831:#   # ggsave("figures/fig_02a.abundance_family.png", finalPlot, width = 11, height = 5)
1522031738832:# } else {
1522031738832:#   ggsave("figures/fig_02a.abundance_family.including_tumaco_samples.pdf", finalPlot, width = 11, height = 5)
1522031738832:#   # ggsave("figures/fig_02a.abundance_family.including_tumaco_samples.png", finalPlot, width = 11, height = 5)
1522031738832:# }
1523317198791:# working with "dplyr
1523317198876:#calculate means
1523317198876:#install.packages("dplyr")
1523317198876:library(dplyr)
1523317199196:#read the file .tsv , i need to use read.delim
1523317199196:#F1 in the fuction to read the help
1523317199196:options(stringsAsFactors = F)
1523317199197:# phenotype_setaria_data <- read.delim(file="projects/thesis/setaria_data_2017/rqtl/setariadata_formean.tsv")
1523317199197:phenotype_setaria_data <- read.delim(file="setariadata_formean.tsv")
1523317204228:class(phenotype_setaria_data)
1523317204904:head(phenotype_setaria_data)
1523317205633:colnames(phenotype_setaria_data)
1523317211914:colnames(phenotype_setaria_data) <- c("id","Germday","DaysToTill","LowLeafTill1","Hgt","LeafNum","TillNum")
1523317213193:colnames(phenotype_setaria_data)
1523317214049:head(phenotype_setaria_data)
1523317215729:hgt_mean = phenotype_setaria_data %>%
1523317215729:group_by(id) %>%
1523317215730:summarise(mean(Hgt, na.rm = TRUE))
1523317216030:hgt_mean
1523317218581:colnames(hgt_mean) <- c("id","Hgt.mean")
1523317220732:head(hgt_mean)
1523317221732:genotype_setaria_data <- read.delim(file="projects/thesis/setaria_data_2017/rqtl/GBS_map_A10xB100_v0.96_GitHub_Pipeline_edited1.tsv")
1523317681842:# genotype_setaria_data <- read.delim(file="projects/thesis/setaria_data_2017/rqtl/GBS_map_A10xB100_v0.96_GitHub_Pipeline_edited1.tsv")
1523317681842:genotype_setaria_data <- read.delim(file="GBS_map_A10xB100_v0.96_GitHub_Pipeline_edited1.tsv")
1523317683682:head(colnames(genotype_setaria_data))
1523317684100:length(colnames(genotype_setaria_data))
1523317684629:head(colnames(hgt_mean))
1523317685571:length(genotype_setaria_data$id)
1523317686191:length(hgt_mean$id)
1523317687302:# all = FALSE: une los datos comunes en ambas tablas (intersección)
1523317687302:geno_by_pheno_setaria_data <- merge(x = hgt_mean, y = genotype_setaria_data,
1523317687303:sort = F, all = F)
1523317689104:colnames(geno_by_pheno_setaria_data)
1523317691080:geno_by_pheno_setaria_data$id
1523317692164:rownames(phenotype_setaria_data)
1523317693069:head(phenotype_setaria_data)
1523317693913:phenotype_setaria_data$id
1523317694706:geno_by_pheno_setaria_data$id
1523317695310:length(geno_by_pheno_setaria_data$id)
1523317696058:colnames(phenotype_setaria_data)
1523317697794:germday_mean = phenotype_setaria_data %>%
1523317697794:group_by(id) %>%
1523317697795:summarise(mean(Germday, na.rm = TRUE))
1523317702299:germday_mean
1523317711500:colnames(germday_mean) <- c("id","Germday.mean")
1523317712925:head(germday_mean)
1523317714277:# all = FALSE: une los datos comunes en ambas tablas (intersección)
1523317714278:geno_by_pheno_setaria_data <- merge(x = germday_mean, y = geno_by_pheno_setaria_data,
1523317714278:sort = F, all = F)
1523317717622:head(colnames(geno_by_pheno_setaria_data))
1523317718626:head(geno_by_pheno_setaria_data [1:10, 1:5])
1523317719408:daystotill_mean = phenotype_setaria_data %>%
1523317719409:group_by(id) %>%
1523317719409:summarise(mean(DaysToTill, na.rm = TRUE))
1523317720117:daystotill_mean
1523317720926:colnames(daystotill_mean) <- c("id","DaysToTill.mean")
1523317721716:head(daystotill_mean)
1523317722670:# all = FALSE: une los datos comunes en ambas tablas (intersección)
1523317722671:geno_by_pheno_setaria_data <- merge(x = daystotill_mean, y = geno_by_pheno_setaria_data,
1523317722671:sort = F, all = F)
1523317724342:head(colnames(geno_by_pheno_setaria_data))
1523317728594:head(geno_by_pheno_setaria_data [1:10, 1:5])
1523317731366:leafnum_mean = phenotype_setaria_data %>%
1523317731366:group_by(id) %>%
1523317731367:summarise(mean(LeafNum, na.rm = TRUE))
1523317732295:leafnum_mean
1523317732952:colnames(leafnum_mean) <- c("id","LeafNum.mean")
1523317733637:head(leafnum_mean)
1523317734305:# all = FALSE: une los datos comunes en ambas tablas (intersección)
1523317734305:geno_by_pheno_setaria_data <- merge(x = leafnum_mean, y = geno_by_pheno_setaria_data,
1523317734306:sort = F, all = F)
1523317754842:head(colnames(geno_by_pheno_setaria_data))
1523317756178:head(geno_by_pheno_setaria_data [1:10, 1:5])
1523317756799:tillnum_mean = phenotype_setaria_data %>%
1523317756800:group_by(id) %>%
1523317756800:summarise(mean(TillNum, na.rm = TRUE))
1523317757316:tillnum_mean
1523317757778:colnames(tillnum_mean) <- c("id","TillNum.mean")
1523317758249:head(tillnum_mean)
1523317759264:# all = FALSE: une los datos comunes en ambas tablas (intersección)
1523317759264:geno_by_pheno_setaria_data <- merge(x = tillnum_mean, y = geno_by_pheno_setaria_data,
1523317759265:sort = F, all = F)
1523317759844:head(colnames(geno_by_pheno_setaria_data))
1523317760330:head(geno_by_pheno_setaria_data [1:10, 1:7])
1523317760805:length(geno_by_pheno_setaria_data$id)
1523317761226:class(geno_by_pheno_setaria_data)
1523317761778:length(geno_by_pheno_setaria_data)
1523317764593:#I should get 1601.. 1595 columns from the markers and the id, and the means for
1523317764594:#till num, leaf num, days to till, germday, hgt
1523317764594:setaria_data_for_qtl <- geno_by_pheno_setaria_data[,c(2:6,1,7:1028)]
1523317766855:setaria_data_for_qtl
1523317767420:head(setaria_data_for_qtl[1:10,1:10])
1523317769476:class(setaria_data_for_qtl)
1523317770295:coordinates <- genotype_setaria_data[1:2,]
1523317771032:head(coordinates[,1:5])
1523317772108:class(setaria_data_for_qtl$id)
1523317775003:for (i in 1:5) {
1523317775004:newCol <- c(NA, NA)
1523317775004:coordinates <- data.frame(newCol, coordinates)
1523317775005:}
1523317786908:colnames(coordinates) <- colnames(setaria_data_for_qtl)
1523317787874:head(coordinates[,1:10])
1523317795630:setaria_data_for_qtl <- rbind.data.frame(coordinates, setaria_data_for_qtl)
1523317808070:colnames(coordinates) <- colnames(setaria_data_for_qtl)
1523317808607:head(coordinates[,1:10])
1523317815002:coordinates
1523317833243:ncol(coordinates)
1523317848537:ncol(setaria_data_for_qtl)
1523317931067:genotype_setaria_data
1523317934862:genotype_setaria_data[1:2,]
1523317949495:head(coordinates[,1:5])
1523317963418:class(setaria_data_for_qtl$id)
1523317984697:for (i in 1:5) {
1523317984698:newCol <- c(NA, NA)
1523317984699:coordinates <- data.frame(newCol, coordinates)
1523317984700:}
1523317991886:ncol(coordinates)
1523317996996:ncol(setaria_data_for_qtl)
1523318006419:head(setaria_data_for_qtl[,1:10])
1523318059779:coordinates <- genotype_setaria_data[1:2,]
1523318062138:head(coordinates[,1:5])
1523318082461:class(setaria_data_for_qtl$id)
1523318084264:for (i in 1:5) {
1523318084264:newCol <- c(NA, NA)
1523318084265:coordinates <- data.frame(newCol, coordinates)
1523318084265:}
1523318087393:coordinates
1523318093363:head(coordinates[,1:5])
1523318124069:coordinates <- genotype_setaria_data[1:2,]
1523318125025:head(coordinates[,1:5])
1523318127030:class(setaria_data_for_qtl$id)
1523318127917:for (i in 1:5) {
1523318127918:newCol <- c(NA, NA)
1523318127918:coordinates <- data.frame(newCol, coordinates)
1523318127919:}
1523318131281:head(coordinates[,1:5])
1523318137573:head(coordinates[,1:10])
1523318149806:colnames(setaria_data_for_qtl)
1523318159154:ncol(coordinates)
1523318162290:ncol(setaria_data_for_qtl)
1523318228995:summary(geno_by_pheno_setaria_data)
1523318254914:nrow(geno_by_pheno_setaria_data)
1523318257961:ncol(geno_by_pheno_setaria_data)
1523318281576:#I should get 1601.. 1595 columns from the markers and the id, and the means for
1523318281577:#till num, leaf num, days to till, germday, hgt
1523318281578:setaria_data_for_qtl <- geno_by_pheno_setaria_data[,c(2:6,1,7:1028)]
1523318284720:setaria_data_for_qtl
1523318288024:ncol(geno_by_pheno_setaria_data)
1523318289038:nrow(geno_by_pheno_setaria_data)
1523318299971:ncol(coordinates)
1523318301392:ncol(setaria_data_for_qtl)
1523318319661:ncol(setaria_data_for_qtl)
1523318332717:length(geno_by_pheno_setaria_data)
1523318376880:ncol(geno_by_pheno_setaria_data[,c(2:6,1,7:1028)])
1523318411584:setaria_data_for_qtl <- geno_by_pheno_setaria_data[,c(2:6,1,7:ncol(geno_by_pheno_setaria_data))]
1523318414105:ncol(geno_by_pheno_setaria_data)
1523318415828:ol(geno_by_pheno_setaria_data))]
1523318415829:ncol(geno_by_pheno_setaria_data)
1523318420129:ncol(geno_by_pheno_setaria_data)
1523318420778:ncol(setaria_data_for_qtl)
1523318423274:setaria_data_for_qtl <- geno_by_pheno_setaria_data[,c(2:6,1,7:ncol(geno_by_pheno_setaria_data))]
1523318423933:ncol(geno_by_pheno_setaria_data)
1523318424637:ncol(setaria_data_for_qtl)
1523318440663:class(setaria_data_for_qtl)
1523318443758:coordinates <- genotype_setaria_data[1:2,]
1523318444438:head(coordinates[,1:5])
1523318445136:head(coordinates[,1:10])
1523318446766:class(setaria_data_for_qtl$id)
1523318447512:for (i in 1:5) {
1523318447512:newCol <- c(NA, NA)
1523318447513:coordinates <- data.frame(newCol, coordinates)
1523318447513:}
1523318448609:colnames(coordinates) <- colnames(setaria_data_for_qtl)
1523318449419:head(coordinates[,1:10])
1523318449940:head(setaria_data_for_qtl[,1:10])
1523318451446:ncol(coordinates)
1523318451954:ncol(setaria_data_for_qtl)
1523318452618:setaria_data_for_qtl <- rbind.data.frame(coordinates, setaria_data_for_qtl)
1523318454070:head(setaria_data_for_qtl[,1:10])
1523318476077:write.csv(x = setaria_data_for_qtl, row.names = F, na = "",
1523318476078:file = "setaria_data_2017/rqtl/final_setaria_data.csv")
1523318485527:write.csv(x = setaria_data_for_qtl, row.names = F, na = "",
1523318485528:file = "final_setaria_data.csv")
1523318503598:#clean up R workspace
1523318503598:rm(list=ls())
1523318504487:ls()
1523318505290:library(qtl)
1523318544438:install.packages("qtl")
1523318608619:# install.packages("qtl")
1523318608620:library(qtl)
1523318609498:setaria <- read.cross("csv", file="final_setaria_data.csv",
1523318609521:genotypes = c ("AA", "AB", "BB"), na.strings = "-", alleles = c("A","B"))
1523318627842:setaria <- read.cross("csv", file="final_setaria_data.csv",
1523318627842:genotypes = c ("AA", "AB", "BB"), na.strings = "-", alleles = c("A","B"))
1523318665653:jittermap(setaria)
1523318674013:names(setaria$pheno)
1523318674556:names(setaria)
1523318675098:nind(setaria)
1523318675707:plot(setaria, pheno.col = c(1))
1523318683113:#clean up R workspace
1523318683114:rm(list=ls())
1523318690045:# install.packages("qtl")
1523318690046:library(qtl)
1523318690047:# getwd()
1523318690048:# setwd("/home/yisel/projects/thesis/setaria_data_2017/rqtl")
1523318690049:# test <-  read.csv(file="setaria_data_2017/rqtl/final_setaria_data.csv")
1523318690050:# head(test[,1:10])
1523318690051:setaria <- read.cross("csv", file="final_setaria_data.csv",
1523318690052:genotypes = c ("AA", "AB", "BB"), na.strings = "-", alleles = c("A","B"))
1523318690720:# I got this
1523318690721:# --Read the following data:
1523318690721:# 182  individuals
1523318690721:# 1022  markers
1523318690722:# 6  phenotypes
1523318690722:# --Cross type: f2
1523318690722:# Warning messages:
1523318690723:# 1: In summary.cross(cross) :
1523318690723:# Some markers at the same position on chr 2,3,5; use jittermap().
1523318690723:# 2: In summary.cross(cross) : Strange genotype pattern.
1523318690724:jittermap(setaria)
1523318691142:names(setaria$pheno)
1523318691143:names(setaria)
1523318691144:nind(setaria)
1523318691145:#do a plot to see the tiller number
1523318691146:plot(setaria, pheno.col = c(1))
1523318725353:jittermap(setaria)
1523318725781:names(setaria$pheno)
1523318725968:names(setaria)
1523318726300:nind(setaria)
1523318726726:#do a plot to see the tiller number
1523318726727:par(mar=c(1,1,1,1))
1523318727274:plot(setaria, pheno.col = c(1))
1523318741026:newmap <- est.map(setaria)
1523318831974:newmap <- est.map(setaria)
1523318847713:dev.off()
1523318853719:newmap <- est.map(setaria)
1523319015204:plot.map(setaria,newmap)
1523321689050:names(setaria$pheno)
1523321690147:setaria.scan5 <- scanone(setaria, pheno.col=5, model="normal", method="em")
1523321692519:setaria.scan5.perm <- scanone(setaria, pheno.col=5, model="normal", method="em", n.perm=100)
1523321956494:plot(setaria.scan5, main="Mainscan plot of Height")
1523321956517:thresh5 <- summary(setaria.scan5.perm, alpha=c(0.63, 0.10, 0.05))
1523321956518:abline(h=thresh5[1], lty="dotted", lwd=1, col="red")
1523322844727:jittermap(setaria)
1523322864413:names(setaria$pheno)
1523322864543:names(setaria)
1523322865694:nind(setaria)
1523322871323:#do a plot to see the tiller number
1523322871323:par(mar=c(1,1,1,1))
1523322929548:setaria <- calc.errorlod(setaria, error.prob=0.01)
1523323087440:setaria <- est.rf(setaria)
1523323227998:setaria <- calc.errorlod(setaria, error.prob=0.01)
1523325062293:#______
1523325062337:#R script for qtl analysis, setaria data
1523325062338:#Yisel Carrillo Tarazona January2018
1523325062338:#____________
1523325062339:#clean up R workspace
1523325062339:rm(list=ls())
1523325062340:# install.packages("qtl")
1523325062340:library(qtl)
1523325062385:# getwd()
1523325062385:# setwd("/home/yisel/projects/thesis/setaria_data_2017/rqtl")
1523325062386:# test <-  read.csv(file="setaria_data_2017/rqtl/final_setaria_data.csv")
1523325062387:# head(test[,1:10])
1523325062387:setaria <- read.cross("csv", file="final_setaria_data.csv",
1523325062388:genotypes = c ("AA", "AB", "BB"), na.strings = "-", alleles = c("A","B"))
1523325063141:# I got this
1523325063141:# --Read the following data:
1523325063141:# 182  individuals
1523325063141:# 1022  markers
1523325063142:# 6  phenotypes
1523325063142:# --Cross type: f2
1523325063142:# Warning messages:
1523325063143:# 1: In summary.cross(cross) :
1523325063143:# Some markers at the same position on chr 2,3,5; use jittermap().
1523325063143:# 2: In summary.cross(cross) : Strange genotype pattern.
1523325063144:jittermap(setaria)
1523325063480:names(setaria$pheno)
1523325063481:names(setaria)
1523325063481:nind(setaria)
1523325063482:#do a plot to see the tiller number
1523325063482:par(mar=c(1,1,1,1))
1523325063506:# plot(setaria, pheno.col = c(1))
1523325063507:# dev.off()
1523325063507:# create a stimated map
1523325063508:newmap <- est.map(setaria)
1523325230389:# plot.map(setaria,newmap)
1523325230390:# dev.off()
1523325230390:# recombination fraction plot. create a estimated one
1523325230391:setaria <- est.rf(setaria)
1523325333104:# plot.rf(setaria)
1523325333105:# dev.off()
1523325333105:setaria <- calc.errorlod(setaria, error.prob=0.01)
1523328261048:save(setaria, file = "setaria.errorlod.R")
1523328268259:setaria <- calc.genoprob(setaria, step=2.0, off.end=0.0, error.prob=1.0e-4,
1523328268259:map.function="haldane", stepwidth="fixed")
1523328274256:setaria <- sim.geno(setaria, n.draws=32, step=2.0, off.end=0.0, error.prob=1.0e-4,
1523328274257:map.function="haldane", stepwidth="fixed")
1523328292240:names(setaria$pheno)
1523328295218:setaria.scan1 <- scanone(setaria, pheno.col=1, model="normal", method="em")
1523328304121:setaria.scan1.perm <- scanone(setaria, pheno.col=1, model="normal", method="em", n.perm=100)
1523328430551:save(setaria, file = "01.setaria.errorlod.R")
1523328455512:save(setaria, file = "02.setaria.scan1.perm.R")
1523328565285:png(filename = "num_till.png", width = 600, height = 500)
1523328566297:plot(setaria.scan1, main="Mainscan plot of NumTill")
1523328567636:dev.off()
1523328590147:png(filename = "num_till.png", width = 800, height = 600)
1523328590618:plot(setaria.scan1, main="Mainscan plot of NumTill")
1523328591095:dev.off()
1523328617701:thresh1 <- summary(setaria.scan1.perm, alpha=c(0.63, 0.10, 0.05))
1523328620394:abline(h=thresh1[1], lty="dotted", lwd=1, col="red")
1523328631079:png(filename = "num_till.png", width = 800, height = 600)
1523328631596:plot(setaria.scan1, main="Mainscan plot of NumTill")
1523328632305:thresh1 <- summary(setaria.scan1.perm, alpha=c(0.63, 0.10, 0.05))
1523328632907:abline(h=thresh1[1], lty="dotted", lwd=1, col="red")
1523328633453:dev.off()
1523328651418:names(setaria$pheno)
1523328654340:setaria.scan2 <- scanone(setaria, pheno.col=2, model="normal", method="em")
1523328657154:setaria.scan2.perm <- scanone(setaria, pheno.col=2, model="normal", method="em", n.perm=100)
1523328759943:png(filename = "num_leaves.png", width = 800, height = 600)
1523328759944:plot(setaria.scan2, main="Mainscan plot of Leaves#")
1523328759975:thresh2 <- summary(setaria.scan2.perm, alpha=c(0.63, 0.10, 0.05))
1523328759976:abline(h=thresh2[1], lty="dotted", lwd=2, col="red")
1523328759977:dev.off()
1523328789548:names(setaria$pheno)
1523328791780:setaria.scan3 <- scanone(setaria, pheno.col=3, model="normal", method="em")
1523328793061:setaria.scan3.perm <- scanone(setaria, pheno.col=3, model="normal", method="em", n.perm=100)
1523328993380:png(filename = "days_to_till.png", width = 800, height = 600)
1523328994946:plot(setaria.scan3, main="Mainscan plot of Days to Till")
1523328996416:thresh3 <- summary(setaria.scan3.perm, alpha=c(0.63, 0.10, 0.05))
1523329004973:setaria.scan3.perm <- scanone(setaria, pheno.col=3, model="normal", method="em", n.perm=100)
1523329103377:dev.off()
1523329109539:png(filename = "germ_days.png", width = 800, height = 600)
1523329110097:plot(setaria.scan4, main="Mainscan plot of days for germination")
1523329119406:setaria.scan4 <- scanone(setaria, pheno.col=4, model="normal", method="em")
1523329136762:png(filename = "germ_days.png", width = 800, height = 600)
1523329137582:plot(setaria.scan4, main="Mainscan plot of days for germination")
1523329139030:thresh4 <- summary(setaria.scan4.perm, alpha=c(0.63, 0.10, 0.05))
1523329143506:setaria.scan4.perm <- scanone(setaria, pheno.col=4, model="normal", method="em", n.perm=100)
1523329257211:png(filename = "germ_days.png", width = 800, height = 600)
1523329258795:plot(setaria.scan4, main="Mainscan plot of days for germination")
1523329260407:thresh4 <- summary(setaria.scan4.perm, alpha=c(0.63, 0.10, 0.05))
1523329261207:abline(h=thresh4[1], lty="dotted", lwd=1, col="blue")
1523329262197:dev.off()
1523329306475:names(setaria$pheno)
1523329308074:setaria.scan5 <- scanone(setaria, pheno.col=5, model="normal", method="em")
1523329311342:setaria.scan5.perm <- scanone(setaria, pheno.col=5, model="normal", method="em", n.perm=100)
1523329442809:png(filename = "height.png", width = 800, height = 600)
1523329443839:plot(setaria.scan5, main="Mainscan plot of Height")
1523329445197:thresh5 <- summary(setaria.scan5.perm, alpha=c(0.63, 0.10, 0.05))
1523329445748:abline(h=thresh5[1], lty="dotted", lwd=1, col="red")
1523329446175:dev.off()
1523405854099:# STing vs other sequence typing software
1523405854129:# Install an load packages ------------------------------------------------
1523405854129:installAndLoadPackages <- function(pkg){
1523405854130:cat("Please wait a moment! Checking for required packages... ")
1523405854130:cat("Done!\n")
1523405854130:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1523405854131:if (length(new.pkg)) {
1523405854131:cat("Installing new packages... ")
1523405854132:install.packages(new.pkg, dependencies = TRUE,
1523405854133:repos="http://cran.rstudio.com/")
1523405854133:cat("Done!\n")
1523405854134:}
1523405854134:cat("Loading packages... \n")
1523405854134:sapply(pkg, require, character.only = TRUE)
1523405854135:cat("Done!\n")
1523405854135:}
1523405854136:requiredPackages <- c("dplyr", "readr", "ggpubr", "RColorBrewer", "gridExtra",
1523405854137:"extrafont")
1523405854137:installAndLoadPackages(requiredPackages)
1523405862545:# Sources -----------------------------------------------------------------
1523405862546:# Loading Data ------------------------------------------------------------
1523405862546:inFile   <- "data/typer/stringMLST-comparisons.tsv"
1523405862546:compData <- read_tsv(inFile)
1523405862783:# General configuration ---------------------------------------------------
1523405862783:customPalette <- c("#0a4f75","#91bbe4","#d7e4f5")
1523405862784:customPalette <- rev(brewer.pal(n = 7, name = "Paired"))
1523405862800:customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#c81837"))
1523405862801:customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#33A02C"))
1523405862802:customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "gray50"))
1523405862802:customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#86827F"))
1523405862803:customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#e8702a", "#edc374", "#faebd7", "#86827F"))
1523405862803:width     <- 9
1523405862804:height    <- width * 0.618
1523405862805:lineSize  <- 0.3
1523405862805:axisColor <- "#666666"
1523405862806:gridColor <- "#cccccc"
1523405862806:baseTextSize <- 22
1523405862807:barAnnotTextSize <- 4
1523405862808:# baseFontFamily <- "Helvetica"
1523405862808:baseFontFamily <- 'Arial'
1523405862808:baseFontFamily <- 'HelveticaNeueLT Com 45 Lt'
1523405862809:baseFontFamily <- 'HelveticaNeueLT Std Lt'
1523405862810:customTheme <- list(
1523405862810:# theme_Publication_2(),
1523405862811:# guides(fill = guide_legend(title.position = "left"#,
1523405862811:#                           # label.vjust = -0.8
1523405862811:#       )),
1523405862812:# panel.grid = element_blank(),
1523405862812:# panel.border = element_blank()#,
1523405862812:# scale_y_continuous(expand = c(0, 0)),
1523405862813:theme(
1523405862813:axis.line            = element_line(colour = axisColor, size = lineSize),
1523405862813:axis.line.y          = element_blank(),
1523405862814:# axis.text            = element_text(size = baseTextSize * 0.875),#,
1523405862815:axis.text            = element_text(size = baseTextSize * 0.875,
1523405862815:family = baseFontFamily, color = "black"),
1523405862815:# axis.ticks           = element_line(size = lineSize),
1523405862816:axis.ticks.y         = element_blank(),
1523405862816:axis.title           = element_text(size = baseTextSize),#,
1523405862816:# axis.title           = element_text(size = baseTextSize,
1523405862817:# family = baseFontFamily),
1523405862817:axis.title.y         = element_blank(),
1523405862818:# axis.title.x        = element_blank(),
1523405862818:legend.direction     = "horizontal",
1523405862818:legend.justification = c(0.5, 0.5),
1523405862819:legend.key.height    = unit(5, "mm"),
1523405862819:legend.key.width     = unit(8, "mm"),
1523405862819:legend.position      = "bottom",
1523405862820:legend.title         = element_blank(),
1523405862820:panel.background     = element_blank(),
1523405862821:panel.grid.major     = element_line(colour = gridColor, size = lineSize),
1523405862821:panel.grid.major.y   = element_blank(),
1523405862822:plot.margin          = unit(c(0.2,1.8,0.2,0.2),"cm"),
1523405862822:# text                 = element_text(size = baseTextSize)#,
1523405862823:text                 = element_text(size = baseTextSize,
1523405862823:family = baseFontFamily)
1523405862824:),
1523405862824:coord_flip()
1523405862825:)
1523405862830:toolNameLevels <- compData$Tool_Name[c(6,4,5,7,3,2,1)]
1523405862831:# Preparing data ----------------------------------------------------------
1523405862832:dataToPlot <- compData %>%
1523405862832:arrange(Alleles) %>%
1523405862832:mutate(Tool_Name = factor(Tool_Name, toolNameLevels))
1523405862885:# Predictions plot ----------------------------------------------------------
1523405862886:ggbarplot(dataToPlot, x = "Tool_Name", y = "Alleles",
1523405862886:fill = "Tool_Name",
1523405862887:# color = "white",            # Set bar border colors to white
1523405862887:palette = customPalette,
1523405862887:rotate = T
1523405862888:# position = position_dodge(width=0.8)
1523405862888:# sort.val = "desc",          # Sort the value in dscending order
1523405862889:# sort.by.groups = FALSE,     # Don't sort inside each group
1523405862889:# x.text.angle = 90           # Rotate vertically x axis texts
1523405862889:) +
1523405862890:scale_y_continuous(expand = c(0, 0), position = "top") +
1523405862890:theme(axis.ticks.y = element_blank(),
1523405862891:axis.line.y = element_blank(),
1523405862891:# panel.grid.major     = element_line(colour = gridColor, size = lineSize),
1523405862891:panel.grid.major.x   = element_line(colour = gridColor, size = lineSize),
1523405862892:plot.margin = margin(8, 8, 8, 8, "mm"),
1523405862892:axis.text.y = element_text(margin=margin(1,1,1,1,"mm"))) +
1523405862893:labs(x = "Typing Tool",
1523405862893:y = "Correct Alleles (%)\n")
1523405954620:timeMarks <- c(30, 60)
1523405954621:ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523405954621:geom_hline(yintercept = timeMarks, size = 0.2, color = gridColor) +
1523405954622:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523405954622:stat = "identity", position = position_dodge(width=0.9)) +
1523405954623:# scale_y_continuous(expand = c(0, 0), position = "top") +
1523405954623:scale_y_log10(expand = c(0, 0), position = "top") +
1523405954623:scale_fill_manual(values = customPalette) +
1523405954624:theme_pubr() +
1523405954624:theme(axis.ticks.y = element_blank(),
1523405954625:axis.line.y = element_blank(),
1523405954625:# panel.grid.major     = element_line(colour = gridColor, size = lineSize),
1523405954626:panel.grid.major.x   = element_line(colour = gridColor, size = lineSize),
1523405954626:plot.margin = margin(8, 8, 8, 8, "mm"),
1523405954627:axis.text.y = element_text(margin=margin(1,1,1,1,"mm"))) +
1523405954627:labs(x = "Typing Tool",
1523405954628:y = "Run Time (s)\n") +
1523405954628:coord_flip()
1523406472600:15*60
1523406476232:timeMarks <- c(30, 60, 15*60)
1523406476738:ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523406476739:geom_hline(yintercept = timeMarks, size = 0.2, color = gridColor) +
1523406476739:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523406476740:stat = "identity", position = position_dodge(width=0.9)) +
1523406476740:# scale_y_continuous(expand = c(0, 0), position = "top") +
1523406476741:scale_y_log10(expand = c(0, 0), position = "top") +
1523406476742:scale_fill_manual(values = customPalette) +
1523406476742:theme_pubr() +
1523406476743:theme(axis.ticks.y = element_blank(),
1523406476744:axis.line.y = element_blank(),
1523406476744:# panel.grid.major     = element_line(colour = gridColor, size = lineSize),
1523406476745:panel.grid.major.x   = element_line(colour = gridColor, size = lineSize),
1523406476746:plot.margin = margin(8, 8, 8, 8, "mm"),
1523406476746:axis.text.y = element_text(margin=margin(1,1,1,1,"mm"))) +
1523406476748:labs(x = "Typing Tool",
1523406476750:y = "Run Time (s)\n") +
1523406476751:coord_flip()
1523406486180:timeMarks <- c(30, 60, 20*60)
1523406487001:ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523406487002:geom_hline(yintercept = timeMarks, size = 0.2, color = gridColor) +
1523406487003:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523406487003:stat = "identity", position = position_dodge(width=0.9)) +
1523406487004:# scale_y_continuous(expand = c(0, 0), position = "top") +
1523406487005:scale_y_log10(expand = c(0, 0), position = "top") +
1523406487005:scale_fill_manual(values = customPalette) +
1523406487006:theme_pubr() +
1523406487007:theme(axis.ticks.y = element_blank(),
1523406487008:axis.line.y = element_blank(),
1523406487008:# panel.grid.major     = element_line(colour = gridColor, size = lineSize),
1523406487009:panel.grid.major.x   = element_line(colour = gridColor, size = lineSize),
1523406487010:plot.margin = margin(8, 8, 8, 8, "mm"),
1523406487010:axis.text.y = element_text(margin=margin(1,1,1,1,"mm"))) +
1523406487011:labs(x = "Typing Tool",
1523406487012:y = "Run Time (s)\n") +
1523406487014:coord_flip()
1523406494890:timeMarks <- c(30, 60, 25*60)
1523406496591:ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523406496592:geom_hline(yintercept = timeMarks, size = 0.2, color = gridColor) +
1523406496592:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523406496593:stat = "identity", position = position_dodge(width=0.9)) +
1523406496594:# scale_y_continuous(expand = c(0, 0), position = "top") +
1523406496594:scale_y_log10(expand = c(0, 0), position = "top") +
1523406496595:scale_fill_manual(values = customPalette) +
1523406496595:theme_pubr() +
1523406496596:theme(axis.ticks.y = element_blank(),
1523406496596:axis.line.y = element_blank(),
1523406496597:# panel.grid.major     = element_line(colour = gridColor, size = lineSize),
1523406496597:panel.grid.major.x   = element_line(colour = gridColor, size = lineSize),
1523406496598:plot.margin = margin(8, 8, 8, 8, "mm"),
1523406496599:axis.text.y = element_text(margin=margin(1,1,1,1,"mm"))) +
1523406496599:labs(x = "Typing Tool",
1523406496600:y = "Run Time (s)\n") +
1523406496601:coord_flip()
1523406511270:timeMarks <- c(30, 60, 15*60, 25*60)
1523406511663:ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523406511664:geom_hline(yintercept = timeMarks, size = 0.2, color = gridColor) +
1523406511664:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523406511665:stat = "identity", position = position_dodge(width=0.9)) +
1523406511665:# scale_y_continuous(expand = c(0, 0), position = "top") +
1523406511665:scale_y_log10(expand = c(0, 0), position = "top") +
1523406511666:scale_fill_manual(values = customPalette) +
1523406511666:theme_pubr() +
1523406511667:theme(axis.ticks.y = element_blank(),
1523406511667:axis.line.y = element_blank(),
1523406511668:# panel.grid.major     = element_line(colour = gridColor, size = lineSize),
1523406511668:panel.grid.major.x   = element_line(colour = gridColor, size = lineSize),
1523406511669:plot.margin = margin(8, 8, 8, 8, "mm"),
1523406511669:axis.text.y = element_text(margin=margin(1,1,1,1,"mm"))) +
1523406511670:labs(x = "Typing Tool",
1523406511670:y = "Run Time (s)\n") +
1523406511671:coord_flip()
1523406539777:ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523406539777:geom_hline(yintercept = timeMarks, size = 0.2, color = gridColor) +
1523406539778:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523406539779:stat = "identity", position = position_dodge(width=0.9)) +
1523406539779:# scale_y_continuous(expand = c(0, 0), position = "top") +
1523406539780:scale_y_log10(expand = c(0, 0), position = "top") +
1523406539781:scale_fill_manual(values = customPalette) +
1523406539782:theme_pubr() +
1523406539782:theme(axis.ticks.y = element_blank(),
1523406539783:axis.line.y = element_blank(),
1523406539783:# panel.grid.major     = element_line(colour = gridColor, size = lineSize),
1523406539784:panel.grid.major.x   = element_line(colour = gridColor, size = lineSize),
1523406539784:plot.margin = margin(8, 8, 8, 8, "mm"),
1523406539784:axis.text.y = element_text(margin=margin(1,1,1,1,"mm"))) +
1523406539785:labs(x = "Typing Tool",
1523406539785:y = "Run Time (s)\n") #+
1523406605765:library(grid)
1523406606812:df=data.frame(y=c("cat1","cat2","cat3"),x=c(12,10,14),n=c(5,15,20))
1523406607391:p <- ggplot(df, aes(x,y)) + geom_point() +            # Base plot
1523406607392:theme(plot.margin = unit(c(1,3,1,1), "lines"))   # Make room for the grob
1523406608054:for (i in 1:length(df$n))  {
1523406608055:p <- p + annotation_custom(
1523406608056:grob = textGrob(label = df$n[i], hjust = 0, gp = gpar(cex = 1.5)),
1523406608056:ymin = df$y[i],      # Vertical position of the textGrob
1523406608057:ymax = df$y[i],
1523406608057:xmin = 14.3,         # Note: The grobs are positioned outside the plot area
1523406608058:xmax = 14.3)
1523406608059:}
1523406608895:# Code to override clipping
1523406608896:gt <- ggplot_gtable(ggplot_build(p))
1523406609534:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523406610118:grid.draw(gt)
1523406761807:publicationTheme <- list(
1523406761808:theme_pubr() +
1523406761809:theme(axis.ticks.y = element_blank(),
1523406761809:axis.line.y = element_blank(),
1523406761810:panel.grid.major.x   = element_line(colour = gridColor, size = lineSize),
1523406761810:plot.margin = margin(8, 8, 8, 8, "mm"),
1523406761811:axis.text.y = element_text(margin=margin(1,1,1,1,"mm")))
1523406761811:)
1523406772962:timeMarks <- c(30, 60, 15*60, 25*60)
1523406773581:ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523406773582:geom_hline(yintercept = timeMarks, size = 0.2, color = gridColor) +
1523406773583:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523406773583:stat = "identity", position = position_dodge(width=0.9)) +
1523406773584:scale_y_log10(expand = c(0, 0), position = "top") +
1523406773584:scale_fill_manual(values = customPalette) +
1523406773585:publicationTheme +
1523406773585:labs(x = "Typing Tool",
1523406773586:y = "Run Time (s)\n") #+
1523406780242:ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523406780243:geom_hline(yintercept = timeMarks, size = 0.2, color = gridColor) +
1523406780244:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523406780244:stat = "identity", position = position_dodge(width=0.9)) +
1523406780245:scale_y_log10(expand = c(0, 0), position = "top") +
1523406780245:scale_fill_manual(values = customPalette) +
1523406780245:publicationTheme +
1523406780246:labs(x = "Typing Tool",
1523406780246:y = "Run Time (s)\n") +
1523406780246:coord_flip()
1523406843995:aGrob <- textGrob(label = "30s", hjust = 0, gp = gpar(cex = 1.5))
1523406931979:ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523406931980:geom_hline(yintercept = timeMarks, size = 0.2, color = gridColor) +
1523406931980:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523406931981:stat = "identity", position = position_dodge(width=0.9)) +
1523406931981:scale_y_log10(expand = c(0, 0), position = "top") +
1523406931981:scale_fill_manual(values = customPalette) +
1523406931982:publicationTheme +
1523406931982:labs(x = "Typing Tool",
1523406931983:y = "Run Time (s)\n") +
1523406931983:coord_flip() +
1523406931983:annotation_custom(grob = aGrob, xmin = 8, xmax = 8, ymin = 30, ymax = 30)
1523406992138:aGrob    <- textGrob(label = "30s", hjust = 0, gp = gpar(cex = 1.5))
1523406995427:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523406995428:geom_hline(yintercept = timeMarks, size = 0.2, color = gridColor) +
1523406995428:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523406995429:stat = "identity", position = position_dodge(width=0.9)) +
1523406995429:scale_y_log10(expand = c(0, 0), position = "top") +
1523406995430:scale_fill_manual(values = customPalette) +
1523406995430:publicationTheme +
1523406995431:labs(x = "Typing Tool",
1523406995431:y = "Run Time (s)\n") +
1523406995431:coord_flip()
1523406996630:aGrob    <- textGrob(label = "30s", hjust = 0, gp = gpar(cex = 1.5))
1523407007633:aGrob    <- textGrob(label = "30s", hjust = 0, gp = gpar(cex = 1.5))
1523407008290:timePlot <- timePlot + annotation_custom(grob = aGrob, xmin = 8, xmax = 8, ymin = 30, ymax = 30)
1523407009306:gt <- ggplot_gtable(ggplot_build(timePlot))
1523407009758:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523407010271:grid.draw(gt)
1523407048207:publicationTheme <- list(
1523407048208:theme_pubr() +
1523407048208:theme(axis.ticks.y = element_blank(),
1523407048209:axis.line.y = element_blank(),
1523407048210:panel.grid.major.x   = element_line(colour = gridColor, size = lineSize),
1523407048211:plot.margin = margin(8, 8, 30, 8, "mm"),
1523407048212:axis.text.y = element_text(margin=margin(1,1,1,1,"mm")))
1523407048212:)
1523407052491:toolNameLevels <- compData$Tool_Name[c(6,4,5,7,3,2,1)]
1523407052493:# Preparing data ----------------------------------------------------------
1523407052493:dataToPlot <- compData %>%
1523407052494:arrange(Alleles) %>%
1523407052494:mutate(Tool_Name = factor(Tool_Name, toolNameLevels))
1523407052500:# Predictions plot ----------------------------------------------------------
1523407052501:ggbarplot(dataToPlot, x = "Tool_Name", y = "Alleles",
1523407052501:fill = "Tool_Name",
1523407052502:# color = "white",            # Set bar border colors to white
1523407052502:palette = customPalette,
1523407052502:rotate = T
1523407052503:# position = position_dodge(width=0.8)
1523407052503:# sort.val = "desc",          # Sort the value in dscending order
1523407052503:# sort.by.groups = FALSE,     # Don't sort inside each group
1523407052504:# x.text.angle = 90           # Rotate vertically x axis texts
1523407052504:) +
1523407052505:scale_y_continuous(expand = c(0, 0), position = "top") +
1523407052505:theme(axis.ticks.y = element_blank(),
1523407052506:axis.line.y = element_blank(),
1523407052506:# panel.grid.major     = element_line(colour = gridColor, size = lineSize),
1523407052507:panel.grid.major.x   = element_line(colour = gridColor, size = lineSize),
1523407052507:plot.margin = margin(8, 8, 8, 8, "mm"),
1523407052507:axis.text.y = element_text(margin=margin(1,1,1,1,"mm"))) +
1523407052508:labs(x = "Typing Tool",
1523407052508:y = "Correct Alleles (%)\n")
1523407053195:timeMarks <- c(30, 60, 15*60, 25*60)
1523407053196:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523407053196:geom_hline(yintercept = timeMarks, size = 0.2, color = gridColor) +
1523407053196:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523407053197:stat = "identity", position = position_dodge(width=0.9)) +
1523407053197:scale_y_log10(expand = c(0, 0), position = "top") +
1523407053198:scale_fill_manual(values = customPalette) +
1523407053198:publicationTheme +
1523407053198:labs(x = "Typing Tool",
1523407053199:y = "Run Time (s)\n") +
1523407053199:coord_flip()
1523407053207:aGrob    <- textGrob(label = "30s", hjust = 0, gp = gpar(cex = 1.5))
1523407053208:timePlot <- timePlot + annotation_custom(grob = aGrob, xmin = 8, xmax = 8, ymin = 30, ymax = 30)
1523407053211:gt <- ggplot_gtable(ggplot_build(timePlot))
1523407053750:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523407053751:grid.draw(gt)
1523407077788:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523407077788:geom_hline(yintercept = timeMarks, size = 0.2, color = gridColor) +
1523407077789:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523407077789:stat = "identity", position = position_dodge(width=0.9)) +
1523407077789:scale_y_log10(expand = c(0, 0), position = "top") +
1523407077790:scale_fill_manual(values = customPalette) +
1523407077790:publicationTheme +
1523407077790:labs(x = "Typing Tool",
1523407077791:y = "Run Time (s)\n")# + coord_flip()
1523407081111:timePlot
1523407101373:publicationTheme <- list(
1523407101374:theme_pubr() +
1523407101374:theme(axis.ticks.y = element_blank(),
1523407101375:axis.line.y = element_blank(),
1523407101376:panel.grid.major.x   = element_line(colour = gridColor, size = lineSize),
1523407101376:plot.margin = margin(8, 8, 8, 8, "mm"),
1523407101377:axis.text.y = element_text(margin=margin(1,1,1,1,"mm")))
1523407101378:)
1523407106929:toolNameLevels <- compData$Tool_Name[c(6,4,5,7,3,2,1)]
1523407106930:# Preparing data ----------------------------------------------------------
1523407106931:dataToPlot <- compData %>%
1523407106931:arrange(Alleles) %>%
1523407106932:mutate(Tool_Name = factor(Tool_Name, toolNameLevels))
1523407106934:# Predictions plot ----------------------------------------------------------
1523407106935:ggbarplot(dataToPlot, x = "Tool_Name", y = "Alleles",
1523407106936:fill = "Tool_Name",
1523407106936:# color = "white",            # Set bar border colors to white
1523407106936:palette = customPalette,
1523407106937:rotate = T
1523407106937:# position = position_dodge(width=0.8)
1523407106937:# sort.val = "desc",          # Sort the value in dscending order
1523407106938:# sort.by.groups = FALSE,     # Don't sort inside each group
1523407106938:# x.text.angle = 90           # Rotate vertically x axis texts
1523407106938:) +
1523407106939:scale_y_continuous(expand = c(0, 0), position = "top") +
1523407106939:theme(axis.ticks.y = element_blank(),
1523407106940:axis.line.y = element_blank(),
1523407106940:# panel.grid.major     = element_line(colour = gridColor, size = lineSize),
1523407106941:panel.grid.major.x   = element_line(colour = gridColor, size = lineSize),
1523407106941:plot.margin = margin(8, 8, 8, 8, "mm"),
1523407106941:axis.text.y = element_text(margin=margin(1,1,1,1,"mm"))) +
1523407106942:labs(x = "Typing Tool",
1523407106942:y = "Correct Alleles (%)\n")
1523407107217:timeMarks <- c(30, 60, 15*60, 25*60)
1523407107218:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523407107218:geom_hline(yintercept = timeMarks, size = 0.2, color = gridColor) +
1523407107219:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523407107219:stat = "identity", position = position_dodge(width=0.9)) +
1523407107219:scale_y_log10(expand = c(0, 0), position = "top") +
1523407107220:scale_fill_manual(values = customPalette) +
1523407107220:publicationTheme +
1523407107220:labs(x = "Typing Tool",
1523407107221:y = "Run Time (s)\n")# + coord_flip()
1523407121684:timePlot
1523407146430:publicationTheme <- list(
1523407146430:theme_pubr() +
1523407146431:theme(axis.ticks.y = element_blank(),
1523407146431:axis.line.y = element_blank(),
1523407146432:panel.grid.major.x   = element_line(colour = gridColor, size = lineSize),
1523407146432:plot.margin = margin(8, 30, 8, 8, "mm"),
1523407146433:axis.text.y = element_text(margin=margin(1,1,1,1,"mm")))
1523407146434:)
1523407146445:toolNameLevels <- compData$Tool_Name[c(6,4,5,7,3,2,1)]
1523407146446:# Preparing data ----------------------------------------------------------
1523407146447:dataToPlot <- compData %>%
1523407146447:arrange(Alleles) %>%
1523407146448:mutate(Tool_Name = factor(Tool_Name, toolNameLevels))
1523407146451:# Predictions plot ----------------------------------------------------------
1523407146452:ggbarplot(dataToPlot, x = "Tool_Name", y = "Alleles",
1523407146452:fill = "Tool_Name",
1523407146453:# color = "white",            # Set bar border colors to white
1523407146453:palette = customPalette,
1523407146454:rotate = T
1523407146454:# position = position_dodge(width=0.8)
1523407146454:# sort.val = "desc",          # Sort the value in dscending order
1523407146455:# sort.by.groups = FALSE,     # Don't sort inside each group
1523407146456:# x.text.angle = 90           # Rotate vertically x axis texts
1523407146456:) +
1523407146457:scale_y_continuous(expand = c(0, 0), position = "top") +
1523407146458:theme(axis.ticks.y = element_blank(),
1523407146458:axis.line.y = element_blank(),
1523407146459:# panel.grid.major     = element_line(colour = gridColor, size = lineSize),
1523407146460:panel.grid.major.x   = element_line(colour = gridColor, size = lineSize),
1523407146460:plot.margin = margin(8, 8, 8, 8, "mm"),
1523407146461:axis.text.y = element_text(margin=margin(1,1,1,1,"mm"))) +
1523407146462:labs(x = "Typing Tool",
1523407146463:y = "Correct Alleles (%)\n")
1523407146896:timeMarks <- c(30, 60, 15*60, 25*60)
1523407146897:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523407146897:geom_hline(yintercept = timeMarks, size = 0.2, color = gridColor) +
1523407146897:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523407146898:stat = "identity", position = position_dodge(width=0.9)) +
1523407146898:scale_y_log10(expand = c(0, 0), position = "top") +
1523407146898:scale_fill_manual(values = customPalette) +
1523407146899:publicationTheme +
1523407146899:labs(x = "Typing Tool",
1523407146899:y = "Run Time (s)\n")# + coord_flip()
1523407146911:timePlot
1523407153968:aGrob    <- textGrob(label = "30s", hjust = 0, gp = gpar(cex = 1.5))
1523407190610:aGrob    <- textGrob(label = "30s", hjust = 0, gp = gpar(cex = 1.5))
1523407192072:timePlot <- timePlot + annotation_custom(grob = aGrob,
1523407192073:xmin = 8,  xmax = 8,
1523407192073:ymin = 30, ymax = 30)
1523407197072:gt <- ggplot_gtable(ggplot_build(timePlot))
1523407198906:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523407199868:grid.draw(gt)
1523407233548:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523407233548:geom_hline(yintercept = timeMarks, size = 0.2, color = gridColor) +
1523407233549:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523407233549:stat = "identity", position = position_dodge(width=0.9)) +
1523407233549:scale_y_log10(expand = c(0, 0), position = "top") +
1523407233550:scale_fill_manual(values = customPalette) +
1523407233550:publicationTheme +
1523407233551:labs(x = "Typing Tool",
1523407233551:y = "Run Time (s)\n")# + coord_flip()
1523407233565:timePlot
1523407233952:aGrob    <- textGrob(label = "30s", hjust = 0, gp = gpar(cex = 1.5))
1523407233953:timePlot <- timePlot + annotation_custom(grob = aGrob,
1523407233954:xmin = 6,  xmax = 6,
1523407233955:ymin = 30, ymax = 30)
1523407233959:gt <- ggplot_gtable(ggplot_build(timePlot))
1523407234446:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523407234447:grid.draw(gt)
1523407274748:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523407274748:geom_hline(yintercept = timeMarks, size = 0.2, color = gridColor) +
1523407274749:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523407274750:stat = "identity", position = position_dodge(width=0.9)) +
1523407274750:# scale_y_log10(expand = c(0, 0), position = "top") +
1523407274750:scale_fill_manual(values = customPalette) +
1523407274751:publicationTheme +
1523407274751:labs(x = "Typing Tool",
1523407274752:y = "Run Time (s)\n")# + coord_flip()
1523407274761:timePlot
1523407274999:aGrob    <- textGrob(label = "30s", hjust = 0, gp = gpar(cex = 1.5))
1523407275000:timePlot <- timePlot + annotation_custom(grob = aGrob,
1523407275000:xmin = 6,  xmax = 6,
1523407275000:ymin = 30, ymax = 30)
1523407275003:gt <- ggplot_gtable(ggplot_build(timePlot))
1523407275473:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523407275474:grid.draw(gt)
1523407298878:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523407298879:geom_hline(yintercept = timeMarks, size = 0.2, color = gridColor) +
1523407298880:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523407298881:stat = "identity", position = position_dodge(width=0.9)) +
1523407298881:# scale_y_log10(expand = c(0, 0), position = "top") +
1523407298882:scale_fill_manual(values = customPalette) +
1523407298882:publicationTheme +
1523407298883:labs(x = "Typing Tool",
1523407298883:y = "Run Time (s)\n")# + coord_flip()
1523407298892:timePlot
1523407299195:aGrob    <- textGrob(label = "30s", hjust = 0, gp = gpar(cex = 1.5))
1523407299196:timePlot <- timePlot + annotation_custom(grob = aGrob,
1523407299196:xmin = 8,  xmax = 8,
1523407299197:ymin = 30, ymax = 30)
1523407299199:gt <- ggplot_gtable(ggplot_build(timePlot))
1523407299792:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523407299793:grid.draw(gt)
1523407312838:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523407312838:geom_hline(yintercept = timeMarks, size = 0.2, color = gridColor) +
1523407312839:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523407312840:stat = "identity", position = position_dodge(width=0.9)) +
1523407312841:# scale_y_log10(expand = c(0, 0), position = "top") +
1523407312841:scale_fill_manual(values = customPalette) +
1523407312842:publicationTheme +
1523407312842:labs(x = "Typing Tool",
1523407312843:y = "Run Time (s)\n")# + coord_flip()
1523407312855:timePlot
1523407313114:aGrob    <- textGrob(label = "30s", hjust = 0, gp = gpar(cex = 0.5))
1523407313115:timePlot <- timePlot + annotation_custom(grob = aGrob,
1523407313115:xmin = 8,  xmax = 8,
1523407313115:ymin = 30, ymax = 30)
1523407313118:gt <- ggplot_gtable(ggplot_build(timePlot))
1523407313647:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523407313648:grid.draw(gt)
1523407320989:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523407320990:geom_hline(yintercept = timeMarks, size = 0.2, color = gridColor) +
1523407320990:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523407320991:stat = "identity", position = position_dodge(width=0.9)) +
1523407320991:# scale_y_log10(expand = c(0, 0), position = "top") +
1523407320992:scale_fill_manual(values = customPalette) +
1523407320992:publicationTheme +
1523407320992:labs(x = "Typing Tool",
1523407320993:y = "Run Time (s)\n")# + coord_flip()
1523407321002:timePlot
1523407321324:aGrob    <- textGrob(label = "30s", hjust = 0, gp = gpar(cex = 1.0))
1523407321325:timePlot <- timePlot + annotation_custom(grob = aGrob,
1523407321325:xmin = 8,  xmax = 8,
1523407321325:ymin = 30, ymax = 30)
1523407321328:gt <- ggplot_gtable(ggplot_build(timePlot))
1523407321805:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523407321806:grid.draw(gt)
1523407329486:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523407329487:geom_hline(yintercept = timeMarks, size = 0.2, color = gridColor) +
1523407329488:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523407329488:stat = "identity", position = position_dodge(width=0.9)) +
1523407329489:# scale_y_log10(expand = c(0, 0), position = "top") +
1523407329490:scale_fill_manual(values = customPalette) +
1523407329491:publicationTheme +
1523407329491:labs(x = "Typing Tool",
1523407329492:y = "Run Time (s)\n")# + coord_flip()
1523407329502:timePlot
1523407330021:aGrob    <- textGrob(label = "30s", hjust = 0, gp = gpar(cex = 1.2))
1523407330023:timePlot <- timePlot + annotation_custom(grob = aGrob,
1523407330023:xmin = 8,  xmax = 8,
1523407330024:ymin = 30, ymax = 30)
1523407330028:gt <- ggplot_gtable(ggplot_build(timePlot))
1523407330495:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523407330496:grid.draw(gt)
1523407335765:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523407335766:geom_hline(yintercept = timeMarks, size = 0.2, color = gridColor) +
1523407335766:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523407335767:stat = "identity", position = position_dodge(width=0.9)) +
1523407335767:# scale_y_log10(expand = c(0, 0), position = "top") +
1523407335768:scale_fill_manual(values = customPalette) +
1523407335768:publicationTheme +
1523407335768:labs(x = "Typing Tool",
1523407335769:y = "Run Time (s)\n")# + coord_flip()
1523407335776:timePlot
1523407336096:aGrob    <- textGrob(label = "30s", hjust = 0, gp = gpar(cex = 1.1))
1523407336097:timePlot <- timePlot + annotation_custom(grob = aGrob,
1523407336098:xmin = 8,  xmax = 8,
1523407336099:ymin = 30, ymax = 30)
1523407336104:gt <- ggplot_gtable(ggplot_build(timePlot))
1523407336602:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523407336603:grid.draw(gt)
1523407344114:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523407344115:geom_hline(yintercept = timeMarks, size = 0.2, color = gridColor) +
1523407344116:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523407344117:stat = "identity", position = position_dodge(width=0.9)) +
1523407344117:# scale_y_log10(expand = c(0, 0), position = "top") +
1523407344118:scale_fill_manual(values = customPalette) +
1523407344118:publicationTheme +
1523407344119:labs(x = "Typing Tool",
1523407344120:y = "Run Time (s)\n")# + coord_flip()
1523407344129:timePlot
1523407344420:aGrob    <- textGrob(label = "30s", hjust = 0, gp = gpar(cex = 1.0))
1523407344421:timePlot <- timePlot + annotation_custom(grob = aGrob,
1523407344421:xmin = 8,  xmax = 8,
1523407344422:ymin = 30, ymax = 30)
1523407344424:gt <- ggplot_gtable(ggplot_build(timePlot))
1523407344952:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523407344952:grid.draw(gt)
1523407350816:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523407350817:geom_hline(yintercept = timeMarks, size = 0.2, color = gridColor) +
1523407350817:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523407350817:stat = "identity", position = position_dodge(width=0.9)) +
1523407350818:# scale_y_log10(expand = c(0, 0), position = "top") +
1523407350818:scale_fill_manual(values = customPalette) +
1523407350819:publicationTheme +
1523407350819:labs(x = "Typing Tool",
1523407350819:y = "Run Time (s)\n")# + coord_flip()
1523407350827:timePlot
1523407351114:aGrob    <- textGrob(label = "30s", hjust = 0, gp = gpar(cex = 1.05))
1523407351115:timePlot <- timePlot + annotation_custom(grob = aGrob,
1523407351115:xmin = 8,  xmax = 8,
1523407351115:ymin = 30, ymax = 30)
1523407351118:gt <- ggplot_gtable(ggplot_build(timePlot))
1523407351771:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523407351772:grid.draw(gt)
1523407409058:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523407409059:geom_hline(yintercept = timeMarks, size = 0.2, color = gridColor) +
1523407409059:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523407409060:stat = "identity", position = position_dodge(width=0.9)) +
1523407409061:scale_y_log10(expand = c(0, 0), position = "top") +
1523407409061:scale_fill_manual(values = customPalette) +
1523407409061:publicationTheme +
1523407409062:labs(x = "Typing Tool",
1523407409062:y = "Run Time (s)\n")# + coord_flip()
1523407409070:timePlot
1523407409332:aGrob    <- textGrob(label = "30s", hjust = 0, gp = gpar(cex = 1.05))
1523407409333:timePlot <- timePlot + annotation_custom(grob = aGrob,
1523407409334:xmin = 8,  xmax = 8,
1523407409334:ymin = log10(30), ymax = log10(30))
1523407409337:gt <- ggplot_gtable(ggplot_build(timePlot))
1523407409812:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523407409813:grid.draw(gt)
1523407420454:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523407420455:geom_hline(yintercept = timeMarks, size = 0.2, color = gridColor) +
1523407420456:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523407420456:stat = "identity", position = position_dodge(width=0.9)) +
1523407420457:scale_y_log10(expand = c(0, 0), position = "top") +
1523407420457:scale_fill_manual(values = customPalette) +
1523407420458:publicationTheme +
1523407420458:labs(x = "Typing Tool",
1523407420459:y = "Run Time (s)\n") + coord_flip()
1523407420468:timePlot
1523407420760:aGrob    <- textGrob(label = "30s", hjust = 0, gp = gpar(cex = 1.05))
1523407420761:timePlot <- timePlot + annotation_custom(grob = aGrob,
1523407420762:xmin = 8,  xmax = 8,
1523407420762:ymin = log10(30), ymax = log10(30))
1523407420765:gt <- ggplot_gtable(ggplot_build(timePlot))
1523407421284:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523407421285:grid.draw(gt)
1523407455910:publicationTheme <- list(
1523407455911:theme_pubr() +
1523407455912:theme(axis.ticks.y = element_blank(),
1523407455913:axis.line.y = element_blank(),
1523407455914:panel.grid.major.x   = element_line(colour = gridColor, size = lineSize),
1523407455915:plot.margin = margin(8, 8, 30, 8, "mm"),
1523407455915:axis.text.y = element_text(margin=margin(1,1,1,1,"mm")))
1523407455916:)
1523407473505:timeMarks <- c(30, 60, 15*60, 25*60)
1523407473506:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523407473506:geom_hline(yintercept = timeMarks, size = 0.2, color = gridColor) +
1523407473507:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523407473508:stat = "identity", position = position_dodge(width=0.9)) +
1523407473508:scale_y_log10(expand = c(0, 0), position = "top") +
1523407473509:scale_fill_manual(values = customPalette) +
1523407473509:publicationTheme +
1523407473510:labs(x = "Typing Tool",
1523407473511:y = "Run Time (s)\n") + coord_flip()
1523407473528:timePlot
1523407473950:aGrob    <- textGrob(label = "30s", hjust = 0, gp = gpar(cex = 1.05))
1523407473951:timePlot <- timePlot + annotation_custom(grob = aGrob,
1523407473951:xmin = -1,  xmax = -1,
1523407473952:ymin = log10(30), ymax = log10(30))
1523407473954:gt <- ggplot_gtable(ggplot_build(timePlot))
1523407474445:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523407474446:grid.draw(gt)
1523407490220:timeMarks <- c(30, 60, 15*60, 25*60)
1523407490221:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523407490221:geom_hline(yintercept = timeMarks, size = 0.2, color = gridColor) +
1523407490222:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523407490223:stat = "identity", position = position_dodge(width=0.9)) +
1523407490224:scale_y_log10(expand = c(0, 0), position = "top") +
1523407490224:scale_fill_manual(values = customPalette) +
1523407490225:publicationTheme +
1523407490226:labs(x = "Typing Tool",
1523407490227:y = "Run Time (s)\n") + coord_flip()
1523407490241:timePlot
1523407490559:aGrob    <- textGrob(label = "30s", hjust = 0, gp = gpar(cex = 1.05))
1523407490560:timePlot <- timePlot + annotation_custom(grob = aGrob,
1523407490560:xmin = 0,  xmax = 0,
1523407490561:ymin = log10(30), ymax = log10(30))
1523407490564:gt <- ggplot_gtable(ggplot_build(timePlot))
1523407491166:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523407491167:grid.draw(gt)
1523407532716:timeMarks <- c(30, 60, 15*60, 25*60)
1523407532718:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523407532718:geom_hline(yintercept = timeMarks, size = 0.2, color = gridColor) +
1523407532719:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523407532720:stat = "identity", position = position_dodge(width=0.9)) +
1523407532720:scale_y_log10(expand = c(0, 0), position = "top") +
1523407532721:scale_fill_manual(values = customPalette) +
1523407532722:publicationTheme +
1523407532722:labs(x = "Typing Tool",
1523407532723:y = "Run Time (s)\n") + coord_flip()
1523407532733:timePlot
1523407533102:aGrob    <- textGrob(label = "30s", hjust = 0, gp = gpar(cex = 1.05), rot = 45)
1523407533103:timePlot <- timePlot + annotation_custom(grob = aGrob,
1523407533104:xmin = 0,  xmax = 0,
1523407533104:ymin = log10(30), ymax = log10(30))
1523407533107:gt <- ggplot_gtable(ggplot_build(timePlot))
1523407533612:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523407533612:grid.draw(gt)
1523407557262:360-45
1523407573165:timeMarks <- c(30, 60, 15*60, 25*60)
1523407573166:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523407573167:geom_hline(yintercept = timeMarks, size = 0.2, color = gridColor) +
1523407573168:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523407573168:stat = "identity", position = position_dodge(width=0.9)) +
1523407573169:scale_y_log10(expand = c(0, 0), position = "top") +
1523407573170:scale_fill_manual(values = customPalette) +
1523407573170:publicationTheme +
1523407573171:labs(x = "Typing Tool",
1523407573173:y = "Run Time (s)\n") + coord_flip()
1523407573185:timePlot
1523407573492:aGrob    <- textGrob(label = "30s", hjust = 0, gp = gpar(cex = 1.05), rot = 315)
1523407573493:timePlot <- timePlot + annotation_custom(grob = aGrob,
1523407573494:xmin = 0,  xmax = 0,
1523407573494:ymin = log10(30), ymax = log10(30))
1523407573497:gt <- ggplot_gtable(ggplot_build(timePlot))
1523407574115:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523407574116:grid.draw(gt)
1523407827807:# STing vs other sequence typing software
1523407827808:# Install an load packages ------------------------------------------------
1523407827808:installAndLoadPackages <- function(pkg){
1523407827809:cat("Please wait a moment! Checking for required packages... ")
1523407827809:cat("Done!\n")
1523407827810:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1523407827810:if (length(new.pkg)) {
1523407827810:cat("Installing new packages... ")
1523407827811:install.packages(new.pkg, dependencies = TRUE,
1523407827811:repos="http://cran.rstudio.com/")
1523407827812:cat("Done!\n")
1523407827812:}
1523407827813:cat("Loading packages... \n")
1523407827813:sapply(pkg, require, character.only = TRUE)
1523407827814:cat("Done!\n")
1523407827814:}
1523407827815:requiredPackages <- c("dplyr", "readr", "ggpubr", "RColorBrewer", "gridExtra",
1523407827816:"extrafont")
1523407827816:installAndLoadPackages(requiredPackages)
1523407827823:# Sources -----------------------------------------------------------------
1523407827823:# Loading Data ------------------------------------------------------------
1523407827824:inFile   <- "data/typer/stringMLST-comparisons.tsv"
1523407827824:compData <- read_tsv(inFile)
1523407828009:# General configuration ---------------------------------------------------
1523407828009:customPalette <- c("#0a4f75","#91bbe4","#d7e4f5")
1523407828010:customPalette <- rev(brewer.pal(n = 7, name = "Paired"))
1523407828568:customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#c81837"))
1523407828568:customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#33A02C"))
1523407828569:customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "gray50"))
1523407828569:customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#86827F"))
1523407828570:customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#e8702a", "#edc374", "#faebd7", "#86827F"))
1523407828570:width     <- 9
1523407828571:height    <- width * 0.618
1523407828571:lineSize  <- 0.3
1523407828572:axisColor <- "#666666"
1523407828572:gridColor <- "#cccccc"
1523407828573:baseTextSize <- 22
1523407828573:barAnnotTextSize <- 4
1523407828574:# baseFontFamily <- "Helvetica"
1523407828574:baseFontFamily <- 'Arial'
1523407828575:baseFontFamily <- 'HelveticaNeueLT Com 45 Lt'
1523407828576:baseFontFamily <- 'HelveticaNeueLT Std Lt'
1523407828577:customTheme <- list(
1523407828577:# theme_Publication_2(),
1523407828577:# guides(fill = guide_legend(title.position = "left"#,
1523407828578:#                           # label.vjust = -0.8
1523407828578:#       )),
1523407828578:# panel.grid = element_blank(),
1523407828579:# panel.border = element_blank()#,
1523407828579:# scale_y_continuous(expand = c(0, 0)),
1523407828579:theme(
1523407828579:axis.line            = element_line(colour = axisColor, size = lineSize),
1523407828580:axis.line.y          = element_blank(),
1523407828580:# axis.text            = element_text(size = baseTextSize * 0.875),#,
1523407828580:axis.text            = element_text(size = baseTextSize * 0.875,
1523407828581:family = baseFontFamily, color = "black"),
1523407828581:# axis.ticks           = element_line(size = lineSize),
1523407828581:axis.ticks.y         = element_blank(),
1523407828582:axis.title           = element_text(size = baseTextSize),#,
1523407828582:# axis.title           = element_text(size = baseTextSize,
1523407828582:# family = baseFontFamily),
1523407828583:axis.title.y         = element_blank(),
1523407828583:# axis.title.x        = element_blank(),
1523407828583:legend.direction     = "horizontal",
1523407828584:legend.justification = c(0.5, 0.5),
1523407828584:legend.key.height    = unit(5, "mm"),
1523407828584:legend.key.width     = unit(8, "mm"),
1523407828585:legend.position      = "bottom",
1523407828585:legend.title         = element_blank(),
1523407828585:panel.background     = element_blank(),
1523407828586:panel.grid.major     = element_line(colour = gridColor, size = lineSize),
1523407828586:panel.grid.major.y   = element_blank(),
1523407828587:plot.margin          = unit(c(0.2,1.8,0.2,0.2),"cm"),
1523407828587:# text                 = element_text(size = baseTextSize)#,
1523407828588:text                 = element_text(size = baseTextSize,
1523407828588:family = baseFontFamily)
1523407828589:),
1523407828589:coord_flip()
1523407828590:)
1523407828592:publicationTheme <- list(
1523407847259:timeMarks <- c(30, 60, 15*60, 25*60)
1523407847259:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523407847260:geom_hline(yintercept = timeMarks, size = 0.2, color = gridColor) +
1523407847260:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523407847261:stat = "identity", position = position_dodge(width=0.9)) +
1523407847261:scale_y_log10(expand = c(0, 0), position = "top") +
1523407847262:scale_fill_manual(values = customPalette) +
1523407847262:publicationTheme +
1523407847263:labs(x = "Typing Tool",
1523407847263:y = "Run Time (s)\n") + coord_flip()
1523407847273:timePlot
1523407848191:aGrob    <- textGrob(label = "30s", hjust = 0, gp = gpar(cex = 1.05), rot = 315)
1523407848192:timePlot <- timePlot + annotation_custom(grob = aGrob,
1523407848192:xmin = 0,  xmax = 0,
1523407848192:ymin = log10(30), ymax = log10(30))
1523407848196:gt <- ggplot_gtable(ggplot_build(timePlot))
1523407848687:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523407848687:grid.draw(gt)
1523407855835:publicationTheme <- list(
1523407855836:theme_pubr() +
1523407855836:theme(axis.ticks.y = element_blank(),
1523407855837:axis.line.y = element_blank(),
1523407855838:panel.grid.major.x   = element_line(colour = gridColor, size = lineSize),
1523407855838:plot.margin = margin(8, 8, 20, 8, "mm"),
1523407855839:axis.text.y = element_text(margin=margin(1,1,1,1,"mm")))
1523407855840:)
1523407861465:publicationTheme <- list(
1523407861466:theme_pubr() +
1523407861466:theme(axis.ticks.y = element_blank(),
1523407861467:axis.line.y = element_blank(),
1523407861468:panel.grid.major.x   = element_line(colour = gridColor, size = lineSize),
1523407861468:plot.margin = margin(8, 8, 20, 8, "mm"),
1523407861469:axis.text.y = element_text(margin=margin(1,1,1,1,"mm")))
1523407861469:)
1523407876803:timeMarks <- c(30, 60, 15*60, 25*60)
1523407876804:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523407876805:geom_hline(yintercept = timeMarks, size = 0.2, color = gridColor) +
1523407876805:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523407876806:stat = "identity", position = position_dodge(width=0.9)) +
1523407876807:scale_y_log10(expand = c(0, 0), position = "top") +
1523407876807:scale_fill_manual(values = customPalette) +
1523407876808:publicationTheme +
1523407876808:labs(x = "Typing Tool",
1523407876809:y = "Run Time (s)\n") + coord_flip()
1523407876821:timePlot
1523407877118:aGrob    <- textGrob(label = "30s", hjust = 0, gp = gpar(cex = 1.05), rot = 315)
1523407877119:timePlot <- timePlot + annotation_custom(grob = aGrob,
1523407877120:xmin = 0,  xmax = 0,
1523407877120:ymin = log10(30), ymax = log10(30))
1523407877123:gt <- ggplot_gtable(ggplot_build(timePlot))
1523407877613:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523407877614:grid.draw(gt)
1523407900849:timeMarks <- c(30, 60, 15*60, 25*60)
1523407900850:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523407900851:geom_hline(yintercept = timeMarks, size = 0.2, color = gridColor) +
1523407900851:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523407900852:stat = "identity", position = position_dodge(width=0.9)) +
1523407900852:scale_y_log10(expand = c(0, 0), position = "top") +
1523407900853:scale_fill_manual(values = customPalette) +
1523407900853:publicationTheme +
1523407900854:labs(x = "Typing Tool",
1523407900854:y = "Run Time (s)\n") + coord_flip()
1523407900865:timePlot
1523407901154:aGrob    <- textGrob(label = "30s", hjust = 0, gp = gpar(cex = 1.05), rot = 315)
1523407901155:timePlot <- timePlot + annotation_custom(grob = aGrob,
1523407901155:xmin = 0.5,  xmax = 0.5,
1523407901155:ymin = log10(30), ymax = log10(30))
1523407901158:gt <- ggplot_gtable(ggplot_build(timePlot))
1523407901743:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523407901744:grid.draw(gt)
1523407911164:timeMarks <- c(30, 60, 15*60, 25*60)
1523407911165:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523407911166:geom_hline(yintercept = timeMarks, size = 0.2, color = gridColor) +
1523407911166:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523407911167:stat = "identity", position = position_dodge(width=0.9)) +
1523407911167:scale_y_log10(expand = c(0, 0), position = "top") +
1523407911168:scale_fill_manual(values = customPalette) +
1523407911169:publicationTheme +
1523407911169:labs(x = "Typing Tool",
1523407911170:y = "Run Time (s)\n") + coord_flip()
1523407911186:timePlot
1523407911480:aGrob    <- textGrob(label = "30s", hjust = 0, gp = gpar(cex = 1.05), rot = 315)
1523407911481:timePlot <- timePlot + annotation_custom(grob = aGrob,
1523407911481:xmin = 0.2,  xmax = 0.2,
1523407911482:ymin = log10(30), ymax = log10(30))
1523407911485:gt <- ggplot_gtable(ggplot_build(timePlot))
1523407912112:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523407912113:grid.draw(gt)
1523407942067:timeMarks <- c(30, 60, 15*60, 25*60)
1523407942069:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523407942070:geom_hline(yintercept = timeMarks, size = 0.2, color = gridColor) +
1523407942070:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523407942071:stat = "identity", position = position_dodge(width=0.9)) +
1523407942072:scale_y_log10(expand = c(0, 0), position = "top") +
1523407942072:scale_fill_manual(values = customPalette) +
1523407942073:publicationTheme +
1523407942074:labs(x = "Typing Tool",
1523407942074:y = "Run Time (s)\n") + coord_flip()
1523407942085:timePlot
1523407942397:aGrob    <- textGrob(label = "30s", hjust = 1, gp = gpar(cex = 1.05), rot = 315)
1523407942398:timePlot <- timePlot + annotation_custom(grob = aGrob,
1523407942399:xmin = 0.2,  xmax = 0.2,
1523407942399:ymin = log10(30), ymax = log10(30))
1523407942402:gt <- ggplot_gtable(ggplot_build(timePlot))
1523407942924:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523407942925:grid.draw(gt)
1523407955561:aGrob    <- textGrob(label = "30s", hjust = 0, vjust = 0, gp = gpar(cex = 1.05), rot = 315)
1523407961849:timeMarks <- c(30, 60, 15*60, 25*60)
1523407961850:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523407961851:geom_hline(yintercept = timeMarks, size = 0.2, color = gridColor) +
1523407961851:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523407961851:stat = "identity", position = position_dodge(width=0.9)) +
1523407961852:scale_y_log10(expand = c(0, 0), position = "top") +
1523407961852:scale_fill_manual(values = customPalette) +
1523407961852:publicationTheme +
1523407961853:labs(x = "Typing Tool",
1523407961853:y = "Run Time (s)\n") + coord_flip()
1523407961861:timePlot
1523407962126:aGrob    <- textGrob(label = "30s", hjust = 0, vjust = 0, gp = gpar(cex = 1.05), rot = 315)
1523407962127:timePlot <- timePlot + annotation_custom(grob = aGrob,
1523407962128:xmin = 0.2,  xmax = 0.2,
1523407962128:ymin = log10(30), ymax = log10(30))
1523407962131:gt <- ggplot_gtable(ggplot_build(timePlot))
1523407962645:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523407962645:grid.draw(gt)
1523407973694:timeMarks <- c(30, 60, 15*60, 25*60)
1523407973695:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523407973696:geom_hline(yintercept = timeMarks, size = 0.2, color = gridColor) +
1523407973696:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523407973696:stat = "identity", position = position_dodge(width=0.9)) +
1523407973697:scale_y_log10(expand = c(0, 0), position = "top") +
1523407973698:scale_fill_manual(values = customPalette) +
1523407973698:publicationTheme +
1523407973699:labs(x = "Typing Tool",
1523407973700:y = "Run Time (s)\n") + coord_flip()
1523407973709:timePlot
1523407974048:aGrob    <- textGrob(label = "30s", hjust = 0, vjust = 1, gp = gpar(cex = 1.05), rot = 315)
1523407974049:timePlot <- timePlot + annotation_custom(grob = aGrob,
1523407974049:xmin = 0.2,  xmax = 0.2,
1523407974050:ymin = log10(30), ymax = log10(30))
1523407974053:gt <- ggplot_gtable(ggplot_build(timePlot))
1523407974630:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523407974632:grid.draw(gt)
1523408215569:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 30*60),
1523408215569:labels = c("30 sec", "1 min", "15 min", "30 min"))
1523408217116:annotationData
1523408253119:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523408253120:geom_hline(annotationData, yintercept = timeMarks, size = 0.2, color = gridColor) +
1523408253120:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523408253121:stat = "identity", position = position_dodge(width=0.9)) +
1523408253122:scale_y_log10(expand = c(0, 0), position = "top") +
1523408253123:scale_fill_manual(values = customPalette) +
1523408253124:publicationTheme +
1523408253125:labs(x = "Typing Tool",
1523408253126:y = "Run Time (s)\n") + coord_flip()
1523408253138:timePlot
1523408275871:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 60*60),
1523408275872:labels = c("30 sec", "1 min", "15 min", "30 min"))
1523408275875:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523408275876:geom_hline(annotationData, yintercept = timeMarks, size = 0.2, color = gridColor) +
1523408275876:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523408275877:stat = "identity", position = position_dodge(width=0.9)) +
1523408275878:scale_y_log10(expand = c(0, 0), position = "top") +
1523408275878:scale_fill_manual(values = customPalette) +
1523408275878:publicationTheme +
1523408275879:labs(x = "Typing Tool",
1523408275879:y = "Run Time (s)\n") + coord_flip()
1523408275889:timePlot
1523408297888:dataToPlot
1523408304378:dataToPlot
1523408349381:2922 / 60
1523408363315:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523408363316:labels = c("30 sec", "1 min", "15 min", "30 min"))
1523408370249:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523408370249:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523408373216:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523408373216:geom_hline(annotationData, yintercept = timeMarks, size = 0.2, color = gridColor) +
1523408373217:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523408373217:stat = "identity", position = position_dodge(width=0.9)) +
1523408373218:scale_y_log10(expand = c(0, 0), position = "top") +
1523408373218:scale_fill_manual(values = customPalette) +
1523408373219:publicationTheme +
1523408373220:labs(x = "Typing Tool",
1523408373220:y = "Run Time (s)\n") + coord_flip()
1523408373230:timePlot
1523408419100:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523408419100:geom_hline(data = annotationData, yintercept = timeMarks, size = 0.2, color = gridColor) +
1523408419101:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523408419101:stat = "identity", position = position_dodge(width=0.9)) +
1523408419102:scale_y_log10(expand = c(0, 0), position = "top") +
1523408419102:scale_fill_manual(values = customPalette) +
1523408419102:publicationTheme +
1523408419103:labs(x = "Typing Tool",
1523408419103:y = "Run Time (s)\n") + coord_flip()
1523408431188:annotationData <- data.frame(timeMarks = c(15, 60, 15*60, 45*60),
1523408431189:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523408432169:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523408432170:geom_hline(data = annotationData, yintercept = timeMarks, size = 0.2, color = gridColor) +
1523408432171:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523408432171:stat = "identity", position = position_dodge(width=0.9)) +
1523408432172:scale_y_log10(expand = c(0, 0), position = "top") +
1523408432172:scale_fill_manual(values = customPalette) +
1523408432173:publicationTheme +
1523408432173:labs(x = "Typing Tool",
1523408432174:y = "Run Time (s)\n") + coord_flip()
1523408433045:timePlot
1523408445905:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523408445905:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523408445907:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523408445907:geom_hline(data = annotationData, yintercept = timeMarks, size = 0.2, color = gridColor) +
1523408445907:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523408445908:stat = "identity", position = position_dodge(width=0.9)) +
1523408445908:scale_y_log10(expand = c(0, 0), position = "top") +
1523408445909:scale_fill_manual(values = customPalette) +
1523408445909:publicationTheme +
1523408445909:labs(x = "Typing Tool",
1523408445910:y = "Run Time (s)\n") + coord_flip()
1523408445919:timePlot
1523408456165:rm(timeMarks)
1523408462396:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523408462396:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523408462398:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523408462399:geom_hline(data = annotationData, yintercept = timeMarks, size = 0.2, color = gridColor) +
1523408462399:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523408462400:stat = "identity", position = position_dodge(width=0.9)) +
1523408462400:scale_y_log10(expand = c(0, 0), position = "top") +
1523408462401:scale_fill_manual(values = customPalette) +
1523408462401:publicationTheme +
1523408462402:labs(x = "Typing Tool",
1523408462402:y = "Run Time (s)\n") + coord_flip()
1523408462461:timePlot
1523408510621:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523408510622:geom_hline(data = annotationData, aes(yintercept = timeMarks), size = 0.2, color = gridColor) +
1523408510622:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523408510622:stat = "identity", position = position_dodge(width=0.9)) +
1523408510623:scale_y_log10(expand = c(0, 0), position = "top") +
1523408510624:scale_fill_manual(values = customPalette) +
1523408510624:publicationTheme +
1523408510625:labs(x = "Typing Tool",
1523408510625:y = "Run Time (s)\n") + coord_flip()
1523408523651:annotationData <- data.frame(timeMarks = c(15, 60, 15*60, 45*60),
1523408523652:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523408523654:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523408523655:geom_hline(data = annotationData, aes(yintercept = timeMarks), size = 0.2, color = gridColor) +
1523408523655:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523408523656:stat = "identity", position = position_dodge(width=0.9)) +
1523408523656:scale_y_log10(expand = c(0, 0), position = "top") +
1523408523656:scale_fill_manual(values = customPalette) +
1523408523657:publicationTheme +
1523408523657:labs(x = "Typing Tool",
1523408523658:y = "Run Time (s)\n") + coord_flip()
1523408523665:timePlot
1523408539015:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523408539015:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523408539017:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523408539017:geom_hline(data = annotationData, aes(yintercept = timeMarks), size = 0.2, color = gridColor) +
1523408539017:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523408539018:stat = "identity", position = position_dodge(width=0.9)) +
1523408539018:scale_y_log10(expand = c(0, 0), position = "top") +
1523408539018:scale_fill_manual(values = customPalette) +
1523408539019:publicationTheme +
1523408539019:labs(x = "Typing Tool",
1523408539020:y = "Run Time (s)\n") + coord_flip()
1523408539027:timePlot
1523408822359:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523408822359:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523408822361:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523408822361:geom_hline(data = annotationData, aes(yintercept = timeMarks), size = 0.2, color = gridColor) +
1523408822362:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523408822362:stat = "identity", position = position_dodge(width=0.9)) +
1523408822363:scale_y_log10(expand = c(0, 0), position = "top") +
1523408822363:scale_fill_manual(values = customPalette) +
1523408822364:publicationTheme +
1523408822364:labs(x = "Typing Tool",
1523408822365:y = "Run Time (s)\n") + coord_flip()
1523408822376:timePlot
1523408822885:for (i in 1:nrow(annotationData))  {
1523408822885:timePlot <- timePlot + annotation_custom(
1523408822885:grob = textGrob(label = annotationData$labels[i], hjust = 0, gp = gpar(cex = 1.5)),
1523408822886:ymin = log10(annotationData$timeMarks[i]),      # Vertical position of the textGrob
1523408822886:ymax = log10(annotationData$timeMarks[i]),
1523408822886:xmin = 0.2,         # Note: The grobs are positioned outside the plot area
1523408822887:xmax = 0.2)
1523408822887:}
1523408822905:# aGrob    <- textGrob(label = "30s", hjust = 0, vjust = 1, gp = gpar(cex = 1.05), rot = 315)
1523408822905:# timePlot <- timePlot + annotation_custom(grob = aGrob,
1523408822905:#                                          xmin = 0.2,  xmax = 0.2,
1523408822906:#                                          ymin = log10(30), ymax = log10(30))
1523408822906:gt <- ggplot_gtable(ggplot_build(timePlot))
1523408823598:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523408823598:grid.draw(gt)
1523408850436:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523408850436:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523408850438:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523408850438:geom_hline(data = annotationData, aes(yintercept = timeMarks), size = 0.2, color = gridColor) +
1523408850439:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523408850439:stat = "identity", position = position_dodge(width=0.9)) +
1523408850439:scale_y_log10(expand = c(0, 0), position = "top") +
1523408850440:scale_fill_manual(values = customPalette) +
1523408850440:publicationTheme +
1523408850441:labs(x = "Typing Tool",
1523408850442:y = "Run Time (s)\n") + coord_flip()
1523408850451:timePlot
1523408850763:for (i in 1:nrow(annotationData))  {
1523408850763:timePlot <- timePlot + annotation_custom(
1523408850764:grob = textGrob(label = annotationData$labels[i], hjust = 0, gp = gpar(cex = 1.05), rot = 315),
1523408850764:ymin = log10(annotationData$timeMarks[i]),      # Vertical position of the textGrob
1523408850764:ymax = log10(annotationData$timeMarks[i]),
1523408850765:xmin = 0.2,         # Note: The grobs are positioned outside the plot area
1523408850765:xmax = 0.2)
1523408850765:}
1523408850787:# aGrob    <- textGrob(label = "30s", hjust = 0, vjust = 1, gp = gpar(cex = 1.05), rot = 315)
1523408850788:# timePlot <- timePlot + annotation_custom(grob = aGrob,
1523408850788:#                                          xmin = 0.2,  xmax = 0.2,
1523408850789:#                                          ymin = log10(30), ymax = log10(30))
1523408850790:gt <- ggplot_gtable(ggplot_build(timePlot))
1523408851325:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523408851325:grid.draw(gt)
1523408947051:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523408947052:geom_hline(data = annotationData, aes(yintercept = timeMarks), size = 0.2, color = gridColor) +
1523408947052:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523408947053:stat = "identity", position = position_dodge(width=0.9)) +
1523408947054:scale_y_log10(expand = c(0, 0), position = "top") +
1523408947055:scale_fill_manual(values = customPalette) +
1523408947056:publicationTheme +
1523408947056:labs(x = "Typing Tool",
1523408947057:y = "Run Time (s)\n") + coord_flip()
1523408947070:timePlot
1523408947413:# Annotation - times
1523408947414:for (i in 1:nrow(annotationData))  {
1523408947414:timePlot <- timePlot + annotation_custom(
1523408947414:grob = textGrob(label = annotationData$labels[i], hjust = 0, gp = gpar(cex = 1.01), rot = 310),
1523408947415:ymin = log10(annotationData$timeMarks[i]),
1523408947415:ymax = log10(annotationData$timeMarks[i]),
1523408947415:xmin = 0.2,
1523408947416:xmax = 0.2)
1523408947416:}
1523408947434:# aGrob    <- textGrob(label = "30s", hjust = 0, vjust = 1, gp = gpar(cex = 1.05), rot = 315)
1523408947434:# timePlot <- timePlot + annotation_custom(grob = aGrob,
1523408947435:#                                          xmin = 0.2,  xmax = 0.2,
1523408947435:#                                          ymin = log10(30), ymax = log10(30))
1523408947436:gt <- ggplot_gtable(ggplot_build(timePlot))
1523408948031:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523408948032:grid.draw(gt)
1523408973173:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523408973174:geom_hline(data = annotationData, aes(yintercept = timeMarks), size = 0.2, color = gridColor) +
1523408973175:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523408973175:stat = "identity", position = position_dodge(width=0.9)) +
1523408973176:scale_y_log10(expand = c(0, 0), position = "top") +
1523408973176:scale_fill_manual(values = customPalette) +
1523408973177:publicationTheme +
1523408973178:labs(x = "Typing Tool",
1523408973179:y = "Run Time (s)\n") + coord_flip()
1523408973193:timePlot
1523408973499:# Annotation - times
1523408973500:for (i in 1:nrow(annotationData))  {
1523408973500:timePlot <- timePlot + annotation_custom(
1523408973500:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1, gp = gpar(cex = 1.01), rot = 310),
1523408973501:ymin = log10(annotationData$timeMarks[i]),
1523408973501:ymax = log10(annotationData$timeMarks[i]),
1523408973502:xmin = 0.2,
1523408973502:xmax = 0.2)
1523408973502:}
1523408973520:# aGrob    <- textGrob(label = "30s", hjust = 0, vjust = 1, gp = gpar(cex = 1.05), rot = 315)
1523408973520:# timePlot <- timePlot + annotation_custom(grob = aGrob,
1523408973521:#                                          xmin = 0.2,  xmax = 0.2,
1523408973521:#                                          ymin = log10(30), ymax = log10(30))
1523408973522:gt <- ggplot_gtable(ggplot_build(timePlot))
1523408974051:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523408974052:grid.draw(gt)
1523408987365:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523408987366:geom_hline(data = annotationData, aes(yintercept = timeMarks), size = 0.2, color = gridColor) +
1523408987367:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523408987368:stat = "identity", position = position_dodge(width=0.9)) +
1523408987369:scale_y_log10(expand = c(0, 0), position = "top") +
1523408987370:scale_fill_manual(values = customPalette) +
1523408987370:publicationTheme +
1523408987371:labs(x = "Typing Tool",
1523408987372:y = "Run Time (s)\n") + coord_flip()
1523408987390:timePlot
1523408987679:# Annotation - times
1523408987680:for (i in 1:nrow(annotationData))  {
1523408987680:timePlot <- timePlot + annotation_custom(
1523408987680:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1, gp = gpar(cex = 1.01), rot = 310),
1523408987681:ymin = log10(annotationData$timeMarks[i]),
1523408987681:ymax = log10(annotationData$timeMarks[i]),
1523408987681:xmin = 0.1,
1523408987682:xmax = 0.1)
1523408987682:}
1523408987700:# aGrob    <- textGrob(label = "30s", hjust = 0, vjust = 1, gp = gpar(cex = 1.05), rot = 315)
1523408987701:# timePlot <- timePlot + annotation_custom(grob = aGrob,
1523408987701:#                                          xmin = 0.2,  xmax = 0.2,
1523408987702:#                                          ymin = log10(30), ymax = log10(30))
1523408987703:gt <- ggplot_gtable(ggplot_build(timePlot))
1523408988314:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523408988315:grid.draw(gt)
1523409004829:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523409004830:geom_hline(data = annotationData, aes(yintercept = timeMarks), size = 0.2, color = gridColor) +
1523409004831:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523409004831:stat = "identity", position = position_dodge(width=0.9)) +
1523409004832:scale_y_log10(expand = c(0, 0), position = "top") +
1523409004833:scale_fill_manual(values = customPalette) +
1523409004833:publicationTheme +
1523409004834:labs(x = "Typing Tool",
1523409004834:y = "Run Time (s)\n") + coord_flip()
1523409004845:timePlot
1523409005144:# Annotation - times
1523409005144:for (i in 1:nrow(annotationData))  {
1523409005145:timePlot <- timePlot + annotation_custom(
1523409005145:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1, gp = gpar(cex = 1.01), rot = 310),
1523409005145:ymin = log10(annotationData$timeMarks[i]),
1523409005146:ymax = log10(annotationData$timeMarks[i]),
1523409005146:xmin = 0.5,
1523409005146:xmax = 0.5)
1523409005147:}
1523409005164:# aGrob    <- textGrob(label = "30s", hjust = 0, vjust = 1, gp = gpar(cex = 1.05), rot = 315)
1523409005165:# timePlot <- timePlot + annotation_custom(grob = aGrob,
1523409005165:#                                          xmin = 0.2,  xmax = 0.2,
1523409005165:#                                          ymin = log10(30), ymax = log10(30))
1523409005166:gt <- ggplot_gtable(ggplot_build(timePlot))
1523409005698:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523409005699:grid.draw(gt)
1523409015518:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523409015519:geom_hline(data = annotationData, aes(yintercept = timeMarks), size = 0.2, color = gridColor) +
1523409015520:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523409015521:stat = "identity", position = position_dodge(width=0.9)) +
1523409015522:scale_y_log10(expand = c(0, 0), position = "top") +
1523409015523:scale_fill_manual(values = customPalette) +
1523409015523:publicationTheme +
1523409015524:labs(x = "Typing Tool",
1523409015525:y = "Run Time (s)\n") + coord_flip()
1523409015538:timePlot
1523409015885:# Annotation - times
1523409015885:for (i in 1:nrow(annotationData))  {
1523409015886:timePlot <- timePlot + annotation_custom(
1523409015886:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1, gp = gpar(cex = 1.01), rot = 310),
1523409015886:ymin = log10(annotationData$timeMarks[i]),
1523409015887:ymax = log10(annotationData$timeMarks[i]),
1523409015887:xmin = 0.4,
1523409015888:xmax = 0.4)
1523409015888:}
1523409015906:# aGrob    <- textGrob(label = "30s", hjust = 0, vjust = 1, gp = gpar(cex = 1.05), rot = 315)
1523409015906:# timePlot <- timePlot + annotation_custom(grob = aGrob,
1523409015906:#                                          xmin = 0.2,  xmax = 0.2,
1523409015907:#                                          ymin = log10(30), ymax = log10(30))
1523409015907:gt <- ggplot_gtable(ggplot_build(timePlot))
1523409016436:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523409016436:grid.draw(gt)
1523409111969:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523409111969:geom_hline(data = annotationData, aes(yintercept = timeMarks), size = 0.2, color = gridColor) +
1523409111970:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523409111970:stat = "identity", position = position_dodge(width=0.9)) +
1523409111970:scale_y_log10(expand = c(0, 0), position = "top") +
1523409111971:scale_fill_manual(values = customPalette) +
1523409111971:publicationTheme +
1523409111971:labs(x = "Typing Tool",
1523409111972:y = "Run Time (s)\n") + coord_flip()
1523409111987:timePlot
1523409112267:# Annotation - times
1523409112267:for (i in 1:nrow(annotationData))  {
1523409112267:timePlot <- timePlot + annotation_custom(
1523409112268:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523409112268:rot = 310, gp = gpar(cex = 1.01, col = "darkgrey")),
1523409112268:ymin = log10(annotationData$timeMarks[i]),
1523409112269:ymax = log10(annotationData$timeMarks[i]),
1523409112269:xmin = 0.4,
1523409112269:xmax = 0.4)
1523409112270:}
1523409112296:# aGrob    <- textGrob(label = "30s", hjust = 0, vjust = 1, gp = gpar(cex = 1.05), rot = 315)
1523409112296:# timePlot <- timePlot + annotation_custom(grob = aGrob,
1523409112297:#                                          xmin = 0.2,  xmax = 0.2,
1523409112297:#                                          ymin = log10(30), ymax = log10(30))
1523409112297:gt <- ggplot_gtable(ggplot_build(timePlot))
1523409112984:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523409112985:grid.draw(gt)
1523409129007:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523409129008:geom_hline(data = annotationData, aes(yintercept = timeMarks), size = 0.2, color = gridColor) +
1523409129009:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523409129010:stat = "identity", position = position_dodge(width=0.9)) +
1523409129010:scale_y_log10(expand = c(0, 0), position = "top") +
1523409129011:scale_fill_manual(values = customPalette) +
1523409129016:publicationTheme +
1523409129016:labs(x = "Typing Tool",
1523409129017:y = "Run Time (s)\n") + coord_flip()
1523409129033:timePlot
1523409129397:# Annotation - times
1523409129398:for (i in 1:nrow(annotationData))  {
1523409129398:timePlot <- timePlot + annotation_custom(
1523409129398:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523409129399:rot = 310, gp = gpar(cex = 1.01, col = "#333333")),
1523409129399:ymin = log10(annotationData$timeMarks[i]),
1523409129399:ymax = log10(annotationData$timeMarks[i]),
1523409129400:xmin = 0.4,
1523409129400:xmax = 0.4)
1523409129400:}
1523409129426:# aGrob    <- textGrob(label = "30s", hjust = 0, vjust = 1, gp = gpar(cex = 1.05), rot = 315)
1523409129426:# timePlot <- timePlot + annotation_custom(grob = aGrob,
1523409129427:#                                          xmin = 0.2,  xmax = 0.2,
1523409129427:#                                          ymin = log10(30), ymax = log10(30))
1523409129428:gt <- ggplot_gtable(ggplot_build(timePlot))
1523409130056:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523409130057:grid.draw(gt)
1523409257809:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523409257810:geom_hline(data = annotationData, aes(yintercept = timeMarks), size = 0.2, color = gridColor) +
1523409257810:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523409257811:stat = "identity", position = position_dodge(width=0.9)) +
1523409257811:scale_y_log10(expand = c(0, 0), position = "top") +
1523409257811:scale_fill_manual(values = customPalette) +
1523409257812:publicationTheme +
1523409257812:labs(x = "Typing Tool",
1523409257813:y = "Run Time (s)\n") + coord_flip()
1523409257820:timePlot
1523409258141:# Annotation - times
1523409258141:for (i in 1:nrow(annotationData))  {
1523409258142:timePlot <- timePlot + annotation_custom(
1523409258142:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523409258142:rot = 310, gp = gpar(fontzise = 10, col = "#333333")),
1523409258143:ymin = log10(annotationData$timeMarks[i]),
1523409258143:ymax = log10(annotationData$timeMarks[i]),
1523409258143:xmin = 0.4,
1523409258144:xmax = 0.4)
1523409258144:}
1523409258169:# aGrob    <- textGrob(label = "30s", hjust = 0, vjust = 1, gp = gpar(cex = 1.05), rot = 315)
1523409258170:# timePlot <- timePlot + annotation_custom(grob = aGrob,
1523409258170:#                                          xmin = 0.2,  xmax = 0.2,
1523409258170:#                                          ymin = log10(30), ymax = log10(30))
1523409258171:gt <- ggplot_gtable(ggplot_build(timePlot))
1523409258692:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523409258693:grid.draw(gt)
1523409269765:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523409269766:geom_hline(data = annotationData, aes(yintercept = timeMarks), size = 0.2, color = gridColor) +
1523409269767:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523409269767:stat = "identity", position = position_dodge(width=0.9)) +
1523409269768:scale_y_log10(expand = c(0, 0), position = "top") +
1523409269768:scale_fill_manual(values = customPalette) +
1523409269769:publicationTheme +
1523409269769:labs(x = "Typing Tool",
1523409269770:y = "Run Time (s)\n") + coord_flip()
1523409269780:timePlot
1523409270126:# Annotation - times
1523409270127:for (i in 1:nrow(annotationData))  {
1523409270127:timePlot <- timePlot + annotation_custom(
1523409270127:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523409270128:rot = 310, gp = gpar(fontzise = 12, col = "#333333")),
1523409270128:ymin = log10(annotationData$timeMarks[i]),
1523409270128:ymax = log10(annotationData$timeMarks[i]),
1523409270129:xmin = 0.4,
1523409270129:xmax = 0.4)
1523409270129:}
1523409270149:# aGrob    <- textGrob(label = "30s", hjust = 0, vjust = 1, gp = gpar(cex = 1.05), rot = 315)
1523409270149:# timePlot <- timePlot + annotation_custom(grob = aGrob,
1523409270150:#                                          xmin = 0.2,  xmax = 0.2,
1523409270150:#                                          ymin = log10(30), ymax = log10(30))
1523409270151:gt <- ggplot_gtable(ggplot_build(timePlot))
1523409270741:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523409270741:grid.draw(gt)
1523409282510:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523409282511:geom_hline(data = annotationData, aes(yintercept = timeMarks), size = 0.2, color = gridColor) +
1523409282512:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523409282513:stat = "identity", position = position_dodge(width=0.9)) +
1523409282514:scale_y_log10(expand = c(0, 0), position = "top") +
1523409282514:scale_fill_manual(values = customPalette) +
1523409282516:publicationTheme +
1523409282516:labs(x = "Typing Tool",
1523409282517:y = "Run Time (s)\n") + coord_flip()
1523409282537:timePlot
1523409282851:# Annotation - times
1523409282851:for (i in 1:nrow(annotationData))  {
1523409282852:timePlot <- timePlot + annotation_custom(
1523409282852:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523409282852:rot = 310, gp = gpar(fontzise = 30, col = "#333333")),
1523409282853:ymin = log10(annotationData$timeMarks[i]),
1523409282853:ymax = log10(annotationData$timeMarks[i]),
1523409282853:xmin = 0.4,
1523409282854:xmax = 0.4)
1523409282854:}
1523409282872:# aGrob    <- textGrob(label = "30s", hjust = 0, vjust = 1, gp = gpar(cex = 1.05), rot = 315)
1523409282873:# timePlot <- timePlot + annotation_custom(grob = aGrob,
1523409282873:#                                          xmin = 0.2,  xmax = 0.2,
1523409282873:#                                          ymin = log10(30), ymax = log10(30))
1523409282874:gt <- ggplot_gtable(ggplot_build(timePlot))
1523409283386:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523409283387:grid.draw(gt)
1523409309688:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523409309688:geom_hline(data = annotationData, aes(yintercept = timeMarks), size = 0.2, color = gridColor) +
1523409309689:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523409309690:stat = "identity", position = position_dodge(width=0.9)) +
1523409309690:scale_y_log10(expand = c(0, 0), position = "top") +
1523409309691:scale_fill_manual(values = customPalette) +
1523409309691:publicationTheme +
1523409309692:labs(x = "Typing Tool",
1523409309692:y = "Run Time (s)\n") + coord_flip()
1523409309703:timePlot
1523409309970:# Annotation - times
1523409309971:for (i in 1:nrow(annotationData))  {
1523409309971:timePlot <- timePlot + annotation_custom(
1523409309972:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523409309972:rot = 310, gp = gpar(cex = 1.01, col = "#333333")),
1523409309972:ymin = log10(annotationData$timeMarks[i]),
1523409309973:ymax = log10(annotationData$timeMarks[i]),
1523409309973:xmin = 0.4,
1523409309973:xmax = 0.4)
1523409309974:}
1523409309999:# aGrob    <- textGrob(label = "30s", hjust = 0, vjust = 1, gp = gpar(cex = 1.05), rot = 315)
1523409309999:# timePlot <- timePlot + annotation_custom(grob = aGrob,
1523409310000:#                                          xmin = 0.2,  xmax = 0.2,
1523409310000:#                                          ymin = log10(30), ymax = log10(30))
1523409310001:gt <- ggplot_gtable(ggplot_build(timePlot))
1523409310569:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523409310570:grid.draw(gt)
1523409349093:# STing vs other sequence typing software
1523409349094:# Install an load packages ------------------------------------------------
1523409349095:installAndLoadPackages <- function(pkg){
1523409349095:cat("Please wait a moment! Checking for required packages... ")
1523409349096:cat("Done!\n")
1523409349096:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1523409349096:if (length(new.pkg)) {
1523409349097:cat("Installing new packages... ")
1523409349097:install.packages(new.pkg, dependencies = TRUE,
1523409349098:repos="http://cran.rstudio.com/")
1523409349098:cat("Done!\n")
1523409349098:}
1523409349099:cat("Loading packages... \n")
1523409349099:sapply(pkg, require, character.only = TRUE)
1523409349100:cat("Done!\n")
1523409349100:}
1523409349101:requiredPackages <- c("dplyr", "readr", "ggpubr", "RColorBrewer", "gridExtra",
1523409349102:"extrafont")
1523409349102:installAndLoadPackages(requiredPackages)
1523409349108:# Sources -----------------------------------------------------------------
1523409349109:# Loading Data ------------------------------------------------------------
1523409349109:inFile   <- "data/typer/stringMLST-comparisons.tsv"
1523409349110:compData <- read_tsv(inFile)
1523409349114:# General configuration ---------------------------------------------------
1523409349115:customPalette <- c("#0a4f75","#91bbe4","#d7e4f5")
1523409349115:customPalette <- rev(brewer.pal(n = 7, name = "Paired"))
1523409349116:customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#c81837"))
1523409349117:customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#33A02C"))
1523409349117:customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "gray50"))
1523409349118:customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#86827F"))
1523409349118:customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#e8702a", "#edc374", "#faebd7", "#86827F"))
1523409349119:width     <- 9
1523409349119:height    <- width * 0.618
1523409349120:lineSize  <- 0.3
1523409349120:axisColor <- "#666666"
1523409349121:gridColor <- "#cccccc"
1523409349122:baseTextSize <- 22
1523409349122:barAnnotTextSize <- 4
1523409349123:# baseFontFamily <- "Helvetica"
1523409349123:baseFontFamily <- 'Arial'
1523409349124:baseFontFamily <- 'HelveticaNeueLT Com 45 Lt'
1523409349124:baseFontFamily <- 'HelveticaNeueLT Std Lt'
1523409349125:customTheme <- list(
1523409349125:# theme_Publication_2(),
1523409349126:# guides(fill = guide_legend(title.position = "left"#,
1523409349126:#                           # label.vjust = -0.8
1523409349126:#       )),
1523409349127:# panel.grid = element_blank(),
1523409349127:# panel.border = element_blank()#,
1523409349127:# scale_y_continuous(expand = c(0, 0)),
1523409349128:theme(
1523409349128:axis.line            = element_line(colour = axisColor, size = lineSize),
1523409349128:axis.line.y          = element_blank(),
1523409349129:# axis.text            = element_text(size = baseTextSize * 0.875),#,
1523409349129:axis.text            = element_text(size = baseTextSize * 0.875,
1523409349129:family = baseFontFamily, color = "black"),
1523409349130:# axis.ticks           = element_line(size = lineSize),
1523409349130:axis.ticks.y         = element_blank(),
1523409349131:axis.title           = element_text(size = baseTextSize),#,
1523409349131:# axis.title           = element_text(size = baseTextSize,
1523409349131:# family = baseFontFamily),
1523409349132:axis.title.y         = element_blank(),
1523409349132:# axis.title.x        = element_blank(),
1523409349133:legend.direction     = "horizontal",
1523409349133:legend.justification = c(0.5, 0.5),
1523409349133:legend.key.height    = unit(5, "mm"),
1523409349134:legend.key.width     = unit(8, "mm"),
1523409349134:legend.position      = "bottom",
1523409349135:legend.title         = element_blank(),
1523409349135:panel.background     = element_blank(),
1523409349136:panel.grid.major     = element_line(colour = gridColor, size = lineSize),
1523409349136:panel.grid.major.y   = element_blank(),
1523409349137:plot.margin          = unit(c(0.2,1.8,0.2,0.2),"cm"),
1523409349137:# text                 = element_text(size = baseTextSize)#,
1523409349137:text                 = element_text(size = baseTextSize,
1523409349139:family = baseFontFamily)
1523409349139:),
1523409349139:coord_flip()
1523409349140:)
1523409349142:publicationTheme <- list(
1523409357128:publicationTheme <- list(
1523409357129:theme_pubr() +
1523409357129:theme(axis.ticks.y = element_blank(),
1523409357130:axis.line.y = element_blank(),
1523409357130:panel.grid.major.x   = element_line(colour = gridColor, size = lineSize),
1523409357131:plot.margin = margin(8, 20, 20, 8, "mm"),
1523409357132:axis.text.y = element_text(margin=margin(1,1,1,1,"mm")))
1523409357133:)
1523409357146:toolNameLevels <- compData$Tool_Name[c(6,4,5,7,3,2,1)]
1523409357148:# Preparing data ----------------------------------------------------------
1523409357149:dataToPlot <- compData %>%
1523409357149:arrange(Alleles) %>%
1523409357150:mutate(Tool_Name = factor(Tool_Name, toolNameLevels))
1523409357153:# Predictions plot ----------------------------------------------------------
1523409357154:ggbarplot(dataToPlot, x = "Tool_Name", y = "Alleles",
1523409357155:fill = "Tool_Name",
1523409357155:# color = "white",            # Set bar border colors to white
1523409357155:palette = customPalette,
1523409357156:rotate = T
1523409357156:# position = position_dodge(width=0.8)
1523409357157:# sort.val = "desc",          # Sort the value in dscending order
1523409357157:# sort.by.groups = FALSE,     # Don't sort inside each group
1523409357158:# x.text.angle = 90           # Rotate vertically x axis texts
1523409357158:) +
1523409357159:scale_y_continuous(expand = c(0, 0), position = "top") +
1523409357159:theme(axis.ticks.y = element_blank(),
1523409357159:axis.line.y = element_blank(),
1523409357160:# panel.grid.major     = element_line(colour = gridColor, size = lineSize),
1523409357160:panel.grid.major.x   = element_line(colour = gridColor, size = lineSize),
1523409357161:plot.margin = margin(8, 8, 8, 8, "mm"),
1523409357161:axis.text.y = element_text(margin=margin(1,1,1,1,"mm"))) +
1523409357162:labs(x = "Typing Tool",
1523409357163:y = "Correct Alleles (%)\n")
1523409357525:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523409357525:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523409357526:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523409357527:geom_hline(data = annotationData, aes(yintercept = timeMarks), size = 0.2, color = gridColor) +
1523409357527:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523409357527:stat = "identity", position = position_dodge(width=0.9)) +
1523409357528:scale_y_log10(expand = c(0, 0), position = "top") +
1523409357528:scale_fill_manual(values = customPalette) +
1523409357528:publicationTheme +
1523409357529:labs(x = "Typing Tool",
1523409357529:y = "Run Time (s)\n") + coord_flip()
1523409357537:timePlot
1523409357978:# Annotation - times
1523409357979:for (i in 1:nrow(annotationData))  {
1523409357979:timePlot <- timePlot + annotation_custom(
1523409357980:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523409357980:rot = 310, gp = gpar(cex = 1.01, col = "#333333")),
1523409357981:ymin = log10(annotationData$timeMarks[i]),
1523409357982:ymax = log10(annotationData$timeMarks[i]),
1523409357982:xmin = 0.4,
1523409357983:xmax = 0.4)
1523409357983:}
1523409358025:# aGrob    <- textGrob(label = "30s", hjust = 0, vjust = 1, gp = gpar(cex = 1.05), rot = 315)
1523409358026:# timePlot <- timePlot + annotation_custom(grob = aGrob,
1523409358026:#                                          xmin = 0.2,  xmax = 0.2,
1523409358027:#                                          ymin = log10(30), ymax = log10(30))
1523409358028:gt <- ggplot_gtable(ggplot_build(timePlot))
1523409358615:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523409358615:grid.draw(gt)
1523409358697:# Annotation out of the plot ----------------------------------------------
1523409358698:#
1523409358698:# library (ggplot2)
1523409358698:# library(grid)
1523409358699:#
1523409358699:# df=data.frame(y=c("cat1","cat2","cat3"),x=c(12,10,14),n=c(5,15,20))
1523409358699:#
1523409358700:# p <- ggplot(df, aes(x,y)) + geom_point() +            # Base plot
1523409358700:#   theme(plot.margin = unit(c(1,3,1,1), "lines"))   # Make room for the grob
1523409358700:#
1523409358701:# for (i in 1:length(df$n))  {
1523409358701:#   p <- p + annotation_custom(
1523409358701:#     grob = textGrob(label = df$n[i], hjust = 0, gp = gpar(cex = 1.5)),
1523409358701:#     ymin = df$y[i],      # Vertical position of the textGrob
1523409358702:#     ymax = df$y[i],
1523409358702:#     xmin = 14.3,         # Note: The grobs are positioned outside the plot area
1523409358702:#     xmax = 14.3)
1523409358703:# }
1523409358703:#
1523409358703:# # Code to override clipping
1523409358704:# gt <- ggplot_gtable(ggplot_build(p))
1523409358704:# gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523409358704:# grid.draw(gt)
1523409385819:publicationTheme <- list(
1523409385820:theme_pubr() +
1523409385821:theme(axis.ticks.y = element_blank(),
1523409385821:axis.line.y = element_blank(),
1523409385821:panel.grid.major.x   = element_line(colour = gridColor, size = lineSize),
1523409385822:plot.margin = margin(8, 15, 15, 8, "mm"),
1523409385822:axis.text.y = element_text(margin=margin(1,1,1,1,"mm")))
1523409385823:)
1523409385831:toolNameLevels <- compData$Tool_Name[c(6,4,5,7,3,2,1)]
1523409385832:# Preparing data ----------------------------------------------------------
1523409385832:dataToPlot <- compData %>%
1523409385832:arrange(Alleles) %>%
1523409385833:mutate(Tool_Name = factor(Tool_Name, toolNameLevels))
1523409385836:# Predictions plot ----------------------------------------------------------
1523409385836:ggbarplot(dataToPlot, x = "Tool_Name", y = "Alleles",
1523409385837:fill = "Tool_Name",
1523409385837:# color = "white",            # Set bar border colors to white
1523409385837:palette = customPalette,
1523409385838:rotate = T
1523409385838:# position = position_dodge(width=0.8)
1523409385838:# sort.val = "desc",          # Sort the value in dscending order
1523409385839:# sort.by.groups = FALSE,     # Don't sort inside each group
1523409385839:# x.text.angle = 90           # Rotate vertically x axis texts
1523409385839:) +
1523409385839:scale_y_continuous(expand = c(0, 0), position = "top") +
1523409385840:theme(axis.ticks.y = element_blank(),
1523409385840:axis.line.y = element_blank(),
1523409385840:# panel.grid.major     = element_line(colour = gridColor, size = lineSize),
1523409385841:panel.grid.major.x   = element_line(colour = gridColor, size = lineSize),
1523409385841:plot.margin = margin(8, 8, 8, 8, "mm"),
1523409385841:axis.text.y = element_text(margin=margin(1,1,1,1,"mm"))) +
1523409385842:labs(x = "Typing Tool",
1523409385842:y = "Correct Alleles (%)\n")
1523409386216:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523409386217:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523409386218:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523409386218:geom_hline(data = annotationData, aes(yintercept = timeMarks), size = 0.2, color = gridColor) +
1523409386218:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523409386219:stat = "identity", position = position_dodge(width=0.9)) +
1523409386219:scale_y_log10(expand = c(0, 0), position = "top") +
1523409386219:scale_fill_manual(values = customPalette) +
1523409386220:publicationTheme +
1523409386220:labs(x = "Typing Tool",
1523409386220:y = "Run Time (s)\n") + coord_flip()
1523409386229:timePlot
1523409386740:# Annotation - times
1523409386740:for (i in 1:nrow(annotationData))  {
1523409386741:timePlot <- timePlot + annotation_custom(
1523409386741:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523409386741:rot = 310, gp = gpar(cex = 1.01, col = "#333333")),
1523409386742:ymin = log10(annotationData$timeMarks[i]),
1523409386742:ymax = log10(annotationData$timeMarks[i]),
1523409386742:xmin = 0.4,
1523409386743:xmax = 0.4)
1523409386743:}
1523409386772:# aGrob    <- textGrob(label = "30s", hjust = 0, vjust = 1, gp = gpar(cex = 1.05), rot = 315)
1523409386772:# timePlot <- timePlot + annotation_custom(grob = aGrob,
1523409386772:#                                          xmin = 0.2,  xmax = 0.2,
1523409386773:#                                          ymin = log10(30), ymax = log10(30))
1523409386773:gt <- ggplot_gtable(ggplot_build(timePlot))
1523409387320:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523409387320:grid.draw(gt)
1523409387414:# Annotation out of the plot ----------------------------------------------
1523409387414:#
1523409387414:# library (ggplot2)
1523409387415:# library(grid)
1523409387415:#
1523409387415:# df=data.frame(y=c("cat1","cat2","cat3"),x=c(12,10,14),n=c(5,15,20))
1523409387415:#
1523409387416:# p <- ggplot(df, aes(x,y)) + geom_point() +            # Base plot
1523409387416:#   theme(plot.margin = unit(c(1,3,1,1), "lines"))   # Make room for the grob
1523409387416:#
1523409387417:# for (i in 1:length(df$n))  {
1523409387417:#   p <- p + annotation_custom(
1523409387417:#     grob = textGrob(label = df$n[i], hjust = 0, gp = gpar(cex = 1.5)),
1523409387418:#     ymin = df$y[i],      # Vertical position of the textGrob
1523409387418:#     ymax = df$y[i],
1523409387418:#     xmin = 14.3,         # Note: The grobs are positioned outside the plot area
1523409387418:#     xmax = 14.3)
1523409387419:# }
1523409387419:#
1523409387419:# # Code to override clipping
1523409387420:# gt <- ggplot_gtable(ggplot_build(p))
1523409387420:# gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523409387420:# grid.draw(gt)
1523409398166:publicationTheme <- list(
1523409398167:theme_pubr() +
1523409398168:theme(axis.ticks.y = element_blank(),
1523409398169:axis.line.y = element_blank(),
1523409398169:panel.grid.major.x   = element_line(colour = gridColor, size = lineSize),
1523409398170:plot.margin = margin(8, 10, 15, 8, "mm"),
1523409398171:axis.text.y = element_text(margin=margin(1,1,1,1,"mm")))
1523409398171:)
1523409398183:toolNameLevels <- compData$Tool_Name[c(6,4,5,7,3,2,1)]
1523409398184:# Preparing data ----------------------------------------------------------
1523409398185:dataToPlot <- compData %>%
1523409398185:arrange(Alleles) %>%
1523409398185:mutate(Tool_Name = factor(Tool_Name, toolNameLevels))
1523409398189:# Predictions plot ----------------------------------------------------------
1523409398190:ggbarplot(dataToPlot, x = "Tool_Name", y = "Alleles",
1523409398190:fill = "Tool_Name",
1523409398190:# color = "white",            # Set bar border colors to white
1523409398191:palette = customPalette,
1523409398191:rotate = T
1523409398191:# position = position_dodge(width=0.8)
1523409398192:# sort.val = "desc",          # Sort the value in dscending order
1523409398192:# sort.by.groups = FALSE,     # Don't sort inside each group
1523409398193:# x.text.angle = 90           # Rotate vertically x axis texts
1523409398193:) +
1523409398193:scale_y_continuous(expand = c(0, 0), position = "top") +
1523409398194:theme(axis.ticks.y = element_blank(),
1523409398194:axis.line.y = element_blank(),
1523409398195:# panel.grid.major     = element_line(colour = gridColor, size = lineSize),
1523409398196:panel.grid.major.x   = element_line(colour = gridColor, size = lineSize),
1523409398196:plot.margin = margin(8, 8, 8, 8, "mm"),
1523409398197:axis.text.y = element_text(margin=margin(1,1,1,1,"mm"))) +
1523409398197:labs(x = "Typing Tool",
1523409398197:y = "Correct Alleles (%)\n")
1523409398474:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523409398475:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523409398476:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523409398476:geom_hline(data = annotationData, aes(yintercept = timeMarks), size = 0.2, color = gridColor) +
1523409398477:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523409398477:stat = "identity", position = position_dodge(width=0.9)) +
1523409398477:scale_y_log10(expand = c(0, 0), position = "top") +
1523409398478:scale_fill_manual(values = customPalette) +
1523409398478:publicationTheme +
1523409398478:labs(x = "Typing Tool",
1523409398479:y = "Run Time (s)\n") + coord_flip()
1523409398486:timePlot
1523409398926:# Annotation - times
1523409398927:for (i in 1:nrow(annotationData))  {
1523409398927:timePlot <- timePlot + annotation_custom(
1523409398927:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523409398928:rot = 310, gp = gpar(cex = 1.01, col = "#333333")),
1523409398928:ymin = log10(annotationData$timeMarks[i]),
1523409398928:ymax = log10(annotationData$timeMarks[i]),
1523409398929:xmin = 0.4,
1523409398929:xmax = 0.4)
1523409398929:}
1523409398946:# aGrob    <- textGrob(label = "30s", hjust = 0, vjust = 1, gp = gpar(cex = 1.05), rot = 315)
1523409398946:# timePlot <- timePlot + annotation_custom(grob = aGrob,
1523409398946:#                                          xmin = 0.2,  xmax = 0.2,
1523409398947:#                                          ymin = log10(30), ymax = log10(30))
1523409398947:gt <- ggplot_gtable(ggplot_build(timePlot))
1523409399457:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523409399458:grid.draw(gt)
1523409399538:# Annotation out of the plot ----------------------------------------------
1523409399538:#
1523409399539:# library (ggplot2)
1523409399539:# library(grid)
1523409399540:#
1523409399540:# df=data.frame(y=c("cat1","cat2","cat3"),x=c(12,10,14),n=c(5,15,20))
1523409399541:#
1523409399541:# p <- ggplot(df, aes(x,y)) + geom_point() +            # Base plot
1523409399542:#   theme(plot.margin = unit(c(1,3,1,1), "lines"))   # Make room for the grob
1523409399542:#
1523409399543:# for (i in 1:length(df$n))  {
1523409399543:#   p <- p + annotation_custom(
1523409399544:#     grob = textGrob(label = df$n[i], hjust = 0, gp = gpar(cex = 1.5)),
1523409399544:#     ymin = df$y[i],      # Vertical position of the textGrob
1523409399545:#     ymax = df$y[i],
1523409399545:#     xmin = 14.3,         # Note: The grobs are positioned outside the plot area
1523409399546:#     xmax = 14.3)
1523409399546:# }
1523409399547:#
1523409399547:# # Code to override clipping
1523409399548:# gt <- ggplot_gtable(ggplot_build(p))
1523409399548:# gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523409399549:# grid.draw(gt)
1523409453337:publicationTheme <- list(
1523409453338:theme_pubr() +
1523409453339:theme(axis.ticks.y = element_blank(),
1523409453340:axis.line.y = element_blank(),
1523409453341:panel.grid.major.x   = element_line(colour = gridColor,
1523409453341:size = lineSize*1.005),
1523409453342:plot.margin = margin(8, 10, 15, 8, "mm"),
1523409453343:axis.text.y = element_text(margin=margin(1,1,1,1,"mm")))
1523409453343:)
1523409453351:toolNameLevels <- compData$Tool_Name[c(6,4,5,7,3,2,1)]
1523409453352:# Preparing data ----------------------------------------------------------
1523409453353:dataToPlot <- compData %>%
1523409453353:arrange(Alleles) %>%
1523409453353:mutate(Tool_Name = factor(Tool_Name, toolNameLevels))
1523409453356:# Predictions plot ----------------------------------------------------------
1523409453357:ggbarplot(dataToPlot, x = "Tool_Name", y = "Alleles",
1523409453358:fill = "Tool_Name",
1523409453358:# color = "white",            # Set bar border colors to white
1523409453358:palette = customPalette,
1523409453359:rotate = T
1523409453359:# position = position_dodge(width=0.8)
1523409453360:# sort.val = "desc",          # Sort the value in dscending order
1523409453360:# sort.by.groups = FALSE,     # Don't sort inside each group
1523409453360:# x.text.angle = 90           # Rotate vertically x axis texts
1523409453361:) +
1523409453361:scale_y_continuous(expand = c(0, 0), position = "top") +
1523409453362:theme(axis.ticks.y = element_blank(),
1523409453362:axis.line.y = element_blank(),
1523409453362:# panel.grid.major     = element_line(colour = gridColor, size = lineSize),
1523409453363:panel.grid.major.x   = element_line(colour = gridColor, size = lineSize),
1523409453364:plot.margin = margin(8, 8, 8, 8, "mm"),
1523409453365:axis.text.y = element_text(margin=margin(1,1,1,1,"mm"))) +
1523409453365:labs(x = "Typing Tool",
1523409453366:y = "Correct Alleles (%)\n")
1523409453679:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523409453679:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523409453681:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523409453681:geom_hline(data = annotationData, aes(yintercept = timeMarks), size = 0.2, color = gridColor) +
1523409453681:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523409453682:stat = "identity", position = position_dodge(width=0.9)) +
1523409453682:scale_y_log10(expand = c(0, 0), position = "top") +
1523409453682:scale_fill_manual(values = customPalette) +
1523409453683:publicationTheme +
1523409453683:labs(x = "Typing Tool",
1523409453684:y = "Run Time (s)\n") + coord_flip()
1523409453691:timePlot
1523409454256:# Annotation - times
1523409454257:for (i in 1:nrow(annotationData))  {
1523409454257:timePlot <- timePlot + annotation_custom(
1523409454257:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523409454258:rot = 310, gp = gpar(cex = 1.01, col = "#333333")),
1523409454258:ymin = log10(annotationData$timeMarks[i]),
1523409454259:ymax = log10(annotationData$timeMarks[i]),
1523409454259:xmin = 0.4,
1523409454259:xmax = 0.4)
1523409454260:}
1523409454285:# aGrob    <- textGrob(label = "30s", hjust = 0, vjust = 1, gp = gpar(cex = 1.05), rot = 315)
1523409454285:# timePlot <- timePlot + annotation_custom(grob = aGrob,
1523409454285:#                                          xmin = 0.2,  xmax = 0.2,
1523409454285:#                                          ymin = log10(30), ymax = log10(30))
1523409454286:gt <- ggplot_gtable(ggplot_build(timePlot))
1523409454872:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523409454873:grid.draw(gt)
1523409454960:# Annotation out of the plot ----------------------------------------------
1523409454960:#
1523409454960:# library (ggplot2)
1523409454961:# library(grid)
1523409454961:#
1523409454961:# df=data.frame(y=c("cat1","cat2","cat3"),x=c(12,10,14),n=c(5,15,20))
1523409454961:#
1523409454962:# p <- ggplot(df, aes(x,y)) + geom_point() +            # Base plot
1523409454962:#   theme(plot.margin = unit(c(1,3,1,1), "lines"))   # Make room for the grob
1523409454962:#
1523409454963:# for (i in 1:length(df$n))  {
1523409454963:#   p <- p + annotation_custom(
1523409454963:#     grob = textGrob(label = df$n[i], hjust = 0, gp = gpar(cex = 1.5)),
1523409454964:#     ymin = df$y[i],      # Vertical position of the textGrob
1523409454964:#     ymax = df$y[i],
1523409454964:#     xmin = 14.3,         # Note: The grobs are positioned outside the plot area
1523409454964:#     xmax = 14.3)
1523409454965:# }
1523409454965:#
1523409454965:# # Code to override clipping
1523409454966:# gt <- ggplot_gtable(ggplot_build(p))
1523409454966:# gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523409454966:# grid.draw(gt)
1523409468322:publicationTheme <- list(
1523409468323:theme_pubr() +
1523409468323:theme(axis.ticks.y = element_blank(),
1523409468324:axis.line.y = element_blank(),
1523409468325:panel.grid.major.x   = element_line(colour = gridColor,
1523409468325:size = lineSize*1.05),
1523409468326:plot.margin = margin(8, 10, 15, 8, "mm"),
1523409468326:axis.text.y = element_text(margin=margin(1,1,1,1,"mm")))
1523409468327:)
1523409468339:toolNameLevels <- compData$Tool_Name[c(6,4,5,7,3,2,1)]
1523409468340:# Preparing data ----------------------------------------------------------
1523409468341:dataToPlot <- compData %>%
1523409468341:arrange(Alleles) %>%
1523409468342:mutate(Tool_Name = factor(Tool_Name, toolNameLevels))
1523409468344:# Predictions plot ----------------------------------------------------------
1523409468345:ggbarplot(dataToPlot, x = "Tool_Name", y = "Alleles",
1523409468345:fill = "Tool_Name",
1523409468346:# color = "white",            # Set bar border colors to white
1523409468346:palette = customPalette,
1523409468346:rotate = T
1523409468347:# position = position_dodge(width=0.8)
1523409468347:# sort.val = "desc",          # Sort the value in dscending order
1523409468348:# sort.by.groups = FALSE,     # Don't sort inside each group
1523409468348:# x.text.angle = 90           # Rotate vertically x axis texts
1523409468349:) +
1523409468349:scale_y_continuous(expand = c(0, 0), position = "top") +
1523409468349:theme(axis.ticks.y = element_blank(),
1523409468350:axis.line.y = element_blank(),
1523409468350:# panel.grid.major     = element_line(colour = gridColor, size = lineSize),
1523409468351:panel.grid.major.x   = element_line(colour = gridColor, size = lineSize),
1523409468351:plot.margin = margin(8, 8, 8, 8, "mm"),
1523409468352:axis.text.y = element_text(margin=margin(1,1,1,1,"mm"))) +
1523409468352:labs(x = "Typing Tool",
1523409468352:y = "Correct Alleles (%)\n")
1523409468726:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523409468726:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523409468728:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523409468728:geom_hline(data = annotationData, aes(yintercept = timeMarks), size = 0.2, color = gridColor) +
1523409468728:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523409468729:stat = "identity", position = position_dodge(width=0.9)) +
1523409468729:scale_y_log10(expand = c(0, 0), position = "top") +
1523409468729:scale_fill_manual(values = customPalette) +
1523409468730:publicationTheme +
1523409468730:labs(x = "Typing Tool",
1523409468730:y = "Run Time (s)\n") + coord_flip()
1523409468738:timePlot
1523409469182:# Annotation - times
1523409469183:for (i in 1:nrow(annotationData))  {
1523409469183:timePlot <- timePlot + annotation_custom(
1523409469183:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523409469184:rot = 310, gp = gpar(cex = 1.01, col = "#333333")),
1523409469184:ymin = log10(annotationData$timeMarks[i]),
1523409469184:ymax = log10(annotationData$timeMarks[i]),
1523409469185:xmin = 0.4,
1523409469185:xmax = 0.4)
1523409469185:}
1523409469205:# aGrob    <- textGrob(label = "30s", hjust = 0, vjust = 1, gp = gpar(cex = 1.05), rot = 315)
1523409469205:# timePlot <- timePlot + annotation_custom(grob = aGrob,
1523409469205:#                                          xmin = 0.2,  xmax = 0.2,
1523409469206:#                                          ymin = log10(30), ymax = log10(30))
1523409469206:gt <- ggplot_gtable(ggplot_build(timePlot))
1523409469778:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523409469778:grid.draw(gt)
1523409469868:# Annotation out of the plot ----------------------------------------------
1523409469868:#
1523409469868:# library (ggplot2)
1523409469869:# library(grid)
1523409469869:#
1523409469869:# df=data.frame(y=c("cat1","cat2","cat3"),x=c(12,10,14),n=c(5,15,20))
1523409469870:#
1523409469870:# p <- ggplot(df, aes(x,y)) + geom_point() +            # Base plot
1523409469870:#   theme(plot.margin = unit(c(1,3,1,1), "lines"))   # Make room for the grob
1523409469871:#
1523409469871:# for (i in 1:length(df$n))  {
1523409469871:#   p <- p + annotation_custom(
1523409469871:#     grob = textGrob(label = df$n[i], hjust = 0, gp = gpar(cex = 1.5)),
1523409469872:#     ymin = df$y[i],      # Vertical position of the textGrob
1523409469872:#     ymax = df$y[i],
1523409469872:#     xmin = 14.3,         # Note: The grobs are positioned outside the plot area
1523409469873:#     xmax = 14.3)
1523409469873:# }
1523409469873:#
1523409469874:# # Code to override clipping
1523409469874:# gt <- ggplot_gtable(ggplot_build(p))
1523409469874:# gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523409469874:# grid.draw(gt)
1523409480840:publicationTheme <- list(
1523409480840:theme_pubr() +
1523409480841:theme(axis.ticks.y = element_blank(),
1523409480841:axis.line.y = element_blank(),
1523409480842:panel.grid.major.x   = element_line(colour = gridColor,
1523409480842:size = lineSize*1.1),
1523409480842:plot.margin = margin(8, 10, 15, 8, "mm"),
1523409480843:axis.text.y = element_text(margin=margin(1,1,1,1,"mm")))
1523409480843:)
1523409480851:toolNameLevels <- compData$Tool_Name[c(6,4,5,7,3,2,1)]
1523409480852:# Preparing data ----------------------------------------------------------
1523409480853:dataToPlot <- compData %>%
1523409480853:arrange(Alleles) %>%
1523409480854:mutate(Tool_Name = factor(Tool_Name, toolNameLevels))
1523409480857:# Predictions plot ----------------------------------------------------------
1523409480857:ggbarplot(dataToPlot, x = "Tool_Name", y = "Alleles",
1523409480858:fill = "Tool_Name",
1523409480858:# color = "white",            # Set bar border colors to white
1523409480859:palette = customPalette,
1523409480859:rotate = T
1523409480860:# position = position_dodge(width=0.8)
1523409480860:# sort.val = "desc",          # Sort the value in dscending order
1523409480860:# sort.by.groups = FALSE,     # Don't sort inside each group
1523409480861:# x.text.angle = 90           # Rotate vertically x axis texts
1523409480861:) +
1523409480861:scale_y_continuous(expand = c(0, 0), position = "top") +
1523409480862:theme(axis.ticks.y = element_blank(),
1523409480862:axis.line.y = element_blank(),
1523409480863:# panel.grid.major     = element_line(colour = gridColor, size = lineSize),
1523409480863:panel.grid.major.x   = element_line(colour = gridColor, size = lineSize),
1523409480864:plot.margin = margin(8, 8, 8, 8, "mm"),
1523409480865:axis.text.y = element_text(margin=margin(1,1,1,1,"mm"))) +
1523409480865:labs(x = "Typing Tool",
1523409480866:y = "Correct Alleles (%)\n")
1523409481209:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523409481209:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523409481210:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523409481211:geom_hline(data = annotationData, aes(yintercept = timeMarks), size = 0.2, color = gridColor) +
1523409481211:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523409481211:stat = "identity", position = position_dodge(width=0.9)) +
1523409481212:scale_y_log10(expand = c(0, 0), position = "top") +
1523409481212:scale_fill_manual(values = customPalette) +
1523409481212:publicationTheme +
1523409481213:labs(x = "Typing Tool",
1523409481213:y = "Run Time (s)\n") + coord_flip()
1523409481221:timePlot
1523409481674:# Annotation - times
1523409481674:for (i in 1:nrow(annotationData))  {
1523409481675:timePlot <- timePlot + annotation_custom(
1523409481675:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523409481675:rot = 310, gp = gpar(cex = 1.01, col = "#333333")),
1523409481676:ymin = log10(annotationData$timeMarks[i]),
1523409481676:ymax = log10(annotationData$timeMarks[i]),
1523409481676:xmin = 0.4,
1523409481677:xmax = 0.4)
1523409481677:}
1523409481695:# aGrob    <- textGrob(label = "30s", hjust = 0, vjust = 1, gp = gpar(cex = 1.05), rot = 315)
1523409481695:# timePlot <- timePlot + annotation_custom(grob = aGrob,
1523409481695:#                                          xmin = 0.2,  xmax = 0.2,
1523409481695:#                                          ymin = log10(30), ymax = log10(30))
1523409481696:gt <- ggplot_gtable(ggplot_build(timePlot))
1523409482258:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523409482259:grid.draw(gt)
1523409482374:# Annotation out of the plot ----------------------------------------------
1523409482374:#
1523409482374:# library (ggplot2)
1523409482375:# library(grid)
1523409482375:#
1523409482375:# df=data.frame(y=c("cat1","cat2","cat3"),x=c(12,10,14),n=c(5,15,20))
1523409482376:#
1523409482376:# p <- ggplot(df, aes(x,y)) + geom_point() +            # Base plot
1523409482376:#   theme(plot.margin = unit(c(1,3,1,1), "lines"))   # Make room for the grob
1523409482376:#
1523409482377:# for (i in 1:length(df$n))  {
1523409482377:#   p <- p + annotation_custom(
1523409482377:#     grob = textGrob(label = df$n[i], hjust = 0, gp = gpar(cex = 1.5)),
1523409482378:#     ymin = df$y[i],      # Vertical position of the textGrob
1523409482378:#     ymax = df$y[i],
1523409482378:#     xmin = 14.3,         # Note: The grobs are positioned outside the plot area
1523409482378:#     xmax = 14.3)
1523409482379:# }
1523409482379:#
1523409482379:# # Code to override clipping
1523409482380:# gt <- ggplot_gtable(ggplot_build(p))
1523409482380:# gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523409482380:# grid.draw(gt)
1523409490745:publicationTheme <- list(
1523409490745:theme_pubr() +
1523409490746:theme(axis.ticks.y = element_blank(),
1523409490746:axis.line.y = element_blank(),
1523409490746:panel.grid.major.x   = element_line(colour = gridColor,
1523409490747:size = lineSize*1.5),
1523409490747:plot.margin = margin(8, 10, 15, 8, "mm"),
1523409490747:axis.text.y = element_text(margin=margin(1,1,1,1,"mm")))
1523409490748:)
1523409490756:toolNameLevels <- compData$Tool_Name[c(6,4,5,7,3,2,1)]
1523409490757:# Preparing data ----------------------------------------------------------
1523409490757:dataToPlot <- compData %>%
1523409490757:arrange(Alleles) %>%
1523409490758:mutate(Tool_Name = factor(Tool_Name, toolNameLevels))
1523409490760:# Predictions plot ----------------------------------------------------------
1523409490760:ggbarplot(dataToPlot, x = "Tool_Name", y = "Alleles",
1523409490761:fill = "Tool_Name",
1523409490761:# color = "white",            # Set bar border colors to white
1523409490761:palette = customPalette,
1523409490761:rotate = T
1523409490762:# position = position_dodge(width=0.8)
1523409490762:# sort.val = "desc",          # Sort the value in dscending order
1523409490762:# sort.by.groups = FALSE,     # Don't sort inside each group
1523409490763:# x.text.angle = 90           # Rotate vertically x axis texts
1523409490763:) +
1523409490763:scale_y_continuous(expand = c(0, 0), position = "top") +
1523409490764:theme(axis.ticks.y = element_blank(),
1523409490764:axis.line.y = element_blank(),
1523409490764:# panel.grid.major     = element_line(colour = gridColor, size = lineSize),
1523409490765:panel.grid.major.x   = element_line(colour = gridColor, size = lineSize),
1523409490765:plot.margin = margin(8, 8, 8, 8, "mm"),
1523409490765:axis.text.y = element_text(margin=margin(1,1,1,1,"mm"))) +
1523409490766:labs(x = "Typing Tool",
1523409490766:y = "Correct Alleles (%)\n")
1523409491165:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523409491165:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523409491167:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523409491167:geom_hline(data = annotationData, aes(yintercept = timeMarks), size = 0.2, color = gridColor) +
1523409491167:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523409491168:stat = "identity", position = position_dodge(width=0.9)) +
1523409491168:scale_y_log10(expand = c(0, 0), position = "top") +
1523409491168:scale_fill_manual(values = customPalette) +
1523409491169:publicationTheme +
1523409491169:labs(x = "Typing Tool",
1523409491170:y = "Run Time (s)\n") + coord_flip()
1523409491180:timePlot
1523409491616:# Annotation - times
1523409491617:for (i in 1:nrow(annotationData))  {
1523409491617:timePlot <- timePlot + annotation_custom(
1523409491617:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523409491618:rot = 310, gp = gpar(cex = 1.01, col = "#333333")),
1523409491618:ymin = log10(annotationData$timeMarks[i]),
1523409491618:ymax = log10(annotationData$timeMarks[i]),
1523409491619:xmin = 0.4,
1523409491619:xmax = 0.4)
1523409491619:}
1523409491650:# aGrob    <- textGrob(label = "30s", hjust = 0, vjust = 1, gp = gpar(cex = 1.05), rot = 315)
1523409491650:# timePlot <- timePlot + annotation_custom(grob = aGrob,
1523409491651:#                                          xmin = 0.2,  xmax = 0.2,
1523409491651:#                                          ymin = log10(30), ymax = log10(30))
1523409491651:gt <- ggplot_gtable(ggplot_build(timePlot))
1523409492231:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523409492231:grid.draw(gt)
1523409492332:# Annotation out of the plot ----------------------------------------------
1523409492333:#
1523409492333:# library (ggplot2)
1523409492333:# library(grid)
1523409492334:#
1523409492334:# df=data.frame(y=c("cat1","cat2","cat3"),x=c(12,10,14),n=c(5,15,20))
1523409492334:#
1523409492334:# p <- ggplot(df, aes(x,y)) + geom_point() +            # Base plot
1523409492335:#   theme(plot.margin = unit(c(1,3,1,1), "lines"))   # Make room for the grob
1523409492335:#
1523409492335:# for (i in 1:length(df$n))  {
1523409492336:#   p <- p + annotation_custom(
1523409492336:#     grob = textGrob(label = df$n[i], hjust = 0, gp = gpar(cex = 1.5)),
1523409492336:#     ymin = df$y[i],      # Vertical position of the textGrob
1523409492337:#     ymax = df$y[i],
1523409492337:#     xmin = 14.3,         # Note: The grobs are positioned outside the plot area
1523409492337:#     xmax = 14.3)
1523409492337:# }
1523409492338:#
1523409492338:# # Code to override clipping
1523409492338:# gt <- ggplot_gtable(ggplot_build(p))
1523409492339:# gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523409492339:# grid.draw(gt)
1523409755263:publicationTheme <- list(
1523409755263:theme_pubr() +
1523409755264:theme(
1523409755264:axis.line.y = element_blank(),
1523409755265:axis.text.y = element_text(margin=margin(1,1,1,1,"mm")),
1523409755265:axis.ticks.y = element_blank(),
1523409755265:panel.grid.major.x = element_line(colour = gridColor,
1523409755266:size = lineSize*1.5),
1523409755266:plot.margin = margin(8, 10, 15, 8, "mm"),
1523409755266:axis.text  = element_text(size = baseTextSize * 0.875,
1523409755267:family = baseFontFamily, color = "black")
1523409755267:)
1523409755267:)
1523409755276:toolNameLevels <- compData$Tool_Name[c(6,4,5,7,3,2,1)]
1523409755276:# Preparing data ----------------------------------------------------------
1523409755277:dataToPlot <- compData %>%
1523409755277:arrange(Alleles) %>%
1523409755277:mutate(Tool_Name = factor(Tool_Name, toolNameLevels))
1523409755280:# Predictions plot ----------------------------------------------------------
1523409755280:ggbarplot(dataToPlot, x = "Tool_Name", y = "Alleles",
1523409755281:fill = "Tool_Name",
1523409755281:# color = "white",            # Set bar border colors to white
1523409755281:palette = customPalette,
1523409755282:rotate = T
1523409755282:# position = position_dodge(width=0.8)
1523409755283:# sort.val = "desc",          # Sort the value in dscending order
1523409755283:# sort.by.groups = FALSE,     # Don't sort inside each group
1523409755283:# x.text.angle = 90           # Rotate vertically x axis texts
1523409755284:) +
1523409755284:scale_y_continuous(expand = c(0, 0), position = "top") +
1523409755284:theme(axis.ticks.y = element_blank(),
1523409755285:axis.line.y = element_blank(),
1523409755285:# panel.grid.major     = element_line(colour = gridColor, size = lineSize),
1523409755285:panel.grid.major.x   = element_line(colour = gridColor, size = lineSize),
1523409755286:plot.margin = margin(8, 8, 8, 8, "mm"),
1523409755286:axis.text.y = element_text(margin=margin(1,1,1,1,"mm"))) +
1523409755287:labs(x = "Typing Tool",
1523409755287:y = "Correct Alleles (%)\n")
1523409755689:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523409755689:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523409755690:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523409755691:geom_hline(data = annotationData, aes(yintercept = timeMarks), size = 0.2, color = gridColor) +
1523409755691:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523409755691:stat = "identity", position = position_dodge(width=0.9)) +
1523409755692:scale_y_log10(expand = c(0, 0), position = "top") +
1523409755692:scale_fill_manual(values = customPalette) +
1523409755692:publicationTheme +
1523409755693:labs(x = "Typing Tool",
1523409755693:y = "Run Time (s)\n") + coord_flip()
1523409755718:timePlot
1523409756372:# Annotation - times
1523409756372:for (i in 1:nrow(annotationData))  {
1523409756373:timePlot <- timePlot + annotation_custom(
1523409756373:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523409756374:rot = 310, gp = gpar(cex = 1.01, col = "#333333")),
1523409756374:ymin = log10(annotationData$timeMarks[i]),
1523409756374:ymax = log10(annotationData$timeMarks[i]),
1523409756375:xmin = 0.4,
1523409756375:xmax = 0.4)
1523409756375:}
1523409756397:# aGrob    <- textGrob(label = "30s", hjust = 0, vjust = 1, gp = gpar(cex = 1.05), rot = 315)
1523409756397:# timePlot <- timePlot + annotation_custom(grob = aGrob,
1523409756398:#                                          xmin = 0.2,  xmax = 0.2,
1523409756398:#                                          ymin = log10(30), ymax = log10(30))
1523409756398:gt <- ggplot_gtable(ggplot_build(timePlot))
1523409756939:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523409756940:grid.draw(gt)
1523409757044:# Annotation out of the plot ----------------------------------------------
1523409757045:#
1523409757045:# library (ggplot2)
1523409757046:# library(grid)
1523409757046:#
1523409757046:# df=data.frame(y=c("cat1","cat2","cat3"),x=c(12,10,14),n=c(5,15,20))
1523409757047:#
1523409757047:# p <- ggplot(df, aes(x,y)) + geom_point() +            # Base plot
1523409757048:#   theme(plot.margin = unit(c(1,3,1,1), "lines"))   # Make room for the grob
1523409757048:#
1523409757048:# for (i in 1:length(df$n))  {
1523409757049:#   p <- p + annotation_custom(
1523409757049:#     grob = textGrob(label = df$n[i], hjust = 0, gp = gpar(cex = 1.5)),
1523409757050:#     ymin = df$y[i],      # Vertical position of the textGrob
1523409757050:#     ymax = df$y[i],
1523409757050:#     xmin = 14.3,         # Note: The grobs are positioned outside the plot area
1523409757051:#     xmax = 14.3)
1523409757051:# }
1523409757052:#
1523409757052:# # Code to override clipping
1523409757053:# gt <- ggplot_gtable(ggplot_build(p))
1523409757053:# gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523409757053:# grid.draw(gt)
1523409814014:publicationTheme <- list(
1523409814014:theme_pubr() +
1523409814014:theme(
1523409814015:axis.line.y = element_blank(),
1523409814015:axis.text  = element_text(size = baseTextSize * 0.875,
1523409814015:family = baseFontFamily, color = "black"),
1523409814016:axis.text.y = element_text(margin=margin(1,1,1,1,"mm")),
1523409814016:axis.ticks.y = element_blank(),
1523409814017:axis.title  = element_text(size = baseTextSize),
1523409814017:panel.grid.major.x = element_line(colour = gridColor,
1523409814017:size = lineSize*1.5),
1523409814018:plot.margin = margin(8, 10, 15, 8, "mm")
1523409814018:)
1523409814018:)
1523409814026:toolNameLevels <- compData$Tool_Name[c(6,4,5,7,3,2,1)]
1523409814027:# Preparing data ----------------------------------------------------------
1523409814027:dataToPlot <- compData %>%
1523409814027:arrange(Alleles) %>%
1523409814028:mutate(Tool_Name = factor(Tool_Name, toolNameLevels))
1523409814031:# Predictions plot ----------------------------------------------------------
1523409814032:ggbarplot(dataToPlot, x = "Tool_Name", y = "Alleles",
1523409814033:fill = "Tool_Name",
1523409814033:# color = "white",            # Set bar border colors to white
1523409814033:palette = customPalette,
1523409814034:rotate = T
1523409814034:# position = position_dodge(width=0.8)
1523409814035:# sort.val = "desc",          # Sort the value in dscending order
1523409814035:# sort.by.groups = FALSE,     # Don't sort inside each group
1523409814036:# x.text.angle = 90           # Rotate vertically x axis texts
1523409814036:) +
1523409814036:scale_y_continuous(expand = c(0, 0), position = "top") +
1523409814037:theme(axis.ticks.y = element_blank(),
1523409814037:axis.line.y = element_blank(),
1523409814037:# panel.grid.major     = element_line(colour = gridColor, size = lineSize),
1523409814038:panel.grid.major.x   = element_line(colour = gridColor, size = lineSize),
1523409814038:plot.margin = margin(8, 8, 8, 8, "mm"),
1523409814039:axis.text.y = element_text(margin=margin(1,1,1,1,"mm"))) +
1523409814039:labs(x = "Typing Tool",
1523409814039:y = "Correct Alleles (%)\n")
1523409814414:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523409814415:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523409814417:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523409814418:geom_hline(data = annotationData, aes(yintercept = timeMarks), size = 0.2, color = gridColor) +
1523409814419:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523409814419:stat = "identity", position = position_dodge(width=0.9)) +
1523409814420:scale_y_log10(expand = c(0, 0), position = "top") +
1523409814421:scale_fill_manual(values = customPalette) +
1523409814421:publicationTheme +
1523409814422:labs(x = "Typing Tool",
1523409814422:y = "Run Time (s)\n") + coord_flip()
1523409814430:timePlot
1523409814870:# Annotation - times
1523409814870:for (i in 1:nrow(annotationData))  {
1523409814870:timePlot <- timePlot + annotation_custom(
1523409814871:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523409814871:rot = 310, gp = gpar(cex = 1.01, col = "#333333")),
1523409814871:ymin = log10(annotationData$timeMarks[i]),
1523409814872:ymax = log10(annotationData$timeMarks[i]),
1523409814872:xmin = 0.4,
1523409814872:xmax = 0.4)
1523409814873:}
1523409814890:# aGrob    <- textGrob(label = "30s", hjust = 0, vjust = 1, gp = gpar(cex = 1.05), rot = 315)
1523409814890:# timePlot <- timePlot + annotation_custom(grob = aGrob,
1523409814890:#                                          xmin = 0.2,  xmax = 0.2,
1523409814891:#                                          ymin = log10(30), ymax = log10(30))
1523409814891:gt <- ggplot_gtable(ggplot_build(timePlot))
1523409815771:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523409815772:grid.draw(gt)
1523409815868:# Annotation out of the plot ----------------------------------------------
1523409815868:#
1523409815869:# library (ggplot2)
1523409815869:# library(grid)
1523409815869:#
1523409815870:# df=data.frame(y=c("cat1","cat2","cat3"),x=c(12,10,14),n=c(5,15,20))
1523409815870:#
1523409815870:# p <- ggplot(df, aes(x,y)) + geom_point() +            # Base plot
1523409815871:#   theme(plot.margin = unit(c(1,3,1,1), "lines"))   # Make room for the grob
1523409815871:#
1523409815871:# for (i in 1:length(df$n))  {
1523409815872:#   p <- p + annotation_custom(
1523409815872:#     grob = textGrob(label = df$n[i], hjust = 0, gp = gpar(cex = 1.5)),
1523409815872:#     ymin = df$y[i],      # Vertical position of the textGrob
1523409815872:#     ymax = df$y[i],
1523409815873:#     xmin = 14.3,         # Note: The grobs are positioned outside the plot area
1523409815873:#     xmax = 14.3)
1523409815873:# }
1523409815874:#
1523409815874:# # Code to override clipping
1523409815874:# gt <- ggplot_gtable(ggplot_build(p))
1523409815875:# gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523409815875:# grid.draw(gt)
1523409960801:publicationTheme <- list(
1523409960801:theme_pubr() +
1523409960802:theme(
1523409960802:axis.line.y = element_blank(),
1523409960803:axis.text  = element_text(size = baseTextSize * 0.875,
1523409960803:family = baseFontFamily, color = "black"),
1523409960803:axis.text.y = element_text(margin=margin(1,1,1,1,"mm")),
1523409960804:axis.ticks.y = element_blank(),
1523409960804:axis.title  = element_text(size = baseTextSize),
1523409960805:panel.grid.major.x = element_line(colour = gridColor,
1523409960805:size = lineSize*1.5),
1523409960806:plot.margin = margin(8, 10, 15, 8, "mm"),
1523409960806:text = element_text(size = baseTextSize,
1523409960807:family = baseFontFamily)
1523409960807:)
1523409960807:)
1523409960816:toolNameLevels <- compData$Tool_Name[c(6,4,5,7,3,2,1)]
1523409960817:# Preparing data ----------------------------------------------------------
1523409960817:dataToPlot <- compData %>%
1523409960818:arrange(Alleles) %>%
1523409960818:mutate(Tool_Name = factor(Tool_Name, toolNameLevels))
1523409960821:# Predictions plot ----------------------------------------------------------
1523409960821:ggbarplot(dataToPlot, x = "Tool_Name", y = "Alleles",
1523409960822:fill = "Tool_Name",
1523409960822:# color = "white",            # Set bar border colors to white
1523409960823:palette = customPalette,
1523409960823:rotate = T
1523409960823:# position = position_dodge(width=0.8)
1523409960824:# sort.val = "desc",          # Sort the value in dscending order
1523409960824:# sort.by.groups = FALSE,     # Don't sort inside each group
1523409960824:# x.text.angle = 90           # Rotate vertically x axis texts
1523409960825:) +
1523409960825:scale_y_continuous(expand = c(0, 0), position = "top") +
1523409960825:theme(axis.ticks.y = element_blank(),
1523409960826:axis.line.y = element_blank(),
1523409960826:# panel.grid.major     = element_line(colour = gridColor, size = lineSize),
1523409960827:panel.grid.major.x   = element_line(colour = gridColor, size = lineSize),
1523409960827:plot.margin = margin(8, 8, 8, 8, "mm"),
1523409960827:axis.text.y = element_text(margin=margin(1,1,1,1,"mm"))) +
1523409960828:labs(x = "Typing Tool",
1523409960828:y = "Correct Alleles (%)\n")
1523409961115:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523409961115:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523409961116:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523409961117:geom_hline(data = annotationData, aes(yintercept = timeMarks), size = 0.2, color = gridColor) +
1523409961117:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523409961117:stat = "identity", position = position_dodge(width=0.9)) +
1523409961118:scale_y_log10(expand = c(0, 0), position = "top") +
1523409961118:scale_fill_manual(values = customPalette) +
1523409961118:publicationTheme +
1523409961119:labs(x = "Typing Tool",
1523409961119:y = "Run Time (s)\n") + coord_flip()
1523409961127:timePlot
1523409961572:# Annotation - times
1523409961573:for (i in 1:nrow(annotationData))  {
1523409961573:timePlot <- timePlot + annotation_custom(
1523409961573:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523409961574:rot = 310, gp = gpar(cex = 1.01, col = "#333333")),
1523409961574:ymin = log10(annotationData$timeMarks[i]),
1523409961574:ymax = log10(annotationData$timeMarks[i]),
1523409961575:xmin = 0.4,
1523409961575:xmax = 0.4)
1523409961575:}
1523409961593:# aGrob    <- textGrob(label = "30s", hjust = 0, vjust = 1, gp = gpar(cex = 1.05), rot = 315)
1523409961593:# timePlot <- timePlot + annotation_custom(grob = aGrob,
1523409961593:#                                          xmin = 0.2,  xmax = 0.2,
1523409961594:#                                          ymin = log10(30), ymax = log10(30))
1523409961594:gt <- ggplot_gtable(ggplot_build(timePlot))
1523409962168:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523409962169:grid.draw(gt)
1523409962264:# Annotation out of the plot ----------------------------------------------
1523409962265:#
1523409962265:# library (ggplot2)
1523409962265:# library(grid)
1523409962266:#
1523409962266:# df=data.frame(y=c("cat1","cat2","cat3"),x=c(12,10,14),n=c(5,15,20))
1523409962266:#
1523409962266:# p <- ggplot(df, aes(x,y)) + geom_point() +            # Base plot
1523409962267:#   theme(plot.margin = unit(c(1,3,1,1), "lines"))   # Make room for the grob
1523409962267:#
1523409962267:# for (i in 1:length(df$n))  {
1523409962268:#   p <- p + annotation_custom(
1523409962268:#     grob = textGrob(label = df$n[i], hjust = 0, gp = gpar(cex = 1.5)),
1523409962268:#     ymin = df$y[i],      # Vertical position of the textGrob
1523409962268:#     ymax = df$y[i],
1523409962269:#     xmin = 14.3,         # Note: The grobs are positioned outside the plot area
1523409962269:#     xmax = 14.3)
1523409962269:# }
1523409962270:#
1523409962270:# # Code to override clipping
1523409962270:# gt <- ggplot_gtable(ggplot_build(p))
1523409962271:# gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523409962271:# grid.draw(gt)
1523409979404:baseTextSize <- 18
1523409982703:baseTextSize <- 18
1523409982704:barAnnotTextSize <- 4
1523409982705:# baseFontFamily <- "Helvetica"
1523409982706:baseFontFamily <- 'Arial'
1523409982706:baseFontFamily <- 'HelveticaNeueLT Com 45 Lt'
1523409982707:baseFontFamily <- 'HelveticaNeueLT Std Lt'
1523409982707:customTheme <- list(
1523409982708:# theme_Publication_2(),
1523409982708:# guides(fill = guide_legend(title.position = "left"#,
1523409982709:#                           # label.vjust = -0.8
1523409982709:#       )),
1523409982710:# panel.grid = element_blank(),
1523409982710:# panel.border = element_blank()#,
1523409982710:# scale_y_continuous(expand = c(0, 0)),
1523409982711:theme(
1523409982711:axis.line            = element_line(colour = axisColor, size = lineSize),
1523409982712:axis.line.y          = element_blank(),
1523409982712:# axis.text            = element_text(size = baseTextSize * 0.875),#,
1523409982713:axis.text            = element_text(size = baseTextSize * 0.875,
1523409982713:family = baseFontFamily, color = "black"),
1523409982713:# axis.ticks           = element_line(size = lineSize),
1523409982714:axis.ticks.y         = element_blank(),
1523409982714:axis.title           = element_text(size = baseTextSize),#,
1523409982715:# axis.title           = element_text(size = baseTextSize,
1523409982715:# family = baseFontFamily),
1523409982716:axis.title.y         = element_blank(),
1523409982717:# axis.title.x        = element_blank(),
1523409982717:legend.direction     = "horizontal",
1523409982718:legend.justification = c(0.5, 0.5),
1523409982718:legend.key.height    = unit(5, "mm"),
1523409982718:legend.key.width     = unit(8, "mm"),
1523409982719:legend.position      = "bottom",
1523409982719:legend.title         = element_blank(),
1523409982720:panel.background     = element_blank(),
1523409982720:panel.grid.major     = element_line(colour = gridColor, size = lineSize),
1523409982721:panel.grid.major.y   = element_blank(),
1523409982721:plot.margin          = unit(c(0.2,1.8,0.2,0.2),"cm"),
1523409982721:# text                 = element_text(size = baseTextSize)#,
1523409982722:text                 = element_text(size = baseTextSize,
1523409982723:family = baseFontFamily)
1523409982723:),
1523409982724:coord_flip()
1523409982724:)
1523409982726:publicationTheme <- list(
1523409982727:theme_pubr() +
1523409982728:theme(
1523409982728:axis.line.y = element_blank(),
1523409982729:axis.text  = element_text(size = baseTextSize * 0.875,
1523409982729:family = baseFontFamily, color = "black"),
1523409982730:axis.text.y = element_text(margin=margin(1,1,1,1,"mm")),
1523409982730:axis.ticks.y = element_blank(),
1523409982731:axis.title  = element_text(size = baseTextSize),
1523409982732:panel.grid.major.x = element_line(colour = gridColor,
1523409982732:size = lineSize*1.5),
1523409982733:plot.margin = margin(8, 10, 15, 8, "mm"),
1523409982733:text = element_text(size = baseTextSize,
1523409982734:family = baseFontFamily)
1523409982735:)
1523409982736:)
1523409982748:toolNameLevels <- compData$Tool_Name[c(6,4,5,7,3,2,1)]
1523409982749:# Preparing data ----------------------------------------------------------
1523409982750:dataToPlot <- compData %>%
1523409982750:arrange(Alleles) %>%
1523409982751:mutate(Tool_Name = factor(Tool_Name, toolNameLevels))
1523409982755:# Predictions plot ----------------------------------------------------------
1523409982756:ggbarplot(dataToPlot, x = "Tool_Name", y = "Alleles",
1523409982756:fill = "Tool_Name",
1523409982757:# color = "white",            # Set bar border colors to white
1523409982757:palette = customPalette,
1523409982758:rotate = T
1523409982758:# position = position_dodge(width=0.8)
1523409982759:# sort.val = "desc",          # Sort the value in dscending order
1523409982759:# sort.by.groups = FALSE,     # Don't sort inside each group
1523409982760:# x.text.angle = 90           # Rotate vertically x axis texts
1523409982760:) +
1523409982761:scale_y_continuous(expand = c(0, 0), position = "top") +
1523409982762:theme(axis.ticks.y = element_blank(),
1523409982762:axis.line.y = element_blank(),
1523409982763:# panel.grid.major     = element_line(colour = gridColor, size = lineSize),
1523409982763:panel.grid.major.x   = element_line(colour = gridColor, size = lineSize),
1523409982764:plot.margin = margin(8, 8, 8, 8, "mm"),
1523409982764:axis.text.y = element_text(margin=margin(1,1,1,1,"mm"))) +
1523409982765:labs(x = "Typing Tool",
1523409982765:y = "Correct Alleles (%)\n")
1523409983161:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523409983161:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523409983163:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523409983163:geom_hline(data = annotationData, aes(yintercept = timeMarks), size = 0.2, color = gridColor) +
1523409983164:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523409983164:stat = "identity", position = position_dodge(width=0.9)) +
1523409983164:scale_y_log10(expand = c(0, 0), position = "top") +
1523409983165:scale_fill_manual(values = customPalette) +
1523409983165:publicationTheme +
1523409983166:labs(x = "Typing Tool",
1523409983166:y = "Run Time (s)\n") + coord_flip()
1523409983177:timePlot
1523409983715:# Annotation - times
1523409983715:for (i in 1:nrow(annotationData))  {
1523409983715:timePlot <- timePlot + annotation_custom(
1523409983716:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523409983716:rot = 310, gp = gpar(cex = 1.01, col = "#333333")),
1523409983716:ymin = log10(annotationData$timeMarks[i]),
1523409983717:ymax = log10(annotationData$timeMarks[i]),
1523409983717:xmin = 0.4,
1523409983718:xmax = 0.4)
1523409983718:}
1523409983737:# aGrob    <- textGrob(label = "30s", hjust = 0, vjust = 1, gp = gpar(cex = 1.05), rot = 315)
1523409983737:# timePlot <- timePlot + annotation_custom(grob = aGrob,
1523409983738:#                                          xmin = 0.2,  xmax = 0.2,
1523409983738:#                                          ymin = log10(30), ymax = log10(30))
1523409983738:gt <- ggplot_gtable(ggplot_build(timePlot))
1523409984456:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523409984457:grid.draw(gt)
1523409984551:# Annotation out of the plot ----------------------------------------------
1523409984552:#
1523409984552:# library (ggplot2)
1523409984552:# library(grid)
1523409984553:#
1523409984553:# df=data.frame(y=c("cat1","cat2","cat3"),x=c(12,10,14),n=c(5,15,20))
1523409984553:#
1523409984554:# p <- ggplot(df, aes(x,y)) + geom_point() +            # Base plot
1523409984554:#   theme(plot.margin = unit(c(1,3,1,1), "lines"))   # Make room for the grob
1523409984554:#
1523409984554:# for (i in 1:length(df$n))  {
1523409984555:#   p <- p + annotation_custom(
1523409984555:#     grob = textGrob(label = df$n[i], hjust = 0, gp = gpar(cex = 1.5)),
1523409984555:#     ymin = df$y[i],      # Vertical position of the textGrob
1523409984556:#     ymax = df$y[i],
1523409984556:#     xmin = 14.3,         # Note: The grobs are positioned outside the plot area
1523409984556:#     xmax = 14.3)
1523409984556:# }
1523409984557:#
1523409984557:# # Code to override clipping
1523409984557:# gt <- ggplot_gtable(ggplot_build(p))
1523409984558:# gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523409984558:# grid.draw(gt)
1523410073210:publicationTheme <- list(
1523410073210:theme_pubr() +
1523410073210:theme(
1523410073211:axis.line.y  = element_blank(),
1523410073211:axis.text    = element_text(size = baseTextSize * 0.875,
1523410073211:family = baseFontFamily,
1523410073212:color = "black"),
1523410073212:# axis.text.y  = element_text(margin=margin(1, 1, 1, 1, "mm")),
1523410073212:axis.ticks.y = element_blank(),
1523410073213:axis.title   = element_text(size = baseTextSize),
1523410073213:panel.grid.major.x = element_line(colour = gridColor,
1523410073213:size = lineSize*1.5),
1523410073214:plot.margin = margin(8, 10, 15, 8, "mm"),
1523410073214:text = element_text(size = baseTextSize,
1523410073215:family = baseFontFamily)
1523410073215:)
1523410073216:)
1523410073222:toolNameLevels <- compData$Tool_Name[c(6,4,5,7,3,2,1)]
1523410073223:# Preparing data ----------------------------------------------------------
1523410073223:dataToPlot <- compData %>%
1523410073224:arrange(Alleles) %>%
1523410073224:mutate(Tool_Name = factor(Tool_Name, toolNameLevels))
1523410073226:# Predictions plot ----------------------------------------------------------
1523410073227:ggbarplot(dataToPlot, x = "Tool_Name", y = "Alleles",
1523410073227:fill = "Tool_Name",
1523410073227:# color = "white",            # Set bar border colors to white
1523410073228:palette = customPalette,
1523410073228:rotate = T
1523410073228:# position = position_dodge(width=0.8)
1523410073229:# sort.val = "desc",          # Sort the value in dscending order
1523410073229:# sort.by.groups = FALSE,     # Don't sort inside each group
1523410073229:# x.text.angle = 90           # Rotate vertically x axis texts
1523410073230:) +
1523410073230:scale_y_continuous(expand = c(0, 0), position = "top") +
1523410073230:theme(axis.ticks.y = element_blank(),
1523410073230:axis.line.y = element_blank(),
1523410073231:# panel.grid.major     = element_line(colour = gridColor, size = lineSize),
1523410073231:panel.grid.major.x   = element_line(colour = gridColor, size = lineSize),
1523410073231:plot.margin = margin(8, 8, 8, 8, "mm"),
1523410073232:axis.text.y = element_text(margin=margin(1,1,1,1,"mm"))) +
1523410073232:labs(x = "Typing Tool",
1523410073232:y = "Correct Alleles (%)\n")
1523410073595:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523410073595:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523410073597:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523410073597:geom_hline(data = annotationData, aes(yintercept = timeMarks), size = 0.2, color = gridColor) +
1523410073598:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523410073598:stat = "identity", position = position_dodge(width=0.9)) +
1523410073599:scale_y_log10(expand = c(0, 0), position = "top") +
1523410073599:scale_fill_manual(values = customPalette) +
1523410073600:publicationTheme +
1523410073601:labs(x = "Typing Tool",
1523410073601:y = "Run Time (s)\n") + coord_flip()
1523410073611:timePlot
1523410074098:# Annotation - times
1523410074098:for (i in 1:nrow(annotationData))  {
1523410074098:timePlot <- timePlot + annotation_custom(
1523410074099:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523410074099:rot = 310, gp = gpar(cex = 1.01, col = "#333333")),
1523410074099:ymin = log10(annotationData$timeMarks[i]),
1523410074100:ymax = log10(annotationData$timeMarks[i]),
1523410074100:xmin = 0.4,
1523410074100:xmax = 0.4)
1523410074101:}
1523410074816:# aGrob    <- textGrob(label = "30s", hjust = 0, vjust = 1, gp = gpar(cex = 1.05), rot = 315)
1523410074816:# timePlot <- timePlot + annotation_custom(grob = aGrob,
1523410074817:#                                          xmin = 0.2,  xmax = 0.2,
1523410074817:#                                          ymin = log10(30), ymax = log10(30))
1523410074818:gt <- ggplot_gtable(ggplot_build(timePlot))
1523410075163:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523410075164:grid.draw(gt)
1523410075266:# Annotation out of the plot ----------------------------------------------
1523410075267:#
1523410075267:# library (ggplot2)
1523410075267:# library(grid)
1523410075267:#
1523410075268:# df=data.frame(y=c("cat1","cat2","cat3"),x=c(12,10,14),n=c(5,15,20))
1523410075268:#
1523410075268:# p <- ggplot(df, aes(x,y)) + geom_point() +            # Base plot
1523410075269:#   theme(plot.margin = unit(c(1,3,1,1), "lines"))   # Make room for the grob
1523410075269:#
1523410075269:# for (i in 1:length(df$n))  {
1523410075269:#   p <- p + annotation_custom(
1523410075270:#     grob = textGrob(label = df$n[i], hjust = 0, gp = gpar(cex = 1.5)),
1523410075270:#     ymin = df$y[i],      # Vertical position of the textGrob
1523410075270:#     ymax = df$y[i],
1523410075271:#     xmin = 14.3,         # Note: The grobs are positioned outside the plot area
1523410075271:#     xmax = 14.3)
1523410075271:# }
1523410075272:#
1523410075272:# # Code to override clipping
1523410075272:# gt <- ggplot_gtable(ggplot_build(p))
1523410075272:# gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523410075273:# grid.draw(gt)
1523410109203:0.3 * 1.5
1523410121050:0.45/1.5
1523410200718:0.3/0.45
1523410263640:publicationTheme <- list(
1523410263640:theme_pubr() +
1523410263641:theme(
1523410263641:axis.line.y  = element_blank(),
1523410263641:axis.text    = element_text(size = baseTextSize * 0.875,
1523410263642:family = baseFontFamily,
1523410263642:color = "black"),
1523410263642:# axis.text.y  = element_text(margin=margin(1, 1, 1, 1, "mm")),
1523410263643:axis.ticks.y = element_blank(),
1523410263643:axis.title   = element_text(size = baseTextSize),
1523410263643:panel.grid.major.x = element_line(colour = gridColor,
1523410263644:size = lineSize),
1523410263644:plot.margin = margin(8, 10, 15, 8, "mm"),
1523410263645:text = element_text(size = baseTextSize,
1523410263645:family = baseFontFamily)
1523410263645:)
1523410263646:)
1523410263654:toolNameLevels <- compData$Tool_Name[c(6,4,5,7,3,2,1)]
1523410263655:# Preparing data ----------------------------------------------------------
1523410263655:dataToPlot <- compData %>%
1523410263656:arrange(Alleles) %>%
1523410263656:mutate(Tool_Name = factor(Tool_Name, toolNameLevels))
1523410263659:# Predictions plot ----------------------------------------------------------
1523410263659:ggbarplot(dataToPlot, x = "Tool_Name", y = "Alleles",
1523410263660:fill = "Tool_Name",
1523410263660:# color = "white",            # Set bar border colors to white
1523410263660:palette = customPalette,
1523410263661:rotate = T
1523410263661:# position = position_dodge(width=0.8)
1523410263662:# sort.val = "desc",          # Sort the value in dscending order
1523410263662:# sort.by.groups = FALSE,     # Don't sort inside each group
1523410263663:# x.text.angle = 90           # Rotate vertically x axis texts
1523410263663:) +
1523410263664:scale_y_continuous(expand = c(0, 0), position = "top") +
1523410263664:theme(axis.ticks.y = element_blank(),
1523410263664:axis.line.y = element_blank(),
1523410263665:# panel.grid.major     = element_line(colour = gridColor, size = lineSize),
1523410263665:panel.grid.major.x   = element_line(colour = gridColor, size = lineSize),
1523410263666:plot.margin = margin(8, 8, 8, 8, "mm"),
1523410263666:axis.text.y = element_text(margin=margin(1,1,1,1,"mm"))) +
1523410263666:labs(x = "Typing Tool",
1523410263667:y = "Correct Alleles (%)\n")
1523410264245:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523410264246:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523410264247:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523410264248:geom_hline(data = annotationData, aes(yintercept = timeMarks), size = lineSize/1.5, color = gridColor) +
1523410264248:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523410264248:stat = "identity", position = position_dodge(width=0.9)) +
1523410264249:scale_y_log10(expand = c(0, 0), position = "top") +
1523410264249:scale_fill_manual(values = customPalette) +
1523410264249:publicationTheme +
1523410264250:labs(x = "Typing Tool",
1523410264250:y = "Run Time (s)\n") + coord_flip()
1523410264259:timePlot
1523410278407:# Annotation - times
1523410278408:for (i in 1:nrow(annotationData))  {
1523410278409:timePlot <- timePlot + annotation_custom(
1523410278410:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523410278411:rot = 310, gp = gpar(cex = 1.01, col = "#333333")),
1523410278412:ymin = log10(annotationData$timeMarks[i]),
1523410278412:ymax = log10(annotationData$timeMarks[i]),
1523410278413:xmin = 0.4,
1523410278414:xmax = 0.4)
1523410278415:}
1523410278446:# aGrob    <- textGrob(label = "30s", hjust = 0, vjust = 1, gp = gpar(cex = 1.05), rot = 315)
1523410278447:# timePlot <- timePlot + annotation_custom(grob = aGrob,
1523410278447:#                                          xmin = 0.2,  xmax = 0.2,
1523410278448:#                                          ymin = log10(30), ymax = log10(30))
1523410278449:gt <- ggplot_gtable(ggplot_build(timePlot))
1523410278655:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523410278656:grid.draw(gt)
1523410298603:publicationTheme <- list(
1523410298604:theme_pubr() +
1523410298605:theme(
1523410298606:axis.line.y  = element_blank(),
1523410298607:axis.text    = element_text(size = baseTextSize * 0.875,
1523410298608:family = baseFontFamily,
1523410298608:color = "black"),
1523410298609:# axis.text.y  = element_text(margin=margin(1, 1, 1, 1, "mm")),
1523410298610:axis.ticks.y = element_blank(),
1523410298611:axis.title   = element_text(size = baseTextSize),
1523410298611:panel.grid.major.x = element_line(colour = gridColor,
1523410298612:size = lineSize),
1523410298613:plot.margin = margin(8, 10, 15, 8, "mm"),
1523410298614:text = element_text(size = baseTextSize,
1523410298615:family = baseFontFamily)
1523410298616:)
1523410298616:)
1523410298625:toolNameLevels <- compData$Tool_Name[c(6,4,5,7,3,2,1)]
1523410298626:# Preparing data ----------------------------------------------------------
1523410298627:dataToPlot <- compData %>%
1523410298627:arrange(Alleles) %>%
1523410298627:mutate(Tool_Name = factor(Tool_Name, toolNameLevels))
1523410298630:# Predictions plot ----------------------------------------------------------
1523410298631:ggbarplot(dataToPlot, x = "Tool_Name", y = "Alleles",
1523410298632:fill = "Tool_Name",
1523410298632:# color = "white",            # Set bar border colors to white
1523410298632:palette = customPalette,
1523410298633:rotate = T
1523410298633:# position = position_dodge(width=0.8)
1523410298634:# sort.val = "desc",          # Sort the value in dscending order
1523410298634:# sort.by.groups = FALSE,     # Don't sort inside each group
1523410298634:# x.text.angle = 90           # Rotate vertically x axis texts
1523410298635:) +
1523410298635:scale_y_continuous(expand = c(0, 0), position = "top") +
1523410298636:theme(axis.ticks.y = element_blank(),
1523410298636:axis.line.y = element_blank(),
1523410298637:# panel.grid.major     = element_line(colour = gridColor, size = lineSize),
1523410298637:panel.grid.major.x   = element_line(colour = gridColor, size = lineSize),
1523410298638:plot.margin = margin(8, 8, 8, 8, "mm"),
1523410298638:axis.text.y = element_text(margin=margin(1,1,1,1,"mm"))) +
1523410298639:labs(x = "Typing Tool",
1523410298639:y = "Correct Alleles (%)\n")
1523410298940:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523410298941:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523410298942:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523410298942:geom_hline(data = annotationData, aes(yintercept = timeMarks), size = lineSize/1.5, color = gridColor) +
1523410298943:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523410298943:stat = "identity", position = position_dodge(width=0.9)) +
1523410298943:scale_y_log10(expand = c(0, 0), position = "top") +
1523410298944:scale_fill_manual(values = customPalette) +
1523410298944:publicationTheme +
1523410298944:labs(x = "Typing Tool",
1523410298945:y = "Run Time (s)\n") + coord_flip()
1523410298952:# timePlot
1523410298953:# Annotation - times
1523410298953:for (i in 1:nrow(annotationData))  {
1523410298953:timePlot <- timePlot + annotation_custom(
1523410298954:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523410298954:rot = 310, gp = gpar(cex = 1.01, col = "#333333")),
1523410298954:ymin = log10(annotationData$timeMarks[i]),
1523410298955:ymax = log10(annotationData$timeMarks[i]),
1523410298955:xmin = 0.4,
1523410298955:xmax = 0.4)
1523410298956:}
1523410298973:# aGrob    <- textGrob(label = "30s", hjust = 0, vjust = 1, gp = gpar(cex = 1.05), rot = 315)
1523410298973:# timePlot <- timePlot + annotation_custom(grob = aGrob,
1523410298973:#                                          xmin = 0.2,  xmax = 0.2,
1523410298973:#                                          ymin = log10(30), ymax = log10(30))
1523410298974:gt <- ggplot_gtable(ggplot_build(timePlot))
1523410299577:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523410299578:grid.draw(gt)
1523410299676:# Annotation out of the plot ----------------------------------------------
1523410299676:#
1523410299677:# library (ggplot2)
1523410299677:# library(grid)
1523410299678:#
1523410299678:# df=data.frame(y=c("cat1","cat2","cat3"),x=c(12,10,14),n=c(5,15,20))
1523410299679:#
1523410299679:# p <- ggplot(df, aes(x,y)) + geom_point() +            # Base plot
1523410299680:#   theme(plot.margin = unit(c(1,3,1,1), "lines"))   # Make room for the grob
1523410299680:#
1523410299681:# for (i in 1:length(df$n))  {
1523410299681:#   p <- p + annotation_custom(
1523410299682:#     grob = textGrob(label = df$n[i], hjust = 0, gp = gpar(cex = 1.5)),
1523410299682:#     ymin = df$y[i],      # Vertical position of the textGrob
1523410299683:#     ymax = df$y[i],
1523410299683:#     xmin = 14.3,         # Note: The grobs are positioned outside the plot area
1523410299684:#     xmax = 14.3)
1523410299684:# }
1523410299685:#
1523410299685:# # Code to override clipping
1523410299690:# gt <- ggplot_gtable(ggplot_build(p))
1523410299691:# gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523410299691:# grid.draw(gt)
1523410518163:publicationTheme <- list(
1523410518164:theme_pubr() +
1523410518165:theme(
1523410518165:axis.line.y  = element_blank(),
1523410518165:axis.text    = element_text(size = baseTextSize * 0.875,
1523410518166:family = baseFontFamily,
1523410518166:color = "black"),
1523410518166:# axis.text.y  = element_text(margin=margin(1, 1, 1, 1, "mm")),
1523410518167:axis.ticks.y = element_blank(),
1523410518168:axis.title   = element_text(size = baseTextSize),
1523410518168:panel.grid.major.x = element_line(colour = gridColor,
1523410518169:size = lineSize),
1523410518169:plot.margin = margin(8, 10, 15, 8, "mm"),
1523410518169:text = element_text(size = baseTextSize,
1523410518170:family = baseFontFamily)
1523410518170:)
1523410518170:)
1523410518179:toolNameLevels <- compData$Tool_Name[c(6,4,5,7,3,2,1)]
1523410518180:# Preparing data ----------------------------------------------------------
1523410518181:dataToPlot <- compData %>%
1523410518181:arrange(Alleles) %>%
1523410518181:mutate(Tool_Name = factor(Tool_Name, toolNameLevels))
1523410518183:# Predictions plot ----------------------------------------------------------
1523410518184:ggbarplot(dataToPlot, x = "Tool_Name", y = "Alleles",
1523410518184:fill = "Tool_Name",
1523410518185:# color = "white",            # Set bar border colors to white
1523410518185:palette = customPalette,
1523410518185:rotate = T
1523410518186:# position = position_dodge(width=0.8)
1523410518186:# sort.val = "desc",          # Sort the value in dscending order
1523410518187:# sort.by.groups = FALSE,     # Don't sort inside each group
1523410518187:# x.text.angle = 90           # Rotate vertically x axis texts
1523410518188:) +
1523410518188:scale_y_continuous(expand = c(0, 0), position = "top") +
1523410518189:theme(axis.ticks.y = element_blank(),
1523410518189:axis.line.y = element_blank(),
1523410518190:# panel.grid.major     = element_line(colour = gridColor, size = lineSize),
1523410518190:panel.grid.major.x   = element_line(colour = gridColor, size = lineSize),
1523410518191:plot.margin = margin(8, 8, 8, 8, "mm"),
1523410518192:axis.text.y = element_text(margin=margin(1,1,1,1,"mm"))) +
1523410518192:labs(x = "Typing Tool",
1523410518193:y = "Correct Alleles (%)\n")
1523410518527:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523410518527:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523410518528:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523410518529:geom_hline(data = annotationData, aes(yintercept = timeMarks), size = lineSize/1.5, color = gridColor) +
1523410518529:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523410518529:stat = "identity", position = position_dodge(width=0.9)) +
1523410518530:scale_y_log10(expand = c(0, 0), position = "top") +
1523410518530:scale_fill_manual(values = customPalette) +
1523410518531:publicationTheme +
1523410518531:labs(x = "Typing Tool",
1523410518531:y = "Run Time (s)\n") + coord_flip()
1523410518539:# timePlot
1523410518539:# Annotation - times
1523410518540:for (i in 1:nrow(annotationData))  {
1523410518540:timePlot <- timePlot + annotation_custom(
1523410518540:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523410518541:rot = 310, gp = gpar(fontsize = 20, cex = 1.01, col = "#333333")),
1523410518541:ymin = log10(annotationData$timeMarks[i]),
1523410518541:ymax = log10(annotationData$timeMarks[i]),
1523410518542:xmin = 0.4,
1523410518542:xmax = 0.4)
1523410518542:}
1523410518568:# aGrob    <- textGrob(label = "30s", hjust = 0, vjust = 1, gp = gpar(cex = 1.05), rot = 315)
1523410518569:# timePlot <- timePlot + annotation_custom(grob = aGrob,
1523410518569:#                                          xmin = 0.2,  xmax = 0.2,
1523410518569:#                                          ymin = log10(30), ymax = log10(30))
1523410518570:gt <- ggplot_gtable(ggplot_build(timePlot))
1523410519120:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523410519121:grid.draw(gt)
1523410519230:# Annotation out of the plot ----------------------------------------------
1523410519230:#
1523410519230:# library (ggplot2)
1523410519231:# library(grid)
1523410519231:#
1523410519231:# df=data.frame(y=c("cat1","cat2","cat3"),x=c(12,10,14),n=c(5,15,20))
1523410519232:#
1523410519232:# p <- ggplot(df, aes(x,y)) + geom_point() +            # Base plot
1523410519232:#   theme(plot.margin = unit(c(1,3,1,1), "lines"))   # Make room for the grob
1523410519232:#
1523410519233:# for (i in 1:length(df$n))  {
1523410519233:#   p <- p + annotation_custom(
1523410519233:#     grob = textGrob(label = df$n[i], hjust = 0, gp = gpar(cex = 1.5)),
1523410519234:#     ymin = df$y[i],      # Vertical position of the textGrob
1523410519234:#     ymax = df$y[i],
1523410519234:#     xmin = 14.3,         # Note: The grobs are positioned outside the plot area
1523410519235:#     xmax = 14.3)
1523410519235:# }
1523410519235:#
1523410519236:# # Code to override clipping
1523410519236:# gt <- ggplot_gtable(ggplot_build(p))
1523410519236:# gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523410519236:# grid.draw(gt)
1523410531618:publicationTheme <- list(
1523410531618:theme_pubr() +
1523410531619:theme(
1523410531619:axis.line.y  = element_blank(),
1523410531620:axis.text    = element_text(size = baseTextSize * 0.875,
1523410531620:family = baseFontFamily,
1523410531620:color = "black"),
1523410531621:# axis.text.y  = element_text(margin=margin(1, 1, 1, 1, "mm")),
1523410531621:axis.ticks.y = element_blank(),
1523410531621:axis.title   = element_text(size = baseTextSize),
1523410531622:panel.grid.major.x = element_line(colour = gridColor,
1523410531622:size = lineSize),
1523410531622:plot.margin = margin(8, 10, 15, 8, "mm"),
1523410531623:text = element_text(size = baseTextSize,
1523410531623:family = baseFontFamily)
1523410531623:)
1523410531624:)
1523410531631:toolNameLevels <- compData$Tool_Name[c(6,4,5,7,3,2,1)]
1523410531632:# Preparing data ----------------------------------------------------------
1523410531632:dataToPlot <- compData %>%
1523410531632:arrange(Alleles) %>%
1523410531633:mutate(Tool_Name = factor(Tool_Name, toolNameLevels))
1523410531636:# Predictions plot ----------------------------------------------------------
1523410531636:ggbarplot(dataToPlot, x = "Tool_Name", y = "Alleles",
1523410531637:fill = "Tool_Name",
1523410531637:# color = "white",            # Set bar border colors to white
1523410531637:palette = customPalette,
1523410531638:rotate = T
1523410531638:# position = position_dodge(width=0.8)
1523410531638:# sort.val = "desc",          # Sort the value in dscending order
1523410531638:# sort.by.groups = FALSE,     # Don't sort inside each group
1523410531639:# x.text.angle = 90           # Rotate vertically x axis texts
1523410531639:) +
1523410531640:scale_y_continuous(expand = c(0, 0), position = "top") +
1523410531640:theme(axis.ticks.y = element_blank(),
1523410531640:axis.line.y = element_blank(),
1523410531641:# panel.grid.major     = element_line(colour = gridColor, size = lineSize),
1523410531641:panel.grid.major.x   = element_line(colour = gridColor, size = lineSize),
1523410531641:plot.margin = margin(8, 8, 8, 8, "mm"),
1523410531642:axis.text.y = element_text(margin=margin(1,1,1,1,"mm"))) +
1523410531642:labs(x = "Typing Tool",
1523410531642:y = "Correct Alleles (%)\n")
1523410532058:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523410532059:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523410532061:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523410532061:geom_hline(data = annotationData, aes(yintercept = timeMarks), size = lineSize/1.5, color = gridColor) +
1523410532062:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523410532062:stat = "identity", position = position_dodge(width=0.9)) +
1523410532063:scale_y_log10(expand = c(0, 0), position = "top") +
1523410532063:scale_fill_manual(values = customPalette) +
1523410532064:publicationTheme +
1523410532065:labs(x = "Typing Tool",
1523410532065:y = "Run Time (s)\n") + coord_flip()
1523410532076:# timePlot
1523410532076:# Annotation - times
1523410532076:for (i in 1:nrow(annotationData))  {
1523410532077:timePlot <- timePlot + annotation_custom(
1523410532077:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523410532077:rot = 310, gp = gpar(fontsize = 12, cex = 1.01, col = "#333333")),
1523410532078:ymin = log10(annotationData$timeMarks[i]),
1523410532078:ymax = log10(annotationData$timeMarks[i]),
1523410532078:xmin = 0.4,
1523410532079:xmax = 0.4)
1523410532079:}
1523410532097:# aGrob    <- textGrob(label = "30s", hjust = 0, vjust = 1, gp = gpar(cex = 1.05), rot = 315)
1523410532097:# timePlot <- timePlot + annotation_custom(grob = aGrob,
1523410532098:#                                          xmin = 0.2,  xmax = 0.2,
1523410532098:#                                          ymin = log10(30), ymax = log10(30))
1523410532099:gt <- ggplot_gtable(ggplot_build(timePlot))
1523410532621:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523410532622:grid.draw(gt)
1523410532874:# Annotation out of the plot ----------------------------------------------
1523410532874:#
1523410532875:# library (ggplot2)
1523410532875:# library(grid)
1523410532875:#
1523410532876:# df=data.frame(y=c("cat1","cat2","cat3"),x=c(12,10,14),n=c(5,15,20))
1523410532876:#
1523410532876:# p <- ggplot(df, aes(x,y)) + geom_point() +            # Base plot
1523410532877:#   theme(plot.margin = unit(c(1,3,1,1), "lines"))   # Make room for the grob
1523410532877:#
1523410532877:# for (i in 1:length(df$n))  {
1523410532877:#   p <- p + annotation_custom(
1523410532878:#     grob = textGrob(label = df$n[i], hjust = 0, gp = gpar(cex = 1.5)),
1523410532878:#     ymin = df$y[i],      # Vertical position of the textGrob
1523410532878:#     ymax = df$y[i],
1523410532878:#     xmin = 14.3,         # Note: The grobs are positioned outside the plot area
1523410532879:#     xmax = 14.3)
1523410532879:# }
1523410532879:#
1523410532880:# # Code to override clipping
1523410532880:# gt <- ggplot_gtable(ggplot_build(p))
1523410532880:# gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523410532881:# grid.draw(gt)
1523410542748:publicationTheme <- list(
1523410542749:theme_pubr() +
1523410542749:theme(
1523410542750:axis.line.y  = element_blank(),
1523410542750:axis.text    = element_text(size = baseTextSize * 0.875,
1523410542751:family = baseFontFamily,
1523410542751:color = "black"),
1523410542752:# axis.text.y  = element_text(margin=margin(1, 1, 1, 1, "mm")),
1523410542752:axis.ticks.y = element_blank(),
1523410542753:axis.title   = element_text(size = baseTextSize),
1523410542754:panel.grid.major.x = element_line(colour = gridColor,
1523410542755:size = lineSize),
1523410542755:plot.margin = margin(8, 10, 15, 8, "mm"),
1523410542756:text = element_text(size = baseTextSize,
1523410542757:family = baseFontFamily)
1523410542758:)
1523410542759:)
1523410542770:toolNameLevels <- compData$Tool_Name[c(6,4,5,7,3,2,1)]
1523410542771:# Preparing data ----------------------------------------------------------
1523410542772:dataToPlot <- compData %>%
1523410542772:arrange(Alleles) %>%
1523410542772:mutate(Tool_Name = factor(Tool_Name, toolNameLevels))
1523410542775:# Predictions plot ----------------------------------------------------------
1523410542775:ggbarplot(dataToPlot, x = "Tool_Name", y = "Alleles",
1523410542776:fill = "Tool_Name",
1523410542776:# color = "white",            # Set bar border colors to white
1523410542776:palette = customPalette,
1523410542777:rotate = T
1523410542777:# position = position_dodge(width=0.8)
1523410542778:# sort.val = "desc",          # Sort the value in dscending order
1523410542778:# sort.by.groups = FALSE,     # Don't sort inside each group
1523410542778:# x.text.angle = 90           # Rotate vertically x axis texts
1523410542779:) +
1523410542779:scale_y_continuous(expand = c(0, 0), position = "top") +
1523410542779:theme(axis.ticks.y = element_blank(),
1523410542780:axis.line.y = element_blank(),
1523410542780:# panel.grid.major     = element_line(colour = gridColor, size = lineSize),
1523410542780:panel.grid.major.x   = element_line(colour = gridColor, size = lineSize),
1523410542781:plot.margin = margin(8, 8, 8, 8, "mm"),
1523410542781:axis.text.y = element_text(margin=margin(1,1,1,1,"mm"))) +
1523410542782:labs(x = "Typing Tool",
1523410542782:y = "Correct Alleles (%)\n")
1523410543156:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523410543157:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523410543158:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523410543158:geom_hline(data = annotationData, aes(yintercept = timeMarks), size = lineSize/1.5, color = gridColor) +
1523410543159:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523410543159:stat = "identity", position = position_dodge(width=0.9)) +
1523410543159:scale_y_log10(expand = c(0, 0), position = "top") +
1523410543160:scale_fill_manual(values = customPalette) +
1523410543160:publicationTheme +
1523410543161:labs(x = "Typing Tool",
1523410543161:y = "Run Time (s)\n") + coord_flip()
1523410543168:# timePlot
1523410543169:# Annotation - times
1523410543170:for (i in 1:nrow(annotationData))  {
1523410543170:timePlot <- timePlot + annotation_custom(
1523410543170:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523410543171:rot = 310, gp = gpar(fontsize = 16, cex = 1.01, col = "#333333")),
1523410543171:ymin = log10(annotationData$timeMarks[i]),
1523410543171:ymax = log10(annotationData$timeMarks[i]),
1523410543172:xmin = 0.4,
1523410543172:xmax = 0.4)
1523410543172:}
1523410543192:# aGrob    <- textGrob(label = "30s", hjust = 0, vjust = 1, gp = gpar(cex = 1.05), rot = 315)
1523410543192:# timePlot <- timePlot + annotation_custom(grob = aGrob,
1523410543192:#                                          xmin = 0.2,  xmax = 0.2,
1523410543193:#                                          ymin = log10(30), ymax = log10(30))
1523410543193:gt <- ggplot_gtable(ggplot_build(timePlot))
1523410543709:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523410543709:grid.draw(gt)
1523410543823:# Annotation out of the plot ----------------------------------------------
1523410543824:#
1523410543824:# library (ggplot2)
1523410543824:# library(grid)
1523410543825:#
1523410543825:# df=data.frame(y=c("cat1","cat2","cat3"),x=c(12,10,14),n=c(5,15,20))
1523410543825:#
1523410543825:# p <- ggplot(df, aes(x,y)) + geom_point() +            # Base plot
1523410543826:#   theme(plot.margin = unit(c(1,3,1,1), "lines"))   # Make room for the grob
1523410543826:#
1523410543826:# for (i in 1:length(df$n))  {
1523410543827:#   p <- p + annotation_custom(
1523410543827:#     grob = textGrob(label = df$n[i], hjust = 0, gp = gpar(cex = 1.5)),
1523410543827:#     ymin = df$y[i],      # Vertical position of the textGrob
1523410543827:#     ymax = df$y[i],
1523410543828:#     xmin = 14.3,         # Note: The grobs are positioned outside the plot area
1523410543828:#     xmax = 14.3)
1523410543828:# }
1523410543829:#
1523410543829:# # Code to override clipping
1523410543829:# gt <- ggplot_gtable(ggplot_build(p))
1523410543830:# gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523410543830:# grid.draw(gt)
1523410559846:publicationTheme <- list(
1523410559847:theme_pubr() +
1523410559847:theme(
1523410559847:axis.line.y  = element_blank(),
1523410559848:axis.text    = element_text(size = baseTextSize * 0.875,
1523410559848:family = baseFontFamily,
1523410559849:color = "black"),
1523410559849:# axis.text.y  = element_text(margin=margin(1, 1, 1, 1, "mm")),
1523410559850:axis.ticks.y = element_blank(),
1523410559850:axis.title   = element_text(size = baseTextSize),
1523410559850:panel.grid.major.x = element_line(colour = gridColor,
1523410559851:size = lineSize),
1523410559851:plot.margin = margin(8, 10, 15, 8, "mm"),
1523410559852:text = element_text(size = baseTextSize,
1523410559852:family = baseFontFamily)
1523410559853:)
1523410559853:)
1523410559861:toolNameLevels <- compData$Tool_Name[c(6,4,5,7,3,2,1)]
1523410559862:# Preparing data ----------------------------------------------------------
1523410559862:dataToPlot <- compData %>%
1523410559863:arrange(Alleles) %>%
1523410559863:mutate(Tool_Name = factor(Tool_Name, toolNameLevels))
1523410559865:# Predictions plot ----------------------------------------------------------
1523410559866:ggbarplot(dataToPlot, x = "Tool_Name", y = "Alleles",
1523410559866:fill = "Tool_Name",
1523410559867:# color = "white",            # Set bar border colors to white
1523410559867:palette = customPalette,
1523410559867:rotate = T
1523410559868:# position = position_dodge(width=0.8)
1523410559868:# sort.val = "desc",          # Sort the value in dscending order
1523410559868:# sort.by.groups = FALSE,     # Don't sort inside each group
1523410559869:# x.text.angle = 90           # Rotate vertically x axis texts
1523410559869:) +
1523410559870:scale_y_continuous(expand = c(0, 0), position = "top") +
1523410559870:theme(axis.ticks.y = element_blank(),
1523410559870:axis.line.y = element_blank(),
1523410559871:# panel.grid.major     = element_line(colour = gridColor, size = lineSize),
1523410559871:panel.grid.major.x   = element_line(colour = gridColor, size = lineSize),
1523410559871:plot.margin = margin(8, 8, 8, 8, "mm"),
1523410559872:axis.text.y = element_text(margin=margin(1,1,1,1,"mm"))) +
1523410559872:labs(x = "Typing Tool",
1523410559873:y = "Correct Alleles (%)\n")
1523410560303:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523410560304:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523410560305:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523410560306:geom_hline(data = annotationData, aes(yintercept = timeMarks), size = lineSize/1.5, color = gridColor) +
1523410560306:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523410560307:stat = "identity", position = position_dodge(width=0.9)) +
1523410560308:scale_y_log10(expand = c(0, 0), position = "top") +
1523410560308:scale_fill_manual(values = customPalette) +
1523410560309:publicationTheme +
1523410560309:labs(x = "Typing Tool",
1523410560310:y = "Run Time (s)\n") + coord_flip()
1523410560319:# timePlot
1523410560319:# Annotation - times
1523410560319:for (i in 1:nrow(annotationData))  {
1523410560320:timePlot <- timePlot + annotation_custom(
1523410560320:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523410560320:rot = 310, gp = gpar(fontsize = 16, col = "#333333")),
1523410560321:ymin = log10(annotationData$timeMarks[i]),
1523410560321:ymax = log10(annotationData$timeMarks[i]),
1523410560321:xmin = 0.4,
1523410560322:xmax = 0.4)
1523410560322:}
1523410560340:# aGrob    <- textGrob(label = "30s", hjust = 0, vjust = 1, gp = gpar(cex = 1.05), rot = 315)
1523410560340:# timePlot <- timePlot + annotation_custom(grob = aGrob,
1523410560341:#                                          xmin = 0.2,  xmax = 0.2,
1523410560341:#                                          ymin = log10(30), ymax = log10(30))
1523410560341:gt <- ggplot_gtable(ggplot_build(timePlot))
1523410560988:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523410560989:grid.draw(gt)
1523410561087:# Annotation out of the plot ----------------------------------------------
1523410561087:#
1523410561087:# library (ggplot2)
1523410561088:# library(grid)
1523410561088:#
1523410561088:# df=data.frame(y=c("cat1","cat2","cat3"),x=c(12,10,14),n=c(5,15,20))
1523410561088:#
1523410561089:# p <- ggplot(df, aes(x,y)) + geom_point() +            # Base plot
1523410561089:#   theme(plot.margin = unit(c(1,3,1,1), "lines"))   # Make room for the grob
1523410561089:#
1523410561090:# for (i in 1:length(df$n))  {
1523410561090:#   p <- p + annotation_custom(
1523410561090:#     grob = textGrob(label = df$n[i], hjust = 0, gp = gpar(cex = 1.5)),
1523410561090:#     ymin = df$y[i],      # Vertical position of the textGrob
1523410561091:#     ymax = df$y[i],
1523410561091:#     xmin = 14.3,         # Note: The grobs are positioned outside the plot area
1523410561091:#     xmax = 14.3)
1523410561092:# }
1523410561092:#
1523410561092:# # Code to override clipping
1523410561092:# gt <- ggplot_gtable(ggplot_build(p))
1523410561093:# gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523410561093:# grid.draw(gt)
1523410571010:publicationTheme <- list(
1523410571010:theme_pubr() +
1523410571011:theme(
1523410571011:axis.line.y  = element_blank(),
1523410571012:axis.text    = element_text(size = baseTextSize * 0.875,
1523410571013:family = baseFontFamily,
1523410571013:color = "black"),
1523410571014:# axis.text.y  = element_text(margin=margin(1, 1, 1, 1, "mm")),
1523410571014:axis.ticks.y = element_blank(),
1523410571015:axis.title   = element_text(size = baseTextSize),
1523410571015:panel.grid.major.x = element_line(colour = gridColor,
1523410571016:size = lineSize),
1523410571016:plot.margin = margin(8, 10, 15, 8, "mm"),
1523410571017:text = element_text(size = baseTextSize,
1523410571018:family = baseFontFamily)
1523410571018:)
1523410571019:)
1523410571029:toolNameLevels <- compData$Tool_Name[c(6,4,5,7,3,2,1)]
1523410571031:# Preparing data ----------------------------------------------------------
1523410571031:dataToPlot <- compData %>%
1523410571032:arrange(Alleles) %>%
1523410571032:mutate(Tool_Name = factor(Tool_Name, toolNameLevels))
1523410571036:# Predictions plot ----------------------------------------------------------
1523410571037:ggbarplot(dataToPlot, x = "Tool_Name", y = "Alleles",
1523410571038:fill = "Tool_Name",
1523410571038:# color = "white",            # Set bar border colors to white
1523410571039:palette = customPalette,
1523410571039:rotate = T
1523410571040:# position = position_dodge(width=0.8)
1523410571040:# sort.val = "desc",          # Sort the value in dscending order
1523410571041:# sort.by.groups = FALSE,     # Don't sort inside each group
1523410571041:# x.text.angle = 90           # Rotate vertically x axis texts
1523410571042:) +
1523410571042:scale_y_continuous(expand = c(0, 0), position = "top") +
1523410571043:theme(axis.ticks.y = element_blank(),
1523410571043:axis.line.y = element_blank(),
1523410571044:# panel.grid.major     = element_line(colour = gridColor, size = lineSize),
1523410571044:panel.grid.major.x   = element_line(colour = gridColor, size = lineSize),
1523410571045:plot.margin = margin(8, 8, 8, 8, "mm"),
1523410571046:axis.text.y = element_text(margin=margin(1,1,1,1,"mm"))) +
1523410571046:labs(x = "Typing Tool",
1523410571047:y = "Correct Alleles (%)\n")
1523410571425:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523410571425:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523410571426:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523410571427:geom_hline(data = annotationData, aes(yintercept = timeMarks), size = lineSize/1.5, color = gridColor) +
1523410571427:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523410571427:stat = "identity", position = position_dodge(width=0.9)) +
1523410571428:scale_y_log10(expand = c(0, 0), position = "top") +
1523410571428:scale_fill_manual(values = customPalette) +
1523410571429:publicationTheme +
1523410571430:labs(x = "Typing Tool",
1523410571430:y = "Run Time (s)\n") + coord_flip()
1523410571439:# timePlot
1523410571440:# Annotation - times
1523410571440:for (i in 1:nrow(annotationData))  {
1523410571441:timePlot <- timePlot + annotation_custom(
1523410571441:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523410571441:rot = 310, gp = gpar(fontsize = 20, col = "#333333")),
1523410571442:ymin = log10(annotationData$timeMarks[i]),
1523410571442:ymax = log10(annotationData$timeMarks[i]),
1523410571442:xmin = 0.4,
1523410571442:xmax = 0.4)
1523410571443:}
1523410571468:# aGrob    <- textGrob(label = "30s", hjust = 0, vjust = 1, gp = gpar(cex = 1.05), rot = 315)
1523410571469:# timePlot <- timePlot + annotation_custom(grob = aGrob,
1523410571469:#                                          xmin = 0.2,  xmax = 0.2,
1523410571469:#                                          ymin = log10(30), ymax = log10(30))
1523410571470:gt <- ggplot_gtable(ggplot_build(timePlot))
1523410572147:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523410572148:grid.draw(gt)
1523410572254:# Annotation out of the plot ----------------------------------------------
1523410572254:#
1523410572255:# library (ggplot2)
1523410572255:# library(grid)
1523410572255:#
1523410572256:# df=data.frame(y=c("cat1","cat2","cat3"),x=c(12,10,14),n=c(5,15,20))
1523410572256:#
1523410572256:# p <- ggplot(df, aes(x,y)) + geom_point() +            # Base plot
1523410572256:#   theme(plot.margin = unit(c(1,3,1,1), "lines"))   # Make room for the grob
1523410572257:#
1523410572257:# for (i in 1:length(df$n))  {
1523410572257:#   p <- p + annotation_custom(
1523410572258:#     grob = textGrob(label = df$n[i], hjust = 0, gp = gpar(cex = 1.5)),
1523410572258:#     ymin = df$y[i],      # Vertical position of the textGrob
1523410572258:#     ymax = df$y[i],
1523410572259:#     xmin = 14.3,         # Note: The grobs are positioned outside the plot area
1523410572259:#     xmax = 14.3)
1523410572259:# }
1523410572259:#
1523410572260:# # Code to override clipping
1523410572260:# gt <- ggplot_gtable(ggplot_build(p))
1523410572260:# gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523410572261:# grid.draw(gt)
1523410594827:publicationTheme <- list(
1523410594827:theme_pubr() +
1523410594828:theme(
1523410594828:axis.line.y  = element_blank(),
1523410594829:axis.text    = element_text(size = baseTextSize * 0.875,
1523410594830:family = baseFontFamily,
1523410594830:color = "black"),
1523410594831:# axis.text.y  = element_text(margin=margin(1, 1, 1, 1, "mm")),
1523410594831:axis.ticks.y = element_blank(),
1523410594832:axis.title   = element_text(size = baseTextSize),
1523410594832:panel.grid.major.x = element_line(colour = gridColor,
1523410594833:size = lineSize),
1523410594833:plot.margin = margin(8, 10, 15, 8, "mm"),
1523410594834:text = element_text(size = baseTextSize,
1523410594834:family = baseFontFamily)
1523410594835:)
1523410594835:)
1523410594845:toolNameLevels <- compData$Tool_Name[c(6,4,5,7,3,2,1)]
1523410594846:# Preparing data ----------------------------------------------------------
1523410594846:dataToPlot <- compData %>%
1523410594846:arrange(Alleles) %>%
1523410594847:mutate(Tool_Name = factor(Tool_Name, toolNameLevels))
1523410594849:# Predictions plot ----------------------------------------------------------
1523410594850:ggbarplot(dataToPlot, x = "Tool_Name", y = "Alleles",
1523410594850:fill = "Tool_Name",
1523410594851:# color = "white",            # Set bar border colors to white
1523410594851:palette = customPalette,
1523410594851:rotate = T
1523410594852:# position = position_dodge(width=0.8)
1523410594852:# sort.val = "desc",          # Sort the value in dscending order
1523410594853:# sort.by.groups = FALSE,     # Don't sort inside each group
1523410594853:# x.text.angle = 90           # Rotate vertically x axis texts
1523410594853:) +
1523410594854:scale_y_continuous(expand = c(0, 0), position = "top") +
1523410594854:theme(axis.ticks.y = element_blank(),
1523410594855:axis.line.y = element_blank(),
1523410594855:# panel.grid.major     = element_line(colour = gridColor, size = lineSize),
1523410594855:panel.grid.major.x   = element_line(colour = gridColor, size = lineSize),
1523410594856:plot.margin = margin(8, 8, 8, 8, "mm"),
1523410594856:axis.text.y = element_text(margin=margin(1,1,1,1,"mm"))) +
1523410594857:labs(x = "Typing Tool",
1523410594857:y = "Correct Alleles (%)\n")
1523410595276:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523410595277:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523410595278:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523410595278:geom_hline(data = annotationData, aes(yintercept = timeMarks), size = lineSize/1.5, color = gridColor) +
1523410595279:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523410595279:stat = "identity", position = position_dodge(width=0.9)) +
1523410595279:scale_y_log10(expand = c(0, 0), position = "top") +
1523410595280:scale_fill_manual(values = customPalette) +
1523410595280:publicationTheme +
1523410595281:labs(x = "Typing Tool",
1523410595281:y = "Run Time (s)\n") + coord_flip()
1523410595291:# timePlot
1523410595292:# Annotation - times
1523410595292:for (i in 1:nrow(annotationData))  {
1523410595292:timePlot <- timePlot + annotation_custom(
1523410595293:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523410595293:rot = 310, gp = gpar(fontsize = baseTextSize * 0.75, col = "#333333")),
1523410595293:ymin = log10(annotationData$timeMarks[i]),
1523410595294:ymax = log10(annotationData$timeMarks[i]),
1523410595294:xmin = 0.4,
1523410595294:xmax = 0.4)
1523410595295:}
1523410595315:# aGrob    <- textGrob(label = "30s", hjust = 0, vjust = 1, gp = gpar(cex = 1.05), rot = 315)
1523410595315:# timePlot <- timePlot + annotation_custom(grob = aGrob,
1523410595316:#                                          xmin = 0.2,  xmax = 0.2,
1523410595316:#                                          ymin = log10(30), ymax = log10(30))
1523410595316:gt <- ggplot_gtable(ggplot_build(timePlot))
1523410596057:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523410596058:grid.draw(gt)
1523410596183:# Annotation out of the plot ----------------------------------------------
1523410596183:#
1523410596184:# library (ggplot2)
1523410596184:# library(grid)
1523410596184:#
1523410596185:# df=data.frame(y=c("cat1","cat2","cat3"),x=c(12,10,14),n=c(5,15,20))
1523410596185:#
1523410596185:# p <- ggplot(df, aes(x,y)) + geom_point() +            # Base plot
1523410596185:#   theme(plot.margin = unit(c(1,3,1,1), "lines"))   # Make room for the grob
1523410596186:#
1523410596186:# for (i in 1:length(df$n))  {
1523410596186:#   p <- p + annotation_custom(
1523410596187:#     grob = textGrob(label = df$n[i], hjust = 0, gp = gpar(cex = 1.5)),
1523410596187:#     ymin = df$y[i],      # Vertical position of the textGrob
1523410596187:#     ymax = df$y[i],
1523410596187:#     xmin = 14.3,         # Note: The grobs are positioned outside the plot area
1523410596188:#     xmax = 14.3)
1523410596188:# }
1523410596188:#
1523410596189:# # Code to override clipping
1523410596189:# gt <- ggplot_gtable(ggplot_build(p))
1523410596189:# gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523410596189:# grid.draw(gt)
1523410606855:publicationTheme <- list(
1523410606856:theme_pubr() +
1523410606857:theme(
1523410606857:axis.line.y  = element_blank(),
1523410606858:axis.text    = element_text(size = baseTextSize * 0.875,
1523410606859:family = baseFontFamily,
1523410606860:color = "black"),
1523410606860:# axis.text.y  = element_text(margin=margin(1, 1, 1, 1, "mm")),
1523410606861:axis.ticks.y = element_blank(),
1523410606861:axis.title   = element_text(size = baseTextSize),
1523410606862:panel.grid.major.x = element_line(colour = gridColor,
1523410606862:size = lineSize),
1523410606863:plot.margin = margin(8, 10, 15, 8, "mm"),
1523410606863:text = element_text(size = baseTextSize,
1523410606864:family = baseFontFamily)
1523410606864:)
1523410606865:)
1523410606873:toolNameLevels <- compData$Tool_Name[c(6,4,5,7,3,2,1)]
1523410606874:# Preparing data ----------------------------------------------------------
1523410606875:dataToPlot <- compData %>%
1523410606875:arrange(Alleles) %>%
1523410606876:mutate(Tool_Name = factor(Tool_Name, toolNameLevels))
1523410606880:# Predictions plot ----------------------------------------------------------
1523410606881:ggbarplot(dataToPlot, x = "Tool_Name", y = "Alleles",
1523410606882:fill = "Tool_Name",
1523410606883:# color = "white",            # Set bar border colors to white
1523410606883:palette = customPalette,
1523410606884:rotate = T
1523410606884:# position = position_dodge(width=0.8)
1523410606885:# sort.val = "desc",          # Sort the value in dscending order
1523410606886:# sort.by.groups = FALSE,     # Don't sort inside each group
1523410606886:# x.text.angle = 90           # Rotate vertically x axis texts
1523410606887:) +
1523410606887:scale_y_continuous(expand = c(0, 0), position = "top") +
1523410606888:theme(axis.ticks.y = element_blank(),
1523410606889:axis.line.y = element_blank(),
1523410606889:# panel.grid.major     = element_line(colour = gridColor, size = lineSize),
1523410606890:panel.grid.major.x   = element_line(colour = gridColor, size = lineSize),
1523410606891:plot.margin = margin(8, 8, 8, 8, "mm"),
1523410606892:axis.text.y = element_text(margin=margin(1,1,1,1,"mm"))) +
1523410606892:labs(x = "Typing Tool",
1523410606893:y = "Correct Alleles (%)\n")
1523410607261:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523410607261:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523410607263:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523410607263:geom_hline(data = annotationData, aes(yintercept = timeMarks), size = lineSize/1.5, color = gridColor) +
1523410607263:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523410607264:stat = "identity", position = position_dodge(width=0.9)) +
1523410607264:scale_y_log10(expand = c(0, 0), position = "top") +
1523410607264:scale_fill_manual(values = customPalette) +
1523410607265:publicationTheme +
1523410607265:labs(x = "Typing Tool",
1523410607266:y = "Run Time (s)\n") + coord_flip()
1523410607284:# timePlot
1523410607285:# Annotation - times
1523410607285:for (i in 1:nrow(annotationData))  {
1523410607285:timePlot <- timePlot + annotation_custom(
1523410607286:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523410607286:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875, col = "#333333")),
1523410607286:ymin = log10(annotationData$timeMarks[i]),
1523410607287:ymax = log10(annotationData$timeMarks[i]),
1523410607287:xmin = 0.4,
1523410607288:xmax = 0.4)
1523410607288:}
1523410607312:# aGrob    <- textGrob(label = "30s", hjust = 0, vjust = 1, gp = gpar(cex = 1.05), rot = 315)
1523410607312:# timePlot <- timePlot + annotation_custom(grob = aGrob,
1523410607313:#                                          xmin = 0.2,  xmax = 0.2,
1523410607313:#                                          ymin = log10(30), ymax = log10(30))
1523410607314:gt <- ggplot_gtable(ggplot_build(timePlot))
1523410607868:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523410607869:grid.draw(gt)
1523410607984:# Annotation out of the plot ----------------------------------------------
1523410607985:#
1523410607985:# library (ggplot2)
1523410607985:# library(grid)
1523410607986:#
1523410607986:# df=data.frame(y=c("cat1","cat2","cat3"),x=c(12,10,14),n=c(5,15,20))
1523410607986:#
1523410607987:# p <- ggplot(df, aes(x,y)) + geom_point() +            # Base plot
1523410607987:#   theme(plot.margin = unit(c(1,3,1,1), "lines"))   # Make room for the grob
1523410607987:#
1523410607988:# for (i in 1:length(df$n))  {
1523410607988:#   p <- p + annotation_custom(
1523410607988:#     grob = textGrob(label = df$n[i], hjust = 0, gp = gpar(cex = 1.5)),
1523410607989:#     ymin = df$y[i],      # Vertical position of the textGrob
1523410607989:#     ymax = df$y[i],
1523410607989:#     xmin = 14.3,         # Note: The grobs are positioned outside the plot area
1523410607989:#     xmax = 14.3)
1523410607990:# }
1523410607990:#
1523410607991:# # Code to override clipping
1523410607991:# gt <- ggplot_gtable(ggplot_build(p))
1523410607991:# gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523410607991:# grid.draw(gt)
1523410622962:publicationTheme <- list(
1523410622963:theme_pubr() +
1523410622963:theme(
1523410622964:axis.line.y  = element_blank(),
1523410622964:axis.text    = element_text(size = baseTextSize * 0.875,
1523410622965:family = baseFontFamily,
1523410622965:color = "black"),
1523410622966:# axis.text.y  = element_text(margin=margin(1, 1, 1, 1, "mm")),
1523410622966:axis.ticks.y = element_blank(),
1523410622967:axis.title   = element_text(size = baseTextSize),
1523410622967:panel.grid.major.x = element_line(colour = gridColor,
1523410622968:size = lineSize),
1523410622968:plot.margin = margin(8, 10, 20, 8, "mm"),
1523410622969:text = element_text(size = baseTextSize,
1523410622969:family = baseFontFamily)
1523410622969:)
1523410622970:)
1523410622980:toolNameLevels <- compData$Tool_Name[c(6,4,5,7,3,2,1)]
1523410622981:# Preparing data ----------------------------------------------------------
1523410622981:dataToPlot <- compData %>%
1523410622981:arrange(Alleles) %>%
1523410622982:mutate(Tool_Name = factor(Tool_Name, toolNameLevels))
1523410622984:# Predictions plot ----------------------------------------------------------
1523410622985:ggbarplot(dataToPlot, x = "Tool_Name", y = "Alleles",
1523410622985:fill = "Tool_Name",
1523410622985:# color = "white",            # Set bar border colors to white
1523410622986:palette = customPalette,
1523410622986:rotate = T
1523410622986:# position = position_dodge(width=0.8)
1523410622987:# sort.val = "desc",          # Sort the value in dscending order
1523410622987:# sort.by.groups = FALSE,     # Don't sort inside each group
1523410622987:# x.text.angle = 90           # Rotate vertically x axis texts
1523410622987:) +
1523410622988:scale_y_continuous(expand = c(0, 0), position = "top") +
1523410622988:theme(axis.ticks.y = element_blank(),
1523410622989:axis.line.y = element_blank(),
1523410622989:# panel.grid.major     = element_line(colour = gridColor, size = lineSize),
1523410622990:panel.grid.major.x   = element_line(colour = gridColor, size = lineSize),
1523410622990:plot.margin = margin(8, 8, 8, 8, "mm"),
1523410622991:axis.text.y = element_text(margin=margin(1,1,1,1,"mm"))) +
1523410622991:labs(x = "Typing Tool",
1523410622992:y = "Correct Alleles (%)\n")
1523410623316:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523410623316:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523410623317:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523410623318:geom_hline(data = annotationData, aes(yintercept = timeMarks), size = lineSize/1.5, color = gridColor) +
1523410623318:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523410623318:stat = "identity", position = position_dodge(width=0.9)) +
1523410623319:scale_y_log10(expand = c(0, 0), position = "top") +
1523410623319:scale_fill_manual(values = customPalette) +
1523410623319:publicationTheme +
1523410623320:labs(x = "Typing Tool",
1523410623320:y = "Run Time (s)\n") + coord_flip()
1523410623332:# timePlot
1523410623333:# Annotation - times
1523410623333:for (i in 1:nrow(annotationData))  {
1523410623333:timePlot <- timePlot + annotation_custom(
1523410623334:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523410623334:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875, col = "#333333")),
1523410623335:ymin = log10(annotationData$timeMarks[i]),
1523410623335:ymax = log10(annotationData$timeMarks[i]),
1523410623335:xmin = 0.4,
1523410623336:xmax = 0.4)
1523410623336:}
1523410623358:# aGrob    <- textGrob(label = "30s", hjust = 0, vjust = 1, gp = gpar(cex = 1.05), rot = 315)
1523410623359:# timePlot <- timePlot + annotation_custom(grob = aGrob,
1523410623359:#                                          xmin = 0.2,  xmax = 0.2,
1523410623360:#                                          ymin = log10(30), ymax = log10(30))
1523410623360:gt <- ggplot_gtable(ggplot_build(timePlot))
1523410624069:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523410624070:grid.draw(gt)
1523410624161:# Annotation out of the plot ----------------------------------------------
1523410624162:#
1523410624162:# library (ggplot2)
1523410624162:# library(grid)
1523410624163:#
1523410624163:# df=data.frame(y=c("cat1","cat2","cat3"),x=c(12,10,14),n=c(5,15,20))
1523410624163:#
1523410624164:# p <- ggplot(df, aes(x,y)) + geom_point() +            # Base plot
1523410624164:#   theme(plot.margin = unit(c(1,3,1,1), "lines"))   # Make room for the grob
1523410624164:#
1523410624164:# for (i in 1:length(df$n))  {
1523410624165:#   p <- p + annotation_custom(
1523410624165:#     grob = textGrob(label = df$n[i], hjust = 0, gp = gpar(cex = 1.5)),
1523410624165:#     ymin = df$y[i],      # Vertical position of the textGrob
1523410624166:#     ymax = df$y[i],
1523410624166:#     xmin = 14.3,         # Note: The grobs are positioned outside the plot area
1523410624166:#     xmax = 14.3)
1523410624167:# }
1523410624167:#
1523410624167:# # Code to override clipping
1523410624167:# gt <- ggplot_gtable(ggplot_build(p))
1523410624168:# gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523410624168:# grid.draw(gt)
1523410633868:publicationTheme <- list(
1523410633868:theme_pubr() +
1523410633869:theme(
1523410633869:axis.line.y  = element_blank(),
1523410633869:axis.text    = element_text(size = baseTextSize * 0.875,
1523410633870:family = baseFontFamily,
1523410633870:color = "black"),
1523410633870:# axis.text.y  = element_text(margin=margin(1, 1, 1, 1, "mm")),
1523410633871:axis.ticks.y = element_blank(),
1523410633871:axis.title   = element_text(size = baseTextSize),
1523410633871:panel.grid.major.x = element_line(colour = gridColor,
1523410633872:size = lineSize),
1523410633872:plot.margin = margin(8, 20, 20, 8, "mm"),
1523410633872:text = element_text(size = baseTextSize,
1523410633873:family = baseFontFamily)
1523410633873:)
1523410633874:)
1523410633881:toolNameLevels <- compData$Tool_Name[c(6,4,5,7,3,2,1)]
1523410633881:# Preparing data ----------------------------------------------------------
1523410633882:dataToPlot <- compData %>%
1523410633882:arrange(Alleles) %>%
1523410633882:mutate(Tool_Name = factor(Tool_Name, toolNameLevels))
1523410633885:# Predictions plot ----------------------------------------------------------
1523410633885:ggbarplot(dataToPlot, x = "Tool_Name", y = "Alleles",
1523410633886:fill = "Tool_Name",
1523410633886:# color = "white",            # Set bar border colors to white
1523410633886:palette = customPalette,
1523410633887:rotate = T
1523410633887:# position = position_dodge(width=0.8)
1523410633887:# sort.val = "desc",          # Sort the value in dscending order
1523410633888:# sort.by.groups = FALSE,     # Don't sort inside each group
1523410633888:# x.text.angle = 90           # Rotate vertically x axis texts
1523410633888:) +
1523410633888:scale_y_continuous(expand = c(0, 0), position = "top") +
1523410633889:theme(axis.ticks.y = element_blank(),
1523410633889:axis.line.y = element_blank(),
1523410633889:# panel.grid.major     = element_line(colour = gridColor, size = lineSize),
1523410633890:panel.grid.major.x   = element_line(colour = gridColor, size = lineSize),
1523410633890:plot.margin = margin(8, 8, 8, 8, "mm"),
1523410633890:axis.text.y = element_text(margin=margin(1,1,1,1,"mm"))) +
1523410633891:labs(x = "Typing Tool",
1523410633891:y = "Correct Alleles (%)\n")
1523410634206:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523410634207:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523410634208:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523410634209:geom_hline(data = annotationData, aes(yintercept = timeMarks), size = lineSize/1.5, color = gridColor) +
1523410634209:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523410634209:stat = "identity", position = position_dodge(width=0.9)) +
1523410634210:scale_y_log10(expand = c(0, 0), position = "top") +
1523410634210:scale_fill_manual(values = customPalette) +
1523410634211:publicationTheme +
1523410634211:labs(x = "Typing Tool",
1523410634212:y = "Run Time (s)\n") + coord_flip()
1523410634227:# timePlot
1523410634228:# Annotation - times
1523410634228:for (i in 1:nrow(annotationData))  {
1523410634229:timePlot <- timePlot + annotation_custom(
1523410634229:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523410634229:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875, col = "#333333")),
1523410634230:ymin = log10(annotationData$timeMarks[i]),
1523410634230:ymax = log10(annotationData$timeMarks[i]),
1523410634230:xmin = 0.4,
1523410634231:xmax = 0.4)
1523410634231:}
1523410634252:# aGrob    <- textGrob(label = "30s", hjust = 0, vjust = 1, gp = gpar(cex = 1.05), rot = 315)
1523410634252:# timePlot <- timePlot + annotation_custom(grob = aGrob,
1523410634253:#                                          xmin = 0.2,  xmax = 0.2,
1523410634253:#                                          ymin = log10(30), ymax = log10(30))
1523410634253:gt <- ggplot_gtable(ggplot_build(timePlot))
1523410634973:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523410634973:grid.draw(gt)
1523410635069:# Annotation out of the plot ----------------------------------------------
1523410635069:#
1523410635069:# library (ggplot2)
1523410635069:# library(grid)
1523410635070:#
1523410635070:# df=data.frame(y=c("cat1","cat2","cat3"),x=c(12,10,14),n=c(5,15,20))
1523410635070:#
1523410635071:# p <- ggplot(df, aes(x,y)) + geom_point() +            # Base plot
1523410635071:#   theme(plot.margin = unit(c(1,3,1,1), "lines"))   # Make room for the grob
1523410635071:#
1523410635072:# for (i in 1:length(df$n))  {
1523410635072:#   p <- p + annotation_custom(
1523410635072:#     grob = textGrob(label = df$n[i], hjust = 0, gp = gpar(cex = 1.5)),
1523410635072:#     ymin = df$y[i],      # Vertical position of the textGrob
1523410635073:#     ymax = df$y[i],
1523410635073:#     xmin = 14.3,         # Note: The grobs are positioned outside the plot area
1523410635073:#     xmax = 14.3)
1523410635074:# }
1523410635074:#
1523410635074:# # Code to override clipping
1523410635074:# gt <- ggplot_gtable(ggplot_build(p))
1523410635075:# gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523410635075:# grid.draw(gt)
1523410678898:publicationTheme <- list(
1523410678899:theme_pubr() +
1523410678900:theme(
1523410678900:axis.line.y  = element_blank(),
1523410678901:axis.text    = element_text(size = baseTextSize * 0.875,
1523410678902:family = baseFontFamily,
1523410678903:color = "black"),
1523410678903:# axis.text.y  = element_text(margin=margin(1, 1, 1, 1, "mm")),
1523410678904:axis.ticks.y = element_blank(),
1523410678905:axis.title   = element_text(size = baseTextSize),
1523410678905:panel.grid.major.x = element_line(colour = gridColor,
1523410678906:size = lineSize),
1523410678907:plot.margin = margin(8, 20, 20, 8, "mm"),
1523410678907:text = element_text(size = baseTextSize,
1523410678908:family = baseFontFamily)
1523410678909:)
1523410678910:)
1523410678920:toolNameLevels <- compData$Tool_Name[c(6,4,5,7,3,2,1)]
1523410678921:# Preparing data ----------------------------------------------------------
1523410678921:dataToPlot <- compData %>%
1523410678922:arrange(Alleles) %>%
1523410678922:mutate(Tool_Name = factor(Tool_Name, toolNameLevels))
1523410678931:# Predictions plot ----------------------------------------------------------
1523410678932:ggbarplot(dataToPlot, x = "Tool_Name", y = "Alleles",
1523410678932:fill = "Tool_Name",
1523410678932:# color = "white",            # Set bar border colors to white
1523410678933:palette = customPalette,
1523410678933:rotate = T
1523410678933:# position = position_dodge(width=0.8)
1523410678934:# sort.val = "desc",          # Sort the value in dscending order
1523410678934:# sort.by.groups = FALSE,     # Don't sort inside each group
1523410678934:# x.text.angle = 90           # Rotate vertically x axis texts
1523410678935:) +
1523410678935:scale_y_continuous(expand = c(0, 0), position = "top") +
1523410678936:theme(axis.ticks.y = element_blank(),
1523410678936:axis.line.y = element_blank(),
1523410678936:# panel.grid.major     = element_line(colour = gridColor, size = lineSize),
1523410678937:panel.grid.major.x   = element_line(colour = gridColor, size = lineSize),
1523410678937:plot.margin = margin(8, 8, 8, 8, "mm"),
1523410678938:axis.text.y = element_text(margin=margin(1,1,1,1,"mm"))) +
1523410678938:labs(x = "Typing Tool",
1523410678938:y = "Correct Alleles (%)\n")
1523410679298:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523410679298:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523410679301:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523410679301:geom_hline(data = annotationData, aes(yintercept = timeMarks), size = lineSize/1.5, color = gridColor) +
1523410679302:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523410679302:stat = "identity", position = position_dodge(width=0.9)) +
1523410679303:scale_y_log10(expand = c(0, 0), position = "top") +
1523410679303:scale_fill_manual(values = customPalette) +
1523410679304:publicationTheme +
1523410679305:labs(x = "Typing Tool",
1523410679306:y = "Run Time (s)\n") + coord_flip()
1523410679316:# timePlot
1523410679316:# Annotation - times
1523410679317:for (i in 1:nrow(annotationData))  {
1523410679317:timePlot <- timePlot + annotation_custom(
1523410679318:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523410679318:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875, col = "#222222")),
1523410679318:ymin = log10(annotationData$timeMarks[i]),
1523410679318:ymax = log10(annotationData$timeMarks[i]),
1523410679319:xmin = 0.4,
1523410679319:xmax = 0.4)
1523410679319:}
1523410679347:# aGrob    <- textGrob(label = "30s", hjust = 0, vjust = 1, gp = gpar(cex = 1.05), rot = 315)
1523410679347:# timePlot <- timePlot + annotation_custom(grob = aGrob,
1523410679348:#                                          xmin = 0.2,  xmax = 0.2,
1523410679348:#                                          ymin = log10(30), ymax = log10(30))
1523410679348:gt <- ggplot_gtable(ggplot_build(timePlot))
1523410680103:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523410680104:grid.draw(gt)
1523410680199:# Annotation out of the plot ----------------------------------------------
1523410680199:#
1523410680199:# library (ggplot2)
1523410680200:# library(grid)
1523410680200:#
1523410680200:# df=data.frame(y=c("cat1","cat2","cat3"),x=c(12,10,14),n=c(5,15,20))
1523410680201:#
1523410680201:# p <- ggplot(df, aes(x,y)) + geom_point() +            # Base plot
1523410680201:#   theme(plot.margin = unit(c(1,3,1,1), "lines"))   # Make room for the grob
1523410680201:#
1523410680202:# for (i in 1:length(df$n))  {
1523410680202:#   p <- p + annotation_custom(
1523410680202:#     grob = textGrob(label = df$n[i], hjust = 0, gp = gpar(cex = 1.5)),
1523410680203:#     ymin = df$y[i],      # Vertical position of the textGrob
1523410680203:#     ymax = df$y[i],
1523410680203:#     xmin = 14.3,         # Note: The grobs are positioned outside the plot area
1523410680203:#     xmax = 14.3)
1523410680204:# }
1523410680204:#
1523410680204:# # Code to override clipping
1523410680205:# gt <- ggplot_gtable(ggplot_build(p))
1523410680205:# gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523410680205:# grid.draw(gt)
1523410905780:publicationTheme <- list(
1523410905780:theme_pubr() +
1523410905780:theme(
1523410905781:axis.line.y  = element_blank(),
1523410905781:axis.text    = element_text(size = baseTextSize * 0.875,
1523410905781:family = baseFontFamily,
1523410905782:color = "black"),
1523410905782:# axis.text.y  = element_text(margin=margin(1, 1, 1, 1, "mm")),
1523410905782:axis.ticks.y = element_blank(),
1523410905783:axis.title   = element_text(size = baseTextSize),
1523410905783:panel.grid.major.x = element_line(colour = gridColor,
1523410905783:size = lineSize),
1523410905784:plot.margin = margin(8, 20, 20, 8, "mm"),
1523410905784:text = element_text(size = baseTextSize,
1523410905785:family = baseFontFamily)
1523410905785:)
1523410905785:)
1523410905792:toolNameLevels <- compData$Tool_Name[c(6,4,5,7,3,2,1)]
1523410905793:# Preparing data ----------------------------------------------------------
1523410905793:dataToPlot <- compData %>%
1523410905794:arrange(Alleles) %>%
1523410905794:mutate(Tool_Name = factor(Tool_Name, toolNameLevels))
1523410905796:# Predictions plot ----------------------------------------------------------
1523410905797:ggbarplot(dataToPlot, x = "Tool_Name", y = "Alleles",
1523410905797:fill = "Tool_Name",
1523410905797:# color = "white",            # Set bar border colors to white
1523410905797:palette = customPalette,
1523410905798:rotate = T
1523410905798:# position = position_dodge(width=0.8)
1523410905798:# sort.val = "desc",          # Sort the value in dscending order
1523410905799:# sort.by.groups = FALSE,     # Don't sort inside each group
1523410905799:# x.text.angle = 90           # Rotate vertically x axis texts
1523410905800:) +
1523410905800:scale_y_continuous(expand = c(0, 0), position = "top") +
1523410905800:theme(axis.ticks.y = element_blank(),
1523410905800:axis.line.y = element_blank(),
1523410905801:# panel.grid.major     = element_line(colour = gridColor, size = lineSize),
1523410905801:panel.grid.major.x   = element_line(colour = gridColor, size = lineSize),
1523410905802:plot.margin = margin(8, 8, 8, 8, "mm"),
1523410905802:axis.text.y = element_text(margin=margin(1,1,1,1,"mm"))) +
1523410905803:labs(x = "Typing Tool",
1523410905803:y = "Correct Alleles (%)\n")
1523410906205:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523410906205:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523410906208:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523410906208:geom_hline(data = annotationData, aes(yintercept = timeMarks), size = lineSize/1.5, color = gridColor) +
1523410906209:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523410906210:stat = "identity", position = position_dodge(width=0.9)) +
1523410906210:scale_y_log10(expand = c(0, 0), position = "top") +
1523410906211:scale_fill_manual(values = customPalette) +
1523410906212:publicationTheme +
1523410906212:labs(x = "Typing Tool",
1523410906213:y = "Run Time (s)\n") + coord_flip()
1523410906225:# timePlot
1523410906226:# Annotation - times
1523410906226:for (i in 1:nrow(annotationData))  {
1523410906227:timePlot <- timePlot + annotation_custom(
1523410906227:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523410906228:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875, col = "#222222")),
1523410906228:ymin = log10(annotationData$timeMarks[i]),
1523410906229:ymax = log10(annotationData$timeMarks[i]),
1523410906280:xmin = 0.35,
1523410906281:xmax = 0.35)
1523410906281:}
1523410906623:# aGrob    <- textGrob(label = "30s", hjust = 0, vjust = 1, gp = gpar(cex = 1.05), rot = 315)
1523410906623:# timePlot <- timePlot + annotation_custom(grob = aGrob,
1523410906623:#                                          xmin = 0.2,  xmax = 0.2,
1523410906624:#                                          ymin = log10(30), ymax = log10(30))
1523410906624:gt <- ggplot_gtable(ggplot_build(timePlot))
1523410906935:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523410906935:grid.draw(gt)
1523410907027:# Annotation out of the plot ----------------------------------------------
1523410907027:#
1523410907028:# library (ggplot2)
1523410907028:# library(grid)
1523410907028:#
1523410907029:# df=data.frame(y=c("cat1","cat2","cat3"),x=c(12,10,14),n=c(5,15,20))
1523410907029:#
1523410907029:# p <- ggplot(df, aes(x,y)) + geom_point() +            # Base plot
1523410907029:#   theme(plot.margin = unit(c(1,3,1,1), "lines"))   # Make room for the grob
1523410907030:#
1523410907030:# for (i in 1:length(df$n))  {
1523410907030:#   p <- p + annotation_custom(
1523410907031:#     grob = textGrob(label = df$n[i], hjust = 0, gp = gpar(cex = 1.5)),
1523410907031:#     ymin = df$y[i],      # Vertical position of the textGrob
1523410907031:#     ymax = df$y[i],
1523410907032:#     xmin = 14.3,         # Note: The grobs are positioned outside the plot area
1523410907032:#     xmax = 14.3)
1523410907032:# }
1523410907032:#
1523410907033:# # Code to override clipping
1523410907033:# gt <- ggplot_gtable(ggplot_build(p))
1523410907033:# gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523410907034:# grid.draw(gt)
1523410992576:ggbarplot(dataToPlot, x = "Tool_Name", y = "Alleles",
1523410992576:fill = "Tool_Name",
1523410992577:# color = "white",            # Set bar border colors to white
1523410992577:palette = customPalette,
1523410992578:rotate = T
1523410992578:# position = position_dodge(width=0.8)
1523410992578:# sort.val = "desc",          # Sort the value in dscending order
1523410992579:# sort.by.groups = FALSE,     # Don't sort inside each group
1523410992579:# x.text.angle = 90           # Rotate vertically x axis texts
1523410992580:) +
1523410992580:scale_y_continuous(expand = c(0, 0), position = "top") +
1523410992580:theme(axis.ticks.y = element_blank(),
1523410992581:axis.line.y = element_blank(),
1523410992581:# panel.grid.major     = element_line(colour = gridColor, size = lineSize),
1523410992582:panel.grid.major.x   = element_line(colour = gridColor, size = lineSize),
1523410992582:plot.margin = margin(8, 8, 8, 8, "mm"),
1523410992583:axis.text.y = element_text(margin=margin(1,1,1,1,"mm"))) +
1523410992583:labs(x = "Typing Tool",
1523410992583:y = "Correct Alleles (%)\n")
1523411124106:predPlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Alleles)) +
1523411124107:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523411124107:stat = "identity", position = position_dodge(width=0.9)) +
1523411124108:scale_y_continuous(expand = c(0, 0), position = "top") +
1523411124108:scale_fill_manual(values = customPalette) +
1523411124109:publicationTheme +
1523411124109:labs(x = "Typing Tool",
1523411124109:y = "Correct Alleles (%)\n") +
1523411124110:coord_flip()
1523411126608:predPlot
1523411201010:width     <- 9
1523411201011:height    <- width * 0.618
1523411201012:lineSize  <- 0.5
1523411201012:axisColor <- "#666666"
1523411201013:gridColor <- "#cccccc"
1523411201013:baseTextSize <- 18
1523411201014:barAnnotTextSize <- 4
1523411201014:# baseFontFamily <- "Helvetica"
1523411201015:baseFontFamily <- 'Arial'
1523411201015:baseFontFamily <- 'HelveticaNeueLT Com 45 Lt'
1523411201016:baseFontFamily <- 'HelveticaNeueLT Std Lt'
1523411201016:publicationTheme <- list(
1523411201017:theme_pubr() +
1523411201017:theme(
1523411201017:axis.line.y  = element_blank(),
1523411201017:axis.text    = element_text(size = baseTextSize * 0.875,
1523411201018:family = baseFontFamily,
1523411201018:color = "black"),
1523411201018:# axis.text.y  = element_text(margin=margin(1, 1, 1, 1, "mm")),
1523411201019:axis.ticks.y = element_blank(),
1523411201019:axis.title   = element_text(size = baseTextSize),
1523411201020:panel.grid.major.x = element_line(colour = gridColor,
1523411201020:size = lineSize),
1523411201020:plot.margin = margin(8, 20, 20, 8, "mm"),
1523411201021:text = element_text(size = baseTextSize,
1523411201021:family = baseFontFamily)
1523411201022:)
1523411201023:)
1523411201033:toolNameLevels <- compData$Tool_Name[c(6,4,5,7,3,2,1)]
1523411201034:# Preparing data ----------------------------------------------------------
1523411201035:dataToPlot <- compData %>%
1523411201035:arrange(Alleles) %>%
1523411201036:mutate(Tool_Name = factor(Tool_Name, toolNameLevels))
1523411201041:# Predictions plot ----------------------------------------------------------
1523411201042:# ggbarplot(dataToPlot, x = "Tool_Name", y = "Alleles",
1523411201042:#           fill = "Tool_Name",
1523411201043:#           # color = "white",            # Set bar border colors to white
1523411201043:#           palette = customPalette,
1523411201044:#           rotate = T
1523411201045:#           # position = position_dodge(width=0.8)
1523411201045:#           # sort.val = "desc",          # Sort the value in dscending order
1523411201046:#           # sort.by.groups = FALSE,     # Don't sort inside each group
1523411201046:#           # x.text.angle = 90           # Rotate vertically x axis texts
1523411201047:# ) +
1523411201048:#   scale_y_continuous(expand = c(0, 0), position = "top") +
1523411201048:#   theme(axis.ticks.y = element_blank(),
1523411201049:#         axis.line.y = element_blank(),
1523411201049:#         # panel.grid.major     = element_line(colour = gridColor, size = lineSize),
1523411201050:#         panel.grid.major.x   = element_line(colour = gridColor, size = lineSize),
1523411201050:#         plot.margin = margin(8, 8, 8, 8, "mm"),
1523411201051:#         axis.text.y = element_text(margin=margin(1,1,1,1,"mm"))) +
1523411201051:#   labs(x = "Typing Tool",
1523411201052:#        y = "Correct Alleles (%)\n")
1523411201053:predPlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Alleles)) +
1523411201054:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523411201054:stat = "identity", position = position_dodge(width=0.9)) +
1523411201055:scale_y_continuous(expand = c(0, 0), position = "top") +
1523411201055:scale_fill_manual(values = customPalette) +
1523411201056:publicationTheme +
1523411201057:labs(x = "Typing Tool",
1523411201057:y = "Correct Alleles (%)\n") +
1523411201058:coord_flip()
1523411201072:predPlot
1523411201462:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523411201462:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523411201464:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523411201464:geom_hline(data = annotationData, aes(yintercept = timeMarks), size = lineSize/1.5, color = gridColor) +
1523411201464:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523411201465:stat = "identity", position = position_dodge(width=0.9)) +
1523411201465:scale_y_log10(expand = c(0, 0), position = "top") +
1523411201465:scale_fill_manual(values = customPalette) +
1523411201466:publicationTheme +
1523411201466:labs(x = "Typing Tool",
1523411201466:y = "Run Time (s)\n") +
1523411201467:coord_flip()
1523411201475:# timePlot
1523411201475:# Annotation - times
1523411201476:for (i in 1:nrow(annotationData))  {
1523411201476:timePlot <- timePlot + annotation_custom(
1523411201477:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523411201478:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875, col = "#222222")),
1523411201478:ymin = log10(annotationData$timeMarks[i]),
1523411201479:ymax = log10(annotationData$timeMarks[i]),
1523411201479:xmin = 0.35,
1523411201480:xmax = 0.35)
1523411201481:}
1523411201502:# aGrob    <- textGrob(label = "30s", hjust = 0, vjust = 1, gp = gpar(cex = 1.05), rot = 315)
1523411201502:# timePlot <- timePlot + annotation_custom(grob = aGrob,
1523411201502:#                                          xmin = 0.2,  xmax = 0.2,
1523411201502:#                                          ymin = log10(30), ymax = log10(30))
1523411201503:gt <- ggplot_gtable(ggplot_build(timePlot))
1523411202143:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523411202144:grid.draw(gt)
1523411202228:# Annotation out of the plot ----------------------------------------------
1523411202229:#
1523411202229:# library (ggplot2)
1523411202229:# library(grid)
1523411202230:#
1523411202230:# df=data.frame(y=c("cat1","cat2","cat3"),x=c(12,10,14),n=c(5,15,20))
1523411202230:#
1523411202231:# p <- ggplot(df, aes(x,y)) + geom_point() +            # Base plot
1523411202231:#   theme(plot.margin = unit(c(1,3,1,1), "lines"))   # Make room for the grob
1523411202231:#
1523411202232:# for (i in 1:length(df$n))  {
1523411202232:#   p <- p + annotation_custom(
1523411202232:#     grob = textGrob(label = df$n[i], hjust = 0, gp = gpar(cex = 1.5)),
1523411202233:#     ymin = df$y[i],      # Vertical position of the textGrob
1523411202233:#     ymax = df$y[i],
1523411202233:#     xmin = 14.3,         # Note: The grobs are positioned outside the plot area
1523411202234:#     xmax = 14.3)
1523411202234:# }
1523411202234:#
1523411202235:# # Code to override clipping
1523411202235:# gt <- ggplot_gtable(ggplot_build(p))
1523411202235:# gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523411202235:# grid.draw(gt)
1523411275358:predPlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Alleles)) +
1523411275359:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523411275359:stat = "identity", position = position_dodge(width=0.9),
1523411275360:show.legend = F) +
1523411275361:scale_y_continuous(expand = c(0, 0), position = "top") +
1523411275361:scale_fill_manual(values = customPalette) +
1523411275362:publicationTheme +
1523411275362:labs(x = "Typing Tool",
1523411275363:y = "Correct Alleles (%)\n") +
1523411275363:coord_flip()
1523411275371:predPlot
1523411282469:predPlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Alleles)) +
1523411282469:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523411282470:stat = "identity", position = position_dodge(width=0.9),
1523411282470:show.legend = F) +
1523411282471:scale_y_continuous(expand = c(0, 0), position = "top") +
1523411282472:scale_fill_manual(values = customPalette) +
1523411282473:publicationTheme +
1523411282474:labs(x = "Typing Tool",
1523411282474:y = "Correct Alleles (%)") +
1523411282475:coord_flip()
1523411282487:predPlot
1523411296538:predPlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Alleles)) +
1523411296539:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523411296539:stat = "identity", position = position_dodge(width=0.9),
1523411296540:show.legend = F) +
1523411296540:scale_y_continuous(expand = c(0, 0), position = "top") +
1523411296541:scale_fill_manual(values = customPalette) +
1523411296541:publicationTheme +
1523411296542:labs(x = "Typing Tool",
1523411296542:y = "Correct Alleles (%)\n") +
1523411296542:coord_flip()
1523411296554:predPlot
1523411364235:grid.draw(gt)
1523412393662:ggsave(filename = "sources/STing_vs_others.prediction.png", plot = predPlot,
1523412393663:width = 8, height = 6)
1523412500626:ggsave(filename = "sources/STing_vs_others.time.png", plot = gt,
1523412500627:width = 8, height = 6)
1523412548675:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523412548676:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523412548677:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523412548678:geom_hline(data = annotationData, aes(yintercept = timeMarks), size = lineSize/1.5, color = gridColor) +
1523412548678:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523412548679:stat = "identity", position = position_dodge(width=0.9),
1523412548679:show.legend = F) +
1523412548680:scale_y_log10(expand = c(0, 0), position = "top") +
1523412548680:scale_fill_manual(values = customPalette) +
1523412548681:publicationTheme +
1523412548681:labs(x = "Typing Tool",
1523412548682:y = "Run Time (s)\n") +
1523412548682:coord_flip()
1523412548692:# Add annotation times
1523412548692:for (i in 1:nrow(annotationData))  {
1523412548693:timePlot <- timePlot + annotation_custom(
1523412548693:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523412548693:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875, col = "#222222")),
1523412548694:ymin = log10(annotationData$timeMarks[i]),
1523412548694:ymax = log10(annotationData$timeMarks[i]),
1523412548694:xmin = 0.35,
1523412548695:xmax = 0.35)
1523412548695:}
1523412548716:# Remove clipping
1523412548716:gt <- ggplot_gtable(ggplot_build(timePlot))
1523412548874:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523412548875:grid.draw(gt)
1523412548930:ggsave(filename = "sources/STing_vs_others.time.png", plot = gt,
1523412548930:width = 8, height = 6)
1523413955247:2018 - 15
1523414085477:# packages
1523414085478:# install.packages("ggplot2", "gridExtra","ggthemes");
1523414085478:library(ggplot2)
1523414085479:library(gridExtra)
1523414085480:library(cowplot)
1523414086212:library(Cairo)
1523414086214:# library(extrafont)
1523414086215:# font_import(prompt = F)
1523414086215:# fonts()
1523414086216:# fonttable()
1523414086217:source(file = "scripts/publication_theme.R")
1523414086249:# Global options
1523414086249:# options(stringsAsFactors = T)
1523414086251:# Load data
1523414086252:comparisonDataFile <- "data/02_stringmlst_vs_others.csv"
1523414086252:comparisonData     <- read.delim(comparisonDataFile)
1523414086256:# comparisonData$Species_scheme = factor(comparisonData$Species_scheme, levels = levels(comparisonData$Species_scheme)[c(2,4,3,1)] )
1523414086257:# comparisonData$Application    = factor(comparisonData$Application, levels = rev(levels(comparisonData$Application)) )
1523414086257:comparisonData$tool <- factor(comparisonData$tool,
1523414086258:levels = rev(levels(comparisonData$tool)[c(5,1,4,3,2)]))
1523414095934:# Load data
1523414095934:comparisonDataFile <- "data/02_stringmlst_vs_others.csv"
1523414097426:comparisonData     <- read.delim(comparisonDataFile)
1523418238534:largerSchemesData <- read_tsv("data/typer/sting_vs_stringmlst.tsv")
1523418240767:largerSchemesData
1523418406749:# Larger schemes ----------------------------------------------------------
1523418406750:largerDataToPlot <- largerSchemesData %>%
1523418406750:filter(Scheme == "rMLST" || Scheme == "cgMLST")
1523418410070:largerDataToPlot
1523418436874:(largerDataToPlot <- largerSchemesData %>%
1523418436875:filter(Scheme == "rMLST"))
1523418459427:# Larger schemes ----------------------------------------------------------
1523418459427:(largerDataToPlot <- largerSchemesData %>%
1523418459427:filter((Scheme == "rMLST" || Scheme == "cgMLST")))
1523418500776:# Larger schemes ----------------------------------------------------------
1523418500776:(largerDataToPlot <- largerSchemesData %>%
1523418500777:filter(Scheme == "rMLST" | Scheme == "cgMLST"))
1523418547695:(lsPlot <- ggplot(largerDataToPlot, aes(x = Application, y = Correct_Alleles)))
1523418656460:# Larger schemes ----------------------------------------------------------
1523418656461:largerSchemesData$Application
1523418705148:# Larger schemes ----------------------------------------------------------
1523418705148:applicationLevels <- c("STing - Fast", "STing - Sensitive", "stringMLST")
1523418712844:(largerDataToPlot <- largerSchemesData %>%
1523418712844:filter(Scheme == "rMLST" | Scheme == "cgMLST") %>%
1523418712845:mutate(Application = factor(Application, applicationLevels))
1523418712845:)
1523418752275:(
1523418752276:lsPlot <- ggplot(largerDataToPlot, aes(x = Application, y = Correct_Alleles)) +
1523418752276:geom_bar(aes(fill = Application), stat = "identity", position = position_dodge(width = 0.9))
1523418752277:)
1523418822344:(
1523418822344:lsPlot <- ggplot(largerDataToPlot, aes(x = Application, y = Correct_Alleles)) +
1523418822345:geom_bar(aes(fill = Application), color = "black", size = 0.5, width=0.7,
1523418822346:stat = "identity", position = position_dodge(width=0.9),
1523418822346:show.legend = F) +
1523418822347:scale_y_continuous(expand = c(0, 0), position = "top") +
1523418822348:scale_fill_manual(values = customPalette) +
1523418822348:publicationTheme +
1523418822349:labs(x = "Typing Tool",
1523418822349:y = "Correct Alleles (%)\n") +
1523418822350:coord_flip()
1523418822351:)
1523418849604:(
1523418849605:lsPlot <- ggplot(largerDataToPlot, aes(x = Application, y = Correct_Alleles)) +
1523418849605:geom_bar(aes(fill = Application), color = "black", size = 0.5, width=0.7,
1523418849606:stat = "identity", position = position_dodge(width=0.9),
1523418849606:show.legend = F) +
1523418849607:# scale_y_continuous(expand = c(0, 0), position = "top") +
1523418849608:scale_fill_manual(values = customPalette) +
1523418849608:publicationTheme +
1523418849609:labs(x = "Typing Tool",
1523418849610:y = "Correct Alleles (%)\n") +
1523418849610:coord_flip()
1523418849611:)
1523418892973:(
1523418892973:lsPlot <- ggplot(largerDataToPlot, aes(x = Application, y = Correct_Alleles)) +
1523418892973:# geom_bar(aes(fill = Application), stat = "identity", position = position_dodge(width = 0.9)) +
1523418892974:geom_bar(aes(fill = Application), color = "black", size = 0.5, width=0.7,
1523418892974:stat = "identity", position = position_dodge(width=0.9),
1523418892975:show.legend = F) +
1523418892975:scale_y_continuous(expand = c(0, 0), position = "top") +
1523418892975:scale_fill_manual(values = customPalette) +
1523418892976:publicationTheme +
1523418892976:labs(x = "Typing Tool",
1523418892977:y = "Correct Alleles (%)\n") +
1523418892977:coord_flip()
1523418892977:)
1523418902111:(
1523418902112:lsPlot <- ggplot(largerDataToPlot, aes(x = Application, y = Correct_Alleles)) +
1523418902112:geom_bar(aes(fill = Application), stat = "identity", position = position_dodge(width = 0.9)) +
1523418902113:# geom_bar(aes(fill = Application), color = "black", size = 0.5, width=0.7,
1523418902113:# stat = "identity", position = position_dodge(width=0.9),
1523418902114:# show.legend = F) +
1523418902114:scale_y_continuous(expand = c(0, 0), position = "top") +
1523418902115:scale_fill_manual(values = customPalette) +
1523418902115:publicationTheme +
1523418902116:labs(x = "Typing Tool",
1523418902117:y = "Correct Alleles (%)\n") +
1523418902117:coord_flip()
1523418902118:)
1523418946490:(
1523418946491:lsPlot <- ggplot(largerDataToPlot, aes(x = Application, y = Correct_Alleles)) +
1523418946492:geom_bar(aes(fill = Application), color = "black", size = 0.5, width=0.7,
1523418946492:stat = "identity", position = position_dodge(width = 0.9)) +
1523418946493:# geom_bar(aes(fill = Application), color = "black", size = 0.5, width=0.7,
1523418946494:# stat = "identity", position = position_dodge(width=0.9),
1523418946494:# show.legend = F) +
1523418946495:scale_y_continuous(expand = c(0, 0), position = "top") +
1523418946496:scale_fill_manual(values = customPalette) +
1523418946496:publicationTheme +
1523418946497:labs(x = "Typing Tool",
1523418946497:y = "Correct Alleles (%)\n") +
1523418946498:coord_flip()
1523418946498:)
1523418960726:(
1523418960727:lsPlot <- ggplot(largerDataToPlot, aes(x = Application, y = Correct_Alleles)) +
1523418960727:geom_bar(aes(fill = Application), color = "black", size = 0.5,
1523418960728:stat = "identity", position = position_dodge(width = 0.9)) +
1523418960728:# geom_bar(aes(fill = Application), color = "black", size = 0.5, width=0.7,
1523418960729:# stat = "identity", position = position_dodge(width=0.9),
1523418960730:# show.legend = F) +
1523418960730:scale_y_continuous(expand = c(0, 0), position = "top") +
1523418960731:scale_fill_manual(values = customPalette) +
1523418960732:publicationTheme +
1523418960732:labs(x = "Typing Tool",
1523418960733:y = "Correct Alleles (%)\n") +
1523418960734:coord_flip()
1523418960734:)
1523418971170:(
1523418971170:lsPlot <- ggplot(largerDataToPlot, aes(x = Application, y = Correct_Alleles)) +
1523418971171:geom_bar(aes(fill = Application), color = "black",
1523418971172:stat = "identity", position = position_dodge(width = 0.9)) +
1523418971172:# geom_bar(aes(fill = Application), color = "black", size = 0.5, width=0.7,
1523418971173:# stat = "identity", position = position_dodge(width=0.9),
1523418971173:# show.legend = F) +
1523418971174:scale_y_continuous(expand = c(0, 0), position = "top") +
1523418971174:scale_fill_manual(values = customPalette) +
1523418971175:publicationTheme +
1523418971176:labs(x = "Typing Tool",
1523418971177:y = "Correct Alleles (%)\n") +
1523418971178:coord_flip()
1523418971179:)
1523418979403:(
1523418979403:lsPlot <- ggplot(largerDataToPlot, aes(x = Application, y = Correct_Alleles)) +
1523418979404:geom_bar(aes(fill = Application),
1523418979404:stat = "identity", position = position_dodge(width = 0.9)) +
1523418979405:# geom_bar(aes(fill = Application), color = "black", size = 0.5, width=0.7,
1523418979405:# stat = "identity", position = position_dodge(width=0.9),
1523418979405:# show.legend = F) +
1523418979406:scale_y_continuous(expand = c(0, 0), position = "top") +
1523418979406:scale_fill_manual(values = customPalette) +
1523418979406:publicationTheme +
1523418979407:labs(x = "Typing Tool",
1523418979407:y = "Correct Alleles (%)\n") +
1523418979407:coord_flip()
1523418979408:)
1523418996908:largerDataToPlot
1523419003545:largerDataToPlot
1523419067026:(
1523419067027:lsPlot <- ggplot(largerDataToPlot, aes(x = Species_scheme, y = Correct_Alleles)) +
1523419067027:geom_bar(aes(fill = Species_scheme),
1523419067027:stat = "identity", position = position_dodge(width = 0.9)) +
1523419067028:# geom_bar(aes(fill = Application), color = "black", size = 0.5, width=0.7,
1523419067028:# stat = "identity", position = position_dodge(width=0.9),
1523419067029:# show.legend = F) +
1523419067029:scale_y_continuous(expand = c(0, 0), position = "top") +
1523419067030:scale_fill_manual(values = customPalette) +
1523419067030:publicationTheme +
1523419067030:labs(x = "Typing Tool",
1523419067031:y = "Correct Alleles (%)\n") +
1523419067031:coord_flip()
1523419067032:)
1523419071074:largerDataToPlot
1523419151538:(largerDataToPlot <- largerSchemesData %>%
1523419151539:filter(Scheme == "rMLST" | Scheme == "cgMLST") %>%
1523419151539:mutate(Species_scheme = as.factor(paste(Species, "-", Scheme)))
1523419151540:# mutate(Application = factor(Application, applicationLevels))
1523419151541:)
1523419307354:(largerDataToPlot <- largerSchemesData %>%
1523419307355:filter(Scheme == "rMLST" | Scheme == "cgMLST") %>%
1523419307355:# mutate(Species_scheme = as.factor(paste(Species, "-", Scheme)))
1523419307355:# mutate(Application_Scheme = factor(paste(Species, "-", Scheme)), applicationLevels))
1523419307356:mutate(Application_Scheme = factor(Application, applicationLevels))
1523419307356:)
1523419321250:(
1523419321251:lsPlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = Correct_Alleles)) +
1523419321252:geom_bar(aes(fill = Application),
1523419321252:stat = "identity", position = position_dodge(width = 0.9)) +
1523419321253:# geom_bar(aes(fill = Application), color = "black", size = 0.5, width=0.7,
1523419321254:# stat = "identity", position = position_dodge(width=0.9),
1523419321255:# show.legend = F) +
1523419321256:scale_y_continuous(expand = c(0, 0), position = "top") +
1523419321257:scale_fill_manual(values = customPalette) +
1523419321258:publicationTheme +
1523419321258:labs(x = "Typing Tool",
1523419321259:y = "Correct Alleles (%)\n") +
1523419321260:coord_flip()
1523419321260:)
1523419386181:paste(rev(c("#0a4f75","#91bbe4","#d7e4f5","#e8702a", "#edc374", "#faebd7", "#86827F"), collapse = ",")
1523419399583:paste(rev(c("#0a4f75","#91bbe4","#d7e4f5","#e8702a", "#edc374", "#faebd7", "#86827F"), collapse = ","))
1523419426179:paste(rev(c("#0a4f75","#91bbe4","#d7e4f5","#e8702a", "#edc374", "#faebd7", "#86827F"),
1523419426179:collapse = ","))
1523419455949:paste(rev(c("#0a4f75","#91bbe4","#d7e4f5","#e8702a", "#edc374", "#faebd7", "#86827F")),
1523419455949:collapse = ","))
1523419459646:paste(rev(c("#0a4f75","#91bbe4","#d7e4f5","#e8702a", "#edc374", "#faebd7", "#86827F")),
1523419459646:collapse = ",")
1523419474434:paste(rev(c("#0a4f75","#91bbe4","#d7e4f5","#e8702a", "#edc374", "#faebd7", "#86827F")),
1523419474434:collapse = "\",\"")
1523419484244:paste(rev(c("#0a4f75","#91bbe4","#d7e4f5","#e8702a", "#edc374", "#faebd7", "#86827F")),
1523419484244:collapse = "\\",\\"")
1523419503827:paste(rev(c("#0a4f75","#91bbe4","#d7e4f5","#e8702a", "#edc374", "#faebd7", "#86827F")),
1523419503827:collapse = "','")
1523419560181:customPalette <- c('#86827F','#faebd7','#edc374','#e8702a','#d7e4f5','#91bbe4','#0a4f75')
1523419581130:(
1523419581130:lsPlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = Correct_Alleles)) +
1523419581131:geom_bar(aes(fill = Application),
1523419581131:stat = "identity", position = position_dodge(width = 0.9)) +
1523419581131:# geom_bar(aes(fill = Application), color = "black", size = 0.5, width=0.7,
1523419581132:# stat = "identity", position = position_dodge(width=0.9),
1523419581132:# show.legend = F) +
1523419581132:scale_y_continuous(expand = c(0, 0), position = "top") +
1523419581133:scale_fill_manual(values = rev(customPalette)) +
1523419581133:publicationTheme +
1523419581133:labs(x = "Typing Tool",
1523419581134:y = "Correct Alleles (%)\n") +
1523419581134:coord_flip()
1523419581135:)
1523419614524:# Larger schemes ----------------------------------------------------------
1523419614524:applicationLevels <- c("STing - Fast", "STing - Sensitive", "stringMLST")
1523419615624:(largerDataToPlot <- largerSchemesData %>%
1523419615624:filter(Scheme == "rMLST" | Scheme == "cgMLST") %>%
1523419615625:# mutate(Species_scheme = as.factor(paste(Species, "-", Scheme)))
1523419615625:# mutate(Application_Scheme = factor(paste(Species, "-", Scheme)), applicationLevels))
1523419615625:mutate(Application_Scheme = factor(Application, applicationLevels))
1523419615626:)
1523419619123:(
1523419619123:lsPlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = Correct_Alleles)) +
1523419619124:geom_bar(aes(fill = Application),
1523419619124:stat = "identity", position = position_dodge(width = 0.9)) +
1523419619125:# geom_bar(aes(fill = Application), color = "black", size = 0.5, width=0.7,
1523419619125:# stat = "identity", position = position_dodge(width=0.9),
1523419619125:# show.legend = F) +
1523419619126:scale_y_continuous(expand = c(0, 0), position = "top") +
1523419619126:scale_fill_manual(values = rev(customPalette)) +
1523419619126:publicationTheme +
1523419619127:labs(x = "Typing Tool",
1523419619127:y = "Correct Alleles (%)\n") +
1523419619127:coord_flip()
1523419619128:)
1523419668013:(largerDataToPlot <- largerSchemesData %>%
1523419668014:filter(Scheme == "rMLST" | Scheme == "cgMLST") %>%
1523419668014:arrange(desc(Scheme), Application),
1523419668015:# mutate(Species_scheme = as.factor(paste(Species, "-", Scheme)))
1523419668016:# mutate(Application_Scheme = factor(paste(Species, "-", Scheme)), applicationLevels))
1523419668016:mutate(Application_Scheme = factor(Application, applicationLevels))
1523419668018:)
1523419675361:(largerDataToPlot <- largerSchemesData %>%
1523419675362:filter(Scheme == "rMLST" | Scheme == "cgMLST") %>%
1523419675362:arrange(desc(Scheme), Application) %>%
1523419675363:# mutate(Species_scheme = as.factor(paste(Species, "-", Scheme)))
1523419675363:# mutate(Application_Scheme = factor(paste(Species, "-", Scheme)), applicationLevels))
1523419675364:mutate(Application_Scheme = factor(Application, applicationLevels))
1523419675364:)
1523419678081:(
1523419678082:lsPlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = Correct_Alleles)) +
1523419678082:geom_bar(aes(fill = Application),
1523419678083:stat = "identity", position = position_dodge(width = 0.9)) +
1523419678083:# geom_bar(aes(fill = Application), color = "black", size = 0.5, width=0.7,
1523419678084:# stat = "identity", position = position_dodge(width=0.9),
1523419678084:# show.legend = F) +
1523419678084:scale_y_continuous(expand = c(0, 0), position = "top") +
1523419678085:scale_fill_manual(values = rev(customPalette)) +
1523419678085:publicationTheme +
1523419678085:labs(x = "Typing Tool",
1523419678086:y = "Correct Alleles (%)\n") +
1523419678086:coord_flip()
1523419678086:)
1523419715917:function (data = NULL, mapping = aes(), ..., environment = parent.frame())
1523419719157:(
1523419719157:lsPlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = Correct_Alleles)) +
1523419719158:geom_bar(aes(fill = Application),
1523419719159:stat = "identity", position = position_dodge(width = 0.9)) +
1523419719159:# geom_bar(aes(fill = Application), color = "black", size = 0.5, width=0.7,
1523419719160:# stat = "identity", position = position_dodge(width=0.9),
1523419719160:# show.legend = F) +
1523419719161:# scale_y_continuous(expand = c(0, 0), position = "top") +
1523419719161:scale_fill_manual(values = rev(customPalette)) +
1523419719162:publicationTheme +
1523419719162:labs(x = "Typing Tool",
1523419719162:y = "Correct Alleles (%)\n") +
1523419719163:coord_flip()
1523419719163:)
1523419722304:(
1523419722305:lsPlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = Correct_Alleles)) +
1523419722306:geom_bar(aes(fill = Application),
1523419722306:stat = "identity", position = position_dodge(width = 0.9)) +
1523419722306:# geom_bar(aes(fill = Application), color = "black", size = 0.5, width=0.7,
1523419722307:# stat = "identity", position = position_dodge(width=0.9),
1523419722307:# show.legend = F) +
1523419722308:# scale_y_continuous(expand = c(0, 0), position = "top") +
1523419722308:scale_fill_manual(values = rev(customPalette)) +
1523419722308:publicationTheme +
1523419722309:labs(x = "Typing Tool",
1523419722309:y = "Correct Alleles (%)\n") +
1523419722309:coord_flip()
1523419722310:)
1523419791857:(
1523419791857:lsPlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = Correct_Alleles)) +
1523419791858:geom_bar(aes(fill = Application),
1523419791858:stat = "identity", position = position_dodge(width = 0.9)) +
1523419791859:# geom_bar(aes(fill = Application), color = "black", size = 0.5, width=0.7,
1523419791859:# stat = "identity", position = position_dodge(width=0.9),
1523419791860:# show.legend = F) +
1523419791860:scale_y_continuous(limits = c(0, 100), expand = c(0, 0), position = "top") +
1523419791861:scale_fill_manual(values = rev(customPalette)) +
1523419791861:publicationTheme +
1523419791861:labs(x = "Typing Tool",
1523419791862:y = "Correct Alleles (%)\n") +
1523419791862:coord_flip()
1523419791863:)
1523419847680:(largerDataToPlot <- largerSchemesData %>%
1523419847681:filter(Scheme == "rMLST" | Scheme == "cgMLST") %>%
1523419847681:arrange(desc(Scheme), Application) %>%
1523419847681:# mutate(Species_scheme = as.factor(paste(Species, "-", Scheme)))
1523419847682:# mutate(Application_Scheme = factor(paste(Species, "-", Scheme)), applicationLevels))
1523419847682:mutate(Application_Scheme = factor(Application, Application))
1523419847682:)
1523419863372:(largerDataToPlot <- largerSchemesData %>%
1523419863372:filter(Scheme == "rMLST" | Scheme == "cgMLST") %>%
1523419863373:arrange(desc(Scheme), Application) %>%
1523419863373:# mutate(Species_scheme = as.factor(paste(Species, "-", Scheme)))
1523419863373:# mutate(Application_Scheme = factor(paste(Species, "-", Scheme)), applicationLevels))
1523419863374:mutate(Application = factor(Application, Application))
1523419863374:)
1523419887790:Application
1523419896424:largerSchemesData$A
1523419901624:largerSchemesData$Application
1523419910466:largerDataToPlot$Application
1523419942583:(largerDataToPlot <- largerSchemesData %>%
1523419942584:filter(Scheme == "rMLST" | Scheme == "cgMLST") %>%
1523419942584:arrange(desc(Scheme), Application) %>%
1523419942585:# mutate(Species_scheme = as.factor(paste(Species, "-", Scheme)))
1523419942585:# mutate(Application_Scheme = factor(paste(Species, "-", Scheme)), applicationLevels))
1523419942586:mutate(Application = factor(Application, Application))
1523419942587:)
1523419953788:largerDataToPlot$App
1523419980025:(largerDataToPlot <- largerSchemesData %>%
1523419980026:filter(Scheme == "rMLST" | Scheme == "cgMLST") %>%
1523419980027:arrange(desc(Scheme), Application) %>%
1523419980027:# mutate(Species_scheme = as.factor(paste(Species, "-", Scheme)))
1523419980028:# mutate(Application_Scheme = factor(paste(Species, "-", Scheme)), applicationLevels))
1523419980028:mutate(Tool = factor(Application, Application))
1523419980029:)
1523420002113:(largerDataToPlot <- largerSchemesData %>%
1523420002114:filter(Scheme == "rMLST" | Scheme == "cgMLST") %>%
1523420002114:arrange(desc(Scheme), Application) %>%
1523420002115:# mutate(Species_scheme = as.factor(paste(Species, "-", Scheme)))
1523420002116:# mutate(Application_Scheme = factor(paste(Species, "-", Scheme)), applicationLevels))
1523420002116:mutate(Application = factor(Application, unique(Application)))
1523420002117:)
1523420004777:(
1523420004777:lsPlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = Correct_Alleles)) +
1523420004778:geom_bar(aes(fill = Application),
1523420004778:stat = "identity", position = position_dodge(width = 0.9)) +
1523420004779:# geom_bar(aes(fill = Application), color = "black", size = 0.5, width=0.7,
1523420004779:# stat = "identity", position = position_dodge(width=0.9),
1523420004780:# show.legend = F) +
1523420004781:scale_y_continuous(limits = c(0, 100), expand = c(0, 0), position = "top") +
1523420004781:scale_fill_manual(values = rev(customPalette)) +
1523420004781:publicationTheme +
1523420004782:labs(x = "Typing Tool",
1523420004782:y = "Correct Alleles (%)\n") +
1523420004783:coord_flip()
1523420004783:)
1523420031159:(
1523420031159:lsPlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = Correct_Alleles)) +
1523420031160:# geom_bar(aes(fill = Application),
1523420031161:# stat = "identity", position = position_dodge(width = 0.9)) +
1523420031161:geom_bar(aes(fill = Application), color = "black", size = 0.5, width=0.7,
1523420031162:stat = "identity", position = position_dodge(width=0.9)) +
1523420031163:# show.legend = F) +
1523420031163:scale_y_continuous(limits = c(0, 100), expand = c(0, 0), position = "top") +
1523420031164:scale_fill_manual(values = rev(customPalette)) +
1523420031164:publicationTheme +
1523420031165:labs(x = "Typing Tool",
1523420031165:y = "Correct Alleles (%)\n") +
1523420031166:coord_flip()
1523420031166:)
1523420049968:(
1523420049969:lsPlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = Correct_Alleles)) +
1523420049969:# geom_bar(aes(fill = Application),
1523420049969:# stat = "identity", position = position_dodge(width = 0.9)) +
1523420049970:geom_bar(aes(fill = Application), color = "black", size = 0.5,
1523420049970:stat = "identity", position = position_dodge(width=0.9)) +
1523420049970:# show.legend = F) +
1523420049971:scale_y_continuous(limits = c(0, 100), expand = c(0, 0), position = "top") +
1523420049971:scale_fill_manual(values = rev(customPalette)) +
1523420049971:publicationTheme +
1523420049972:labs(x = "Typing Tool",
1523420049972:y = "Correct Alleles (%)\n") +
1523420049972:coord_flip()
1523420049973:)
1523420090288:(
1523420090289:lsPlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = Correct_Alleles)) +
1523420090289:# geom_bar(aes(fill = Application),
1523420090289:# stat = "identity", position = position_dodge(width = 0.9)) +
1523420090290:geom_bar(aes(fill = Application), color = "black", size = 0.5,
1523420090290:stat = "identity", position = position_dodge(width=0.9)) +
1523420090291:# show.legend = F) +
1523420090291:scale_y_continuous(limits = c(0, 100), expand = c(0, 0), position = "top") +
1523420090291:scale_fill_manual(values = rev(customPalette)) +
1523420090292:publicationTheme +
1523420090292:labs(x = "Typing Scheme",
1523420090293:y = "Correct Alleles (%)\n") +
1523420090293:coord_flip()
1523420090294:)
1523420111953:(
1523420111953:lsPredPlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = Correct_Alleles)) +
1523420111954:# geom_bar(aes(fill = Application),
1523420111955:# stat = "identity", position = position_dodge(width = 0.9)) +
1523420111955:geom_bar(aes(fill = Application), color = "black", size = 0.5,
1523420111956:stat = "identity", position = position_dodge(width=0.9)) +
1523420111956:# show.legend = F) +
1523420111957:scale_y_continuous(limits = c(0, 100), expand = c(0, 0), position = "top") +
1523420111958:scale_fill_manual(values = rev(customPalette)) +
1523420111958:publicationTheme +
1523420111959:labs(x = "Typing Scheme",
1523420111960:y = "Correct Alleles (%)\n") +
1523420111960:coord_flip()
1523420111964:)
1523420132086:largerDataToPlot
1523420171463:(
1523420171463:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = Time)) +
1523420171464:# geom_bar(aes(fill = Application),
1523420171464:# stat = "identity", position = position_dodge(width = 0.9)) +
1523420171464:geom_bar(aes(fill = Application), color = "black", size = 0.5,
1523420171465:stat = "identity", position = position_dodge(width=0.9)) +
1523420171465:# show.legend = F) +
1523420171466:scale_y_log10(expand = c(0, 0), position = "top") +
1523420171466:scale_fill_manual(values = rev(customPalette)) +
1523420171466:publicationTheme +
1523420171467:labs(x = "Typing Scheme",
1523420171467:y = "Correct Alleles (%)\n") +
1523420171467:coord_flip()
1523420171468:)
1523420195193:lsPredPlot
1523420238196:(largerDataToPlot <- largerSchemesData %>%
1523420238196:filter(Scheme == "rMLST" | Scheme == "cgMLST") %>%
1523420238197:arrange(desc(Scheme), Application)
1523420238197:# mutate(Species_scheme = as.factor(paste(Species, "-", Scheme)))
1523420238197:# mutate(Application_Scheme = factor(paste(Species, "-", Scheme)), applicationLevels))
1523420238198:# mutate(Application = factor(Application, unique(Application)))
1523420238198:)
1523420240629:(
1523420240630:lsPredPlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = Correct_Alleles)) +
1523420240630:# geom_bar(aes(fill = Application),
1523420240631:# stat = "identity", position = position_dodge(width = 0.9)) +
1523420240631:geom_bar(aes(fill = Application), color = "black", size = 0.5,
1523420240632:stat = "identity", position = position_dodge(width=0.9)) +
1523420240632:# show.legend = F) +
1523420240632:scale_y_continuous(limits = c(0, 100), expand = c(0, 0), position = "top") +
1523420240633:scale_fill_manual(values = rev(customPalette)) +
1523420240633:publicationTheme +
1523420240634:labs(x = "Typing Scheme",
1523420240634:y = "Correct Alleles (%)\n") +
1523420240635:coord_flip()
1523420240635:)
1523420255092:(largerDataToPlot <- largerSchemesData %>%
1523420255092:filter(Scheme == "rMLST" | Scheme == "cgMLST")# %>%
1523420255093:# arrange(desc(Scheme), Application) %>%
1523420255094:# mutate(Species_scheme = as.factor(paste(Species, "-", Scheme)))
1523420255094:# mutate(Application_Scheme = factor(paste(Species, "-", Scheme)), applicationLevels))
1523420255094:# mutate(Application = factor(Application, unique(Application)))
1523420255095:)
1523420258512:(
1523420258512:lsPredPlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = Correct_Alleles)) +
1523420258513:# geom_bar(aes(fill = Application),
1523420258514:# stat = "identity", position = position_dodge(width = 0.9)) +
1523420258515:geom_bar(aes(fill = Application), color = "black", size = 0.5,
1523420258515:stat = "identity", position = position_dodge(width=0.9)) +
1523420258516:# show.legend = F) +
1523420258517:scale_y_continuous(limits = c(0, 100), expand = c(0, 0), position = "top") +
1523420258518:scale_fill_manual(values = rev(customPalette)) +
1523420258518:publicationTheme +
1523420258519:labs(x = "Typing Scheme",
1523420258520:y = "Correct Alleles (%)\n") +
1523420258520:coord_flip()
1523420258521:)
1523420278694:(largerDataToPlot <- largerSchemesData %>%
1523420278694:filter(Scheme == "rMLST" | Scheme == "cgMLST")# %>%
1523420278695:# arrange(desc(Scheme), Application) %>%
1523420278695:# mutate(Species_scheme = as.factor(paste(Species, "-", Scheme)))
1523420278696:# mutate(Application_Scheme = factor(paste(Species, "-", Scheme)), applicationLevels))
1523420278696:# mutate(Application = factor(Application, unique(Application)))
1523420278696:)
1523420279469:(
1523420279470:lsPredPlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = Correct_Alleles)) +
1523420279471:# geom_bar(aes(fill = Application),
1523420279472:# stat = "identity", position = position_dodge(width = 0.9)) +
1523420279473:geom_bar(aes(fill = Application), color = "black", size = 0.5,
1523420279473:stat = "identity", position = position_dodge(width=0.9)) +
1523420279474:# show.legend = F) +
1523420279474:scale_y_continuous(limits = c(0, 100), expand = c(0, 0), position = "top") +
1523420279474:scale_fill_manual(values = rev(customPalette)) +
1523420279475:publicationTheme +
1523420279475:labs(x = "Typing Scheme",
1523420279476:y = "Correct Alleles (%)\n") +
1523420279476:coord_flip()
1523420279477:)
1523420294613:(largerDataToPlot <- largerSchemesData %>%
1523420294614:filter(Scheme == "rMLST" | Scheme == "cgMLST")# %>%
1523420294616:# arrange(desc(Scheme), Application) %>%
1523420294617:# mutate(Species_scheme = as.factor(paste(Species, "-", Scheme)))
1523420294619:# mutate(Application_Scheme = factor(paste(Species, "-", Scheme)), applicationLevels))
1523420294620:# mutate(Application = factor(Application, unique(Application)))
1523420294620:)
1523420319899:(largerDataToPlot <- largerSchemesData %>%
1523420319900:filter(Scheme == "rMLST" | Scheme == "cgMLST") %>%
1523420319900:arrange(desc(Scheme), Application) %>%
1523420319901:# mutate(Species_scheme = as.factor(paste(Species, "-", Scheme)))
1523420319901:# mutate(Application_Scheme = factor(paste(Species, "-", Scheme)), applicationLevels))
1523420319902:mutate(Application = factor(Application, rev(unique(Application))))
1523420319903:)
1523420322085:(
1523420322086:lsPredPlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = Correct_Alleles)) +
1523420322086:# geom_bar(aes(fill = Application),
1523420322086:# stat = "identity", position = position_dodge(width = 0.9)) +
1523420322087:geom_bar(aes(fill = Application), color = "black", size = 0.5,
1523420322087:stat = "identity", position = position_dodge(width=0.9)) +
1523420322088:# show.legend = F) +
1523420322088:scale_y_continuous(limits = c(0, 100), expand = c(0, 0), position = "top") +
1523420322089:scale_fill_manual(values = rev(customPalette)) +
1523420322089:publicationTheme +
1523420322089:labs(x = "Typing Scheme",
1523420322090:y = "Correct Alleles (%)\n") +
1523420322090:coord_flip()
1523420322091:)
1523420345813:(
1523420345813:lsPredPlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = Correct_Alleles)) +
1523420345814:# geom_bar(aes(fill = Application),
1523420345815:# stat = "identity", position = position_dodge(width = 0.9)) +
1523420345816:geom_bar(aes(fill = Application), color = "black", size = 0.5,
1523420345816:stat = "identity", position = position_dodge(width=0.9)) +
1523420345817:# show.legend = F) +
1523420345818:scale_y_continuous(limits = c(0, 100), expand = c(0, 0), position = "top") +
1523420345820:scale_fill_manual(values = customPalette) +
1523420345821:publicationTheme +
1523420345822:labs(x = "Typing Scheme",
1523420345822:y = "Correct Alleles (%)\n") +
1523420345824:coord_flip()
1523420345825:)
1523420365329:rev(customPalette)
1523420400008:(
1523420400009:lsPredPlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = Correct_Alleles)) +
1523420400009:# geom_bar(aes(fill = Application),
1523420400010:# stat = "identity", position = position_dodge(width = 0.9)) +
1523420400011:geom_bar(aes(fill = Application), color = "black", size = 0.5,
1523420400011:stat = "identity", position = position_dodge(width=0.9)) +
1523420400012:# show.legend = F) +
1523420400012:scale_y_continuous(limits = c(0, 100), expand = c(0, 0), position = "top") +
1523420400012:scale_fill_manual(values = rev(customPalette)) +
1523420400013:publicationTheme +
1523420400013:labs(x = "Typing Scheme",
1523420400013:y = "Correct Alleles (%)\n") +
1523420400014:coord_flip()
1523420400014:)
1523420420701:(largerDataToPlot <- largerSchemesData %>%
1523420420701:filter(Scheme == "rMLST" | Scheme == "cgMLST") %>%
1523420420702:# arrange(desc(Scheme), Application) %>%
1523420420702:# mutate(Species_scheme = as.factor(paste(Species, "-", Scheme)))
1523420420703:# mutate(Application_Scheme = factor(paste(Species, "-", Scheme)), applicationLevels))
1523420420703:mutate(Application = factor(Application, rev(unique(Application))))
1523420420704:)
1523420423996:(
1523420423997:lsPredPlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = Correct_Alleles)) +
1523420423997:# geom_bar(aes(fill = Application),
1523420423998:# stat = "identity", position = position_dodge(width = 0.9)) +
1523420423998:geom_bar(aes(fill = Application), color = "black", size = 0.5,
1523420423999:stat = "identity", position = position_dodge(width=0.9)) +
1523420424000:# show.legend = F) +
1523420424001:scale_y_continuous(limits = c(0, 100), expand = c(0, 0), position = "top") +
1523420424001:scale_fill_manual(values = rev(customPalette)) +
1523420424004:publicationTheme +
1523420424004:labs(x = "Typing Scheme",
1523420424005:y = "Correct Alleles (%)\n") +
1523420424005:coord_flip()
1523420424006:)
1523420469122:(largerDataToPlot <- largerSchemesData %>%
1523420469122:filter(Scheme == "rMLST" | Scheme == "cgMLST") %>%
1523420469123:arrange(desc(Scheme), Correct_Alleles) %>%
1523420469123:# mutate(Species_scheme = as.factor(paste(Species, "-", Scheme)))
1523420469123:# mutate(Application_Scheme = factor(paste(Species, "-", Scheme)), applicationLevels))
1523420469124:mutate(Application = factor(Application, rev(unique(Application))))
1523420469124:)
1523420471121:(
1523420471122:lsPredPlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = Correct_Alleles)) +
1523420471122:# geom_bar(aes(fill = Application),
1523420471123:# stat = "identity", position = position_dodge(width = 0.9)) +
1523420471123:geom_bar(aes(fill = Application), color = "black", size = 0.5,
1523420471124:stat = "identity", position = position_dodge(width=0.9)) +
1523420471124:# show.legend = F) +
1523420471124:scale_y_continuous(limits = c(0, 100), expand = c(0, 0), position = "top") +
1523420471125:scale_fill_manual(values = rev(customPalette)) +
1523420471125:publicationTheme +
1523420471126:labs(x = "Typing Scheme",
1523420471126:y = "Correct Alleles (%)\n") +
1523420471127:coord_flip()
1523420471127:)
1523420546115:(largerDataToPlot <- largerSchemesData %>%
1523420546116:filter(Scheme == "rMLST" | Scheme == "cgMLST") %>%
1523420546116:arrange(desc(Scheme), Correct_Alleles) %>%
1523420546117:# mutate(Species_scheme = as.factor(paste(Species, "-", Scheme)))
1523420546117:# mutate(Application_Scheme = factor(paste(Species, "-", Scheme)), applicationLevels))
1523420546117:mutate(Application = factor(Application, applicationLevels))
1523420546118:)
1523420548825:(
1523420548825:lsPredPlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = Correct_Alleles)) +
1523420548826:# geom_bar(aes(fill = Application),
1523420548826:# stat = "identity", position = position_dodge(width = 0.9)) +
1523420548826:geom_bar(aes(fill = Application), color = "black", size = 0.5,
1523420548827:stat = "identity", position = position_dodge(width=0.9)) +
1523420548827:# show.legend = F) +
1523420548828:scale_y_continuous(limits = c(0, 100), expand = c(0, 0), position = "top") +
1523420548828:scale_fill_manual(values = rev(customPalette)) +
1523420548829:publicationTheme +
1523420548829:labs(x = "Typing Scheme",
1523420548829:y = "Correct Alleles (%)\n") +
1523420548830:coord_flip()
1523420548830:)
1523420579036:(largerDataToPlot <- largerSchemesData %>%
1523420579036:filter(Scheme == "rMLST" | Scheme == "cgMLST") %>%
1523420579037:arrange(desc(Scheme), Application) %>%
1523420579038:# mutate(Species_scheme = as.factor(paste(Species, "-", Scheme)))
1523420579038:# mutate(Application_Scheme = factor(paste(Species, "-", Scheme)), applicationLevels))
1523420579039:mutate(Application = factor(Application, rev(applicationLevels)))
1523420579039:)
1523420584137:(
1523420584138:lsPredPlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = Correct_Alleles)) +
1523420584138:# geom_bar(aes(fill = Application),
1523420584139:# stat = "identity", position = position_dodge(width = 0.9)) +
1523420584139:geom_bar(aes(fill = Application), color = "black", size = 0.5,
1523420584140:stat = "identity", position = position_dodge(width=0.9)) +
1523420584140:# show.legend = F) +
1523420584141:scale_y_continuous(limits = c(0, 100), expand = c(0, 0), position = "top") +
1523420584141:scale_fill_manual(values = rev(customPalette)) +
1523420584142:publicationTheme +
1523420584142:labs(x = "Typing Scheme",
1523420584143:y = "Correct Alleles (%)\n") +
1523420584144:coord_flip()
1523420584144:)
1523420615149:rev(customPalette)
1523420664007:# customPalette <- c('#86827F','#faebd7','#edc374','#e8702a','#d7e4f5','#91bbe4','#0a4f75')
1523420664007:customPalette <- c('#edc374','#faebd7','#86827F')
1523420666179:(
1523420666180:lsPredPlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = Correct_Alleles)) +
1523420666180:# geom_bar(aes(fill = Application),
1523420666181:# stat = "identity", position = position_dodge(width = 0.9)) +
1523420666181:geom_bar(aes(fill = Application), color = "black", size = 0.5,
1523420666182:stat = "identity", position = position_dodge(width=0.9)) +
1523420666182:# show.legend = F) +
1523420666182:scale_y_continuous(limits = c(0, 100), expand = c(0, 0), position = "top") +
1523420666183:scale_fill_manual(values = rev(customPalette)) +
1523420666183:publicationTheme +
1523420666184:labs(x = "Typing Scheme",
1523420666184:y = "Correct Alleles (%)\n") +
1523420666184:coord_flip()
1523420666185:)
1523420695003:# customPalette <- c('#86827F','#faebd7','#edc374','#e8702a','#d7e4f5','#91bbe4','#0a4f75')
1523420695003:customPalette <- c('#edc374','#faebd7','#86827F')
1523420695575:(
1523420695576:lsPredPlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = Correct_Alleles)) +
1523420695577:# geom_bar(aes(fill = Application),
1523420695577:# stat = "identity", position = position_dodge(width = 0.9)) +
1523420695578:geom_bar(aes(fill = Application), color = "black", size = 0.5,
1523420695579:stat = "identity", position = position_dodge(width=0.9)) +
1523420695579:# show.legend = F) +
1523420695580:scale_y_continuous(limits = c(0, 100), expand = c(0, 0), position = "top") +
1523420695581:scale_fill_manual(values = rev(customPalette)) +
1523420695581:publicationTheme +
1523420695582:labs(x = "Typing Scheme",
1523420695583:y = "Correct Alleles (%)\n") +
1523420695583:coord_flip()
1523420695584:)
1523420721139:# customPalette <- c('#86827F','#faebd7','#edc374','#e8702a','#d7e4f5','#91bbe4','#0a4f75')
1523420721139:customPalette <- c('#0a4f75','#91bbe4','#d7e4f5')
1523420721700:(
1523420721701:lsPredPlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = Correct_Alleles)) +
1523420721701:# geom_bar(aes(fill = Application),
1523420721702:# stat = "identity", position = position_dodge(width = 0.9)) +
1523420721702:geom_bar(aes(fill = Application), color = "black", size = 0.5,
1523420721703:stat = "identity", position = position_dodge(width=0.9)) +
1523420721703:# show.legend = F) +
1523420721704:scale_y_continuous(limits = c(0, 100), expand = c(0, 0), position = "top") +
1523420721704:scale_fill_manual(values = rev(customPalette)) +
1523420721704:publicationTheme +
1523420721705:labs(x = "Typing Scheme",
1523420721705:y = "Correct Alleles (%)\n") +
1523420721705:coord_flip()
1523420721706:)
1523420802251:(
1523420802251:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = Time)) +
1523420802252:# geom_bar(aes(fill = Application),
1523420802252:# stat = "identity", position = position_dodge(width = 0.9)) +
1523420802252:geom_bar(aes(fill = Application), color = "black", size = 0.5,
1523420802253:stat = "identity", position = position_dodge(width=0.9)) +
1523420802253:# show.legend = F) +
1523420802254:scale_y_log10(expand = c(0, 0), position = "top") +
1523420802254:scale_fill_manual(values = rev(customPalette)) +
1523420802254:publicationTheme +
1523420802255:labs(x = "Typing Scheme",
1523420802255:y = "Correct Alleles (%)\n") +
1523420802256:coord_flip()
1523420802256:)
1523420860442:largerDataToPlot
1523420870798:(
1523420870799:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = RAM)) +
1523420870799:# geom_bar(aes(fill = Application),
1523420870800:# stat = "identity", position = position_dodge(width = 0.9)) +
1523420870800:geom_bar(aes(fill = Application), color = "black", size = 0.5,
1523420870800:stat = "identity", position = position_dodge(width=0.9)) +
1523420870801:# show.legend = F) +
1523420870801:scale_y_log10(expand = c(0, 0), position = "top") +
1523420870801:scale_fill_manual(values = rev(customPalette)) +
1523420870802:publicationTheme +
1523420870802:labs(x = "Typing Scheme",
1523420870802:y = "Run Time (s)\n") +
1523420870803:coord_flip()
1523420870803:)
1523420916342:(
1523420916343:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = RAM)) +
1523420916343:# geom_bar(aes(fill = Application),
1523420916344:# stat = "identity", position = position_dodge(width = 0.9)) +
1523420916344:geom_bar(aes(fill = Application), color = "black", size = 0.5,
1523420916344:stat = "identity", position = position_dodge(width=0.9)) +
1523420916345:# show.legend = F) +
1523420916345:scale_y_log10(expand = c(0, 0), position = "top") +
1523420916345:scale_fill_manual(values = rev(customPalette)) +
1523420916346:publicationTheme +
1523420916346:labs(x = "Typing Scheme",
1523420916347:y = "Memory (RAM)\nconsumption (MB)\n") +
1523420916347:coord_flip()
1523420916347:)
1523420934998:(
1523420934998:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = RAM)) +
1523420934999:# geom_bar(aes(fill = Application),
1523420934999:# stat = "identity", position = position_dodge(width = 0.9)) +
1523420935000:geom_bar(aes(fill = Application), color = "black", size = 0.5,
1523420935001:stat = "identity", position = position_dodge(width=0.9)) +
1523420935001:# show.legend = F) +
1523420935001:scale_y_log10(expand = c(0, 0), position = "top") +
1523420935002:scale_fill_manual(values = rev(customPalette)) +
1523420935002:publicationTheme +
1523420935003:labs(x = "Typing Scheme",
1523420935003:y = "Memory (RAM) consumption (MB)\n") +
1523420935004:coord_flip()
1523420935004:)
1523421047274:annotationData <- data.frame(ramMarks <- c(100, 1000, 10000, 100000),
1523421047275:labels = c("100 MB", "1 GB", "10 GB", "100 GB"))
1523421048085:(
1523421048086:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = Time)) +
1523421048087:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523421048088:size = lineSize/1.5, color = gridColor) +
1523421048088:geom_bar(aes(fill = Application), color = "black", size = 0.5,
1523421048089:stat = "identity", position = position_dodge(width=0.9)) +
1523421048089:# show.legend = F) +
1523421048090:scale_y_log10(expand = c(0, 0), position = "top") +
1523421048091:scale_fill_manual(values = rev(customPalette)) +
1523421048091:publicationTheme +
1523421048092:labs(x = "Typing Scheme",
1523421048092:y = "Run Time (s)\n") +
1523421048092:coord_flip()
1523421048093:)
1523421121398:annotationData <- data.frame(ramMarks <- c(100, 1000, 10000, 100000),
1523421121399:labels = c("100 MB", "1 GB", "10 GB", "100 GB"))
1523421122007:(
1523421122008:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = RAM)) +
1523421122008:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523421122009:size = lineSize/1.5, color = gridColor) +
1523421122010:geom_bar(aes(fill = Application), color = "black", size = 0.5,
1523421122010:stat = "identity", position = position_dodge(width=0.9)) +
1523421122011:# show.legend = F) +
1523421122012:scale_y_log10(expand = c(0, 0), position = "top") +
1523421122012:scale_fill_manual(values = rev(customPalette)) +
1523421122013:publicationTheme +
1523421122013:labs(x = "Typing Scheme",
1523421122014:y = "Memory (RAM) consumption (MB)\n") +
1523421122015:coord_flip()
1523421122015:)
1523421186978:(
1523421186979:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = RAM)) +
1523421186979:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523421186980:size = lineSize/1.5, color = gridColor) +
1523421186980:geom_bar(aes(fill = Application), color = "black", size = 0.5,
1523421186980:stat = "identity", position = position_dodge(width=0.9)) +
1523421186981:# show.legend = F) +
1523421186981:scale_y_log10(expand = c(0, 0), position = "top",
1523421186982:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523421186982:scale_fill_manual(values = rev(customPalette)) +
1523421186982:publicationTheme +
1523421186983:labs(x = "Typing Scheme",
1523421186983:y = "Memory (RAM) consumption (MB)\n") +
1523421186984:coord_flip()
1523421186984:)
1523421215053:(
1523421215054:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = RAM)) +
1523421215054:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523421215055:size = lineSize/1.5, color = gridColor) +
1523421215055:geom_bar(aes(fill = Application), color = "black", size = 0.5,
1523421215056:stat = "identity", position = position_dodge(width=0.9)) +
1523421215056:# show.legend = F) +
1523421215057:scale_y_log10(expand = c(0, 0), position = "top",
1523421215057:breaks = c(1, 100, 1000, 10000, 100000),
1523421215058:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523421215059:scale_fill_manual(values = rev(customPalette)) +
1523421215059:publicationTheme +
1523421215060:labs(x = "Typing Scheme",
1523421215060:y = "Memory (RAM) consumption (MB)\n") +
1523421215061:coord_flip()
1523421215062:)
1523421314551:(
1523421314551:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = RAM)) +
1523421314552:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523421314552:size = lineSize/1.5, color = gridColor) +
1523421314552:geom_bar(aes(fill = Application), color = "black", size = 0.5,
1523421314553:stat = "identity", position = position_dodge(width=0.9)) +
1523421314553:# show.legend = F) +
1523421314554:scale_y_log10(expand = c(0, 0), position = "top",
1523421314554:breaks = c(1, 100, 1000, 10000, 100000),
1523421314554:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523421314555:scale_fill_manual(values = rev(customPalette)) +
1523421314556:publicationTheme +
1523421314556:labs(x = "Typing Scheme",
1523421314556:y = "Memory (RAM) consumption (MB)\n") +
1523421314557:coord_flip()
1523421314557:)
1523421314837:# Add annotation times
1523421314838:for (i in 1:nrow(annotationData)) {
1523421314838:timePlot <- timePlot + annotation_custom(
1523421314838:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523421314839:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523421314839:col = "#222222")),
1523421314839:ymin = log10(annotationData$ramMarks[i]),
1523421314840:ymax = log10(annotationData$ramMarks[i]),
1523421314840:xmin = 0.35,
1523421314840:xmax = 0.35)
1523421314841:}
1523421314862:# Remove clipping
1523421314863:gt <- ggplot_gtable(ggplot_build(lsTimePlot))
1523421315340:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523421315340:grid.draw(gt)
1523421353163:(
1523421353164:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = RAM)) +
1523421353164:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523421353165:size = lineSize/1.5, color = gridColor) +
1523421353165:geom_bar(aes(fill = Application), color = "black", size = 0.5,
1523421353166:stat = "identity", position = position_dodge(width=0.9)) +
1523421353167:# show.legend = F) +
1523421353167:scale_y_log10(expand = c(0, 0), position = "top",
1523421353168:breaks = c(1, 100, 1000, 10000, 100000),
1523421353169:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523421353170:scale_fill_manual(values = rev(customPalette)) +
1523421353171:publicationTheme +
1523421353172:labs(x = "Typing Scheme",
1523421353173:y = "Memory (RAM) consumption (MB)\n") +
1523421353174:coord_flip()
1523421353175:)
1523421353456:# Add annotation times
1523421353456:for (i in 1:nrow(annotationData)) {
1523421353457:timePlot <- timePlot + annotation_custom(
1523421353457:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523421353457:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523421353458:col = "#222222")),
1523421353458:ymin = annotationData$ramMarks[i],
1523421353458:ymax = annotationData$ramMarks[i],
1523421353459:xmin = 0.35,
1523421353459:xmax = 0.35)
1523421353459:}
1523421353478:# Remove clipping
1523421353478:gt <- ggplot_gtable(ggplot_build(lsTimePlot))
1523421353980:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523421353981:grid.draw(gt)
1523421388100:annotationData
1523421401922:annotationData <- data.frame(ramMarks <- c(100, 1000, 10000, 100000),
1523421401923:labels = c("100 MB", "1 GB", "10 GB", "100 GB"))
1523421404093:annotationData
1523421419274:annotationData <- data.frame(ramMarks = c(100, 1000, 10000, 100000),
1523421419275:labels = c("100 MB", "1 GB", "10 GB", "100 GB"))
1523421420431:annotationData
1523421428684:(
1523421428685:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = Time)) +
1523421428685:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523421428686:size = lineSize/1.5, color = gridColor) +
1523421428686:geom_bar(aes(fill = Application), color = "black", size = 0.5,
1523421428687:stat = "identity", position = position_dodge(width=0.9)) +
1523421428688:# show.legend = F) +
1523421428689:scale_y_log10(expand = c(0, 0), position = "top") +
1523421428689:scale_fill_manual(values = rev(customPalette)) +
1523421428690:publicationTheme +
1523421428690:labs(x = "Typing Scheme",
1523421428691:y = "Run Time (s)\n") +
1523421428691:coord_flip()
1523421428692:)
1523421429000:(
1523421429000:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = RAM)) +
1523421429000:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523421429001:size = lineSize/1.5, color = gridColor) +
1523421429001:geom_bar(aes(fill = Application), color = "black", size = 0.5,
1523421429001:stat = "identity", position = position_dodge(width=0.9)) +
1523421429002:# show.legend = F) +
1523421429002:scale_y_log10(expand = c(0, 0), position = "top",
1523421429002:breaks = c(1, 100, 1000, 10000, 100000),
1523421429003:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523421429003:scale_fill_manual(values = rev(customPalette)) +
1523421429003:publicationTheme +
1523421429004:labs(x = "Typing Scheme",
1523421429004:y = "Memory (RAM) consumption (MB)\n") +
1523421429004:coord_flip()
1523421429005:)
1523421429443:# Add annotation times
1523421429444:for (i in 1:nrow(annotationData)) {
1523421429444:timePlot <- timePlot + annotation_custom(
1523421429444:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523421429445:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523421429445:col = "#222222")),
1523421429445:ymin = annotationData$ramMarks[i],
1523421429446:ymax = annotationData$ramMarks[i],
1523421429446:xmin = 0.35,
1523421429446:xmax = 0.35)
1523421429447:}
1523421429465:# Remove clipping
1523421429466:gt <- ggplot_gtable(ggplot_build(lsTimePlot))
1523421429991:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523421429991:grid.draw(gt)
1523421488915:# Add annotation times
1523421488915:for (i in 1:nrow(annotationData)) {
1523421488916:timePlot <- timePlot + annotation_custom(
1523421488916:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523421488917:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523421488917:col = "#222222")),
1523421488918:ymin = log10(annotationData$ramMarks[i]),
1523421488918:ymax = log10(annotationData$ramMarks[i]),
1523421488919:xmin = 0.35,
1523421488919:xmax = 0.35)
1523421488920:}
1523421495526:(
1523421495527:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = RAM)) +
1523421495527:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523421495528:size = lineSize/1.5, color = gridColor) +
1523421495528:geom_bar(aes(fill = Application), color = "black", size = 0.5,
1523421495529:stat = "identity", position = position_dodge(width=0.9)) +
1523421495529:# show.legend = F) +
1523421495530:scale_y_log10(expand = c(0, 0), position = "top",
1523421495530:breaks = c(1, 100, 1000, 10000, 100000),
1523421495531:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523421495531:scale_fill_manual(values = rev(customPalette)) +
1523421495532:publicationTheme +
1523421495532:labs(x = "Typing Scheme",
1523421495533:y = "Memory (RAM) consumption (MB)\n") +
1523421495534:coord_flip()
1523421495534:)
1523421495855:# Add annotation times
1523421495855:for (i in 1:nrow(annotationData)) {
1523421495855:timePlot <- timePlot + annotation_custom(
1523421495856:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523421495856:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523421495856:col = "#222222")),
1523421495857:ymin = log10(annotationData$ramMarks[i]),
1523421495857:ymax = log10(annotationData$ramMarks[i]),
1523421495858:xmin = 0.35,
1523421495858:xmax = 0.35)
1523421495858:}
1523421495878:# Remove clipping
1523421495878:gt <- ggplot_gtable(ggplot_build(lsTimePlot))
1523421496340:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523421496341:grid.draw(gt)
1523421569334:(
1523421569335:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = RAM)) +
1523421569335:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523421569336:size = lineSize/1.5, color = gridColor) +
1523421569337:geom_bar(aes(fill = Application), color = "black", size = 0.5,
1523421569338:stat = "identity", position = position_dodge(width=0.9)) +
1523421569338:# show.legend = F) +
1523421569339:# scale_y_log10(expand = c(0, 0), position = "top",
1523421569340:#               breaks = c(1, 100, 1000, 10000, 100000),
1523421569340:#               labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523421569341:scale_fill_manual(values = rev(customPalette)) +
1523421569342:publicationTheme +
1523421569342:labs(x = "Typing Scheme",
1523421569343:y = "Memory (RAM) consumption (MB)\n") +
1523421569343:coord_flip()
1523421569344:)
1523421572186:# Add annotation times
1523421572186:for (i in 1:nrow(annotationData)) {
1523421572187:timePlot <- timePlot + annotation_custom(
1523421572187:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523421572188:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523421572188:col = "#222222")),
1523421572189:ymin = log10(annotationData$ramMarks[i]),
1523421572189:ymax = log10(annotationData$ramMarks[i]),
1523421572189:xmin = 0.35,
1523421572190:xmax = 0.35)
1523421572190:}
1523421573236:# Remove clipping
1523421573236:gt <- ggplot_gtable(ggplot_build(lsTimePlot))
1523421578018:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523421578517:grid.draw(gt)
1523454216925:# STing vs other sequence typing software
1523454216955:# Install an load packages ------------------------------------------------
1523454216956:installAndLoadPackages <- function(pkg){
1523454216956:cat("Please wait a moment! Checking for required packages... ")
1523454216956:cat("Done!\n")
1523454216957:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1523454216957:if (length(new.pkg)) {
1523454216958:cat("Installing new packages... ")
1523454216958:install.packages(new.pkg, dependencies = TRUE,
1523454216959:repos="http://cran.rstudio.com/")
1523454216959:cat("Done!\n")
1523454216960:}
1523454216960:cat("Loading packages... \n")
1523454216961:sapply(pkg, require, character.only = TRUE)
1523454216961:cat("Done!\n")
1523454216962:}
1523454216963:requiredPackages <- c("dplyr", "readr", "ggpubr", "RColorBrewer", "gridExtra",
1523454216963:"extrafont")
1523454216964:installAndLoadPackages(requiredPackages)
1523454228008:# Sources -----------------------------------------------------------------
1523454228009:# Loading Data ------------------------------------------------------------
1523454228009:inFile   <- "data/typer/stringMLST-comparisons.tsv"
1523454228009:compData <- read_tsv(inFile)
1523454228235:largerSchemesData <- read_tsv("data/typer/sting_vs_stringmlst.tsv")
1523454228413:# General configuration ---------------------------------------------------
1523454228413:customPalette <- c("#0a4f75","#91bbe4","#d7e4f5")
1523454228414:customPalette <- rev(brewer.pal(n = 7, name = "Paired"))
1523454228475:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#c81837"))
1523454228476:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#33A02C"))
1523454228477:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "gray50"))
1523454228478:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#86827F"))
1523454228478:customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#e8702a", "#edc374", "#faebd7", "#86827F"))
1523454228479:customPalette <- c('#86827F','#faebd7','#edc374','#e8702a','#d7e4f5','#91bbe4','#0a4f75')
1523454228482:width            <- 9
1523454228483:height           <- width * 0.618
1523454228484:lineSize         <- 0.5
1523454228486:axisColor        <- "#666666"
1523454228487:gridColor        <- "#cccccc"
1523454228488:baseTextSize     <- 18
1523454228488:barAnnotTextSize <- 4
1523454228489:# baseFontFamily   <- "Helvetica"
1523454228490:baseFontFamily   <- "Arial"
1523454228490:baseFontFamily   <- "HelveticaNeueLT Com 45 Lt"
1523454228491:baseFontFamily   <- "HelveticaNeueLT Std Lt"
1523454228492:publicationTheme <- list(
1523454228493:theme_pubr() +
1523454228493:theme(
1523454228494:axis.line.y  = element_blank(),
1523454228495:axis.text    = element_text(size = baseTextSize * 0.875,
1523454228496:family = baseFontFamily,
1523454228497:color = "black"),
1523454228497:# axis.text.y  = element_text(margin=margin(1, 1, 1, 1, "mm")),
1523454228498:axis.ticks.y = element_blank(),
1523454228499:axis.title   = element_text(size = baseTextSize),
1523454228500:panel.grid.major.x = element_line(colour = gridColor,
1523454228501:size = lineSize),
1523454228502:plot.margin = margin(8, 20, 20, 8, "mm"),
1523454228502:text = element_text(size = baseTextSize,
1523454228503:family = baseFontFamily)
1523454228504:)
1523454228505:)
1523454228546:# Preparing data ----------------------------------------------------------
1523454228546:toolNameLevels <- compData$Tool_Name[c(6,4,5,7,3,2,1)]
1523454228547:dataToPlot <- compData %>%
1523454228547:arrange(Alleles) %>%
1523454228548:mutate(Tool_Name = factor(Tool_Name, toolNameLevels))
1523454228733:# Correct Predictions Plot ------------------------------------------------
1523454228734:predPlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Alleles)) +
1523454228735:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523454228736:stat = "identity", position = position_dodge(width=0.9),
1523454228736:show.legend = F) +
1523454228737:scale_y_continuous(expand = c(0, 0), position = "top") +
1523454228737:scale_fill_manual(values = customPalette) +
1523454228738:publicationTheme +
1523454228738:labs(x = "Typing Tool",
1523454228739:y = "Correct Alleles (%)\n") +
1523454228739:coord_flip()
1523454228786:predPlot
1523454231639:ggsave(filename = "sources/STing_vs_others.prediction.png", plot = predPlot,
1523454231639:width = 8, height = 6)
1523454232678:# Time Plot ---------------------------------------------------------------
1523454232678:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523454232678:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523454232887:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523454232887:geom_hline(data = annotationData, aes(yintercept = timeMarks),
1523454232888:size = lineSize/1.5, color = gridColor) +
1523454232888:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523454232888:stat = "identity", position = position_dodge(width=0.9),
1523454232889:show.legend = F) +
1523454232889:scale_y_log10(expand = c(0, 0), position = "top") +
1523454232889:scale_fill_manual(values = customPalette) +
1523454232890:publicationTheme +
1523454232890:labs(x = "Typing Tool",
1523454232890:y = "Run Time (s)\n") +
1523454232891:coord_flip()
1523454232960:# Add annotation times
1523454232961:for (i in 1:nrow(annotationData)) {
1523454232961:timePlot <- timePlot + annotation_custom(
1523454232961:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523454232961:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523454232962:col = "#222222")),
1523454232962:ymin = log10(annotationData$timeMarks[i]),
1523454232962:ymax = log10(annotationData$timeMarks[i]),
1523454232963:xmin = 0.35,
1523454232963:xmax = 0.35)
1523454232963:}
1523454232973:# Remove clipping
1523454232974:gt <- ggplot_gtable(ggplot_build(timePlot))
1523454233070:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523454233071:grid.draw(gt)
1523454233186:ggsave(filename = "sources/STing_vs_others.time.png", plot = gt,
1523454233186:width = 8, height = 6)
1523454233528:# Larger schemes ----------------------------------------------------------
1523454233528:applicationLevels <- c("STing - Fast", "STing - Sensitive", "stringMLST")
1523454233529:(largerDataToPlot <- largerSchemesData %>%
1523454233529:filter(Scheme == "rMLST" | Scheme == "cgMLST") %>%
1523454233530:arrange(desc(Scheme), Application) %>%
1523454233530:# mutate(Species_scheme = as.factor(paste(Species, "-", Scheme)))
1523454233530:# mutate(Application_Scheme = factor(paste(Species, "-", Scheme)), applicationLevels))
1523454233531:mutate(Application = factor(Application, rev(applicationLevels)))
1523454233531:)
1523454234568:# customPalette <- c('#86827F','#faebd7','#edc374','#e8702a','#d7e4f5','#91bbe4','#0a4f75')
1523454234568:customPalette <- c('#0a4f75','#91bbe4','#d7e4f5')
1523454234569:(
1523454234569:lsPredPlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = Correct_Alleles)) +
1523454234569:# geom_bar(aes(fill = Application),
1523454234570:# stat = "identity", position = position_dodge(width = 0.9)) +
1523454234570:geom_bar(aes(fill = Application), color = "black", size = 0.5,
1523454234570:stat = "identity", position = position_dodge(width=0.9)) +
1523454234570:# show.legend = F) +
1523454234571:scale_y_continuous(limits = c(0, 100), expand = c(0, 0), position = "top") +
1523454234571:scale_fill_manual(values = rev(customPalette)) +
1523454234572:publicationTheme +
1523454234572:labs(x = "Typing Scheme",
1523454234572:y = "Correct Alleles (%)\n") +
1523454234573:coord_flip()
1523454234573:)
1523454234921:annotationData <- data.frame(ramMarks = c(100, 1000, 10000, 100000),
1523454234921:labels = c("100 MB", "1 GB", "10 GB", "100 GB"))
1523454234922:(
1523454234923:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = Time)) +
1523454234923:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523454234923:size = lineSize/1.5, color = gridColor) +
1523454234923:geom_bar(aes(fill = Application), color = "black", size = 0.5,
1523454234924:stat = "identity", position = position_dodge(width=0.9)) +
1523454234924:# show.legend = F) +
1523454234924:scale_y_log10(expand = c(0, 0), position = "top") +
1523454234925:scale_fill_manual(values = rev(customPalette)) +
1523454234925:publicationTheme +
1523454234925:labs(x = "Typing Scheme",
1523454234926:y = "Run Time (s)\n") +
1523454234926:coord_flip()
1523454234926:)
1523454235607:(
1523454235607:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = RAM)) +
1523454235607:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523454235608:size = lineSize/1.5, color = gridColor) +
1523454235608:geom_bar(aes(fill = Application), color = "black", size = 0.5,
1523454235608:stat = "identity", position = position_dodge(width=0.9)) +
1523454235609:# show.legend = F) +
1523454235609:# scale_y_log10(expand = c(0, 0), position = "top",
1523454235609:#               breaks = c(1, 100, 1000, 10000, 100000),
1523454235610:#               labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523454235610:scale_fill_manual(values = rev(customPalette)) +
1523454235610:publicationTheme +
1523454235611:labs(x = "Typing Scheme",
1523454235611:y = "Memory (RAM) consumption (MB)\n") +
1523454235611:coord_flip()
1523454235612:)
1523454236000:# Add annotation times
1523454236001:for (i in 1:nrow(annotationData)) {
1523454236001:timePlot <- timePlot + annotation_custom(
1523454236001:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523454236002:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523454236002:col = "#222222")),
1523454236002:ymin = log10(annotationData$ramMarks[i]),
1523454236003:ymax = log10(annotationData$ramMarks[i]),
1523454236003:xmin = 1,
1523454236003:xmax = 1)
1523454236004:}
1523454236012:# Remove clipping
1523454236012:gt <- ggplot_gtable(ggplot_build(lsTimePlot))
1523454236486:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523454236486:grid.draw(gt)
1523454294356:(
1523454294357:lsRamPlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = RAM)) +
1523454294357:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523454294358:size = lineSize/1.5, color = gridColor) +
1523454294358:geom_bar(aes(fill = Application), color = "black", size = 0.5,
1523454294359:stat = "identity", position = position_dodge(width=0.9)) +
1523454294359:# show.legend = F) +
1523454294360:# scale_y_log10(expand = c(0, 0), position = "top",
1523454294360:#               breaks = c(1, 100, 1000, 10000, 100000),
1523454294360:#               labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523454294361:scale_fill_manual(values = rev(customPalette)) +
1523454294361:publicationTheme +
1523454294362:labs(x = "Typing Scheme",
1523454294362:y = "Memory (RAM) consumption (MB)\n") +
1523454294362:coord_flip()
1523454294363:)
1523454306212:# Add annotation times
1523454306213:for (i in 1:nrow(annotationData)) {
1523454306214:lsRamPlot <- lsRamPlot + annotation_custom(
1523454306214:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523454306215:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523454306215:col = "#222222")),
1523454306216:ymin = log10(annotationData$ramMarks[i]),
1523454306216:ymax = log10(annotationData$ramMarks[i]),
1523454306217:xmin = 1,
1523454306217:xmax = 1)
1523454306218:}
1523454327235:requiredPackages <- c("dplyr", "readr", "ggpubr", "RColorBrewer", "gridExtra",
1523454327236:"extrafont", "grid")
1523454327549:installAndLoadPackages(requiredPackages)
1523454333966:# Add annotation times
1523454333967:for (i in 1:nrow(annotationData)) {
1523454333968:lsRamPlot <- lsRamPlot + annotation_custom(
1523454333968:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523454333969:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523454333969:col = "#222222")),
1523454333970:ymin = log10(annotationData$ramMarks[i]),
1523454333970:ymax = log10(annotationData$ramMarks[i]),
1523454333971:xmin = 1,
1523454333971:xmax = 1)
1523454333972:}
1523454335742:# Remove clipping
1523454335742:gt <- ggplot_gtable(ggplot_build(lsRamPlot))
1523454336321:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523454336670:grid.draw(gt)
1523454351353:(
1523454351354:lsRamPlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = RAM)) +
1523454351354:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523454351355:size = lineSize/1.5, color = gridColor) +
1523454351356:geom_bar(aes(fill = Application), color = "black", size = 0.5,
1523454351356:stat = "identity", position = position_dodge(width=0.9)) +
1523454351357:# show.legend = F) +
1523454351357:scale_y_log10(expand = c(0, 0), position = "top",
1523454351358:breaks = c(1, 100, 1000, 10000, 100000),
1523454351358:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523454351358:scale_fill_manual(values = rev(customPalette)) +
1523454351359:publicationTheme +
1523454351359:labs(x = "Typing Scheme",
1523454351360:y = "Memory (RAM) consumption (MB)\n") +
1523454351360:coord_flip()
1523454351361:)
1523454352261:# Add annotation times
1523454352261:for (i in 1:nrow(annotationData)) {
1523454352262:lsRamPlot <- lsRamPlot + annotation_custom(
1523454352262:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523454352262:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523454352263:col = "#222222")),
1523454352263:ymin = log10(annotationData$ramMarks[i]),
1523454352263:ymax = log10(annotationData$ramMarks[i]),
1523454352264:xmin = 1,
1523454352264:xmax = 1)
1523454352264:}
1523454352744:# Remove clipping
1523454352745:gt <- ggplot_gtable(ggplot_build(lsRamPlot))
1523454353068:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523454353351:grid.draw(gt)
1523454372598:(
1523454372599:lsRamPlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = RAM)) +
1523454372600:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523454372601:size = lineSize/1.5, color = gridColor) +
1523454372602:geom_bar(aes(fill = Application), color = "black", size = 0.5,
1523454372603:stat = "identity", position = position_dodge(width=0.9)) +
1523454372604:# show.legend = F) +
1523454372605:scale_y_log10(expand = c(0, 0), position = "top",
1523454372605:breaks = c(1, 100, 1000, 10000, 100000),
1523454372606:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523454372607:scale_fill_manual(values = rev(customPalette)) +
1523454372608:publicationTheme +
1523454372609:labs(x = "Typing Scheme",
1523454372610:y = "Memory (RAM) consumption (MB)\n") +
1523454372611:coord_flip()
1523454372612:)
1523454372953:# Add annotation times
1523454372953:for (i in 1:nrow(annotationData)) {
1523454372954:lsRamPlot <- lsRamPlot + annotation_custom(
1523454372954:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523454372954:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523454372955:col = "#222222")),
1523454372955:ymin = log10(annotationData$ramMarks[i]),
1523454372955:ymax = log10(annotationData$ramMarks[i]),
1523454372956:xmin = 0.35,
1523454372956:xmax = 0.35)
1523454372956:}
1523454372978:# Remove clipping
1523454372979:gt <- ggplot_gtable(ggplot_build(lsRamPlot))
1523454373548:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523454373549:grid.draw(gt)
1523454391431:(
1523454391432:lsRamPlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = RAM)) +
1523454391432:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523454391432:size = lineSize/1.5, color = gridColor) +
1523454391433:geom_bar(aes(fill = Application), color = "black", size = 0.5,
1523454391433:stat = "identity", position = position_dodge(width=0.9)) +
1523454391434:# show.legend = F) +
1523454391434:scale_y_log10(expand = c(0, 0), position = "top",
1523454391434:breaks = c(1, 100, 1000, 10000, 100000),
1523454391435:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523454391435:scale_fill_manual(values = rev(customPalette)) +
1523454391436:publicationTheme +
1523454391436:labs(x = "Typing Scheme",
1523454391437:y = "Memory (RAM) consumption (MB)\n") +
1523454391437:coord_flip()
1523454391437:)
1523454391866:# Add annotation times
1523454391866:for (i in 1:nrow(annotationData)) {
1523454391867:lsRamPlot <- lsRamPlot + annotation_custom(
1523454391867:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523454391867:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523454391868:col = "#222222")),
1523454391868:ymin = log10(annotationData$ramMarks[i]),
1523454391868:ymax = log10(annotationData$ramMarks[i]),
1523454391869:xmin = 0.4,
1523454391869:xmax = 0.4)
1523454391869:}
1523454391898:# Remove clipping
1523454391899:gt <- ggplot_gtable(ggplot_build(lsRamPlot))
1523454392353:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523454392353:grid.draw(gt)
1523454447853:(
1523454447853:lsRamPlot <- ggplot(largerDataToPlot, aes(x = Application, y = RAM)) +
1523454447854:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523454447854:size = lineSize/1.5, color = gridColor) +
1523454447854:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523454447855:stat = "identity", position = position_dodge(width=0.9)) +
1523454447855:# show.legend = F) +
1523454447855:scale_y_log10(expand = c(0, 0), position = "top",
1523454447856:breaks = c(1, 100, 1000, 10000, 100000),
1523454447856:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523454447856:scale_fill_manual(values = rev(customPalette)) +
1523454447857:publicationTheme +
1523454447857:labs(x = "Typing Scheme",
1523454447858:y = "Memory (RAM) consumption (MB)\n") +
1523454447858:coord_flip()
1523454447858:)
1523454559225:brewer.pal(4, "Pired")
1523454565616:brewer.pal(4, "Paired")
1523454579778:(
1523454579779:lsRamPlot <- ggplot(largerDataToPlot, aes(x = Application, y = RAM)) +
1523454579779:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523454579779:size = lineSize/1.5, color = gridColor) +
1523454579780:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523454579780:stat = "identity", position = position_dodge(width=0.9)) +
1523454579781:# show.legend = F) +
1523454579781:scale_y_log10(expand = c(0, 0), position = "top",
1523454579781:breaks = c(1, 100, 1000, 10000, 100000),
1523454579782:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523454579782:# scale_fill_manual(values = rev(customPalette)) +
1523454579783:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523454579783:publicationTheme +
1523454579783:labs(x = "Typing Scheme",
1523454579784:y = "Memory (RAM) consumption (MB)\n") +
1523454579784:coord_flip()
1523454579785:)
1523454600616:# Add annotation times
1523454600617:for (i in 1:nrow(annotationData)) {
1523454600617:lsRamPlot <- lsRamPlot + annotation_custom(
1523454600617:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523454600618:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523454600618:col = "#222222")),
1523454600619:ymin = log10(annotationData$ramMarks[i]),
1523454600619:ymax = log10(annotationData$ramMarks[i]),
1523454600619:xmin = 0.4,
1523454600620:xmax = 0.4)
1523454600621:}
1523454602105:# Remove clipping
1523454602106:gt <- ggplot_gtable(ggplot_build(lsRamPlot))
1523454602427:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523454602759:grid.draw(gt)
1523454671652:(
1523454671652:lsRamPlot <- ggplot(largerDataToPlot, aes(x = Application, y = RAM)) +
1523454671653:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523454671653:size = lineSize/1.5, color = gridColor) +
1523454671654:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523454671654:stat = "identity", position = position_dodge(width=0.9)) +
1523454671654:# show.legend = F) +
1523454671655:scale_y_log10(expand = c(0, 0), position = "top",
1523454671655:breaks = c(1, 100, 1000, 10000, 100000),
1523454671656:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523454671656:# scale_fill_manual(values = rev(customPalette)) +
1523454671656:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523454671657:publicationTheme +
1523454671657:labs(x = "Typing Tool",#x = "Typing Scheme",
1523454671657:y = "Memory (RAM) consumption (MB)\n") +
1523454671658:coord_flip()
1523454671658:)
1523454671935:# Add annotation times
1523454671935:for (i in 1:nrow(annotationData)) {
1523454671936:lsRamPlot <- lsRamPlot + annotation_custom(
1523454671936:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523454671937:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523454671937:col = "#222222")),
1523454671937:ymin = log10(annotationData$ramMarks[i]),
1523454671938:ymax = log10(annotationData$ramMarks[i]),
1523454671938:xmin = 0.4,
1523454671938:xmax = 0.4)
1523454671939:}
1523454671960:# Remove clipping
1523454671960:gt <- ggplot_gtable(ggplot_build(lsRamPlot))
1523454672406:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523454672407:grid.draw(gt)
1523454706283:publicationTheme <- list(
1523454706284:theme_pubr() +
1523454706285:theme(
1523454706286:axis.line.y  = element_blank(),
1523454706286:axis.text    = element_text(size = baseTextSize * 0.875,
1523454706287:family = baseFontFamily,
1523454706288:color = "black"),
1523454706289:axis.text.x  = element_text(margin=margin(1, 1, 10, 1, "mm")),
1523454706289:axis.ticks.y = element_blank(),
1523454706290:axis.title   = element_text(size = baseTextSize),
1523454706291:panel.grid.major.x = element_line(colour = gridColor,
1523454706292:size = lineSize),
1523454706295:plot.margin = margin(8, 20, 20, 8, "mm"),
1523454706295:text = element_text(size = baseTextSize,
1523454706296:family = baseFontFamily)
1523454706297:)
1523454706298:)
1523454706412:# Preparing data ----------------------------------------------------------
1523454706413:toolNameLevels <- compData$Tool_Name[c(6,4,5,7,3,2,1)]
1523454706413:dataToPlot <- compData %>%
1523454706414:arrange(Alleles) %>%
1523454706414:mutate(Tool_Name = factor(Tool_Name, toolNameLevels))
1523454706419:# Correct Predictions Plot ------------------------------------------------
1523454706419:predPlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Alleles)) +
1523454706420:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523454706420:stat = "identity", position = position_dodge(width=0.9),
1523454706420:show.legend = F) +
1523454706421:scale_y_continuous(expand = c(0, 0), position = "top") +
1523454706421:scale_fill_manual(values = customPalette) +
1523454706421:publicationTheme +
1523454706422:labs(x = "Typing Tool",
1523454706422:y = "Correct Alleles (%)\n") +
1523454706422:coord_flip()
1523454706429:predPlot
1523454706471:ggsave(filename = "sources/STing_vs_others.prediction.png", plot = predPlot,
1523454706472:width = 8, height = 6)
1523454706588:# Time Plot ---------------------------------------------------------------
1523454706588:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523454706589:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523454706643:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523454706644:geom_hline(data = annotationData, aes(yintercept = timeMarks),
1523454706644:size = lineSize/1.5, color = gridColor) +
1523454706644:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523454706645:stat = "identity", position = position_dodge(width=0.9),
1523454706645:show.legend = F) +
1523454706645:scale_y_log10(expand = c(0, 0), position = "top") +
1523454706646:scale_fill_manual(values = customPalette) +
1523454706646:publicationTheme +
1523454706646:labs(x = "Typing Tool",
1523454706647:y = "Run Time (s)\n") +
1523454706647:coord_flip()
1523454706655:# Add annotation times
1523454706655:for (i in 1:nrow(annotationData)) {
1523454706656:timePlot <- timePlot + annotation_custom(
1523454706656:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523454706656:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523454706657:col = "#222222")),
1523454706657:ymin = log10(annotationData$timeMarks[i]),
1523454706657:ymax = log10(annotationData$timeMarks[i]),
1523454706657:xmin = 0.35,
1523454706658:xmax = 0.35)
1523454706658:}
1523454706682:# Remove clipping
1523454706682:gt <- ggplot_gtable(ggplot_build(timePlot))
1523454706759:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523454706760:grid.draw(gt)
1523454706850:ggsave(filename = "sources/STing_vs_others.time.png", plot = gt,
1523454706850:width = 8, height = 6)
1523454707176:# Larger schemes ----------------------------------------------------------
1523454707177:applicationLevels <- c("STing - Fast", "STing - Sensitive", "stringMLST")
1523454707178:(largerDataToPlot <- largerSchemesData %>%
1523454707178:filter(Scheme == "rMLST" | Scheme == "cgMLST") %>%
1523454707179:arrange(desc(Scheme), Application) %>%
1523454707179:# mutate(Species_scheme = as.factor(paste(Species, "-", Scheme)))
1523454707179:# mutate(Application_Scheme = factor(paste(Species, "-", Scheme)), applicationLevels))
1523454707180:mutate(Application = factor(Application, rev(applicationLevels)))
1523454707180:)
1523454707721:# customPalette <- c('#86827F','#faebd7','#edc374','#e8702a','#d7e4f5','#91bbe4','#0a4f75')
1523454707721:customPalette <- c('#0a4f75','#91bbe4','#d7e4f5')
1523454707722:(
1523454707722:lsPredPlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = Correct_Alleles)) +
1523454707722:# geom_bar(aes(fill = Application),
1523454707723:# stat = "identity", position = position_dodge(width = 0.9)) +
1523454707723:geom_bar(aes(fill = Application), color = "black", size = 0.5,
1523454707723:stat = "identity", position = position_dodge(width=0.9)) +
1523454707724:# show.legend = F) +
1523454707724:scale_y_continuous(limits = c(0, 100), expand = c(0, 0), position = "top") +
1523454707724:scale_fill_manual(values = rev(customPalette)) +
1523454707725:publicationTheme +
1523454707725:labs(x = "Typing Scheme",
1523454707725:y = "Correct Alleles (%)\n") +
1523454707726:coord_flip()
1523454707726:)
1523454707995:annotationData <- data.frame(ramMarks = c(100, 1000, 10000, 100000),
1523454707996:labels = c("100 MB", "1 GB", "10 GB", "100 GB"))
1523454707997:(
1523454707997:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = Time)) +
1523454707997:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523454707998:size = lineSize/1.5, color = gridColor) +
1523454707998:geom_bar(aes(fill = Application), color = "black", size = 0.5,
1523454707998:stat = "identity", position = position_dodge(width=0.9)) +
1523454707999:# show.legend = F) +
1523454707999:scale_y_log10(expand = c(0, 0), position = "top") +
1523454707999:scale_fill_manual(values = rev(customPalette)) +
1523454708000:publicationTheme +
1523454708000:labs(x = "Typing Scheme",
1523454708000:y = "Run Time (s)\n") +
1523454708001:coord_flip()
1523454708001:)
1523454708378:(
1523454708378:lsRamPlot <- ggplot(largerDataToPlot, aes(x = Application, y = RAM)) +
1523454708378:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523454708379:size = lineSize/1.5, color = gridColor) +
1523454708379:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523454708379:stat = "identity", position = position_dodge(width=0.9)) +
1523454708379:# show.legend = F) +
1523454708380:scale_y_log10(expand = c(0, 0), position = "top",
1523454708380:breaks = c(1, 100, 1000, 10000, 100000),
1523454708380:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523454708381:# scale_fill_manual(values = rev(customPalette)) +
1523454708381:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523454708382:publicationTheme +
1523454708382:labs(x = "Typing Tool",#x = "Typing Scheme",
1523454708382:y = "Memory (RAM) consumption (MB)\n") +
1523454708383:coord_flip()
1523454708383:)
1523454709134:# Add annotation times
1523454709134:for (i in 1:nrow(annotationData)) {
1523454709134:lsRamPlot <- lsRamPlot + annotation_custom(
1523454709135:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523454709135:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523454709135:col = "#222222")),
1523454709136:ymin = log10(annotationData$ramMarks[i]),
1523454709136:ymax = log10(annotationData$ramMarks[i]),
1523454709136:xmin = 0.4,
1523454709137:xmax = 0.4)
1523454709137:}
1523454709160:# Remove clipping
1523454709160:gt <- ggplot_gtable(ggplot_build(lsRamPlot))
1523454709722:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523454709722:grid.draw(gt)
1523454747813:publicationTheme <- list(
1523454747814:theme_pubr() +
1523454747814:theme(
1523454747814:axis.line.y  = element_blank(),
1523454747815:axis.text    = element_text(size = baseTextSize * 0.875,
1523454747815:family = baseFontFamily,
1523454747815:color = "black"),
1523454747816:axis.text.x  = element_text(margin=margin(1, 1, 1, 1, "mm")),
1523454747816:axis.ticks.y = element_blank(),
1523454747816:axis.title   = element_text(size = baseTextSize),
1523454747817:panel.grid.major.x = element_line(colour = gridColor,
1523454747817:size = lineSize),
1523454747817:plot.margin = margin(8, 20, 20, 8, "mm"),
1523454747818:text = element_text(size = baseTextSize,
1523454747818:family = baseFontFamily)
1523454747819:)
1523454747819:)
1523454756283:(
1523454756284:lsRamPlot <- ggplot(largerDataToPlot, aes(x = Application, y = RAM)) +
1523454756284:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523454756285:size = lineSize/1.5, color = gridColor) +
1523454756285:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523454756286:stat = "identity", position = position_dodge(width=0.9)) +
1523454756286:# show.legend = F) +
1523454756286:scale_y_log10(expand = c(0, 0), position = "top",
1523454756287:breaks = c(1, 100, 1000, 10000, 100000),
1523454756287:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523454756288:# scale_fill_manual(values = rev(customPalette)) +
1523454756289:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523454756289:publicationTheme +
1523454756290:labs(x = "Typing Tool",#x = "Typing Scheme",
1523454756290:y = "Memory (RAM) consumption (MB)\n") +
1523454756291:coord_flip()
1523454756291:)
1523454756535:# Add annotation times
1523454756536:for (i in 1:nrow(annotationData)) {
1523454756536:lsRamPlot <- lsRamPlot + annotation_custom(
1523454756536:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523454756537:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523454756537:col = "#222222")),
1523454756537:ymin = log10(annotationData$ramMarks[i]),
1523454756538:ymax = log10(annotationData$ramMarks[i]),
1523454756538:xmin = 0.4,
1523454756538:xmax = 0.4)
1523454756539:}
1523454756556:# Remove clipping
1523454756556:gt <- ggplot_gtable(ggplot_build(lsRamPlot))
1523454757087:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523454757087:grid.draw(gt)
1523454804219:(
1523454804220:lsRamPlot <- ggplot(largerDataToPlot, aes(x = Application, y = RAM)) +
1523454804221:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523454804221:size = lineSize/1.5, color = gridColor) +
1523454804222:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523454804223:stat = "identity", position = position_dodge(width=0.9)) +
1523454804224:# show.legend = F) +
1523454804224:scale_y_log10(expand = c(0, 0), position = "top",
1523454804225:breaks = c(1, 100, 1000, 10000, 100000),
1523454804226:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523454804227:# scale_fill_manual(values = rev(customPalette)) +
1523454804227:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523454804228:publicationTheme +
1523454804229:theme(axis.text.x  = element_text(margin=margin(1, 1, 1, 1, "mm"))) +
1523454804230:labs(x = "Typing Tool",#x = "Typing Scheme",
1523454804230:y = "Memory (RAM) consumption (MB)\n") +
1523454804231:coord_flip()
1523454804232:)
1523454810537:(
1523454810538:lsRamPlot <- ggplot(largerDataToPlot, aes(x = Application, y = RAM)) +
1523454810539:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523454810540:size = lineSize/1.5, color = gridColor) +
1523454810540:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523454810541:stat = "identity", position = position_dodge(width=0.9)) +
1523454810542:# show.legend = F) +
1523454810542:scale_y_log10(expand = c(0, 0), position = "top",
1523454810543:breaks = c(1, 100, 1000, 10000, 100000),
1523454810543:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523454810544:# scale_fill_manual(values = rev(customPalette)) +
1523454810545:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523454810545:publicationTheme +
1523454810546:theme(axis.text.x  = element_text(margin=margin(10, 1, 1, 1, "mm"))) +
1523454810546:labs(x = "Typing Tool",#x = "Typing Scheme",
1523454810547:y = "Memory (RAM) consumption (MB)\n") +
1523454810548:coord_flip()
1523454810549:)
1523454819970:(
1523454819971:lsRamPlot <- ggplot(largerDataToPlot, aes(x = Application, y = RAM)) +
1523454819972:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523454819973:size = lineSize/1.5, color = gridColor) +
1523454819974:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523454819975:stat = "identity", position = position_dodge(width=0.9)) +
1523454819975:# show.legend = F) +
1523454819976:scale_y_log10(expand = c(0, 0), position = "top",
1523454819977:breaks = c(1, 100, 1000, 10000, 100000),
1523454819978:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523454819979:# scale_fill_manual(values = rev(customPalette)) +
1523454819980:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523454819982:publicationTheme +
1523454819983:theme(axis.text.x  = element_text(margin=margin(10, 1, 1, 1, "mm"))) +
1523454819984:labs(x = "Typing Tool",#x = "Typing Scheme",
1523454819984:y = "Memory (RAM) consumption (MB)\n") #+ coord_flip()
1523454819985:)
1523454836172:(
1523454836173:lsRamPlot <- ggplot(largerDataToPlot, aes(x = Application, y = RAM)) +
1523454836173:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523454836174:size = lineSize/1.5, color = gridColor) +
1523454836174:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523454836175:stat = "identity", position = position_dodge(width=0.9)) +
1523454836176:# show.legend = F) +
1523454836176:scale_y_log10(expand = c(0, 0), position = "top",
1523454836177:breaks = c(1, 100, 1000, 10000, 100000),
1523454836178:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523454836178:# scale_fill_manual(values = rev(customPalette)) +
1523454836179:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523454836180:publicationTheme +
1523454836180:theme(axis.text.x  = element_text(margin=margin(1, 1, 1, 1, "mm"))) +
1523454836181:labs(x = "Typing Tool",#x = "Typing Scheme",
1523454836181:y = "Memory (RAM) consumption (MB)\n") #+ coord_flip()
1523454836182:)
1523454853476:(
1523454853477:lsRamPlot <- ggplot(largerDataToPlot, aes(x = Application, y = RAM)) +
1523454853477:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523454853478:size = lineSize/1.5, color = gridColor) +
1523454853478:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523454853479:stat = "identity", position = position_dodge(width=0.9)) +
1523454853480:# show.legend = F) +
1523454853480:scale_y_log10(expand = c(0, 0), position = "top",
1523454853480:breaks = c(1, 100, 1000, 10000, 100000),
1523454853481:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523454853481:# scale_fill_manual(values = rev(customPalette)) +
1523454853482:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523454853482:publicationTheme +
1523454853483:theme(axis.title.x = element_text(margin=margin(10, 1, 1, 1, "mm"))) +
1523454853484:labs(x = "Typing Tool",#x = "Typing Scheme",
1523454853484:y = "Memory (RAM) consumption (MB)\n") #+ coord_flip()
1523454853485:)
1523454859795:(
1523454859795:lsRamPlot <- ggplot(largerDataToPlot, aes(x = Application, y = RAM)) +
1523454859796:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523454859796:size = lineSize/1.5, color = gridColor) +
1523454859797:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523454859797:stat = "identity", position = position_dodge(width=0.9)) +
1523454859798:# show.legend = F) +
1523454859798:scale_y_log10(expand = c(0, 0), position = "top",
1523454859799:breaks = c(1, 100, 1000, 10000, 100000),
1523454859799:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523454859800:# scale_fill_manual(values = rev(customPalette)) +
1523454859800:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523454859801:publicationTheme +
1523454859801:theme(axis.title.x = element_text(margin=margin(10, 1, 1, 1, "mm"))) +
1523454859802:labs(x = "Typing Tool",#x = "Typing Scheme",
1523454859803:y = "Memory (RAM) consumption (MB)\n") +
1523454859803:coord_flip()
1523454859804:)
1523454864963:(
1523454864964:lsRamPlot <- ggplot(largerDataToPlot, aes(x = Application, y = RAM)) +
1523454864964:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523454864965:size = lineSize/1.5, color = gridColor) +
1523454864965:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523454864965:stat = "identity", position = position_dodge(width=0.9)) +
1523454864966:# show.legend = F) +
1523454864966:scale_y_log10(expand = c(0, 0), position = "top",
1523454864966:breaks = c(1, 100, 1000, 10000, 100000),
1523454864967:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523454864967:# scale_fill_manual(values = rev(customPalette)) +
1523454864967:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523454864968:publicationTheme +
1523454864968:theme(axis.title.x = element_text(margin=margin(1, 1, 1, 1, "mm"))) +
1523454864969:labs(x = "Typing Tool",#x = "Typing Scheme",
1523454864969:y = "Memory (RAM) consumption (MB)\n") +
1523454864969:coord_flip()
1523454864970:)
1523454873666:(
1523454873667:lsRamPlot <- ggplot(largerDataToPlot, aes(x = Application, y = RAM)) +
1523454873667:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523454873668:size = lineSize/1.5, color = gridColor) +
1523454873669:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523454873669:stat = "identity", position = position_dodge(width=0.9)) +
1523454873670:# show.legend = F) +
1523454873671:scale_y_log10(expand = c(0, 0), position = "top",
1523454873671:breaks = c(1, 100, 1000, 10000, 100000),
1523454873672:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523454873673:# scale_fill_manual(values = rev(customPalette)) +
1523454873673:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523454873674:publicationTheme +
1523454873675:theme(axis.title.x = element_text(margin=margin(1, 10, 1, 1, "mm"))) +
1523454873676:labs(x = "Typing Tool",#x = "Typing Scheme",
1523454873677:y = "Memory (RAM) consumption (MB)\n") +
1523454873677:coord_flip()
1523454873678:)
1523454880624:(
1523454880625:lsRamPlot <- ggplot(largerDataToPlot, aes(x = Application, y = RAM)) +
1523454880626:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523454880626:size = lineSize/1.5, color = gridColor) +
1523454880627:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523454880627:stat = "identity", position = position_dodge(width=0.9)) +
1523454880628:# show.legend = F) +
1523454880628:scale_y_log10(expand = c(0, 0), position = "top",
1523454880629:breaks = c(1, 100, 1000, 10000, 100000),
1523454880630:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523454880630:# scale_fill_manual(values = rev(customPalette)) +
1523454880631:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523454880631:publicationTheme +
1523454880632:theme(axis.title.x = element_text(margin=margin(1, 1, 10, 1, "mm"))) +
1523454880633:labs(x = "Typing Tool",#x = "Typing Scheme",
1523454880633:y = "Memory (RAM) consumption (MB)\n") +
1523454880634:coord_flip()
1523454880634:)
1523454887595:(
1523454887596:lsRamPlot <- ggplot(largerDataToPlot, aes(x = Application, y = RAM)) +
1523454887597:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523454887597:size = lineSize/1.5, color = gridColor) +
1523454887598:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523454887598:stat = "identity", position = position_dodge(width=0.9)) +
1523454887599:# show.legend = F) +
1523454887599:scale_y_log10(expand = c(0, 0), position = "top",
1523454887600:breaks = c(1, 100, 1000, 10000, 100000),
1523454887600:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523454887601:# scale_fill_manual(values = rev(customPalette)) +
1523454887602:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523454887603:publicationTheme +
1523454887604:theme(axis.title.x = element_text(margin=margin(1, 1, 1, 10, "mm"))) +
1523454887605:labs(x = "Typing Tool",#x = "Typing Scheme",
1523454887606:y = "Memory (RAM) consumption (MB)\n") +
1523454887607:coord_flip()
1523454887608:)
1523454895434:(
1523454895434:lsRamPlot <- ggplot(largerDataToPlot, aes(x = Application, y = RAM)) +
1523454895435:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523454895435:size = lineSize/1.5, color = gridColor) +
1523454895436:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523454895436:stat = "identity", position = position_dodge(width=0.9)) +
1523454895437:# show.legend = F) +
1523454895437:scale_y_log10(expand = c(0, 0), position = "top",
1523454895438:breaks = c(1, 100, 1000, 10000, 100000),
1523454895438:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523454895439:# scale_fill_manual(values = rev(customPalette)) +
1523454895439:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523454895440:publicationTheme +
1523454895440:theme(axis.title.y = element_text(margin=margin(1, 1, 1, 10, "mm"))) +
1523454895441:labs(x = "Typing Tool",#x = "Typing Scheme",
1523454895441:y = "Memory (RAM) consumption (MB)\n") +
1523454895441:coord_flip()
1523454895442:)
1523454912081:(
1523454912082:lsRamPlot <- ggplot(largerDataToPlot, aes(x = Application, y = RAM)) +
1523454912082:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523454912082:size = lineSize/1.5, color = gridColor) +
1523454912083:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523454912083:stat = "identity", position = position_dodge(width=0.9)) +
1523454912084:# show.legend = F) +
1523454912084:scale_y_log10(expand = c(0, 0), position = "top",
1523454912085:breaks = c(1, 100, 1000, 10000, 100000),
1523454912085:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523454912086:# scale_fill_manual(values = rev(customPalette)) +
1523454912086:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523454912087:publicationTheme +
1523454912087:theme(axis.title.y = element_text(margin=margin(1, 10, 1, 1, "mm"))) +
1523454912088:labs(x = "Typing Tool",#x = "Typing Scheme",
1523454912088:y = "Memory (RAM) consumption (MB)\n") +
1523454912089:coord_flip()
1523454912089:)
1523454951303:publicationTheme <- list(
1523454951304:theme_pubr() +
1523454951304:theme(
1523454951305:axis.line.y  = element_blank(),
1523454951305:axis.text    = element_text(size = baseTextSize * 0.875,
1523454951305:family = baseFontFamily,
1523454951306:color = "black"),
1523454951306:axis.title.y = element_text(margin=margin(1, 10, 1, 1, "mm")),
1523454951307:axis.ticks.y = element_blank(),
1523454951307:axis.title   = element_text(size = baseTextSize),
1523454951307:panel.grid.major.x = element_line(colour = gridColor,
1523454951308:size = lineSize),
1523454951308:plot.margin = margin(8, 20, 20, 8, "mm"),
1523454951309:text = element_text(size = baseTextSize,
1523454951309:family = baseFontFamily)
1523454951310:)
1523454951310:)
1523454955677:(
1523454955678:lsRamPlot <- ggplot(largerDataToPlot, aes(x = Application, y = RAM)) +
1523454955678:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523454955679:size = lineSize/1.5, color = gridColor) +
1523454955679:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523454955679:stat = "identity", position = position_dodge(width=0.9)) +
1523454955680:# show.legend = F) +
1523454955680:scale_y_log10(expand = c(0, 0), position = "top",
1523454955680:breaks = c(1, 100, 1000, 10000, 100000),
1523454955681:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523454955681:# scale_fill_manual(values = rev(customPalette)) +
1523454955681:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523454955682:publicationTheme +
1523454955682:labs(x = "Typing Tool",#x = "Typing Scheme",
1523454955683:y = "Memory (RAM) consumption (MB)\n") +
1523454955683:coord_flip()
1523454955683:)
1523454956508:# Add annotation times
1523454956508:for (i in 1:nrow(annotationData)) {
1523454956508:lsRamPlot <- lsRamPlot + annotation_custom(
1523454956509:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523454956509:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523454956510:col = "#222222")),
1523454956510:ymin = log10(annotationData$ramMarks[i]),
1523454956510:ymax = log10(annotationData$ramMarks[i]),
1523454956511:xmin = 0.4,
1523454956511:xmax = 0.4)
1523454956511:}
1523454956732:# Remove clipping
1523454956732:gt <- ggplot_gtable(ggplot_build(lsRamPlot))
1523454956900:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523454957035:grid.draw(gt)
1523455017142:annotationData <- data.frame(ramMarks = c(100, 1000, 10000, 100000),
1523455017143:labels = c("100 MB", "1 GB", "10 GB", "100 GB"))
1523455017714:(
1523455017715:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Application, y = Time)) +
1523455017717:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523455017717:size = lineSize/1.5, color = gridColor) +
1523455017718:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523455017718:stat = "identity", position = position_dodge(width=0.9)) +
1523455017719:# show.legend = F) +
1523455017720:scale_y_log10(expand = c(0, 0), position = "top") +
1523455017720:scale_fill_manual(values = rev(customPalette)) +
1523455017721:publicationTheme +
1523455017721:labs(x = "Typing Scheme",
1523455017722:y = "Run Time (s)\n") +
1523455017722:coord_flip()
1523455017723:)
1523455031799:annotationData <- data.frame(ramMarks = c(100, 1000, 10000, 100000),
1523455031800:labels = c("100 MB", "1 GB", "10 GB", "100 GB"))
1523455032201:(
1523455032202:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Application, y = Time)) +
1523455032203:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523455032203:size = lineSize/1.5, color = gridColor) +
1523455032204:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523455032204:stat = "identity", position = position_dodge(width=0.9)) +
1523455032205:# show.legend = F) +
1523455032205:scale_y_log10(expand = c(0, 0), position = "top") +
1523455032206:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523455032206:publicationTheme +
1523455032207:labs(x = "Typing Scheme",
1523455032207:y = "Run Time (s)\n") +
1523455032208:coord_flip()
1523455032208:)
1523455096770:(
1523455096771:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Application, y = Time)) +
1523455096771:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523455096772:size = lineSize/1.5, color = gridColor) +
1523455096773:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523455096773:stat = "identity", position = position_dodge(width=0.9)) +
1523455096774:# show.legend = F) +
1523455096775:scale_y_log10(limits = c(1, 100000), expand = c(0, 0), position = "top") +
1523455096776:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523455096777:publicationTheme +
1523455096777:labs(x = "Typing Scheme",
1523455096778:y = "Run Time (s)\n") +
1523455096779:coord_flip()
1523455096780:)
1523455130131:annotationData <- data.frame(ramMarks = c(100, 1000, 10000),#, 100000),
1523455131246:(
1523455131247:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Application, y = Time)) +
1523455131247:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523455131247:size = lineSize/1.5, color = gridColor) +
1523455131248:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523455131248:stat = "identity", position = position_dodge(width=0.9)) +
1523455131249:# show.legend = F) +
1523455131249:scale_y_log10(limits = c(1, 100000), expand = c(0, 0), position = "top") +
1523455131249:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523455131250:publicationTheme +
1523455131250:labs(x = "Typing Scheme",
1523455131251:y = "Run Time (s)\n") +
1523455131251:coord_flip()
1523455131251:)
1523455144925:annotationData <- data.frame(ramMarks = c(100, 1000, 10000),#, 100000),
1523455144925:labels = c("100 MB", "1 GB", "10 GB"))#, "100 GB"))
1523455145557:(
1523455145558:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Application, y = Time)) +
1523455145558:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523455145559:size = lineSize/1.5, color = gridColor) +
1523455145559:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523455145560:stat = "identity", position = position_dodge(width=0.9)) +
1523455145560:# show.legend = F) +
1523455145561:scale_y_log10(limits = c(1, 100000), expand = c(0, 0), position = "top") +
1523455145561:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523455145561:publicationTheme +
1523455145562:labs(x = "Typing Scheme",
1523455145562:y = "Run Time (s)\n") +
1523455145563:coord_flip()
1523455145563:)
1523455164487:(
1523455164488:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Application, y = Time)) +
1523455164488:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523455164489:size = lineSize/1.5, color = gridColor) +
1523455164489:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523455164490:stat = "identity", position = position_dodge(width=0.9)) +
1523455164490:# show.legend = F) +
1523455164490:scale_y_log10(#limits = c(1, 100000),
1523455164491:expand = c(0, 0), position = "top") +
1523455164491:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523455164491:publicationTheme +
1523455164492:labs(x = "Typing Scheme",
1523455164492:y = "Run Time (s)\n") +
1523455164493:coord_flip()
1523455164494:)
1523455203063:annotationData <- data.frame(ramMarks = c(100, 1000, 10000),#, 100000),
1523455203064:labels = c("100 MB", "1 GB", "10 GB"))#, "100 GB"))
1523455203552:(
1523455203553:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Application, y = Time)) +
1523455203553:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523455203554:size = lineSize/1.5, color = gridColor) +
1523455203554:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523455203554:stat = "identity", position = position_dodge(width=0.9)) +
1523455203555:# show.legend = F) +
1523455203555:scale_y_log10(limits = c(1, 100000),
1523455203556:expand = c(0, 0), position = "top") +
1523455203556:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523455203557:publicationTheme +
1523455203557:labs(x = "Typing Scheme",
1523455203558:y = "Run Time (s)\n") +
1523455203558:coord_flip()
1523455203559:)
1523455355026:annotationData <- data.frame(ramMarks = c(100, 1000, 10000, 100000),
1523455355027:labels = c("100 MB", "1 GB", "10 GB", "100 GB"))
1523455355426:(
1523455355427:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Application, y = Time)) +
1523455355427:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523455355428:size = lineSize/1.5, color = gridColor) +
1523455355428:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523455355429:stat = "identity", position = position_dodge(width=0.9)) +
1523455355429:# show.legend = F) +
1523455355430:scale_y_log10(breaks = c(1, 100, 1000, 10000, 100000),
1523455355430:limits = c(1, 100000),
1523455355431:expand = c(0, 0), position = "top") +
1523455355431:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523455355432:publicationTheme +
1523455355432:labs(x = "Typing Scheme",
1523455355433:y = "Run Time (s)\n") +
1523455355433:coord_flip()
1523455355434:)
1523455392278:(
1523455392278:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Application, y = Time)) +
1523455392279:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523455392280:size = lineSize/1.5, color = gridColor) +
1523455392281:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523455392282:stat = "identity", position = position_dodge(width=0.9)) +
1523455392283:# show.legend = F) +
1523455392283:scale_y_log10(breaks = c(1, 100, 1000, 10000, 100000),
1523455392284:labels = c("1", "100", "1000", "10000", "100000"),
1523455392285:limits = c(1, 100000),
1523455392286:expand = c(0, 0), position = "top") +
1523455392287:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523455392288:publicationTheme +
1523455392289:labs(x = "Typing Scheme",
1523455392289:y = "Run Time (s)\n") +
1523455392290:coord_flip()
1523455392291:)
1523455428958:(
1523455428959:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Application, y = Time)) +
1523455428960:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523455428961:size = lineSize/1.5, color = gridColor) +
1523455428962:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523455428963:stat = "identity", position = position_dodge(width=0.9)) +
1523455428964:# show.legend = F) +
1523455428965:scale_y_log10(breaks = c(1, 100, 1000, 10000, 100000),
1523455428965:labels = c("1", "100", "1,000", "10,000", "100,000"),
1523455428966:limits = c(1, 100000),
1523455428967:expand = c(0, 0), position = "top") +
1523455428968:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523455428969:publicationTheme +
1523455428970:labs(x = "Typing Scheme",
1523455428970:y = "Run Time (s)\n") +
1523455428971:coord_flip()
1523455428972:)
1523455540451:annotationData <- data.frame(ramMarks = c(100, 1000, 10000, 100000),
1523455540451:labels = c("100 MB", "1 GB", "10 GB", "100 GB"))
1523455540868:(
1523455540868:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Application, y = Time)) +
1523455540869:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523455540869:size = lineSize/1.5, color = gridColor) +
1523455540870:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523455540870:stat = "identity", position = position_dodge(width=0.9)) +
1523455540871:# show.legend = F) +
1523455540872:scale_y_log10(breaks = c(1, 100, 1000, 10000, 100000),
1523455540872:labels = c(expression(1), expression(10^{}), expression(100^{}), expression(1000^{}), expression(10000^{})),
1523455540872:# labels = c("1", "100", "1,000", "10,000", "100,000"),
1523455540873:limits = c(1, 100000),
1523455540873:expand = c(0, 0), position = "top") +
1523455540874:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523455540874:publicationTheme +
1523455540875:labs(x = "Typing Scheme",
1523455540875:y = "Run Time (s)\n") +
1523455540875:coord_flip()
1523455540876:)
1523455562811:(
1523455562811:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Application, y = Time)) +
1523455562812:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523455562813:size = lineSize/1.5, color = gridColor) +
1523455562814:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523455562815:stat = "identity", position = position_dodge(width=0.9)) +
1523455562816:# show.legend = F) +
1523455562816:scale_y_log10(breaks = c(1, 100, 1000, 10000, 100000),
1523455562817:labels = c(expression(1), expression(10^{}), expression(100^{}), expression(1000^{}), expression(10000^{})),
1523455562818:# labels = c("1", "100", "1,000", "10,000", "100,000"),
1523455562819:limits = c(1, 100000),
1523455562820:expand = c(0, 0), position = "top") +
1523455562820:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523455562821:publicationTheme +
1523455562822:labs(x = "Typing Scheme",
1523455562823:y = "Run Time (s)\n") +
1523455562824:coord_flip()
1523455562824:)
1523455624003:(
1523455624004:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Application, y = Time)) +
1523455624004:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523455624004:size = lineSize/1.5, color = gridColor) +
1523455624005:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523455624005:stat = "identity", position = position_dodge(width=0.9)) +
1523455624006:# show.legend = F) +
1523455624006:scale_y_log10(breaks = c(1, 100, 1000, 10000, 100000),
1523455624006:labels = c(expression(1), expression(10^{}), expression(100^{}), expression(1000^{}), expression(10000^{}))
1523455624007:) +
1523455624007:# labels = c("1", "100", "1,000", "10,000", "100,000"),
1523455624007:expand = c(0, 0), position = "top") +
1523455624008:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523455624008:publicationTheme +
1523455624009:labs(x = "Typing Scheme",
1523455624009:y = "Run Time (s)\n") +
1523455624009:coord_flip()
1523455671893:annotationData <- data.frame(ramMarks = c(100, 1000, 10000, 100000),
1523455671894:labels = c("100 MB", "1 GB", "10 GB", "100 GB"))
1523455672379:(
1523455672380:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Application, y = Time)) +
1523455672380:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523455672381:size = lineSize/1.5, color = gridColor) +
1523455672381:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523455672382:stat = "identity", position = position_dodge(width=0.9)) +
1523455672382:# show.legend = F) +
1523455672383:scale_y_log10(expand = c(0, 0), position = "top",
1523455672383:breaks = c(1, 100, 1000, 10000, 100000),
1523455672383:labels = c(expression(1), expression(10^{}), expression(100^{}),
1523455672384:expression(1000^{}), expression(10000^{}))
1523455672384:) +
1523455672384:# labels = c("1", "100", "1,000", "10,000", "100,000"),
1523455672385:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523455672385:publicationTheme +
1523455672386:labs(x = "Typing Scheme",
1523455672386:y = "Run Time (s)\n") +
1523455672386:coord_flip()
1523455672387:)
1523455710018:(
1523455710019:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Application, y = Time)) +
1523455710020:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523455710020:size = lineSize/1.5, color = gridColor) +
1523455710021:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523455710021:stat = "identity", position = position_dodge(width=0.9)) +
1523455710022:# show.legend = F) +
1523455710022:scale_y_log10(expand = c(0, 0), position = "top",
1523455710023:breaks = c(1, 100, 1000, 10000, 100000),
1523455710023:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523455710024:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523455710024:publicationTheme +
1523455710025:labs(x = "Typing Scheme",
1523455710025:y = "Run Time (s)\n") +
1523455710026:coord_flip()
1523455710026:)
1523455793607:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 60*60, 12*60*60),
1523455793608:labels = c("30 sec", "1 min", "15 min", "1 hour", "12 hours"))
1523455798780:(
1523455798780:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Application, y = Time)) +
1523455798781:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523455798781:size = lineSize/1.5, color = gridColor) +
1523455798782:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523455798782:stat = "identity", position = position_dodge(width=0.9)) +
1523455798783:# show.legend = F) +
1523455798783:scale_y_log10(expand = c(0, 0), position = "top",
1523455798783:breaks = c(1, 100, 1000, 10000, 100000),
1523455798784:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523455798784:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523455798785:publicationTheme +
1523455798785:labs(x = "Typing Scheme",
1523455798786:y = "Run Time (s)\n") +
1523455798787:coord_flip()
1523455798787:)
1523455839703:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 60*60, 12*60*60),
1523455839704:labels = c("30 sec", "1 min", "15 min", "1 hour", "12 hours"))
1523455840108:(
1523455840109:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Application, y = Time)) +
1523455840110:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523455840111:size = lineSize/1.5, color = gridColor) +
1523455840112:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523455840113:stat = "identity", position = position_dodge(width=0.9)) +
1523455840114:# show.legend = F) +
1523455840115:scale_y_log10(expand = c(0, 0), position = "top",
1523455840116:breaks = c(1, 100, 1000, 10000, 100000),
1523455840117:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523455840117:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523455840118:publicationTheme +
1523455840120:labs(x = "Typing Scheme",
1523455840121:y = "Run Time (s)\n") +
1523455840121:coord_flip()
1523455840123:)
1523455851768:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 60*60, 12*60*60),
1523455851769:labels = c("30 sec", "1 min", "15 min", "1 hour", "12 hours"))
1523455852822:(
1523455852823:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Application, y = Time)) +
1523455852824:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523455852825:size = lineSize/1.5, color = gridColor) +
1523455852826:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523455852826:stat = "identity", position = position_dodge(width=0.9)) +
1523455852827:# show.legend = F) +
1523455852827:scale_y_log10(expand = c(0, 0), position = "top",
1523455852827:breaks = c(1, 100, 1000, 10000, 100000),
1523455852828:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523455852828:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523455852829:publicationTheme +
1523455852829:labs(x = "Typing Scheme",
1523455852830:y = "Run Time (s)\n") +
1523455852830:coord_flip()
1523455852830:)
1523455861437:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 60*60, 12*60*60),
1523455861438:labels = c("30 sec", "1 min", "15 min", "1 hour", "12 hours"))
1523455861943:(
1523455861944:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Application, y = Time)) +
1523455861945:geom_hline(data = annotationData, aes(yintercept = timeMarks),
1523455861946:size = lineSize/1.5, color = gridColor) +
1523455861946:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523455861947:stat = "identity", position = position_dodge(width=0.9)) +
1523455861948:# show.legend = F) +
1523455861948:scale_y_log10(expand = c(0, 0), position = "top",
1523455861949:breaks = c(1, 100, 1000, 10000, 100000),
1523455861950:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523455861951:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523455861952:publicationTheme +
1523455861952:labs(x = "Typing Scheme",
1523455861953:y = "Run Time (s)\n") +
1523455861954:coord_flip()
1523455861955:)
1523455887819:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 60*60, 12*60*60),
1523455887819:labels = c("30 sec", "1 min", "15 min", "1 hour", "12 hours"))
1523455918761:(
1523455918761:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Application, y = Time)) +
1523455918762:# geom_hline(data = annotationData, aes(yintercept = timeMarks),
1523455918763:#            size = lineSize/1.5, color = gridColor) +
1523455918764:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523455918765:stat = "identity", position = position_dodge(width=0.9)) +
1523455918765:# show.legend = F) +
1523455918766:scale_y_log10(expand = c(0, 0), position = "top",
1523455918767:breaks = c(1, 100, 1000, 10000, 100000),
1523455918768:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523455918768:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523455918769:publicationTheme +
1523455918769:labs(x = "Typing Scheme",
1523455918770:y = "Run Time (s)\n") +
1523455918771:coord_flip()
1523455918771:)
1523455939789:(
1523455939789:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Application, y = Time)) +
1523455939790:# geom_hline(data = annotationData, aes(yintercept = timeMarks),
1523455939790:#            size = lineSize/1.5, color = gridColor) +
1523455939791:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523455939791:stat = "identity", position = position_dodge(width=0.9)) +
1523455939792:# show.legend = F) +
1523455939792:scale_y_log10(expand = c(0, 0), position = "top",
1523455939792:breaks = c(1, 100, 1000, 10000, 100000),
1523455939793:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523455939793:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523455939793:publicationTheme +
1523455939794:labs(x = "Typing Scheme",
1523455939794:y = "Run Time (s)\n") +
1523455939794:coord_flip()
1523455939795:)
1523455957987:(
1523455957988:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Application, y = Time)) +
1523455957988:# geom_hline(data = annotationData, aes(yintercept = timeMarks),
1523455957989:#            size = lineSize/1.5, color = gridColor) +
1523455957989:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523455957990:stat = "identity", position = position_dodge(width=0.9)) +
1523455957990:# show.legend = F) +
1523455957990:scale_y_log10(expand = c(0, 0), position = "top", limits = c(1, 100000),
1523455957991:breaks = c(1, 100, 1000, 10000, 100000),
1523455957991:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523455957992:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523455957992:publicationTheme +
1523455957992:labs(x = "Typing Scheme",
1523455957993:y = "Run Time (s)\n") +
1523455957993:coord_flip()
1523455957994:)
1523455996091:annotationData <- data.frame(timeMarks = c(15*60, 60*60, 12*60*60),
1523455996091:labels = c("1 min", "15 min", "1 hour", "12 hours"))
1523455996620:(
1523455996621:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Application, y = Time)) +
1523455996622:geom_hline(data = annotationData, aes(yintercept = timeMarks),
1523455996622:size = lineSize/1.5, color = gridColor) +
1523455996623:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523455996623:stat = "identity", position = position_dodge(width=0.9)) +
1523455996624:# show.legend = F) +
1523455996624:scale_y_log10(expand = c(0, 0), position = "top", limits = c(1, 100000),
1523455996624:breaks = c(1, 100, 1000, 10000, 100000),
1523455996625:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523455996625:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523455996626:publicationTheme +
1523455996626:labs(x = "Typing Scheme",
1523455996627:y = "Run Time (s)\n") +
1523455996627:coord_flip()
1523455996628:)
1523456006995:annotationData <- data.frame(timeMarks = c(15*60, 60*60, 12*60*60),
1523456006996:labels = c("1 min", "15 min", "1 hour", "12 hours"))
1523456007346:(
1523456007347:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Application, y = Time)) +
1523456007348:geom_hline(data = annotationData, aes(yintercept = timeMarks),
1523456007349:size = lineSize/1.5, color = gridColor) +
1523456007350:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523456007350:stat = "identity", position = position_dodge(width=0.9)) +
1523456007351:# show.legend = F) +
1523456007352:scale_y_log10(expand = c(0, 0), position = "top", limits = c(1, 100000),
1523456007352:breaks = c(1, 100, 1000, 10000, 100000),
1523456007353:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523456007353:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523456007354:publicationTheme +
1523456007355:labs(x = "Typing Scheme",
1523456007356:y = "Run Time (s)\n") +
1523456007356:coord_flip()
1523456007357:)
1523456021511:annotationData <- data.frame(timeMarks = c(15*60, 60*60, 12*60*60),
1523456021511:labels = c("15 min", "1 hour", "12 hours"))
1523456022425:(
1523456022426:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Application, y = Time)) +
1523456022427:geom_hline(data = annotationData, aes(yintercept = timeMarks),
1523456022428:size = lineSize/1.5, color = gridColor) +
1523456022429:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523456022429:stat = "identity", position = position_dodge(width=0.9)) +
1523456022429:# show.legend = F) +
1523456022430:scale_y_log10(expand = c(0, 0), position = "top", limits = c(1, 100000),
1523456022430:breaks = c(1, 100, 1000, 10000, 100000),
1523456022431:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523456022432:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523456022432:publicationTheme +
1523456022433:labs(x = "Typing Scheme",
1523456022433:y = "Run Time (s)\n") +
1523456022434:coord_flip()
1523456022434:)
1523456048712:# Add annotation times
1523456048713:for (i in 1:nrow(annotationData)) {
1523456048714:lsTimePlot <- lsTimePlot + annotation_custom(
1523456048714:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523456048715:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523456048716:col = "#222222")),
1523456048716:ymin = log10(annotationData$timeMarks[i]),
1523456048717:ymax = log10(annotationData$timeMarks[i]),
1523456048718:xmin = 0.4,
1523456048719:xmax = 0.4)
1523456048719:}
1523456049684:# Remove clipping
1523456049684:gt <- ggplot_gtable(ggplot_build(lsRamPlot))
1523456049944:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523456050275:grid.draw(gt)
1523456068195:# Remove clipping
1523456068195:gt <- ggplot_gtable(ggplot_build(lsTimePlot))
1523456068516:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523456068850:grid.draw(gt)
1523456103302:annotationData <- data.frame(timeMarks = c(15*60, 60*60, 12*60*60),
1523456103303:labels = c("15 min", "1 hour", "12 hours"))
1523456103816:(
1523456103816:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Application, y = Time)) +
1523456103817:geom_hline(data = annotationData, aes(yintercept = timeMarks),
1523456103818:size = lineSize/1.5, color = gridColor) +
1523456103819:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523456103820:stat = "identity", position = position_dodge(width=0.9)) +
1523456103820:# show.legend = F) +
1523456103821:scale_y_log10(expand = c(0, 0), position = "top", limits = c(1, 100000),
1523456103821:breaks = c(1, 100, 1000, 10000, 100000),
1523456103822:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523456103823:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523456103824:publicationTheme +
1523456103824:labs(x = "Typing Scheme",
1523456103825:y = "Run Time (s)\n") +
1523456103825:coord_flip()
1523456103826:)
1523456106405:# Add annotation times
1523456106406:for (i in 1:nrow(annotationData)) {
1523456106406:lsTimePlot <- lsTimePlot + annotation_custom(
1523456106407:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523456106407:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523456106408:col = "#222222")),
1523456106408:ymin = log10(annotationData$timeMarks[i]),
1523456106409:ymax = log10(annotationData$timeMarks[i]),
1523456106409:xmin = 0.4,
1523456106410:xmax = 0.4)
1523456106410:}
1523456107315:# Remove clipping
1523456107316:gt <- ggplot_gtable(ggplot_build(lsTimePlot))
1523456109268:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523456109862:grid.draw(gt)
1523456142380:annotationData <- data.frame(timeMarks = c(60, 15*60, 60*60, 12*60*60),
1523456142381:labels = c("1 min", "15 min", "1 hour", "12 hours"))
1523456142817:(
1523456142817:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Application, y = Time)) +
1523456142818:geom_hline(data = annotationData, aes(yintercept = timeMarks),
1523456142818:size = lineSize/1.5, color = gridColor) +
1523456142819:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523456142819:stat = "identity", position = position_dodge(width=0.9)) +
1523456142820:# show.legend = F) +
1523456142820:scale_y_log10(expand = c(0, 0), position = "top", limits = c(1, 100000),
1523456142821:breaks = c(1, 100, 1000, 10000, 100000),
1523456142821:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523456142821:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523456142822:publicationTheme +
1523456142823:labs(x = "Typing Scheme",
1523456142823:y = "Run Time (s)\n") +
1523456142824:coord_flip()
1523456142825:)
1523456143796:# Add annotation times
1523456143796:for (i in 1:nrow(annotationData)) {
1523456143797:lsTimePlot <- lsTimePlot + annotation_custom(
1523456143797:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523456143798:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523456143798:col = "#222222")),
1523456143799:ymin = log10(annotationData$timeMarks[i]),
1523456143800:ymax = log10(annotationData$timeMarks[i]),
1523456143800:xmin = 0.4,
1523456143801:xmax = 0.4)
1523456143801:}
1523456144147:# Remove clipping
1523456144147:gt <- ggplot_gtable(ggplot_build(lsTimePlot))
1523456144334:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523456144335:grid.draw(gt)
1523456162682:annotationData <- data.frame(timeMarks = c(5*60, 15*60, 60*60, 12*60*60),
1523456162683:labels = c("5 min", "15 min", "1 hour", "12 hours"))
1523456162905:(
1523456162906:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Application, y = Time)) +
1523456162906:geom_hline(data = annotationData, aes(yintercept = timeMarks),
1523456162907:size = lineSize/1.5, color = gridColor) +
1523456162907:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523456162908:stat = "identity", position = position_dodge(width=0.9)) +
1523456162909:# show.legend = F) +
1523456162909:scale_y_log10(expand = c(0, 0), position = "top", limits = c(1, 100000),
1523456162910:breaks = c(1, 100, 1000, 10000, 100000),
1523456162910:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523456162911:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523456162911:publicationTheme +
1523456162912:labs(x = "Typing Scheme",
1523456162912:y = "Run Time (s)\n") +
1523456162913:coord_flip()
1523456162913:)
1523456163325:# Add annotation times
1523456163325:for (i in 1:nrow(annotationData)) {
1523456163325:lsTimePlot <- lsTimePlot + annotation_custom(
1523456163326:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523456163326:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523456163326:col = "#222222")),
1523456163327:ymin = log10(annotationData$timeMarks[i]),
1523456163327:ymax = log10(annotationData$timeMarks[i]),
1523456163328:xmin = 0.4,
1523456163328:xmax = 0.4)
1523456163328:}
1523456163349:# Remove clipping
1523456163349:gt <- ggplot_gtable(ggplot_build(lsTimePlot))
1523456163885:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523456164181:grid.draw(gt)
1523456182317:annotationData <- data.frame(timeMarks = c(60, 15*60, 60*60, 12*60*60),
1523456182318:labels = c("1 min", "15 min", "1 hour", "12 hours"))
1523456182321:(
1523456182321:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Application, y = Time)) +
1523456182322:geom_hline(data = annotationData, aes(yintercept = timeMarks),
1523456182323:size = lineSize/1.5, color = gridColor) +
1523456182324:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523456182324:stat = "identity", position = position_dodge(width=0.9)) +
1523456182325:# show.legend = F) +
1523456182326:scale_y_log10(expand = c(0, 0), position = "top", limits = c(1, 100000),
1523456182326:breaks = c(1, 100, 1000, 10000, 100000),
1523456182327:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523456182327:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523456182328:publicationTheme +
1523456182329:labs(x = "Typing Scheme",
1523456182329:y = "Run Time (s)\n") +
1523456182330:coord_flip()
1523456182330:)
1523456182587:# Add annotation times
1523456182587:for (i in 1:nrow(annotationData)) {
1523456182587:lsTimePlot <- lsTimePlot + annotation_custom(
1523456182588:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523456182588:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523456182588:col = "#222222")),
1523456182589:ymin = log10(annotationData$timeMarks[i]),
1523456182589:ymax = log10(annotationData$timeMarks[i]),
1523456182589:xmin = 0.4,
1523456182590:xmax = 0.4)
1523456182590:}
1523456182609:# Remove clipping
1523456182610:gt <- ggplot_gtable(ggplot_build(lsTimePlot))
1523456183086:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523456183087:grid.draw(gt)
1523456247229:# STing vs other sequence typing software
1523456247230:# Install an load packages ------------------------------------------------
1523456247230:installAndLoadPackages <- function(pkg){
1523456247231:cat("Please wait a moment! Checking for required packages... ")
1523456247232:cat("Done!\n")
1523456247233:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1523456247233:if (length(new.pkg)) {
1523456247234:cat("Installing new packages... ")
1523456247235:install.packages(new.pkg, dependencies = TRUE,
1523456247236:repos="http://cran.rstudio.com/")
1523456247237:cat("Done!\n")
1523456247238:}
1523456247238:cat("Loading packages... \n")
1523456247240:sapply(pkg, require, character.only = TRUE)
1523456247241:cat("Done!\n")
1523456247242:}
1523456247243:requiredPackages <- c("dplyr", "readr", "ggpubr", "RColorBrewer", "gridExtra",
1523456247244:"extrafont", "grid")
1523456247245:installAndLoadPackages(requiredPackages)
1523456247253:# Sources -----------------------------------------------------------------
1523456247254:# Loading Data ------------------------------------------------------------
1523456247254:inFile   <- "data/typer/stringMLST-comparisons.tsv"
1523456247255:compData <- read_tsv(inFile)
1523456247261:largerSchemesData <- read_tsv("data/typer/sting_vs_stringmlst.tsv")
1523456247269:# General configuration ---------------------------------------------------
1523456247269:customPalette <- c("#0a4f75","#91bbe4","#d7e4f5")
1523456247270:customPalette <- rev(brewer.pal(n = 7, name = "Paired"))
1523456247270:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#c81837"))
1523456247271:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#33A02C"))
1523456247271:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "gray50"))
1523456247272:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#86827F"))
1523456247272:customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#e8702a", "#edc374", "#faebd7", "#86827F"))
1523456247273:customPalette <- c('#86827F','#faebd7','#edc374','#e8702a','#d7e4f5','#91bbe4','#0a4f75')
1523456247274:width            <- 9
1523456247275:height           <- width * 0.618
1523456247275:lineSize         <- 0.5
1523456247276:axisColor        <- "#666666"
1523456247277:gridColor        <- "#cccccc"
1523456247278:baseTextSize     <- 18
1523456247279:barAnnotTextSize <- 4
1523456247280:# baseFontFamily   <- "Helvetica"
1523456247280:baseFontFamily   <- "Arial"
1523456247281:baseFontFamily   <- "HelveticaNeueLT Com 45 Lt"
1523456247281:baseFontFamily   <- "HelveticaNeueLT Std Lt"
1523456249211:publicationTheme <- list(
1523456249211:theme_pubr() +
1523456249212:theme(
1523456249213:axis.line.y  = element_blank(),
1523456249213:axis.text    = element_text(size = baseTextSize * 0.875,
1523456249214:family = baseFontFamily,
1523456249215:color = "black"),
1523456249216:axis.title.y = element_text(margin=margin(1, 10, 1, 1, "mm")),
1523456249217:axis.ticks.y = element_blank(),
1523456249217:axis.title   = element_text(size = baseTextSize),
1523456249218:panel.grid.major.x = element_line(colour = gridColor,
1523456249219:size = lineSize),
1523456249220:plot.margin = margin(8, 20, 24, 8, "mm"),
1523456249221:text = element_text(size = baseTextSize,
1523456249222:family = baseFontFamily)
1523456249223:)
1523456249224:)
1523456249237:# Preparing data ----------------------------------------------------------
1523456249237:toolNameLevels <- compData$Tool_Name[c(6,4,5,7,3,2,1)]
1523456249238:dataToPlot <- compData %>%
1523456249239:arrange(Alleles) %>%
1523456249239:mutate(Tool_Name = factor(Tool_Name, toolNameLevels))
1523456249243:# Correct Predictions Plot ------------------------------------------------
1523456249244:predPlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Alleles)) +
1523456249244:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523456249245:stat = "identity", position = position_dodge(width=0.9),
1523456249245:show.legend = F) +
1523456249246:scale_y_continuous(expand = c(0, 0), position = "top") +
1523456249246:scale_fill_manual(values = customPalette) +
1523456249247:publicationTheme +
1523456249248:labs(x = "Typing Tool",
1523456249248:y = "Correct Alleles (%)\n") +
1523456249249:coord_flip()
1523456249260:predPlot
1523456249485:ggsave(filename = "sources/STing_vs_others.prediction.png", plot = predPlot,
1523456249485:width = 8, height = 6)
1523456249875:# Time Plot ---------------------------------------------------------------
1523456249875:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523456249876:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523456250129:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523456250129:geom_hline(data = annotationData, aes(yintercept = timeMarks),
1523456250130:size = lineSize/1.5, color = gridColor) +
1523456250130:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523456250130:stat = "identity", position = position_dodge(width=0.9),
1523456250131:show.legend = F) +
1523456250131:scale_y_log10(expand = c(0, 0), position = "top") +
1523456250131:scale_fill_manual(values = customPalette) +
1523456250132:publicationTheme +
1523456250132:labs(x = "Typing Tool",
1523456250133:y = "Run Time (s)\n") +
1523456250133:coord_flip()
1523456250142:# Add annotation times
1523456250142:for (i in 1:nrow(annotationData)) {
1523456250142:timePlot <- timePlot + annotation_custom(
1523456250143:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523456250143:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523456250143:col = "#222222")),
1523456250144:ymin = log10(annotationData$timeMarks[i]),
1523456250144:ymax = log10(annotationData$timeMarks[i]),
1523456250144:xmin = 0.35,
1523456250145:xmax = 0.35)
1523456250145:}
1523456250176:# Remove clipping
1523456250176:gt <- ggplot_gtable(ggplot_build(timePlot))
1523456250376:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523456250377:grid.draw(gt)
1523456250442:ggsave(filename = "sources/STing_vs_others.time.png", plot = gt,
1523456250443:width = 8, height = 6)
1523456250814:# Larger schemes ----------------------------------------------------------
1523456250815:applicationLevels <- c("STing - Fast", "STing - Sensitive", "stringMLST")
1523456250816:(largerDataToPlot <- largerSchemesData %>%
1523456250817:filter(Scheme == "rMLST" | Scheme == "cgMLST") %>%
1523456250818:arrange(desc(Scheme), Application) %>%
1523456250818:# mutate(Species_scheme = as.factor(paste(Species, "-", Scheme)))
1523456250818:# mutate(Application_Scheme = factor(paste(Species, "-", Scheme)), applicationLevels))
1523456250819:mutate(Application = factor(Application, rev(applicationLevels)))
1523456250819:)
1523456251492:# customPalette <- c('#86827F','#faebd7','#edc374','#e8702a','#d7e4f5','#91bbe4','#0a4f75')
1523456251492:customPalette <- c('#0a4f75','#91bbe4','#d7e4f5')
1523456251492:(
1523456251493:lsPredPlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = Correct_Alleles)) +
1523456251493:# geom_bar(aes(fill = Application),
1523456251493:# stat = "identity", position = position_dodge(width = 0.9)) +
1523456251494:geom_bar(aes(fill = Application), color = "black", size = 0.5,
1523456251494:stat = "identity", position = position_dodge(width=0.9)) +
1523456251494:# show.legend = F) +
1523456251495:scale_y_continuous(limits = c(0, 100), expand = c(0, 0), position = "top") +
1523456251495:scale_fill_manual(values = rev(customPalette)) +
1523456251495:publicationTheme +
1523456251496:labs(x = "Typing Scheme",
1523456251496:y = "Correct Alleles (%)\n") +
1523456251496:coord_flip()
1523456251497:)
1523456251769:annotationData <- data.frame(timeMarks = c(60, 15*60, 60*60, 12*60*60),
1523456251769:labels = c("1 min", "15 min", "1 hour", "12 hours"))
1523456251770:(
1523456251770:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Application, y = Time)) +
1523456251771:geom_hline(data = annotationData, aes(yintercept = timeMarks),
1523456251771:size = lineSize/1.5, color = gridColor) +
1523456251771:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523456251772:stat = "identity", position = position_dodge(width=0.9)) +
1523456251772:# show.legend = F) +
1523456251773:scale_y_log10(expand = c(0, 0), position = "top", limits = c(1, 100000),
1523456251773:breaks = c(1, 100, 1000, 10000, 100000),
1523456251774:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523456251774:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523456251774:publicationTheme +
1523456251775:labs(x = "Typing Scheme",
1523456251775:y = "Run Time (s)\n") +
1523456251775:coord_flip()
1523456251776:)
1523456252211:# Add annotation times
1523456252212:for (i in 1:nrow(annotationData)) {
1523456252212:lsTimePlot <- lsTimePlot + annotation_custom(
1523456252212:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523456252213:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523456252213:col = "#222222")),
1523456252214:ymin = log10(annotationData$timeMarks[i]),
1523456252214:ymax = log10(annotationData$timeMarks[i]),
1523456252214:xmin = 0.4,
1523456252215:xmax = 0.4)
1523456252215:}
1523456252234:# Remove clipping
1523456252234:gt <- ggplot_gtable(ggplot_build(lsTimePlot))
1523456252721:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523456252721:grid.draw(gt)
1523456252926:(
1523456252926:lsRamPlot <- ggplot(largerDataToPlot, aes(x = Application, y = RAM)) +
1523456252926:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523456252927:size = lineSize/1.5, color = gridColor) +
1523456252927:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523456252927:stat = "identity", position = position_dodge(width=0.9)) +
1523456252928:# show.legend = F) +
1523456252928:scale_y_log10(expand = c(0, 0), position = "top",
1523456252928:breaks = c(1, 100, 1000, 10000, 100000),
1523456252929:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523456252929:# scale_fill_manual(values = rev(customPalette)) +
1523456252929:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523456252930:publicationTheme +
1523456252930:labs(x = "Typing Tool",#x = "Typing Scheme",
1523456252931:y = "Memory (RAM) consumption (MB)\n") +
1523456252931:coord_flip()
1523456252931:)
1523456253080:# Add annotation times
1523456253080:for (i in 1:nrow(annotationData)) {
1523456253081:lsRamPlot <- lsRamPlot + annotation_custom(
1523456253081:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523456253081:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523456253082:col = "#222222")),
1523456253082:ymin = log10(annotationData$ramMarks[i]),
1523456253082:ymax = log10(annotationData$ramMarks[i]),
1523456253083:xmin = 0.4,
1523456253083:xmax = 0.4)
1523456253083:}
1523456253093:# Remove clipping
1523456253093:gt <- ggplot_gtable(ggplot_build(lsRamPlot))
1523456253098:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523456253098:grid.draw(gt)
1523456460918:a
1523456462382:# RAM
1523456462383:annotationData <- data.frame(ramMarks = c(100, 1000, 10000, 100000),
1523456462383:labels = c("100 MB", "1 GB", "10 GB", "100 GB"))
1523456462996:(
1523456462997:lsRamPlot <- ggplot(largerDataToPlot, aes(x = Application, y = RAM)) +
1523456462997:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523456462998:size = lineSize/1.5, color = gridColor) +
1523456462999:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523456462999:stat = "identity", position = position_dodge(width=0.9)) +
1523456463000:# show.legend = F) +
1523456463001:scale_y_log10(expand = c(0, 0), position = "top",
1523456463001:breaks = c(1, 100, 1000, 10000, 100000),
1523456463002:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523456463002:# scale_fill_manual(values = rev(customPalette)) +
1523456463003:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523456463004:publicationTheme +
1523456463005:labs(x = "Typing Tool",#x = "Typing Scheme",
1523456463005:y = "Memory (RAM) consumption (MB)\n") +
1523456463006:coord_flip()
1523456463007:)
1523456464047:# Add annotation times
1523456464048:for (i in 1:nrow(annotationData)) {
1523456464048:lsRamPlot <- lsRamPlot + annotation_custom(
1523456464049:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523456464049:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523456464050:col = "#222222")),
1523456464050:ymin = log10(annotationData$ramMarks[i]),
1523456464050:ymax = log10(annotationData$ramMarks[i]),
1523456464051:xmin = 0.4,
1523456464051:xmax = 0.4)
1523456464052:}
1523456464502:# Remove clipping
1523456464503:gt <- ggplot_gtable(ggplot_build(lsRamPlot))
1523456465199:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523456465854:grid.draw(gt)
1523456519596:# RAM
1523456519597:annotationData <- data.frame(ramMarks = c(1000, 5000, 10000, 100000),
1523456519597:labels = c("1 GB", "5 GB", "10 GB", "100 GB"))
1523456524491:annotationData <- data.frame(ramMarks = c(1000, 5000, 10000, 100000),
1523456524492:labels = c("1 GB", "5 GB", "10 GB", "100 GB"))
1523456524494:(
1523456524494:lsRamPlot <- ggplot(largerDataToPlot, aes(x = Application, y = RAM)) +
1523456524495:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523456524496:size = lineSize/1.5, color = gridColor) +
1523456524496:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523456524497:stat = "identity", position = position_dodge(width=0.9)) +
1523456524498:# show.legend = F) +
1523456524498:scale_y_log10(expand = c(0, 0), position = "top",
1523456524499:breaks = c(1, 100, 1000, 10000, 100000),
1523456524500:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523456524501:# scale_fill_manual(values = rev(customPalette)) +
1523456524502:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523456524502:publicationTheme +
1523456524503:labs(x = "Typing Tool",#x = "Typing Scheme",
1523456524504:y = "Memory (RAM) consumption (MB)\n") +
1523456524504:coord_flip()
1523456524505:)
1523456524772:# Add annotation times
1523456524772:for (i in 1:nrow(annotationData)) {
1523456524773:lsRamPlot <- lsRamPlot + annotation_custom(
1523456524773:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523456524773:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523456524774:col = "#222222")),
1523456524774:ymin = log10(annotationData$ramMarks[i]),
1523456524775:ymax = log10(annotationData$ramMarks[i]),
1523456524775:xmin = 0.4,
1523456524775:xmax = 0.4)
1523456524776:}
1523456524795:# Remove clipping
1523456524795:gt <- ggplot_gtable(ggplot_build(lsRamPlot))
1523456525272:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523456525272:grid.draw(gt)
1523456773715:annotationData[2,]
1523456780706:# RAM
1523456780707:annotationData <- data.frame(ramMarks = c(1000, 5000, 10000, 100000),
1523456780707:labels = c("1 GB", "5 GB", "10 GB", "100 GB"))
1523456781220:(
1523456781221:lsRamPlot <- ggplot(largerDataToPlot, aes(x = Application, y = RAM)) +
1523456781221:geom_hline(data = annotationData[2,], aes(yintercept = ramMarks),
1523456781222:size = lineSize/1.5, color = gridColor) +
1523456781223:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523456781223:stat = "identity", position = position_dodge(width=0.9)) +
1523456781224:# show.legend = F) +
1523456781224:scale_y_log10(expand = c(0, 0), position = "top",
1523456781225:breaks = c(1, 100, 1000, 10000, 100000),
1523456781225:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523456781225:# scale_fill_manual(values = rev(customPalette)) +
1523456781226:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523456781226:publicationTheme +
1523456781227:labs(x = "Typing Tool",#x = "Typing Scheme",
1523456781227:y = "Memory (RAM) consumption (MB)\n") +
1523456781228:coord_flip()
1523456781228:)
1523456788243:# Add annotation times
1523456788243:for (i in 1:nrow(annotationData)) {
1523456788244:lsRamPlot <- lsRamPlot + annotation_custom(
1523456788244:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523456788245:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523456788245:col = "#222222")),
1523456788246:ymin = log10(annotationData$ramMarks[i]),
1523456788246:ymax = log10(annotationData$ramMarks[i]),
1523456788246:xmin = 0.4,
1523456788247:xmax = 0.4)
1523456788247:}
1523456788931:# Remove clipping
1523456788932:gt <- ggplot_gtable(ggplot_build(lsRamPlot))
1523456789206:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523456789574:grid.draw(gt)
1523456882274:max(largerDataToPlot$RAM)
1523456888226:log10(max(largerDataToPlot$RAM)
1523456891259:)
1523456908817:# RAM
1523456908817:annotationData <- data.frame(ramMarks = c(1000, 5000, 10000, 100000),
1523456908818:labels = c("1 GB", "5 GB", "10 GB", "100 GB"))
1523456909246:(
1523456909247:lsRamPlot <- ggplot(largerDataToPlot, aes(x = Application, y = RAM)) +
1523456909248:geom_hline(data = annotationData[2,], aes(yintercept = ramMarks),
1523456909248:size = lineSize/1.5, color = gridColor) +
1523456909249:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523456909250:stat = "identity", position = position_dodge(width=0.9)) +
1523456909251:# show.legend = F) +
1523456909251:scale_y_log10(expand = c(0, 0), position = "top", limits = c(1, log10(max(largerDataToPlot$RAM))),
1523456909252:breaks = c(1, 100, 1000, 10000, 100000),
1523456909253:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523456909253:# scale_fill_manual(values = rev(customPalette)) +
1523456909253:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523456909254:publicationTheme +
1523456909254:labs(x = "Typing Tool",#x = "Typing Scheme",
1523456909255:y = "Memory (RAM) consumption (MB)\n") +
1523456909255:coord_flip()
1523456909256:)
1523456940188:annotationData[2,]
1523456944255:# RAM
1523456944256:annotationData <- data.frame(ramMarks = c(1000, 5000, 10000, 100000),
1523456944257:labels = c("1 GB", "5 GB", "10 GB", "100 GB"))
1523456944957:(
1523456944958:lsRamPlot <- ggplot(largerDataToPlot, aes(x = Application, y = RAM)) +
1523456944958:geom_hline(data = annotationData[2,], aes(yintercept = ramMarks),
1523456944959:size = lineSize/1.5, color = gridColor) +
1523456944960:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523456944960:stat = "identity", position = position_dodge(width=0.9)) +
1523456944961:# show.legend = F) +
1523456944961:scale_y_log10(expand = c(0, 0), position = "top", limits = c(1, log10(max(largerDataToPlot$RAM))),
1523456944962:breaks = c(1, 100, 1000, 10000, 100000),
1523456944963:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523456944963:# scale_fill_manual(values = rev(customPalette)) +
1523456944964:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523456944965:publicationTheme +
1523456944965:labs(x = "Typing Tool",#x = "Typing Scheme",
1523456944966:y = "Memory (RAM) consumption (MB)\n") +
1523456944967:coord_flip()
1523456944968:)
1523456959456:# RAM
1523456959456:annotationData <- data.frame(ramMarks = c(1000, 5000, 10000, 100000),
1523456959457:labels = c("1 GB", "5 GB", "10 GB", "100 GB"))
1523456959966:(
1523456959967:lsRamPlot <- ggplot(largerDataToPlot, aes(x = Application, y = RAM)) +
1523456959967:geom_hline(data = annotationData[2,], aes(yintercept = ramMarks),
1523456959967:size = lineSize/1.5, color = gridColor) +
1523456959968:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523456959968:stat = "identity", position = position_dodge(width=0.9)) +
1523456959969:# show.legend = F) +
1523456959969:scale_y_log10(expand = c(0, 0), position = "top", limits = c(1, max(largerDataToPlot$RAM)),
1523456959970:breaks = c(1, 100, 1000, 10000, 100000),
1523456959970:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523456959970:# scale_fill_manual(values = rev(customPalette)) +
1523456959971:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523456959971:publicationTheme +
1523456959972:labs(x = "Typing Tool",#x = "Typing Scheme",
1523456959972:y = "Memory (RAM) consumption (MB)\n") +
1523456959972:coord_flip()
1523456959973:)
1523456980111:(
1523456980111:lsRamPlot <- ggplot(largerDataToPlot, aes(x = Application, y = RAM)) +
1523456980112:geom_hline(data = annotationData[2,], aes(yintercept = ramMarks),
1523456980113:size = lineSize/1.5, color = gridColor) +
1523456980113:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523456980114:stat = "identity", position = position_dodge(width=0.9)) +
1523456980114:# show.legend = F) +
1523456980115:scale_y_log10(expand = c(0, 0), position = "top", limits = c(0, max(largerDataToPlot$RAM)),
1523456980115:breaks = c(1, 100, 1000, 10000, 100000),
1523456980116:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523456980116:# scale_fill_manual(values = rev(customPalette)) +
1523456980117:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523456980117:publicationTheme +
1523456980118:labs(x = "Typing Tool",#x = "Typing Scheme",
1523456980118:y = "Memory (RAM) consumption (MB)\n") +
1523456980119:coord_flip()
1523456980120:)
1523456988491:(
1523456988492:lsRamPlot <- ggplot(largerDataToPlot, aes(x = Application, y = RAM)) +
1523456988492:geom_hline(data = annotationData[2,], aes(yintercept = ramMarks),
1523456988493:size = lineSize/1.5, color = gridColor) +
1523456988493:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523456988494:stat = "identity", position = position_dodge(width=0.9)) +
1523456988494:# show.legend = F) +
1523456988494:scale_y_log10(expand = c(0, 0), position = "top",
1523456988495:breaks = c(1, 100, 1000, 10000, 100000),
1523456988495:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523456988496:# scale_fill_manual(values = rev(customPalette)) +
1523456988496:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523456988496:publicationTheme +
1523456988497:labs(x = "Typing Tool",#x = "Typing Scheme",
1523456988497:y = "Memory (RAM) consumption (MB)\n") +
1523456988498:coord_flip()
1523456988498:)
1523456997202:annotationData <- data.frame(ramMarks = c(1000, 5000, 10000, 100000),
1523456997203:labels = c("1 GB", "5 GB", "10 GB", "100 GB"))
1523456997206:(
1523456997206:lsRamPlot <- ggplot(largerDataToPlot, aes(x = Application, y = RAM)) +
1523456997207:geom_hline(data = annotationData[2,], aes(yintercept = ramMarks),
1523456997208:size = lineSize/1.5, color = gridColor) +
1523456997209:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523456997210:stat = "identity", position = position_dodge(width=0.9)) +
1523456997211:# show.legend = F) +
1523456997211:scale_y_log10(expand = c(0, 0), position = "top",
1523456997212:breaks = c(1, 100, 1000, 10000, 100000),
1523456997213:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523456997214:# scale_fill_manual(values = rev(customPalette)) +
1523456997215:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523456997216:publicationTheme +
1523456997216:labs(x = "Typing Tool",#x = "Typing Scheme",
1523456997217:y = "Memory (RAM) consumption (MB)\n") +
1523456997218:coord_flip()
1523456997219:)
1523456997530:# Add annotation times
1523456997530:for (i in 1:nrow(annotationData)) {
1523456997531:lsRamPlot <- lsRamPlot + annotation_custom(
1523456997531:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523456997531:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523456997532:col = "#222222")),
1523456997532:ymin = log10(annotationData$ramMarks[i]),
1523456997533:ymax = log10(annotationData$ramMarks[i]),
1523456997533:xmin = 0.4,
1523456997533:xmax = 0.4)
1523456997534:}
1523456997974:# Remove clipping
1523456997975:gt <- ggplot_gtable(ggplot_build(lsRamPlot))
1523456998262:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523456998263:grid.draw(gt)
1523457083293:annotationData <- data.frame(ramMarks = c(1000, 5000, 10000, 100000),
1523457083294:labels = c("1 GB", "5 GB", "10 GB", "100 GB"))
1523457083295:(
1523457083296:lsRamPlot <- ggplot(largerDataToPlot, aes(x = Application, y = RAM)) +
1523457083296:geom_hline(data = annotationData[2,], aes(yintercept = ramMarks),
1523457083297:size = lineSize/1.5, color = gridColor) +
1523457083297:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523457083298:stat = "identity", position = position_dodge(width=0.9)) +
1523457083298:# show.legend = F) +
1523457083299:scale_y_log10(expand = c(0, 0), position = "top",
1523457083300:breaks = c(1, 100, 1000, 10000, 100000),
1523457083300:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523457083301:# scale_fill_manual(values = rev(customPalette)) +
1523457083301:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523457083302:publicationTheme +
1523457083302:labs(x = "Typing Tool",#x = "Typing Scheme",
1523457083303:y = "Memory (RAM) consumption (MB)\n") +
1523457083303:coord_flip()
1523457083304:)
1523457083563:# Add annotation times
1523457083564:for (i in 1:nrow(annotationData)) {
1523457083564:lsRamPlot <- lsRamPlot + annotation_custom(
1523457083564:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523457083565:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523457083565:col = "#222222")),
1523457083565:ymin = log10(annotationData$ramMarks[i]),
1523457083565:ymax = log10(annotationData$ramMarks[i]),
1523457083566:xmin = 0.35,
1523457083566:xmax = 0.35)
1523457083567:}
1523457083586:# Remove clipping
1523457083586:gt <- ggplot_gtable(ggplot_build(lsRamPlot))
1523457084136:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523457084137:grid.draw(gt)
1523457280302:# Larger Schemes - Correct Predictions-------------------------------------
1523457280303:# customPalette <- c('#86827F','#faebd7','#edc374','#e8702a','#d7e4f5','#91bbe4','#0a4f75')
1523457280303:customPalette <- c('#0a4f75','#91bbe4','#d7e4f5')
1523457280725:(
1523457280726:lsPredPlot <- ggplot(largerDataToPlot, aes(x = Scheme, y = Correct_Alleles)) +
1523457280726:# geom_bar(aes(fill = Application),
1523457280727:# stat = "identity", position = position_dodge(width = 0.9)) +
1523457280728:geom_bar(aes(fill = Application), color = "black", size = 0.5,
1523457280728:stat = "identity", position = position_dodge(width=0.9)) +
1523457280728:# show.legend = F) +
1523457280729:scale_y_continuous(limits = c(0, 100), expand = c(0, 0), position = "top") +
1523457280729:scale_fill_manual(values = rev(customPalette)) +
1523457280729:publicationTheme +
1523457280730:labs(x = "Typing Scheme",
1523457280730:y = "Correct Alleles (%)\n") +
1523457280730:coord_flip()
1523457280731:)
1523457368069:# Larger Schemes - Correct Predictions-------------------------------------
1523457368069:# customPalette <- c('#86827F','#faebd7','#edc374','#e8702a','#d7e4f5','#91bbe4','#0a4f75')
1523457368070:customPalette <- c('#0a4f75','#91bbe4','#d7e4f5')
1523457368552:(
1523457368552:lsPredPlot <- ggplot(largerDataToPlot, aes(x = Application, y = Correct_Alleles)) +
1523457368553:# geom_bar(aes(fill = Application),
1523457368554:# stat = "identity", position = position_dodge(width = 0.9)) +
1523457368554:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523457368555:stat = "identity", position = position_dodge(width=0.9)) +
1523457368555:# show.legend = F) +
1523457368556:scale_y_continuous(limits = c(0, 100), expand = c(0, 0), position = "top") +
1523457368557:# scale_fill_manual(values = rev(customPalette)) +
1523457368557:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523457368558:publicationTheme +
1523457368559:labs(x = "Application", #"Typing Scheme",
1523457368559:y = "Correct Alleles (%)\n") +
1523457368560:coord_flip()
1523457368560:)
1523457426055:# Larger Schemes - Correct Predictions-------------------------------------
1523457426056:# customPalette <- c('#86827F','#faebd7','#edc374','#e8702a','#d7e4f5','#91bbe4','#0a4f75')
1523457426057:customPalette <- c('#0a4f75','#91bbe4','#d7e4f5')
1523457426462:(
1523457426463:lsPredPlot <- ggplot(largerDataToPlot, aes(x = Application, y = Correct_Alleles)) +
1523457426464:# geom_bar(aes(fill = Application),
1523457426464:# stat = "identity", position = position_dodge(width = 0.9)) +
1523457426465:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523457426466:stat = "identity", position = position_dodge(width=0.9)) +
1523457426466:# show.legend = F) +
1523457426467:scale_y_continuous(limits = c(0, 100), expand = c(0, 0), position = "top") +
1523457426468:# scale_fill_manual(values = rev(customPalette)) +
1523457426469:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523457426470:publicationTheme +
1523457426471:labs(x = "Typing Tool", #"Typing Scheme",
1523457426472:y = "Correct Alleles (%)\n") +
1523457426472:coord_flip()
1523457426473:)
1523457609544:(
1523457609545:lsPredPlot <- ggplot(largerDataToPlot, aes(x = Application, y = Correct_Alleles)) +
1523457609545:# geom_bar(aes(fill = Application),
1523457609545:# stat = "identity", position = position_dodge(width = 0.9)) +
1523457609546:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523457609546:stat = "identity", position = position_dodge(width=0.9)) +
1523457609547:# show.legend = F) +
1523457609547:scale_y_continuous(limits = c(0, 100), expand = c(0, 0), position = "top") +
1523457609547:# scale_fill_manual(values = rev(customPalette)) +
1523457609548:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4],
1523457609548:name = "Typing Scheme") +
1523457609549:publicationTheme +
1523457609549:labs(x = "Typing Tool", #"Typing Scheme",
1523457609549:y = "Correct Alleles (%)\n") +
1523457609550:coord_flip()
1523457609550:)
1523457665202:# Larger Schemes - Correct Predictions-------------------------------------
1523457665203:# customPalette <- c('#86827F','#faebd7','#edc374','#e8702a','#d7e4f5','#91bbe4','#0a4f75')
1523457665204:customPalette <- c('#0a4f75','#91bbe4','#d7e4f5')
1523457665359:(
1523457665360:lsPredPlot <- ggplot(largerDataToPlot, aes(x = Application, y = Correct_Alleles)) +
1523457665361:# geom_bar(aes(fill = Application),
1523457665361:# stat = "identity", position = position_dodge(width = 0.9)) +
1523457665362:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523457665362:stat = "identity", position = position_dodge(width=0.9)) +
1523457665363:# show.legend = F) +
1523457665363:scale_y_continuous(limits = c(0, 100), expand = c(0, 0), position = "top") +
1523457665364:# scale_fill_manual(values = rev(customPalette)) +
1523457665364:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523457665365:publicationTheme +
1523457665365:labs(x = "Typing Tool", #"Typing Scheme",
1523457665366:y = "Correct Alleles (%)\n") +
1523457665366:coord_flip()
1523457665367:)
1523457776199:# STing vs other sequence typing software
1523457776200:# Install an load packages ------------------------------------------------
1523457776201:installAndLoadPackages <- function(pkg){
1523457776202:cat("Please wait a moment! Checking for required packages... ")
1523457776203:cat("Done!\n")
1523457776204:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1523457776204:if (length(new.pkg)) {
1523457776205:cat("Installing new packages... ")
1523457776205:install.packages(new.pkg, dependencies = TRUE,
1523457776206:repos="http://cran.rstudio.com/")
1523457776206:cat("Done!\n")
1523457776207:}
1523457776207:cat("Loading packages... \n")
1523457776208:sapply(pkg, require, character.only = TRUE)
1523457776208:cat("Done!\n")
1523457776209:}
1523457776210:requiredPackages <- c("dplyr", "readr", "ggpubr", "RColorBrewer", "gridExtra",
1523457776210:"extrafont", "grid")
1523457776211:installAndLoadPackages(requiredPackages)
1523457776217:# Sources -----------------------------------------------------------------
1523457776218:# Loading Data ------------------------------------------------------------
1523457776218:inFile   <- "data/typer/stringMLST-comparisons.tsv"
1523457776219:compData <- read_tsv(inFile)
1523457776228:largerSchemesData <- read_tsv("data/typer/sting_vs_stringmlst.tsv")
1523457776239:# General configuration ---------------------------------------------------
1523457776239:customPalette <- c("#0a4f75","#91bbe4","#d7e4f5")
1523457776240:customPalette <- rev(brewer.pal(n = 7, name = "Paired"))
1523457776242:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#c81837"))
1523457776242:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#33A02C"))
1523457776243:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "gray50"))
1523457776243:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#86827F"))
1523457776244:customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#e8702a", "#edc374", "#faebd7", "#86827F"))
1523457776245:customPalette <- c('#86827F','#faebd7','#edc374','#e8702a','#d7e4f5','#91bbe4','#0a4f75')
1523457776247:width            <- 9
1523457776248:height           <- width * 0.618
1523457776249:lineSize         <- 0.5
1523457776250:axisColor        <- "#666666"
1523457776251:gridColor        <- "#cccccc"
1523457776252:baseTextSize     <- 18
1523457776253:barAnnotTextSize <- 4
1523457776254:# baseFontFamily   <- "Helvetica"
1523457776255:baseFontFamily   <- "Arial"
1523457776256:baseFontFamily   <- "HelveticaNeueLT Com 45 Lt"
1523457776257:baseFontFamily   <- "HelveticaNeueLT Std Lt"
1523457776258:publicationTheme <- list(
1523457776259:theme_pubr() +
1523457776259:theme(
1523457776260:axis.line.y  = element_blank(),
1523457776260:axis.text    = element_text(size = baseTextSize * 0.875,
1523457776261:family = baseFontFamily,
1523457776262:color = "black"),
1523457776262:axis.title.y = element_text(margin=margin(1, 10, 1, 1, "mm")),
1523457776263:axis.ticks.y = element_blank(),
1523457776264:axis.title   = element_text(size = baseTextSize),
1523457776264:panel.grid.major.x = element_line(colour = gridColor,
1523457776265:size = lineSize),
1523457776266:plot.margin = margin(8, 20, 24, 8, "mm"),
1523457776266:text = element_text(size = baseTextSize,
1523457776267:family = baseFontFamily)
1523457776268:)
1523457776268:)
1523457776282:# Preparing data ----------------------------------------------------------
1523457776282:toolNameLevels <- compData$Tool_Name[c(6,4,5,7,3,2,1)]
1523457776284:dataToPlot <- compData %>%
1523457776284:arrange(Alleles) %>%
1523457776285:mutate(Tool_Name = factor(Tool_Name, toolNameLevels))
1523457776290:# Correct Predictions Plot ------------------------------------------------
1523457776290:predPlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Alleles)) +
1523457776291:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523457776291:stat = "identity", position = position_dodge(width=0.9),
1523457776292:show.legend = F) +
1523457776292:scale_y_continuous(expand = c(0, 0), position = "top") +
1523457776292:scale_fill_manual(values = customPalette) +
1523457776293:publicationTheme +
1523457776293:labs(x = "Typing Tool",
1523457776293:y = "Correct Alleles (%)\n") +
1523457776294:coord_flip()
1523457776304:predPlot
1523457776500:ggsave(filename = "sources/STing_vs_others.prediction.png", plot = predPlot,
1523457776500:width = 8, height = 6)
1523457776871:# Time Plot ---------------------------------------------------------------
1523457776871:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523457776872:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523457777243:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523457777243:geom_hline(data = annotationData, aes(yintercept = timeMarks),
1523457777244:size = lineSize/1.5, color = gridColor) +
1523457777244:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523457777244:stat = "identity", position = position_dodge(width=0.9),
1523457777245:show.legend = F) +
1523457777245:scale_y_log10(expand = c(0, 0), position = "top") +
1523457777245:scale_fill_manual(values = customPalette) +
1523457777246:publicationTheme +
1523457777246:labs(x = "Typing Tool",
1523457777246:y = "Run Time (s)\n") +
1523457777247:coord_flip()
1523457777256:# Add annotation times
1523457777257:for (i in 1:nrow(annotationData)) {
1523457777257:timePlot <- timePlot + annotation_custom(
1523457777258:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523457777258:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523457777258:col = "#222222")),
1523457777259:ymin = log10(annotationData$timeMarks[i]),
1523457777259:ymax = log10(annotationData$timeMarks[i]),
1523457777259:xmin = 0.35,
1523457777260:xmax = 0.35)
1523457777260:}
1523457777279:# Remove clipping
1523457777279:gt <- ggplot_gtable(ggplot_build(timePlot))
1523457777424:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523457777424:grid.draw(gt)
1523457777477:ggsave(filename = "sources/STing_vs_others.time.png", plot = gt,
1523457777478:width = 8, height = 6)
1523457777783:# Larger schemes ----------------------------------------------------------
1523457777783:applicationLevels <- c("STing - Fast", "STing - Sensitive", "stringMLST")
1523457777785:# Larger schemes - preparing data------------------------------------------
1523457777785:(largerDataToPlot <- largerSchemesData %>%
1523457777786:filter(Scheme == "rMLST" | Scheme == "cgMLST") %>%
1523457777786:arrange(desc(Scheme), Application) %>%
1523457777786:# mutate(Species_scheme = as.factor(paste(Species, "-", Scheme)))
1523457777787:# mutate(Application_Scheme = factor(paste(Species, "-", Scheme)), applicationLevels))
1523457777787:mutate(Application = factor(Application, rev(applicationLevels)))
1523457777787:)
1523457778219:# Larger Schemes - Correct Predictions-------------------------------------
1523457778219:# customPalette <- c('#86827F','#faebd7','#edc374','#e8702a','#d7e4f5','#91bbe4','#0a4f75')
1523457778220:customPalette <- c('#0a4f75','#91bbe4','#d7e4f5')
1523457778221:(
1523457778221:lsPredPlot <- ggplot(largerDataToPlot, aes(x = Application, y = Correct_Alleles)) +
1523457778222:# geom_bar(aes(fill = Application),
1523457778222:# stat = "identity", position = position_dodge(width = 0.9)) +
1523457778223:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523457778223:stat = "identity", position = position_dodge(width=0.9)) +
1523457778224:# show.legend = F) +
1523457778224:scale_y_continuous(limits = c(0, 100), expand = c(0, 0), position = "top") +
1523457778224:# scale_fill_manual(values = rev(customPalette)) +
1523457778225:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523457778225:publicationTheme +
1523457778225:labs(x = "Typing Tool", #"Typing Scheme",
1523457778226:y = "Correct Alleles (%)\n") +
1523457778226:coord_flip()
1523457778226:)
1523457778503:ggsave(filename = "sources/STing_vs_others.larger_schemes.prediction.png", plot = lsPredPlot,
1523457778503:width = 8, height = 4)
1523457778838:# Larger schemes - Run Time -----------------------------------------------
1523457778838:annotationData <- data.frame(timeMarks = c(60, 15*60, 60*60, 12*60*60),
1523457778839:labels = c("1 min", "15 min", "1 hour", "12 hours"))
1523457779138:(
1523457779138:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Application, y = Time)) +
1523457779138:geom_hline(data = annotationData, aes(yintercept = timeMarks),
1523457779139:size = lineSize/1.5, color = gridColor) +
1523457779139:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523457779140:stat = "identity", position = position_dodge(width=0.9)) +
1523457779140:# show.legend = F) +
1523457779140:scale_y_log10(expand = c(0, 0), position = "top", limits = c(1, 100000),
1523457779141:breaks = c(1, 100, 1000, 10000, 100000),
1523457779141:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523457779141:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523457779142:publicationTheme +
1523457779142:labs(x = "Typing Scheme",
1523457779142:y = "Run Time (s)\n") +
1523457779143:coord_flip()
1523457779143:)
1523457779481:# Add annotation times
1523457779481:for (i in 1:nrow(annotationData)) {
1523457779481:lsTimePlot <- lsTimePlot + annotation_custom(
1523457779482:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523457779482:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523457779482:col = "#222222")),
1523457779483:ymin = log10(annotationData$timeMarks[i]),
1523457779483:ymax = log10(annotationData$timeMarks[i]),
1523457779483:xmin = 0.4,
1523457779484:xmax = 0.4)
1523457779484:}
1523457779506:# Remove clipping
1523457779623:gt <- ggplot_gtable(ggplot_build(lsTimePlot))
1523457780338:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523457780339:grid.draw(gt)
1523457780423:ggsave(filename = "sources/STing_vs_others.larger_schemes.time.png", plot = gt,
1523457780424:width = 8, height = 4)
1523457780666:# Larger Schemes - RAM ----------------------------------------------------
1523457780667:annotationData <- data.frame(ramMarks = c(1000, 5000, 10000, 100000),
1523457780667:labels = c("1 GB", "5 GB", "10 GB", "100 GB"))
1523457781157:(
1523457781158:lsRamPlot <- ggplot(largerDataToPlot, aes(x = Application, y = RAM)) +
1523457781158:geom_hline(data = annotationData[2,], aes(yintercept = ramMarks),
1523457781158:size = lineSize/1.5, color = gridColor) +
1523457781159:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523457781159:stat = "identity", position = position_dodge(width=0.9)) +
1523457781159:# show.legend = F) +
1523457781160:scale_y_log10(expand = c(0, 0), position = "top",
1523457781160:breaks = c(1, 100, 1000, 10000, 100000),
1523457781160:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523457781161:# scale_fill_manual(values = rev(customPalette)) +
1523457781161:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523457781161:publicationTheme +
1523457781162:labs(x = "Typing Tool",#x = "Typing Scheme",
1523457781162:y = "Memory (RAM) consumption (MB)\n") +
1523457781163:coord_flip()
1523457781163:)
1523457781444:# Add annotation times
1523457781445:for (i in 1:nrow(annotationData)) {
1523457781445:lsRamPlot <- lsRamPlot + annotation_custom(
1523457781445:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523457781446:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523457781446:col = "#222222")),
1523457781446:ymin = log10(annotationData$ramMarks[i]),
1523457781447:ymax = log10(annotationData$ramMarks[i]),
1523457781447:xmin = 0.35,
1523457781447:xmax = 0.35)
1523457781448:}
1523457781465:# Remove clipping
1523457781465:gt <- ggplot_gtable(ggplot_build(lsRamPlot))
1523457782450:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523457782450:grid.draw(gt)
1523457782541:ggsave(filename = "sources/STing_vs_others.larger_schemes.ram.png", plot = gt,
1523457782541:width = 8, height = 4)
1523457951577:# Larger schemes - Run Time -----------------------------------------------
1523457951578:annotationData <- data.frame(timeMarks = c(60, 15*60, 60*60, 12*60*60),
1523457951579:labels = c("1 min", "15 min", "1 hour", "12 hours"))
1523457952093:(
1523457952093:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Application, y = Time)) +
1523457952094:geom_hline(data = annotationData, aes(yintercept = timeMarks),
1523457952094:size = lineSize/1.5, color = gridColor) +
1523457952094:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523457952095:stat = "identity", position = position_dodge(width=0.9)) +
1523457952095:geom_text(position = position_dodge(width = 0.85),
1523457952096:hjust = 1.2, vjust = 0.5,
1523457952096:size = barAnnotTextSize,
1523457952097:# color = "white",
1523457952097:parse = TRUE,
1523457952098:# aes(label = Time_Fold, group = Application))
1523457952098:aes(label = paste0("bolditalic('",Time_Fold,"x')"),
1523457952099:group = Application#,
1523457952099:# family = "HelveticaNeueLT Com 45 Lt"
1523457952100:)) +
1523457952100:# show.legend = F) +
1523457952101:scale_y_log10(expand = c(0, 0), position = "top", limits = c(1, 100000),
1523457952101:breaks = c(1, 100, 1000, 10000, 100000),
1523457952102:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523457952103:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523457952103:publicationTheme +
1523457952104:labs(x = "Typing Scheme",
1523457952104:y = "Run Time (s)\n") +
1523457952105:coord_flip()
1523457952105:)
1523457996705:(
1523457996705:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Application, y = Time)) +
1523457996705:geom_hline(data = annotationData, aes(yintercept = timeMarks),
1523457996706:size = lineSize/1.5, color = gridColor) +
1523457996706:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523457996706:stat = "identity", position = position_dodge(width=0.9)) +
1523457996707:geom_text(position = position_dodge(width = 0.9),
1523457996707:hjust = 1.2, vjust = 0.5,
1523457996708:size = barAnnotTextSize,
1523457996708:# color = "white",
1523457996709:parse = TRUE,
1523457996710:# aes(label = Time_Fold, group = Application))
1523457996711:aes(label = paste0("bolditalic('",Time_Fold,"x')"),
1523457996711:group = Application#,
1523457996711:# family = "HelveticaNeueLT Com 45 Lt"
1523457996712:)) +
1523457996712:# show.legend = F) +
1523457996712:scale_y_log10(expand = c(0, 0), position = "top", limits = c(1, 100000),
1523457996713:breaks = c(1, 100, 1000, 10000, 100000),
1523457996713:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523457996714:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523457996714:publicationTheme +
1523457996714:labs(x = "Typing Scheme",
1523457996715:y = "Run Time (s)\n") +
1523457996715:coord_flip()
1523457996716:)
1523458022020:(
1523458022021:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Application, y = Time)) +
1523458022021:geom_hline(data = annotationData, aes(yintercept = timeMarks),
1523458022022:size = lineSize/1.5, color = gridColor) +
1523458022022:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523458022023:stat = "identity", position = position_dodge(width=0.9)) +
1523458022024:geom_text(position = position_dodge(width = 0.9),
1523458022024:hjust = 1.2, vjust = 0.5,
1523458022025:size = barAnnotTextSize,
1523458022025:# color = "white",
1523458022026:parse = TRUE,
1523458022026:# aes(label = Time_Fold, group = Application))
1523458022027:aes(label = paste0("bolditalic('",Time_Fold,"x')"),
1523458022027:group = Scheme#,
1523458022028:# family = "HelveticaNeueLT Com 45 Lt"
1523458022028:)) +
1523458022029:# show.legend = F) +
1523458022029:scale_y_log10(expand = c(0, 0), position = "top", limits = c(1, 100000),
1523458022030:breaks = c(1, 100, 1000, 10000, 100000),
1523458022030:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523458022031:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523458022032:publicationTheme +
1523458022033:labs(x = "Typing Scheme",
1523458022033:y = "Run Time (s)\n") +
1523458022034:coord_flip()
1523458022034:)
1523458097275:largerDataToPlot
1523458102135:largerDataToPlot
1523458155645:largerDataToPlot %>%
1523458155646:filter(Application != "stringMLST")
1523458173477:foldData <- largerDataToPlot %>%
1523458173477:filter(Application != "stringMLST")
1523458176289:foldData
1523458201339:foldData <- largerDataToPlot %>%
1523458201340:filter(Application != "stringMLST")
1523458202005:(
1523458202005:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Application, y = Time)) +
1523458202006:geom_hline(data = annotationData, aes(yintercept = timeMarks),
1523458202007:size = lineSize/1.5, color = gridColor) +
1523458202007:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523458202008:stat = "identity", position = position_dodge(width=0.9)) +
1523458202008:geom_text(data = foldData, position = position_dodge(width = 0.9),
1523458202009:hjust = 1.2, vjust = 0.5,
1523458202010:size = barAnnotTextSize,
1523458202010:# color = "white",
1523458202011:parse = TRUE,
1523458202012:# aes(label = Time_Fold, group = Application))
1523458202012:aes(label = paste0("bolditalic('",Time_Fold,"x')"),
1523458202013:group = Scheme#,
1523458202014:# family = "HelveticaNeueLT Com 45 Lt"
1523458202014:)) +
1523458202015:# show.legend = F) +
1523458202016:scale_y_log10(expand = c(0, 0), position = "top", limits = c(1, 100000),
1523458202017:breaks = c(1, 100, 1000, 10000, 100000),
1523458202017:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523458202018:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523458202019:publicationTheme +
1523458202019:labs(x = "Typing Scheme",
1523458202020:y = "Run Time (s)\n") +
1523458202021:coord_flip()
1523458202021:)
1523458265247:# Larger Schemes - RAM ----------------------------------------------------
1523458265247:annotationData <- data.frame(ramMarks = c(1000, 5000, 10000, 100000),
1523458265248:labels = c("1 GB", "5 GB", "10 GB", "100 GB"))
1523458265832:(
1523458265833:lsRamPlot <- ggplot(largerDataToPlot, aes(x = Application, y = RAM)) +
1523458265833:geom_hline(data = annotationData[2,], aes(yintercept = ramMarks),
1523458265834:size = lineSize/1.5, color = gridColor) +
1523458265834:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523458265835:stat = "identity", position = position_dodge(width=0.9)) +
1523458265835:# show.legend = F) +
1523458265836:geom_text(data = foldData, position = position_dodge(width = 0.9),
1523458265836:hjust = 1.2, vjust = 0.5,
1523458265836:size = barAnnotTextSize,
1523458265837:# color = "white",
1523458265837:parse = TRUE,
1523458265837:# aes(label = Time_Fold, group = Application))
1523458265838:es(label = paste0("bolditalic('",RAM_Fold,"x')"),
1523458265838:group = Scheme#,
1523458265839:# family = "HelveticaNeueLT Com 45 Lt"
1523458265839:)) +
1523458265840:scale_y_log10(expand = c(0, 0), position = "top",
1523458265840:breaks = c(1, 100, 1000, 10000, 100000),
1523458265840:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523458265841:# scale_fill_manual(values = rev(customPalette)) +
1523458265841:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523458265842:publicationTheme +
1523458265843:labs(x = "Typing Tool",#x = "Typing Scheme",
1523458265843:y = "Memory (RAM) consumption (MB)\n") +
1523458265844:coord_flip()
1523458265844:)
1523458277935:(
1523458277935:lsRamPlot <- ggplot(largerDataToPlot, aes(x = Application, y = RAM)) +
1523458277936:geom_hline(data = annotationData[2,], aes(yintercept = ramMarks),
1523458277936:size = lineSize/1.5, color = gridColor) +
1523458277937:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523458277937:stat = "identity", position = position_dodge(width=0.9)) +
1523458277938:# show.legend = F) +
1523458277938:geom_text(data = foldData, position = position_dodge(width = 0.9),
1523458277938:hjust = 1.2, vjust = 0.5,
1523458277939:size = barAnnotTextSize,
1523458277939:# color = "white",
1523458277940:parse = TRUE,
1523458277940:# aes(label = Time_Fold, group = Application))
1523458277940:aes(label = paste0("bolditalic('",RAM_Fold,"x')"),
1523458277941:group = Scheme#,
1523458277941:# family = "HelveticaNeueLT Com 45 Lt"
1523458277941:)) +
1523458277942:scale_y_log10(expand = c(0, 0), position = "top",
1523458277942:breaks = c(1, 100, 1000, 10000, 100000),
1523458277943:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523458277943:# scale_fill_manual(values = rev(customPalette)) +
1523458277944:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523458277944:publicationTheme +
1523458277944:labs(x = "Typing Tool",#x = "Typing Scheme",
1523458277945:y = "Memory (RAM) consumption (MB)\n") +
1523458277946:coord_flip()
1523458277946:)
1523458312196:10/17
1523458429189:# Correct Predictions Plot ------------------------------------------------
1523458429189:predPlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Alleles)) +
1523458429190:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523458429190:stat = "identity", position = position_dodge(width=0.9),
1523458429191:show.legend = F) +
1523458429191:scale_y_continuous(expand = c(0, 0), position = "top") +
1523458429192:scale_fill_manual(values = customPalette) +
1523458429192:publicationTheme +
1523458429193:labs(x = "Typing Tool",
1523458429193:y = "Correct Alleles (%)\n") +
1523458429194:coord_flip()
1523458429814:predPlot
1523458430303:ggsave(filename = "sources/STing_vs_others.prediction.png", plot = predPlot,
1523458430304:width = 8, height = 8*0.61803)
1523458436720:customPalette
1523458450402:# STing vs other sequence typing software
1523458450403:# Install an load packages ------------------------------------------------
1523458450403:installAndLoadPackages <- function(pkg){
1523458450403:cat("Please wait a moment! Checking for required packages... ")
1523458450404:cat("Done!\n")
1523458450404:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1523458450404:if (length(new.pkg)) {
1523458450405:cat("Installing new packages... ")
1523458450405:install.packages(new.pkg, dependencies = TRUE,
1523458450405:repos="http://cran.rstudio.com/")
1523458450406:cat("Done!\n")
1523458450407:}
1523458450407:cat("Loading packages... \n")
1523458450408:sapply(pkg, require, character.only = TRUE)
1523458450408:cat("Done!\n")
1523458450408:}
1523458450409:requiredPackages <- c("dplyr", "readr", "ggpubr", "RColorBrewer", "gridExtra",
1523458450409:"extrafont", "grid")
1523458450410:installAndLoadPackages(requiredPackages)
1523458450415:# Sources -----------------------------------------------------------------
1523458450415:# Loading Data ------------------------------------------------------------
1523458450415:inFile   <- "data/typer/stringMLST-comparisons.tsv"
1523458450416:compData <- read_tsv(inFile)
1523458450419:largerSchemesData <- read_tsv("data/typer/sting_vs_stringmlst.tsv")
1523458450424:# General configuration ---------------------------------------------------
1523458450425:customPalette <- c("#0a4f75","#91bbe4","#d7e4f5")
1523458450425:customPalette <- rev(brewer.pal(n = 7, name = "Paired"))
1523458450426:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#c81837"))
1523458450426:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#33A02C"))
1523458450426:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "gray50"))
1523458450426:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#86827F"))
1523458450427:customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#e8702a", "#edc374", "#faebd7", "#86827F"))
1523458450427:customPalette <- c('#86827F','#faebd7','#edc374','#e8702a','#d7e4f5','#91bbe4','#0a4f75')
1523458450428:width            <- 9
1523458450429:height           <- width * 0.618
1523458450429:lineSize         <- 0.5
1523458450430:axisColor        <- "#666666"
1523458450430:gridColor        <- "#cccccc"
1523458450431:baseTextSize     <- 18
1523458450431:barAnnotTextSize <- 4
1523458450432:# baseFontFamily   <- "Helvetica"
1523458450432:baseFontFamily   <- "Arial"
1523458450432:baseFontFamily   <- "HelveticaNeueLT Com 45 Lt"
1523458450433:baseFontFamily   <- "HelveticaNeueLT Std Lt"
1523458450434:publicationTheme <- list(
1523458450435:theme_pubr() +
1523458450435:theme(
1523458450436:axis.line.y  = element_blank(),
1523458450436:axis.text    = element_text(size = baseTextSize * 0.875,
1523458450437:family = baseFontFamily,
1523458450438:color = "black"),
1523458450438:axis.title.y = element_text(margin=margin(1, 10, 1, 1, "mm")),
1523458450438:axis.ticks.y = element_blank(),
1523458450439:axis.title   = element_text(size = baseTextSize),
1523458450439:panel.grid.major.x = element_line(colour = gridColor,
1523458450439:size = lineSize),
1523458450440:plot.margin = margin(8, 20, 24, 8, "mm"),
1523458450440:text = element_text(size = baseTextSize,
1523458450441:family = baseFontFamily)
1523458450441:)
1523458450441:)
1523458450448:# Preparing data ----------------------------------------------------------
1523458450448:toolNameLevels <- compData$Tool_Name[c(6,4,5,7,3,2,1)]
1523458450449:dataToPlot <- compData %>%
1523458450449:arrange(Alleles) %>%
1523458450449:mutate(Tool_Name = factor(Tool_Name, toolNameLevels))
1523458450452:# Correct Predictions Plot ------------------------------------------------
1523458450452:predPlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Alleles)) +
1523458450453:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523458450453:stat = "identity", position = position_dodge(width=0.9),
1523458450453:show.legend = F) +
1523458450453:scale_y_continuous(expand = c(0, 0), position = "top") +
1523458450454:scale_fill_manual(values = customPalette) +
1523458450454:publicationTheme +
1523458450454:labs(x = "Typing Tool",
1523458450455:y = "Correct Alleles (%)\n") +
1523458450455:coord_flip()
1523458450461:predPlot
1523458450704:ggsave(filename = "sources/STing_vs_others.prediction.png", plot = predPlot,
1523458450704:width = 8, height = 8*0.61803)
1523458451149:# Time Plot ---------------------------------------------------------------
1523458451150:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523458451150:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523458451353:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523458451353:geom_hline(data = annotationData, aes(yintercept = timeMarks),
1523458451353:size = lineSize/1.5, color = gridColor) +
1523458451354:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523458451354:stat = "identity", position = position_dodge(width=0.9),
1523458451354:show.legend = F) +
1523458451355:scale_y_log10(expand = c(0, 0), position = "top") +
1523458451355:scale_fill_manual(values = customPalette) +
1523458451355:publicationTheme +
1523458451356:labs(x = "Typing Tool",
1523458451356:y = "Run Time (s)\n") +
1523458451356:coord_flip()
1523458451364:# Add annotation times
1523458451365:for (i in 1:nrow(annotationData)) {
1523458451365:timePlot <- timePlot + annotation_custom(
1523458451365:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523458451365:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523458451366:col = "#222222")),
1523458451366:ymin = log10(annotationData$timeMarks[i]),
1523458451366:ymax = log10(annotationData$timeMarks[i]),
1523458451367:xmin = 0.35,
1523458451367:xmax = 0.35)
1523458451367:}
1523458451391:# Remove clipping
1523458451391:gt <- ggplot_gtable(ggplot_build(timePlot))
1523458451576:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523458451577:grid.draw(gt)
1523458451720:ggsave(filename = "sources/STing_vs_others.time.png", plot = gt,
1523458451720:width = 8, height = 8*0.61803)
1523458473184:# STing vs other sequence typing software
1523458473184:# Install an load packages ------------------------------------------------
1523458473185:installAndLoadPackages <- function(pkg){
1523458473185:cat("Please wait a moment! Checking for required packages... ")
1523458473186:cat("Done!\n")
1523458473186:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1523458473187:if (length(new.pkg)) {
1523458473187:cat("Installing new packages... ")
1523458473188:install.packages(new.pkg, dependencies = TRUE,
1523458473188:repos="http://cran.rstudio.com/")
1523458473189:cat("Done!\n")
1523458473189:}
1523458473189:cat("Loading packages... \n")
1523458473190:sapply(pkg, require, character.only = TRUE)
1523458473190:cat("Done!\n")
1523458473191:}
1523458473192:requiredPackages <- c("dplyr", "readr", "ggpubr", "RColorBrewer", "gridExtra",
1523458473192:"extrafont", "grid")
1523458473195:installAndLoadPackages(requiredPackages)
1523458473203:# Sources -----------------------------------------------------------------
1523458473203:# Loading Data ------------------------------------------------------------
1523458473204:inFile   <- "data/typer/stringMLST-comparisons.tsv"
1523458473205:compData <- read_tsv(inFile)
1523458473209:largerSchemesData <- read_tsv("data/typer/sting_vs_stringmlst.tsv")
1523458473214:# General configuration ---------------------------------------------------
1523458473215:customPalette <- c("#0a4f75","#91bbe4","#d7e4f5")
1523458473215:customPalette <- rev(brewer.pal(n = 7, name = "Paired"))
1523458473216:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#c81837"))
1523458473216:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#33A02C"))
1523458473216:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "gray50"))
1523458473217:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#86827F"))
1523458473217:customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#e8702a", "#edc374", "#faebd7", "#86827F"))
1523458473218:customPalette <- c('#86827F','#faebd7','#edc374','#e8702a','#d7e4f5','#91bbe4','#0a4f75')
1523458473219:width            <- 9
1523458473219:height           <- width * 0.618
1523458473220:lineSize         <- 0.5
1523458473220:axisColor        <- "#666666"
1523458473221:gridColor        <- "#cccccc"
1523458473221:baseTextSize     <- 18
1523458473222:barAnnotTextSize <- 4
1523458473222:# baseFontFamily   <- "Helvetica"
1523458473222:baseFontFamily   <- "Arial"
1523458473223:baseFontFamily   <- "HelveticaNeueLT Com 45 Lt"
1523458473223:baseFontFamily   <- "HelveticaNeueLT Std Lt"
1523458473224:publicationTheme <- list(
1523458473224:theme_pubr() +
1523458473225:theme(
1523458473225:axis.line.y  = element_blank(),
1523458473225:axis.text    = element_text(size = baseTextSize * 0.875,
1523458473226:family = baseFontFamily,
1523458473226:color = "black"),
1523458473226:axis.title.y = element_text(margin=margin(1, 10, 1, 1, "mm")),
1523458473227:axis.ticks.y = element_blank(),
1523458473227:axis.title   = element_text(size = baseTextSize),
1523458473228:panel.grid.major.x = element_line(colour = gridColor,
1523458473228:size = lineSize),
1523458473228:plot.margin = margin(8, 20, 24, 8, "mm"),
1523458473229:text = element_text(size = baseTextSize,
1523458473229:family = baseFontFamily)
1523458473229:)
1523458473230:)
1523458473237:# Preparing data ----------------------------------------------------------
1523458473238:toolNameLevels <- compData$Tool_Name[c(6,4,5,7,3,2,1)]
1523458473238:dataToPlot <- compData %>%
1523458473239:arrange(Alleles) %>%
1523458473239:mutate(Tool_Name = factor(Tool_Name, toolNameLevels))
1523458473241:# Correct Predictions Plot ------------------------------------------------
1523458473242:predPlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Alleles)) +
1523458473242:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.8,
1523458473242:stat = "identity", position = position_dodge(width=0.9),
1523458473243:show.legend = F) +
1523458473243:scale_y_continuous(expand = c(0, 0), position = "top") +
1523458473244:scale_fill_manual(values = customPalette) +
1523458473244:publicationTheme +
1523458473244:labs(x = "Typing Tool",
1523458473245:y = "Correct Alleles (%)\n") +
1523458473245:coord_flip()
1523458473252:predPlot
1523458473504:ggsave(filename = "sources/STing_vs_others.prediction.png", plot = predPlot,
1523458473504:width = 8, height = 8*0.61803)
1523458474049:# Time Plot ---------------------------------------------------------------
1523458474049:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523458474050:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523458474297:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523458474298:geom_hline(data = annotationData, aes(yintercept = timeMarks),
1523458474299:size = lineSize/1.5, color = gridColor) +
1523458474299:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.7,
1523458474299:stat = "identity", position = position_dodge(width=0.9),
1523458474300:show.legend = F) +
1523458474300:scale_y_log10(expand = c(0, 0), position = "top") +
1523458474301:scale_fill_manual(values = customPalette) +
1523458474301:publicationTheme +
1523458474301:labs(x = "Typing Tool",
1523458474302:y = "Run Time (s)\n") +
1523458474302:coord_flip()
1523458474312:# Add annotation times
1523458474312:for (i in 1:nrow(annotationData)) {
1523458474313:timePlot <- timePlot + annotation_custom(
1523458474314:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523458474315:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523458474316:col = "#222222")),
1523458474317:ymin = log10(annotationData$timeMarks[i]),
1523458474318:ymax = log10(annotationData$timeMarks[i]),
1523458474326:xmin = 0.35,
1523458474328:xmax = 0.35)
1523458474330:}
1523458474372:# Remove clipping
1523458474372:gt <- ggplot_gtable(ggplot_build(timePlot))
1523458474536:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523458474536:grid.draw(gt)
1523458474688:ggsave(filename = "sources/STing_vs_others.time.png", plot = gt,
1523458474689:width = 8, height = 8*0.61803)
1523458498845:# STing vs other sequence typing software
1523458498846:# Install an load packages ------------------------------------------------
1523458498847:installAndLoadPackages <- function(pkg){
1523458498847:cat("Please wait a moment! Checking for required packages... ")
1523458498848:cat("Done!\n")
1523458498848:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1523458498848:if (length(new.pkg)) {
1523458498849:cat("Installing new packages... ")
1523458498849:install.packages(new.pkg, dependencies = TRUE,
1523458498850:repos="http://cran.rstudio.com/")
1523458498850:cat("Done!\n")
1523458498851:}
1523458498851:cat("Loading packages... \n")
1523458498852:sapply(pkg, require, character.only = TRUE)
1523458498852:cat("Done!\n")
1523458498852:}
1523458498853:requiredPackages <- c("dplyr", "readr", "ggpubr", "RColorBrewer", "gridExtra",
1523458498854:"extrafont", "grid")
1523458498854:installAndLoadPackages(requiredPackages)
1523458498859:# Sources -----------------------------------------------------------------
1523458498860:# Loading Data ------------------------------------------------------------
1523458498860:inFile   <- "data/typer/stringMLST-comparisons.tsv"
1523458498860:compData <- read_tsv(inFile)
1523458498865:largerSchemesData <- read_tsv("data/typer/sting_vs_stringmlst.tsv")
1523458498872:# General configuration ---------------------------------------------------
1523458498872:customPalette <- c("#0a4f75","#91bbe4","#d7e4f5")
1523458498873:customPalette <- rev(brewer.pal(n = 7, name = "Paired"))
1523458498874:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#c81837"))
1523458498875:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#33A02C"))
1523458498875:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "gray50"))
1523458498876:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#86827F"))
1523458498876:customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#e8702a", "#edc374", "#faebd7", "#86827F"))
1523458498877:customPalette <- c('#86827F','#faebd7','#edc374','#e8702a','#d7e4f5','#91bbe4','#0a4f75')
1523458498879:width            <- 9
1523458498879:height           <- width * 0.618
1523458498880:lineSize         <- 0.5
1523458498881:axisColor        <- "#666666"
1523458498882:gridColor        <- "#cccccc"
1523458498883:baseTextSize     <- 18
1523458498883:barAnnotTextSize <- 4
1523458498884:# baseFontFamily   <- "Helvetica"
1523458498884:baseFontFamily   <- "Arial"
1523458498885:baseFontFamily   <- "HelveticaNeueLT Com 45 Lt"
1523458498886:baseFontFamily   <- "HelveticaNeueLT Std Lt"
1523458498888:publicationTheme <- list(
1523458498888:theme_pubr() +
1523458498889:theme(
1523458498889:axis.line.y  = element_blank(),
1523458498890:axis.text    = element_text(size = baseTextSize * 0.875,
1523458498890:family = baseFontFamily,
1523458498891:color = "black"),
1523458498891:axis.title.y = element_text(margin=margin(1, 10, 1, 1, "mm")),
1523458498892:axis.ticks.y = element_blank(),
1523458498892:axis.title   = element_text(size = baseTextSize),
1523458498893:panel.grid.major.x = element_line(colour = gridColor,
1523458498894:size = lineSize),
1523458498895:plot.margin = margin(8, 20, 24, 8, "mm"),
1523458498895:text = element_text(size = baseTextSize,
1523458498896:family = baseFontFamily)
1523458498896:)
1523458498897:)
1523458498905:# Preparing data ----------------------------------------------------------
1523458498906:toolNameLevels <- compData$Tool_Name[c(6,4,5,7,3,2,1)]
1523458498907:dataToPlot <- compData %>%
1523458498907:arrange(Alleles) %>%
1523458498907:mutate(Tool_Name = factor(Tool_Name, toolNameLevels))
1523458498910:# Correct Predictions Plot ------------------------------------------------
1523458498911:predPlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Alleles)) +
1523458498911:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.8,
1523458498911:stat = "identity", position = position_dodge(width=0.9),
1523458498912:show.legend = F) +
1523458498912:scale_y_continuous(expand = c(0, 0), position = "top") +
1523458498912:scale_fill_manual(values = customPalette) +
1523458498913:publicationTheme +
1523458498913:labs(x = "Typing Tool",
1523458498913:y = "Correct Alleles (%)\n") +
1523458498914:coord_flip()
1523458498924:predPlot
1523458499154:ggsave(filename = "sources/STing_vs_others.prediction.png", plot = predPlot,
1523458499155:width = 8, height = 8*0.61803)
1523458499649:# Time Plot ---------------------------------------------------------------
1523458499650:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523458499650:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523458499898:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523458499898:geom_hline(data = annotationData, aes(yintercept = timeMarks),
1523458499899:size = lineSize/1.5, color = gridColor) +
1523458499899:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=0.8,
1523458499900:stat = "identity", position = position_dodge(width=0.9),
1523458499901:show.legend = F) +
1523458499901:scale_y_log10(expand = c(0, 0), position = "top") +
1523458499903:scale_fill_manual(values = customPalette) +
1523458499903:publicationTheme +
1523458499904:labs(x = "Typing Tool",
1523458499905:y = "Run Time (s)\n") +
1523458499905:coord_flip()
1523458499915:# Add annotation times
1523458499915:for (i in 1:nrow(annotationData)) {
1523458499916:timePlot <- timePlot + annotation_custom(
1523458499916:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523458499916:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523458499917:col = "#222222")),
1523458499917:ymin = log10(annotationData$timeMarks[i]),
1523458499918:ymax = log10(annotationData$timeMarks[i]),
1523458499919:xmin = 0.35,
1523458499919:xmax = 0.35)
1523458499920:}
1523458499953:# Remove clipping
1523458499954:gt <- ggplot_gtable(ggplot_build(timePlot))
1523458500166:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523458500167:grid.draw(gt)
1523458500236:ggsave(filename = "sources/STing_vs_others.time.png", plot = gt,
1523458500237:width = 8, height = 8*0.61803)
1523458574890:barWidth         <- 0.8
1523458599947:# STing vs other sequence typing software
1523458599948:# Install an load packages ------------------------------------------------
1523458599949:installAndLoadPackages <- function(pkg){
1523458599949:cat("Please wait a moment! Checking for required packages... ")
1523458599949:cat("Done!\n")
1523458599949:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1523458599950:if (length(new.pkg)) {
1523458599950:cat("Installing new packages... ")
1523458599950:install.packages(new.pkg, dependencies = TRUE,
1523458599951:repos="http://cran.rstudio.com/")
1523458599951:cat("Done!\n")
1523458599951:}
1523458599952:cat("Loading packages... \n")
1523458599952:sapply(pkg, require, character.only = TRUE)
1523458599953:cat("Done!\n")
1523458599953:}
1523458599954:requiredPackages <- c("dplyr", "readr", "ggpubr", "RColorBrewer", "gridExtra",
1523458599955:"extrafont", "grid")
1523458599955:installAndLoadPackages(requiredPackages)
1523458599961:# Sources -----------------------------------------------------------------
1523458599961:# Loading Data ------------------------------------------------------------
1523458599961:inFile   <- "data/typer/stringMLST-comparisons.tsv"
1523458599962:compData <- read_tsv(inFile)
1523458599967:largerSchemesData <- read_tsv("data/typer/sting_vs_stringmlst.tsv")
1523458599975:# General configuration ---------------------------------------------------
1523458599976:customPalette <- c("#0a4f75","#91bbe4","#d7e4f5")
1523458599976:customPalette <- rev(brewer.pal(n = 7, name = "Paired"))
1523458599977:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#c81837"))
1523458599978:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#33A02C"))
1523458599978:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "gray50"))
1523458599979:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#86827F"))
1523458599979:customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#e8702a", "#edc374", "#faebd7", "#86827F"))
1523458599980:customPalette <- c('#86827F','#faebd7','#edc374','#e8702a','#d7e4f5','#91bbe4','#0a4f75')
1523458599982:width            <- 9
1523458599983:height           <- width * 0.618
1523458599984:lineSize         <- 0.5
1523458599984:axisColor        <- "#666666"
1523458599985:gridColor        <- "#cccccc"
1523458599986:baseTextSize     <- 18
1523458599987:barAnnotTextSize <- 4
1523458599987:barWidth         <- 0.8
1523458599988:# baseFontFamily   <- "Helvetica"
1523458599989:baseFontFamily   <- "Arial"
1523458599989:baseFontFamily   <- "HelveticaNeueLT Com 45 Lt"
1523458599990:baseFontFamily   <- "HelveticaNeueLT Std Lt"
1523458599991:publicationTheme <- list(
1523458599992:theme_pubr() +
1523458599992:theme(
1523458599993:axis.line.y  = element_blank(),
1523458599993:axis.text    = element_text(size = baseTextSize * 0.875,
1523458599994:family = baseFontFamily,
1523458599994:color = "black"),
1523458599995:axis.title.y = element_text(margin=margin(1, 10, 1, 1, "mm")),
1523458599995:axis.ticks.y = element_blank(),
1523458599996:axis.title   = element_text(size = baseTextSize),
1523458599996:panel.grid.major.x = element_line(colour = gridColor,
1523458599997:size = lineSize),
1523458599997:plot.margin = margin(8, 20, 24, 8, "mm"),
1523458599998:text = element_text(size = baseTextSize,
1523458599998:family = baseFontFamily)
1523458599999:)
1523458600000:)
1523458600011:# Preparing data ----------------------------------------------------------
1523458600011:toolNameLevels <- compData$Tool_Name[c(6,4,5,7,3,2,1)]
1523458600012:dataToPlot <- compData %>%
1523458600013:arrange(Alleles) %>%
1523458600013:mutate(Tool_Name = factor(Tool_Name, toolNameLevels))
1523458600017:# Correct Predictions Plot ------------------------------------------------
1523458600017:predPlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Alleles)) +
1523458600018:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=barWidth,
1523458600018:stat = "identity", position = position_dodge(width=0.9),
1523458600019:show.legend = F) +
1523458600019:scale_y_continuous(expand = c(0, 0), position = "top") +
1523458600020:scale_fill_manual(values = customPalette) +
1523458600020:publicationTheme +
1523458600021:labs(x = "Typing Tool",
1523458600021:y = "Correct Alleles (%)\n") +
1523458600022:coord_flip()
1523458600031:predPlot
1523458600238:ggsave(filename = "sources/STing_vs_others.prediction.png", plot = predPlot,
1523458600238:width = 8, height = 8*0.61803)
1523458600763:# Time Plot ---------------------------------------------------------------
1523458600764:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523458600764:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523458601013:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523458601014:geom_hline(data = annotationData, aes(yintercept = timeMarks),
1523458601014:size = lineSize/1.5, color = gridColor) +
1523458601014:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=barWidth,
1523458601015:stat = "identity", position = position_dodge(width=0.9),
1523458601015:show.legend = F) +
1523458601015:scale_y_log10(expand = c(0, 0), position = "top") +
1523458601016:scale_fill_manual(values = customPalette) +
1523458601016:publicationTheme +
1523458601017:labs(x = "Typing Tool",
1523458601017:y = "Run Time (s)\n") +
1523458601017:coord_flip()
1523458601030:# Add annotation times
1523458601030:for (i in 1:nrow(annotationData)) {
1523458601031:timePlot <- timePlot + annotation_custom(
1523458601032:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523458601032:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523458601032:col = "#222222")),
1523458601033:ymin = log10(annotationData$timeMarks[i]),
1523458601033:ymax = log10(annotationData$timeMarks[i]),
1523458601033:xmin = 0.35,
1523458601034:xmax = 0.35)
1523458601034:}
1523458601071:# Remove clipping
1523458601072:gt <- ggplot_gtable(ggplot_build(timePlot))
1523458601308:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523458601309:grid.draw(gt)
1523458601720:ggsave(filename = "sources/STing_vs_others.time.png", plot = gt,
1523458601720:width = 8, height = 8*0.61803)
1523458602059:# Larger schemes ----------------------------------------------------------
1523458602060:applicationLevels <- c("STing - Fast", "STing - Sensitive", "stringMLST")
1523458602061:# Larger schemes - preparing data------------------------------------------
1523458602062:(largerDataToPlot <- largerSchemesData %>%
1523458602062:filter(Scheme == "rMLST" | Scheme == "cgMLST") %>%
1523458602063:arrange(desc(Scheme), Application) %>%
1523458602063:# mutate(Species_scheme = as.factor(paste(Species, "-", Scheme)))
1523458602064:# mutate(Application_Scheme = factor(paste(Species, "-", Scheme)), applicationLevels))
1523458602065:mutate(Application = factor(Application, rev(applicationLevels)))
1523458602066:)
1523458602874:# Larger Schemes - Correct Predictions-------------------------------------
1523458602874:# customPalette <- c('#86827F','#faebd7','#edc374','#e8702a','#d7e4f5','#91bbe4','#0a4f75')
1523458602875:# customPalette <- c('#0a4f75','#91bbe4','#d7e4f5')
1523458602875:(
1523458602875:lsPredPlot <- ggplot(largerDataToPlot, aes(x = Application, y = Correct_Alleles)) +
1523458602876:# geom_bar(aes(fill = Application),
1523458602876:# stat = "identity", position = position_dodge(width = 0.9)) +
1523458602876:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523458602877:stat = "identity", position = position_dodge(width=0.9)) +
1523458602877:# show.legend = F) +
1523458602877:scale_y_continuous(limits = c(0, 100), expand = c(0, 0), position = "top") +
1523458602878:# scale_fill_manual(values = rev(customPalette)) +
1523458602878:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523458602878:publicationTheme +
1523458602879:labs(x = "Typing Tool", #"Typing Scheme",
1523458602879:y = "Correct Alleles (%)\n") +
1523458602880:coord_flip()
1523458602880:)
1523458603224:ggsave(filename = "sources/STing_vs_others.larger_schemes.prediction.png", plot = lsPredPlot,
1523458603225:width = 8, height = 8*0.61803)
1523458603759:# Larger schemes - Run Time -----------------------------------------------
1523458603759:annotationData <- data.frame(timeMarks = c(60, 15*60, 60*60, 12*60*60),
1523458603760:labels = c("1 min", "15 min", "1 hour", "12 hours"))
1523458604031:foldData <- largerDataToPlot %>%
1523458604032:filter(Application != "stringMLST")
1523458604034:(
1523458604034:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Application, y = Time)) +
1523458604035:geom_hline(data = annotationData, aes(yintercept = timeMarks),
1523458604035:size = lineSize/1.5, color = gridColor) +
1523458604035:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523458604036:stat = "identity", position = position_dodge(width=0.9)) +
1523458604036:geom_text(data = foldData, position = position_dodge(width = 0.9),
1523458604037:hjust = 1.2, vjust = 0.5,
1523458604037:size = barAnnotTextSize,
1523458604038:# color = "white",
1523458604038:parse = TRUE,
1523458604038:# aes(label = Time_Fold, group = Application))
1523458604039:aes(label = paste0("bolditalic('",Time_Fold,"x')"),
1523458604039:group = Scheme#,
1523458604040:# family = "HelveticaNeueLT Com 45 Lt"
1523458604040:)) +
1523458604041:# show.legend = F) +
1523458604041:scale_y_log10(expand = c(0, 0), position = "top", limits = c(1, 100000),
1523458604042:breaks = c(1, 100, 1000, 10000, 100000),
1523458604043:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523458604043:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523458604044:publicationTheme +
1523458604045:labs(x = "Typing Scheme",
1523458604045:y = "Run Time (s)\n") +
1523458604046:coord_flip()
1523458604047:)
1523458604390:# Add annotation times
1523458604390:for (i in 1:nrow(annotationData)) {
1523458604390:lsTimePlot <- lsTimePlot + annotation_custom(
1523458604391:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523458604391:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523458604392:col = "#222222")),
1523458604392:ymin = log10(annotationData$timeMarks[i]),
1523458604392:ymax = log10(annotationData$timeMarks[i]),
1523458604393:xmin = 0.4,
1523458604393:xmax = 0.4)
1523458604393:}
1523458604411:# Remove clipping
1523458604412:gt <- ggplot_gtable(ggplot_build(lsTimePlot))
1523458605114:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523458605115:grid.draw(gt)
1523458605308:ggsave(filename = "sources/STing_vs_others.larger_schemes.time.png", plot = gt,
1523458605308:width = 8, height = 8*0.61803)
1523458606140:# Larger Schemes - RAM ----------------------------------------------------
1523458606140:annotationData <- data.frame(ramMarks = c(1000, 5000, 10000, 100000),
1523458606141:labels = c("1 GB", "5 GB", "10 GB", "100 GB"))
1523458606142:(
1523458606142:lsRamPlot <- ggplot(largerDataToPlot, aes(x = Application, y = RAM)) +
1523458606142:geom_hline(data = annotationData[2,], aes(yintercept = ramMarks),
1523458606143:size = lineSize/1.5, color = gridColor) +
1523458606143:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523458606143:stat = "identity", position = position_dodge(width=0.9)) +
1523458606144:# show.legend = F) +
1523458606144:geom_text(data = foldData, position = position_dodge(width = 0.9),
1523458606144:hjust = 1.2, vjust = 0.5,
1523458606145:size = barAnnotTextSize,
1523458606145:# color = "white",
1523458606145:parse = TRUE,
1523458606146:# aes(label = Time_Fold, group = Application))
1523458606146:aes(label = paste0("bolditalic('",RAM_Fold,"x')"),
1523458606146:group = Scheme#,
1523458606147:# family = "HelveticaNeueLT Com 45 Lt"
1523458606147:)) +
1523458606147:scale_y_log10(expand = c(0, 0), position = "top",
1523458606148:breaks = c(1, 100, 1000, 10000, 100000),
1523458606148:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523458606149:# scale_fill_manual(values = rev(customPalette)) +
1523458606149:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523458606149:publicationTheme +
1523458606150:labs(x = "Typing Tool",#x = "Typing Scheme",
1523458606151:y = "Memory (RAM) consumption (MB)\n") +
1523458606151:coord_flip()
1523458606151:)
1523458606410:# Add annotation times
1523458606410:for (i in 1:nrow(annotationData)) {
1523458606411:lsRamPlot <- lsRamPlot + annotation_custom(
1523458606411:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523458606411:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523458606412:col = "#222222")),
1523458606412:ymin = log10(annotationData$ramMarks[i]),
1523458606412:ymax = log10(annotationData$ramMarks[i]),
1523458606413:xmin = 0.35,
1523458606413:xmax = 0.35)
1523458606413:}
1523458606430:# Remove clipping
1523458606431:gt <- ggplot_gtable(ggplot_build(lsRamPlot))
1523458607127:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523458607127:grid.draw(gt)
1523458607355:ggsave(filename = "sources/STing_vs_others.larger_schemes.ram.png", plot = gt,
1523458607356:width = 8, height = 8*0.61803)
1523458837987:# Time Plot ---------------------------------------------------------------
1523458837988:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523458837989:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523458838602:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523458838603:geom_hline(data = annotationData, aes(yintercept = timeMarks),
1523458838603:size = lineSize/1.5, color = gridColor, linetype = "dashed") +
1523458838603:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=barWidth,
1523458838604:stat = "identity", position = position_dodge(width=0.9),
1523458838604:show.legend = F) +
1523458838605:scale_y_log10(expand = c(0, 0), position = "top") +
1523458838605:scale_fill_manual(values = customPalette) +
1523458838605:publicationTheme +
1523458838606:labs(x = "Typing Tool",
1523458838606:y = "Run Time (s)\n") +
1523458838606:coord_flip()
1523458839506:# Add annotation times
1523458839507:for (i in 1:nrow(annotationData)) {
1523458839507:timePlot <- timePlot + annotation_custom(
1523458839508:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523458839509:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523458839510:col = "#222222")),
1523458839510:ymin = log10(annotationData$timeMarks[i]),
1523458839511:ymax = log10(annotationData$timeMarks[i]),
1523458839512:xmin = 0.35,
1523458839512:xmax = 0.35)
1523458839513:}
1523458839953:# Remove clipping
1523458839953:gt <- ggplot_gtable(ggplot_build(timePlot))
1523458840559:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523458840982:grid.draw(gt)
1523458908789:# STing vs other sequence typing software
1523458908789:# Install an load packages ------------------------------------------------
1523458908790:installAndLoadPackages <- function(pkg){
1523458908790:cat("Please wait a moment! Checking for required packages... ")
1523458908790:cat("Done!\n")
1523458908791:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1523458908791:if (length(new.pkg)) {
1523458908791:cat("Installing new packages... ")
1523458908792:install.packages(new.pkg, dependencies = TRUE,
1523458908792:repos="http://cran.rstudio.com/")
1523458908792:cat("Done!\n")
1523458908793:}
1523458908793:cat("Loading packages... \n")
1523458908793:sapply(pkg, require, character.only = TRUE)
1523458908794:cat("Done!\n")
1523458908794:}
1523458908795:requiredPackages <- c("dplyr", "readr", "ggpubr", "RColorBrewer", "gridExtra",
1523458908796:"extrafont", "grid")
1523458908796:installAndLoadPackages(requiredPackages)
1523458908801:# Sources -----------------------------------------------------------------
1523458908801:# Loading Data ------------------------------------------------------------
1523458908802:inFile   <- "data/typer/stringMLST-comparisons.tsv"
1523458908802:compData <- read_tsv(inFile)
1523458908807:largerSchemesData <- read_tsv("data/typer/sting_vs_stringmlst.tsv")
1523458908811:# General configuration ---------------------------------------------------
1523458908812:customPalette <- c("#0a4f75","#91bbe4","#d7e4f5")
1523458908812:customPalette <- rev(brewer.pal(n = 7, name = "Paired"))
1523458908813:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#c81837"))
1523458908813:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#33A02C"))
1523458908813:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "gray50"))
1523458908814:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#86827F"))
1523458908814:customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#e8702a", "#edc374", "#faebd7", "#86827F"))
1523458908814:customPalette <- c('#86827F','#faebd7','#edc374','#e8702a','#d7e4f5','#91bbe4','#0a4f75')
1523458908815:width            <- 9
1523458908816:height           <- width * 0.618
1523458908816:lineSize         <- 0.5
1523458908817:axisColor        <- "#666666"
1523458908817:gridColor        <- "#cccccc"
1523458908818:baseTextSize     <- 18
1523458908818:barAnnotTextSize <- 4
1523458908819:barWidth         <- 0.8
1523458908819:# baseFontFamily   <- "Helvetica"
1523458908819:baseFontFamily   <- "Arial"
1523458908820:baseFontFamily   <- "HelveticaNeueLT Com 45 Lt"
1523458908820:baseFontFamily   <- "HelveticaNeueLT Std Lt"
1523458908821:publicationTheme <- list(
1523458908821:theme_pubr() +
1523458908822:theme(
1523458908822:axis.line.y  = element_blank(),
1523458908822:axis.text    = element_text(size = baseTextSize * 0.875,
1523458908823:family = baseFontFamily,
1523458908823:color = "black"),
1523458908823:axis.title.y = element_text(margin=margin(1, 10, 1, 1, "mm")),
1523458908824:axis.ticks.y = element_blank(),
1523458908824:axis.title   = element_text(size = baseTextSize),
1523458908824:panel.grid.major.x = element_line(colour = gridColor,
1523458908825:size = lineSize),
1523458908825:plot.margin = margin(8, 20, 24, 8, "mm"),
1523458908825:text = element_text(size = baseTextSize,
1523458908826:family = baseFontFamily)
1523458908826:)
1523458908827:)
1523458908838:# Preparing data ----------------------------------------------------------
1523458908838:toolNameLevels <- compData$Tool_Name[c(6,4,5,7,3,2,1)]
1523458908839:dataToPlot <- compData %>%
1523458908839:arrange(Alleles) %>%
1523458908840:mutate(Tool_Name = factor(Tool_Name, toolNameLevels))
1523458908842:# Correct Predictions Plot ------------------------------------------------
1523458908843:predPlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Alleles)) +
1523458908843:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=barWidth,
1523458908843:stat = "identity", position = position_dodge(width=0.9),
1523458908844:show.legend = F) +
1523458908844:scale_y_continuous(expand = c(0, 0), position = "top") +
1523458908844:scale_fill_manual(values = customPalette) +
1523458908845:publicationTheme +
1523458908845:labs(x = "Typing Tool",
1523458908845:y = "Correct Alleles (%)\n") +
1523458908846:coord_flip()
1523458908852:predPlot
1523458909023:ggsave(filename = "sources/STing_vs_others.prediction.png", plot = predPlot,
1523458909023:width = 8, height = 8*0.61803)
1523458909378:# Time Plot ---------------------------------------------------------------
1523458909378:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523458909378:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523458909686:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523458909687:geom_hline(data = annotationData, aes(yintercept = timeMarks),
1523458909687:size = lineSize/1.5, color = gridColor, linetype = "dashed") +
1523458909688:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=barWidth,
1523458909689:stat = "identity", position = position_dodge(width=0.9),
1523458909689:show.legend = F) +
1523458909690:scale_y_log10(expand = c(0, 0), position = "top") +
1523458909691:scale_fill_manual(values = customPalette) +
1523458909691:publicationTheme +
1523458909692:labs(x = "Typing Tool",
1523458909693:y = "Run Time (s)\n") +
1523458909693:coord_flip()
1523458909712:# Add annotation times
1523458909713:for (i in 1:nrow(annotationData)) {
1523458909713:timePlot <- timePlot + annotation_custom(
1523458909714:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523458909714:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523458909718:col = "#222222")),
1523458909719:ymin = log10(annotationData$timeMarks[i]),
1523458909720:ymax = log10(annotationData$timeMarks[i]),
1523458909720:xmin = 0.35,
1523458909721:xmax = 0.35)
1523458909722:}
1523458909762:# Remove clipping
1523458909763:gt <- ggplot_gtable(ggplot_build(timePlot))
1523458909961:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523458909962:grid.draw(gt)
1523458910019:ggsave(filename = "sources/STing_vs_others.time.png", plot = gt,
1523458910020:width = 8, height = 8*0.61803)
1523458910334:# Larger schemes ----------------------------------------------------------
1523458910335:applicationLevels <- c("STing - Fast", "STing - Sensitive", "stringMLST")
1523458910336:# Larger schemes - preparing data------------------------------------------
1523458910336:(largerDataToPlot <- largerSchemesData %>%
1523458910336:filter(Scheme == "rMLST" | Scheme == "cgMLST") %>%
1523458910337:arrange(desc(Scheme), Application) %>%
1523458910337:# mutate(Species_scheme = as.factor(paste(Species, "-", Scheme)))
1523458910338:# mutate(Application_Scheme = factor(paste(Species, "-", Scheme)), applicationLevels))
1523458910338:mutate(Application = factor(Application, rev(applicationLevels)))
1523458910339:)
1523458910812:# Larger Schemes - Correct Predictions-------------------------------------
1523458910812:# customPalette <- c('#86827F','#faebd7','#edc374','#e8702a','#d7e4f5','#91bbe4','#0a4f75')
1523458910812:# customPalette <- c('#0a4f75','#91bbe4','#d7e4f5')
1523458910813:(
1523458910813:lsPredPlot <- ggplot(largerDataToPlot, aes(x = Application, y = Correct_Alleles)) +
1523458910813:# geom_bar(aes(fill = Application),
1523458910814:# stat = "identity", position = position_dodge(width = 0.9)) +
1523458910814:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523458910814:stat = "identity", position = position_dodge(width=0.9)) +
1523458910814:# show.legend = F) +
1523458910815:scale_y_continuous(limits = c(0, 100), expand = c(0, 0), position = "top") +
1523458910815:# scale_fill_manual(values = rev(customPalette)) +
1523458910816:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523458910816:publicationTheme +
1523458910816:labs(x = "Typing Tool", #"Typing Scheme",
1523458910817:y = "Correct Alleles (%)\n") +
1523458910817:coord_flip()
1523458910817:)
1523458911058:ggsave(filename = "sources/STing_vs_others.larger_schemes.prediction.png", plot = lsPredPlot,
1523458911058:width = 8, height = 8*0.61803)
1523458911863:# Larger schemes - Run Time -----------------------------------------------
1523458911863:annotationData <- data.frame(timeMarks = c(60, 15*60, 60*60, 12*60*60),
1523458911864:labels = c("1 min", "15 min", "1 hour", "12 hours"))
1523458911866:foldData <- largerDataToPlot %>%
1523458911867:filter(Application != "stringMLST")
1523458911870:(
1523458911871:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Application, y = Time)) +
1523458911871:geom_hline(data = annotationData, aes(yintercept = timeMarks),
1523458911872:size = lineSize/1.5, color = gridColor, linetype = "dashed") +
1523458911872:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523458911873:stat = "identity", position = position_dodge(width=0.9)) +
1523458911873:geom_text(data = foldData, position = position_dodge(width = 0.9),
1523458911874:hjust = 1.2, vjust = 0.5,
1523458911874:size = barAnnotTextSize,
1523458911875:# color = "white",
1523458911876:parse = TRUE,
1523458911876:# aes(label = Time_Fold, group = Application))
1523458911877:aes(label = paste0("bolditalic('",Time_Fold,"x')"),
1523458911878:group = Scheme#,
1523458911878:# family = "HelveticaNeueLT Com 45 Lt"
1523458911879:)) +
1523458911880:# show.legend = F) +
1523458911880:scale_y_log10(expand = c(0, 0), position = "top", limits = c(1, 100000),
1523458911881:breaks = c(1, 100, 1000, 10000, 100000),
1523458911882:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523458911883:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523458911883:publicationTheme +
1523458911884:labs(x = "Typing Scheme",
1523458911884:y = "Run Time (s)\n") +
1523458911885:coord_flip()
1523458911885:)
1523458912244:# Add annotation times
1523458912245:for (i in 1:nrow(annotationData)) {
1523458912245:lsTimePlot <- lsTimePlot + annotation_custom(
1523458912245:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523458912246:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523458912246:col = "#222222")),
1523458912246:ymin = log10(annotationData$timeMarks[i]),
1523458912247:ymax = log10(annotationData$timeMarks[i]),
1523458912247:xmin = 0.4,
1523458912247:xmax = 0.4)
1523458912248:}
1523458912266:# Remove clipping
1523458912267:gt <- ggplot_gtable(ggplot_build(lsTimePlot))
1523458912813:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523458912813:grid.draw(gt)
1523458912901:ggsave(filename = "sources/STing_vs_others.larger_schemes.time.png", plot = gt,
1523458912901:width = 8, height = 8*0.61803)
1523458913789:# Larger Schemes - RAM ----------------------------------------------------
1523458913790:annotationData <- data.frame(ramMarks = c(1000, 5000, 10000, 100000),
1523458913790:labels = c("1 GB", "5 GB", "10 GB", "100 GB"))
1523458913791:(
1523458913791:lsRamPlot <- ggplot(largerDataToPlot, aes(x = Application, y = RAM)) +
1523458913792:geom_hline(data = annotationData[2,], aes(yintercept = ramMarks),
1523458913792:size = lineSize/1.5, color = gridColor, linetype = "dashed") +
1523458913792:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523458913793:stat = "identity", position = position_dodge(width=0.9)) +
1523458913793:# show.legend = F) +
1523458913793:geom_text(data = foldData, position = position_dodge(width = 0.9),
1523458913794:hjust = 1.2, vjust = 0.5,
1523458913794:size = barAnnotTextSize,
1523458913794:# color = "white",
1523458913795:parse = TRUE,
1523458913795:# aes(label = Time_Fold, group = Application))
1523458913796:aes(label = paste0("bolditalic('",RAM_Fold,"x')"),
1523458913796:group = Scheme#,
1523458913796:# family = "HelveticaNeueLT Com 45 Lt"
1523458913797:)) +
1523458913797:scale_y_log10(expand = c(0, 0), position = "top",
1523458913797:breaks = c(1, 100, 1000, 10000, 100000),
1523458913798:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523458913798:# scale_fill_manual(values = rev(customPalette)) +
1523458913799:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523458913799:publicationTheme +
1523458913800:labs(x = "Typing Tool",#x = "Typing Scheme",
1523458913801:y = "Memory (RAM) consumption (MB)\n") +
1523458913801:coord_flip()
1523458913801:)
1523458914161:# Add annotation times
1523458914162:for (i in 1:nrow(annotationData)) {
1523458914162:lsRamPlot <- lsRamPlot + annotation_custom(
1523458914162:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523458914163:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523458914163:col = "#222222")),
1523458914163:ymin = log10(annotationData$ramMarks[i]),
1523458914164:ymax = log10(annotationData$ramMarks[i]),
1523458914164:xmin = 0.35,
1523458914164:xmax = 0.35)
1523458914165:}
1523458914186:# Remove clipping
1523458914187:gt <- ggplot_gtable(ggplot_build(lsRamPlot))
1523458914912:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523458914913:grid.draw(gt)
1523458915006:ggsave(filename = "sources/STing_vs_others.larger_schemes.ram.png", plot = gt,
1523458915006:width = 8, height = 8*0.61803)
1523459056089:# STing vs other sequence typing software
1523459056089:# Install an load packages ------------------------------------------------
1523459056090:installAndLoadPackages <- function(pkg){
1523459056090:cat("Please wait a moment! Checking for required packages... ")
1523459056091:cat("Done!\n")
1523459056092:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1523459056092:if (length(new.pkg)) {
1523459056093:cat("Installing new packages... ")
1523459056094:install.packages(new.pkg, dependencies = TRUE,
1523459056095:repos="http://cran.rstudio.com/")
1523459056096:cat("Done!\n")
1523459056096:}
1523459056097:cat("Loading packages... \n")
1523459056098:sapply(pkg, require, character.only = TRUE)
1523459056099:cat("Done!\n")
1523459056100:}
1523459056102:requiredPackages <- c("dplyr", "readr", "ggpubr", "RColorBrewer", "gridExtra",
1523459056103:"extrafont", "grid")
1523459056104:installAndLoadPackages(requiredPackages)
1523459056111:# Sources -----------------------------------------------------------------
1523459056112:# Loading Data ------------------------------------------------------------
1523459056112:inFile   <- "data/typer/stringMLST-comparisons.tsv"
1523459056113:compData <- read_tsv(inFile)
1523459056118:largerSchemesData <- read_tsv("data/typer/sting_vs_stringmlst.tsv")
1523459056125:# General configuration ---------------------------------------------------
1523459056125:customPalette <- c("#0a4f75","#91bbe4","#d7e4f5")
1523459056126:customPalette <- rev(brewer.pal(n = 7, name = "Paired"))
1523459056127:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#c81837"))
1523459056127:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#33A02C"))
1523459056128:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "gray50"))
1523459056128:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#86827F"))
1523459056129:customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#e8702a", "#edc374", "#faebd7", "#86827F"))
1523459056129:customPalette <- c('#86827F','#faebd7','#edc374','#e8702a','#d7e4f5','#91bbe4','#0a4f75')
1523459056130:width            <- 9
1523459056131:height           <- width * 0.618
1523459056132:lineSize         <- 0.5
1523459056132:axisColor        <- "#666666"
1523459056133:gridColor        <- "#cccccc"
1523459056134:baseTextSize     <- 18
1523459056134:barAnnotTextSize <- 4
1523459056135:barWidth         <- 0.8
1523459056135:# baseFontFamily   <- "Helvetica"
1523459056136:baseFontFamily   <- "Arial"
1523459056136:baseFontFamily   <- "HelveticaNeueLT Com 45 Lt"
1523459056137:baseFontFamily   <- "HelveticaNeueLT Std Lt"
1523459056138:publicationTheme <- list(
1523459056138:theme_pubr() +
1523459056139:theme(
1523459056139:axis.line.y  = element_blank(),
1523459056139:axis.text    = element_text(size = baseTextSize * 0.875,
1523459056140:family = baseFontFamily,
1523459056140:color = "black"),
1523459056140:axis.title.y = element_text(margin=margin(1, 10, 1, 1, "mm")),
1523459056141:axis.ticks.y = element_blank(),
1523459056141:axis.title   = element_text(size = baseTextSize),
1523459056142:panel.grid.major = element_blank(),
1523459056142:# panel.grid.major.x = element_line(colour = gridColor,
1523459056143:# size = lineSize),
1523459056143:plot.margin = margin(8, 20, 24, 8, "mm"),
1523459056144:text = element_text(size = baseTextSize,
1523459056144:family = baseFontFamily)
1523459056144:)
1523459056145:)
1523459056153:# Preparing data ----------------------------------------------------------
1523459056153:toolNameLevels <- compData$Tool_Name[c(6,4,5,7,3,2,1)]
1523459056154:dataToPlot <- compData %>%
1523459056154:arrange(Alleles) %>%
1523459056154:mutate(Tool_Name = factor(Tool_Name, toolNameLevels))
1523459056157:# Correct Predictions Plot ------------------------------------------------
1523459056158:predPlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Alleles)) +
1523459056158:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=barWidth,
1523459056158:stat = "identity", position = position_dodge(width=0.9),
1523459056159:show.legend = F) +
1523459056159:scale_y_continuous(expand = c(0, 0), position = "top") +
1523459056159:scale_fill_manual(values = customPalette) +
1523459056160:publicationTheme +
1523459056160:labs(x = "Typing Tool",
1523459056161:y = "Correct Alleles (%)\n") +
1523459056161:coord_flip()
1523459056167:predPlot
1523459056336:ggsave(filename = "sources/STing_vs_others.prediction.png", plot = predPlot,
1523459056336:width = 8, height = 8*0.61803)
1523459056804:# Time Plot ---------------------------------------------------------------
1523459056805:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523459056805:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523459057110:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523459057110:geom_hline(data = annotationData, aes(yintercept = timeMarks),
1523459057111:size = lineSize/1.5, color = gridColor, linetype = "dashed") +
1523459057111:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=barWidth,
1523459057111:stat = "identity", position = position_dodge(width=0.9),
1523459057112:show.legend = F) +
1523459057112:scale_y_log10(expand = c(0, 0), position = "top") +
1523459057113:scale_fill_manual(values = customPalette) +
1523459057113:publicationTheme +
1523459057113:labs(x = "Typing Tool",
1523459057114:y = "Run Time (s)\n") +
1523459057114:coord_flip()
1523459057127:# Add annotation times
1523459057128:for (i in 1:nrow(annotationData)) {
1523459057129:timePlot <- timePlot + annotation_custom(
1523459057129:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523459057130:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523459057130:col = "#222222")),
1523459057131:ymin = log10(annotationData$timeMarks[i]),
1523459057132:ymax = log10(annotationData$timeMarks[i]),
1523459057132:xmin = 0.35,
1523459057133:xmax = 0.35)
1523459057133:}
1523459057158:# Remove clipping
1523459057158:gt <- ggplot_gtable(ggplot_build(timePlot))
1523459057297:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523459057298:grid.draw(gt)
1523459057368:ggsave(filename = "sources/STing_vs_others.time.png", plot = gt,
1523459057368:width = 8, height = 8*0.61803)
1523459057705:# Larger schemes ----------------------------------------------------------
1523459057706:applicationLevels <- c("STing - Fast", "STing - Sensitive", "stringMLST")
1523459057707:# Larger schemes - preparing data------------------------------------------
1523459057707:(largerDataToPlot <- largerSchemesData %>%
1523459057708:filter(Scheme == "rMLST" | Scheme == "cgMLST") %>%
1523459057708:arrange(desc(Scheme), Application) %>%
1523459057709:# mutate(Species_scheme = as.factor(paste(Species, "-", Scheme)))
1523459057709:# mutate(Application_Scheme = factor(paste(Species, "-", Scheme)), applicationLevels))
1523459057710:mutate(Application = factor(Application, rev(applicationLevels)))
1523459057710:)
1523459058251:# Larger Schemes - Correct Predictions-------------------------------------
1523459058252:# customPalette <- c('#86827F','#faebd7','#edc374','#e8702a','#d7e4f5','#91bbe4','#0a4f75')
1523459058252:# customPalette <- c('#0a4f75','#91bbe4','#d7e4f5')
1523459058252:(
1523459058253:lsPredPlot <- ggplot(largerDataToPlot, aes(x = Application, y = Correct_Alleles)) +
1523459058253:# geom_bar(aes(fill = Application),
1523459058254:# stat = "identity", position = position_dodge(width = 0.9)) +
1523459058254:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523459058254:stat = "identity", position = position_dodge(width=0.9)) +
1523459058255:# show.legend = F) +
1523459058255:scale_y_continuous(limits = c(0, 100), expand = c(0, 0), position = "top") +
1523459058255:# scale_fill_manual(values = rev(customPalette)) +
1523459058256:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523459058256:publicationTheme +
1523459058256:labs(x = "Typing Tool", #"Typing Scheme",
1523459058257:y = "Correct Alleles (%)\n") +
1523459058257:coord_flip()
1523459058257:)
1523459058538:ggsave(filename = "sources/STing_vs_others.larger_schemes.prediction.png", plot = lsPredPlot,
1523459058538:width = 8, height = 8*0.61803)
1523459058917:# Larger schemes - Run Time -----------------------------------------------
1523459058918:annotationData <- data.frame(timeMarks = c(60, 15*60, 60*60, 12*60*60),
1523459058918:labels = c("1 min", "15 min", "1 hour", "12 hours"))
1523459059371:foldData <- largerDataToPlot %>%
1523459059372:filter(Application != "stringMLST")
1523459059374:(
1523459059374:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Application, y = Time)) +
1523459059375:geom_hline(data = annotationData, aes(yintercept = timeMarks),
1523459059375:size = lineSize/1.5, color = gridColor, linetype = "dashed") +
1523459059375:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523459059376:stat = "identity", position = position_dodge(width=0.9)) +
1523459059376:geom_text(data = foldData, position = position_dodge(width = 0.9),
1523459059377:hjust = 1.2, vjust = 0.5,
1523459059377:size = barAnnotTextSize,
1523459059378:# color = "white",
1523459059378:parse = TRUE,
1523459059379:# aes(label = Time_Fold, group = Application))
1523459059380:aes(label = paste0("bolditalic('",Time_Fold,"x')"),
1523459059380:group = Scheme#,
1523459059381:# family = "HelveticaNeueLT Com 45 Lt"
1523459059381:)) +
1523459059382:# show.legend = F) +
1523459059382:scale_y_log10(expand = c(0, 0), position = "top", limits = c(1, 100000),
1523459059383:breaks = c(1, 100, 1000, 10000, 100000),
1523459059384:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523459059385:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523459059385:publicationTheme +
1523459059386:labs(x = "Typing Scheme",
1523459059387:y = "Run Time (s)\n") +
1523459059387:coord_flip()
1523459059388:)
1523459059795:# Add annotation times
1523459059795:for (i in 1:nrow(annotationData)) {
1523459059795:lsTimePlot <- lsTimePlot + annotation_custom(
1523459059796:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523459059796:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523459059796:col = "#222222")),
1523459059797:ymin = log10(annotationData$timeMarks[i]),
1523459059797:ymax = log10(annotationData$timeMarks[i]),
1523459059797:xmin = 0.4,
1523459059798:xmax = 0.4)
1523459059798:}
1523459059825:# Remove clipping
1523459059825:gt <- ggplot_gtable(ggplot_build(lsTimePlot))
1523459060340:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523459060341:grid.draw(gt)
1523459060446:ggsave(filename = "sources/STing_vs_others.larger_schemes.time.png", plot = gt,
1523459060447:width = 8, height = 8*0.61803)
1523459061301:# Larger Schemes - RAM ----------------------------------------------------
1523459061302:annotationData <- data.frame(ramMarks = c(1000, 5000, 10000, 100000),
1523459061303:labels = c("1 GB", "5 GB", "10 GB", "100 GB"))
1523459061304:(
1523459061305:lsRamPlot <- ggplot(largerDataToPlot, aes(x = Application, y = RAM)) +
1523459061305:geom_hline(data = annotationData[2,], aes(yintercept = ramMarks),
1523459061305:size = lineSize/1.5, color = gridColor, linetype = "dashed") +
1523459061306:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523459061306:stat = "identity", position = position_dodge(width=0.9)) +
1523459061306:# show.legend = F) +
1523459061307:geom_text(data = foldData, position = position_dodge(width = 0.9),
1523459061307:hjust = 1.2, vjust = 0.5,
1523459061307:size = barAnnotTextSize,
1523459061308:# color = "white",
1523459061308:parse = TRUE,
1523459061309:# aes(label = Time_Fold, group = Application))
1523459061309:aes(label = paste0("bolditalic('",RAM_Fold,"x')"),
1523459061310:group = Scheme#,
1523459061310:# family = "HelveticaNeueLT Com 45 Lt"
1523459061311:)) +
1523459061312:scale_y_log10(expand = c(0, 0), position = "top",
1523459061312:breaks = c(1, 100, 1000, 10000, 100000),
1523459061312:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523459061313:# scale_fill_manual(values = rev(customPalette)) +
1523459061313:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523459061313:publicationTheme +
1523459061314:labs(x = "Typing Tool",#x = "Typing Scheme",
1523459061314:y = "Memory (RAM) consumption (MB)\n") +
1523459061315:coord_flip()
1523459061315:)
1523459061641:# Add annotation times
1523459061641:for (i in 1:nrow(annotationData)) {
1523459061641:lsRamPlot <- lsRamPlot + annotation_custom(
1523459061642:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523459061642:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523459061642:col = "#222222")),
1523459061643:ymin = log10(annotationData$ramMarks[i]),
1523459061643:ymax = log10(annotationData$ramMarks[i]),
1523459061644:xmin = 0.35,
1523459061644:xmax = 0.35)
1523459061644:}
1523459061666:# Remove clipping
1523459061666:gt <- ggplot_gtable(ggplot_build(lsRamPlot))
1523459062244:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523459062245:grid.draw(gt)
1523459062334:ggsave(filename = "sources/STing_vs_others.larger_schemes.ram.png", plot = gt,
1523459062335:width = 8, height = 8*0.61803)
1523459153738:linetype         <- "solid"
1523459188768:annotLinetype    <- "solid"
1523459208461:# STing vs other sequence typing software
1523459208462:# Install an load packages ------------------------------------------------
1523459208462:installAndLoadPackages <- function(pkg){
1523459208463:cat("Please wait a moment! Checking for required packages... ")
1523459208463:cat("Done!\n")
1523459208464:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1523459208464:if (length(new.pkg)) {
1523459208465:cat("Installing new packages... ")
1523459208465:install.packages(new.pkg, dependencies = TRUE,
1523459208466:repos="http://cran.rstudio.com/")
1523459208466:cat("Done!\n")
1523459208467:}
1523459208468:cat("Loading packages... \n")
1523459208468:sapply(pkg, require, character.only = TRUE)
1523459208468:cat("Done!\n")
1523459208469:}
1523459208470:requiredPackages <- c("dplyr", "readr", "ggpubr", "RColorBrewer", "gridExtra",
1523459208470:"extrafont", "grid")
1523459208471:installAndLoadPackages(requiredPackages)
1523459208477:# Sources -----------------------------------------------------------------
1523459208478:# Loading Data ------------------------------------------------------------
1523459208478:inFile   <- "data/typer/stringMLST-comparisons.tsv"
1523459208479:compData <- read_tsv(inFile)
1523459208483:largerSchemesData <- read_tsv("data/typer/sting_vs_stringmlst.tsv")
1523459208489:# General configuration ---------------------------------------------------
1523459208490:customPalette <- c("#0a4f75","#91bbe4","#d7e4f5")
1523459208490:customPalette <- rev(brewer.pal(n = 7, name = "Paired"))
1523459208491:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#c81837"))
1523459208491:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#33A02C"))
1523459208492:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "gray50"))
1523459208492:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#86827F"))
1523459208492:customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#e8702a", "#edc374", "#faebd7", "#86827F"))
1523459208493:customPalette <- c('#86827F','#faebd7','#edc374','#e8702a','#d7e4f5','#91bbe4','#0a4f75')
1523459208494:width            <- 9
1523459208495:height           <- width * 0.618
1523459208495:lineSize         <- 0.5
1523459208496:annotLinetype    <- "solid"
1523459208496:axisColor        <- "#666666"
1523459208497:gridColor        <- "#cccccc"
1523459208497:baseTextSize     <- 18
1523459208498:barAnnotTextSize <- 4
1523459208499:barWidth         <- 0.8
1523459208499:# baseFontFamily   <- "Helvetica"
1523459208500:baseFontFamily   <- "Arial"
1523459208500:baseFontFamily   <- "HelveticaNeueLT Com 45 Lt"
1523459208501:baseFontFamily   <- "HelveticaNeueLT Std Lt"
1523459208501:publicationTheme <- list(
1523459208502:theme_pubr() +
1523459208502:theme(
1523459208503:axis.line.y  = element_blank(),
1523459208503:axis.text    = element_text(size = baseTextSize * 0.875,
1523459208503:family = baseFontFamily,
1523459208504:color = "black"),
1523459208504:axis.title.y = element_text(margin=margin(1, 10, 1, 1, "mm")),
1523459208504:axis.ticks.y = element_blank(),
1523459208505:axis.title   = element_text(size = baseTextSize),
1523459208505:panel.grid.major = element_blank(),
1523459208505:# panel.grid.major.x = element_line(colour = gridColor,
1523459208506:# size = lineSize),
1523459208506:plot.margin = margin(8, 20, 24, 8, "mm"),
1523459208507:text = element_text(size = baseTextSize,
1523459208507:family = baseFontFamily)
1523459208508:)
1523459208508:)
1523459208515:# Preparing data ----------------------------------------------------------
1523459208639:toolNameLevels <- compData$Tool_Name[c(6,4,5,7,3,2,1)]
1523459208640:dataToPlot <- compData %>%
1523459208641:arrange(Alleles) %>%
1523459208641:mutate(Tool_Name = factor(Tool_Name, toolNameLevels))
1523459208643:# Correct Predictions Plot ------------------------------------------------
1523459208643:predPlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Alleles)) +
1523459208644:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=barWidth,
1523459208644:stat = "identity", position = position_dodge(width=0.9),
1523459208644:show.legend = F) +
1523459208645:scale_y_continuous(expand = c(0, 0), position = "top") +
1523459208645:scale_fill_manual(values = customPalette) +
1523459208645:publicationTheme +
1523459208646:labs(x = "Typing Tool",
1523459208646:y = "Correct Alleles (%)\n") +
1523459208646:coord_flip()
1523459208654:predPlot
1523459208897:ggsave(filename = "sources/STing_vs_others.prediction.png", plot = predPlot,
1523459208898:width = 8, height = 8*0.61803)
1523459209306:# Time Plot ---------------------------------------------------------------
1523459209306:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523459209306:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523459209546:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523459209546:geom_hline(data = annotationData, aes(yintercept = timeMarks),
1523459209546:size = lineSize/1.5, color = gridColor, linetype = annotLinetype) +
1523459209547:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=barWidth,
1523459209547:stat = "identity", position = position_dodge(width=0.9),
1523459209547:show.legend = F) +
1523459209548:scale_y_log10(expand = c(0, 0), position = "top") +
1523459209548:scale_fill_manual(values = customPalette) +
1523459209548:publicationTheme +
1523459209549:labs(x = "Typing Tool",
1523459209549:y = "Run Time (s)\n") +
1523459209549:coord_flip()
1523459209557:# Add annotation times
1523459209557:for (i in 1:nrow(annotationData)) {
1523459209558:timePlot <- timePlot + annotation_custom(
1523459209558:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523459209558:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523459209559:col = "#222222")),
1523459209559:ymin = log10(annotationData$timeMarks[i]),
1523459209559:ymax = log10(annotationData$timeMarks[i]),
1523459209560:xmin = 0.35,
1523459209560:xmax = 0.35)
1523459209560:}
1523459209596:# Remove clipping
1523459209597:gt <- ggplot_gtable(ggplot_build(timePlot))
1523459209836:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523459209837:grid.draw(gt)
1523459209918:ggsave(filename = "sources/STing_vs_others.time.png", plot = gt,
1523459209919:width = 8, height = 8*0.61803)
1523459210373:# Larger schemes ----------------------------------------------------------
1523459210373:applicationLevels <- c("STing - Fast", "STing - Sensitive", "stringMLST")
1523459210375:# Larger schemes - preparing data------------------------------------------
1523459210376:(largerDataToPlot <- largerSchemesData %>%
1523459210376:filter(Scheme == "rMLST" | Scheme == "cgMLST") %>%
1523459210377:arrange(desc(Scheme), Application) %>%
1523459210377:# mutate(Species_scheme = as.factor(paste(Species, "-", Scheme)))
1523459210378:# mutate(Application_Scheme = factor(paste(Species, "-", Scheme)), applicationLevels))
1523459210378:mutate(Application = factor(Application, rev(applicationLevels)))
1523459210378:)
1523459210860:# Larger Schemes - Correct Predictions-------------------------------------
1523459210860:# customPalette <- c('#86827F','#faebd7','#edc374','#e8702a','#d7e4f5','#91bbe4','#0a4f75')
1523459210861:# customPalette <- c('#0a4f75','#91bbe4','#d7e4f5')
1523459210861:(
1523459210861:lsPredPlot <- ggplot(largerDataToPlot, aes(x = Application, y = Correct_Alleles)) +
1523459210861:# geom_bar(aes(fill = Application),
1523459210862:# stat = "identity", position = position_dodge(width = 0.9)) +
1523459210862:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523459210862:stat = "identity", position = position_dodge(width=0.9)) +
1523459210863:# show.legend = F) +
1523459210863:scale_y_continuous(limits = c(0, 100), expand = c(0, 0), position = "top") +
1523459210863:# scale_fill_manual(values = rev(customPalette)) +
1523459210864:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523459210864:publicationTheme +
1523459210865:labs(x = "Typing Tool", #"Typing Scheme",
1523459210865:y = "Correct Alleles (%)\n") +
1523459210865:coord_flip()
1523459210866:)
1523459211085:ggsave(filename = "sources/STing_vs_others.larger_schemes.prediction.png", plot = lsPredPlot,
1523459211085:width = 8, height = 8*0.61803)
1523459211464:# Larger schemes - Run Time -----------------------------------------------
1523459211464:annotationData <- data.frame(timeMarks = c(60, 15*60, 60*60, 12*60*60),
1523459211465:labels = c("1 min", "15 min", "1 hour", "12 hours"))
1523459211752:foldData <- largerDataToPlot %>%
1523459211752:filter(Application != "stringMLST")
1523459211754:(
1523459211755:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Application, y = Time)) +
1523459211755:geom_hline(data = annotationData, aes(yintercept = timeMarks),
1523459211755:size = lineSize/1.5, color = gridColor, linetype = annotLinetype) +
1523459211756:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523459211756:stat = "identity", position = position_dodge(width=0.9)) +
1523459211756:geom_text(data = foldData, position = position_dodge(width = 0.9),
1523459211757:hjust = 1.2, vjust = 0.5,
1523459211757:size = barAnnotTextSize,
1523459211758:# color = "white",
1523459211758:parse = TRUE,
1523459211758:# aes(label = Time_Fold, group = Application))
1523459211759:aes(label = paste0("bolditalic('",Time_Fold,"x')"),
1523459211759:group = Scheme#,
1523459211759:# family = "HelveticaNeueLT Com 45 Lt"
1523459211760:)) +
1523459211760:# show.legend = F) +
1523459211760:scale_y_log10(expand = c(0, 0), position = "top", limits = c(1, 100000),
1523459211761:breaks = c(1, 100, 1000, 10000, 100000),
1523459211761:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523459211762:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523459211762:publicationTheme +
1523459211762:labs(x = "Typing Scheme",
1523459211763:y = "Run Time (s)\n") +
1523459211763:coord_flip()
1523459211764:)
1523459212076:# Add annotation times
1523459212077:for (i in 1:nrow(annotationData)) {
1523459212077:lsTimePlot <- lsTimePlot + annotation_custom(
1523459212078:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523459212078:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523459212079:col = "#222222")),
1523459212079:ymin = log10(annotationData$timeMarks[i]),
1523459212079:ymax = log10(annotationData$timeMarks[i]),
1523459212080:xmin = 0.4,
1523459212080:xmax = 0.4)
1523459212080:}
1523459212105:# Remove clipping
1523459212105:gt <- ggplot_gtable(ggplot_build(lsTimePlot))
1523459212710:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523459212711:grid.draw(gt)
1523459212808:ggsave(filename = "sources/STing_vs_others.larger_schemes.time.png", plot = gt,
1523459212808:width = 8, height = 8*0.61803)
1523459213264:# Larger Schemes - RAM ----------------------------------------------------
1523459213264:annotationData <- data.frame(ramMarks = c(1000, 5000, 10000, 100000),
1523459213264:labels = c("1 GB", "5 GB", "10 GB", "100 GB"))
1523459213784:(
1523459213785:lsRamPlot <- ggplot(largerDataToPlot, aes(x = Application, y = RAM)) +
1523459213785:geom_hline(data = annotationData[2,], aes(yintercept = ramMarks),
1523459213785:size = lineSize/1.5, color = gridColor, linetype = annotLinetype) +
1523459213786:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523459213786:stat = "identity", position = position_dodge(width=0.9)) +
1523459213786:# show.legend = F) +
1523459213786:geom_text(data = foldData, position = position_dodge(width = 0.9),
1523459213787:hjust = 1.2, vjust = 0.5,
1523459213787:size = barAnnotTextSize,
1523459213788:# color = "white",
1523459213788:parse = TRUE,
1523459213788:# aes(label = Time_Fold, group = Application))
1523459213789:aes(label = paste0("bolditalic('",RAM_Fold,"x')"),
1523459213789:group = Scheme#,
1523459213789:# family = "HelveticaNeueLT Com 45 Lt"
1523459213790:)) +
1523459213790:scale_y_log10(expand = c(0, 0), position = "top",
1523459213790:breaks = c(1, 100, 1000, 10000, 100000),
1523459213791:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523459213791:# scale_fill_manual(values = rev(customPalette)) +
1523459213792:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523459213792:publicationTheme +
1523459213792:labs(x = "Typing Tool",#x = "Typing Scheme",
1523459213793:y = "Memory (RAM) consumption (MB)\n") +
1523459213793:coord_flip()
1523459213793:)
1523459214106:# Add annotation times
1523459214106:for (i in 1:nrow(annotationData)) {
1523459214107:lsRamPlot <- lsRamPlot + annotation_custom(
1523459214107:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523459214107:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523459214108:col = "#222222")),
1523459214108:ymin = log10(annotationData$ramMarks[i]),
1523459214108:ymax = log10(annotationData$ramMarks[i]),
1523459214109:xmin = 0.35,
1523459214109:xmax = 0.35)
1523459214109:}
1523459214128:# Remove clipping
1523459214128:gt <- ggplot_gtable(ggplot_build(lsRamPlot))
1523459214722:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523459214723:grid.draw(gt)
1523459214870:ggsave(filename = "sources/STing_vs_others.larger_schemes.ram.png", plot = gt,
1523459214870:width = 8, height = 8*0.61803)
1523459245408:# STing vs other sequence typing software
1523459245409:# Install an load packages ------------------------------------------------
1523459245410:installAndLoadPackages <- function(pkg){
1523459245411:cat("Please wait a moment! Checking for required packages... ")
1523459245411:cat("Done!\n")
1523459245412:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1523459245413:if (length(new.pkg)) {
1523459245413:cat("Installing new packages... ")
1523459245414:install.packages(new.pkg, dependencies = TRUE,
1523459245414:repos="http://cran.rstudio.com/")
1523459245415:cat("Done!\n")
1523459245416:}
1523459245416:cat("Loading packages... \n")
1523459245417:sapply(pkg, require, character.only = TRUE)
1523459245418:cat("Done!\n")
1523459245419:}
1523459245421:requiredPackages <- c("dplyr", "readr", "ggpubr", "RColorBrewer", "gridExtra",
1523459245421:"extrafont", "grid")
1523459245422:installAndLoadPackages(requiredPackages)
1523459245428:# Sources -----------------------------------------------------------------
1523459245429:# Loading Data ------------------------------------------------------------
1523459245429:inFile   <- "data/typer/stringMLST-comparisons.tsv"
1523459245430:compData <- read_tsv(inFile)
1523459245435:largerSchemesData <- read_tsv("data/typer/sting_vs_stringmlst.tsv")
1523459245442:# General configuration ---------------------------------------------------
1523459245442:customPalette <- c("#0a4f75","#91bbe4","#d7e4f5")
1523459245443:customPalette <- rev(brewer.pal(n = 7, name = "Paired"))
1523459245444:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#c81837"))
1523459245444:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#33A02C"))
1523459245445:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "gray50"))
1523459245445:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#86827F"))
1523459245446:customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#e8702a", "#edc374", "#faebd7", "#86827F"))
1523459245446:customPalette <- c('#86827F','#faebd7','#edc374','#e8702a','#d7e4f5','#91bbe4','#0a4f75')
1523459245447:width            <- 9
1523459245448:height           <- width * 0.618
1523459245449:lineSize         <- 0.5
1523459245449:annotLinetype    <- "solid"
1523459245450:axisColor        <- "#666666"
1523459245451:gridColor        <- "#cccccc"
1523459245451:baseTextSize     <- 18
1523459245452:barAnnotTextSize <- 4
1523459245452:barWidth         <- 0.8
1523459245453:# baseFontFamily   <- "Helvetica"
1523459245453:baseFontFamily   <- "Arial"
1523459245454:baseFontFamily   <- "HelveticaNeueLT Com 45 Lt"
1523459245454:baseFontFamily   <- "HelveticaNeueLT Std Lt"
1523459245455:publicationTheme <- list(
1523459245456:theme_pubr() +
1523459245456:theme(
1523459245456:axis.line.y  = element_blank(),
1523459245457:axis.text    = element_text(size = baseTextSize * 0.875,
1523459245457:family = baseFontFamily,
1523459245458:color = "black"),
1523459245458:axis.title.y = element_text(margin=margin(1, 10, 1, 1, "mm")),
1523459245458:axis.ticks.y = element_blank(),
1523459245459:axis.title   = element_text(size = baseTextSize),
1523459245459:panel.grid.major = element_blank(),
1523459245460:# panel.grid.major.x = element_line(colour = gridColor,
1523459245460:# size = lineSize),
1523459245460:plot.margin = margin(8, 20, 24, 8, "mm"),
1523459245461:text = element_text(size = baseTextSize,
1523459245461:family = baseFontFamily)
1523459245462:)
1523459245462:)
1523459245470:# Preparing data ----------------------------------------------------------
1523459245470:toolNameLevels <- compData$Tool_Name[c(6,4,5,7,3,2,1)]
1523459245471:dataToPlot <- compData %>%
1523459245472:arrange(Alleles) %>%
1523459245472:mutate(Tool_Name = factor(Tool_Name, toolNameLevels))
1523459245478:# Correct Predictions Plot ------------------------------------------------
1523459245478:predPlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Alleles)) +
1523459245479:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=barWidth,
1523459245479:stat = "identity", position = position_dodge(width=0.9),
1523459245480:show.legend = F) +
1523459245480:scale_y_continuous(expand = c(0, 0), position = "top") +
1523459245480:scale_fill_manual(values = customPalette) +
1523459245481:publicationTheme +
1523459245481:labs(x = "Typing Tool",
1523459245481:y = "Correct Alleles (%)\n") +
1523459245482:coord_flip()
1523459245491:predPlot
1523459245687:ggsave(filename = "sources/STing_vs_others.prediction.png", plot = predPlot,
1523459245687:width = 8, height = 8*0.61803)
1523459246087:# Time Plot ---------------------------------------------------------------
1523459246088:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523459246089:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523459246323:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523459246324:geom_hline(data = annotationData, aes(yintercept = timeMarks),
1523459246324:size = lineSize/1.5, color = gridColor, linetype = annotLinetype) +
1523459246324:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=barWidth,
1523459246325:stat = "identity", position = position_dodge(width=0.9),
1523459246325:show.legend = F) +
1523459246325:scale_y_log10(expand = c(0, 0), position = "top") +
1523459246326:scale_fill_manual(values = customPalette) +
1523459246326:publicationTheme +
1523459246326:labs(x = "Typing Tool",
1523459246327:y = "Run Time (s)\n") +
1523459246327:coord_flip()
1523459246336:# Add annotation times
1523459246336:for (i in 1:nrow(annotationData)) {
1523459246336:timePlot <- timePlot + annotation_custom(
1523459246337:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523459246337:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523459246338:col = "#222222")),
1523459246338:ymin = log10(annotationData$timeMarks[i]),
1523459246339:ymax = log10(annotationData$timeMarks[i]),
1523459246339:xmin = 0.35,
1523459246340:xmax = 0.35)
1523459246340:}
1523459246370:# Remove clipping
1523459246371:gt <- ggplot_gtable(ggplot_build(timePlot))
1523459246557:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523459246558:grid.draw(gt)
1523459246637:ggsave(filename = "sources/STing_vs_others.time.png", plot = gt,
1523459246637:width = 8, height = 8*0.61803)
1523459246969:# Larger schemes ----------------------------------------------------------
1523459246969:applicationLevels <- c("STing - Fast", "STing - Sensitive", "stringMLST")
1523459246971:# Larger schemes - preparing data------------------------------------------
1523459246971:(largerDataToPlot <- largerSchemesData %>%
1523459246972:filter(Scheme == "rMLST" | Scheme == "cgMLST") %>%
1523459246972:arrange(desc(Scheme), Application) %>%
1523459246973:# mutate(Species_scheme = as.factor(paste(Species, "-", Scheme)))
1523459246973:# mutate(Application_Scheme = factor(paste(Species, "-", Scheme)), applicationLevels))
1523459246973:mutate(Application = factor(Application, rev(applicationLevels)))
1523459246974:)
1523459247437:# Larger Schemes - Correct Predictions-------------------------------------
1523459247437:# customPalette <- c('#86827F','#faebd7','#edc374','#e8702a','#d7e4f5','#91bbe4','#0a4f75')
1523459247438:# customPalette <- c('#0a4f75','#91bbe4','#d7e4f5')
1523459247438:(
1523459247438:lsPredPlot <- ggplot(largerDataToPlot, aes(x = Application, y = Correct_Alleles)) +
1523459247439:# geom_bar(aes(fill = Application),
1523459247439:# stat = "identity", position = position_dodge(width = 0.9)) +
1523459247439:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523459247440:stat = "identity", position = position_dodge(width=0.9)) +
1523459247440:# show.legend = F) +
1523459247440:scale_y_continuous(limits = c(0, 100), expand = c(0, 0), position = "top") +
1523459247441:# scale_fill_manual(values = rev(customPalette)) +
1523459247441:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523459247442:publicationTheme +
1523459247442:labs(x = "Typing Tool", #"Typing Scheme",
1523459247443:y = "Correct Alleles (%)\n") +
1523459247443:coord_flip()
1523459247444:)
1523459247821:ggsave(filename = "sources/STing_vs_others.larger_schemes.prediction.png", plot = lsPredPlot,
1523459247821:width = 8, height = 8*0.61803)
1523459248183:# Larger schemes - Run Time -----------------------------------------------
1523459248184:annotationData <- data.frame(timeMarks = c(60, 15*60, 60*60, 12*60*60),
1523459248184:labels = c("1 min", "15 min", "1 hour", "12 hours"))
1523459248429:foldData <- largerDataToPlot %>%
1523459248429:filter(Application != "stringMLST")
1523459248431:(
1523459248431:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Application, y = Time)) +
1523459248432:geom_hline(data = annotationData, aes(yintercept = timeMarks),
1523459248432:size = lineSize/1.5, color = gridColor, linetype = annotLinetype) +
1523459248432:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523459248433:stat = "identity", position = position_dodge(width=0.9)) +
1523459248433:geom_text(data = foldData, position = position_dodge(width = 0.9),
1523459248433:hjust = 1.2, vjust = 0.5,
1523459248434:size = barAnnotTextSize,
1523459248434:# color = "white",
1523459248434:parse = TRUE,
1523459248435:# aes(label = Time_Fold, group = Application))
1523459248435:aes(label = paste0("bolditalic('",Time_Fold,"x')"),
1523459248436:group = Scheme#,
1523459248436:# family = "HelveticaNeueLT Com 45 Lt"
1523459248436:)) +
1523459248437:# show.legend = F) +
1523459248437:scale_y_log10(expand = c(0, 0), position = "top", limits = c(1, 100000),
1523459248437:breaks = c(1, 100, 1000, 10000, 100000),
1523459248438:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523459248439:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523459248439:publicationTheme +
1523459248440:labs(x = "Typing Scheme",
1523459248440:y = "Run Time (s)\n") +
1523459248441:coord_flip()
1523459248441:)
1523459248895:# Add annotation times
1523459248896:for (i in 1:nrow(annotationData)) {
1523459248896:lsTimePlot <- lsTimePlot + annotation_custom(
1523459248897:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523459248897:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523459248897:col = "#222222")),
1523459248898:ymin = log10(annotationData$timeMarks[i]),
1523459248898:ymax = log10(annotationData$timeMarks[i]),
1523459248898:xmin = 0.4,
1523459248899:xmax = 0.4)
1523459248899:}
1523459248918:# Remove clipping
1523459248918:gt <- ggplot_gtable(ggplot_build(lsTimePlot))
1523459249482:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523459249482:grid.draw(gt)
1523459249586:ggsave(filename = "sources/STing_vs_others.larger_schemes.time.png", plot = gt,
1523459249587:width = 8, height = 8*0.61803)
1523459249876:# Larger Schemes - RAM ----------------------------------------------------
1523459249877:annotationData <- data.frame(ramMarks = c(1000, 5000, 10000, 100000),
1523459249877:labels = c("1 GB", "5 GB", "10 GB", "100 GB"))
1523459250403:(
1523459250403:lsRamPlot <- ggplot(largerDataToPlot, aes(x = Application, y = RAM)) +
1523459250403:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523459250404:size = lineSize/1.5, color = gridColor, linetype = annotLinetype) +
1523459250404:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523459250404:stat = "identity", position = position_dodge(width=0.9)) +
1523459250405:# show.legend = F) +
1523459250405:geom_text(data = foldData, position = position_dodge(width = 0.9),
1523459250405:hjust = 1.2, vjust = 0.5,
1523459250406:size = barAnnotTextSize,
1523459250406:# color = "white",
1523459250406:parse = TRUE,
1523459250407:# aes(label = Time_Fold, group = Application))
1523459250407:aes(label = paste0("bolditalic('",RAM_Fold,"x')"),
1523459250408:group = Scheme#,
1523459250408:# family = "HelveticaNeueLT Com 45 Lt"
1523459250408:)) +
1523459250409:scale_y_log10(expand = c(0, 0), position = "top",
1523459250409:breaks = c(1, 100, 1000, 10000, 100000),
1523459250409:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523459250410:# scale_fill_manual(values = rev(customPalette)) +
1523459250410:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523459250411:publicationTheme +
1523459250411:labs(x = "Typing Tool",#x = "Typing Scheme",
1523459250411:y = "Memory (RAM) consumption (MB)\n") +
1523459250412:coord_flip()
1523459250412:)
1523459250711:# Add annotation times
1523459250711:for (i in 1:nrow(annotationData)) {
1523459250711:lsRamPlot <- lsRamPlot + annotation_custom(
1523459250712:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523459250712:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523459250712:col = "#222222")),
1523459250713:ymin = log10(annotationData$ramMarks[i]),
1523459250713:ymax = log10(annotationData$ramMarks[i]),
1523459250713:xmin = 0.35,
1523459250714:xmax = 0.35)
1523459250714:}
1523459250746:# Remove clipping
1523459250747:gt <- ggplot_gtable(ggplot_build(lsRamPlot))
1523459251421:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523459251421:grid.draw(gt)
1523459251511:ggsave(filename = "sources/STing_vs_others.larger_schemes.ram.png", plot = gt,
1523459251511:width = 8, height = 8*0.61803)
1523459297504:# STing vs other sequence typing software
1523459297505:# Install an load packages ------------------------------------------------
1523459297506:installAndLoadPackages <- function(pkg){
1523459297507:cat("Please wait a moment! Checking for required packages... ")
1523459297509:cat("Done!\n")
1523459297509:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1523459297510:if (length(new.pkg)) {
1523459297511:cat("Installing new packages... ")
1523459297512:install.packages(new.pkg, dependencies = TRUE,
1523459297512:repos="http://cran.rstudio.com/")
1523459297513:cat("Done!\n")
1523459297514:}
1523459297515:cat("Loading packages... \n")
1523459297515:sapply(pkg, require, character.only = TRUE)
1523459297516:cat("Done!\n")
1523459297517:}
1523459297519:requiredPackages <- c("dplyr", "readr", "ggpubr", "RColorBrewer", "gridExtra",
1523459297519:"extrafont", "grid")
1523459297520:installAndLoadPackages(requiredPackages)
1523459297525:# Sources -----------------------------------------------------------------
1523459297526:# Loading Data ------------------------------------------------------------
1523459297526:inFile   <- "data/typer/stringMLST-comparisons.tsv"
1523459297526:compData <- read_tsv(inFile)
1523459297531:largerSchemesData <- read_tsv("data/typer/sting_vs_stringmlst.tsv")
1523459297540:# General configuration ---------------------------------------------------
1523459297540:customPalette <- c("#0a4f75","#91bbe4","#d7e4f5")
1523459297541:customPalette <- rev(brewer.pal(n = 7, name = "Paired"))
1523459297541:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#c81837"))
1523459297542:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#33A02C"))
1523459297542:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "gray50"))
1523459297542:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#86827F"))
1523459297542:customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#e8702a", "#edc374", "#faebd7", "#86827F"))
1523459297543:customPalette <- c('#86827F','#faebd7','#edc374','#e8702a','#d7e4f5','#91bbe4','#0a4f75')
1523459297544:width            <- 9
1523459297545:height           <- width * 0.618
1523459297545:lineSize         <- 0.5
1523459297545:annotLinetype    <- "solid"
1523459297546:axisColor        <- "#666666"
1523459297546:gridColor        <- "#cccccc"
1523459297547:baseTextSize     <- 18
1523459297547:barAnnotTextSize <- 4
1523459297548:barWidth         <- 0.7
1523459297548:# baseFontFamily   <- "Helvetica"
1523459297549:baseFontFamily   <- "Arial"
1523459297549:baseFontFamily   <- "HelveticaNeueLT Com 45 Lt"
1523459297549:baseFontFamily   <- "HelveticaNeueLT Std Lt"
1523459297550:publicationTheme <- list(
1523459297550:theme_pubr() +
1523459297551:theme(
1523459297551:axis.line.y  = element_blank(),
1523459297551:axis.text    = element_text(size = baseTextSize * 0.875,
1523459297552:family = baseFontFamily,
1523459297552:color = "black"),
1523459297552:axis.title.y = element_text(margin=margin(1, 10, 1, 1, "mm")),
1523459297553:axis.ticks.y = element_blank(),
1523459297553:axis.title   = element_text(size = baseTextSize),
1523459297553:panel.grid.major = element_blank(),
1523459297554:# panel.grid.major.x = element_line(colour = gridColor,
1523459297554:# size = lineSize),
1523459297554:plot.margin = margin(8, 20, 24, 8, "mm"),
1523459297555:text = element_text(size = baseTextSize,
1523459297555:family = baseFontFamily)
1523459297555:)
1523459297556:)
1523459297563:# Preparing data ----------------------------------------------------------
1523459297563:toolNameLevels <- compData$Tool_Name[c(6,4,5,7,3,2,1)]
1523459297564:dataToPlot <- compData %>%
1523459297564:arrange(Alleles) %>%
1523459297565:mutate(Tool_Name = factor(Tool_Name, toolNameLevels))
1523459297567:# Correct Predictions Plot ------------------------------------------------
1523459297567:predPlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Alleles)) +
1523459297568:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=barWidth,
1523459297568:stat = "identity", position = position_dodge(width=0.9),
1523459297568:show.legend = F) +
1523459297569:scale_y_continuous(expand = c(0, 0), position = "top") +
1523459297569:scale_fill_manual(values = customPalette) +
1523459297569:publicationTheme +
1523459297570:labs(x = "Typing Tool",
1523459297570:y = "Correct Alleles (%)\n") +
1523459297570:coord_flip()
1523459297577:predPlot
1523459297750:ggsave(filename = "sources/STing_vs_others.prediction.png", plot = predPlot,
1523459297750:width = 8, height = 8*0.61803)
1523459298138:# Time Plot ---------------------------------------------------------------
1523459298138:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523459298139:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523459298383:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523459298383:geom_hline(data = annotationData, aes(yintercept = timeMarks),
1523459298384:size = lineSize/1.5, color = gridColor, linetype = annotLinetype) +
1523459298384:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=barWidth,
1523459298384:stat = "identity", position = position_dodge(width=0.9),
1523459298385:show.legend = F) +
1523459298385:scale_y_log10(expand = c(0, 0), position = "top") +
1523459298385:scale_fill_manual(values = customPalette) +
1523459298386:publicationTheme +
1523459298386:labs(x = "Typing Tool",
1523459298387:y = "Run Time (s)\n") +
1523459298387:coord_flip()
1523459298396:# Add annotation times
1523459298396:for (i in 1:nrow(annotationData)) {
1523459298397:timePlot <- timePlot + annotation_custom(
1523459298397:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523459298397:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523459298398:col = "#222222")),
1523459298398:ymin = log10(annotationData$timeMarks[i]),
1523459298399:ymax = log10(annotationData$timeMarks[i]),
1523459298399:xmin = 0.35,
1523459298400:xmax = 0.35)
1523459298400:}
1523459298437:# Remove clipping
1523459298438:gt <- ggplot_gtable(ggplot_build(timePlot))
1523459298621:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523459298622:grid.draw(gt)
1523459298698:ggsave(filename = "sources/STing_vs_others.time.png", plot = gt,
1523459298698:width = 8, height = 8*0.61803)
1523459298994:# Larger schemes ----------------------------------------------------------
1523459298995:applicationLevels <- c("STing - Fast", "STing - Sensitive", "stringMLST")
1523459298996:# Larger schemes - preparing data------------------------------------------
1523459298996:(largerDataToPlot <- largerSchemesData %>%
1523459298997:filter(Scheme == "rMLST" | Scheme == "cgMLST") %>%
1523459298997:arrange(desc(Scheme), Application) %>%
1523459298998:# mutate(Species_scheme = as.factor(paste(Species, "-", Scheme)))
1523459298998:# mutate(Application_Scheme = factor(paste(Species, "-", Scheme)), applicationLevels))
1523459298998:mutate(Application = factor(Application, rev(applicationLevels)))
1523459298999:)
1523459299449:# Larger Schemes - Correct Predictions-------------------------------------
1523459299449:# customPalette <- c('#86827F','#faebd7','#edc374','#e8702a','#d7e4f5','#91bbe4','#0a4f75')
1523459299449:# customPalette <- c('#0a4f75','#91bbe4','#d7e4f5')
1523459299450:(
1523459299450:lsPredPlot <- ggplot(largerDataToPlot, aes(x = Application, y = Correct_Alleles)) +
1523459299450:# geom_bar(aes(fill = Application),
1523459299450:# stat = "identity", position = position_dodge(width = 0.9)) +
1523459299451:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523459299451:stat = "identity", position = position_dodge(width=0.9)) +
1523459299451:# show.legend = F) +
1523459299452:scale_y_continuous(limits = c(0, 100), expand = c(0, 0), position = "top") +
1523459299452:# scale_fill_manual(values = rev(customPalette)) +
1523459299453:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523459299453:publicationTheme +
1523459299453:labs(x = "Typing Tool", #"Typing Scheme",
1523459299454:y = "Correct Alleles (%)\n") +
1523459299454:coord_flip()
1523459299454:)
1523459299734:ggsave(filename = "sources/STing_vs_others.larger_schemes.prediction.png", plot = lsPredPlot,
1523459299734:width = 8, height = 8*0.61803)
1523459300155:# Larger schemes - Run Time -----------------------------------------------
1523459300155:annotationData <- data.frame(timeMarks = c(60, 15*60, 60*60, 12*60*60),
1523459300156:labels = c("1 min", "15 min", "1 hour", "12 hours"))
1523459300479:foldData <- largerDataToPlot %>%
1523459300479:filter(Application != "stringMLST")
1523459300482:(
1523459300483:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Application, y = Time)) +
1523459300483:geom_hline(data = annotationData, aes(yintercept = timeMarks),
1523459300484:size = lineSize/1.5, color = gridColor, linetype = annotLinetype) +
1523459300485:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523459300485:stat = "identity", position = position_dodge(width=0.9)) +
1523459300486:geom_text(data = foldData, position = position_dodge(width = 0.9),
1523459300486:hjust = 1.2, vjust = 0.5,
1523459300487:size = barAnnotTextSize,
1523459300488:# color = "white",
1523459300488:parse = TRUE,
1523459300489:# aes(label = Time_Fold, group = Application))
1523459300489:aes(label = paste0("bolditalic('",Time_Fold,"x')"),
1523459300489:group = Scheme#,
1523459300490:# family = "HelveticaNeueLT Com 45 Lt"
1523459300490:)) +
1523459300490:# show.legend = F) +
1523459300491:scale_y_log10(expand = c(0, 0), position = "top", limits = c(1, 100000),
1523459300491:breaks = c(1, 100, 1000, 10000, 100000),
1523459300492:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523459300492:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523459300493:publicationTheme +
1523459300493:labs(x = "Typing Scheme",
1523459300494:y = "Run Time (s)\n") +
1523459300494:coord_flip()
1523459300494:)
1523459300841:# Add annotation times
1523459300841:for (i in 1:nrow(annotationData)) {
1523459300842:lsTimePlot <- lsTimePlot + annotation_custom(
1523459300842:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523459300842:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523459300843:col = "#222222")),
1523459300843:ymin = log10(annotationData$timeMarks[i]),
1523459300843:ymax = log10(annotationData$timeMarks[i]),
1523459300844:xmin = 0.4,
1523459300844:xmax = 0.4)
1523459300844:}
1523459300870:# Remove clipping
1523459300871:gt <- ggplot_gtable(ggplot_build(lsTimePlot))
1523459301385:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523459301386:grid.draw(gt)
1523459301484:ggsave(filename = "sources/STing_vs_others.larger_schemes.time.png", plot = gt,
1523459301485:width = 8, height = 8*0.61803)
1523459301789:# Larger Schemes - RAM ----------------------------------------------------
1523459301790:annotationData <- data.frame(ramMarks = c(1000, 5000, 10000, 100000),
1523459301790:labels = c("1 GB", "5 GB", "10 GB", "100 GB"))
1523459302395:(
1523459302396:lsRamPlot <- ggplot(largerDataToPlot, aes(x = Application, y = RAM)) +
1523459302396:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523459302396:size = lineSize/1.5, color = gridColor, linetype = annotLinetype) +
1523459302397:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523459302397:stat = "identity", position = position_dodge(width=0.9)) +
1523459302397:# show.legend = F) +
1523459302398:geom_text(data = foldData, position = position_dodge(width = 0.9),
1523459302398:hjust = 1.2, vjust = 0.5,
1523459302398:size = barAnnotTextSize,
1523459302399:# color = "white",
1523459302399:parse = TRUE,
1523459302400:# aes(label = Time_Fold, group = Application))
1523459302400:aes(label = paste0("bolditalic('",RAM_Fold,"x')"),
1523459302400:group = Scheme#,
1523459302401:# family = "HelveticaNeueLT Com 45 Lt"
1523459302401:)) +
1523459302401:scale_y_log10(expand = c(0, 0), position = "top",
1523459302402:breaks = c(1, 100, 1000, 10000, 100000),
1523459302402:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523459302403:# scale_fill_manual(values = rev(customPalette)) +
1523459302403:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523459302403:publicationTheme +
1523459302404:labs(x = "Typing Tool",#x = "Typing Scheme",
1523459302404:y = "Memory (RAM) consumption (MB)\n") +
1523459302405:coord_flip()
1523459302405:)
1523459302776:# Add annotation times
1523459302777:for (i in 1:nrow(annotationData)) {
1523459302777:lsRamPlot <- lsRamPlot + annotation_custom(
1523459302777:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523459302778:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523459302778:col = "#222222")),
1523459302778:ymin = log10(annotationData$ramMarks[i]),
1523459302779:ymax = log10(annotationData$ramMarks[i]),
1523459302779:xmin = 0.35,
1523459302779:xmax = 0.35)
1523459302780:}
1523459302799:# Remove clipping
1523459302800:gt <- ggplot_gtable(ggplot_build(lsRamPlot))
1523459303448:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523459303449:grid.draw(gt)
1523459303534:ggsave(filename = "sources/STing_vs_others.larger_schemes.ram.png", plot = gt,
1523459303534:width = 8, height = 8*0.61803)
1523459345897:# STing vs other sequence typing software
1523459345899:# Install an load packages ------------------------------------------------
1523459345900:installAndLoadPackages <- function(pkg){
1523459345900:cat("Please wait a moment! Checking for required packages... ")
1523459345900:cat("Done!\n")
1523459345901:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1523459345901:if (length(new.pkg)) {
1523459345902:cat("Installing new packages... ")
1523459345902:install.packages(new.pkg, dependencies = TRUE,
1523459345902:repos="http://cran.rstudio.com/")
1523459345903:cat("Done!\n")
1523459345903:}
1523459345904:cat("Loading packages... \n")
1523459345904:sapply(pkg, require, character.only = TRUE)
1523459345904:cat("Done!\n")
1523459345905:}
1523459345906:requiredPackages <- c("dplyr", "readr", "ggpubr", "RColorBrewer", "gridExtra",
1523459345906:"extrafont", "grid")
1523459345907:installAndLoadPackages(requiredPackages)
1523459345912:# Sources -----------------------------------------------------------------
1523459345912:# Loading Data ------------------------------------------------------------
1523459345913:inFile   <- "data/typer/stringMLST-comparisons.tsv"
1523459345913:compData <- read_tsv(inFile)
1523459345918:largerSchemesData <- read_tsv("data/typer/sting_vs_stringmlst.tsv")
1523459345928:# General configuration ---------------------------------------------------
1523459345929:customPalette <- c("#0a4f75","#91bbe4","#d7e4f5")
1523459345930:customPalette <- rev(brewer.pal(n = 7, name = "Paired"))
1523459345931:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#c81837"))
1523459345931:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#33A02C"))
1523459345932:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "gray50"))
1523459345932:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#86827F"))
1523459345934:customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#e8702a", "#edc374", "#faebd7", "#86827F"))
1523459345935:customPalette <- c('#86827F','#faebd7','#edc374','#e8702a','#d7e4f5','#91bbe4','#0a4f75')
1523459345936:width            <- 9
1523459345937:height           <- width * 0.618
1523459345938:lineSize         <- 0.5
1523459345939:annotLinetype    <- "solid"
1523459345940:axisColor        <- "#666666"
1523459345941:gridColor        <- "#cccccc"
1523459345941:baseTextSize     <- 18
1523459345942:barAnnotTextSize <- 4
1523459345943:barWidth         <- 0.75
1523459345944:# baseFontFamily   <- "Helvetica"
1523459345945:baseFontFamily   <- "Arial"
1523459345945:baseFontFamily   <- "HelveticaNeueLT Com 45 Lt"
1523459345946:baseFontFamily   <- "HelveticaNeueLT Std Lt"
1523459345947:publicationTheme <- list(
1523459345948:theme_pubr() +
1523459345949:theme(
1523459345949:axis.line.y  = element_blank(),
1523459345950:axis.text    = element_text(size = baseTextSize * 0.875,
1523459345950:family = baseFontFamily,
1523459345951:color = "black"),
1523459345951:axis.title.y = element_text(margin=margin(1, 10, 1, 1, "mm")),
1523459345952:axis.ticks.y = element_blank(),
1523459345952:axis.title   = element_text(size = baseTextSize),
1523459345953:panel.grid.major = element_blank(),
1523459345953:# panel.grid.major.x = element_line(colour = gridColor,
1523459345954:# size = lineSize),
1523459345955:plot.margin = margin(8, 20, 24, 8, "mm"),
1523459345955:text = element_text(size = baseTextSize,
1523459345956:family = baseFontFamily)
1523459345956:)
1523459345957:)
1523459345968:# Preparing data ----------------------------------------------------------
1523459345969:toolNameLevels <- compData$Tool_Name[c(6,4,5,7,3,2,1)]
1523459345970:dataToPlot <- compData %>%
1523459345971:arrange(Alleles) %>%
1523459345971:mutate(Tool_Name = factor(Tool_Name, toolNameLevels))
1523459345975:# Correct Predictions Plot ------------------------------------------------
1523459345976:predPlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Alleles)) +
1523459345976:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=barWidth,
1523459345977:stat = "identity", position = position_dodge(width=0.9),
1523459345977:show.legend = F) +
1523459345978:scale_y_continuous(expand = c(0, 0), position = "top") +
1523459345978:scale_fill_manual(values = customPalette) +
1523459345979:publicationTheme +
1523459345979:labs(x = "Typing Tool",
1523459345980:y = "Correct Alleles (%)\n") +
1523459345980:coord_flip()
1523459345995:predPlot
1523459346282:ggsave(filename = "sources/STing_vs_others.prediction.png", plot = predPlot,
1523459346282:width = 8, height = 8*0.61803)
1523459346721:# Time Plot ---------------------------------------------------------------
1523459346722:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523459346722:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523459346950:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523459346950:geom_hline(data = annotationData, aes(yintercept = timeMarks),
1523459346950:size = lineSize/1.5, color = gridColor, linetype = annotLinetype) +
1523459346951:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=barWidth,
1523459346951:stat = "identity", position = position_dodge(width=0.9),
1523459346951:show.legend = F) +
1523459346952:scale_y_log10(expand = c(0, 0), position = "top") +
1523459346952:scale_fill_manual(values = customPalette) +
1523459346952:publicationTheme +
1523459346953:labs(x = "Typing Tool",
1523459346953:y = "Run Time (s)\n") +
1523459346954:coord_flip()
1523459346961:# Add annotation times
1523459346961:for (i in 1:nrow(annotationData)) {
1523459346962:timePlot <- timePlot + annotation_custom(
1523459346962:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523459346962:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523459346963:col = "#222222")),
1523459346963:ymin = log10(annotationData$timeMarks[i]),
1523459346963:ymax = log10(annotationData$timeMarks[i]),
1523459346964:xmin = 0.35,
1523459346964:xmax = 0.35)
1523459346964:}
1523459346992:# Remove clipping
1523459346993:gt <- ggplot_gtable(ggplot_build(timePlot))
1523459347172:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523459347173:grid.draw(gt)
1523459347225:ggsave(filename = "sources/STing_vs_others.time.png", plot = gt,
1523459347225:width = 8, height = 8*0.61803)
1523459347513:# Larger schemes ----------------------------------------------------------
1523459347513:applicationLevels <- c("STing - Fast", "STing - Sensitive", "stringMLST")
1523459347515:# Larger schemes - preparing data------------------------------------------
1523459347515:(largerDataToPlot <- largerSchemesData %>%
1523459347516:filter(Scheme == "rMLST" | Scheme == "cgMLST") %>%
1523459347516:arrange(desc(Scheme), Application) %>%
1523459347516:# mutate(Species_scheme = as.factor(paste(Species, "-", Scheme)))
1523459347517:# mutate(Application_Scheme = factor(paste(Species, "-", Scheme)), applicationLevels))
1523459347517:mutate(Application = factor(Application, rev(applicationLevels)))
1523459347517:)
1523459348002:# Larger Schemes - Correct Predictions-------------------------------------
1523459348002:# customPalette <- c('#86827F','#faebd7','#edc374','#e8702a','#d7e4f5','#91bbe4','#0a4f75')
1523459348003:# customPalette <- c('#0a4f75','#91bbe4','#d7e4f5')
1523459348003:(
1523459348003:lsPredPlot <- ggplot(largerDataToPlot, aes(x = Application, y = Correct_Alleles)) +
1523459348004:# geom_bar(aes(fill = Application),
1523459348004:# stat = "identity", position = position_dodge(width = 0.9)) +
1523459348004:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523459348004:stat = "identity", position = position_dodge(width=0.9)) +
1523459348005:# show.legend = F) +
1523459348005:scale_y_continuous(limits = c(0, 100), expand = c(0, 0), position = "top") +
1523459348005:# scale_fill_manual(values = rev(customPalette)) +
1523459348006:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523459348006:publicationTheme +
1523459348006:labs(x = "Typing Tool", #"Typing Scheme",
1523459348007:y = "Correct Alleles (%)\n") +
1523459348007:coord_flip()
1523459348007:)
1523459348265:ggsave(filename = "sources/STing_vs_others.larger_schemes.prediction.png", plot = lsPredPlot,
1523459348265:width = 8, height = 8*0.61803)
1523459348680:# Larger schemes - Run Time -----------------------------------------------
1523459348680:annotationData <- data.frame(timeMarks = c(60, 15*60, 60*60, 12*60*60),
1523459348681:labels = c("1 min", "15 min", "1 hour", "12 hours"))
1523459348942:foldData <- largerDataToPlot %>%
1523459348942:filter(Application != "stringMLST")
1523459348944:(
1523459348945:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Application, y = Time)) +
1523459348945:geom_hline(data = annotationData, aes(yintercept = timeMarks),
1523459348946:size = lineSize/1.5, color = gridColor, linetype = annotLinetype) +
1523459348946:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523459348946:stat = "identity", position = position_dodge(width=0.9)) +
1523459348947:geom_text(data = foldData, position = position_dodge(width = 0.9),
1523459348947:hjust = 1.2, vjust = 0.5,
1523459348947:size = barAnnotTextSize,
1523459348948:# color = "white",
1523459348948:parse = TRUE,
1523459348949:# aes(label = Time_Fold, group = Application))
1523459348949:aes(label = paste0("bolditalic('",Time_Fold,"x')"),
1523459348949:group = Scheme#,
1523459348950:# family = "HelveticaNeueLT Com 45 Lt"
1523459348950:)) +
1523459348950:# show.legend = F) +
1523459348951:scale_y_log10(expand = c(0, 0), position = "top", limits = c(1, 100000),
1523459348951:breaks = c(1, 100, 1000, 10000, 100000),
1523459348952:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523459348953:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523459348953:publicationTheme +
1523459348954:labs(x = "Typing Scheme",
1523459348954:y = "Run Time (s)\n") +
1523459348955:coord_flip()
1523459348955:)
1523459349305:# Add annotation times
1523459349306:for (i in 1:nrow(annotationData)) {
1523459349306:lsTimePlot <- lsTimePlot + annotation_custom(
1523459349306:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523459349307:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523459349307:col = "#222222")),
1523459349307:ymin = log10(annotationData$timeMarks[i]),
1523459349308:ymax = log10(annotationData$timeMarks[i]),
1523459349308:xmin = 0.4,
1523459349308:xmax = 0.4)
1523459349309:}
1523459349330:# Remove clipping
1523459349330:gt <- ggplot_gtable(ggplot_build(lsTimePlot))
1523459349922:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523459349923:grid.draw(gt)
1523459350009:ggsave(filename = "sources/STing_vs_others.larger_schemes.time.png", plot = gt,
1523459350010:width = 8, height = 8*0.61803)
1523459350950:# Larger Schemes - RAM ----------------------------------------------------
1523459350951:annotationData <- data.frame(ramMarks = c(1000, 5000, 10000, 100000),
1523459350951:labels = c("1 GB", "5 GB", "10 GB", "100 GB"))
1523459350952:(
1523459350952:lsRamPlot <- ggplot(largerDataToPlot, aes(x = Application, y = RAM)) +
1523459350953:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523459350953:size = lineSize/1.5, color = gridColor, linetype = annotLinetype) +
1523459350953:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523459350954:stat = "identity", position = position_dodge(width=0.9)) +
1523459350954:# show.legend = F) +
1523459350954:geom_text(data = foldData, position = position_dodge(width = 0.9),
1523459350955:hjust = 1.2, vjust = 0.5,
1523459350955:size = barAnnotTextSize,
1523459350955:# color = "white",
1523459350956:parse = TRUE,
1523459350956:# aes(label = Time_Fold, group = Application))
1523459350956:aes(label = paste0("bolditalic('",RAM_Fold,"x')"),
1523459350957:group = Scheme#,
1523459350957:# family = "HelveticaNeueLT Com 45 Lt"
1523459350957:)) +
1523459350958:scale_y_log10(expand = c(0, 0), position = "top",
1523459350958:breaks = c(1, 100, 1000, 10000, 100000),
1523459350959:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523459350959:# scale_fill_manual(values = rev(customPalette)) +
1523459350960:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523459350960:publicationTheme +
1523459350961:labs(x = "Typing Tool",#x = "Typing Scheme",
1523459350961:y = "Memory (RAM) consumption (MB)\n") +
1523459350962:coord_flip()
1523459350962:)
1523459351290:# Add annotation times
1523459351291:for (i in 1:nrow(annotationData)) {
1523459351292:lsRamPlot <- lsRamPlot + annotation_custom(
1523459351292:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523459351293:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523459351293:col = "#222222")),
1523459351294:ymin = log10(annotationData$ramMarks[i]),
1523459351294:ymax = log10(annotationData$ramMarks[i]),
1523459351295:xmin = 0.35,
1523459351295:xmax = 0.35)
1523459351295:}
1523459351316:# Remove clipping
1523459351316:gt <- ggplot_gtable(ggplot_build(lsRamPlot))
1523459351882:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523459351883:grid.draw(gt)
1523459352012:ggsave(filename = "sources/STing_vs_others.larger_schemes.ram.png", plot = gt,
1523459352013:width = 8, height = 8*0.61803)
1523459891447:# STing vs other sequence typing software
1523459891447:# Install an load packages ------------------------------------------------
1523459891448:installAndLoadPackages <- function(pkg){
1523459891448:cat("Please wait a moment! Checking for required packages... ")
1523459891449:cat("Done!\n")
1523459891450:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1523459891450:if (length(new.pkg)) {
1523459891450:cat("Installing new packages... ")
1523459891451:install.packages(new.pkg, dependencies = TRUE,
1523459891451:repos="http://cran.rstudio.com/")
1523459891451:cat("Done!\n")
1523459891452:}
1523459891452:cat("Loading packages... \n")
1523459891453:sapply(pkg, require, character.only = TRUE)
1523459891453:cat("Done!\n")
1523459891453:}
1523459891454:requiredPackages <- c("dplyr", "readr", "ggpubr", "RColorBrewer", "gridExtra",
1523459891455:"extrafont", "grid")
1523459891455:installAndLoadPackages(requiredPackages)
1523459891460:# Sources -----------------------------------------------------------------
1523459891461:# Loading Data ------------------------------------------------------------
1523459891461:inFile   <- "data/typer/stringMLST-comparisons.tsv"
1523459891462:compData <- read_tsv(inFile)
1523459891466:largerSchemesData <- read_tsv("data/typer/sting_vs_stringmlst.tsv")
1523459891471:# General configuration ---------------------------------------------------
1523459891471:customPalette <- c("#0a4f75","#91bbe4","#d7e4f5")
1523459891472:customPalette <- rev(brewer.pal(n = 7, name = "Paired"))
1523459891473:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#c81837"))
1523459891473:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#33A02C"))
1523459891473:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "gray50"))
1523459891473:# customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#faebd7", "#edc374", "#e8702a", "#86827F"))
1523459891474:customPalette <- rev(c("#0a4f75","#91bbe4","#d7e4f5","#e8702a", "#edc374", "#faebd7", "#86827F"))
1523459891474:customPalette <- c('#86827F','#faebd7','#edc374','#e8702a','#d7e4f5','#91bbe4','#0a4f75')
1523459891475:width            <- 9
1523459891476:height           <- width * 0.618
1523459891476:lineSize         <- 0.5
1523459891477:annotLinetype    <- "solid"
1523459891477:axisColor        <- "#666666"
1523459891478:gridColor        <- "#cccccc"
1523459891478:baseTextSize     <- 18
1523459891479:barAnnotTextSize <- 4
1523459891479:barWidth         <- 0.75
1523459891479:# baseFontFamily   <- "Helvetica"
1523459891480:baseFontFamily   <- "Arial"
1523459891480:baseFontFamily   <- "HelveticaNeueLT Com 45 Lt"
1523459891481:baseFontFamily   <- "HelveticaNeueLT Std Lt"
1523459891481:publicationTheme <- list(
1523459891482:theme_pubr() +
1523459891482:theme(
1523459891482:axis.line.y  = element_blank(),
1523459891483:axis.text    = element_text(size = baseTextSize * 0.875,
1523459891483:family = baseFontFamily,
1523459891483:color = "black"),
1523459891484:axis.title.y = element_text(margin=margin(1, 10, 1, 1, "mm")),
1523459891484:axis.ticks.y = element_blank(),
1523459891484:axis.title   = element_text(size = baseTextSize),
1523459891485:panel.grid.major = element_blank(),
1523459891485:# panel.grid.major.x = element_line(colour = gridColor,
1523459891485:# size = lineSize),
1523459891486:plot.margin = margin(8, 20, 24, 8, "mm"),
1523459891486:text = element_text(size = baseTextSize,
1523459891487:family = baseFontFamily)
1523459891487:)
1523459891487:)
1523459891494:# Preparing data ----------------------------------------------------------
1523459891495:toolNameLevels <- compData$Tool_Name[c(6,4,5,7,3,2,1)]
1523459891496:dataToPlot <- compData %>%
1523459891496:arrange(Alleles) %>%
1523459891496:mutate(Tool_Name = factor(Tool_Name, toolNameLevels))
1523459891500:# Correct Predictions Plot ------------------------------------------------
1523459891501:predPlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Alleles)) +
1523459891501:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=barWidth,
1523459891502:stat = "identity", position = position_dodge(width=0.9),
1523459891502:show.legend = F) +
1523459891502:scale_y_continuous(expand = c(0, 0), position = "top") +
1523459891504:scale_fill_manual(values = customPalette) +
1523459891504:publicationTheme +
1523459891504:labs(x = "Typing Tool",
1523459891505:y = "Correct Alleles (%)\n") +
1523459891505:coord_flip()
1523459891511:predPlot
1523459891694:ggsave(filename = "sources/STing_vs_others.prediction.png", plot = predPlot,
1523459891694:width = 8, height = 8*0.61803)
1523459892052:# Time Plot ---------------------------------------------------------------
1523459892053:annotationData <- data.frame(timeMarks = c(30, 60, 15*60, 45*60),
1523459892053:labels = c("30 sec", "1 min", "15 min", "45 min"))
1523459892271:timePlot <- ggplot(dataToPlot, aes(x = Tool_Name, y = Run_time)) +
1523459892271:geom_hline(data = annotationData, aes(yintercept = timeMarks),
1523459892272:size = lineSize/1.5, color = gridColor, linetype = annotLinetype) +
1523459892272:geom_bar(aes(fill = Tool_Name), color = "black", size = 0.5, width=barWidth,
1523459892273:stat = "identity", position = position_dodge(width=0.9),
1523459892273:show.legend = F) +
1523459892273:scale_y_log10(expand = c(0, 0), position = "top") +
1523459892274:scale_fill_manual(values = customPalette) +
1523459892274:publicationTheme +
1523459892274:labs(x = "Typing Tool",
1523459892275:y = "Run Time (s)\n") +
1523459892275:coord_flip()
1523459892286:# Add annotation times
1523459892286:for (i in 1:nrow(annotationData)) {
1523459892286:timePlot <- timePlot + annotation_custom(
1523459892287:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523459892287:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523459892288:col = "#222222")),
1523459892288:ymin = log10(annotationData$timeMarks[i]),
1523459892288:ymax = log10(annotationData$timeMarks[i]),
1523459892289:xmin = 0.35,
1523459892289:xmax = 0.35)
1523459892289:}
1523459892319:# Remove clipping
1523459892320:gt <- ggplot_gtable(ggplot_build(timePlot))
1523459892515:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523459892515:grid.draw(gt)
1523459892572:ggsave(filename = "sources/STing_vs_others.time.png", plot = gt,
1523459892572:width = 8, height = 8*0.61803)
1523459893346:# Larger schemes ----------------------------------------------------------
1523459893347:applicationLevels <- c("STing - Fast", "STing - Sensitive", "stringMLST")
1523459893347:# Larger schemes - preparing data------------------------------------------
1523459893348:(largerDataToPlot <- largerSchemesData %>%
1523459893348:filter(Scheme == "rMLST" | Scheme == "cgMLST") %>%
1523459893348:arrange(desc(Scheme), Application) %>%
1523459893349:# mutate(Species_scheme = as.factor(paste(Species, "-", Scheme)))
1523459893349:# mutate(Application_Scheme = factor(paste(Species, "-", Scheme)), applicationLevels))
1523459893349:mutate(Application = factor(Application, rev(applicationLevels)))
1523459893350:)
1523459893431:# Larger Schemes - Correct Predictions-------------------------------------
1523459893431:# customPalette <- c('#86827F','#faebd7','#edc374','#e8702a','#d7e4f5','#91bbe4','#0a4f75')
1523459893431:# customPalette <- c('#0a4f75','#91bbe4','#d7e4f5')
1523459893432:(
1523459893432:lsPredPlot <- ggplot(largerDataToPlot, aes(x = Application, y = Correct_Alleles)) +
1523459893432:# geom_bar(aes(fill = Application),
1523459893433:# stat = "identity", position = position_dodge(width = 0.9)) +
1523459893433:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523459893433:stat = "identity", position = position_dodge(width=0.9)) +
1523459893434:# show.legend = F) +
1523459893434:scale_y_continuous(limits = c(0, 100), expand = c(0, 0), position = "top") +
1523459893434:# scale_fill_manual(values = rev(customPalette)) +
1523459893435:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523459893435:publicationTheme +
1523459893436:labs(x = "Typing Tool", #"Typing Scheme",
1523459893436:y = "Correct Alleles (%)\n") +
1523459893437:coord_flip()
1523459893437:)
1523459893725:ggsave(filename = "sources/STing_vs_others.larger_schemes.prediction.png", plot = lsPredPlot,
1523459893725:width = 8, height = 8*0.61803)
1523459894447:# Larger schemes - Run Time -----------------------------------------------
1523459894448:annotationData <- data.frame(timeMarks = c(60, 15*60, 60*60, 12*60*60),
1523459894448:labels = c("1 min", "15 min", "1 hour", "12 hours"))
1523459894449:foldData <- largerDataToPlot %>%
1523459894450:filter(Application != "stringMLST")
1523459894452:(
1523459894452:lsTimePlot <- ggplot(largerDataToPlot, aes(x = Application, y = Time)) +
1523459894452:geom_hline(data = annotationData, aes(yintercept = timeMarks),
1523459894453:size = lineSize/1.5, color = gridColor, linetype = annotLinetype) +
1523459894453:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523459894453:stat = "identity", position = position_dodge(width=0.9)) +
1523459894454:geom_text(data = foldData, position = position_dodge(width = 0.9),
1523459894454:hjust = 1.2, vjust = 0.5,
1523459894454:size = barAnnotTextSize,
1523459894455:# color = "white",
1523459894455:parse = TRUE,
1523459894455:# aes(label = Time_Fold, group = Application))
1523459894456:aes(label = paste0("bolditalic('",Time_Fold,"x')"),
1523459894456:group = Scheme#,
1523459894456:# family = "HelveticaNeueLT Com 45 Lt"
1523459894457:)) +
1523459894457:# show.legend = F) +
1523459894458:scale_y_log10(expand = c(0, 0), position = "top", limits = c(1, 100000),
1523459894458:breaks = c(1, 100, 1000, 10000, 100000),
1523459894459:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523459894459:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523459894459:publicationTheme +
1523459894460:labs(x = "Typing Tool",
1523459894460:y = "Run Time (s)\n") +
1523459894461:coord_flip()
1523459894461:)
1523459894742:# Add annotation times
1523459894742:for (i in 1:nrow(annotationData)) {
1523459894743:lsTimePlot <- lsTimePlot + annotation_custom(
1523459894743:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523459894744:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523459894744:col = "#222222")),
1523459894744:ymin = log10(annotationData$timeMarks[i]),
1523459894745:ymax = log10(annotationData$timeMarks[i]),
1523459894745:xmin = 0.4,
1523459894746:xmax = 0.4)
1523459894746:}
1523459894765:# Remove clipping
1523459894765:gt <- ggplot_gtable(ggplot_build(lsTimePlot))
1523459895372:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523459895372:grid.draw(gt)
1523459895484:ggsave(filename = "sources/STing_vs_others.larger_schemes.time.png", plot = gt,
1523459895485:width = 8, height = 8*0.61803)
1523459895836:# Larger Schemes - RAM ----------------------------------------------------
1523459895837:annotationData <- data.frame(ramMarks = c(1000, 5000, 10000, 100000),
1523459895837:labels = c("1 GB", "5 GB", "10 GB", "100 GB"))
1523459896474:(
1523459896474:lsRamPlot <- ggplot(largerDataToPlot, aes(x = Application, y = RAM)) +
1523459896474:geom_hline(data = annotationData, aes(yintercept = ramMarks),
1523459896475:size = lineSize/1.5, color = gridColor, linetype = annotLinetype) +
1523459896475:geom_bar(aes(fill = Scheme), color = "black", size = 0.5,
1523459896475:stat = "identity", position = position_dodge(width=0.9)) +
1523459896476:# show.legend = F) +
1523459896476:geom_text(data = foldData, position = position_dodge(width = 0.9),
1523459896476:hjust = 1.2, vjust = 0.5,
1523459896477:size = barAnnotTextSize,
1523459896477:# color = "white",
1523459896478:parse = TRUE,
1523459896478:# aes(label = Time_Fold, group = Application))
1523459896478:aes(label = paste0("bolditalic('",RAM_Fold,"x')"),
1523459896479:group = Scheme#,
1523459896479:# family = "HelveticaNeueLT Com 45 Lt"
1523459896479:)) +
1523459896480:scale_y_log10(expand = c(0, 0), position = "top",
1523459896480:breaks = c(1, 100, 1000, 10000, 100000),
1523459896480:labels = c(expression(1), expression(10^2), expression(10^3), expression(10^4), expression(10^5))) +
1523459896481:# scale_fill_manual(values = rev(customPalette)) +
1523459896481:scale_fill_manual(values = brewer.pal(4, "Paired")[3:4]) +
1523459896482:publicationTheme +
1523459896482:labs(x = "Typing Tool",#x = "Typing Scheme",
1523459896482:y = "Memory (RAM) consumption (MB)\n") +
1523459896483:coord_flip()
1523459896483:)
1523459896811:# Add annotation times
1523459896811:for (i in 1:nrow(annotationData)) {
1523459896812:lsRamPlot <- lsRamPlot + annotation_custom(
1523459896812:grob = textGrob(label = annotationData$labels[i], hjust = 0, vjust = 1,
1523459896812:rot = 310, gp = gpar(fontsize = baseTextSize * 0.875,
1523459896813:col = "#222222")),
1523459896813:ymin = log10(annotationData$ramMarks[i]),
1523459896813:ymax = log10(annotationData$ramMarks[i]),
1523459896814:xmin = 0.35,
1523459896814:xmax = 0.35)
1523459896814:}
1523459896845:# Remove clipping
1523459896846:gt <- ggplot_gtable(ggplot_build(lsRamPlot))
1523459897366:gt$layout$clip[gt$layout$name == "panel"] <- "off"
1523459897367:grid.draw(gt)
1523459897486:ggsave(filename = "sources/STing_vs_others.larger_schemes.ram.png", plot = gt,
1523459897486:width = 8, height = 8*0.61803)
1527775379222:# Avaluation of MentaLiST, Ariba and STing results for MLST, rMLST and cgMLST
1527775379270:# Install an load packages ------------------------------------------------
1527775379270:installAndLoadPackages <- function(pkg){
1527775379270:cat("Please wait a moment! Checking for required packages... ")
1527775379270:cat("Done!\n")
1527775379271:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1527775379271:if (length(new.pkg)) {
1527775379272:cat("Installing new packages... ")
1527775379272:install.packages(new.pkg, dependencies = TRUE,
1527775379272:repos="http://cran.rstudio.com/")
1527775379272:cat("Done!\n")
1527775379273:}
1527775379273:cat("Loading packages... \n")
1527775379273:sapply(pkg, require, character.only = TRUE)
1527775379274:cat("Done!\n")
1527775379274:}
1527775379275:requiredPackages <- c("dplyr", "readr", "ggpubr", "RColorBrewer", "gridExtra",
1527775379275:"extrafont", "grid")
1527775379276:installAndLoadPackages(requiredPackages)
