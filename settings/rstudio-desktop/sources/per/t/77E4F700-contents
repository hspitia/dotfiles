#!/usr/bin/env Rscript

################################################################################
# Author:   Hector Fabio Espitia Navarro
#           Georgia Institute of Technology
#           
# Version:  1.0
# Date:     02/18/2017
################################################################################
# Install required packages
personal.lib.path <- Sys.getenv("R_LIBS_USER")
if(!file.exists(personal.lib.path))                                                                                    
  dir.create(personal.lib.path)

installAndLoadPackages <- function(pkg){
  cat("Please wait a moment! Checking for required packages... ")
  cat("Done!\n")
  new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
  if (length(new.pkg)) {
    cat("Installing new packages... ")
    install.packages(new.pkg, dependencies = TRUE,
                     repos="http://cran.rstudio.com/",
                     lib = personal.lib.path)
    cat("Done!\n")
  }
  cat("Loading required packages... ")
  sapply(pkg, function(x){
    suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
  })
  cat("Done!\n")
}

# github.packages <- c("tibble")
github.related.packages <- c("devtools", "Rcpp")
packages <- c("argparser", "tidyverse", "RColorBrewer")#, "ggplot2",  "tidyr")

installAndLoadPackages(packages)
# if(any(!(github.related.packages %in% installed.packages()))) {
#   cat("Please wait a moment! Installing required packages... ")
#   install.packages(github.related.packages[!(github.related.packages %in% installed.packages())],
#                    quiet = T, repos="http://cran.rstudio.com/",
#                    lib = personal.lib.path, dependencies = TRUE)
#   if(any(!(github.packages %in% installed.packages()))){
#     devtools::install_github("tidyverse/tibble", 
#                              lib = personal.lib.path, 
#                              quiet = T)
#   }
# }
# 
# if(any(!(packages %in% installed.packages()))){
#   cat("Please wait a moment! Installing required packages... ")
#   install.packages(packages[!(packages %in% installed.packages())], 
#                    quiet = T, repos="http://cran.rstudio.com/",
#                    lib = personal.lib.path, dependencies = TRUE)
#   cat("Done!\n\n\n")
#   cat("Executing the script:\n\n")
# }
# 
# # Load packages
# suppressPackageStartupMessages(library(argparser, quietly = TRUE))
# suppressPackageStartupMessages(library(tidyverse, quietly = TRUE))
# # suppressPackageStartupMessages(library(ggplot2, quietly = TRUE))
# # suppressPackageStartupMessages(library(tidyr, quietly = TRUE))
# suppressPackageStartupMessages(library(RColorBrewer, quietly = TRUE))
################################################################################

# Get script name
initial.options <- commandArgs(trailingOnly = FALSE)
script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))

# Process command line arguments
# Create a parser
p <- arg_parser("This script generates K-mer depth plots using as input data the file generated by STing typer tool (-t option).",
                name = script.name)
# Add Positional arguments (required)
p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
# Add options
p <- add_argument(p, "--prefix", help = "Filename prefix for output files.", 
                  default = "kmer_depth_plot")

p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'", 
                  default = "pdf")

# Parse command line arguments
argv <- parse_args(p)

# Initialization of variables

command.line = TRUE   # Turn to FALSE to test the script inside RStudio
if(command.line) {
  # Get argument values from command line
  input.file <- argv$input_file
  out.format <- argv$format
  out.prefix <- argv$prefix
} else {
  # Values to test the script using RStudio
  script.home = "/home/hspitia/projects/sting"
  input.file <- paste(script.home, "depth2.tsv", sep = "/")
  out.format <- "pdf"
  out.prefix <- "~/kmer_depth_plot"
}

# ################################################################################
CheckFileExists <- function(file.list) {
  non.exist.files <- !file.exists(file.list)
  if(any(non.exist.files)) {
    sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
  }
}
# ################################################################################
# Check for input files
files.to.check <- c(input.file)
error.message  <- CheckFileExists(files.to.check)

if(!is.null(error.message)){
  stop(error.message)
} else {
  # ========================================================================
  # Code core - Begin
  # ========================================================================
  cat("Plotting depths... ")
  options(stringsAsFactors = T)
  # Load data
  inData <- read.delim(input.file)
  # print(head(inData))
  
  # colnames(inData) <- c("Allele", "Position", "k-mer Depth", "Weighted k-mer Depth")
  colnames(inData) <- c("Allele", "Position", "k-mer Depth")
  
  # longData <- inData %>% gather(DepthType, Depth, -c(Allele, Position))
  longData <- inData %>% gather(DepthType, Depth, -c(Allele, Position)) %>%
    filter(DepthType == 'k-mer Depth')
  # profiles <- unique(inData$n_best_prof)
  profiles <- c(1)
  # ==============================================================
  plotDepths <- function(data.to.plot) {
    colourCount = length(unique(data.to.plot$Allele))
    getPalette = colorRampPalette(brewer.pal(9, "Set1"))
    
    max.x <- max(data.to.plot$Position)
    max.y <- max(data.to.plot$Depth)
    x.limits <- seq(0, max.x, 100)
    y.limits <- seq(0, max.y, 20)
    
    d.plot <- ggplot(data = data.to.plot, aes(x = Position, 
                                              y = Depth,
                                              color = Allele,
                                              fill = Allele),
                     size = 0.2) 
    d.plot <- d.plot + geom_area(alpha = 0.6
    )
    d.plot <- d.plot + scale_fill_hue(l = 40)
    d.plot <- d.plot + scale_color_hue(l = 40)
    # if (colourCount > 9) {
    #   d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
    #   d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
    # } else {
    #   d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
    #   d.plot <- d.plot + scale_color_brewer(palette = "Set1")
    # }
    d.plot <- d.plot + facet_grid(Allele ~ .)
    # d.plot <- d.plot + facet_grid(Allele ~ DepthType)
    # d.plot <- d.plot + facet_grid(. ~ Allele)
    d.plot <- d.plot + scale_x_discrete(limits = x.limits,
                                        expand = c(0, 2.0))
    # d.plot <- d.plot + scale_y_discrete(limits = y.limits,
    #                                     expand = c(0, 2))
    d.plot <- d.plot + theme_bw()
    d.plot <- d.plot + labs(title = "K-mer Depth",
                            subtitle = basename(input.file),
                            x     = "Position along sequence (bp)",
                            y     = "k-mer Depth")
    # d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
    # color = FALSE)
    d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
                             axis.text.x = element_text(angle = 50,
                                                        vjust = 1, 
                                                        hjust = 1,
                                                        size = 7))
    d.plot
  }
  
  plotDepth <- function(data.to.plot) {
    colourCount = length(unique(data.to.plot$Allele))
    getPalette = colorRampPalette(brewer.pal(9, "Set1"))
    
    max.x <- max(data.to.plot$Position)
    max.y <- max(data.to.plot$kmer_depth)
    x.limits <- seq(0, max.x, 50)
    y.limits <- seq(0, max.y, 20)
    
    d.plot <- ggplot(data = data.to.plot, aes(x = Position, 
                                              y = "k-mer Depth",
                                              color = Allele,
                                              fill = Allele)) 
    d.plot <- d.plot + geom_area(alpha = 0.6
    )
    d.plot <- d.plot + scale_fill_hue(l = 40)
    d.plot <- d.plot + scale_color_hue(l = 40)
    # if (colourCount > 9) {
    #   d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
    #   d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
    # } else {
    #   d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
    #   d.plot <- d.plot + scale_color_brewer(palette = "Set1")
    # }
    d.plot <- d.plot + facet_grid(Allele ~ .)
    # d.plot <- d.plot + facet_grid(. ~ Allele)
    d.plot <- d.plot + scale_x_discrete(limits = x.limits,
                                        expand = c(0, 2.0))
    # d.plot <- d.plot + scale_y_discrete(limits = y.limits,
    #                                     expand = c(0, 2))
    d.plot <- d.plot + theme_bw()
    d.plot <- d.plot + labs(title = "K-mer Depth",
                            x     = "Position along sequence (bp)",
                            y     = "Depth")
    d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
                              color = FALSE)
    d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
                             axis.text.x = element_text(angle = 50,
                                                        vjust = 1, 
                                                        hjust = 1))
    d.plot
  }
  # ==============================================================
  for(i in seq_along(profiles)) {
    prof         <- profiles[i];
    # data.to.plot <- inData[inData$n_best_prof == prof, ]
    # data.to.plot <- inData
    data.to.plot <- longData
    n.Alleles    <- length(unique(data.to.plot$Allele))
    h.factor     <- 1.2
    if (n.Alleles == 1)
      h.factor <- 1.8
    height       <- n.Alleles * h.factor
    width        <- 6
    depth.plot   <- plotDepths(data.to.plot)
    depth.plot
    out.filename <- paste0(out.prefix, "_", i, ".", out.format)
    if (out.format == "png") {
      ggsave(filename = out.filename, plot = depth.plot,
             width  = width,
             height = height,
             type = "cairo-png",
             dpi = 300)
    } else {
      ggsave(filename = out.filename, plot = depth.plot,
             width  = width,
             height = height,
             dpi = 400)
    }
  }
  cat("Done! \n")
  # ========================================================================
  # Code core - End
  # ========================================================================
}
