1548804892943:nAlleles   <- length(unique(data.to.plot$N))
1548804892951:# Theme-related variable definition ---------------------------------------
1548804892953:annotLinetype         <- "solid"
1548804892956:annotTextSize         <- 4
1548804892963:axisColor             <- "#000000"
1548804892965:axisTextSize          <- 12
1548804892968:barAnnotTextSize      <- 4
1548804892970:baseTextSize          <- 14
1548804892971:gridColor             <- "#e0e0e0"
1548804892974:lineSize              <- 0.3
1548804892976:panelColor            <- "#fff4e0"
1548804892979:panelColor            <- "#f2efe6"
1548804892981:# panelColor            <- "#ffffff"
1548804892987:# stripBackground       <- "#cccccc"
1548804892990:stripTextSize         <- axisTextSize
1548804892993:if (longestLocusNameLength > 12)
1548804892996:stripTextSize       <- stripTextSize * 0.6
1548804892998:textColor             <- "#000000"
1548804893000:# baseFontFamily        <- "Arial"
1548804893005:# Custom theme definition for plots ---------------------------------------
1548804893007:plotTheme <- list(
1548804893010:theme(
1548804893013:axis.text.x      = element_text(angle = 50, size = axisTextSize,
1548804893016:vjust = 1, hjust = 1, color = textColor),
1548804893019:axis.text.y      = element_text(size = axisTextSize, color = textColor),
1548804893022:axis.ticks       = element_line(size = lineSize),
1548804893025:axis.title.x     = element_text(margin = margin(6,0,8,0, "mm")),
1548804893029:axis.title.y     = element_text(margin = margin(0,6,0,0, "mm")),
1548804893034:legend.position  = "none",
1548804893038:panel.border     = element_rect(size = lineSize),
1548804893041:panel.background = element_rect(fill = panelColor),
1548804893044:panel.grid       = element_line(size = lineSize, colour = gridColor),
1548804893047:panel.grid.minor = element_blank(),
1548804893049:panel.spacing    = unit(4, "mm"),
1548804893052:plot.caption     = element_text(size = baseTextSize * 0.7, face = "italic"),
1548804893055:plot.title       = element_text(hjust = 0.5),
1548804893058:plot.subtitle    = element_text(hjust = 0.5),
1548804893060:strip.background = element_rect(size = lineSize),
1548804893063:strip.text       = element_text(size = stripTextSize),
1548804893069:text             = element_text(size = baseTextSize)
1548804893072:)
1548804893075:)
1548804893080:# Palette definition ------------------------------------------------------
1548804893083:# colourCount <- length(unique(inData$Locus))
1548804893086:colourCount <- nLoci
1548804893089:# colourCount  <- length(unique(data.to.plot$Allele))
1548804893091:# fillPalette  <- colorRampPalette(brewer.pal(8, "Dark2"))(colourCount)
1548804893094:# fillPalette  <- colorRampPalette(brewer.pal(12, "Paired"))(colourCount)
1548804893097:# fillPalette  <- colorRampPalette(brewer.pal(9, "Set1"))(colourCount)
1548804893101:# fillPalette  <- colorRampPalette(pal_npg("nrc")(10))(colourCount)
1548804893103:# fillPalette  <- colorRampPalette(pal_d3("category20")(20))(colourCount)
1548804893106:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1548804893109:borderPalette <- darkColors(fillPalette, 0.6)
1548804893111:# library("scales"); show_col(fillPalette); show_col(borderPalette)
1548804893122:# # Depth plot -------------------------------------------------------------
1548804893125:# hFactor  <- 1.2
1548804893128:# wFactor  <- 4.8
1548804893131:# # if (nLoci == 1)
1548804893134:# #   hFactor <- 1.4;
1548804893142:# height <- (nLoci * hFactor) + 2 + 0.1 + ((nLoci-1)*0.05)
1548804893144:# width  <- nAlleles * wFactor
1548804893147:# # Generate plot
1548804893149:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1548804893151:# # Save plot
1548804893154:# out.filename <- paste0(out.prefix, ".", out.format)
1548804893156:# if (out.format == "png") {
1548804893159:# 	ggsave(filename = out.filename, plot = depth.plot,
1548804893160:# 				 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1548804893163:# } else {
1548804893166:# 	ggsave(filename = out.filename, plot = depth.plot,
1548804893169:# 				 width  = width, height = height, dpi = 400, limitsize = FALSE)
1548804893171:# }
1548804893175:# Depth plot -------------------------------------------------------------
1548804893177:hFactor  <- 1.2
1548804893179:wFactor  <- 4.8
1548804893181:rows     <- nLoci
1548804893184:if (nLoci > 7)
1548804893187:rows <- 7;
1548804893192:height <- (rows * hFactor) + 2 + 0.1 + ((rows-1)*0.05)
1548804893195:width  <- nAlleles * wFactor
1548804893202:#
1548804893204:# loci <- unique(data.to.plot$Locus)
1548804893206:#
1548804893208:#
1548804893211:#
1548804893213:# split(d, ceiling(seq_along(d)/20))
1548804893215:#
1548804893217:# if ()
1548804893222:# Generate plot
1548804893226:(depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1548804893229:# Save plot
1548804893231:out.filename <- paste0(out.prefix, ".", out.format)
1548804893234:if (out.format == "png") {
1548804893237:ggsave(filename = out.filename, plot = depth.plot,
1548804893239:width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1548804893242:} else {
1548804893246:ggsave(filename = out.filename, plot = depth.plot,
1548804893248:width  = width, height = height, dpi = 400, limitsize = FALSE)
1548804893251:}
1548804893257:# Depth distribution plot ------------------------------------------------
1548804893260:hFactor  <- 3
1548804893262:wFactor  <- 2
1548804893265:if (nLoci == 1)
1548804893268:hFactor <- 3.5
1548804893270:height       <- nLoci * hFactor
1548804893274:width        <- nAlleles * wFactor
1548804893278:# Generate plot
1548804893280:(dist.plot <- plotDepthDist(data.to.plot, labelsData, fillPalette, borderPalette))
1548804893283:# Save plot
1548804893286:out.filename <- paste0(out.prefix, "_dist.", out.format)
1548804893289:if (out.format == "png") {
1548804893291:ggsave(filename = out.filename, plot = dist.plot,
1548804893294:width  = width, height = height, type = "cairo-png", dpi = 300)
1548804893297:} else {
1548804893300:ggsave(filename = out.filename, plot = dist.plot,
1548804893302:width  = width, height = height, dpi = 400)
1548804893305:}
1548804893308:cat("Done! \n")
1548804893314:# Code core - End ---------------------------------------------------------
1548804893317:}
1548804917935:nLoci
1548804929821:#
1548804929822:loci <- unique(data.to.plot$Locus)
1548804933414:loci
1548805083883:loci <- unique(data.to.plot$Locus)
1548805084856:split(loci, ceiling(seq_along(loci)/rowsPerPage))
1548805088583:# Depth plot -------------------------------------------------------------
1548805088584:rowsPerPage <- 7
1548805092803:loci <- unique(data.to.plot$Locus)
1548805093660:split(loci, ceiling(seq_along(loci)/rowsPerPage))
1548805105395:split(loci, ceiling(seq_along(loci)/3))
1548805125017:seq_along(loci)
1548805137200:split(loci, ceiling(seq_along(loci)/rowsPerPage))
1548805145201:lociList <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1548805146632:lociList
1548805202243:lociList <- split(loci, ceiling(seq_along(loci)/3))
1548805233720:for (i in lociList) {
1548805233721:print(i)
1548805233721:}
1548805269717:for (lociSet in lociList) {
1548805269717:print(lociSet)
1548805269718:}
1548805473334:for (lociSet in lociList) {
1548805473334:dataset.to.plot <-
1548805473335:data.to.plot %>%
1548805473335:filter(Locus %in% lociSet)
1548805473336:print(nrow(dataset.to.plot))
1548805473336:}
1548805671022:plotList <- list()
1548805671898:for (lociSet in lociList) {
1548805671898:subset.to.plot <- data.to.plot %>%
1548805671899:filter(Locus %in% lociSet)
1548805671899:currentPlot <- plotDepth(subset.to.plot, labelsData, fillPalette, borderPalette)
1548805671900:plotList <- c(plotList, currentPlot)
1548805671900:}
1548805680678:plotList
1548805707318:plotList <- list()
1548805708040:for (lociSet in lociList) {
1548805708041:subset.to.plot <- data.to.plot %>%
1548805708042:filter(Locus %in% lociSet)
1548805708043:currentPlot <- plotDepth(subset.to.plot, labelsData, fillPalette, borderPalette)
1548805708043:plotList <- c(plotList, currentPlot)
1548805708044:currentPlot
1548805708045:}
1548805721576:plotList <- list()
1548805722196:for (lociSet in lociList) {
1548805722197:subset.to.plot <- data.to.plot %>%
1548805722197:filter(Locus %in% lociSet)
1548805722198:currentPlot <- plotDepth(subset.to.plot, labelsData, fillPalette, borderPalette)
1548805722198:plotList <- c(plotList, currentPlot)
1548805722199:print(currentPlot)
1548805722200:}
1548805781824:length(plotList)
1548805787290:plotList <- list()
1548805829384:lociList <- split(loci, ceiling(seq_along(loci)/3))
1548805831093:lociList
1548805833289:plotList <- list()
1548805834205:for (lociSet in lociList) {
1548805834206:print(lociSet)
1548805834206:subset.to.plot <- data.to.plot %>%
1548805834207:filter(Locus %in% lociSet)
1548805834207:currentPlot <- plotDepth(subset.to.plot, labelsData, fillPalette, borderPalette)
1548805834207:plotList <- c(plotList, list(currentPlot))
1548805834208:print(currentPlot)
1548805834208:}
1548806266058:#!/usr/bin/env Rscript
1548806266059:# ##############################################################################
1548806266059:#  Author:   Hector Fabio Espitia-Navarro
1548806266060:#            Georgia Institute of Technology
1548806266060:#  Version:  1.0
1548806266060:#  Date:     01/19/2019
1548806266061:# ##############################################################################
1548806266061:# Install required packages -----------------------------------------------
1548806266062:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1548806266062:if(!file.exists(personal.lib.path))
1548806266063:dir.create(personal.lib.path)
1548806266063:printMessage <- function(message, verbose){
1548806266064:if(verbose)
1548806266064:cat(message)
1548806266064:}
1548806266065:# crayon::bold("Hola")
1548806266065:installAndLoadPackages <- function(pkg, verbose){
1548806266065:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1548806266066:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1548806266067:printMessage("Done!\n", verbose)
1548806266067:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1548806266067:if (length(new.pkg)) {
1548806266068:printMessage("Installing new packages... ", verbose)
1548806266068:install.packages(new.pkg, dependencies = TRUE,
1548806266069:repos="http://cran.rstudio.com/",
1548806266069:lib = personal.lib.path)
1548806266070:printMessage("Done!\n", verbose)
1548806266070:}
1548806266071:printMessage("Loading required packages... ", verbose)
1548806266072:sapply(pkg, function(x){
1548806266072:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1548806266073:})
1548806266074:printMessage("Done!\n", verbose)
1548806266074:}
1548806266075:# github.related.packages <- c("devtools", "Rcpp")
1548806266076:# packages <- c("argparser", "tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite")
1548806266076:packages <- c("tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite")
1548806266077:# installAndLoadPackages(packages, verbose = TRUE)
1548806266078:installAndLoadPackages("argparser", verbose = FALSE)
1548806277604:# Command line arguments processing ---------------------------------------
1548806277605:# Get script name
1548806277605:initial.options <- commandArgs(trailingOnly = FALSE)
1548806277605:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1548806277606:# Process command line arguments
1548806277606:# Create a parser
1548806277607:p <- arg_parser("This script generates k-mer depth plots using a depth file generated by the\033[1mSTing typer\033[22m tool (-t option).",
1548806277607:name = script.name)
1548806277672:# Add Positional arguments (required)
1548806277673:p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
1548806277674:# Add options
1548806277674:p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1548806277677:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1548806277680:default = "kmer_depth")
1548806277684:p <- add_argument(p, "--sample_name", help = "Sample name.",
1548806277685:default = "input file's name")
1548806277687:p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'",
1548806277687:default = "pdf")
1548806277689:# Initialization of variables ---------------------------------------------
1548806277689:# Values to test the script using RStudio
1548806277690:script.home <- "/home/hspitia/projects/sting"
1548806277690:# inputFile   <- paste(script.home, "ERR036060.depth.2.tsv", sep = "/")
1548806277691:# geneFile    <- paste(script.home, "rmlst_failed_loci.txt", sep = "/")
1548806277691:inputFile   <- paste(script.home, "depth.tsv", sep = "/")
1548806277692:geneFile    <- paste(script.home, "loci.txt", sep = "/")
1548806277693:out.format  <- "pdf"
1548806277693:out.prefix  <- "kmer_ext_depth"
1548806277694:sample.name <- basename(inputFile)
1548806277694:# Parse command line arguments
1548806277695:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1548806277695:argv <- list()
1548806277696:if(command.line) {
1548806277696:argv <- parse_args(p)
1548806277696:} else {
1548806277697:argv <- parse_args(p, list(inputFile,
1548806277697:"--gene_file", geneFile,
1548806277698:"--prefix", out.prefix,
1548806277698:"--sample_name", sample.name,
1548806277699:"--format", out.format))
1548806277700:}
1548806277714:# Get argument values from the command line
1548806277714:input.file  <- argv$input_file
1548806277715:gene.file   <- argv$gene_file
1548806277717:out.format  <- argv$format
1548806277718:out.prefix  <- argv$prefix
1548806277719:sample.name <- argv$sample_name
1548806277719:# if (sample.name == "")
1548806277720:if (sample.name == "input file's name")
1548806277720:sample.name <- basename(input.file)
1548806277721:# Function to check if file exists ----------------------------------------
1548806277721:CheckFileExists <- function(file.list) {
1548806277722:non.exist.files <- !file.exists(file.list)
1548806277722:if(any(non.exist.files)) {
1548806277723:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1548806277723:}
1548806277724:}
1548806277724:# Check for input files ---------------------------------------------------
1548806277725:files.to.check <- c(input.file)
1548806277726:error.message  <- CheckFileExists(files.to.check)
1548806277727:if(!is.null(error.message)){
1548806277728:stop(error.message)
1548806277728:} else {
1548806277729:# Code core - Begin -------------------------------------------------------
1548806277730:installAndLoadPackages(packages, verbose = TRUE)
1548806277731:# FUNCTIONS:
1548806277731:# Function to dark a list of colors ---------------------------------------
1548806277732:darkColors <- function(palette, level){
1548806277732:rgbColors <- as.data.frame(t(as.data.frame(lapply(as.data.frame(t(col2rgb(palette))),
1548806277733:function(x) { round(x * level)}))))
1548806277733:unname(sapply(rgbColors, function(x){ rgb(x[1], x[2], x[3], maxColorValue=255) }))
1548806277734:}
1548806277735:# Function for plotting k-mer depth ----------------------------------------
1548806277738:plotDepth <- function(data.to.plot, labelsData, fillColors, borderColors) {
1548806277739:max.x       <- max(data.to.plot$Position)
1548806277740:max.y       <- max(data.to.plot$kmerDepth)
1548806277742:x.limits    <- seq(0, max.x, 100)
1548806277743:y.limits    <- seq(0, max.y, 20)
1548806277744:nTopAlleles <- length(unique(data.to.plot$N))
1548806277759:d.plot <- ggplot(data = data.to.plot, aes(x = Position, y = kmerDepth),
1548806277760:size = 0.2) +
1548806277761:geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1548806277769:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1548806277770:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1548806277771:# scale_color_manual(values = getPalette) +
1548806277772:scale_color_manual(values = borderColors) +
1548806277773:scale_fill_manual(values = fillColors) +
1548806277774:geom_text(data = labelsData,
1548806277775:# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1548806277776:# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1548806277779:aes(x = Length, y = info.y * 0.5, group = Locus,
1548806277780:hjust = 0,
1548806277780:label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1548806277781:show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1548806277782:nudge_x = -(max.x*0.025)
1548806277783:) +
1548806277784:geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1548806277785:alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1548806277788:# geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1548806277791:size = annotTextSize * 1.05, color = "#333333") +
1548806277792:geom_text(data = labelsData,
1548806277794:parse = TRUE,
1548806277795:aes(x = info.x, y = info.y,
1548806277796:label = paste0("{{{{italic(s)==", format(round(Score, 2), nsmall = 2),
1548806277797:"*~~~italic(hat(f)[k])} ==", format(round(NormKmerCount, 2), nsmall = 2),
1548806277799:"*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1548806277800:"*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1548806277803:"~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1548806277803:hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1548806277804:facet_grid(Locus ~ N, scales = "free_y") +
1548806277805:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1548806277805:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1548806277806:theme_bw() +
1548806277806:plotTheme +
1548806277807:labs(title    = expression(italic("k")*"-mer depth"),
1548806277808:subtitle = paste("Top", nTopAlleles, "alleles/genes on sample", sample.name),
1548806277809:x        = "Position along sequence (bp)",
1548806277810:y        = expression(paste(italic(k), "-mer depth")),
1548806277811:# caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1548806277814:caption  = expression(paste(italic("s"),": score;  ",
1548806277816:italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1548806277819:italic("c"),": coverage;  ",
1548806277822:italic(sigma), ": standard deviation;  ",
1548806277825:italic(bar(d)), ": average depth"), sep = "")
1548806277827:)
1548806277828:# guides(fill  = guide_legend(title  ="Allele"), color = FALSE) +
1548806277829:d.plot
1548806277830:}
1548806277832:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1548806277833:# Function for plotting k-mer depth distributions as box plots ------------
1548806277834:plotDepthDist <- function(data.to.plot, labelsData, fillColors, borderColors){
1548806277835:dist.plot <- ggplot(data.to.plot, aes(x = AlPos, y = kmerDepth)) +
1548806277836:geom_jitter(position = position_jitter(width=.3), aes(color = Locus),
1548806277837:alpha = 0.4, size = 1.2, shape = 16) +
1548806277838:geom_boxplot(alpha = 0.7, size = 0.5, aes(fill = Locus, color = Locus)) +
1548806277838:geom_text(data = labelsData, size = 4, hjust = "center",
1548806277840:aes(x = N,#(N - 0.5),
1548806277840:y = info.y * 1.05,
1548806277842:label = Allele),
1548806277844:color = "#333333") +
1548806277845:geom_text(data = labelsData, size = 3, hjust = "center",
1548806277847:parse = TRUE,
1548806277849:aes(x = N,#(N - 0.4),
1548806277850:# y = info.y * 0.08,
1548806277853:y = info.y * 0.96,
1548806277855:label = paste0("sigma ==",format(round(sd, 1), nsmall = 1))),
1548806277857:color = "#333333") +
1548806277859:geom_point(data = labelsData,
1548806277860:shape = 23, fill = "white",
1548806277861:aes(x = N, y = meanDepth)) +
1548806277862:facet_grid(Locus ~ ., scales = "free_y") +
1548806277863:scale_color_manual(values = borderColors) +
1548806277865:scale_fill_manual(values = fillColors) +
1548806277866:labs(title = expression(paste(italic("k"), "-mer depth distribution")),
1548806277867:subtitle = basename(input.file),
1548806277868:x        = "Allele Ranking",
1548806277869:y        = expression(paste(italic(k), "-mer depth")),
1548806277870:caption  = expression(paste(italic(sigma), ": standard deviation")))+#,"sd: standard deviation") +
1548806277871:theme_bw() +
1548806277872:plotTheme +
1548806277873:theme(axis.text.x   = element_text(angle = 0, size = axisTextSize,
1548806277874:vjust = 1, hjust = 0.5, color = textColor))
1548806277875:dist.plot
1548806277876:}
1548806277879:# Function to get data for annotations ------------------------------------
1548806277880:getLabelsData <- function(data.to.plot) {
1548806277882:max.x <- max(data.to.plot$Position)
1548806277883:max.y <- max(data.to.plot$kmerDepth)
1548806277887:nLoci    <- length(unique(data.to.plot$Locus))
1548806277889:nAlleles <- length(unique(data.to.plot$N))
1548806277892:alleles     <- unique(data.to.plot$Allele)
1548806277893:loci        <- as.character(unique(data.to.plot$Locus))
1548806277895:lociLabels  <- c()
1548806277896:name.x      <- c()
1548806277897:name.y      <- c()
1548806277898:info.x      <- c()
1548806277899:info.y      <- c()
1548806277900:covs        <- c()
1548806277901:avgDepths   <- c()
1548806277902:meanDepth.x <- c()
1548806277904:meanDepth.y <- c()
1548806277906:for (i in loci) {
1548806277908:lociLabels <- c(lociLabels, rep(i, nAlleles))
1548806277909:}
1548806277910:for (allele in alleles) {
1548806277911:locus       <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1548806277913:maxPos      <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1548806277915:maxDepth    <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1548806277916:# name.x      <- c(name.x, (maxPos / 2))
1548806277917:name.x      <- c(name.x, (max.x / 2))
1548806277918:name.y      <- c(name.y, (maxDepth * 0.25))
1548806277920:info.x      <- c(info.x, max.x * 0.02)
1548806277921:info.y      <- c(info.y, maxDepth * 1.5)
1548806277922:covs        <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1548806277924:avgDepths   <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1548806277926:}
1548806277927:labelsData <- data.frame(Allele = alleles,
1548806277928:name.x = name.x,
1548806277930:name.y = name.y,
1548806277932:info.x = info.x,
1548806277934:info.y = info.y,
1548806277935:meanDepth = avgDepths,
1548806277936:N = rep(unique(data.to.plot$N), nLoci),
1548806277937:Locus = lociLabels,
1548806277938:cov = covs
1548806277940:) %>%
1548806277941:left_join(data.to.plot %>%
1548806277943:group_by(Allele, Length, NormKmerCount, Score) %>%
1548806277946:summarise(sd = sd(kmerDepth)),
1548806277948:by = c("Allele" = "Allele")) #%>%
1548806277950:# mutate(
1548806277952:#   info   = paste0("cov=", format(round(covs, 1), nsmall = 1), "%   ",
1548806277957:#                   paste0("ad=", format(round(avgDepths, 1), nsmall = 1)),
1548806277961:#                   "   ",
1548806277963:#                   # expression(paste(italic(sigma), "=",format(round(sd, 1), nsmall = 1))))
1548806277966:#                   paste0("sd=", format(round(sd, 1), nsmall = 1))
1548806277968:#   )
1548806277971:# )
1548806277973:labelsData
1548806277975:}
1548806277979:# Check for genes/loci file to filter loci to plot  -----------------------
1548806277981:loci.to.plot <- c()
1548806277984:# if (!is.null(gene.file)|| gene.file != "") {
1548806277986:if (!is.null(gene.file) && !is.na(gene.file) && gene.file != "") {
1548806277990:error.message <- CheckFileExists(gene.file)
1548806277993:if (!is.null(error.message)){
1548806277996:cat("Warning:")
1548806278001:cat(error.message)
1548806278003:cat("  The plotting process will continue without filtering genes/loci.\n")
1548806278004:} else {
1548806278006:loci.to.plot <- scan(gene.file, character(), quiet = TRUE)
1548806278008:}
1548806278010:}
1548806278014:# Data processing and plotting --------------------------------------------
1548806278017:cat("Plotting depths... ")
1548806278019:options(stringsAsFactors = T, readr.num_columns = 0)
1548806278023:# Load data
1548806278026:inData <- read_tsv(input.file)
1548806278030:# inData <- read.delim(input.file)
1548806278034:# colnames(inData) <- c("Allele", "Position", "k-mer Depth", "Weighted k-mer Depth")
1548806278037:colnames(inData) <- c("N", "Locus", "Allele", "Position", "kmerDepth",
1548806278039:"NormKmerCount", "Coverage", "Score", "AverageKmerDepth")
1548806278044:# Transform data
1548806278046:data.to.plot <- inData %>%
1548806278048:left_join(inData %>%
1548806278051:group_by(Allele) %>%
1548806278054:summarise(Length = n()), by = "Allele") %>%
1548806278056:arrange(Locus, N) %>%
1548806278058:mutate(
1548806278061:AlPos = factor(N, levels = unique(.$N)),
1548806278066:Allele = factor(Allele, levels = unique(inData$Allele)))
1548806278069:# Filtering loci/genes from genes_file input param
1548806278071:if (length(loci.to.plot) > 0) {
1548806278073:data.to.plot <- data.to.plot %>%
1548806278076:filter(Locus %in% loci.to.plot)
1548806278079:}
1548806278084:longestLocusNameLength <- max(str_length(as.character(unique(inData$Locus))))
1548806278086:labelsData <- getLabelsData(data.to.plot)
1548806278088:nLoci      <- length(unique(data.to.plot$Locus))
1548806278090:nAlleles   <- length(unique(data.to.plot$N))
1548806278095:# Theme-related variable definition ---------------------------------------
1548806278097:annotLinetype         <- "solid"
1548806278099:annotTextSize         <- 4
1548806278101:axisColor             <- "#000000"
1548806278106:axisTextSize          <- 12
1548806278115:barAnnotTextSize      <- 4
1548806278118:baseTextSize          <- 14
1548806278120:gridColor             <- "#e0e0e0"
1548806278122:lineSize              <- 0.3
1548806278151:panelColor            <- "#fff4e0"
1548806278153:panelColor            <- "#f2efe6"
1548806278160:# panelColor            <- "#ffffff"
1548806278163:# stripBackground       <- "#cccccc"
1548806278175:stripTextSize         <- axisTextSize
1548806278192:if (longestLocusNameLength > 12)
1548806278195:stripTextSize       <- stripTextSize * 0.6
1548806278197:textColor             <- "#000000"
1548806278200:# baseFontFamily        <- "Arial"
1548806278204:# Custom theme definition for plots ---------------------------------------
1548806278206:plotTheme <- list(
1548806278209:theme(
1548806278217:axis.text.x      = element_text(angle = 50, size = axisTextSize,
1548806278219:vjust = 1, hjust = 1, color = textColor),
1548806278223:axis.text.y      = element_text(size = axisTextSize, color = textColor),
1548806278226:axis.ticks       = element_line(size = lineSize),
1548806278232:axis.title.x     = element_text(margin = margin(6,0,8,0, "mm")),
1548806278235:axis.title.y     = element_text(margin = margin(0,6,0,0, "mm")),
1548806278237:legend.position  = "none",
1548806278239:panel.border     = element_rect(size = lineSize),
1548806278251:panel.background = element_rect(fill = panelColor),
1548806278254:panel.grid       = element_line(size = lineSize, colour = gridColor),
1548806278256:panel.grid.minor = element_blank(),
1548806278258:panel.spacing    = unit(4, "mm"),
1548806278262:plot.caption     = element_text(size = baseTextSize * 0.7, face = "italic"),
1548806278265:plot.title       = element_text(hjust = 0.5),
1548806278268:plot.subtitle    = element_text(hjust = 0.5),
1548806278271:strip.background = element_rect(size = lineSize),
1548806278273:strip.text       = element_text(size = stripTextSize),
1548806278276:text             = element_text(size = baseTextSize)
1548806278283:)
1548806278285:)
1548806278292:# Palette definition ------------------------------------------------------
1548806278294:# colourCount <- length(unique(inData$Locus))
1548806278297:colourCount <- nLoci
1548806278300:# colourCount  <- length(unique(data.to.plot$Allele))
1548806278302:# fillPalette  <- colorRampPalette(brewer.pal(8, "Dark2"))(colourCount)
1548806278304:# fillPalette  <- colorRampPalette(brewer.pal(12, "Paired"))(colourCount)
1548806278307:# fillPalette  <- colorRampPalette(brewer.pal(9, "Set1"))(colourCount)
1548806278311:# fillPalette  <- colorRampPalette(pal_npg("nrc")(10))(colourCount)
1548806278313:# fillPalette  <- colorRampPalette(pal_d3("category20")(20))(colourCount)
1548806278315:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1548806278319:borderPalette <- darkColors(fillPalette, 0.6)
1548806278321:# library("scales"); show_col(fillPalette); show_col(borderPalette)
1548806278329:# # Depth plot -------------------------------------------------------------
1548806278332:# hFactor  <- 1.2
1548806278335:# wFactor  <- 4.8
1548806278337:# # if (nLoci == 1)
1548806278339:# #   hFactor <- 1.4;
1548806278342:# height <- (nLoci * hFactor) + 2 + 0.1 + ((nLoci-1)*0.05)
1548806278345:# width  <- nAlleles * wFactor
1548806278347:# # Generate plot
1548806278349:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1548806278352:# # Save plot
1548806278354:# out.filename <- paste0(out.prefix, ".", out.format)
1548806278356:# if (out.format == "png") {
1548806278360:# 	ggsave(filename = out.filename, plot = depth.plot,
1548806278363:# 				 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1548806278365:# } else {
1548806278368:# 	ggsave(filename = out.filename, plot = depth.plot,
1548806278371:# 				 width  = width, height = height, dpi = 400, limitsize = FALSE)
1548806278373:# }
1548806278377:# Depth plot -------------------------------------------------------------
1548806278380:rowsPerPage <- 7
1548806278382:hFactor     <- 1.2
1548806278384:wFactor     <- 4.8
1548806278387:rows        <- nLoci
1548806278389:if (nLoci > rowsPerPage)
1548806278392:rows <- rowsPerPage;
1548806278398:height <- (rows * hFactor) + 2 + 0.1 + ((rows-1)*0.05)
1548806278400:width  <- nAlleles * wFactor
1548806278402:#
1548806278404:#  loci     <- unique(data.to.plot$Locus)
1548806278406:#  lociList <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1548806278408:#  lociList <- split(loci, ceiling(seq_along(loci)/3))
1548806278410:#  plotList <- list()
1548806278412:#  for (lociSet in lociList) {
1548806278415:#  	print(lociSet)
1548806278418:#  	subset.to.plot <- data.to.plot %>%
1548806278421:#  		filter(Locus %in% lociSet)
1548806278424:#  	currentPlot <- plotDepth(subset.to.plot, labelsData, fillPalette, borderPalette)
1548806278427:#  	plotList <- c(plotList, list(currentPlot))
1548806278428:#  	print(currentPlot)
1548806278431:#  }
1548806278434:# 	length(plotList)
1548806278439:# Generate plot
1548806278444:(depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1548806278447:# Save plot
1548806278449:out.filename <- paste0(out.prefix, ".", out.format)
1548806278452:if (out.format == "png") {
1548806278455:ggsave(filename = out.filename, plot = depth.plot,
1548806278458:width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1548806278462:} else {
1548806278463:ggsave(filename = out.filename, plot = depth.plot,
1548806278466:width  = width, height = height, dpi = 400, limitsize = FALSE)
1548806278467:}
1548806278471:# Depth distribution plot ------------------------------------------------
1548806278473:hFactor  <- 3
1548806278475:wFactor  <- 2
1548806278477:if (nLoci == 1)
1548806278479:hFactor <- 3.5
1548806278482:height       <- nLoci * hFactor
1548806278485:width        <- nAlleles * wFactor
1548806278487:# Generate plot
1548806278489:(dist.plot <- plotDepthDist(data.to.plot, labelsData, fillPalette, borderPalette))
1548806278491:# Save plot
1548806278494:out.filename <- paste0(out.prefix, "_dist.", out.format)
1548806278497:if (out.format == "png") {
1548806278499:ggsave(filename = out.filename, plot = dist.plot,
1548806278501:width  = width, height = height, type = "cairo-png", dpi = 300)
1548806278503:} else {
1548806278505:ggsave(filename = out.filename, plot = dist.plot,
1548806278507:width  = width, height = height, dpi = 400)
1548806278508:}
1548806278511:cat("Done! \n")
1548806278517:# Code core - End ---------------------------------------------------------
1548806278520:}
1548806327829:loci
1548806333675:width
1548806336941:loci     <- unique(data.to.plot$Locus)
1548806338065:loci
1548806373067:#!/usr/bin/env Rscript
1548806373068:# ##############################################################################
1548806373068:#  Author:   Hector Fabio Espitia-Navarro
1548806373068:#            Georgia Institute of Technology
1548806373069:#  Version:  1.0
1548806373069:#  Date:     01/19/2019
1548806373070:# ##############################################################################
1548806373070:# Install required packages -----------------------------------------------
1548806373071:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1548806373071:if(!file.exists(personal.lib.path))
1548806373072:dir.create(personal.lib.path)
1548806373073:printMessage <- function(message, verbose){
1548806373073:if(verbose)
1548806373073:cat(message)
1548806373074:}
1548806373074:# crayon::bold("Hola")
1548806373075:installAndLoadPackages <- function(pkg, verbose){
1548806373075:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1548806373075:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1548806373076:printMessage("Done!\n", verbose)
1548806373076:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1548806373077:if (length(new.pkg)) {
1548806373078:printMessage("Installing new packages... ", verbose)
1548806373079:install.packages(new.pkg, dependencies = TRUE,
1548806373079:repos="http://cran.rstudio.com/",
1548806373080:lib = personal.lib.path)
1548806373080:printMessage("Done!\n", verbose)
1548806373080:}
1548806373081:printMessage("Loading required packages... ", verbose)
1548806373081:sapply(pkg, function(x){
1548806373082:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1548806373082:})
1548806373082:printMessage("Done!\n", verbose)
1548806373083:}
1548806373084:# github.related.packages <- c("devtools", "Rcpp")
1548806373084:# packages <- c("argparser", "tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite")
1548806373084:packages <- c("tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite")
1548806373085:# installAndLoadPackages(packages, verbose = TRUE)
1548806373085:installAndLoadPackages("argparser", verbose = FALSE)
1548806373133:# Command line arguments processing ---------------------------------------
1548806373134:# Get script name
1548806373134:initial.options <- commandArgs(trailingOnly = FALSE)
1548806373135:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1548806373136:# Process command line arguments
1548806373136:# Create a parser
1548806373137:p <- arg_parser("This script generates k-mer depth plots using a depth file generated by the\033[1mSTing typer\033[22m tool (-t option).",
1548806373137:name = script.name)
1548806373151:# Add Positional arguments (required)
1548806373151:p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
1548806373152:# Add options
1548806373153:p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1548806373154:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1548806373154:default = "kmer_depth")
1548806373155:p <- add_argument(p, "--sample_name", help = "Sample name.",
1548806373155:default = "input file's name")
1548806373156:p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'",
1548806373156:default = "pdf")
1548806373158:# Initialization of variables ---------------------------------------------
1548806373158:# Values to test the script using RStudio
1548806373158:script.home <- "/home/hspitia/projects/sting"
1548806373159:# inputFile   <- paste(script.home, "ERR036060.depth.2.tsv", sep = "/")
1548806373159:# geneFile    <- paste(script.home, "rmlst_failed_loci.txt", sep = "/")
1548806373160:inputFile   <- paste(script.home, "depth.tsv", sep = "/")
1548806373160:geneFile    <- paste(script.home, "loci.txt", sep = "/")
1548806373161:out.format  <- "pdf"
1548806373161:out.prefix  <- "kmer_ext_depth"
1548806373162:sample.name <- basename(inputFile)
1548806373162:# Parse command line arguments
1548806373162:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1548806373163:argv <- list()
1548806373163:if(command.line) {
1548806373164:argv <- parse_args(p)
1548806373164:} else {
1548806373164:argv <- parse_args(p, list(inputFile,
1548806373164:# "--gene_file", geneFile,
1548806373165:"--prefix", out.prefix,
1548806373165:"--sample_name", sample.name,
1548806373165:"--format", out.format))
1548806373166:}
1548806373315:# Get argument values from the command line
1548806373316:input.file  <- argv$input_file
1548806373316:gene.file   <- argv$gene_file
1548806373317:out.format  <- argv$format
1548806373317:out.prefix  <- argv$prefix
1548806373318:sample.name <- argv$sample_name
1548806373319:# if (sample.name == "")
1548806373319:if (sample.name == "input file's name")
1548806373319:sample.name <- basename(input.file)
1548806373321:# Function to check if file exists ----------------------------------------
1548806373321:CheckFileExists <- function(file.list) {
1548806373322:non.exist.files <- !file.exists(file.list)
1548806373322:if(any(non.exist.files)) {
1548806373323:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1548806373323:}
1548806373323:}
1548806373324:# Check for input files ---------------------------------------------------
1548806373324:files.to.check <- c(input.file)
1548806373325:error.message  <- CheckFileExists(files.to.check)
1548806373326:if(!is.null(error.message)){
1548806373326:stop(error.message)
1548806373327:} else {
1548806373327:# Code core - Begin -------------------------------------------------------
1548806373327:installAndLoadPackages(packages, verbose = TRUE)
1548806373328:# FUNCTIONS:
1548806373328:# Function to dark a list of colors ---------------------------------------
1548806373328:darkColors <- function(palette, level){
1548806373329:rgbColors <- as.data.frame(t(as.data.frame(lapply(as.data.frame(t(col2rgb(palette))),
1548806373329:function(x) { round(x * level)}))))
1548806373329:unname(sapply(rgbColors, function(x){ rgb(x[1], x[2], x[3], maxColorValue=255) }))
1548806373330:}
1548806373330:# Function for plotting k-mer depth ----------------------------------------
1548806373331:plotDepth <- function(data.to.plot, labelsData, fillColors, borderColors) {
1548806373331:max.x       <- max(data.to.plot$Position)
1548806373332:max.y       <- max(data.to.plot$kmerDepth)
1548806373332:x.limits    <- seq(0, max.x, 100)
1548806373333:y.limits    <- seq(0, max.y, 20)
1548806373333:nTopAlleles <- length(unique(data.to.plot$N))
1548806373334:d.plot <- ggplot(data = data.to.plot, aes(x = Position, y = kmerDepth),
1548806373335:size = 0.2) +
1548806373335:geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1548806373336:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1548806373338:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1548806373339:# scale_color_manual(values = getPalette) +
1548806373340:scale_color_manual(values = borderColors) +
1548806373340:scale_fill_manual(values = fillColors) +
1548806373341:geom_text(data = labelsData,
1548806373342:# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1548806373343:# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1548806373344:aes(x = Length, y = info.y * 0.5, group = Locus,
1548806373345:hjust = 0,
1548806373346:label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1548806373347:show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1548806373348:nudge_x = -(max.x*0.025)
1548806373349:) +
1548806373349:geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1548806373350:alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1548806373351:# geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1548806373351:size = annotTextSize * 1.05, color = "#333333") +
1548806373352:geom_text(data = labelsData,
1548806373352:parse = TRUE,
1548806373353:aes(x = info.x, y = info.y,
1548806373354:label = paste0("{{{{italic(s)==", format(round(Score, 2), nsmall = 2),
1548806373355:"*~~~italic(hat(f)[k])} ==", format(round(NormKmerCount, 2), nsmall = 2),
1548806373356:"*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1548806373356:"*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1548806373357:"~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1548806373358:hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1548806373359:facet_grid(Locus ~ N, scales = "free_y") +
1548806373360:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1548806373361:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1548806373362:theme_bw() +
1548806373363:plotTheme +
1548806373364:labs(title    = expression(italic("k")*"-mer depth"),
1548806373365:subtitle = paste("Top", nTopAlleles, "alleles/genes on sample", sample.name),
1548806373367:x        = "Position along sequence (bp)",
1548806373368:y        = expression(paste(italic(k), "-mer depth")),
1548806373369:# caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1548806373371:caption  = expression(paste(italic("s"),": score;  ",
1548806373372:italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1548806373376:italic("c"),": coverage;  ",
1548806373379:italic(sigma), ": standard deviation;  ",
1548806373382:italic(bar(d)), ": average depth"), sep = "")
1548806373383:)
1548806373384:# guides(fill  = guide_legend(title  ="Allele"), color = FALSE) +
1548806373385:d.plot
1548806373386:}
1548806373387:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1548806373388:# Function for plotting k-mer depth distributions as box plots ------------
1548806373389:plotDepthDist <- function(data.to.plot, labelsData, fillColors, borderColors){
1548806373390:dist.plot <- ggplot(data.to.plot, aes(x = AlPos, y = kmerDepth)) +
1548806373391:geom_jitter(position = position_jitter(width=.3), aes(color = Locus),
1548806373392:alpha = 0.4, size = 1.2, shape = 16) +
1548806373393:geom_boxplot(alpha = 0.7, size = 0.5, aes(fill = Locus, color = Locus)) +
1548806373394:geom_text(data = labelsData, size = 4, hjust = "center",
1548806373395:aes(x = N,#(N - 0.5),
1548806373396:y = info.y * 1.05,
1548806373397:label = Allele),
1548806373398:color = "#333333") +
1548806373400:geom_text(data = labelsData, size = 3, hjust = "center",
1548806373401:parse = TRUE,
1548806373402:aes(x = N,#(N - 0.4),
1548806373404:# y = info.y * 0.08,
1548806373405:y = info.y * 0.96,
1548806373407:label = paste0("sigma ==",format(round(sd, 1), nsmall = 1))),
1548806373408:color = "#333333") +
1548806373409:geom_point(data = labelsData,
1548806373411:shape = 23, fill = "white",
1548806373412:aes(x = N, y = meanDepth)) +
1548806373414:facet_grid(Locus ~ ., scales = "free_y") +
1548806373415:scale_color_manual(values = borderColors) +
1548806373417:scale_fill_manual(values = fillColors) +
1548806373418:labs(title = expression(paste(italic("k"), "-mer depth distribution")),
1548806373420:subtitle = basename(input.file),
1548806373421:x        = "Allele Ranking",
1548806373423:y        = expression(paste(italic(k), "-mer depth")),
1548806373424:caption  = expression(paste(italic(sigma), ": standard deviation")))+#,"sd: standard deviation") +
1548806373426:theme_bw() +
1548806373428:plotTheme +
1548806373431:theme(axis.text.x   = element_text(angle = 0, size = axisTextSize,
1548806373433:vjust = 1, hjust = 0.5, color = textColor))
1548806373436:dist.plot
1548806373438:}
1548806373440:# Function to get data for annotations ------------------------------------
1548806373442:getLabelsData <- function(data.to.plot) {
1548806373443:max.x <- max(data.to.plot$Position)
1548806373445:max.y <- max(data.to.plot$kmerDepth)
1548806373448:nLoci    <- length(unique(data.to.plot$Locus))
1548806373450:nAlleles <- length(unique(data.to.plot$N))
1548806373454:alleles     <- unique(data.to.plot$Allele)
1548806373456:loci        <- as.character(unique(data.to.plot$Locus))
1548806373460:lociLabels  <- c()
1548806373461:name.x      <- c()
1548806373462:name.y      <- c()
1548806373464:info.x      <- c()
1548806373466:info.y      <- c()
1548806373468:covs        <- c()
1548806373470:avgDepths   <- c()
1548806373471:meanDepth.x <- c()
1548806373473:meanDepth.y <- c()
1548806373475:for (i in loci) {
1548806373477:lociLabels <- c(lociLabels, rep(i, nAlleles))
1548806373478:}
1548806373480:for (allele in alleles) {
1548806373481:locus       <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1548806373482:maxPos      <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1548806373483:maxDepth    <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1548806373484:# name.x      <- c(name.x, (maxPos / 2))
1548806373485:name.x      <- c(name.x, (max.x / 2))
1548806373488:name.y      <- c(name.y, (maxDepth * 0.25))
1548806373493:info.x      <- c(info.x, max.x * 0.02)
1548806373500:info.y      <- c(info.y, maxDepth * 1.5)
1548806373501:covs        <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1548806373503:avgDepths   <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1548806373506:}
1548806373507:labelsData <- data.frame(Allele = alleles,
1548806373508:name.x = name.x,
1548806373510:name.y = name.y,
1548806373511:info.x = info.x,
1548806373513:info.y = info.y,
1548806373515:meanDepth = avgDepths,
1548806373518:N = rep(unique(data.to.plot$N), nLoci),
1548806373520:Locus = lociLabels,
1548806373523:cov = covs
1548806373525:) %>%
1548806373527:left_join(data.to.plot %>%
1548806373529:group_by(Allele, Length, NormKmerCount, Score) %>%
1548806373531:summarise(sd = sd(kmerDepth)),
1548806373533:by = c("Allele" = "Allele")) #%>%
1548806373535:# mutate(
1548806373537:#   info   = paste0("cov=", format(round(covs, 1), nsmall = 1), "%   ",
1548806373539:#                   paste0("ad=", format(round(avgDepths, 1), nsmall = 1)),
1548806373542:#                   "   ",
1548806373544:#                   # expression(paste(italic(sigma), "=",format(round(sd, 1), nsmall = 1))))
1548806373546:#                   paste0("sd=", format(round(sd, 1), nsmall = 1))
1548806373548:#   )
1548806373549:# )
1548806373550:labelsData
1548806373552:}
1548806373555:# Check for genes/loci file to filter loci to plot  -----------------------
1548806373557:loci.to.plot <- c()
1548806373558:# if (!is.null(gene.file)|| gene.file != "") {
1548806373559:if (!is.null(gene.file) && !is.na(gene.file) && gene.file != "") {
1548806373561:error.message <- CheckFileExists(gene.file)
1548806373562:if (!is.null(error.message)){
1548806373564:cat("Warning:")
1548806373565:cat(error.message)
1548806373567:cat("  The plotting process will continue without filtering genes/loci.\n")
1548806373568:} else {
1548806373570:loci.to.plot <- scan(gene.file, character(), quiet = TRUE)
1548806373572:}
1548806373573:}
1548806373578:# Data processing and plotting --------------------------------------------
1548806373582:cat("Plotting depths... ")
1548806373584:options(stringsAsFactors = T, readr.num_columns = 0)
1548806373588:# Load data
1548806373590:inData <- read_tsv(input.file)
1548806373593:# inData <- read.delim(input.file)
1548806373597:# colnames(inData) <- c("Allele", "Position", "k-mer Depth", "Weighted k-mer Depth")
1548806373600:colnames(inData) <- c("N", "Locus", "Allele", "Position", "kmerDepth",
1548806373602:"NormKmerCount", "Coverage", "Score", "AverageKmerDepth")
1548806373607:# Transform data
1548806373611:data.to.plot <- inData %>%
1548806373613:left_join(inData %>%
1548806373616:group_by(Allele) %>%
1548806373618:summarise(Length = n()), by = "Allele") %>%
1548806373621:arrange(Locus, N) %>%
1548806373623:mutate(
1548806373625:AlPos = factor(N, levels = unique(.$N)),
1548806373628:Allele = factor(Allele, levels = unique(inData$Allele)))
1548806373630:# Filtering loci/genes from genes_file input param
1548806373634:if (length(loci.to.plot) > 0) {
1548806373638:data.to.plot <- data.to.plot %>%
1548806373641:filter(Locus %in% loci.to.plot)
1548806373644:}
1548806373650:longestLocusNameLength <- max(str_length(as.character(unique(inData$Locus))))
1548806373652:labelsData <- getLabelsData(data.to.plot)
1548806373653:nLoci      <- length(unique(data.to.plot$Locus))
1548806373655:nAlleles   <- length(unique(data.to.plot$N))
1548806373660:# Theme-related variable definition ---------------------------------------
1548806373662:annotLinetype         <- "solid"
1548806373665:annotTextSize         <- 4
1548806373667:axisColor             <- "#000000"
1548806373671:axisTextSize          <- 12
1548806373676:barAnnotTextSize      <- 4
1548806373679:baseTextSize          <- 14
1548806373681:gridColor             <- "#e0e0e0"
1548806373683:lineSize              <- 0.3
1548806373685:panelColor            <- "#fff4e0"
1548806373687:panelColor            <- "#f2efe6"
1548806373690:# panelColor            <- "#ffffff"
1548806373692:# stripBackground       <- "#cccccc"
1548806373695:stripTextSize         <- axisTextSize
1548806373697:if (longestLocusNameLength > 12)
1548806373700:stripTextSize       <- stripTextSize * 0.6
1548806373702:textColor             <- "#000000"
1548806373704:# baseFontFamily        <- "Arial"
1548806373707:# Custom theme definition for plots ---------------------------------------
1548806373710:plotTheme <- list(
1548806373713:theme(
1548806373716:axis.text.x      = element_text(angle = 50, size = axisTextSize,
1548806373718:vjust = 1, hjust = 1, color = textColor),
1548806373719:axis.text.y      = element_text(size = axisTextSize, color = textColor),
1548806373721:axis.ticks       = element_line(size = lineSize),
1548806373724:axis.title.x     = element_text(margin = margin(6,0,8,0, "mm")),
1548806373727:axis.title.y     = element_text(margin = margin(0,6,0,0, "mm")),
1548806373729:legend.position  = "none",
1548806373732:panel.border     = element_rect(size = lineSize),
1548806373735:panel.background = element_rect(fill = panelColor),
1548806373737:panel.grid       = element_line(size = lineSize, colour = gridColor),
1548806373742:panel.grid.minor = element_blank(),
1548806373747:panel.spacing    = unit(4, "mm"),
1548806373750:plot.caption     = element_text(size = baseTextSize * 0.7, face = "italic"),
1548806373753:plot.title       = element_text(hjust = 0.5),
1548806373756:plot.subtitle    = element_text(hjust = 0.5),
1548806373758:strip.background = element_rect(size = lineSize),
1548806373761:strip.text       = element_text(size = stripTextSize),
1548806373766:text             = element_text(size = baseTextSize)
1548806373772:)
1548806373775:)
1548806373781:# Palette definition ------------------------------------------------------
1548806373787:# colourCount <- length(unique(inData$Locus))
1548806373791:colourCount <- nLoci
1548806373794:# colourCount  <- length(unique(data.to.plot$Allele))
1548806373798:# fillPalette  <- colorRampPalette(brewer.pal(8, "Dark2"))(colourCount)
1548806373805:# fillPalette  <- colorRampPalette(brewer.pal(12, "Paired"))(colourCount)
1548806373807:# fillPalette  <- colorRampPalette(brewer.pal(9, "Set1"))(colourCount)
1548806373812:# fillPalette  <- colorRampPalette(pal_npg("nrc")(10))(colourCount)
1548806373818:# fillPalette  <- colorRampPalette(pal_d3("category20")(20))(colourCount)
1548806373820:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1548806373823:borderPalette <- darkColors(fillPalette, 0.6)
1548806373826:# library("scales"); show_col(fillPalette); show_col(borderPalette)
1548806373847:# # Depth plot -------------------------------------------------------------
1548806373851:# hFactor  <- 1.2
1548806373853:# wFactor  <- 4.8
1548806373856:# # if (nLoci == 1)
1548806373859:# #   hFactor <- 1.4;
1548806373864:# height <- (nLoci * hFactor) + 2 + 0.1 + ((nLoci-1)*0.05)
1548806373867:# width  <- nAlleles * wFactor
1548806373872:# # Generate plot
1548806373876:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1548806373878:# # Save plot
1548806373881:# out.filename <- paste0(out.prefix, ".", out.format)
1548806373884:# if (out.format == "png") {
1548806373887:# 	ggsave(filename = out.filename, plot = depth.plot,
1548806373889:# 				 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1548806373892:# } else {
1548806373895:# 	ggsave(filename = out.filename, plot = depth.plot,
1548806373897:# 				 width  = width, height = height, dpi = 400, limitsize = FALSE)
1548806373900:# }
1548806373905:# Depth plot -------------------------------------------------------------
1548806373908:rowsPerPage <- 7
1548806373914:hFactor     <- 1.2
1548806373919:wFactor     <- 4.8
1548806373922:rows        <- nLoci
1548806373925:if (nLoci > rowsPerPage)
1548806373928:rows <- rowsPerPage;
1548806373933:height <- (rows * hFactor) + 2 + 0.1 + ((rows-1)*0.05)
1548806373935:width  <- nAlleles * wFactor
1548806373941:#  loci     <- unique(data.to.plot$Locus)
1548806373943:#  lociList <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1548806373946:#  lociList <- split(loci, ceiling(seq_along(loci)/3))
1548806373949:#  plotList <- list()
1548806373951:#  for (lociSet in lociList) {
1548806373954:#  	print(lociSet)
1548806373957:#  	subset.to.plot <- data.to.plot %>%
1548806373959:#  		filter(Locus %in% lociSet)
1548806373962:#  	currentPlot <- plotDepth(subset.to.plot, labelsData, fillPalette, borderPalette)
1548806373965:#  	plotList <- c(plotList, list(currentPlot))
1548806373967:#  	print(currentPlot)
1548806373970:#  }
1548806373972:# 	length(plotList)
1548806373975:# Generate plot
1548806373978:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1548806373982:# # Save plot
1548806373983:# out.filename <- paste0(out.prefix, ".", out.format)
1548806373985:# if (out.format == "png") {
1548806373987:#   ggsave(filename = out.filename, plot = depth.plot,
1548806373990:#          width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1548806373993:# } else {
1548806373996:#   ggsave(filename = out.filename, plot = depth.plot,
1548806373999:#          width  = width, height = height, dpi = 400, limitsize = FALSE)
1548806374002:# }
1548806374007:# # Depth distribution plot ------------------------------------------------
1548806374010:# hFactor  <- 3
1548806374013:# wFactor  <- 2
1548806374017:# if (nLoci == 1)
1548806374020:#   hFactor <- 3.5
1548806374023:# height       <- nLoci * hFactor
1548806374026:# width        <- nAlleles * wFactor
1548806374029:# # Generate plot
1548806374032:# (dist.plot <- plotDepthDist(data.to.plot, labelsData, fillPalette, borderPalette))
1548806374035:# # Save plot
1548806374038:# out.filename <- paste0(out.prefix, "_dist.", out.format)
1548806374041:# if (out.format == "png") {
1548806374044:#   ggsave(filename = out.filename, plot = dist.plot,
1548806374047:#          width  = width, height = height, type = "cairo-png", dpi = 300)
1548806374051:# } else {
1548806374054:#   ggsave(filename = out.filename, plot = dist.plot,
1548806374059:#          width  = width, height = height, dpi = 400)
1548806374062:# }
1548806374065:# cat("Done! \n")
1548806374071:# Code core - End ---------------------------------------------------------
1548806374074:}
1548806417251:loci     <- unique(data.to.plot$Locus)
1548806419359:loci
1548806421808:lociList <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1548806422219:lociList <- split(loci, ceiling(seq_along(loci)/3))
1548806423695:lociList
1548806426633:plotList <- list()
1548806468477:loci     <- unique(data.to.plot$Locus)
1548806468796:lociList <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1548806469165:lociList <- split(loci, ceiling(seq_along(loci)/3))
1548806469632:plotList <- list()
1548806470711:for (lociSet in lociList) {
1548806470712:print(lociSet)
1548806470712:subset.to.plot <- data.to.plot %>%
1548806470712:filter(Locus %in% lociSet)
1548806470713:# currentPlot <- plotDepth(subset.to.plot, labelsData, fillPalette, borderPalette)
1548806470713:# plotList <- c(plotList, list(currentPlot))
1548806470713:# print(currentPlot)
1548806470714:print(unique(subset.to.plot$Locus))
1548806470714:}
1548806531980:loci     <- unique(data.to.plot$Locus)
1548806532412:lociList <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1548806532716:lociList <- split(loci, ceiling(seq_along(loci)/3))
1548806533100:plotList <- list()
1548806534309:for (lociSet in lociList) {
1548806534310:print(lociSet)
1548806534310:subset.to.plot <- data.to.plot %>%
1548806534311:filter(Locus %in% lociSet)
1548806534311:currentPlot <- plotDepth(subset.to.plot, labelsData, fillPalette, borderPalette)
1548806534311:plotList <- c(plotList, list(currentPlot))
1548806534312:print(currentPlot)
1548806534312:# print(unique(subset.to.plot$Locus))
1548806534312:}
1548813240123:View(data.to.plot)
1548813240907:View(data.to.plot)
1548813283792:# Function for plotting k-mer depth ----------------------------------------
1548813283793:plotDepth <- function(dataToPlot, labelsData, fillColors, borderColors) {
1548813283793:max.x       <- max(dataToPlot$Position)
1548813283794:max.y       <- max(dataToPlot$kmerDepth)
1548813283794:x.limits    <- seq(0, max.x, 100)
1548813283795:y.limits    <- seq(0, max.y, 20)
1548813283795:nTopAlleles <- length(unique(dataToPlot$N))
1548813283796:d.plot <- ggplot(data = dataToPlot, aes(x = Position, y = kmerDepth),
1548813283796:size = 0.2) +
1548813283797:geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1548813283797:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1548813283798:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1548813283799:# scale_color_manual(values = getPalette) +
1548813283799:scale_color_manual(values = borderColors) +
1548813283800:scale_fill_manual(values = fillColors) +
1548813283800:geom_text(data = labelsData,
1548813283801:# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1548813283801:# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1548813283802:aes(x = Length, y = info.y * 0.5, group = Locus,
1548813283804:hjust = 0,
1548813283804:label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1548813283805:show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1548813283805:nudge_x = -(max.x*0.025)
1548813283805:) +
1548813283806:# geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1548813283806:#            alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1548813283807:# # geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1548813283808:#           size = annotTextSize * 1.05, color = "#333333") +
1548813283809:# geom_text(data = labelsData,
1548813283809:#           parse = TRUE,
1548813283810:#           aes(x = info.x, y = info.y,
1548813283811:#               label = paste0("{{{{italic(s)==", format(round(Score, 2), nsmall = 2),
1548813283811:#                             "*~~~italic(hat(f)[k])} ==", format(round(NormKmerCount, 2), nsmall = 2),
1548813283811:#                             "*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1548813283812:#                             "*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1548813283813:#                             "~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1548813283813:#           hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1548813283814:facet_grid(Locus ~ N, scales = "free_y") +
1548813283815:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1548813283815:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1548813283816:theme_bw() +
1548813283817:plotTheme +
1548813283817:labs(title    = expression(italic("k")*"-mer depth"),
1548813283818:subtitle = paste("Top", nTopAlleles, "alleles/genes on sample", sample.name),
1548813283818:x        = "Position along sequence (bp)",
1548813283819:y        = expression(paste(italic(k), "-mer depth")),
1548813283820:# caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1548813283822:caption  = expression(paste(italic("s"),": score;  ",
1548813283823:italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1548813283825:italic("c"),": coverage;  ",
1548813283826:italic(sigma), ": standard deviation;  ",
1548813283827:italic(bar(d)), ": average depth"), sep = "")
1548813283828:)
1548813283829:# guides(fill  = guide_legend(title  ="Allele"), color = FALSE) +
1548813283830:d.plot
1548813283831:}
1548813303640:d.plot <- ggplot(data = dataToPlot, aes(x = Position, y = kmerDepth),
1548813303641:size = 0.2) +
1548813303641:geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1548813303642:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1548813303642:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1548813303642:# scale_color_manual(values = getPalette) +
1548813303643:scale_color_manual(values = borderColors) +
1548813303643:scale_fill_manual(values = fillColors) +
1548813303644:# geom_text(data = labelsData,
1548813303644:#           # aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1548813303645:#           # aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1548813303645:#           aes(x = Length, y = info.y * 0.5, group = Locus,
1548813303646:#               hjust = 0,
1548813303646:#               label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1548813303647:#           show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1548813303647:#           nudge_x = -(max.x*0.025)
1548813303648:# ) +
1548813303648:# geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1548813303649:#            alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1548813303649:# # geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1548813303650:#           size = annotTextSize * 1.05, color = "#333333") +
1548813303650:# geom_text(data = labelsData,
1548813303650:#           parse = TRUE,
1548813303651:#           aes(x = info.x, y = info.y,
1548813303651:#               label = paste0("{{{{italic(s)==", format(round(Score, 2), nsmall = 2),
1548813303652:#                             "*~~~italic(hat(f)[k])} ==", format(round(NormKmerCount, 2), nsmall = 2),
1548813303653:#                             "*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1548813303653:#                             "*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1548813303654:#                             "~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1548813303654:#           hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1548813303654:facet_grid(Locus ~ N, scales = "free_y") +
1548813303655:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1548813303655:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1548813303656:theme_bw() +
1548813303656:plotTheme +
1548813303657:labs(title    = expression(italic("k")*"-mer depth"),
1548813303657:subtitle = paste("Top", nTopAlleles, "alleles/genes on sample", sample.name),
1548813303657:x        = "Position along sequence (bp)",
1548813303658:y        = expression(paste(italic(k), "-mer depth")),
1548813303658:# caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1548813303659:caption  = expression(paste(italic("s"),": score;  ",
1548813303660:italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1548813303661:italic("c"),": coverage;  ",
1548813303662:italic(sigma), ": standard deviation;  ",
1548813303662:italic(bar(d)), ": average depth"), sep = "")
1548813303663:)
1548813312723:plotDepth <- function(dataToPlot, labelsData, fillColors, borderColors) {
1548813312723:max.x       <- max(dataToPlot$Position)
1548813312724:max.y       <- max(dataToPlot$kmerDepth)
1548813312724:x.limits    <- seq(0, max.x, 100)
1548813312724:y.limits    <- seq(0, max.y, 20)
1548813312725:nTopAlleles <- length(unique(dataToPlot$N))
1548813312725:d.plot <- ggplot(data = dataToPlot, aes(x = Position, y = kmerDepth),
1548813312726:size = 0.2) +
1548813312726:geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1548813312726:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1548813312727:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1548813312727:# scale_color_manual(values = getPalette) +
1548813312728:scale_color_manual(values = borderColors) +
1548813312729:scale_fill_manual(values = fillColors) +
1548813312729:# geom_text(data = labelsData,
1548813312729:#           # aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1548813312730:#           # aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1548813312730:#           aes(x = Length, y = info.y * 0.5, group = Locus,
1548813312731:#               hjust = 0,
1548813312731:#               label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1548813312731:#           show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1548813312732:#           nudge_x = -(max.x*0.025)
1548813312732:# ) +
1548813312733:# geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1548813312733:#            alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1548813312734:# # geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1548813312734:#           size = annotTextSize * 1.05, color = "#333333") +
1548813312735:# geom_text(data = labelsData,
1548813312735:#           parse = TRUE,
1548813312736:#           aes(x = info.x, y = info.y,
1548813312736:#               label = paste0("{{{{italic(s)==", format(round(Score, 2), nsmall = 2),
1548813312737:#                             "*~~~italic(hat(f)[k])} ==", format(round(NormKmerCount, 2), nsmall = 2),
1548813312737:#                             "*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1548813312738:#                             "*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1548813312739:#                             "~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1548813312739:#           hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1548813312740:facet_grid(Locus ~ N, scales = "free_y") +
1548813312740:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1548813312740:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1548813312741:theme_bw() +
1548813312741:plotTheme +
1548813312741:labs(title    = expression(italic("k")*"-mer depth"),
1548813312742:subtitle = paste("Top", nTopAlleles, "alleles/genes on sample", sample.name),
1548813312742:x        = "Position along sequence (bp)",
1548813312743:y        = expression(paste(italic(k), "-mer depth")),
1548813312743:# caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1548813312744:caption  = expression(paste(italic("s"),": score;  ",
1548813312745:italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1548813312746:italic("c"),": coverage;  ",
1548813312746:italic(sigma), ": standard deviation;  ",
1548813312747:italic(bar(d)), ": average depth"), sep = "")
1548813312748:)
1548813312748:# guides(fill  = guide_legend(title  ="Allele"), color = FALSE) +
1548813312749:d.plot
1548813312749:}
1548813326817:width  <- nAlleles * wFactor
1548813327289:loci     <- unique(data.to.plot$Locus)
1548813327933:lociList <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1548813328136:lociList <- split(loci, ceiling(seq_along(loci)/3))
1548813328556:plotList <- list()
1548813330790:loci
1548813333151:lociList
1548813336937:for (lociSet in lociList) {
1548813336938:print(lociSet)
1548813336939:subset.to.plot <- data.to.plot %>%
1548813336939:filter(Locus %in% lociSet)
1548813336940:currentPlot <- plotDepth(subset.to.plot, labelsData, fillPalette, borderPalette)
1548813336940:plotList <- c(plotList, list(currentPlot))
1548813336941:print(currentPlot)
1548813336942:# print(unique(subset.to.plot$Locus))
1548813336942:}
1548813471323:# Function for plotting k-mer depth ----------------------------------------
1548813471323:plotDepth <- function(dataToPlot, labelsData, fillColors, borderColors) {
1548813471324:max.x       <- max(dataToPlot$Position)
1548813471324:max.y       <- max(dataToPlot$kmerDepth)
1548813471324:x.limits    <- seq(0, max.x, 100)
1548813471325:y.limits    <- seq(0, max.y, 20)
1548813471325:nTopAlleles <- length(unique(dataToPlot$N))
1548813471326:d.plot <- ggplot(data = dataToPlot, aes(x = Position, y = kmerDepth),
1548813471326:size = 0.2) +
1548813471326:geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1548813471327:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1548813471327:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1548813471328:# scale_color_manual(values = getPalette) +
1548813471328:scale_color_manual(values = borderColors) +
1548813471329:scale_fill_manual(values = fillColors) +
1548813471329:geom_text(data = labelsData,
1548813471330:# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1548813471331:# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1548813471331:aes(x = Length, y = info.y * 0.5, group = Locus,
1548813471332:hjust = 0,
1548813471333:label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1548813471333:show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1548813471334:nudge_x = -(max.x*0.025)
1548813471335:) +
1548813471336:geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1548813471337:alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1548813471338:# geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1548813471338:size = annotTextSize * 1.05, color = "#333333") +
1548813471339:geom_text(data = labelsData,
1548813471340:parse = TRUE,
1548813471341:aes(x = info.x, y = info.y,
1548813471341:label = paste0("{{{{italic(s)==", format(round(Score, 2), nsmall = 2),
1548813471342:"*~~~italic(hat(f)[k])} ==", format(round(NormKmerCount, 2), nsmall = 2),
1548813471343:"*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1548813471344:"*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1548813471344:"~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1548813471345:hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1548813471346:facet_grid(Locus ~ N, scales = "free_y") +
1548813471347:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1548813471348:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1548813471349:theme_bw() +
1548813471350:plotTheme +
1548813471351:labs(title    = expression(italic("k")*"-mer depth"),
1548813471351:subtitle = paste("Top", nTopAlleles, "alleles/genes on sample", sample.name),
1548813471352:x        = "Position along sequence (bp)",
1548813471353:y        = expression(paste(italic(k), "-mer depth")),
1548813471355:# caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1548813471357:caption  = expression(paste(italic("s"),": score;  ",
1548813471359:italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1548813471361:italic("c"),": coverage;  ",
1548813471363:italic(sigma), ": standard deviation;  ",
1548813471366:italic(bar(d)), ": average depth"), sep = "")
1548813471367:)
1548813471369:# guides(fill  = guide_legend(title  ="Allele"), color = FALSE) +
1548813471370:d.plot
1548813471371:}
1548813485308:loci     <- unique(data.to.plot$Locus)
1548813485699:lociList <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1548813485958:lociList <- split(loci, ceiling(seq_along(loci)/3))
1548813486356:plotList <- list()
1548813486951:for (lociSet in lociList) {
1548813486951:print(lociSet)
1548813486952:subset.to.plot <- data.to.plot %>%
1548813486952:filter(Locus %in% lociSet)
1548813486952:labelsData <- getLabelsData(subset.to.plot)
1548813486953:currentPlot <- plotDepth(subset.to.plot, labelsData, fillPalette, borderPalette)
1548813486953:plotList <- c(plotList, list(currentPlot))
1548813486953:print(currentPlot)
1548813486954:# print(unique(subset.to.plot$Locus))
1548813486954:}
1548813531724:length(plotList)
1548813987567:seq_along(plotList)
1548814151432:for (i in seq_along(plotList)) {
1548814151433:nLociToPlot <- length(lociList[[i]])
1548814151434:height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1548814151434:width  <- nAlleles * wFactor
1548814151435:out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1548814151435:print(out.filename)
1548814151436:# pdf(out.filename, width = width, height = height)
1548814151437:# dev.off()
1548814151438:}
1548814214561:(
1548814221621:for (i in seq_along(plotList)) {
1548814221621:nLociToPlot <- length(lociList[[i]])
1548814221622:height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1548814221622:width  <- nAlleles * wFactor
1548814221622:out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1548814221623:print(out.filename)
1548814221623:pdf(out.filename, width = width, height = height)
1548814221624:print(plotList[[i]])
1548814221624:dev.off()
1548814221624:}
1548814388104:out.filename <- paste(out.prefix, out.format, sep = ".")
1548814388540:pdf(out.filename)
1548814390691:for (i in seq_along(plotList)) {
1548814390691:nLociToPlot <- length(lociList[[i]])
1548814390692:height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1548814390692:width  <- nAlleles * wFactor
1548814390693:# out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1548814390693:# print(out.filename)
1548814390694:print(plotList[[i]])
1548814390695:}
1548814398295:dev.off()
1548815001871:library(cowplot)
1549033744638:# Filtering for BLAST results from failed alleles
1549033744678:# Install an load packages ------------------------------------------------
1549033744678:installAndLoadPackages <- function(pkg){
1549033744679:cat("Please wait a moment! Checking for required packages... ")
1549033744679:cat("Done!\n")
1549033744680:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549033744680:if (length(new.pkg)) {
1549033744681:cat("Installing new packages... ")
1549033744681:install.packages(new.pkg, dependencies = TRUE,
1549033744682:repos="http://cran.rstudio.com/")
1549033744682:cat("Done!\n")
1549033744683:}
1549033744684:cat("Loading packages... \n")
1549033744684:sapply(pkg, require, character.only = TRUE)
1549033744685:cat("Done!\n")
1549033744685:}
1549033744687:requiredPackages <- c("ggpubr", "RColorBrewer", "gridExtra",
1549033744687:"extrafont", "grid", "tidyverse", "xlsx")
1549033744688:installAndLoadPackages(requiredPackages)
1549033761035:options(stringsAsFactors = F)
1549033761036:# Functions ---------------------------------------------------------------
1549033761036:# General variables -------------------------------------------------------
1549033761037:# stingVersion <- "v0.23.2"
1549033761037:stingVersion <- "v0.24"
1549033761038:# dataSetName  <- "4species"
1549033761039:# dataSetName  <- "nm1000"
1549033761039:# schemeName   <- "mlst"
1549033761040:dataSetName  <- "nm20"
1549033761041:# schemeName   <- "cgmlst"
1549033761041:# dataDir   <- str_glue("/home/hspitia/windows/Dropbox/gatech/projects/STing/manuscript/data/typer/{stingVersion}")
1549033761041:dataDir   <- str_glue("/home/hspitia/Dropbox/gatech/projects/STing/manuscript/data/typer/{stingVersion}")
1549033761052:ramFactor  <- 1024
1549033761053:nGeneList  <- c("mlst" = 7, "rmlst" = 53, "cgmlst" = 1605)
1549033761054:genePrefix <- c("rmlst" = "BACT*", "cgmlst" = "NEIS*")
1549033761055:# Loading Data ------------------------------------------------------------
1549033966774:schemeName <- "cgmlst"
1549033968067:blastResultsFile <- str_glue("{dataDir}/typer.{stingVersion}.{dataSetName}.{schemeName}.failed.blast.tsv")
1549033979292:# stingIn  <- read.table(stingResultsFile, sep = "\t", header = T)
1549033979293:(bastResults <- read_tsv(blastResultsFile))
1549033986220:blastResultsFile <- str_glue("{dataDir}/typer.{stingVersion}.{dataSetName}.{schemeName}.failed.blast.tsv.gz")
1549033987566:# stingIn  <- read.table(stingResultsFile, sep = "\t", header = T)
1549033987566:(bastResults <- read_tsv(blastResultsFile))
1549034308956:blastResults <- bastResults
1549034321140:rm(bastResults)
1549034336610:(samples <- unique(blastResults$sample))
1549034406475:nTopHits <- 4
1549035025821:if (require("Lahman")) {
1549035027214:# Find 10 players with most games
1549035027215:# A little nicer with %>%
1549035027215:tbl_df(Batting) %>%
1549035027216:group_by(playerID) %>%
1549035027216:tally(G) %>%
1549035027217:top_n(10)
1549035029150:# Find year with most games for each player
1549035029150:tbl_df(Batting) %>% group_by(playerID) %>% top_n(1, G)
1549035044741:if (require("Lahman")) {
1549035044742:# Find 10 players with most games
1549035044742:# A little nicer with %>%
1549035044743:tbl_df(Batting) %>%
1549035044744:group_by(playerID) %>%
1549035044745:tally(G) %>%
1549035044746:top_n(10)
1549035044748:# Find year with most games for each player
1549035044749:tbl_df(Batting) %>% group_by(playerID) %>% top_n(1, G)
1549035044751:}
1549035052688:if (require("Lahman")) {
1549035052689:# Find 10 players with most games
1549035052690:# A little nicer with %>%
1549035052690:tbl_df(Batting) %>%
1549035052691:group_by(playerID) %>%
1549035052691:tally(G) %>%
1549035052692:top_n(10)
1549035052693:# Find year with most games for each player
1549035052693:tbl_df(Batting) %>% group_by(playerID) %>% top_n(1, G)
1549035052694:}
1549035063947:tbl_df(Batting)
1549035070656:if (require("Lahman")) {
1549035070656:# Find 10 players with most games
1549035070657:# A little nicer with %>%
1549035070657:tbl_df(Batting) %>%
1549035070658:group_by(playerID) %>%
1549035070658:tally(G) %>%
1549035070659:top_n(10)
1549035070660:# Find year with most games for each player
1549035070660:tbl_df(Batting) %>% group_by(playerID) %>% top_n(1, G)
1549035070661:}
1549035098777:# Find year with most games for each player
1549035098778:tbl_df(Batting) %>% group_by(playerID) %>% top_n(1, G)
1549035113330:# Find year with most games for each player
1549035113330:tbl_df(Batting) %>% group_by(playerID) %>% top_n(2, G)
1549035128178:# Find year with most games for each player
1549035128179:tbl_df(Batting) %>% group_by(playerID) %>% top_n(1, G)
1549035151593:19781*2
1549035161597:# Find year with most games for each player
1549035161598:tbl_df(Batting) %>% group_by(playerID) %>% top_n(2, G)
1549035214563:(blastResults %>%
1549035214564:group_by(sample, locus) %>%
1549035214564:top_n(nTopHits))
1549035226807:(filteredTable <- blastResults %>%
1549035226807:group_by(sample, locus) %>%
1549035226808:top_n(nTopHits))
1549035230760:View(filteredTable)
1549035486107:(filteredTable <- blastResults %>%
1549035486107:group_by(sample, locus) %>%
1549035486108:top_n(1))
1549035505436:(filteredTable <- blastResults %>%
1549035505437:group_by(sample, locus) %>%
1549035505437:top_n(1, pident))
1549035511606:View(filteredTable)
1549035740368:(filteredTable <- blastResults %>%
1549035740368:group_by(sample, locus) %>%
1549035740369:top_n(1, pident, qcovhsp))
1549035772099:(filteredTable <- blastResults %>%
1549035772100:group_by(sample, locus) %>%
1549035772100:top_n(1, sseqid))
1549035922629:(filteredTable <- blastResults %>%
1549035922630:arrange(sample, locus, pident, qcovhsp) %>%
1549035922631:group_by(sample, locus) %>%
1549035922631:top_n(1, sseqid))
1549035935787:View(filteredTable)
1549036217653:(filteredTable <- blastResults %>%
1549036217654:group_by(sample, locus) %>%
1549036217655:arrange(sample, locus, pident, qcovhsp) %>%
1549036217655:filter(row_number()==1))
1549036243336:View(filteredTable)
1549036264463:(filteredTable <- blastResults %>%
1549036264463:# group_by(sample, locus) %>%
1549036264464:arrange(sample, locus, pident, qcovhsp) %>%
1549036264464:filter(row_number()==1))
1549036349932:(filteredTable <- blastResults %>%
1549036349933:# group_by(sample, locus) %>%
1549036349933:arrange(sample, locus, desc(pident), desc(qcovhsp)) %>%
1549036349933:filter(row_number()==1))
1549036357692:(filteredTable <- blastResults %>%
1549036357692:group_by(sample, locus) %>%
1549036357693:arrange(sample, locus, desc(pident), desc(qcovhsp)) %>%
1549036357693:filter(row_number()==1))
1549036363751:View(filteredTable)
1549036398453:(filteredTable <- blastResults %>%
1549036398473:group_by(sample, locus) %>%
1549036398474:arrange(sample, locus, desc(pident), desc(qcovhsp)) %>%
1549036398475:filter(row_number() %in% 1:nTopHits))
1549037723374:failedAlleleFile <- str_glue("{dataDir}/typer.{stingVersion}.{dataSetName}.{schemeName}.failed.tsv")
1549037738581:failedAllelesFile <- str_glue("{dataDir}/typer.{stingVersion}.{dataSetName}.{schemeName}.failed.tsv")
1549037953280:(failedAlleles <- read_tsv(failedAllelesFile))
1549038363269:(samples <- unique(failedAlleles$Sample))
1549038364847:samples
1549039119141:for (sample in samples) {
1549039119142:for (locus in loci) {
1549039119142:obsAlleles <- failedAlleles %>% filter(Sample == sample, Locus == locus) %>% select(SeqObs) %>% pull() %>% str_split(" ")
1549039119143:print(obsAlleles)
1549039119144:# blastResults %>%
1549039119144:}
1549039119145:}
1549039122403:(loci <- unique(failedAlleles$Locus))
1549039126001:for (sample in samples) {
1549039126002:for (locus in loci) {
1549039126003:obsAlleles <- failedAlleles %>% filter(Sample == sample, Locus == locus) %>% select(SeqObs) %>% pull() %>% str_split(" ")
1549039126003:print(obsAlleles)
1549039126004:# blastResults %>%
1549039126004:}
1549039126005:}
1549039159971:for (sample in samples) {
1549039159972:for (locus in loci) {
1549039159972:obsAlleles <- failedAlleles %>% filter(Sample == sample, Locus == locus) %>% select(SeqObs) %>% pull() %>% str_split(" ") %>% unlist()
1549039159973:print(obsAlleles)
1549039159973:# blastResults %>%
1549039159974:}
1549039159975:}
1549039546390:for (sample in samples) {
1549039546391:for (locus in failedAlleles %>% filter(Sample == sample) %>% select(Locus) %>% pull()) {
1549039546392:obsAlleles <- failedAlleles %>% filter(Sample == sample, Locus == locus) %>% select(SeqObs) %>% pull() %>% str_split(" ") %>% unlist()
1549039546392:print(obsAlleles)
1549039546393:# blastResults %>%
1549039546394:}
1549039546395:}
1549054856896:resultsInfo  <- failedAlleles %>%
1549054856897:filter(Sample == sample, Locus == locus)
1549054857817:obsAlleles <- resultsInfo$Observed %>% str_split(";") %>% unlist() %>% as.numeric()
1549054877102:predAllele <- resultsInfo$Predicted #%>% str_remove("[^0-9]")
1549054877569:nObserved  <- length(obsAlleles)
1549054885426:blastSubset <- blastResults %>%
1549054885426:filter(qseqid == str_c(locus, "_", obsAlleles)) %>%
1549054885427:filter(sample == sample,
1549054885428:locus == locus)
1549054895276:blastSubset
1549054901761:View(blastSubset)
1549054972070:failedBlastTable <- data.frame()
1549054972705:for (sam in samples) {
1549054972706:for (loc in failedAlleles %>% filter(Sample == sample) %>% select(Locus) %>% pull()) {
1549054972707:# # obsAlleles <- failedAlleles %>% filter(Sample == sample, Locus == locus) %>% select(SeqObs) %>% pull() %>% str_split(" ") %>% unlist()
1549054972708:# # predAlle
1549054972708:# le <- failedAlleles %>% filter(Sample == sample, Locus == locus) %>% select(SeqObs) %>% pull() %>% str_split(" ") %>% unlist()
1549054972709:# resultsInfo  <- failedAlleles %>%
1549054972710:# 	filter(Sample == sample, Locus == locus)
1549054972711:#
1549054972712:# obsAlleles <- resultsInfo$Observed %>% str_split(";") %>% unlist() %>% as.numeric()
1549054972713:# predAllele <- resultsInfo$Predicted #%>% str_remove("[^0-9]")
1549054972714:# nObserved  <- length(obsAlleles)
1549054972715:#
1549054972715:# (blastSubset <- blastResults %>%
1549054972716:# 	filter(qseqid == str_c(locus, "_", obsAlleles)) %>%
1549054972716:# 	filter(sample == sam,
1549054972717:# 				 locus == loc) %>%
1549054972717:# 	arrange(desc(pident), desc(qcovhsp)))
1549054972718:#
1549054972718:#
1549054972719:# df <- data_frame(rep(sample, nObserved),
1549054972719:# 								 rep(locus, nObserved),
1549054972720:# 								 obsAlleles,
1549054972720:# 								 rep("observed", nObserved),
1549054972721:# 								 rep(, nObserved),
1549054972721:# 								 rep(, nObserved),
1549054972722:# )
1549054972722:#
1549054972722:# row <- c(sample, locus, )
1549054972723:}
1549054972723:}
1549054981161:sam
1549054983617:loc
1549054990105:# obsAlleles <- failedAlleles %>% filter(Sample == sample, Locus == locus) %>% select(SeqObs) %>% pull() %>% str_split(" ") %>% unlist()
1549054990106:# predAlle
1549054990106:le <- failedAlleles %>% filter(Sample == sample, Locus == locus) %>% select(SeqObs) %>% pull() %>% str_split(" ") %>% unlist()
1549054999463:le
1549055038907:for (sam in samples) {
1549055038908:for (loc in failedAlleles %>% filter(Sample == sample) %>% select(Locus) %>% pull()) {
1549055038909:# # obsAlleles <- failedAlleles %>% filter(Sample == sample, Locus == locus) %>% select(SeqObs) %>% pull() %>% str_split(" ") %>% unlist()
1549055038909:# # predAllele <- failedAlleles %>% filter(Sample == sample, Locus == locus) %>% select(SeqObs) %>% pull() %>% str_split(" ") %>% unlist()
1549055038910:# resultsInfo  <- failedAlleles %>%
1549055038910:# 	filter(Sample == sample, Locus == locus)
1549055038911:#
1549055038911:# obsAlleles <- resultsInfo$Observed %>% str_split(";") %>% unlist() %>% as.numeric()
1549055038912:# predAllele <- resultsInfo$Predicted #%>% str_remove("[^0-9]")
1549055038913:# nObserved  <- length(obsAlleles)
1549055038913:#
1549055038914:# (blastSubset <- blastResults %>%
1549055038914:# 	filter(qseqid == str_c(locus, "_", obsAlleles)) %>%
1549055038915:# 	filter(sample == sample,
1549055038915:# 				 locus == locus) %>%
1549055038916:# 	arrange(desc(pident), desc(qcovhsp)))
1549055038916:#
1549055038917:#
1549055038917:# df <- data_frame(rep(sample, nObserved),
1549055038918:# 								 rep(locus, nObserved),
1549055038918:# 								 obsAlleles,
1549055038919:# 								 rep("observed", nObserved),
1549055038919:# 								 rep(, nObserved),
1549055038920:# 								 rep(, nObserved),
1549055038920:# )
1549055038920:#
1549055038921:# row <- c(sample, locus, )
1549055038921:}
1549055038922:}
1549055045965:# obsAlleles <- failedAlleles %>% filter(Sample == sample, Locus == locus) %>% select(SeqObs) %>% pull() %>% str_split(" ") %>% unlist()
1549055045966:# predAllele <- failedAlleles %>% filter(Sample == sample, Locus == locus) %>% select(SeqObs) %>% pull() %>% str_split(" ") %>% unlist()
1549055045966:resultsInfo  <- failedAlleles %>%
1549055045967:filter(Sample == sample, Locus == locus)
1549055048303:resultsInfo
1549055052923:obsAlleles <- resultsInfo$Observed %>% str_split(";") %>% unlist() %>% as.numeric()
1549055053579:predAllele <- resultsInfo$Predicted #%>% str_remove("[^0-9]")
1549055054641:nObserved  <- length(obsAlleles)
1549055056181:nObserved
1549055068400:blastSubset <- blastResults %>%
1549055068401:# filter(qseqid == str_c(locus, "_", obsAlleles)) %>%
1549055068402:filter(sample == sample,
1549055068402:locus == locus)
1549055072495:blastSubset
1549055089458:blastSubset <- blastResults %>%
1549055089459:filter(qseqid == str_c(locus, "_", obsAlleles))
1549055093535:blastSubset
1549055128583:blastResults %>%
1549055128584:filter(qseqid == str_c(locus, "_", obsAlleles)) %>%
1549055128584:filter(sample == sample)
1549055138659:blastSubset <- blastResults %>%
1549055138660:filter(qseqid == str_c(locus, "_", obsAlleles)) %>%
1549055138661:filter(sample == sample
1549055147466:)
1549055148964:)
1549055155069:blastSubset <- blastResults %>%
1549055155069:filter(qseqid == str_c(locus, "_", obsAlleles)) %>%
1549055155070:filter(sample == sample)
1549055160727:blastSubset
1549055182062:unique(blastSubset$sample)
1549055200064:sam
1549055202904:loc
1549055211452:blastSubset <- blastResults %>%
1549055211452:filter(qseqid == str_c(loc, "_", obsAlleles)) %>%
1549055211453:filter(sample == sam)
1549055214661:blastSubset
1549055260101:(blastSubset <- blastResults %>%
1549055260102:filter(sample == sam,
1549055260102:qseqid == str_c(loc, "_", obsAlleles)) %>%
1549055260103:arrange(desc(pident), desc(qcovhsp)))
1549055276670:(blastSubset <- blastResults %>%
1549055276670:filter(sample == sam,
1549055276671:qseqid %in%str_c(loc, "_", obsAlleles)) %>%
1549055276672:arrange(desc(pident), desc(qcovhsp)))
1549055279025:unique(blastSubset$sample)
1549055388367:# obsAlleles <- failedAlleles %>% filter(Sample == sample, Locus == locus) %>% select(SeqObs) %>% pull() %>% str_split(" ") %>% unlist()
1549055388367:# predAllele <- failedAlleles %>% filter(Sample == sample, Locus == locus) %>% select(SeqObs) %>% pull() %>% str_split(" ") %>% unlist()
1549055388368:resultsInfo  <- failedAlleles %>%
1549055388368:filter(Sample == sample, Locus == locus)
1549055539844:blastSubset$pident
1549055549967:c(blastSubset$pident)
1549055609025:failedBlastTable <- data.frame()
1549055609027:for (sam in samples) {
1549055609028:for (loc in failedAlleles %>% filter(Sample == sample) %>% select(Locus) %>% pull()) {
1549055609028:# obsAlleles <- failedAlleles %>% filter(Sample == sample, Locus == locus) %>% select(SeqObs) %>% pull() %>% str_split(" ") %>% unlist()
1549055609029:# predAllele <- failedAlleles %>% filter(Sample == sample, Locus == locus) %>% select(SeqObs) %>% pull() %>% str_split(" ") %>% unlist()
1549055609029:resultsInfo  <- failedAlleles %>%
1549055609030:filter(Sample == sample, Locus == locus)
1549055609031:obsAlleles <- resultsInfo$Observed %>% str_split(";") %>% unlist() %>% as.numeric()
1549055609032:predAllele <- resultsInfo$Predicted #%>% str_remove("[^0-9]")
1549055609032:nObserved  <- length(obsAlleles)
1549055609033:(blastSubset <- blastResults %>%
1549055609034:filter(sample == sam,
1549055609034:qseqid %in%str_c(loc, "_", obsAlleles)) %>%
1549055609035:arrange(desc(pident), desc(qcovhsp)))
1549055609037:df <- data_frame(rep(sample, nObserved),
1549055609038:rep(locus, nObserved),
1549055609038:obsAlleles,
1549055609039:rep("observed", nObserved),
1549055609040:blastSubset$pident,
1549055609040:blastSubset$qcovhsp,
1549055609041:)
1549055609042:failedBlastTable <- rbind.data.frame(failedBlastTable, df)
1549055609043:}
1549055609049:}
1549055633345:failedBlastTable <- data.frame()
1549055634017:for (sam in samples) {
1549055634018:for (loc in failedAlleles %>% filter(Sample == sample) %>% select(Locus) %>% pull()) {
1549055634018:# obsAlleles <- failedAlleles %>% filter(Sample == sample, Locus == locus) %>% select(SeqObs) %>% pull() %>% str_split(" ") %>% unlist()
1549055634019:# predAllele <- failedAlleles %>% filter(Sample == sample, Locus == locus) %>% select(SeqObs) %>% pull() %>% str_split(" ") %>% unlist()
1549055634019:resultsInfo  <- failedAlleles %>%
1549055634020:filter(Sample == sample, Locus == locus)
1549055634021:obsAlleles <- resultsInfo$Observed %>% str_split(";") %>% unlist() %>% as.numeric()
1549055634022:predAllele <- resultsInfo$Predicted #%>% str_remove("[^0-9]")
1549055634023:nObserved  <- length(obsAlleles)
1549055634023:(blastSubset <- blastResults %>%
1549055634024:filter(sample == sam,
1549055634024:qseqid %in%str_c(loc, "_", obsAlleles)) %>%
1549055634024:arrange(desc(pident), desc(qcovhsp)))
1549055634025:df <- data_frame(rep(sample, nObserved),
1549055634026:rep(locus, nObserved),
1549055634026:obsAlleles,
1549055634027:rep("observed", nObserved),
1549055634028:blastSubset$pident,
1549055634028:blastSubset$qcovhsp)
1549055634029:failedBlastTable <- rbind.data.frame(failedBlastTable, df)
1549055634030:}
1549055634031:}
1549055699354:failedBlastTable
1549055716124:failedBlastTable
1549056158073:View(failedBlastTable)
1549056500003:str_c(loc, "_", c(obsAlleles, predAllele))
1549057054502:resultsInfo  <- failedAlleles %>%
1549057054503:filter(Sample == sam, Locus == loc)
1549057054919:obsAlleles <- resultsInfo$Observed %>% str_split(";") %>% unlist() %>% as.numeric()
1549057055312:predAllele <- resultsInfo$Predicted #%>% str_remove("[^0-9]")
1549057055675:nObserved  <- length(obsAlleles)
1549057056278:(blastSubset <- blastResults %>%
1549057056279:filter(sample == sam,
1549057056280:qseqid %in% str_c(loc, "_", c(obsAlleles, predAllele))) %>%
1549057056280:arrange(desc(pident), desc(qcovhsp)) %>%
1549057056281:mutate(allele = unlist(str_split(qseqid, "_"))[2]) %>%
1549057056281:mutate(type = if_else(allele %in% obsAlleles, "observed", "predicted")) %>%
1549057056282:select(sample, locus = qseqid, allele, type, ident = pident, qcov = qcovhsp)
1549057056283:)
1549057072848:unlist(str_split(qseqid, "_"))
1549057079817:str_split(qseqid, "_")
1549057123894:(blastSubset <- blastResults %>%
1549057123895:filter(sample == sam,
1549057123896:qseqid %in% str_c(loc, "_", c(obsAlleles, predAllele))) %>%
1549057123896:arrange(desc(pident), desc(qcovhsp)) %>%
1549057123897:mutate(allele = unlist(str_split(qseqid, "_"))[2])# %>%
1549057123897:# mutate(type = if_else(allele %in% obsAlleles, "observed", "predicted")) %>%
1549057123898:# select(sample, locus = qseqid, allele, type, ident = pident, qcov = qcovhsp)
1549057123899:)
1549057131624:(blastSubset <- blastResults %>%
1549057131625:filter(sample == sam,
1549057131625:qseqid %in% str_c(loc, "_", c(obsAlleles, predAllele))) %>%
1549057131625:arrange(desc(pident), desc(qcovhsp)) #%>%
1549057131626:# mutate(allele = unlist(str_split(qseqid, "_"))[2])# %>%
1549057131627:# mutate(type = if_else(allele %in% obsAlleles, "observed", "predicted")) %>%
1549057131627:# select(sample, locus = qseqid, allele, type, ident = pident, qcov = qcovhsp)
1549057131628:)
1549057139763:c(obsAlleles, predAllele)
1549057146963:c(obsAlleles, predAllele)
1549057149496:obsAlleles
1549057151827:predAllele
1549057157732:obsAlleles <- resultsInfo$Observed %>% str_split(";") %>% unlist() %>% as.numeric()
1549057158985:obsAlleles
1549057162354:sam
1549057164823:loc
1549057166587:resultsInfo  <- failedAlleles %>%
1549057166588:filter(Sample == sam, Locus == loc)
1549057167606:obsAlleles <- resultsInfo$Observed %>% str_split(";") %>% unlist() %>% as.numeric()
1549057168751:obsAlleles
1549057179766:resultsInfo$Observed
1549057183721:failedBlastTable <- data.frame()
1549057187079:loc
1549057192356:resultsInfo  <- failedAlleles %>%
1549057192357:filter(Sample == sam, Locus == loc)
1549057193944:resultsInfo
1549057204300:failedAlleles
1549057210096:failedAlleles %>% filter(Sample == sam) %>% select(Locus) %>% pull()
1549057213948:resultsInfo  <- failedAlleles %>%
1549057213949:filter(Sample == sam, Locus == loc)
1549057216187:resultsInfo
1549057222381:failedAlleles
1549057240281:failedBlastTable <- data.frame()
1549057240681:for (sam in samples) {
1549057240682:for (loc in failedAlleles %>% filter(Sample == sam) %>% select(Locus) %>% pull()) {
1549057240683:# resultsInfo  <- failedAlleles %>%
1549057240684:# 	filter(Sample == sam, Locus == loc)
1549057240684:#
1549057240685:# obsAlleles <- resultsInfo$Observed %>% str_split(";") %>% unlist() %>% as.numeric()
1549057240686:# predAllele <- resultsInfo$Predicted #%>% str_remove("[^0-9]")
1549057240687:# nObserved  <- length(obsAlleles)
1549057240687:#
1549057240688:# (blastSubset <- blastResults %>%
1549057240688:# 		filter(sample == sam,
1549057240689:# 					 qseqid %in% str_c(loc, "_", c(obsAlleles, predAllele))) %>%
1549057240689:# 		arrange(desc(pident), desc(qcovhsp)) #%>%
1549057240690:# 		# mutate(allele = unlist(str_split(qseqid, "_"))[2])# %>%
1549057240693:# 		# mutate(type = if_else(allele %in% obsAlleles, "observed", "predicted")) %>%
1549057240694:# 		# select(sample, locus = qseqid, allele, type, ident = pident, qcov = qcovhsp)
1549057240695:# )
1549057240696:#
1549057240696:# # obsDf <- data_frame(sample = rep(sam, nObserved),
1549057240697:# # 										locus  = rep(loc, nObserved),
1549057240697:# # 										allele = obsAlleles,
1549057240698:# # 										type   = rep("observed", nObserved),
1549057240698:# # 										ident  = blastSubset$pident,
1549057240699:# # 										qcov   = blastSubset$qcovhsp)
1549057240700:# # predDf <- data_frame(sample = sam,
1549057240700:# # 										 locus = loc,
1549057240701:# # 										 observed = predAllele,
1549057240701:# # 										 type = rep("observed", nObserved),
1549057240702:# # 										 ident = blastSubset$pident,
1549057240702:# # 										 qcov =blastSubset$qcovhsp
1549057240703:#
1549057240703:# failedBlastTable <- rbind.data.frame(failedBlastTable, blastSubset)
1549057240704:}
1549057240704:}
1549057247696:resultsInfo  <- failedAlleles %>%
1549057247697:filter(Sample == sam, Locus == loc)
1549057250012:resultsInfo
1549057254079:obsAlleles <- resultsInfo$Observed %>% str_split(";") %>% unlist() %>% as.numeric()
1549057255906:obsAlleles
1549057257637:predAllele
1549057259869:predAllele <- resultsInfo$Predicted #%>% str_remove("[^0-9]")
1549057261005:predAllele
1549057262764:nObserved  <- length(obsAlleles)
1549057264260:nObserved
1549057267760:(blastSubset <- blastResults %>%
1549057267760:filter(sample == sam,
1549057267761:qseqid %in% str_c(loc, "_", c(obsAlleles, predAllele))) %>%
1549057267762:arrange(desc(pident), desc(qcovhsp)) #%>%
1549057267762:# mutate(allele = unlist(str_split(qseqid, "_"))[2])# %>%
1549057267763:# mutate(type = if_else(allele %in% obsAlleles, "observed", "predicted")) %>%
1549057267764:# select(sample, locus = qseqid, allele, type, ident = pident, qcov = qcovhsp)
1549057267764:)
1549057277105:View(blastSubset)
1549057342931:(blastSubset <- blastResults %>%
1549057342932:filter(sample == sam,
1549057342932:qseqid %in% str_c(loc, "_", c(obsAlleles, predAllele))) %>%
1549057342933:arrange(desc(pident), desc(qcovhsp)) %>%
1549057342934:mutate(allele = unlist(str_split(qseqid, "_"))[2])# %>%
1549057342934:# mutate(type = if_else(allele %in% obsAlleles, "observed", "predicted")) %>%
1549057342935:# select(sample, locus = qseqid, allele, type, ident = pident, qcov = qcovhsp)
1549057342935:)
1549057438543:(blastSubset <- blastResults %>%
1549057438544:filter(sample == sam,
1549057438544:qseqid %in% str_c(loc, "_", c(obsAlleles, predAllele))) %>%
1549057438545:arrange(desc(pident), desc(qcovhsp)) %>%
1549057438546:mutate(allele = unlist(str_split(.$qseqid, "_"))[2])# %>%
1549057438546:# mutate(type = if_else(allele %in% obsAlleles, "observed", "predicted")) %>%
1549057438547:# select(sample, locus = qseqid, allele, type, ident = pident, qcov = qcovhsp)
1549057438547:)
1549058401327:str_split("NEIS2128_26", "_")
1549058410145:unlist(str_split("NEIS2128_26", "_"))
1549058416284:unlist(str_split("NEIS2128_26", "_"))[2]
1549058434078:as.numeric(unlist(str_split("NEIS2128_26", "_"))[2])
1549058469718:failedBlastTable <- data.frame()
1549058470257:for (sam in samples) {
1549058470258:for (loc in failedAlleles %>% filter(Sample == sam) %>% select(Locus) %>% pull()) {
1549058470259:resultsInfo  <- failedAlleles %>%
1549058470259:filter(Sample == sam, Locus == loc)
1549058470260:obsAlleles <- resultsInfo$Observed %>% str_split(";") %>% unlist() %>% as.numeric()
1549058470261:predAllele <- resultsInfo$Predicted #%>% str_remove("[^0-9]")
1549058470262:nObserved  <- length(obsAlleles)
1549058470263:(blastSubset <- blastResults %>%
1549058470264:filter(sample == sam,
1549058470264:qseqid %in% str_c(loc, "_", c(obsAlleles, predAllele))) %>%
1549058470265:arrange(desc(pident), desc(qcovhsp)) %>%
1549058470266:mutate(allele = unlist(str_split(qseqid, "_"))[2])# %>%
1549058470267:# mutate(type = if_else(allele %in% obsAlleles, "observed", "predicted")) %>%
1549058470268:# select(sample, locus = qseqid, allele, type, ident = pident, qcov = qcovhsp)
1549058470268:)
1549058470269:# as.numeric(unlist(str_split("NEIS2128_26", "_"))[2])
1549058470270:# obsDf <- data_frame(sample = rep(sam, nObserved),
1549058470270:# 										locus  = rep(loc, nObserved),
1549058470271:# 										allele = obsAlleles,
1549058470272:# 										type   = rep("observed", nObserved),
1549058470272:# 										ident  = blastSubset$pident,
1549058470273:# 										qcov   = blastSubset$qcovhsp)
1549058470274:# predDf <- data_frame(sample = sam,
1549058470275:# 										 locus = loc,
1549058470275:# 										 observed = predAllele,
1549058470276:# 										 type = rep("observed", nObserved),
1549058470276:# 										 ident = blastSubset$pident,
1549058470277:# 										 qcov =blastSubset$qcovhsp
1549058470278:# failedBlastTable <- rbind.data.frame(failedBlastTable, blastSubset)
1549058470279:}
1549058470280:}
1549058479740:blastSubset
1549058486330:View(blastSubset)
1549058529919:obsAlleles
1549058532923:obsAlleles
1549058537426:predAllele
1549058545516:View(blastSubset)
1549058560374:(blastSubset <- blastResults %>%
1549058560374:filter(sample == sam,
1549058560375:qseqid %in% str_c(loc, "_", c(obsAlleles, predAllele))) %>%
1549058560375:arrange(desc(pident), desc(qcovhsp)) %>%
1549058560376:mutate(allele = unlist(str_split(qseqid, "_"))[2])# %>%
1549058560376:# mutate(type = if_else(allele %in% obsAlleles, "observed", "predicted")) %>%
1549058560377:# select(sample, locus = qseqid, allele, type, ident = pident, qcov = qcovhsp)
1549058560377:)
1549120549682:#!/usr/bin/env Rscript
1549120549694:# ##############################################################################
1549120549695:#  Author:   Hector Fabio Espitia-Navarro
1549120549695:#            Georgia Institute of Technology
1549120549696:#  Version:  1.0
1549120549696:#  Date:     01/19/2019
1549120549697:# ##############################################################################
1549120549698:# Install required packages -----------------------------------------------
1549120549698:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549120549699:if(!file.exists(personal.lib.path))
1549120549699:dir.create(personal.lib.path)
1549120549701:printMessage <- function(message, verbose){
1549120549701:if(verbose)
1549120549702:cat(message)
1549120549702:}
1549120549703:# crayon::bold("Hola")
1549120549704:installAndLoadPackages <- function(pkg, verbose){
1549120549704:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1549120549705:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1549120549705:printMessage("Done!\n", verbose)
1549120549706:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549120549706:if (length(new.pkg)) {
1549120549707:printMessage("Installing new packages... ", verbose)
1549120549707:install.packages(new.pkg, dependencies = TRUE,
1549120549708:repos="http://cran.rstudio.com/",
1549120549708:lib = personal.lib.path)
1549120549709:printMessage("Done!\n", verbose)
1549120549709:}
1549120549710:printMessage("Loading required packages... ", verbose)
1549120549710:sapply(pkg, function(x){
1549120549711:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549120549712:})
1549120549712:printMessage("Done!\n", verbose)
1549120549713:}
1549120549714:# github.related.packages <- c("devtools", "Rcpp")
1549120549714:# packages <- c("argparser", "tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite")
1549120549715:packages <- c("tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite", "gridExtra")
1549120549716:# installAndLoadPackages(packages, verbose = TRUE)
1549120549716:installAndLoadPackages("argparser", verbose = FALSE)
1549120549850:# Command line arguments processing ---------------------------------------
1549120549851:# Get script name
1549120549851:initial.options <- commandArgs(trailingOnly = FALSE)
1549120549852:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1549120549853:# Process command line arguments
1549120549853:# Create a parser
1549120549854:p <- arg_parser("This script generates k-mer depth plots using a depth file generated by the\033[1mSTing typer\033[22m tool (-t option).",
1549120549854:name = script.name)
1549120549909:# Add Positional arguments (required)
1549120549910:p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
1549120549910:# Add options
1549120549911:p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1549120549912:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1549120549912:default = "kmer_depth")
1549120549913:p <- add_argument(p, "--sample_name", help = "Sample name.",
1549120549913:default = "input file's name")
1549120549914:p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'",
1549120549914:default = "pdf")
1549120549915:# Initialization of variables ---------------------------------------------
1549120549915:# Values to test the script using RStudio
1549120549916:script.home <- "/home/hspitia/projects/sting"
1549120549916:# inputFile   <- paste(script.home, "ERR036060.depth.2.tsv", sep = "/")
1549120549917:# geneFile    <- paste(script.home, "rmlst_failed_loci.txt", sep = "/")
1549120549917:inputFile   <- paste(script.home, "depth.tsv", sep = "/")
1549120549917:geneFile    <- paste(script.home, "loci.txt", sep = "/")
1549120549918:out.format  <- "pdf"
1549120549918:out.prefix  <- "kmer_ext_depth"
1549120549919:sample.name <- basename(inputFile)
1549120549919:# Parse command line arguments
1549120549919:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1549120549920:argv <- list()
1549120549920:if(command.line) {
1549120549921:argv <- parse_args(p)
1549120549921:} else {
1549120549921:argv <- parse_args(p, list(inputFile,
1549120549921:# "--gene_file", geneFile,
1549120549922:"--prefix", out.prefix,
1549120549922:"--sample_name", sample.name,
1549120549922:"--format", out.format))
1549120549923:}
1549120549925:# Get argument values from the command line
1549120549926:input.file  <- argv$input_file
1549120549926:gene.file   <- argv$gene_file
1549120549927:out.format  <- argv$format
1549120549927:out.prefix  <- argv$prefix
1549120549928:sample.name <- argv$sample_name
1549120549928:# if (sample.name == "")
1549120549929:if (sample.name == "input file's name")
1549120549929:sample.name <- basename(input.file)
1549120549930:# Function to check if file exists ----------------------------------------
1549120549930:CheckFileExists <- function(file.list) {
1549120549930:non.exist.files <- !file.exists(file.list)
1549120549930:if(any(non.exist.files)) {
1549120549931:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549120549931:}
1549120549931:}
1549120549932:# Check for input files ---------------------------------------------------
1549120549933:files.to.check <- c(input.file)
1549120549933:error.message  <- CheckFileExists(files.to.check)
1549120549948:if(!is.null(error.message)){
1549120549949:stop(error.message)
1549120549949:} else {
1549120549949:# Code core - Begin -------------------------------------------------------
1549120549950:installAndLoadPackages(packages, verbose = TRUE)
1549120549950:# FUNCTIONS:
1549120549950:# Function to dark a list of colors ---------------------------------------
1549120549951:darkColors <- function(palette, level){
1549120549951:rgbColors <- as.data.frame(t(as.data.frame(lapply(as.data.frame(t(col2rgb(palette))),
1549120549951:function(x) { round(x * level)}))))
1549120549952:unname(sapply(rgbColors, function(x){ rgb(x[1], x[2], x[3], maxColorValue=255) }))
1549120549952:}
1549120549952:# Function for plotting k-mer depth ----------------------------------------
1549120549953:plotDepth <- function(dataToPlot, labelsData, fillColors, borderColors) {
1549120549953:max.x       <- max(dataToPlot$Position)
1549120549953:max.y       <- max(dataToPlot$kmerDepth)
1549120549954:x.limits    <- seq(0, max.x, 100)
1549120549954:y.limits    <- seq(0, max.y, 20)
1549120549955:nTopAlleles <- length(unique(dataToPlot$N))
1549120549955:d.plot <- ggplot(data = dataToPlot, aes(x = Position, y = kmerDepth),
1549120549956:size = 0.2) +
1549120549956:geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1549120549957:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1549120549957:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1549120549958:# scale_color_manual(values = getPalette) +
1549120549958:scale_color_manual(values = borderColors) +
1549120549959:scale_fill_manual(values = fillColors) +
1549120549959:geom_text(data = labelsData,
1549120549960:# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1549120549960:# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1549120549961:aes(x = Length, y = info.y * 0.5, group = Locus,
1549120549961:hjust = 0,
1549120549962:label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1549120549962:show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1549120549963:nudge_x = -(max.x*0.025)
1549120549963:) +
1549120549964:geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1549120549964:alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1549120549965:# geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1549120549965:size = annotTextSize * 1.05, color = "#333333") +
1549120549966:geom_text(data = labelsData,
1549120549966:parse = TRUE,
1549120549967:aes(x = info.x, y = info.y,
1549120549967:label = paste0("{{{{italic(s)==", format(round(Score, 2), nsmall = 2),
1549120549968:"*~~~italic(hat(f)[k])} ==", format(round(NormKmerCount, 2), nsmall = 2),
1549120549969:"*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1549120549969:"*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1549120549970:"~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1549120549970:hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1549120549971:facet_grid(Locus ~ N, scales = "free_y") +
1549120549971:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1549120549972:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1549120549973:theme_bw() +
1549120549973:plotTheme +
1549120549974:labs(title    = expression(italic("k")*"-mer depth"),
1549120549975:subtitle = paste("Top", nTopAlleles, "alleles/genes on sample", sample.name),
1549120549975:x        = "Position along sequence (bp)",
1549120549976:y        = expression(paste(italic(k), "-mer depth")),
1549120549976:# caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1549120549979:caption  = expression(paste(italic("s"),": score;  ",
1549120549980:italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1549120549981:italic("c"),": coverage;  ",
1549120549983:italic(sigma), ": standard deviation;  ",
1549120549984:italic(bar(d)), ": average depth"), sep = "")
1549120549985:)
1549120549986:# guides(fill  = guide_legend(title  ="Allele"), color = FALSE) +
1549120549986:d.plot
1549120549987:}
1549120549988:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549120549988:# Function for plotting k-mer depth distributions as box plots ------------
1549120549989:plotDepthDist <- function(data.to.plot, labelsData, fillColors, borderColors){
1549120549990:dist.plot <- ggplot(data.to.plot, aes(x = AlPos, y = kmerDepth)) +
1549120549990:geom_jitter(position = position_jitter(width=.3), aes(color = Locus),
1549120549991:alpha = 0.4, size = 1.2, shape = 16) +
1549120549992:geom_boxplot(alpha = 0.7, size = 0.5, aes(fill = Locus, color = Locus)) +
1549120549993:geom_text(data = labelsData, size = 4, hjust = "center",
1549120549993:aes(x = N,#(N - 0.5),
1549120549994:y = info.y * 1.05,
1549120549995:label = Allele),
1549120549996:color = "#333333") +
1549120549997:geom_text(data = labelsData, size = 3, hjust = "center",
1549120549997:parse = TRUE,
1549120549998:aes(x = N,#(N - 0.4),
1549120549999:# y = info.y * 0.08,
1549120550000:y = info.y * 0.96,
1549120550001:label = paste0("sigma ==",format(round(sd, 1), nsmall = 1))),
1549120550002:color = "#333333") +
1549120550003:geom_point(data = labelsData,
1549120550005:shape = 23, fill = "white",
1549120550006:aes(x = N, y = meanDepth)) +
1549120550008:facet_grid(Locus ~ ., scales = "free_y") +
1549120550010:scale_color_manual(values = borderColors) +
1549120550010:scale_fill_manual(values = fillColors) +
1549120550011:labs(title = expression(paste(italic("k"), "-mer depth distribution")),
1549120550012:subtitle = basename(input.file),
1549120550013:x        = "Allele Ranking",
1549120550014:y        = expression(paste(italic(k), "-mer depth")),
1549120550015:caption  = expression(paste(italic(sigma), ": standard deviation")))+#,"sd: standard deviation") +
1549120550016:theme_bw() +
1549120550017:plotTheme +
1549120550018:theme(axis.text.x   = element_text(angle = 0, size = axisTextSize,
1549120550019:vjust = 1, hjust = 0.5, color = textColor))
1549120550020:dist.plot
1549120550021:}
1549120550022:# Function to get data for annotations ------------------------------------
1549120550023:getLabelsData <- function(data.to.plot) {
1549120550024:max.x <- max(data.to.plot$Position)
1549120550025:max.y <- max(data.to.plot$kmerDepth)
1549120550027:nLoci    <- length(unique(data.to.plot$Locus))
1549120550028:nAlleles <- length(unique(data.to.plot$N))
1549120550030:alleles     <- unique(data.to.plot$Allele)
1549120550031:loci        <- as.character(unique(data.to.plot$Locus))
1549120550033:lociLabels  <- c()
1549120550034:name.x      <- c()
1549120550035:name.y      <- c()
1549120550036:info.x      <- c()
1549120550037:info.y      <- c()
1549120550041:covs        <- c()
1549120550043:avgDepths   <- c()
1549120550044:meanDepth.x <- c()
1549120550046:meanDepth.y <- c()
1549120550048:for (i in loci) {
1549120550049:lociLabels <- c(lociLabels, rep(i, nAlleles))
1549120550051:}
1549120550053:for (allele in alleles) {
1549120550054:locus       <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1549120550066:maxPos      <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549120550068:maxDepth    <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549120550070:# name.x      <- c(name.x, (maxPos / 2))
1549120550072:name.x      <- c(name.x, (max.x / 2))
1549120550074:name.y      <- c(name.y, (maxDepth * 0.25))
1549120550076:info.x      <- c(info.x, max.x * 0.02)
1549120550078:info.y      <- c(info.y, maxDepth * 1.5)
1549120550079:covs        <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549120550082:avgDepths   <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549120550084:}
1549120550086:labelsData <- data.frame(Allele = alleles,
1549120550088:name.x = name.x,
1549120550090:name.y = name.y,
1549120550092:info.x = info.x,
1549120550094:info.y = info.y,
1549120550096:meanDepth = avgDepths,
1549120550098:N = rep(unique(data.to.plot$N), nLoci),
1549120550100:Locus = lociLabels,
1549120550116:cov = covs
1549120550118:) %>%
1549120550120:left_join(data.to.plot %>%
1549120550122:group_by(Allele, Length, NormKmerCount, Score) %>%
1549120550124:summarise(sd = sd(kmerDepth)),
1549120550126:by = c("Allele" = "Allele")) #%>%
1549120550128:# mutate(
1549120550130:#   info   = paste0("cov=", format(round(covs, 1), nsmall = 1), "%   ",
1549120550132:#                   paste0("ad=", format(round(avgDepths, 1), nsmall = 1)),
1549120550134:#                   "   ",
1549120550136:#                   # expression(paste(italic(sigma), "=",format(round(sd, 1), nsmall = 1))))
1549120550138:#                   paste0("sd=", format(round(sd, 1), nsmall = 1))
1549120550139:#   )
1549120550141:# )
1549120550143:labelsData
1549120550145:}
1549120550149:# Check for genes/loci file to filter loci to plot  -----------------------
1549120550151:loci.to.plot <- c()
1549120550153:# if (!is.null(gene.file)|| gene.file != "") {
1549120550155:if (!is.null(gene.file) && !is.na(gene.file) && gene.file != "") {
1549120550157:error.message <- CheckFileExists(gene.file)
1549120550159:if (!is.null(error.message)){
1549120550161:cat("Warning:")
1549120550162:cat(error.message)
1549120550163:cat("  The plotting process will continue without filtering genes/loci.\n")
1549120550165:} else {
1549120550166:loci.to.plot <- scan(gene.file, character(), quiet = TRUE)
1549120550167:}
1549120550169:}
1549120550171:# Data processing and plotting --------------------------------------------
1549120550172:cat("Plotting depths... ")
1549120550174:options(stringsAsFactors = T, readr.num_columns = 0)
1549120550176:# Load data
1549120550177:inData <- read_tsv(input.file)
1549120550178:# inData <- read.delim(input.file)
1549120550181:# colnames(inData) <- c("Allele", "Position", "k-mer Depth", "Weighted k-mer Depth")
1549120550182:colnames(inData) <- c("N", "Locus", "Allele", "Position", "kmerDepth",
1549120550183:"NormKmerCount", "Coverage", "Score", "AverageKmerDepth")
1549120550187:# Transform data
1549120550189:data.to.plot <- inData %>%
1549120550190:left_join(inData %>%
1549120550191:group_by(Allele) %>%
1549120550192:summarise(Length = n()), by = "Allele") %>%
1549120550194:arrange(Locus, N) %>%
1549120550195:mutate(
1549120550196:AlPos = factor(N, levels = unique(.$N)),
1549120550198:Allele = factor(Allele, levels = unique(inData$Allele)))
1549120550199:# Filtering loci/genes from genes_file input param
1549120550200:if (length(loci.to.plot) > 0) {
1549120550202:data.to.plot <- data.to.plot %>%
1549120550203:filter(Locus %in% loci.to.plot)
1549120550204:}
1549120550207:longestLocusNameLength <- max(str_length(as.character(unique(inData$Locus))))
1549120550208:# labelsData <- getLabelsData(data.to.plot)
1549120550209:nLoci      <- length(unique(data.to.plot$Locus))
1549120550211:nAlleles   <- length(unique(data.to.plot$N))
1549120550214:# Theme-related variable definition ---------------------------------------
1549120550216:annotLinetype         <- "solid"
1549120550219:annotTextSize         <- 4
1549120550221:axisColor             <- "#000000"
1549120550223:axisTextSize          <- 12
1549120550225:barAnnotTextSize      <- 4
1549120550227:baseTextSize          <- 14
1549120550229:gridColor             <- "#e0e0e0"
1549120550232:lineSize              <- 0.3
1549120550234:panelColor            <- "#fff4e0"
1549120550236:panelColor            <- "#f2efe6"
1549120550238:# panelColor            <- "#ffffff"
1549120550240:# stripBackground       <- "#cccccc"
1549120550243:stripTextSize         <- axisTextSize
1549120550245:if (longestLocusNameLength > 12)
1549120550247:stripTextSize       <- stripTextSize * 0.6
1549120550249:textColor             <- "#000000"
1549120550251:# baseFontFamily        <- "Arial"
1549120550255:# Custom theme definition for plots ---------------------------------------
1549120550257:plotTheme <- list(
1549120550259:theme(
1549120550260:axis.text.x      = element_text(angle = 50, size = axisTextSize,
1549120550262:vjust = 1, hjust = 1, color = textColor),
1549120550264:axis.text.y      = element_text(size = axisTextSize, color = textColor),
1549120550266:axis.ticks       = element_line(size = lineSize),
1549120550268:axis.title.x     = element_text(margin = margin(6,0,8,0, "mm")),
1549120550270:axis.title.y     = element_text(margin = margin(0,6,0,0, "mm")),
1549120550273:legend.position  = "none",
1549120550275:panel.border     = element_rect(size = lineSize),
1549120550276:panel.background = element_rect(fill = panelColor),
1549120550278:panel.grid       = element_line(size = lineSize, colour = gridColor),
1549120550280:panel.grid.minor = element_blank(),
1549120550281:plot.margin      = margin(10,10,0,10, "mm"),
1549120550284:panel.spacing    = unit(4, "mm"),
1549120550286:plot.caption     = element_text(size = baseTextSize * 0.7, face = "italic"),
1549120550289:plot.title       = element_text(hjust = 0.5),
1549120550292:plot.subtitle    = element_text(hjust = 0.5),
1549120550295:strip.background = element_rect(size = lineSize),
1549120550298:strip.text       = element_text(size = stripTextSize),
1549120550300:text             = element_text(size = baseTextSize)
1549120550303:)
1549120550306:)
1549120550311:# Palette definition ------------------------------------------------------
1549120550314:# colourCount <- length(unique(inData$Locus))
1549120550316:colourCount <- nLoci
1549120550319:# colourCount  <- length(unique(data.to.plot$Allele))
1549120550321:# fillPalette  <- colorRampPalette(brewer.pal(8, "Dark2"))(colourCount)
1549120550323:# fillPalette  <- colorRampPalette(brewer.pal(12, "Paired"))(colourCount)
1549120550326:# fillPalette  <- colorRampPalette(brewer.pal(9, "Set1"))(colourCount)
1549120550328:# fillPalette  <- colorRampPalette(pal_npg("nrc")(10))(colourCount)
1549120550334:# fillPalette  <- colorRampPalette(pal_d3("category20")(20))(colourCount)
1549120550337:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549120550339:borderPalette <- darkColors(fillPalette, 0.6)
1549120550342:# library("scales"); show_col(fillPalette); show_col(borderPalette)
1549120550351:# # Depth plot -------------------------------------------------------------
1549120550354:# hFactor  <- 1.2
1549120550356:# wFactor  <- 4.8
1549120550359:# # if (nLoci == 1)
1549120550361:# #   hFactor <- 1.4;
1549120550366:# height <- (nLoci * hFactor) + 2 + 0.1 + ((nLoci-1)*0.05)
1549120550369:# width  <- nAlleles * wFactor
1549120550371:# # Generate plot
1549120550374:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549120550377:# # Save plot
1549120550379:# out.filename <- paste0(out.prefix, ".", out.format)
1549120550382:# if (out.format == "png") {
1549120550384:# 	ggsave(filename = out.filename, plot = depth.plot,
1549120550386:# 				 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549120550388:# } else {
1549120550389:# 	ggsave(filename = out.filename, plot = depth.plot,
1549120550391:# 				 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549120550393:# }
1549120550396:# Depth plot -------------------------------------------------------------
1549120550397:# <<<<<<< HEAD
1549120550399:#   rowsPerPage <- 7
1549120550401:#   hFactor     <- 1.2
1549120550402:#   wFactor     <- 4.8
1549120550404:#   rows        <- nLoci
1549120550405:#   if (nLoci > rowsPerPage)
1549120550407:#     rows <- rowsPerPage;
1549120550410:#   height <- (rows * hFactor) + 2 + 0.1 + ((rows-1)*0.05)
1549120550412:#   width  <- nAlleles * wFactor
1549120550413:#
1549120550415:#   loci     <- unique(data.to.plot$Locus)
1549120550417:#   lociList <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549120550418:#   lociList <- split(loci, ceiling(seq_along(loci)/3))
1549120550420:#   plotList <- list()
1549120550421:#   for (lociSet in lociList) {
1549120550423:#   	print(lociSet)
1549120550425:#   	subset.to.plot <- data.to.plot %>%
1549120550426:#   		filter(Locus %in% lociSet)
1549120550428:#   	labelsData <- getLabelsData(subset.to.plot)
1549120550429:#   	currentPlot <- plotDepth(subset.to.plot, labelsData, fillPalette, borderPalette)
1549120550431:#   	plotList <- c(plotList, list(currentPlot))
1549120550433:#   	# print(currentPlot)
1549120550435:#   	# print(unique(subset.to.plot$Locus))
1549120550437:#   }
1549120550438:#  	length(plotList)
1549120550440:#
1549120550442:#  	if (out.format == "pdf") {
1549120550444:#  		out.filename <- paste(out.prefix, out.format, sep = ".")
1549120550446:#  		pdf(out.filename)
1549120550448:#  		for (i in seq_along(plotList)) {
1549120550450:#  			nLociToPlot <- length(lociList[[i]])
1549120550452:#  			height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1549120550457:#  			width  <- nAlleles * wFactor
1549120550460:#  			# out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549120550463:#  			# print(out.filename)
1549120550465:#  			print(plotList[[i]])
1549120550468:#  		}
1549120550471:#  		dev.off()
1549120550473:#
1549120550476:#  	}
1549120550479:#  	for (i in seq_along(plotList)) {
1549120550481:#  		nLociToPlot <- length(lociList[[i]])
1549120550484:#  		height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1549120550486:#  		width  <- nAlleles * wFactor
1549120550489:#  		out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549120550492:#  		print(out.filename)
1549120550494:#  		pdf(out.filename, width = width, height = height)
1549120550497:#  		print(plotList[[i]])
1549120550500:#  		dev.off()
1549120550502:#  	}
1549120550505:#  	else if (out.format == "png") {
1549120550508:#  		ggsave(filename = out.filename, plot = depth.plot,
1549120550510:#  					 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549120550512:#  	} else {
1549120550515:#  		ggsave(filename = out.filename, plot = depth.plot,
1549120550518:#  					 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549120550520:#  	}
1549120550523:#
1549120550526:#  	plot_grid()
1549120550529:#  	# Generate plot
1549120550532:#   # (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549120550537:# =======
1549120550540:hFactor  <- 1.6
1549120550543:wFactor  <- 4.8
1549120550546:# if (nLoci == 1)
1549120550549:#   hFactor <- 1.4;
1549120550557:#               loci          titles and     strip    space between locus
1549120550560:#                             footnote
1549120550563:height <- (nLoci * hFactor) + 2              + 0.1    + ((nLoci-1)*0.05)
1549120550569:getPlotHeight <- function(rows){
1549120550572:# loci + titles and foot note + strip + space between locus
1549120550575:(rows*hFactor) + 2.39 + ((rows-1)*0.157) #in
1549120550578:}
1549120550584:width  <- nAlleles * wFactor
1549120550587:height <- getPlotHeight(nLoci)
1549120550590:rowsPerPage <- 5
1549120550593:loci <- unique(data.to.plot$Locus)
1549120550596:sets <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549120550601:library()
1549120550607:plots <- lapply(sets, function(set, dp=data.to.plot, rp=rowsPerPage){
1549120550610:subsetToPlot <- dp %>% filter(Locus %in% set)
1549120550613:ld <- getLabelsData(subsetToPlot)
1549120550616:(p <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette))
1549120550618:nLoci <- length(set)
1549120550621:if(nLoci < rp){
1549120550624:# hlay    <- matrix(c(rep(1, nLoci), rep(NA, rp-nLoci)))
1549120550627:hlay    <- matrix(c(rep(1, nLoci), NA))
1549120550629:total   <- getPlotHeight(rp)
1549120550632:cHeight <- getPlotHeight(nLoci)
1549120550635:blank   <- getPlotHeight(rp-nLoci) - 2.39
1549120550638:# heights <- matrix(c(rep(1, nLoci), rep(1/rp+2, rp-nLoci)))
1549120550641:heights <- matrix(c(rep(1, nLoci), 0.6))
1549120550651:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549120550654:# p       <- grid.arrange(p, layout_matrix = hlay, heights = unit(c(cHeight, blank), c("in", "in")))
1549120550658:print(str_glue("{total}, {cHeight}, {blank}"))
1549120550661:}
1549120550664:p
1549120550667:})
1549120550671:ml <- marrangeGrob(plots, nrow=1, ncol=1, padding = unit(10, "mm"),top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549120550674:ggsave(filename = "multipage.png", plot = ml,
1549120550677:width  = width, height = getPlotHeight(rowsPerPage), dpi = 400, limitsize = FALSE)
1549120550684:# Generate plot
1549120550687:(depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549120550690:# >>>>>>> 64e9112fd081cc5c75caf0f7d0d03cd9f5ea18f4
1549120550694:# Save plot
1549120550697:out.filename <- paste0(out.prefix, ".", out.format)
1549120550700:if (out.format == "png") {
1549120550704:ggsave(filename = out.filename, plot = depth.plot,
1549120550707:width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549120550710:} else {
1549120550713:ggsave(filename = out.filename, plot = depth.plot,
1549120550717:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549120550720:}
1549120550726:# Depth distribution plot ------------------------------------------------
1549120550729:hFactor  <- 3
1549120550732:wFactor  <- 2
1549120550735:if (nLoci == 1)
1549120550738:hFactor <- 3.5
1549120550741:height       <- nLoci * hFactor
1549120550743:width        <- nAlleles * wFactor
1549120550747:# Generate plot
1549120550750:(dist.plot <- plotDepthDist(data.to.plot, labelsData, fillPalette, borderPalette))
1549120550753:# Save plot
1549120550757:out.filename <- paste0(out.prefix, "_dist.", out.format)
1549120550760:if (out.format == "png") {
1549120550763:ggsave(filename = out.filename, plot = dist.plot,
1549120550767:width  = width, height = height, type = "cairo-png", dpi = 300)
1549120550770:} else {
1549120550773:ggsave(filename = out.filename, plot = dist.plot,
1549120550777:width  = width, height = height, dpi = 400)
1549120550780:}
1549120550783:cat("Done! \n")
1549120550788:# Code core - End ---------------------------------------------------------
1549120550791:}
1549120635668:#!/usr/bin/env Rscript
1549120635669:# ##############################################################################
1549120635669:#  Author:   Hector Fabio Espitia-Navarro
1549120635669:#            Georgia Institute of Technology
1549120635670:#  Version:  1.0
1549120635670:#  Date:     01/19/2019
1549120635670:# ##############################################################################
1549120635671:# Install required packages -----------------------------------------------
1549120635671:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549120635672:if(!file.exists(personal.lib.path))
1549120635672:dir.create(personal.lib.path)
1549120635673:printMessage <- function(message, verbose){
1549120635673:if(verbose)
1549120635673:cat(message)
1549120635674:}
1549120635674:# crayon::bold("Hola")
1549120635675:installAndLoadPackages <- function(pkg, verbose){
1549120635675:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1549120635675:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1549120635675:printMessage("Done!\n", verbose)
1549120635676:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549120635676:if (length(new.pkg)) {
1549120635676:printMessage("Installing new packages... ", verbose)
1549120635677:install.packages(new.pkg, dependencies = TRUE,
1549120635677:repos="http://cran.rstudio.com/",
1549120635677:lib = personal.lib.path)
1549120635678:printMessage("Done!\n", verbose)
1549120635678:}
1549120635679:printMessage("Loading required packages... ", verbose)
1549120635679:sapply(pkg, function(x){
1549120635680:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549120635680:})
1549120635681:printMessage("Done!\n", verbose)
1549120635681:}
1549120635682:# github.related.packages <- c("devtools", "Rcpp")
1549120635682:# packages <- c("argparser", "tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite")
1549120635682:packages <- c("tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite", "gridExtra")
1549120635683:# installAndLoadPackages(packages, verbose = TRUE)
1549120635683:installAndLoadPackages("argparser", verbose = FALSE)
1549120635710:# Command line arguments processing ---------------------------------------
1549120635710:# Get script name
1549120635710:initial.options <- commandArgs(trailingOnly = FALSE)
1549120635711:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1549120635711:# Process command line arguments
1549120635711:# Create a parser
1549120635712:p <- arg_parser("This script generates k-mer depth plots using a depth file generated by the\033[1mSTing typer\033[22m tool (-t option).",
1549120635712:name = script.name)
1549120635725:# Add Positional arguments (required)
1549120635725:p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
1549120635726:# Add options
1549120635727:p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1549120635728:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1549120635728:default = "kmer_depth")
1549120635729:p <- add_argument(p, "--sample_name", help = "Sample name.",
1549120635729:default = "input file's name")
1549120635730:p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'",
1549120635731:default = "pdf")
1549120635731:# Initialization of variables ---------------------------------------------
1549120635732:# Values to test the script using RStudio
1549120635732:script.home <- "/home/hspitia/projects/sting"
1549120635732:# inputFile   <- paste(script.home, "ERR036060.depth.2.tsv", sep = "/")
1549120635733:# geneFile    <- paste(script.home, "rmlst_failed_loci.txt", sep = "/")
1549120635733:inputFile   <- paste(script.home, "depth.tsv", sep = "/")
1549120635733:geneFile    <- paste(script.home, "loci.txt", sep = "/")
1549120635734:out.format  <- "pdf"
1549120635734:out.prefix  <- "kmer_ext_depth"
1549120635735:sample.name <- basename(inputFile)
1549120635736:# Parse command line arguments
1549120635736:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1549120635737:argv <- list()
1549120635738:if(command.line) {
1549120635738:argv <- parse_args(p)
1549120635738:} else {
1549120635739:argv <- parse_args(p, list(inputFile,
1549120635739:# "--gene_file", geneFile,
1549120635740:"--prefix", out.prefix,
1549120635740:"--sample_name", sample.name,
1549120635741:"--format", out.format))
1549120635741:}
1549120635863:# Get argument values from the command line
1549120635863:input.file  <- argv$input_file
1549120635864:gene.file   <- argv$gene_file
1549120635865:out.format  <- argv$format
1549120635865:out.prefix  <- argv$prefix
1549120635865:sample.name <- argv$sample_name
1549120635866:# if (sample.name == "")
1549120635866:if (sample.name == "input file's name")
1549120635867:sample.name <- basename(input.file)
1549120635867:# Function to check if file exists ----------------------------------------
1549120635868:CheckFileExists <- function(file.list) {
1549120635868:non.exist.files <- !file.exists(file.list)
1549120635868:if(any(non.exist.files)) {
1549120635869:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549120635869:}
1549120635869:}
1549120635870:# Check for input files ---------------------------------------------------
1549120635870:files.to.check <- c(input.file)
1549120635870:error.message  <- CheckFileExists(files.to.check)
1549120635871:if(!is.null(error.message)){
1549120635871:stop(error.message)
1549120635872:} else {
1549120635872:# Code core - Begin -------------------------------------------------------
1549120635872:installAndLoadPackages(packages, verbose = TRUE)
1549120635873:# FUNCTIONS:
1549120635873:# Function to dark a list of colors ---------------------------------------
1549120635873:darkColors <- function(palette, level){
1549120635874:rgbColors <- as.data.frame(t(as.data.frame(lapply(as.data.frame(t(col2rgb(palette))),
1549120635874:function(x) { round(x * level)}))))
1549120635874:unname(sapply(rgbColors, function(x){ rgb(x[1], x[2], x[3], maxColorValue=255) }))
1549120635875:}
1549120635875:# Function for plotting k-mer depth ----------------------------------------
1549120635875:plotDepth <- function(dataToPlot, labelsData, fillColors, borderColors) {
1549120635876:max.x       <- max(dataToPlot$Position)
1549120635876:max.y       <- max(dataToPlot$kmerDepth)
1549120635876:x.limits    <- seq(0, max.x, 100)
1549120635877:y.limits    <- seq(0, max.y, 20)
1549120635877:nTopAlleles <- length(unique(dataToPlot$N))
1549120635878:d.plot <- ggplot(data = dataToPlot, aes(x = Position, y = kmerDepth),
1549120635878:size = 0.2) +
1549120635879:geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1549120635879:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1549120635880:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1549120635880:# scale_color_manual(values = getPalette) +
1549120635881:scale_color_manual(values = borderColors) +
1549120635882:scale_fill_manual(values = fillColors) +
1549120635883:geom_text(data = labelsData,
1549120635883:# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1549120635884:# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1549120635885:aes(x = Length, y = info.y * 0.5, group = Locus,
1549120635886:hjust = 0,
1549120635887:label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1549120635887:show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1549120635888:nudge_x = -(max.x*0.025)
1549120635889:) +
1549120635890:geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1549120635890:alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1549120635891:# geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1549120635892:size = annotTextSize * 1.05, color = "#333333") +
1549120635893:geom_text(data = labelsData,
1549120635894:parse = TRUE,
1549120635895:aes(x = info.x, y = info.y,
1549120635896:label = paste0("{{{{italic(s)==", format(round(Score, 2), nsmall = 2),
1549120635897:"*~~~italic(hat(f)[k])} ==", format(round(NormKmerCount, 2), nsmall = 2),
1549120635898:"*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1549120635908:"*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1549120635909:"~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1549120635910:hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1549120635911:facet_grid(Locus ~ N, scales = "free_y") +
1549120635912:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1549120635913:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1549120635914:theme_bw() +
1549120635915:plotTheme +
1549120635916:labs(title    = expression(italic("k")*"-mer depth"),
1549120635917:subtitle = paste("Top", nTopAlleles, "alleles/genes on sample", sample.name),
1549120635933:x        = "Position along sequence (bp)",
1549120635934:y        = expression(paste(italic(k), "-mer depth")),
1549120635935:# caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1549120635938:caption  = expression(paste(italic("s"),": score;  ",
1549120635940:italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1549120635942:italic("c"),": coverage;  ",
1549120635943:italic(sigma), ": standard deviation;  ",
1549120635945:italic(bar(d)), ": average depth"), sep = "")
1549120635947:)
1549120635948:# guides(fill  = guide_legend(title  ="Allele"), color = FALSE) +
1549120635949:d.plot
1549120635950:}
1549120635951:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549120635953:# Function for plotting k-mer depth distributions as box plots ------------
1549120635954:plotDepthDist <- function(data.to.plot, labelsData, fillColors, borderColors){
1549120635955:dist.plot <- ggplot(data.to.plot, aes(x = AlPos, y = kmerDepth)) +
1549120635957:geom_jitter(position = position_jitter(width=.3), aes(color = Locus),
1549120635958:alpha = 0.4, size = 1.2, shape = 16) +
1549120635959:geom_boxplot(alpha = 0.7, size = 0.5, aes(fill = Locus, color = Locus)) +
1549120635961:geom_text(data = labelsData, size = 4, hjust = "center",
1549120635962:aes(x = N,#(N - 0.5),
1549120635964:y = info.y * 1.05,
1549120635965:label = Allele),
1549120635967:color = "#333333") +
1549120635968:geom_text(data = labelsData, size = 3, hjust = "center",
1549120635970:parse = TRUE,
1549120635971:aes(x = N,#(N - 0.4),
1549120635973:# y = info.y * 0.08,
1549120635974:y = info.y * 0.96,
1549120635975:label = paste0("sigma ==",format(round(sd, 1), nsmall = 1))),
1549120635977:color = "#333333") +
1549120635978:geom_point(data = labelsData,
1549120635979:shape = 23, fill = "white",
1549120635981:aes(x = N, y = meanDepth)) +
1549120635982:facet_grid(Locus ~ ., scales = "free_y") +
1549120635983:scale_color_manual(values = borderColors) +
1549120635985:scale_fill_manual(values = fillColors) +
1549120635986:labs(title = expression(paste(italic("k"), "-mer depth distribution")),
1549120635988:subtitle = basename(input.file),
1549120635989:x        = "Allele Ranking",
1549120635990:y        = expression(paste(italic(k), "-mer depth")),
1549120635992:caption  = expression(paste(italic(sigma), ": standard deviation")))+#,"sd: standard deviation") +
1549120635993:theme_bw() +
1549120635995:plotTheme +
1549120635996:theme(axis.text.x   = element_text(angle = 0, size = axisTextSize,
1549120635998:vjust = 1, hjust = 0.5, color = textColor))
1549120635999:dist.plot
1549120636001:}
1549120636002:# Function to get data for annotations ------------------------------------
1549120636003:getLabelsData <- function(data.to.plot) {
1549120636004:max.x <- max(data.to.plot$Position)
1549120636005:max.y <- max(data.to.plot$kmerDepth)
1549120636007:nLoci    <- length(unique(data.to.plot$Locus))
1549120636010:nAlleles <- length(unique(data.to.plot$N))
1549120636012:alleles     <- unique(data.to.plot$Allele)
1549120636013:loci        <- as.character(unique(data.to.plot$Locus))
1549120636014:lociLabels  <- c()
1549120636015:name.x      <- c()
1549120636016:name.y      <- c()
1549120636017:info.x      <- c()
1549120636017:info.y      <- c()
1549120636018:covs        <- c()
1549120636019:avgDepths   <- c()
1549120636021:meanDepth.x <- c()
1549120636022:meanDepth.y <- c()
1549120636022:for (i in loci) {
1549120636023:lociLabels <- c(lociLabels, rep(i, nAlleles))
1549120636024:}
1549120636025:for (allele in alleles) {
1549120636026:locus       <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1549120636028:maxPos      <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549120636029:maxDepth    <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549120636030:# name.x      <- c(name.x, (maxPos / 2))
1549120636031:name.x      <- c(name.x, (max.x / 2))
1549120636032:name.y      <- c(name.y, (maxDepth * 0.25))
1549120636033:info.x      <- c(info.x, max.x * 0.02)
1549120636035:info.y      <- c(info.y, maxDepth * 1.5)
1549120636037:covs        <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549120636039:avgDepths   <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549120636040:}
1549120636041:labelsData <- data.frame(Allele = alleles,
1549120636042:name.x = name.x,
1549120636043:name.y = name.y,
1549120636044:info.x = info.x,
1549120636045:info.y = info.y,
1549120636046:meanDepth = avgDepths,
1549120636047:N = rep(unique(data.to.plot$N), nLoci),
1549120636049:Locus = lociLabels,
1549120636050:cov = covs
1549120636051:) %>%
1549120636052:left_join(data.to.plot %>%
1549120636053:group_by(Allele, Length, NormKmerCount, Score) %>%
1549120636054:summarise(sd = sd(kmerDepth)),
1549120636055:by = c("Allele" = "Allele")) #%>%
1549120636056:# mutate(
1549120636057:#   info   = paste0("cov=", format(round(covs, 1), nsmall = 1), "%   ",
1549120636058:#                   paste0("ad=", format(round(avgDepths, 1), nsmall = 1)),
1549120636059:#                   "   ",
1549120636061:#                   # expression(paste(italic(sigma), "=",format(round(sd, 1), nsmall = 1))))
1549120636062:#                   paste0("sd=", format(round(sd, 1), nsmall = 1))
1549120636063:#   )
1549120636065:# )
1549120636068:labelsData
1549120636070:}
1549120636074:# Check for genes/loci file to filter loci to plot  -----------------------
1549120636076:loci.to.plot <- c()
1549120636078:# if (!is.null(gene.file)|| gene.file != "") {
1549120636080:if (!is.null(gene.file) && !is.na(gene.file) && gene.file != "") {
1549120636082:error.message <- CheckFileExists(gene.file)
1549120636084:if (!is.null(error.message)){
1549120636086:cat("Warning:")
1549120636088:cat(error.message)
1549120636090:cat("  The plotting process will continue without filtering genes/loci.\n")
1549120636092:} else {
1549120636094:loci.to.plot <- scan(gene.file, character(), quiet = TRUE)
1549120636096:}
1549120636098:}
1549120636101:# Data processing and plotting --------------------------------------------
1549120636103:cat("Plotting depths... ")
1549120636105:options(stringsAsFactors = T, readr.num_columns = 0)
1549120636109:# Load data
1549120636111:inData <- read_tsv(input.file)
1549120636113:# inData <- read.delim(input.file)
1549120636117:# colnames(inData) <- c("Allele", "Position", "k-mer Depth", "Weighted k-mer Depth")
1549120636119:colnames(inData) <- c("N", "Locus", "Allele", "Position", "kmerDepth",
1549120636120:"NormKmerCount", "Coverage", "Score", "AverageKmerDepth")
1549120636124:# Transform data
1549120636126:data.to.plot <- inData %>%
1549120636128:left_join(inData %>%
1549120636130:group_by(Allele) %>%
1549120636131:summarise(Length = n()), by = "Allele") %>%
1549120636133:arrange(Locus, N) %>%
1549120636135:mutate(
1549120636137:AlPos = factor(N, levels = unique(.$N)),
1549120636139:Allele = factor(Allele, levels = unique(inData$Allele)))
1549120636141:# Filtering loci/genes from genes_file input param
1549120636143:if (length(loci.to.plot) > 0) {
1549120636145:data.to.plot <- data.to.plot %>%
1549120636147:filter(Locus %in% loci.to.plot)
1549120636149:}
1549120636153:longestLocusNameLength <- max(str_length(as.character(unique(inData$Locus))))
1549120636155:# labelsData <- getLabelsData(data.to.plot)
1549120636156:nLoci      <- length(unique(data.to.plot$Locus))
1549120636158:nAlleles   <- length(unique(data.to.plot$N))
1549120636162:# Theme-related variable definition ---------------------------------------
1549120636165:annotLinetype         <- "solid"
1549120636167:annotTextSize         <- 4
1549120636169:axisColor             <- "#000000"
1549120636171:axisTextSize          <- 12
1549120636173:barAnnotTextSize      <- 4
1549120636175:baseTextSize          <- 14
1549120636177:gridColor             <- "#e0e0e0"
1549120636179:lineSize              <- 0.3
1549120636181:panelColor            <- "#fff4e0"
1549120636183:panelColor            <- "#f2efe6"
1549120636185:# panelColor            <- "#ffffff"
1549120636188:# stripBackground       <- "#cccccc"
1549120636190:stripTextSize         <- axisTextSize
1549120636192:if (longestLocusNameLength > 12)
1549120636194:stripTextSize       <- stripTextSize * 0.6
1549120636196:textColor             <- "#000000"
1549120636198:# baseFontFamily        <- "Arial"
1549120636202:# Custom theme definition for plots ---------------------------------------
1549120636204:plotTheme <- list(
1549120636206:theme(
1549120636208:axis.text.x      = element_text(angle = 50, size = axisTextSize,
1549120636210:vjust = 1, hjust = 1, color = textColor),
1549120636212:axis.text.y      = element_text(size = axisTextSize, color = textColor),
1549120636215:axis.ticks       = element_line(size = lineSize),
1549120636217:axis.title.x     = element_text(margin = margin(6,0,8,0, "mm")),
1549120636220:axis.title.y     = element_text(margin = margin(0,6,0,0, "mm")),
1549120636222:legend.position  = "none",
1549120636225:panel.border     = element_rect(size = lineSize),
1549120636228:panel.background = element_rect(fill = panelColor),
1549120636230:panel.grid       = element_line(size = lineSize, colour = gridColor),
1549120636232:panel.grid.minor = element_blank(),
1549120636235:plot.margin      = margin(10,10,0,10, "mm"),
1549120636237:panel.spacing    = unit(4, "mm"),
1549120636239:plot.caption     = element_text(size = baseTextSize * 0.7, face = "italic"),
1549120636241:plot.title       = element_text(hjust = 0.5),
1549120636243:plot.subtitle    = element_text(hjust = 0.5),
1549120636246:strip.background = element_rect(size = lineSize),
1549120636248:strip.text       = element_text(size = stripTextSize),
1549120636250:text             = element_text(size = baseTextSize)
1549120636253:)
1549120636255:)
1549120636259:# Palette definition ------------------------------------------------------
1549120636262:# colourCount <- length(unique(inData$Locus))
1549120636264:colourCount <- nLoci
1549120636266:# colourCount  <- length(unique(data.to.plot$Allele))
1549120636269:# fillPalette  <- colorRampPalette(brewer.pal(8, "Dark2"))(colourCount)
1549120636271:# fillPalette  <- colorRampPalette(brewer.pal(12, "Paired"))(colourCount)
1549120636273:# fillPalette  <- colorRampPalette(brewer.pal(9, "Set1"))(colourCount)
1549120636276:# fillPalette  <- colorRampPalette(pal_npg("nrc")(10))(colourCount)
1549120636278:# fillPalette  <- colorRampPalette(pal_d3("category20")(20))(colourCount)
1549120636280:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549120636283:borderPalette <- darkColors(fillPalette, 0.6)
1549120636285:# library("scales"); show_col(fillPalette); show_col(borderPalette)
1549120636294:# # Depth plot -------------------------------------------------------------
1549120636296:# hFactor  <- 1.2
1549120636299:# wFactor  <- 4.8
1549120636301:# # if (nLoci == 1)
1549120636304:# #   hFactor <- 1.4;
1549120636308:# height <- (nLoci * hFactor) + 2 + 0.1 + ((nLoci-1)*0.05)
1549120636310:# width  <- nAlleles * wFactor
1549120636313:# # Generate plot
1549120636315:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549120636318:# # Save plot
1549120636320:# out.filename <- paste0(out.prefix, ".", out.format)
1549120636322:# if (out.format == "png") {
1549120636325:# 	ggsave(filename = out.filename, plot = depth.plot,
1549120636327:# 				 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549120636330:# } else {
1549120636332:# 	ggsave(filename = out.filename, plot = depth.plot,
1549120636335:# 				 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549120636337:# }
1549120636342:# Depth plot -------------------------------------------------------------
1549120636344:# <<<<<<< HEAD
1549120636347:#   rowsPerPage <- 7
1549120636349:#   hFactor     <- 1.2
1549120636351:#   wFactor     <- 4.8
1549120636354:#   rows        <- nLoci
1549120636356:#   if (nLoci > rowsPerPage)
1549120636358:#     rows <- rowsPerPage;
1549120636363:#   height <- (rows * hFactor) + 2 + 0.1 + ((rows-1)*0.05)
1549120636365:#   width  <- nAlleles * wFactor
1549120636368:#
1549120636370:#   loci     <- unique(data.to.plot$Locus)
1549120636372:#   lociList <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549120636375:#   lociList <- split(loci, ceiling(seq_along(loci)/3))
1549120636377:#   plotList <- list()
1549120636379:#   for (lociSet in lociList) {
1549120636382:#   	print(lociSet)
1549120636387:#   	subset.to.plot <- data.to.plot %>%
1549120636390:#   		filter(Locus %in% lociSet)
1549120636393:#   	labelsData <- getLabelsData(subset.to.plot)
1549120636396:#   	currentPlot <- plotDepth(subset.to.plot, labelsData, fillPalette, borderPalette)
1549120636399:#   	plotList <- c(plotList, list(currentPlot))
1549120636401:#   	# print(currentPlot)
1549120636404:#   	# print(unique(subset.to.plot$Locus))
1549120636407:#   }
1549120636409:#  	length(plotList)
1549120636412:#
1549120636415:#  	if (out.format == "pdf") {
1549120636417:#  		out.filename <- paste(out.prefix, out.format, sep = ".")
1549120636420:#  		pdf(out.filename)
1549120636423:#  		for (i in seq_along(plotList)) {
1549120636426:#  			nLociToPlot <- length(lociList[[i]])
1549120636428:#  			height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1549120636456:#  			width  <- nAlleles * wFactor
1549120636458:#  			# out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549120636460:#  			# print(out.filename)
1549120636461:#  			print(plotList[[i]])
1549120636463:#  		}
1549120636466:#  		dev.off()
1549120636469:#
1549120636472:#  	}
1549120636474:#  	for (i in seq_along(plotList)) {
1549120636477:#  		nLociToPlot <- length(lociList[[i]])
1549120636480:#  		height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1549120636482:#  		width  <- nAlleles * wFactor
1549120636485:#  		out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549120636516:#  		print(out.filename)
1549120636519:#  		pdf(out.filename, width = width, height = height)
1549120636521:#  		print(plotList[[i]])
1549120636524:#  		dev.off()
1549120636527:#  	}
1549120636529:#  	else if (out.format == "png") {
1549120636531:#  		ggsave(filename = out.filename, plot = depth.plot,
1549120636533:#  					 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549120636534:#  	} else {
1549120636536:#  		ggsave(filename = out.filename, plot = depth.plot,
1549120636538:#  					 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549120636539:#  	}
1549120636541:#
1549120636543:#  	plot_grid()
1549120636545:#  	# Generate plot
1549120636546:#   # (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549120636550:# =======
1549120636552:hFactor  <- 1.6
1549120636553:wFactor  <- 4.8
1549120636555:# if (nLoci == 1)
1549120636557:#   hFactor <- 1.4;
1549120636562:#               loci          titles and     strip    space between locus
1549120636564:#                             footnote
1549120636565:height <- (nLoci * hFactor) + 2              + 0.1    + ((nLoci-1)*0.05)
1549120636569:getPlotHeight <- function(rows){
1549120636571:# loci + titles and foot note + strip + space between locus
1549120636573:(rows*hFactor) + 2.39 + ((rows-1)*0.157) #in
1549120636574:}
1549120636578:width  <- nAlleles * wFactor
1549120636580:height <- getPlotHeight(nLoci)
1549120636581:rowsPerPage <- 5
1549120636583:loci <- unique(data.to.plot$Locus)
1549120636585:sets <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549120636589:library()
1549120636592:plots <- lapply(sets, function(set, dp=data.to.plot, rp=rowsPerPage){
1549120636594:subsetToPlot <- dp %>% filter(Locus %in% set)
1549120636596:ld <- getLabelsData(subsetToPlot)
1549120636598:(p <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette))
1549120636600:nLoci <- length(set)
1549120636602:if(nLoci < rp){
1549120636604:# hlay    <- matrix(c(rep(1, nLoci), rep(NA, rp-nLoci)))
1549120636605:hlay    <- matrix(c(rep(1, nLoci), NA))
1549120636607:total   <- getPlotHeight(rp)
1549120636609:cHeight <- getPlotHeight(nLoci)
1549120636611:blank   <- getPlotHeight(rp-nLoci) - 2.39
1549120636613:# heights <- matrix(c(rep(1, nLoci), rep(1/rp+2, rp-nLoci)))
1549120636615:heights <- matrix(c(rep(1, nLoci), 0.6))
1549120636617:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549120636619:# p       <- grid.arrange(p, layout_matrix = hlay, heights = unit(c(cHeight, blank), c("in", "in")))
1549120636621:print(str_glue("{total}, {cHeight}, {blank}"))
1549120636623:}
1549120636625:p
1549120636626:})
1549120636628:ml <- marrangeGrob(plots, nrow=1, ncol=1, padding = unit(10, "mm"),top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549120636630:ggsave(filename = "multipage.png", plot = ml,
1549120636632:width  = width, height = getPlotHeight(rowsPerPage), dpi = 400, limitsize = FALSE)
1549120636636:# Generate plot
1549120636638:labelsData <- getLabelsData(data.to.plot)
1549120636640:(depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549120636642:# >>>>>>> 64e9112fd081cc5c75caf0f7d0d03cd9f5ea18f4
1549120636644:# Save plot
1549120636646:out.filename <- paste0(out.prefix, ".", out.format)
1549120636648:if (out.format == "png") {
1549120636650:ggsave(filename = out.filename, plot = depth.plot,
1549120636652:width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549120636654:} else {
1549120636657:ggsave(filename = out.filename, plot = depth.plot,
1549120636659:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549120636661:}
1549120636665:# Depth distribution plot ------------------------------------------------
1549120636667:hFactor  <- 3
1549120636669:wFactor  <- 2
1549120636671:if (nLoci == 1)
1549120636673:hFactor <- 3.5
1549120636675:height       <- nLoci * hFactor
1549120636677:width        <- nAlleles * wFactor
1549120636680:# Generate plot
1549120636682:(dist.plot <- plotDepthDist(data.to.plot, labelsData, fillPalette, borderPalette))
1549120636684:# Save plot
1549120636686:out.filename <- paste0(out.prefix, "_dist.", out.format)
1549120636688:if (out.format == "png") {
1549120636690:ggsave(filename = out.filename, plot = dist.plot,
1549120636692:width  = width, height = height, type = "cairo-png", dpi = 300)
1549120636694:} else {
1549120636697:ggsave(filename = out.filename, plot = dist.plot,
1549120636699:width  = width, height = height, dpi = 400)
1549120636701:}
1549120636703:cat("Done! \n")
1549120636708:# Code core - End ---------------------------------------------------------
1549120636710:}
1549122717372:#!/usr/bin/env Rscript
1549122717373:# ##############################################################################
1549122717373:#  Author:   Hector Fabio Espitia-Navarro
1549122717373:#            Georgia Institute of Technology
1549122717374:#  Version:  1.0
1549122717374:#  Date:     01/19/2019
1549122717374:# ##############################################################################
1549122717375:# Install required packages -----------------------------------------------
1549122717375:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549122717376:if(!file.exists(personal.lib.path))
1549122717376:dir.create(personal.lib.path)
1549122717377:printMessage <- function(message, verbose){
1549122717377:if(verbose)
1549122717377:cat(message)
1549122717378:}
1549122717378:# crayon::bold("Hola")
1549122717379:installAndLoadPackages <- function(pkg, verbose){
1549122717379:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1549122717379:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1549122717380:printMessage("Done!\n", verbose)
1549122717380:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549122717381:if (length(new.pkg)) {
1549122717381:printMessage("Installing new packages... ", verbose)
1549122717381:install.packages(new.pkg, dependencies = TRUE,
1549122717382:repos="http://cran.rstudio.com/",
1549122717385:lib = personal.lib.path)
1549122717385:printMessage("Done!\n", verbose)
1549122717386:}
1549122717386:printMessage("Loading required packages... ", verbose)
1549122717387:sapply(pkg, function(x){
1549122717387:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549122717387:})
1549122717388:printMessage("Done!\n", verbose)
1549122717388:}
1549122717389:# github.related.packages <- c("devtools", "Rcpp")
1549122717389:# packages <- c("argparser", "tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite")
1549122717390:packages <- c("tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite", "gridExtra")
1549122717390:# installAndLoadPackages(packages, verbose = TRUE)
1549122717391:installAndLoadPackages("argparser", verbose = FALSE)
1549122717438:# Command line arguments processing ---------------------------------------
1549122717438:# Get script name
1549122717439:initial.options <- commandArgs(trailingOnly = FALSE)
1549122717439:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1549122717440:# Process command line arguments
1549122717441:# Create a parser
1549122717442:p <- arg_parser("This script generates k-mer depth plots using a depth file generated by the\033[1mSTing typer\033[22m tool (-t option).",
1549122717442:name = script.name)
1549122717445:# Add Positional arguments (required)
1549122717445:p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
1549122717447:# Add options
1549122717447:p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1549122717449:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1549122717450:default = "kmer_depth")
1549122717451:p <- add_argument(p, "--sample_name", help = "Sample name.",
1549122717452:default = "input file's name")
1549122717453:p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'",
1549122717454:default = "pdf")
1549122717456:# Initialization of variables ---------------------------------------------
1549122717456:# Values to test the script using RStudio
1549122717457:script.home <- "/home/hspitia/projects/sting"
1549122717457:# inputFile   <- paste(script.home, "ERR036060.depth.2.tsv", sep = "/")
1549122717458:# geneFile    <- paste(script.home, "rmlst_failed_loci.txt", sep = "/")
1549122717458:inputFile   <- paste(script.home, "depth.tsv", sep = "/")
1549122717459:geneFile    <- paste(script.home, "loci.txt", sep = "/")
1549122717460:out.format  <- "pdf"
1549122717461:out.prefix  <- "kmer_ext_depth"
1549122717462:sample.name <- basename(inputFile)
1549122717463:# Parse command line arguments
1549122717463:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1549122717464:argv <- list()
1549122717465:if(command.line) {
1549122717465:argv <- parse_args(p)
1549122717466:} else {
1549122717466:argv <- parse_args(p, list(inputFile,
1549122717467:# "--gene_file", geneFile,
1549122717467:"--prefix", out.prefix,
1549122717468:"--sample_name", sample.name,
1549122717468:"--format", out.format))
1549122717469:}
1549122717471:# Get argument values from the command line
1549122717471:input.file  <- argv$input_file
1549122717471:gene.file   <- argv$gene_file
1549122717472:out.format  <- argv$format
1549122717472:out.prefix  <- argv$prefix
1549122717473:sample.name <- argv$sample_name
1549122717473:# if (sample.name == "")
1549122717474:if (sample.name == "input file's name")
1549122717474:sample.name <- basename(input.file)
1549122717475:# Function to check if file exists ----------------------------------------
1549122717475:CheckFileExists <- function(file.list) {
1549122717475:non.exist.files <- !file.exists(file.list)
1549122717475:if(any(non.exist.files)) {
1549122717476:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549122717476:}
1549122717476:}
1549122717477:# Check for input files ---------------------------------------------------
1549122717477:files.to.check <- c(input.file)
1549122717478:error.message  <- CheckFileExists(files.to.check)
1549122717479:if(!is.null(error.message)){
1549122717479:stop(error.message)
1549122717479:} else {
1549122717479:# Code core - Begin -------------------------------------------------------
1549122717480:installAndLoadPackages(packages, verbose = TRUE)
1549122717480:# FUNCTIONS:
1549122717480:# Function to dark a list of colors ---------------------------------------
1549122717481:darkColors <- function(palette, level){
1549122717481:rgbColors <- as.data.frame(t(as.data.frame(lapply(as.data.frame(t(col2rgb(palette))),
1549122717481:function(x) { round(x * level)}))))
1549122717482:unname(sapply(rgbColors, function(x){ rgb(x[1], x[2], x[3], maxColorValue=255) }))
1549122717482:}
1549122717482:# Function for plotting k-mer depth ----------------------------------------
1549122717483:plotDepth <- function(dataToPlot, labelsData, fillColors, borderColors) {
1549122717483:max.x       <- max(dataToPlot$Position)
1549122717483:max.y       <- max(dataToPlot$kmerDepth)
1549122717484:x.limits    <- seq(0, max.x, 100)
1549122717484:y.limits    <- seq(0, max.y, 20)
1549122717484:nTopAlleles <- length(unique(dataToPlot$N))
1549122717485:d.plot <- ggplot(data = dataToPlot, aes(x = Position, y = kmerDepth),
1549122717486:size = 0.2) +
1549122717486:geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1549122717486:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1549122717487:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1549122717487:# scale_color_manual(values = getPalette) +
1549122717488:scale_color_manual(values = borderColors) +
1549122717488:scale_fill_manual(values = fillColors) +
1549122717489:geom_text(data = labelsData,
1549122717489:# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1549122717490:# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1549122717491:aes(x = Length, y = info.y * 0.5, group = Locus,
1549122717491:hjust = 0,
1549122717492:label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1549122717493:show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1549122717494:nudge_x = -(max.x*0.025)
1549122717495:) +
1549122717496:geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1549122717497:alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1549122717498:# geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1549122717499:size = annotTextSize * 1.05, color = "#333333") +
1549122717500:geom_text(data = labelsData,
1549122717501:parse = TRUE,
1549122717502:aes(x = info.x, y = info.y,
1549122717503:label = paste0("{{{{italic(s)==", format(round(Score, 2), nsmall = 2),
1549122717504:"*~~~italic(hat(f)[k])} ==", format(round(NormKmerCount, 2), nsmall = 2),
1549122717505:"*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1549122717506:"*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1549122717507:"~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1549122717508:hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1549122717509:facet_grid(Locus ~ N, scales = "free_y") +
1549122717510:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1549122717511:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1549122717512:theme_bw() +
1549122717513:plotTheme +
1549122717514:labs(title    = expression(italic("k")*"-mer depth"),
1549122717515:subtitle = paste("Top", nTopAlleles, "alleles/genes on sample", sample.name),
1549122717516:x        = "Position along sequence (bp)",
1549122717518:y        = expression(paste(italic(k), "-mer depth")),
1549122717519:# caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1549122717522:caption  = expression(paste(italic("s"),": score;  ",
1549122717524:italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1549122717526:italic("c"),": coverage;  ",
1549122717528:italic(sigma), ": standard deviation;  ",
1549122717531:italic(bar(d)), ": average depth"), sep = "")
1549122717532:)
1549122717533:# guides(fill  = guide_legend(title  ="Allele"), color = FALSE) +
1549122717534:d.plot
1549122717536:}
1549122717537:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549122717538:# Function for plotting k-mer depth distributions as box plots ------------
1549122717539:plotDepthDist <- function(data.to.plot, labelsData, fillColors, borderColors){
1549122717540:dist.plot <- ggplot(data.to.plot, aes(x = AlPos, y = kmerDepth)) +
1549122717542:geom_jitter(position = position_jitter(width=.3), aes(color = Locus),
1549122717543:alpha = 0.4, size = 1.2, shape = 16) +
1549122717544:geom_boxplot(alpha = 0.7, size = 0.5, aes(fill = Locus, color = Locus)) +
1549122717545:geom_text(data = labelsData, size = 4, hjust = "center",
1549122717547:aes(x = N,#(N - 0.5),
1549122717548:y = info.y * 1.05,
1549122717549:label = Allele),
1549122717551:color = "#333333") +
1549122717552:geom_text(data = labelsData, size = 3, hjust = "center",
1549122717553:parse = TRUE,
1549122717554:aes(x = N,#(N - 0.4),
1549122717556:# y = info.y * 0.08,
1549122717557:y = info.y * 0.96,
1549122717559:label = paste0("sigma ==",format(round(sd, 1), nsmall = 1))),
1549122717560:color = "#333333") +
1549122717561:geom_point(data = labelsData,
1549122717563:shape = 23, fill = "white",
1549122717564:aes(x = N, y = meanDepth)) +
1549122717565:facet_grid(Locus ~ ., scales = "free_y") +
1549122717567:scale_color_manual(values = borderColors) +
1549122717568:scale_fill_manual(values = fillColors) +
1549122717569:labs(title = expression(paste(italic("k"), "-mer depth distribution")),
1549122717571:subtitle = basename(input.file),
1549122717572:x        = "Allele Ranking",
1549122717573:y        = expression(paste(italic(k), "-mer depth")),
1549122717575:caption  = expression(paste(italic(sigma), ": standard deviation")))+#,"sd: standard deviation") +
1549122717576:theme_bw() +
1549122717577:plotTheme +
1549122717579:theme(axis.text.x   = element_text(angle = 0, size = axisTextSize,
1549122717580:vjust = 1, hjust = 0.5, color = textColor))
1549122717581:dist.plot
1549122717582:}
1549122717584:# Function to get data for annotations ------------------------------------
1549122717585:getLabelsData <- function(data.to.plot) {
1549122717587:max.x <- max(data.to.plot$Position)
1549122717588:max.y <- max(data.to.plot$kmerDepth)
1549122717591:nLoci    <- length(unique(data.to.plot$Locus))
1549122717592:nAlleles <- length(unique(data.to.plot$N))
1549122717595:alleles     <- unique(data.to.plot$Allele)
1549122717597:loci        <- as.character(unique(data.to.plot$Locus))
1549122717599:lociLabels  <- c()
1549122717600:name.x      <- c()
1549122717602:name.y      <- c()
1549122717604:info.x      <- c()
1549122717605:info.y      <- c()
1549122717607:covs        <- c()
1549122717608:avgDepths   <- c()
1549122717610:meanDepth.x <- c()
1549122717612:meanDepth.y <- c()
1549122717613:for (i in loci) {
1549122717615:lociLabels <- c(lociLabels, rep(i, nAlleles))
1549122717617:}
1549122717618:for (allele in alleles) {
1549122717620:locus       <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1549122717622:maxPos      <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549122717624:maxDepth    <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549122717625:# name.x      <- c(name.x, (maxPos / 2))
1549122717627:name.x      <- c(name.x, (max.x / 2))
1549122717629:name.y      <- c(name.y, (maxDepth * 0.25))
1549122717631:info.x      <- c(info.x, max.x * 0.02)
1549122717633:info.y      <- c(info.y, maxDepth * 1.5)
1549122717634:covs        <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549122717636:avgDepths   <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549122717638:}
1549122717640:labelsData <- data.frame(Allele = alleles,
1549122717641:name.x = name.x,
1549122717643:name.y = name.y,
1549122717645:info.x = info.x,
1549122717646:info.y = info.y,
1549122717648:meanDepth = avgDepths,
1549122717650:N = rep(unique(data.to.plot$N), nLoci),
1549122717652:Locus = lociLabels,
1549122717654:cov = covs
1549122717656:) %>%
1549122717658:left_join(data.to.plot %>%
1549122717660:group_by(Allele, Length, NormKmerCount, Score) %>%
1549122717662:summarise(sd = sd(kmerDepth)),
1549122717664:by = c("Allele" = "Allele")) #%>%
1549122717666:# mutate(
1549122717668:#   info   = paste0("cov=", format(round(covs, 1), nsmall = 1), "%   ",
1549122717670:#                   paste0("ad=", format(round(avgDepths, 1), nsmall = 1)),
1549122717672:#                   "   ",
1549122717674:#                   # expression(paste(italic(sigma), "=",format(round(sd, 1), nsmall = 1))))
1549122717676:#                   paste0("sd=", format(round(sd, 1), nsmall = 1))
1549122717678:#   )
1549122717680:# )
1549122717682:labelsData
1549122717684:}
1549122717687:# Check for genes/loci file to filter loci to plot  -----------------------
1549122717689:loci.to.plot <- c()
1549122717691:# if (!is.null(gene.file)|| gene.file != "") {
1549122717693:if (!is.null(gene.file) && !is.na(gene.file) && gene.file != "") {
1549122717694:error.message <- CheckFileExists(gene.file)
1549122717696:if (!is.null(error.message)){
1549122717698:cat("Warning:")
1549122717700:cat(error.message)
1549122717702:cat("  The plotting process will continue without filtering genes/loci.\n")
1549122717704:} else {
1549122717706:loci.to.plot <- scan(gene.file, character(), quiet = TRUE)
1549122717708:}
1549122717713:}
1549122717736:# Data processing and plotting --------------------------------------------
1549122717738:cat("Plotting depths... ")
1549122717740:options(stringsAsFactors = T, readr.num_columns = 0)
1549122717744:# Load data
1549122717746:inData <- read_tsv(input.file)
1549122717748:# inData <- read.delim(input.file)
1549122717751:# colnames(inData) <- c("Allele", "Position", "k-mer Depth", "Weighted k-mer Depth")
1549122717753:colnames(inData) <- c("N", "Locus", "Allele", "Position", "kmerDepth",
1549122717755:"NormKmerCount", "Coverage", "Score", "AverageKmerDepth")
1549122717759:# Transform data
1549122717761:data.to.plot <- inData %>%
1549122717762:left_join(inData %>%
1549122717763:group_by(Allele) %>%
1549122717765:summarise(Length = n()), by = "Allele") %>%
1549122717767:arrange(Locus, N) %>%
1549122717769:mutate(
1549122717771:AlPos = factor(N, levels = unique(.$N)),
1549122717774:Allele = factor(Allele, levels = unique(inData$Allele)))
1549122717776:# Filtering loci/genes from genes_file input param
1549122717778:if (length(loci.to.plot) > 0) {
1549122717780:data.to.plot <- data.to.plot %>%
1549122717784:filter(Locus %in% loci.to.plot)
1549122717786:}
1549122717790:longestLocusNameLength <- max(str_length(as.character(unique(inData$Locus))))
1549122717793:# labelsData <- getLabelsData(data.to.plot)
1549122717795:nLoci      <- length(unique(data.to.plot$Locus))
1549122717797:nAlleles   <- length(unique(data.to.plot$N))
1549122717801:# Theme-related variable definition ---------------------------------------
1549122717802:annotLinetype         <- "solid"
1549122717804:annotTextSize         <- 4
1549122717805:axisColor             <- "#000000"
1549122717806:axisTextSize          <- 12
1549122717808:barAnnotTextSize      <- 4
1549122717809:baseTextSize          <- 14
1549122717810:gridColor             <- "#e0e0e0"
1549122717812:lineSize              <- 0.3
1549122717814:panelColor            <- "#fff4e0"
1549122717816:panelColor            <- "#f2efe6"
1549122717818:# panelColor            <- "#ffffff"
1549122717822:# stripBackground       <- "#cccccc"
1549122717825:stripTextSize         <- axisTextSize
1549122717827:if (longestLocusNameLength > 12)
1549122717829:stripTextSize       <- stripTextSize * 0.6
1549122717831:textColor             <- "#000000"
1549122717834:# baseFontFamily        <- "Arial"
1549122717838:# Custom theme definition for plots ---------------------------------------
1549122717840:plotTheme <- list(
1549122717843:theme(
1549122717845:axis.text.x      = element_text(angle = 50, size = axisTextSize,
1549122717847:vjust = 1, hjust = 1, color = textColor),
1549122717849:axis.text.y      = element_text(size = axisTextSize, color = textColor),
1549122717852:axis.ticks       = element_line(size = lineSize),
1549122717854:axis.title.x     = element_text(margin = margin(6,0,8,0, "mm")),
1549122717856:axis.title.y     = element_text(margin = margin(0,6,0,0, "mm")),
1549122717859:legend.position  = "none",
1549122717861:panel.border     = element_rect(size = lineSize),
1549122717865:panel.background = element_rect(fill = panelColor),
1549122717868:panel.grid       = element_line(size = lineSize, colour = gridColor),
1549122717870:panel.grid.minor = element_blank(),
1549122717873:plot.margin      = margin(10,10,0,10, "mm"),
1549122717875:panel.spacing    = unit(4, "mm"),
1549122717878:plot.caption     = element_text(size = baseTextSize * 0.7, face = "italic"),
1549122717881:plot.title       = element_text(hjust = 0.5),
1549122717883:plot.subtitle    = element_text(hjust = 0.5),
1549122717886:strip.background = element_rect(size = lineSize),
1549122717888:strip.text       = element_text(size = stripTextSize),
1549122717891:text             = element_text(size = baseTextSize)
1549122717893:)
1549122717896:)
1549122717901:# Palette definition ------------------------------------------------------
1549122717904:# colourCount <- length(unique(inData$Locus))
1549122717906:colourCount <- nLoci
1549122717909:# colourCount  <- length(unique(data.to.plot$Allele))
1549122717911:# fillPalette  <- colorRampPalette(brewer.pal(8, "Dark2"))(colourCount)
1549122717914:# fillPalette  <- colorRampPalette(brewer.pal(12, "Paired"))(colourCount)
1549122717917:# fillPalette  <- colorRampPalette(brewer.pal(9, "Set1"))(colourCount)
1549122717919:# fillPalette  <- colorRampPalette(pal_npg("nrc")(10))(colourCount)
1549122717922:# fillPalette  <- colorRampPalette(pal_d3("category20")(20))(colourCount)
1549122717924:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549122717927:borderPalette <- darkColors(fillPalette, 0.6)
1549122717929:# library("scales"); show_col(fillPalette); show_col(borderPalette)
1549122717937:# # Depth plot -------------------------------------------------------------
1549122717938:# hFactor  <- 1.2
1549122717940:# wFactor  <- 4.8
1549122717942:# # if (nLoci == 1)
1549122717944:# #   hFactor <- 1.4;
1549122717947:# height <- (nLoci * hFactor) + 2 + 0.1 + ((nLoci-1)*0.05)
1549122717948:# width  <- nAlleles * wFactor
1549122717950:# # Generate plot
1549122717952:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549122717953:# # Save plot
1549122717955:# out.filename <- paste0(out.prefix, ".", out.format)
1549122717957:# if (out.format == "png") {
1549122717959:# 	ggsave(filename = out.filename, plot = depth.plot,
1549122717960:# 				 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549122717962:# } else {
1549122717964:# 	ggsave(filename = out.filename, plot = depth.plot,
1549122717966:# 				 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549122717967:# }
1549122717971:# Depth plot -------------------------------------------------------------
1549122717979:# <<<<<<< HEAD
1549122717981:#   rowsPerPage <- 7
1549122717983:#   hFactor     <- 1.2
1549122717985:#   wFactor     <- 4.8
1549122717986:#   rows        <- nLoci
1549122717988:#   if (nLoci > rowsPerPage)
1549122717990:#     rows <- rowsPerPage;
1549122717993:#   height <- (rows * hFactor) + 2 + 0.1 + ((rows-1)*0.05)
1549122717995:#   width  <- nAlleles * wFactor
1549122717997:#
1549122717998:#   loci     <- unique(data.to.plot$Locus)
1549122718000:#   lociList <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549122718002:#   lociList <- split(loci, ceiling(seq_along(loci)/3))
1549122718004:#   plotList <- list()
1549122718006:#   for (lociSet in lociList) {
1549122718008:#   	print(lociSet)
1549122718011:#   	subset.to.plot <- data.to.plot %>%
1549122718012:#   		filter(Locus %in% lociSet)
1549122718014:#   	labelsData <- getLabelsData(subset.to.plot)
1549122718016:#   	currentPlot <- plotDepth(subset.to.plot, labelsData, fillPalette, borderPalette)
1549122718018:#   	plotList <- c(plotList, list(currentPlot))
1549122718019:#   	# print(currentPlot)
1549122718021:#   	# print(unique(subset.to.plot$Locus))
1549122718023:#   }
1549122718024:#  	length(plotList)
1549122718026:#
1549122718028:#  	if (out.format == "pdf") {
1549122718030:#  		out.filename <- paste(out.prefix, out.format, sep = ".")
1549122718031:#  		pdf(out.filename)
1549122718033:#  		for (i in seq_along(plotList)) {
1549122718035:#  			nLociToPlot <- length(lociList[[i]])
1549122718036:#  			height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1549122718038:#  			width  <- nAlleles * wFactor
1549122718040:#  			# out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549122718041:#  			# print(out.filename)
1549122718043:#  			print(plotList[[i]])
1549122718045:#  		}
1549122718047:#  		dev.off()
1549122718048:#
1549122718050:#  	}
1549122718052:#  	for (i in seq_along(plotList)) {
1549122718054:#  		nLociToPlot <- length(lociList[[i]])
1549122718055:#  		height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1549122718057:#  		width  <- nAlleles * wFactor
1549122718059:#  		out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549122718061:#  		print(out.filename)
1549122718062:#  		pdf(out.filename, width = width, height = height)
1549122718064:#  		print(plotList[[i]])
1549122718066:#  		dev.off()
1549122718068:#  	}
1549122718069:#  	else if (out.format == "png") {
1549122718071:#  		ggsave(filename = out.filename, plot = depth.plot,
1549122718073:#  					 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549122718074:#  	} else {
1549122718076:#  		ggsave(filename = out.filename, plot = depth.plot,
1549122718078:#  					 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549122718080:#  	}
1549122718081:#
1549122718083:#  	plot_grid()
1549122718085:#  	# Generate plot
1549122718086:#   # (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549122718090:# =======
1549122718092:hFactor  <- 1.6
1549122718093:wFactor  <- 4.8
1549122718095:# if (nLoci == 1)
1549122718097:#   hFactor <- 1.4;
1549122718102:#               loci          titles and     strip    space between locus
1549122718106:#                             footnote
1549122718109:height <- (nLoci * hFactor) + 2              + 0.1    + ((nLoci-1)*0.05)
1549122718114:getPlotHeight <- function(rows){
1549122718117:# loci + titles and foot note + strip + space between locus
1549122718120:(rows*hFactor) + 2.39 + ((rows-1)*0.157) #in
1549122718122:}
1549122718127:width  <- nAlleles * wFactor
1549122718130:height <- getPlotHeight(nLoci)
1549122718133:rowsPerPage <- 5
1549122718136:loci <- unique(data.to.plot$Locus)
1549122718138:sets <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549122718143:library()
1549122718148:plots <- lapply(sets, function(set, dp=data.to.plot, rp=rowsPerPage){
1549122718151:subsetToPlot <- dp %>% filter(Locus %in% set)
1549122718154:ld    <- getLabelsData(subsetToPlot)
1549122718156:(p    <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette))
1549122718159:nLoci <- length(set)
1549122718162:if(nLoci < rp & out.format == "pdf"){
1549122718164:# hlay    <- matrix(c(rep(1, nLoci), rep(NA, rp-nLoci)))
1549122718166:hlay    <- matrix(c(rep(1, nLoci), NA))
1549122718168:total   <- getPlotHeight(rp)
1549122718171:cHeight <- getPlotHeight(nLoci)
1549122718174:blank   <- getPlotHeight(rp-nLoci) - 2.39
1549122718177:# heights <- matrix(c(rep(1, nLoci), rep(1/rp+2, rp-nLoci)))
1549122718179:# heights <- matrix(c(rep(1, nLoci), 0.6))
1549122718182:heights <- matrix(cHeight/total, blank/total)
1549122718185:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549122718188:# p       <- grid.arrange(p, layout_matrix = hlay, heights = unit(c(cHeight, blank), c("in", "in")))
1549122718191:print(str_glue("{total}, {cHeight}, {blank}"))
1549122718194:}
1549122718197:p
1549122718199:})
1549122718202:ml <- marrangeGrob(plots, nrow=1, ncol=1, padding = unit(10, "mm"),
1549122718205:top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549122718208:ggsave(filename = "multipage.png", plot = ml,
1549122718211:width  = width, height = getPlotHeight(rowsPerPage), dpi = 400, limitsize = FALSE)
1549122718217:# Generate plot
1549122718232:labelsData <- getLabelsData(data.to.plot)
1549122718235:(depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549122718238:# >>>>>>> 64e9112fd081cc5c75caf0f7d0d03cd9f5ea18f4
1549122718241:# Save plot
1549122718246:out.filename <- paste0(out.prefix, ".", out.format)
1549122718249:if (out.format == "png") {
1549122718252:ggsave(filename = out.filename, plot = depth.plot,
1549122718255:width  = width, height = height, dpi = 300, limitsize = FALSE, type = "cairo-png")
1549122718257:} else {
1549122718260:ggsave(filename = out.filename, plot = depth.plot,
1549122718262:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549122718264:}
1549122718268:# Depth distribution plot ------------------------------------------------
1549122718271:hFactor  <- 3
1549122718273:wFactor  <- 2
1549122718275:if (nLoci == 1)
1549122718277:hFactor <- 3.5
1549122718280:height       <- nLoci * hFactor
1549122718282:width        <- nAlleles * wFactor
1549122718284:# Generate plot
1549122718287:(dist.plot <- plotDepthDist(data.to.plot, labelsData, fillPalette, borderPalette))
1549122718290:# Save plot
1549122718293:out.filename <- paste0(out.prefix, "_dist.", out.format)
1549122718296:if (out.format == "png") {
1549122718299:ggsave(filename = out.filename, plot = dist.plot,
1549122718302:width  = width, height = height, type = "cairo-png", dpi = 300)
1549122718305:} else {
1549122718308:ggsave(filename = out.filename, plot = dist.plot,
1549122718312:width  = width, height = height, dpi = 400)
1549122718315:}
1549122718318:cat("Done! \n")
1549122718324:# Code core - End ---------------------------------------------------------
1549122718327:}
1549122754927:#!/usr/bin/env Rscript
1549122754927:# ##############################################################################
1549122754927:#  Author:   Hector Fabio Espitia-Navarro
1549122754928:#            Georgia Institute of Technology
1549122754928:#  Version:  1.0
1549122754928:#  Date:     01/19/2019
1549122754929:# ##############################################################################
1549122754929:# Install required packages -----------------------------------------------
1549122754930:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549122754930:if(!file.exists(personal.lib.path))
1549122754930:dir.create(personal.lib.path)
1549122754931:printMessage <- function(message, verbose){
1549122754932:if(verbose)
1549122754932:cat(message)
1549122754932:}
1549122754933:# crayon::bold("Hola")
1549122754933:installAndLoadPackages <- function(pkg, verbose){
1549122754934:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1549122754934:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1549122754934:printMessage("Done!\n", verbose)
1549122754935:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549122754935:if (length(new.pkg)) {
1549122754935:printMessage("Installing new packages... ", verbose)
1549122754936:install.packages(new.pkg, dependencies = TRUE,
1549122754936:repos="http://cran.rstudio.com/",
1549122754936:lib = personal.lib.path)
1549122754937:printMessage("Done!\n", verbose)
1549122754938:}
1549122754938:printMessage("Loading required packages... ", verbose)
1549122754939:sapply(pkg, function(x){
1549122754939:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549122754940:})
1549122754940:printMessage("Done!\n", verbose)
1549122754941:}
1549122754942:# github.related.packages <- c("devtools", "Rcpp")
1549122754942:# packages <- c("argparser", "tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite")
1549122754942:packages <- c("tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite", "gridExtra")
1549122754943:# installAndLoadPackages(packages, verbose = TRUE)
1549122754943:installAndLoadPackages("argparser", verbose = FALSE)
1549122754988:# Command line arguments processing ---------------------------------------
1549122754989:# Get script name
1549122754989:initial.options <- commandArgs(trailingOnly = FALSE)
1549122754990:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1549122754991:# Process command line arguments
1549122754992:# Create a parser
1549122754992:p <- arg_parser("This script generates k-mer depth plots using a depth file generated by the\033[1mSTing typer\033[22m tool (-t option).",
1549122754993:name = script.name)
1549122754995:# Add Positional arguments (required)
1549122754995:p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
1549122754996:# Add options
1549122754996:p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1549122754997:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1549122754998:default = "kmer_depth")
1549122754999:p <- add_argument(p, "--sample_name", help = "Sample name.",
1549122754999:default = "input file's name")
1549122755001:p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'",
1549122755001:default = "pdf")
1549122755002:# Initialization of variables ---------------------------------------------
1549122755003:# Values to test the script using RStudio
1549122755003:script.home <- "/home/hspitia/projects/sting"
1549122755004:# inputFile   <- paste(script.home, "ERR036060.depth.2.tsv", sep = "/")
1549122755004:# geneFile    <- paste(script.home, "rmlst_failed_loci.txt", sep = "/")
1549122755005:inputFile   <- paste(script.home, "depth.tsv", sep = "/")
1549122755005:geneFile    <- paste(script.home, "loci.txt", sep = "/")
1549122755006:out.format  <- "pdf"
1549122755007:out.prefix  <- "kmer_ext_depth"
1549122755008:sample.name <- basename(inputFile)
1549122755009:# Parse command line arguments
1549122755009:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1549122755011:argv <- list()
1549122755013:if(command.line) {
1549122755013:argv <- parse_args(p)
1549122755014:} else {
1549122755014:argv <- parse_args(p, list(inputFile,
1549122755015:# "--gene_file", geneFile,
1549122755015:"--prefix", out.prefix,
1549122755016:"--sample_name", sample.name,
1549122755016:"--format", out.format))
1549122755017:}
1549122755019:# Get argument values from the command line
1549122755019:input.file  <- argv$input_file
1549122755020:gene.file   <- argv$gene_file
1549122755021:out.format  <- argv$format
1549122755021:out.prefix  <- argv$prefix
1549122755022:sample.name <- argv$sample_name
1549122755023:# if (sample.name == "")
1549122755023:if (sample.name == "input file's name")
1549122755024:sample.name <- basename(input.file)
1549122755025:# Function to check if file exists ----------------------------------------
1549122755025:CheckFileExists <- function(file.list) {
1549122755026:non.exist.files <- !file.exists(file.list)
1549122755026:if(any(non.exist.files)) {
1549122755027:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549122755027:}
1549122755028:}
1549122755028:# Check for input files ---------------------------------------------------
1549122755029:files.to.check <- c(input.file)
1549122755030:error.message  <- CheckFileExists(files.to.check)
1549122755031:if(!is.null(error.message)){
1549122755031:stop(error.message)
1549122755032:} else {
1549122755032:# Code core - Begin -------------------------------------------------------
1549122755033:installAndLoadPackages(packages, verbose = TRUE)
1549122755033:# FUNCTIONS:
1549122755033:# Function to dark a list of colors ---------------------------------------
1549122755034:darkColors <- function(palette, level){
1549122755034:rgbColors <- as.data.frame(t(as.data.frame(lapply(as.data.frame(t(col2rgb(palette))),
1549122755035:function(x) { round(x * level)}))))
1549122755035:unname(sapply(rgbColors, function(x){ rgb(x[1], x[2], x[3], maxColorValue=255) }))
1549122755036:}
1549122755036:# Function for plotting k-mer depth ----------------------------------------
1549122755037:plotDepth <- function(dataToPlot, labelsData, fillColors, borderColors) {
1549122755037:max.x       <- max(dataToPlot$Position)
1549122755038:max.y       <- max(dataToPlot$kmerDepth)
1549122755038:x.limits    <- seq(0, max.x, 100)
1549122755039:y.limits    <- seq(0, max.y, 20)
1549122755040:nTopAlleles <- length(unique(dataToPlot$N))
1549122755041:d.plot <- ggplot(data = dataToPlot, aes(x = Position, y = kmerDepth),
1549122755041:size = 0.2) +
1549122755042:geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1549122755043:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1549122755043:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1549122755044:# scale_color_manual(values = getPalette) +
1549122755044:scale_color_manual(values = borderColors) +
1549122755045:scale_fill_manual(values = fillColors) +
1549122755046:geom_text(data = labelsData,
1549122755046:# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1549122755047:# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1549122755048:aes(x = Length, y = info.y * 0.5, group = Locus,
1549122755048:hjust = 0,
1549122755049:label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1549122755050:show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1549122755051:nudge_x = -(max.x*0.025)
1549122755051:) +
1549122755052:geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1549122755053:alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1549122755054:# geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1549122755054:size = annotTextSize * 1.05, color = "#333333") +
1549122755055:geom_text(data = labelsData,
1549122755056:parse = TRUE,
1549122755057:aes(x = info.x, y = info.y,
1549122755058:label = paste0("{{{{italic(s)==", format(round(Score, 2), nsmall = 2),
1549122755058:"*~~~italic(hat(f)[k])} ==", format(round(NormKmerCount, 2), nsmall = 2),
1549122755059:"*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1549122755060:"*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1549122755061:"~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1549122755062:hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1549122755063:facet_grid(Locus ~ N, scales = "free_y") +
1549122755064:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1549122755064:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1549122755065:theme_bw() +
1549122755066:plotTheme +
1549122755067:labs(title    = expression(italic("k")*"-mer depth"),
1549122755068:subtitle = paste("Top", nTopAlleles, "alleles/genes on sample", sample.name),
1549122755069:x        = "Position along sequence (bp)",
1549122755071:y        = expression(paste(italic(k), "-mer depth")),
1549122755072:# caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1549122755075:caption  = expression(paste(italic("s"),": score;  ",
1549122755077:italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1549122755079:italic("c"),": coverage;  ",
1549122755081:italic(sigma), ": standard deviation;  ",
1549122755083:italic(bar(d)), ": average depth"), sep = "")
1549122755085:)
1549122755086:# guides(fill  = guide_legend(title  ="Allele"), color = FALSE) +
1549122755087:d.plot
1549122755088:}
1549122755089:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549122755091:# Function for plotting k-mer depth distributions as box plots ------------
1549122755092:plotDepthDist <- function(data.to.plot, labelsData, fillColors, borderColors){
1549122755093:dist.plot <- ggplot(data.to.plot, aes(x = AlPos, y = kmerDepth)) +
1549122755095:geom_jitter(position = position_jitter(width=.3), aes(color = Locus),
1549122755102:alpha = 0.4, size = 1.2, shape = 16) +
1549122755103:geom_boxplot(alpha = 0.7, size = 0.5, aes(fill = Locus, color = Locus)) +
1549122755116:geom_text(data = labelsData, size = 4, hjust = "center",
1549122755117:aes(x = N,#(N - 0.5),
1549122755128:y = info.y * 1.05,
1549122755129:label = Allele),
1549122755131:color = "#333333") +
1549122755132:geom_text(data = labelsData, size = 3, hjust = "center",
1549122755133:parse = TRUE,
1549122755134:aes(x = N,#(N - 0.4),
1549122755135:# y = info.y * 0.08,
1549122755137:y = info.y * 0.96,
1549122755138:label = paste0("sigma ==",format(round(sd, 1), nsmall = 1))),
1549122755139:color = "#333333") +
1549122755140:geom_point(data = labelsData,
1549122755141:shape = 23, fill = "white",
1549122755143:aes(x = N, y = meanDepth)) +
1549122755144:facet_grid(Locus ~ ., scales = "free_y") +
1549122755145:scale_color_manual(values = borderColors) +
1549122755147:scale_fill_manual(values = fillColors) +
1549122755148:labs(title = expression(paste(italic("k"), "-mer depth distribution")),
1549122755149:subtitle = basename(input.file),
1549122755151:x        = "Allele Ranking",
1549122755152:y        = expression(paste(italic(k), "-mer depth")),
1549122755153:caption  = expression(paste(italic(sigma), ": standard deviation")))+#,"sd: standard deviation") +
1549122755155:theme_bw() +
1549122755156:plotTheme +
1549122755157:theme(axis.text.x   = element_text(angle = 0, size = axisTextSize,
1549122755159:vjust = 1, hjust = 0.5, color = textColor))
1549122755160:dist.plot
1549122755161:}
1549122755163:# Function to get data for annotations ------------------------------------
1549122755164:getLabelsData <- function(data.to.plot) {
1549122755166:max.x <- max(data.to.plot$Position)
1549122755167:max.y <- max(data.to.plot$kmerDepth)
1549122755169:nLoci    <- length(unique(data.to.plot$Locus))
1549122755170:nAlleles <- length(unique(data.to.plot$N))
1549122755172:alleles     <- unique(data.to.plot$Allele)
1549122755173:loci        <- as.character(unique(data.to.plot$Locus))
1549122755174:lociLabels  <- c()
1549122755175:name.x      <- c()
1549122755176:name.y      <- c()
1549122755177:info.x      <- c()
1549122755178:info.y      <- c()
1549122755179:covs        <- c()
1549122755181:avgDepths   <- c()
1549122755182:meanDepth.x <- c()
1549122755182:meanDepth.y <- c()
1549122755183:for (i in loci) {
1549122755185:lociLabels <- c(lociLabels, rep(i, nAlleles))
1549122755186:}
1549122755187:for (allele in alleles) {
1549122755189:locus       <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1549122755190:maxPos      <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549122755191:maxDepth    <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549122755192:# name.x      <- c(name.x, (maxPos / 2))
1549122755193:name.x      <- c(name.x, (max.x / 2))
1549122755194:name.y      <- c(name.y, (maxDepth * 0.25))
1549122755196:info.x      <- c(info.x, max.x * 0.02)
1549122755197:info.y      <- c(info.y, maxDepth * 1.5)
1549122755198:covs        <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549122755199:avgDepths   <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549122755201:}
1549122755202:labelsData <- data.frame(Allele = alleles,
1549122755203:name.x = name.x,
1549122755204:name.y = name.y,
1549122755206:info.x = info.x,
1549122755207:info.y = info.y,
1549122755208:meanDepth = avgDepths,
1549122755209:N = rep(unique(data.to.plot$N), nLoci),
1549122755211:Locus = lociLabels,
1549122755212:cov = covs
1549122755213:) %>%
1549122755215:left_join(data.to.plot %>%
1549122755216:group_by(Allele, Length, NormKmerCount, Score) %>%
1549122755217:summarise(sd = sd(kmerDepth)),
1549122755219:by = c("Allele" = "Allele")) #%>%
1549122755220:# mutate(
1549122755221:#   info   = paste0("cov=", format(round(covs, 1), nsmall = 1), "%   ",
1549122755222:#                   paste0("ad=", format(round(avgDepths, 1), nsmall = 1)),
1549122755223:#                   "   ",
1549122755224:#                   # expression(paste(italic(sigma), "=",format(round(sd, 1), nsmall = 1))))
1549122755226:#                   paste0("sd=", format(round(sd, 1), nsmall = 1))
1549122755227:#   )
1549122755228:# )
1549122755229:labelsData
1549122755231:}
1549122755233:# Check for genes/loci file to filter loci to plot  -----------------------
1549122755234:loci.to.plot <- c()
1549122755235:# if (!is.null(gene.file)|| gene.file != "") {
1549122755236:if (!is.null(gene.file) && !is.na(gene.file) && gene.file != "") {
1549122755238:error.message <- CheckFileExists(gene.file)
1549122755239:if (!is.null(error.message)){
1549122755240:cat("Warning:")
1549122755242:cat(error.message)
1549122755243:cat("  The plotting process will continue without filtering genes/loci.\n")
1549122755244:} else {
1549122755245:loci.to.plot <- scan(gene.file, character(), quiet = TRUE)
1549122755247:}
1549122755248:}
1549122755250:# Data processing and plotting --------------------------------------------
1549122755251:cat("Plotting depths... ")
1549122755253:options(stringsAsFactors = T, readr.num_columns = 0)
1549122755256:# Load data
1549122755257:inData <- read_tsv(input.file)
1549122755259:# inData <- read.delim(input.file)
1549122755261:# colnames(inData) <- c("Allele", "Position", "k-mer Depth", "Weighted k-mer Depth")
1549122755263:colnames(inData) <- c("N", "Locus", "Allele", "Position", "kmerDepth",
1549122755265:"NormKmerCount", "Coverage", "Score", "AverageKmerDepth")
1549122755268:# Transform data
1549122755270:data.to.plot <- inData %>%
1549122755271:left_join(inData %>%
1549122755272:group_by(Allele) %>%
1549122755274:summarise(Length = n()), by = "Allele") %>%
1549122755275:arrange(Locus, N) %>%
1549122755276:mutate(
1549122755278:AlPos = factor(N, levels = unique(.$N)),
1549122755280:Allele = factor(Allele, levels = unique(inData$Allele)))
1549122755282:# Filtering loci/genes from genes_file input param
1549122755283:if (length(loci.to.plot) > 0) {
1549122755284:data.to.plot <- data.to.plot %>%
1549122755286:filter(Locus %in% loci.to.plot)
1549122755287:}
1549122755290:longestLocusNameLength <- max(str_length(as.character(unique(inData$Locus))))
1549122755291:# labelsData <- getLabelsData(data.to.plot)
1549122755293:nLoci      <- length(unique(data.to.plot$Locus))
1549122755294:nAlleles   <- length(unique(data.to.plot$N))
1549122755297:# Theme-related variable definition ---------------------------------------
1549122755298:annotLinetype         <- "solid"
1549122755300:annotTextSize         <- 4
1549122755301:axisColor             <- "#000000"
1549122755302:axisTextSize          <- 12
1549122755304:barAnnotTextSize      <- 4
1549122755305:baseTextSize          <- 14
1549122755307:gridColor             <- "#e0e0e0"
1549122755308:lineSize              <- 0.3
1549122755310:panelColor            <- "#fff4e0"
1549122755311:panelColor            <- "#f2efe6"
1549122755313:# panelColor            <- "#ffffff"
1549122755316:# stripBackground       <- "#cccccc"
1549122755318:stripTextSize         <- axisTextSize
1549122755320:if (longestLocusNameLength > 12)
1549122755321:stripTextSize       <- stripTextSize * 0.6
1549122755323:textColor             <- "#000000"
1549122755324:# baseFontFamily        <- "Arial"
1549122755327:# Custom theme definition for plots ---------------------------------------
1549122755328:plotTheme <- list(
1549122755329:theme(
1549122755331:axis.text.x      = element_text(angle = 50, size = axisTextSize,
1549122755332:vjust = 1, hjust = 1, color = textColor),
1549122755334:axis.text.y      = element_text(size = axisTextSize, color = textColor),
1549122755336:axis.ticks       = element_line(size = lineSize),
1549122755338:axis.title.x     = element_text(margin = margin(6,0,8,0, "mm")),
1549122755340:axis.title.y     = element_text(margin = margin(0,6,0,0, "mm")),
1549122755342:legend.position  = "none",
1549122755343:panel.border     = element_rect(size = lineSize),
1549122755345:panel.background = element_rect(fill = panelColor),
1549122755346:panel.grid       = element_line(size = lineSize, colour = gridColor),
1549122755348:panel.grid.minor = element_blank(),
1549122755352:plot.margin      = margin(10,10,0,10, "mm"),
1549122755355:panel.spacing    = unit(4, "mm"),
1549122755357:plot.caption     = element_text(size = baseTextSize * 0.7, face = "italic"),
1549122755360:plot.title       = element_text(hjust = 0.5),
1549122755363:plot.subtitle    = element_text(hjust = 0.5),
1549122755365:strip.background = element_rect(size = lineSize),
1549122755368:strip.text       = element_text(size = stripTextSize),
1549122755370:text             = element_text(size = baseTextSize)
1549122755373:)
1549122755375:)
1549122755380:# Palette definition ------------------------------------------------------
1549122755383:# colourCount <- length(unique(inData$Locus))
1549122755385:colourCount <- nLoci
1549122755388:# colourCount  <- length(unique(data.to.plot$Allele))
1549122755390:# fillPalette  <- colorRampPalette(brewer.pal(8, "Dark2"))(colourCount)
1549122755393:# fillPalette  <- colorRampPalette(brewer.pal(12, "Paired"))(colourCount)
1549122755395:# fillPalette  <- colorRampPalette(brewer.pal(9, "Set1"))(colourCount)
1549122755398:# fillPalette  <- colorRampPalette(pal_npg("nrc")(10))(colourCount)
1549122755400:# fillPalette  <- colorRampPalette(pal_d3("category20")(20))(colourCount)
1549122755402:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549122755405:borderPalette <- darkColors(fillPalette, 0.6)
1549122755407:# library("scales"); show_col(fillPalette); show_col(borderPalette)
1549122755417:# # Depth plot -------------------------------------------------------------
1549122755419:# hFactor  <- 1.2
1549122755421:# wFactor  <- 4.8
1549122755424:# # if (nLoci == 1)
1549122755426:# #   hFactor <- 1.4;
1549122755431:# height <- (nLoci * hFactor) + 2 + 0.1 + ((nLoci-1)*0.05)
1549122755432:# width  <- nAlleles * wFactor
1549122755434:# # Generate plot
1549122755436:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549122755438:# # Save plot
1549122755440:# out.filename <- paste0(out.prefix, ".", out.format)
1549122755442:# if (out.format == "png") {
1549122755443:# 	ggsave(filename = out.filename, plot = depth.plot,
1549122755445:# 				 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549122755447:# } else {
1549122755450:# 	ggsave(filename = out.filename, plot = depth.plot,
1549122755453:# 				 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549122755456:# }
1549122755461:# Depth plot -------------------------------------------------------------
1549122755463:# <<<<<<< HEAD
1549122755466:#   rowsPerPage <- 7
1549122755468:#   hFactor     <- 1.2
1549122755471:#   wFactor     <- 4.8
1549122755474:#   rows        <- nLoci
1549122755476:#   if (nLoci > rowsPerPage)
1549122755479:#     rows <- rowsPerPage;
1549122755484:#   height <- (rows * hFactor) + 2 + 0.1 + ((rows-1)*0.05)
1549122755486:#   width  <- nAlleles * wFactor
1549122755489:#
1549122755491:#   loci     <- unique(data.to.plot$Locus)
1549122755494:#   lociList <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549122755496:#   lociList <- split(loci, ceiling(seq_along(loci)/3))
1549122755498:#   plotList <- list()
1549122755499:#   for (lociSet in lociList) {
1549122755501:#   	print(lociSet)
1549122755503:#   	subset.to.plot <- data.to.plot %>%
1549122755505:#   		filter(Locus %in% lociSet)
1549122755506:#   	labelsData <- getLabelsData(subset.to.plot)
1549122755508:#   	currentPlot <- plotDepth(subset.to.plot, labelsData, fillPalette, borderPalette)
1549122755510:#   	plotList <- c(plotList, list(currentPlot))
1549122755512:#   	# print(currentPlot)
1549122755514:#   	# print(unique(subset.to.plot$Locus))
1549122755515:#   }
1549122755517:#  	length(plotList)
1549122755519:#
1549122755521:#  	if (out.format == "pdf") {
1549122755523:#  		out.filename <- paste(out.prefix, out.format, sep = ".")
1549122755525:#  		pdf(out.filename)
1549122755527:#  		for (i in seq_along(plotList)) {
1549122755528:#  			nLociToPlot <- length(lociList[[i]])
1549122755530:#  			height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1549122755532:#  			width  <- nAlleles * wFactor
1549122755534:#  			# out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549122755536:#  			# print(out.filename)
1549122755538:#  			print(plotList[[i]])
1549122755540:#  		}
1549122755542:#  		dev.off()
1549122755544:#
1549122755546:#  	}
1549122755548:#  	for (i in seq_along(plotList)) {
1549122755550:#  		nLociToPlot <- length(lociList[[i]])
1549122755552:#  		height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1549122755554:#  		width  <- nAlleles * wFactor
1549122755556:#  		out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549122755558:#  		print(out.filename)
1549122755560:#  		pdf(out.filename, width = width, height = height)
1549122755562:#  		print(plotList[[i]])
1549122755564:#  		dev.off()
1549122755565:#  	}
1549122755567:#  	else if (out.format == "png") {
1549122755569:#  		ggsave(filename = out.filename, plot = depth.plot,
1549122755571:#  					 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549122755573:#  	} else {
1549122755574:#  		ggsave(filename = out.filename, plot = depth.plot,
1549122755576:#  					 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549122755578:#  	}
1549122755579:#
1549122755581:#  	plot_grid()
1549122755583:#  	# Generate plot
1549122755585:#   # (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549122755588:# =======
1549122755590:hFactor  <- 1.6
1549122755592:wFactor  <- 4.8
1549122755593:# if (nLoci == 1)
1549122755595:#   hFactor <- 1.4;
1549122755600:#               loci          titles and     strip    space between locus
1549122755602:#                             footnote
1549122755605:height <- (nLoci * hFactor) + 2              + 0.1    + ((nLoci-1)*0.05)
1549122755608:getPlotHeight <- function(rows){
1549122755610:# loci + titles and foot note + strip + space between locus
1549122755612:(rows*hFactor) + 2.39 + ((rows-1)*0.157) #in
1549122755614:}
1549122755618:width  <- nAlleles * wFactor
1549122755620:height <- getPlotHeight(nLoci)
1549122755622:rowsPerPage <- 5
1549122755624:loci <- unique(data.to.plot$Locus)
1549122755626:sets <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549122755629:library()
1549122755633:plots <- lapply(sets, function(set, dp=data.to.plot, rp=rowsPerPage){
1549122755635:subsetToPlot <- dp %>% filter(Locus %in% set)
1549122755637:ld    <- getLabelsData(subsetToPlot)
1549122755638:(p    <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette))
1549122755641:nLoci <- length(set)
1549122755642:if(nLoci < rp & out.format == "pdf"){
1549122755644:# hlay    <- matrix(c(rep(1, nLoci), rep(NA, rp-nLoci)))
1549122755646:hlay    <- matrix(c(rep(1, nLoci), NA))
1549122755648:total   <- getPlotHeight(rp)
1549122755650:cHeight <- getPlotHeight(nLoci)
1549122755652:blank   <- getPlotHeight(rp-nLoci) - 2.39
1549122755654:# heights <- matrix(c(rep(1, nLoci), rep(1/rp+2, rp-nLoci)))
1549122755656:# heights <- matrix(c(rep(1, nLoci), 0.6))
1549122755658:heights <- matrix(c(cHeight/total, blank/total))
1549122755660:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549122755661:# p       <- grid.arrange(p, layout_matrix = hlay, heights = unit(c(cHeight, blank), c("in", "in")))
1549122755664:print(str_glue("{total}, {cHeight}, {blank}"))
1549122755666:}
1549122755668:p
1549122755670:})
1549122755672:ml <- marrangeGrob(plots, nrow=1, ncol=1, padding = unit(10, "mm"),
1549122755674:top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549122755676:ggsave(filename = "multipage.pdf", plot = ml,
1549122755678:width  = width, height = getPlotHeight(rowsPerPage), dpi = 400, limitsize = FALSE)
1549122755682:# Generate plot
1549122755684:labelsData <- getLabelsData(data.to.plot)
1549122755686:(depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549122755689:# >>>>>>> 64e9112fd081cc5c75caf0f7d0d03cd9f5ea18f4
1549122755691:# Save plot
1549122755694:out.filename <- paste0(out.prefix, ".", out.format)
1549122755697:if (out.format == "png") {
1549122755699:ggsave(filename = out.filename, plot = depth.plot,
1549122755701:width  = width, height = height, dpi = 300, limitsize = FALSE, type = "cairo-png")
1549122755703:} else {
1549122755705:ggsave(filename = out.filename, plot = depth.plot,
1549122755707:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549122755710:}
1549122755714:# Depth distribution plot ------------------------------------------------
1549122755716:hFactor  <- 3
1549122755719:wFactor  <- 2
1549122755722:if (nLoci == 1)
1549122755725:hFactor <- 3.5
1549122755727:height       <- nLoci * hFactor
1549122755730:width        <- nAlleles * wFactor
1549122755732:# Generate plot
1549122755735:(dist.plot <- plotDepthDist(data.to.plot, labelsData, fillPalette, borderPalette))
1549122755738:# Save plot
1549122755740:out.filename <- paste0(out.prefix, "_dist.", out.format)
1549122755742:if (out.format == "png") {
1549122755745:ggsave(filename = out.filename, plot = dist.plot,
1549122755747:width  = width, height = height, type = "cairo-png", dpi = 300)
1549122755749:} else {
1549122755751:ggsave(filename = out.filename, plot = dist.plot,
1549122755753:width  = width, height = height, dpi = 400)
1549122755755:}
1549122755758:cat("Done! \n")
1549122755762:# Code core - End ---------------------------------------------------------
1549122755764:}
1549122825596:#!/usr/bin/env Rscript
1549122825597:# ##############################################################################
1549122825597:#  Author:   Hector Fabio Espitia-Navarro
1549122825598:#            Georgia Institute of Technology
1549122825598:#  Version:  1.0
1549122825598:#  Date:     01/19/2019
1549122825599:# ##############################################################################
1549122825599:# Install required packages -----------------------------------------------
1549122825600:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549122825600:if(!file.exists(personal.lib.path))
1549122825601:dir.create(personal.lib.path)
1549122825601:printMessage <- function(message, verbose){
1549122825602:if(verbose)
1549122825602:cat(message)
1549122825603:}
1549122825604:# crayon::bold("Hola")
1549122825604:installAndLoadPackages <- function(pkg, verbose){
1549122825604:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1549122825605:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1549122825605:printMessage("Done!\n", verbose)
1549122825605:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549122825606:if (length(new.pkg)) {
1549122825612:printMessage("Installing new packages... ", verbose)
1549122825612:install.packages(new.pkg, dependencies = TRUE,
1549122825613:repos="http://cran.rstudio.com/",
1549122825613:lib = personal.lib.path)
1549122825614:printMessage("Done!\n", verbose)
1549122825615:}
1549122825616:printMessage("Loading required packages... ", verbose)
1549122825617:sapply(pkg, function(x){
1549122825619:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549122825619:})
1549122825620:printMessage("Done!\n", verbose)
1549122825621:}
1549122825622:# github.related.packages <- c("devtools", "Rcpp")
1549122825623:# packages <- c("argparser", "tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite")
1549122825623:packages <- c("tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite", "gridExtra")
1549122825624:# installAndLoadPackages(packages, verbose = TRUE)
1549122825625:installAndLoadPackages("argparser", verbose = FALSE)
1549122825666:# Command line arguments processing ---------------------------------------
1549122825666:# Get script name
1549122825667:initial.options <- commandArgs(trailingOnly = FALSE)
1549122825667:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1549122825668:# Process command line arguments
1549122825669:# Create a parser
1549122825669:p <- arg_parser("This script generates k-mer depth plots using a depth file generated by the\033[1mSTing typer\033[22m tool (-t option).",
1549122825670:name = script.name)
1549122825672:# Add Positional arguments (required)
1549122825673:p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
1549122825674:# Add options
1549122825675:p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1549122825676:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1549122825677:default = "kmer_depth")
1549122825678:p <- add_argument(p, "--sample_name", help = "Sample name.",
1549122825678:default = "input file's name")
1549122825679:p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'",
1549122825679:default = "pdf")
1549122825680:# Initialization of variables ---------------------------------------------
1549122825681:# Values to test the script using RStudio
1549122825681:script.home <- "/home/hspitia/projects/sting"
1549122825681:# inputFile   <- paste(script.home, "ERR036060.depth.2.tsv", sep = "/")
1549122825682:# geneFile    <- paste(script.home, "rmlst_failed_loci.txt", sep = "/")
1549122825682:inputFile   <- paste(script.home, "depth.tsv", sep = "/")
1549122825682:geneFile    <- paste(script.home, "loci.txt", sep = "/")
1549122825683:out.format  <- "pdf"
1549122825683:out.prefix  <- "kmer_ext_depth"
1549122825684:sample.name <- basename(inputFile)
1549122825684:# Parse command line arguments
1549122825685:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1549122825685:argv <- list()
1549122825685:if(command.line) {
1549122825686:argv <- parse_args(p)
1549122825686:} else {
1549122825686:argv <- parse_args(p, list(inputFile,
1549122825687:# "--gene_file", geneFile,
1549122825687:"--prefix", out.prefix,
1549122825687:"--sample_name", sample.name,
1549122825688:"--format", out.format))
1549122825688:}
1549122825689:# Get argument values from the command line
1549122825690:input.file  <- argv$input_file
1549122825690:gene.file   <- argv$gene_file
1549122825690:out.format  <- argv$format
1549122825691:out.prefix  <- argv$prefix
1549122825691:sample.name <- argv$sample_name
1549122825692:# if (sample.name == "")
1549122825692:if (sample.name == "input file's name")
1549122825692:sample.name <- basename(input.file)
1549122825693:# Function to check if file exists ----------------------------------------
1549122825693:CheckFileExists <- function(file.list) {
1549122825694:non.exist.files <- !file.exists(file.list)
1549122825694:if(any(non.exist.files)) {
1549122825694:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549122825694:}
1549122825695:}
1549122825695:# Check for input files ---------------------------------------------------
1549122825696:files.to.check <- c(input.file)
1549122825696:error.message  <- CheckFileExists(files.to.check)
1549122825697:if(!is.null(error.message)){
1549122825697:stop(error.message)
1549122825697:} else {
1549122825698:# Code core - Begin -------------------------------------------------------
1549122825698:installAndLoadPackages(packages, verbose = TRUE)
1549122825698:# FUNCTIONS:
1549122825698:# Function to dark a list of colors ---------------------------------------
1549122825699:darkColors <- function(palette, level){
1549122825699:rgbColors <- as.data.frame(t(as.data.frame(lapply(as.data.frame(t(col2rgb(palette))),
1549122825699:function(x) { round(x * level)}))))
1549122825700:unname(sapply(rgbColors, function(x){ rgb(x[1], x[2], x[3], maxColorValue=255) }))
1549122825700:}
1549122825700:# Function for plotting k-mer depth ----------------------------------------
1549122825701:plotDepth <- function(dataToPlot, labelsData, fillColors, borderColors) {
1549122825701:max.x       <- max(dataToPlot$Position)
1549122825701:max.y       <- max(dataToPlot$kmerDepth)
1549122825702:x.limits    <- seq(0, max.x, 100)
1549122825702:y.limits    <- seq(0, max.y, 20)
1549122825703:nTopAlleles <- length(unique(dataToPlot$N))
1549122825703:d.plot <- ggplot(data = dataToPlot, aes(x = Position, y = kmerDepth),
1549122825704:size = 0.2) +
1549122825704:geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1549122825705:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1549122825705:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1549122825705:# scale_color_manual(values = getPalette) +
1549122825706:scale_color_manual(values = borderColors) +
1549122825706:scale_fill_manual(values = fillColors) +
1549122825707:geom_text(data = labelsData,
1549122825707:# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1549122825708:# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1549122825708:aes(x = Length, y = info.y * 0.5, group = Locus,
1549122825709:hjust = 0,
1549122825709:label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1549122825710:show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1549122825710:nudge_x = -(max.x*0.025)
1549122825711:) +
1549122825711:geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1549122825712:alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1549122825712:# geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1549122825713:size = annotTextSize * 1.05, color = "#333333") +
1549122825713:geom_text(data = labelsData,
1549122825714:parse = TRUE,
1549122825714:aes(x = info.x, y = info.y,
1549122825717:label = paste0("{{{{italic(s)==", format(round(Score, 2), nsmall = 2),
1549122825718:"*~~~italic(hat(f)[k])} ==", format(round(NormKmerCount, 2), nsmall = 2),
1549122825719:"*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1549122825720:"*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1549122825721:"~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1549122825722:hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1549122825723:facet_grid(Locus ~ N, scales = "free_y") +
1549122825724:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1549122825725:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1549122825726:theme_bw() +
1549122825727:plotTheme +
1549122825728:labs(title    = expression(italic("k")*"-mer depth"),
1549122825729:subtitle = paste("Top", nTopAlleles, "alleles/genes on sample", sample.name),
1549122825730:x        = "Position along sequence (bp)",
1549122825731:y        = expression(paste(italic(k), "-mer depth")),
1549122825732:# caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1549122825735:caption  = expression(paste(italic("s"),": score;  ",
1549122825737:italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1549122825739:italic("c"),": coverage;  ",
1549122825741:italic(sigma), ": standard deviation;  ",
1549122825743:italic(bar(d)), ": average depth"), sep = "")
1549122825744:)
1549122825745:# guides(fill  = guide_legend(title  ="Allele"), color = FALSE) +
1549122825746:d.plot
1549122825747:}
1549122825749:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549122825750:# Function for plotting k-mer depth distributions as box plots ------------
1549122825751:plotDepthDist <- function(data.to.plot, labelsData, fillColors, borderColors){
1549122825752:dist.plot <- ggplot(data.to.plot, aes(x = AlPos, y = kmerDepth)) +
1549122825753:geom_jitter(position = position_jitter(width=.3), aes(color = Locus),
1549122825754:alpha = 0.4, size = 1.2, shape = 16) +
1549122825755:geom_boxplot(alpha = 0.7, size = 0.5, aes(fill = Locus, color = Locus)) +
1549122825756:geom_text(data = labelsData, size = 4, hjust = "center",
1549122825758:aes(x = N,#(N - 0.5),
1549122825759:y = info.y * 1.05,
1549122825760:label = Allele),
1549122825761:color = "#333333") +
1549122825763:geom_text(data = labelsData, size = 3, hjust = "center",
1549122825764:parse = TRUE,
1549122825765:aes(x = N,#(N - 0.4),
1549122825766:# y = info.y * 0.08,
1549122825768:y = info.y * 0.96,
1549122825769:label = paste0("sigma ==",format(round(sd, 1), nsmall = 1))),
1549122825770:color = "#333333") +
1549122825771:geom_point(data = labelsData,
1549122825773:shape = 23, fill = "white",
1549122825774:aes(x = N, y = meanDepth)) +
1549122825775:facet_grid(Locus ~ ., scales = "free_y") +
1549122825777:scale_color_manual(values = borderColors) +
1549122825778:scale_fill_manual(values = fillColors) +
1549122825779:labs(title = expression(paste(italic("k"), "-mer depth distribution")),
1549122825781:subtitle = basename(input.file),
1549122825782:x        = "Allele Ranking",
1549122825783:y        = expression(paste(italic(k), "-mer depth")),
1549122825785:caption  = expression(paste(italic(sigma), ": standard deviation")))+#,"sd: standard deviation") +
1549122825786:theme_bw() +
1549122825787:plotTheme +
1549122825789:theme(axis.text.x   = element_text(angle = 0, size = axisTextSize,
1549122825790:vjust = 1, hjust = 0.5, color = textColor))
1549122825792:dist.plot
1549122825793:}
1549122825794:# Function to get data for annotations ------------------------------------
1549122825796:getLabelsData <- function(data.to.plot) {
1549122825798:max.x <- max(data.to.plot$Position)
1549122825799:max.y <- max(data.to.plot$kmerDepth)
1549122825801:nLoci    <- length(unique(data.to.plot$Locus))
1549122825802:nAlleles <- length(unique(data.to.plot$N))
1549122825806:alleles     <- unique(data.to.plot$Allele)
1549122825808:loci        <- as.character(unique(data.to.plot$Locus))
1549122825810:lociLabels  <- c()
1549122825811:name.x      <- c()
1549122825813:name.y      <- c()
1549122825814:info.x      <- c()
1549122825816:info.y      <- c()
1549122825818:covs        <- c()
1549122825819:avgDepths   <- c()
1549122825821:meanDepth.x <- c()
1549122825822:meanDepth.y <- c()
1549122825824:for (i in loci) {
1549122825826:lociLabels <- c(lociLabels, rep(i, nAlleles))
1549122825827:}
1549122825829:for (allele in alleles) {
1549122825831:locus       <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1549122825832:maxPos      <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549122825834:maxDepth    <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549122825836:# name.x      <- c(name.x, (maxPos / 2))
1549122825837:name.x      <- c(name.x, (max.x / 2))
1549122825839:name.y      <- c(name.y, (maxDepth * 0.25))
1549122825841:info.x      <- c(info.x, max.x * 0.02)
1549122825842:info.y      <- c(info.y, maxDepth * 1.5)
1549122825844:covs        <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549122825846:avgDepths   <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549122825848:}
1549122825850:labelsData <- data.frame(Allele = alleles,
1549122825852:name.x = name.x,
1549122825853:name.y = name.y,
1549122825854:info.x = info.x,
1549122825855:info.y = info.y,
1549122825856:meanDepth = avgDepths,
1549122825858:N = rep(unique(data.to.plot$N), nLoci),
1549122825859:Locus = lociLabels,
1549122825860:cov = covs
1549122825861:) %>%
1549122825863:left_join(data.to.plot %>%
1549122825865:group_by(Allele, Length, NormKmerCount, Score) %>%
1549122825866:summarise(sd = sd(kmerDepth)),
1549122825868:by = c("Allele" = "Allele")) #%>%
1549122825870:# mutate(
1549122825871:#   info   = paste0("cov=", format(round(covs, 1), nsmall = 1), "%   ",
1549122825873:#                   paste0("ad=", format(round(avgDepths, 1), nsmall = 1)),
1549122825875:#                   "   ",
1549122825877:#                   # expression(paste(italic(sigma), "=",format(round(sd, 1), nsmall = 1))))
1549122825878:#                   paste0("sd=", format(round(sd, 1), nsmall = 1))
1549122825880:#   )
1549122825882:# )
1549122825883:labelsData
1549122825885:}
1549122825889:# Check for genes/loci file to filter loci to plot  -----------------------
1549122825890:loci.to.plot <- c()
1549122825892:# if (!is.null(gene.file)|| gene.file != "") {
1549122825894:if (!is.null(gene.file) && !is.na(gene.file) && gene.file != "") {
1549122825896:error.message <- CheckFileExists(gene.file)
1549122825898:if (!is.null(error.message)){
1549122825900:cat("Warning:")
1549122825901:cat(error.message)
1549122825903:cat("  The plotting process will continue without filtering genes/loci.\n")
1549122825904:} else {
1549122825905:loci.to.plot <- scan(gene.file, character(), quiet = TRUE)
1549122825906:}
1549122825908:}
1549122825911:# Data processing and plotting --------------------------------------------
1549122825913:cat("Plotting depths... ")
1549122825914:options(stringsAsFactors = T, readr.num_columns = 0)
1549122825916:# Load data
1549122825917:inData <- read_tsv(input.file)
1549122825918:# inData <- read.delim(input.file)
1549122825921:# colnames(inData) <- c("Allele", "Position", "k-mer Depth", "Weighted k-mer Depth")
1549122825922:colnames(inData) <- c("N", "Locus", "Allele", "Position", "kmerDepth",
1549122825923:"NormKmerCount", "Coverage", "Score", "AverageKmerDepth")
1549122825925:# Transform data
1549122825927:data.to.plot <- inData %>%
1549122825928:left_join(inData %>%
1549122825929:group_by(Allele) %>%
1549122825930:summarise(Length = n()), by = "Allele") %>%
1549122825931:arrange(Locus, N) %>%
1549122825934:mutate(
1549122825936:AlPos = factor(N, levels = unique(.$N)),
1549122825938:Allele = factor(Allele, levels = unique(inData$Allele)))
1549122825940:# Filtering loci/genes from genes_file input param
1549122825943:if (length(loci.to.plot) > 0) {
1549122825945:data.to.plot <- data.to.plot %>%
1549122825947:filter(Locus %in% loci.to.plot)
1549122825949:}
1549122825952:longestLocusNameLength <- max(str_length(as.character(unique(inData$Locus))))
1549122825953:# labelsData <- getLabelsData(data.to.plot)
1549122825954:nLoci      <- length(unique(data.to.plot$Locus))
1549122825956:nAlleles   <- length(unique(data.to.plot$N))
1549122825958:# Theme-related variable definition ---------------------------------------
1549122825959:annotLinetype         <- "solid"
1549122825961:annotTextSize         <- 4
1549122825962:axisColor             <- "#000000"
1549122825963:axisTextSize          <- 12
1549122825965:barAnnotTextSize      <- 4
1549122825966:baseTextSize          <- 14
1549122825967:gridColor             <- "#e0e0e0"
1549122825969:lineSize              <- 0.3
1549122825970:panelColor            <- "#fff4e0"
1549122825971:panelColor            <- "#f2efe6"
1549122825973:# panelColor            <- "#ffffff"
1549122825974:# stripBackground       <- "#cccccc"
1549122825976:stripTextSize         <- axisTextSize
1549122825978:if (longestLocusNameLength > 12)
1549122825979:stripTextSize       <- stripTextSize * 0.6
1549122825981:textColor             <- "#000000"
1549122825982:# baseFontFamily        <- "Arial"
1549122825985:# Custom theme definition for plots ---------------------------------------
1549122825987:plotTheme <- list(
1549122825988:theme(
1549122825990:axis.text.x      = element_text(angle = 50, size = axisTextSize,
1549122825991:vjust = 1, hjust = 1, color = textColor),
1549122825993:axis.text.y      = element_text(size = axisTextSize, color = textColor),
1549122825994:axis.ticks       = element_line(size = lineSize),
1549122825996:axis.title.x     = element_text(margin = margin(6,0,8,0, "mm")),
1549122825998:axis.title.y     = element_text(margin = margin(0,6,0,0, "mm")),
1549122825999:legend.position  = "none",
1549122826001:panel.border     = element_rect(size = lineSize),
1549122826003:panel.background = element_rect(fill = panelColor),
1549122826005:panel.grid       = element_line(size = lineSize, colour = gridColor),
1549122826007:panel.grid.minor = element_blank(),
1549122826009:plot.margin      = margin(10,10,0,10, "mm"),
1549122826012:panel.spacing    = unit(4, "mm"),
1549122826014:plot.caption     = element_text(size = baseTextSize * 0.7, face = "italic"),
1549122826018:plot.title       = element_text(hjust = 0.5),
1549122826020:plot.subtitle    = element_text(hjust = 0.5),
1549122826022:strip.background = element_rect(size = lineSize),
1549122826024:strip.text       = element_text(size = stripTextSize),
1549122826026:text             = element_text(size = baseTextSize)
1549122826028:)
1549122826030:)
1549122826033:# Palette definition ------------------------------------------------------
1549122826035:# colourCount <- length(unique(inData$Locus))
1549122826037:colourCount <- nLoci
1549122826039:# colourCount  <- length(unique(data.to.plot$Allele))
1549122826040:# fillPalette  <- colorRampPalette(brewer.pal(8, "Dark2"))(colourCount)
1549122826042:# fillPalette  <- colorRampPalette(brewer.pal(12, "Paired"))(colourCount)
1549122826044:# fillPalette  <- colorRampPalette(brewer.pal(9, "Set1"))(colourCount)
1549122826047:# fillPalette  <- colorRampPalette(pal_npg("nrc")(10))(colourCount)
1549122826050:# fillPalette  <- colorRampPalette(pal_d3("category20")(20))(colourCount)
1549122826052:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549122826055:borderPalette <- darkColors(fillPalette, 0.6)
1549122826058:# library("scales"); show_col(fillPalette); show_col(borderPalette)
1549122826068:# # Depth plot -------------------------------------------------------------
1549122826071:# hFactor  <- 1.2
1549122826073:# wFactor  <- 4.8
1549122826076:# # if (nLoci == 1)
1549122826079:# #   hFactor <- 1.4;
1549122826084:# height <- (nLoci * hFactor) + 2 + 0.1 + ((nLoci-1)*0.05)
1549122826086:# width  <- nAlleles * wFactor
1549122826088:# # Generate plot
1549122826090:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549122826091:# # Save plot
1549122826093:# out.filename <- paste0(out.prefix, ".", out.format)
1549122826095:# if (out.format == "png") {
1549122826096:# 	ggsave(filename = out.filename, plot = depth.plot,
1549122826098:# 				 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549122826100:# } else {
1549122826102:# 	ggsave(filename = out.filename, plot = depth.plot,
1549122826103:# 				 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549122826105:# }
1549122826109:# Depth plot -------------------------------------------------------------
1549122826110:# <<<<<<< HEAD
1549122826112:#   rowsPerPage <- 7
1549122826114:#   hFactor     <- 1.2
1549122826116:#   wFactor     <- 4.8
1549122826117:#   rows        <- nLoci
1549122826119:#   if (nLoci > rowsPerPage)
1549122826121:#     rows <- rowsPerPage;
1549122826124:#   height <- (rows * hFactor) + 2 + 0.1 + ((rows-1)*0.05)
1549122826126:#   width  <- nAlleles * wFactor
1549122826127:#
1549122826129:#   loci     <- unique(data.to.plot$Locus)
1549122826131:#   lociList <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549122826133:#   lociList <- split(loci, ceiling(seq_along(loci)/3))
1549122826135:#   plotList <- list()
1549122826136:#   for (lociSet in lociList) {
1549122826138:#   	print(lociSet)
1549122826140:#   	subset.to.plot <- data.to.plot %>%
1549122826142:#   		filter(Locus %in% lociSet)
1549122826143:#   	labelsData <- getLabelsData(subset.to.plot)
1549122826145:#   	currentPlot <- plotDepth(subset.to.plot, labelsData, fillPalette, borderPalette)
1549122826147:#   	plotList <- c(plotList, list(currentPlot))
1549122826149:#   	# print(currentPlot)
1549122826150:#   	# print(unique(subset.to.plot$Locus))
1549122826152:#   }
1549122826154:#  	length(plotList)
1549122826155:#
1549122826157:#  	if (out.format == "pdf") {
1549122826159:#  		out.filename <- paste(out.prefix, out.format, sep = ".")
1549122826161:#  		pdf(out.filename)
1549122826165:#  		for (i in seq_along(plotList)) {
1549122826168:#  			nLociToPlot <- length(lociList[[i]])
1549122826170:#  			height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1549122826173:#  			width  <- nAlleles * wFactor
1549122826176:#  			# out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549122826178:#  			# print(out.filename)
1549122826181:#  			print(plotList[[i]])
1549122826183:#  		}
1549122826186:#  		dev.off()
1549122826189:#
1549122826191:#  	}
1549122826194:#  	for (i in seq_along(plotList)) {
1549122826196:#  		nLociToPlot <- length(lociList[[i]])
1549122826199:#  		height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1549122826201:#  		width  <- nAlleles * wFactor
1549122826204:#  		out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549122826207:#  		print(out.filename)
1549122826209:#  		pdf(out.filename, width = width, height = height)
1549122826212:#  		print(plotList[[i]])
1549122826214:#  		dev.off()
1549122826217:#  	}
1549122826220:#  	else if (out.format == "png") {
1549122826222:#  		ggsave(filename = out.filename, plot = depth.plot,
1549122826224:#  					 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549122826226:#  	} else {
1549122826228:#  		ggsave(filename = out.filename, plot = depth.plot,
1549122826230:#  					 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549122826232:#  	}
1549122826233:#
1549122826238:#  	plot_grid()
1549122826241:#  	# Generate plot
1549122826243:#   # (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549122826249:# =======
1549122826251:hFactor  <- 1.6
1549122826254:wFactor  <- 4.8
1549122826257:# if (nLoci == 1)
1549122826260:#   hFactor <- 1.4;
1549122826268:#               loci          titles and     strip    space between locus
1549122826271:#                             footnote
1549122826273:height <- (nLoci * hFactor) + 2              + 0.1    + ((nLoci-1)*0.05)
1549122826278:getPlotHeight <- function(rows){
1549122826281:# loci + titles and foot note + strip + space between locus
1549122826284:(rows*hFactor) + 2.39 + ((rows-1)*0.157) #in
1549122826286:}
1549122826292:width  <- nAlleles * wFactor
1549122826294:height <- getPlotHeight(nLoci)
1549122826296:rowsPerPage <- 5
1549122826298:loci <- unique(data.to.plot$Locus)
1549122826300:sets <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549122826303:plots <- lapply(sets, function(set, dp=data.to.plot, rp=rowsPerPage){
1549122826305:subsetToPlot <- dp %>% filter(Locus %in% set)
1549122826307:ld    <- getLabelsData(subsetToPlot)
1549122826309:(p    <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette))
1549122826311:nLoci <- length(set)
1549122826312:if(nLoci < rp & out.format == "pdf"){
1549122826314:# hlay    <- matrix(c(rep(1, nLoci), rep(NA, rp-nLoci)))
1549122826316:hlay    <- matrix(c(rep(1, nLoci), NA))
1549122826318:total   <- getPlotHeight(rp)
1549122826320:cHeight <- getPlotHeight(nLoci)
1549122826322:blank   <- getPlotHeight(rp-nLoci) - 2.39
1549122826324:# heights <- matrix(c(rep(1, nLoci), rep(1/rp+2, rp-nLoci)))
1549122826326:# heights <- matrix(c(rep(1, nLoci), 0.6))
1549122826328:heights <- matrix(c(1, blank/total))
1549122826330:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549122826332:# p       <- grid.arrange(p, layout_matrix = hlay, heights = unit(c(cHeight, blank), c("in", "in")))
1549122826334:print(str_glue("{total}, {cHeight}, {blank}"))
1549122826336:}
1549122826338:p
1549122826340:})
1549122826342:ml <- marrangeGrob(plots, nrow=1, ncol=1, padding = unit(10, "mm"),
1549122826344:top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549122826346:ggsave(filename = "multipage.pdf", plot = ml,
1549122826348:width  = width, height = getPlotHeight(rowsPerPage), dpi = 400, limitsize = FALSE)
1549122826351:# Generate plot
1549122826353:labelsData <- getLabelsData(data.to.plot)
1549122826356:(depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549122826358:# >>>>>>> 64e9112fd081cc5c75caf0f7d0d03cd9f5ea18f4
1549122826359:# Save plot
1549122826361:out.filename <- paste0(out.prefix, ".", out.format)
1549122826364:if (out.format == "png") {
1549122826366:ggsave(filename = out.filename, plot = depth.plot,
1549122826368:width  = width, height = height, dpi = 300, limitsize = FALSE, type = "cairo-png")
1549122826370:} else {
1549122826372:ggsave(filename = out.filename, plot = depth.plot,
1549122826374:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549122826376:}
1549122826381:# Depth distribution plot ------------------------------------------------
1549122826385:hFactor  <- 3
1549122826388:wFactor  <- 2
1549122826391:if (nLoci == 1)
1549122826394:hFactor <- 3.5
1549122826397:height       <- nLoci * hFactor
1549122826400:width        <- nAlleles * wFactor
1549122826404:# Generate plot
1549122826407:(dist.plot <- plotDepthDist(data.to.plot, labelsData, fillPalette, borderPalette))
1549122826410:# Save plot
1549122826413:out.filename <- paste0(out.prefix, "_dist.", out.format)
1549122826417:if (out.format == "png") {
1549122826420:ggsave(filename = out.filename, plot = dist.plot,
1549122826423:width  = width, height = height, type = "cairo-png", dpi = 300)
1549122826426:} else {
1549122826430:ggsave(filename = out.filename, plot = dist.plot,
1549122826433:width  = width, height = height, dpi = 400)
1549122826436:}
1549122826439:cat("Done! \n")
1549122826446:# Code core - End ---------------------------------------------------------
1549122826448:}
1549122874639:blank/total
1549122884014:dp=data.to.plot
1549122887759:rp=rowsPerPage
1549122890046:subsetToPlot <- dp %>% filter(Locus %in% set)
1549122919196:set <- sets[[2]]
1549122920475:set
1549122924792:# set <- sets[[2]]
1549122924793:subsetToPlot <- dp %>% filter(Locus %in% set)
1549122926075:ld    <- getLabelsData(subsetToPlot)
1549122926836:(p    <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette))
1549122929298:nLoci <- length(set)
1549122930654:if(nLoci < rp & out.format == "pdf"){
1549122930655:# hlay    <- matrix(c(rep(1, nLoci), rep(NA, rp-nLoci)))
1549122930655:hlay    <- matrix(c(rep(1, nLoci), NA))
1549122930656:total   <- getPlotHeight(rp)
1549122930656:cHeight <- getPlotHeight(nLoci)
1549122930656:blank   <- getPlotHeight(rp-nLoci) - 2.39
1549122930657:# heights <- matrix(c(rep(1, nLoci), rep(1/rp+2, rp-nLoci)))
1549122930658:# heights <- matrix(c(rep(1, nLoci), 0.6))
1549122930658:heights <- matrix(c(1, blank/total))
1549122930659:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549122930660:# p       <- grid.arrange(p, layout_matrix = hlay, heights = unit(c(cHeight, blank), c("in", "in")))
1549122930660:print(str_glue("{total}, {cHeight}, {blank}"))
1549122930661:}
1549122976671:blank/total
1549123016520:8.547 + 9.314
1549123039085:#!/usr/bin/env Rscript
1549123039085:# ##############################################################################
1549123039085:#  Author:   Hector Fabio Espitia-Navarro
1549123039086:#            Georgia Institute of Technology
1549123039086:#  Version:  1.0
1549123039086:#  Date:     01/19/2019
1549123039087:# ##############################################################################
1549123039087:# Install required packages -----------------------------------------------
1549123039087:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549123039088:if(!file.exists(personal.lib.path))
1549123039088:dir.create(personal.lib.path)
1549123039089:printMessage <- function(message, verbose){
1549123039089:if(verbose)
1549123039090:cat(message)
1549123039090:}
1549123039091:# crayon::bold("Hola")
1549123039091:installAndLoadPackages <- function(pkg, verbose){
1549123039091:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1549123039092:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1549123039092:printMessage("Done!\n", verbose)
1549123039092:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549123039093:if (length(new.pkg)) {
1549123039093:printMessage("Installing new packages... ", verbose)
1549123039093:install.packages(new.pkg, dependencies = TRUE,
1549123039094:repos="http://cran.rstudio.com/",
1549123039094:lib = personal.lib.path)
1549123039094:printMessage("Done!\n", verbose)
1549123039095:}
1549123039095:printMessage("Loading required packages... ", verbose)
1549123039096:sapply(pkg, function(x){
1549123039096:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549123039097:})
1549123039098:printMessage("Done!\n", verbose)
1549123039098:}
1549123039099:# github.related.packages <- c("devtools", "Rcpp")
1549123039099:# packages <- c("argparser", "tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite")
1549123039100:packages <- c("tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite", "gridExtra")
1549123039100:# installAndLoadPackages(packages, verbose = TRUE)
1549123039101:installAndLoadPackages("argparser", verbose = FALSE)
1549123039123:# Command line arguments processing ---------------------------------------
1549123039124:# Get script name
1549123039124:initial.options <- commandArgs(trailingOnly = FALSE)
1549123039124:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1549123039125:# Process command line arguments
1549123039125:# Create a parser
1549123039126:p <- arg_parser("This script generates k-mer depth plots using a depth file generated by the\033[1mSTing typer\033[22m tool (-t option).",
1549123039126:name = script.name)
1549123039127:# Add Positional arguments (required)
1549123039128:p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
1549123039128:# Add options
1549123039129:p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1549123039130:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1549123039130:default = "kmer_depth")
1549123039131:p <- add_argument(p, "--sample_name", help = "Sample name.",
1549123039131:default = "input file's name")
1549123039132:p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'",
1549123039132:default = "pdf")
1549123039133:# Initialization of variables ---------------------------------------------
1549123039134:# Values to test the script using RStudio
1549123039134:script.home <- "/home/hspitia/projects/sting"
1549123039134:# inputFile   <- paste(script.home, "ERR036060.depth.2.tsv", sep = "/")
1549123039135:# geneFile    <- paste(script.home, "rmlst_failed_loci.txt", sep = "/")
1549123039135:inputFile   <- paste(script.home, "depth.tsv", sep = "/")
1549123039135:geneFile    <- paste(script.home, "loci.txt", sep = "/")
1549123039136:out.format  <- "pdf"
1549123039136:out.prefix  <- "kmer_ext_depth"
1549123039137:sample.name <- basename(inputFile)
1549123039137:# Parse command line arguments
1549123039137:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1549123039138:argv <- list()
1549123039138:if(command.line) {
1549123039139:argv <- parse_args(p)
1549123039139:} else {
1549123039139:argv <- parse_args(p, list(inputFile,
1549123039139:# "--gene_file", geneFile,
1549123039140:"--prefix", out.prefix,
1549123039140:"--sample_name", sample.name,
1549123039140:"--format", out.format))
1549123039141:}
1549123039142:# Get argument values from the command line
1549123039142:input.file  <- argv$input_file
1549123039143:gene.file   <- argv$gene_file
1549123039143:out.format  <- argv$format
1549123039143:out.prefix  <- argv$prefix
1549123039144:sample.name <- argv$sample_name
1549123039144:# if (sample.name == "")
1549123039145:if (sample.name == "input file's name")
1549123039145:sample.name <- basename(input.file)
1549123039146:# Function to check if file exists ----------------------------------------
1549123039146:CheckFileExists <- function(file.list) {
1549123039146:non.exist.files <- !file.exists(file.list)
1549123039147:if(any(non.exist.files)) {
1549123039147:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549123039148:}
1549123039148:}
1549123039149:# Check for input files ---------------------------------------------------
1549123039150:files.to.check <- c(input.file)
1549123039150:error.message  <- CheckFileExists(files.to.check)
1549123039151:if(!is.null(error.message)){
1549123039152:stop(error.message)
1549123039152:} else {
1549123039152:# Code core - Begin -------------------------------------------------------
1549123039153:installAndLoadPackages(packages, verbose = TRUE)
1549123039153:# FUNCTIONS:
1549123039153:# Function to dark a list of colors ---------------------------------------
1549123039154:darkColors <- function(palette, level){
1549123039154:rgbColors <- as.data.frame(t(as.data.frame(lapply(as.data.frame(t(col2rgb(palette))),
1549123039154:function(x) { round(x * level)}))))
1549123039155:unname(sapply(rgbColors, function(x){ rgb(x[1], x[2], x[3], maxColorValue=255) }))
1549123039155:}
1549123039155:# Function for plotting k-mer depth ----------------------------------------
1549123039156:plotDepth <- function(dataToPlot, labelsData, fillColors, borderColors) {
1549123039156:max.x       <- max(dataToPlot$Position)
1549123039156:max.y       <- max(dataToPlot$kmerDepth)
1549123039157:x.limits    <- seq(0, max.x, 100)
1549123039157:y.limits    <- seq(0, max.y, 20)
1549123039157:nTopAlleles <- length(unique(dataToPlot$N))
1549123039158:d.plot <- ggplot(data = dataToPlot, aes(x = Position, y = kmerDepth),
1549123039159:size = 0.2) +
1549123039159:geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1549123039159:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1549123039160:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1549123039160:# scale_color_manual(values = getPalette) +
1549123039161:scale_color_manual(values = borderColors) +
1549123039161:scale_fill_manual(values = fillColors) +
1549123039162:geom_text(data = labelsData,
1549123039162:# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1549123039162:# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1549123039163:aes(x = Length, y = info.y * 0.5, group = Locus,
1549123039163:hjust = 0,
1549123039164:label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1549123039164:show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1549123039165:nudge_x = -(max.x*0.025)
1549123039165:) +
1549123039166:geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1549123039166:alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1549123039167:# geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1549123039167:size = annotTextSize * 1.05, color = "#333333") +
1549123039168:geom_text(data = labelsData,
1549123039168:parse = TRUE,
1549123039169:aes(x = info.x, y = info.y,
1549123039169:label = paste0("{{{{italic(s)==", format(round(Score, 2), nsmall = 2),
1549123039170:"*~~~italic(hat(f)[k])} ==", format(round(NormKmerCount, 2), nsmall = 2),
1549123039170:"*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1549123039171:"*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1549123039171:"~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1549123039172:hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1549123039173:facet_grid(Locus ~ N, scales = "free_y") +
1549123039173:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1549123039174:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1549123039174:theme_bw() +
1549123039175:plotTheme +
1549123039176:labs(title    = expression(italic("k")*"-mer depth"),
1549123039176:subtitle = paste("Top", nTopAlleles, "alleles/genes on sample", sample.name),
1549123039177:x        = "Position along sequence (bp)",
1549123039178:y        = expression(paste(italic(k), "-mer depth")),
1549123039178:# caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1549123039180:caption  = expression(paste(italic("s"),": score;  ",
1549123039181:italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1549123039183:italic("c"),": coverage;  ",
1549123039184:italic(sigma), ": standard deviation;  ",
1549123039185:italic(bar(d)), ": average depth"), sep = "")
1549123039186:)
1549123039187:# guides(fill  = guide_legend(title  ="Allele"), color = FALSE) +
1549123039187:d.plot
1549123039188:}
1549123039189:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549123039189:# Function for plotting k-mer depth distributions as box plots ------------
1549123039190:plotDepthDist <- function(data.to.plot, labelsData, fillColors, borderColors){
1549123039191:dist.plot <- ggplot(data.to.plot, aes(x = AlPos, y = kmerDepth)) +
1549123039192:geom_jitter(position = position_jitter(width=.3), aes(color = Locus),
1549123039193:alpha = 0.4, size = 1.2, shape = 16) +
1549123039194:geom_boxplot(alpha = 0.7, size = 0.5, aes(fill = Locus, color = Locus)) +
1549123039196:geom_text(data = labelsData, size = 4, hjust = "center",
1549123039197:aes(x = N,#(N - 0.5),
1549123039199:y = info.y * 1.05,
1549123039200:label = Allele),
1549123039201:color = "#333333") +
1549123039203:geom_text(data = labelsData, size = 3, hjust = "center",
1549123039205:parse = TRUE,
1549123039206:aes(x = N,#(N - 0.4),
1549123039207:# y = info.y * 0.08,
1549123039208:y = info.y * 0.96,
1549123039209:label = paste0("sigma ==",format(round(sd, 1), nsmall = 1))),
1549123039210:color = "#333333") +
1549123039210:geom_point(data = labelsData,
1549123039211:shape = 23, fill = "white",
1549123039212:aes(x = N, y = meanDepth)) +
1549123039214:facet_grid(Locus ~ ., scales = "free_y") +
1549123039216:scale_color_manual(values = borderColors) +
1549123039217:scale_fill_manual(values = fillColors) +
1549123039219:labs(title = expression(paste(italic("k"), "-mer depth distribution")),
1549123039220:subtitle = basename(input.file),
1549123039222:x        = "Allele Ranking",
1549123039223:y        = expression(paste(italic(k), "-mer depth")),
1549123039225:caption  = expression(paste(italic(sigma), ": standard deviation")))+#,"sd: standard deviation") +
1549123039226:theme_bw() +
1549123039228:plotTheme +
1549123039229:theme(axis.text.x   = element_text(angle = 0, size = axisTextSize,
1549123039231:vjust = 1, hjust = 0.5, color = textColor))
1549123039232:dist.plot
1549123039234:}
1549123039235:# Function to get data for annotations ------------------------------------
1549123039237:getLabelsData <- function(data.to.plot) {
1549123039238:max.x <- max(data.to.plot$Position)
1549123039240:max.y <- max(data.to.plot$kmerDepth)
1549123039243:nLoci    <- length(unique(data.to.plot$Locus))
1549123039244:nAlleles <- length(unique(data.to.plot$N))
1549123039261:alleles     <- unique(data.to.plot$Allele)
1549123039262:loci        <- as.character(unique(data.to.plot$Locus))
1549123039264:lociLabels  <- c()
1549123039266:name.x      <- c()
1549123039267:name.y      <- c()
1549123039269:info.x      <- c()
1549123039271:info.y      <- c()
1549123039272:covs        <- c()
1549123039274:avgDepths   <- c()
1549123039276:meanDepth.x <- c()
1549123039277:meanDepth.y <- c()
1549123039278:for (i in loci) {
1549123039279:lociLabels <- c(lociLabels, rep(i, nAlleles))
1549123039280:}
1549123039281:for (allele in alleles) {
1549123039282:locus       <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1549123039283:maxPos      <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549123039284:maxDepth    <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549123039286:# name.x      <- c(name.x, (maxPos / 2))
1549123039287:name.x      <- c(name.x, (max.x / 2))
1549123039288:name.y      <- c(name.y, (maxDepth * 0.25))
1549123039289:info.x      <- c(info.x, max.x * 0.02)
1549123039290:info.y      <- c(info.y, maxDepth * 1.5)
1549123039291:covs        <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549123039292:avgDepths   <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549123039293:}
1549123039294:labelsData <- data.frame(Allele = alleles,
1549123039296:name.x = name.x,
1549123039297:name.y = name.y,
1549123039298:info.x = info.x,
1549123039299:info.y = info.y,
1549123039300:meanDepth = avgDepths,
1549123039301:N = rep(unique(data.to.plot$N), nLoci),
1549123039302:Locus = lociLabels,
1549123039303:cov = covs
1549123039304:) %>%
1549123039306:left_join(data.to.plot %>%
1549123039307:group_by(Allele, Length, NormKmerCount, Score) %>%
1549123039308:summarise(sd = sd(kmerDepth)),
1549123039309:by = c("Allele" = "Allele")) #%>%
1549123039310:# mutate(
1549123039312:#   info   = paste0("cov=", format(round(covs, 1), nsmall = 1), "%   ",
1549123039313:#                   paste0("ad=", format(round(avgDepths, 1), nsmall = 1)),
1549123039314:#                   "   ",
1549123039316:#                   # expression(paste(italic(sigma), "=",format(round(sd, 1), nsmall = 1))))
1549123039318:#                   paste0("sd=", format(round(sd, 1), nsmall = 1))
1549123039319:#   )
1549123039321:# )
1549123039323:labelsData
1549123039325:}
1549123039328:# Check for genes/loci file to filter loci to plot  -----------------------
1549123039330:loci.to.plot <- c()
1549123039331:# if (!is.null(gene.file)|| gene.file != "") {
1549123039333:if (!is.null(gene.file) && !is.na(gene.file) && gene.file != "") {
1549123039335:error.message <- CheckFileExists(gene.file)
1549123039336:if (!is.null(error.message)){
1549123039338:cat("Warning:")
1549123039340:cat(error.message)
1549123039342:cat("  The plotting process will continue without filtering genes/loci.\n")
1549123039343:} else {
1549123039345:loci.to.plot <- scan(gene.file, character(), quiet = TRUE)
1549123039347:}
1549123039349:}
1549123039352:# Data processing and plotting --------------------------------------------
1549123039354:cat("Plotting depths... ")
1549123039356:options(stringsAsFactors = T, readr.num_columns = 0)
1549123039360:# Load data
1549123039362:inData <- read_tsv(input.file)
1549123039363:# inData <- read.delim(input.file)
1549123039367:# colnames(inData) <- c("Allele", "Position", "k-mer Depth", "Weighted k-mer Depth")
1549123039369:colnames(inData) <- c("N", "Locus", "Allele", "Position", "kmerDepth",
1549123039371:"NormKmerCount", "Coverage", "Score", "AverageKmerDepth")
1549123039374:# Transform data
1549123039376:data.to.plot <- inData %>%
1549123039378:left_join(inData %>%
1549123039380:group_by(Allele) %>%
1549123039382:summarise(Length = n()), by = "Allele") %>%
1549123039384:arrange(Locus, N) %>%
1549123039385:mutate(
1549123039387:AlPos = factor(N, levels = unique(.$N)),
1549123039389:Allele = factor(Allele, levels = unique(inData$Allele)))
1549123039391:# Filtering loci/genes from genes_file input param
1549123039393:if (length(loci.to.plot) > 0) {
1549123039395:data.to.plot <- data.to.plot %>%
1549123039397:filter(Locus %in% loci.to.plot)
1549123039399:}
1549123039403:longestLocusNameLength <- max(str_length(as.character(unique(inData$Locus))))
1549123039405:# labelsData <- getLabelsData(data.to.plot)
1549123039407:nLoci      <- length(unique(data.to.plot$Locus))
1549123039408:nAlleles   <- length(unique(data.to.plot$N))
1549123039412:# Theme-related variable definition ---------------------------------------
1549123039415:annotLinetype         <- "solid"
1549123039417:annotTextSize         <- 4
1549123039419:axisColor             <- "#000000"
1549123039421:axisTextSize          <- 12
1549123039423:barAnnotTextSize      <- 4
1549123039425:baseTextSize          <- 14
1549123039427:gridColor             <- "#e0e0e0"
1549123039429:lineSize              <- 0.3
1549123039431:panelColor            <- "#fff4e0"
1549123039433:panelColor            <- "#f2efe6"
1549123039435:# panelColor            <- "#ffffff"
1549123039437:# stripBackground       <- "#cccccc"
1549123039439:stripTextSize         <- axisTextSize
1549123039441:if (longestLocusNameLength > 12)
1549123039443:stripTextSize       <- stripTextSize * 0.6
1549123039445:textColor             <- "#000000"
1549123039447:# baseFontFamily        <- "Arial"
1549123039451:# Custom theme definition for plots ---------------------------------------
1549123039454:plotTheme <- list(
1549123039456:theme(
1549123039458:axis.text.x      = element_text(angle = 50, size = axisTextSize,
1549123039460:vjust = 1, hjust = 1, color = textColor),
1549123039462:axis.text.y      = element_text(size = axisTextSize, color = textColor),
1549123039464:axis.ticks       = element_line(size = lineSize),
1549123039467:axis.title.x     = element_text(margin = margin(6,0,8,0, "mm")),
1549123039469:axis.title.y     = element_text(margin = margin(0,6,0,0, "mm")),
1549123039471:legend.position  = "none",
1549123039473:panel.border     = element_rect(size = lineSize),
1549123039476:panel.background = element_rect(fill = panelColor),
1549123039478:panel.grid       = element_line(size = lineSize, colour = gridColor),
1549123039480:panel.grid.minor = element_blank(),
1549123039482:plot.margin      = margin(10,10,0,10, "mm"),
1549123039485:panel.spacing    = unit(4, "mm"),
1549123039487:plot.caption     = element_text(size = baseTextSize * 0.7, face = "italic"),
1549123039489:plot.title       = element_text(hjust = 0.5),
1549123039491:plot.subtitle    = element_text(hjust = 0.5),
1549123039494:strip.background = element_rect(size = lineSize),
1549123039496:strip.text       = element_text(size = stripTextSize),
1549123039498:text             = element_text(size = baseTextSize)
1549123039500:)
1549123039503:)
1549123039507:# Palette definition ------------------------------------------------------
1549123039510:# colourCount <- length(unique(inData$Locus))
1549123039512:colourCount <- nLoci
1549123039515:# colourCount  <- length(unique(data.to.plot$Allele))
1549123039517:# fillPalette  <- colorRampPalette(brewer.pal(8, "Dark2"))(colourCount)
1549123039520:# fillPalette  <- colorRampPalette(brewer.pal(12, "Paired"))(colourCount)
1549123039522:# fillPalette  <- colorRampPalette(brewer.pal(9, "Set1"))(colourCount)
1549123039525:# fillPalette  <- colorRampPalette(pal_npg("nrc")(10))(colourCount)
1549123039527:# fillPalette  <- colorRampPalette(pal_d3("category20")(20))(colourCount)
1549123039530:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549123039533:borderPalette <- darkColors(fillPalette, 0.6)
1549123039535:# library("scales"); show_col(fillPalette); show_col(borderPalette)
1549123039545:# # Depth plot -------------------------------------------------------------
1549123039548:# hFactor  <- 1.2
1549123039550:# wFactor  <- 4.8
1549123039553:# # if (nLoci == 1)
1549123039555:# #   hFactor <- 1.4;
1549123039560:# height <- (nLoci * hFactor) + 2 + 0.1 + ((nLoci-1)*0.05)
1549123039562:# width  <- nAlleles * wFactor
1549123039564:# # Generate plot
1549123039566:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549123039567:# # Save plot
1549123039569:# out.filename <- paste0(out.prefix, ".", out.format)
1549123039571:# if (out.format == "png") {
1549123039573:# 	ggsave(filename = out.filename, plot = depth.plot,
1549123039575:# 				 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549123039576:# } else {
1549123039578:# 	ggsave(filename = out.filename, plot = depth.plot,
1549123039580:# 				 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549123039582:# }
1549123039588:# Depth plot -------------------------------------------------------------
1549123039590:# <<<<<<< HEAD
1549123039593:#   rowsPerPage <- 7
1549123039596:#   hFactor     <- 1.2
1549123039599:#   wFactor     <- 4.8
1549123039601:#   rows        <- nLoci
1549123039604:#   if (nLoci > rowsPerPage)
1549123039607:#     rows <- rowsPerPage;
1549123039612:#   height <- (rows * hFactor) + 2 + 0.1 + ((rows-1)*0.05)
1549123039615:#   width  <- nAlleles * wFactor
1549123039617:#
1549123039620:#   loci     <- unique(data.to.plot$Locus)
1549123039622:#   lociList <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549123039624:#   lociList <- split(loci, ceiling(seq_along(loci)/3))
1549123039627:#   plotList <- list()
1549123039629:#   for (lociSet in lociList) {
1549123039632:#   	print(lociSet)
1549123039634:#   	subset.to.plot <- data.to.plot %>%
1549123039636:#   		filter(Locus %in% lociSet)
1549123039639:#   	labelsData <- getLabelsData(subset.to.plot)
1549123039641:#   	currentPlot <- plotDepth(subset.to.plot, labelsData, fillPalette, borderPalette)
1549123039643:#   	plotList <- c(plotList, list(currentPlot))
1549123039646:#   	# print(currentPlot)
1549123039648:#   	# print(unique(subset.to.plot$Locus))
1549123039651:#   }
1549123039654:#  	length(plotList)
1549123039657:#
1549123039660:#  	if (out.format == "pdf") {
1549123039663:#  		out.filename <- paste(out.prefix, out.format, sep = ".")
1549123039665:#  		pdf(out.filename)
1549123039667:#  		for (i in seq_along(plotList)) {
1549123039670:#  			nLociToPlot <- length(lociList[[i]])
1549123039673:#  			height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1549123039675:#  			width  <- nAlleles * wFactor
1549123039678:#  			# out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549123039681:#  			# print(out.filename)
1549123039683:#  			print(plotList[[i]])
1549123039686:#  		}
1549123039689:#  		dev.off()
1549123039691:#
1549123039694:#  	}
1549123039697:#  	for (i in seq_along(plotList)) {
1549123039699:#  		nLociToPlot <- length(lociList[[i]])
1549123039702:#  		height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1549123039705:#  		width  <- nAlleles * wFactor
1549123039708:#  		out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549123039711:#  		print(out.filename)
1549123039713:#  		pdf(out.filename, width = width, height = height)
1549123039716:#  		print(plotList[[i]])
1549123039719:#  		dev.off()
1549123039721:#  	}
1549123039724:#  	else if (out.format == "png") {
1549123039727:#  		ggsave(filename = out.filename, plot = depth.plot,
1549123039729:#  					 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549123039732:#  	} else {
1549123039735:#  		ggsave(filename = out.filename, plot = depth.plot,
1549123039737:#  					 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549123039740:#  	}
1549123039743:#
1549123039746:#  	plot_grid()
1549123039748:#  	# Generate plot
1549123039751:#   # (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549123039756:# =======
1549123039759:hFactor  <- 1.6
1549123039761:wFactor  <- 4.8
1549123039764:# if (nLoci == 1)
1549123039767:#   hFactor <- 1.4;
1549123039775:#               loci          titles and     strip    space between locus
1549123039778:#                             footnote
1549123039781:height <- (nLoci * hFactor) + 2              + 0.1    + ((nLoci-1)*0.05)
1549123039787:getPlotHeight <- function(rows){
1549123039789:# loci + titles and foot note + strip + space between locus
1549123039792:(rows*hFactor) + 2.39 + ((rows-1)*0.157) #in
1549123039795:}
1549123039800:width  <- nAlleles * wFactor
1549123039803:height <- getPlotHeight(nLoci)
1549123039806:rowsPerPage <- 5
1549123039809:loci <- unique(data.to.plot$Locus)
1549123039812:sets <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549123039817:plots <- lapply(sets, function(set, dp=data.to.plot, rp=rowsPerPage){
1549123039819:# set <- sets[[2]]
1549123039820:subsetToPlot <- dp %>% filter(Locus %in% set)
1549123039822:ld    <- getLabelsData(subsetToPlot)
1549123039824:(p    <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette))
1549123039826:nLoci <- length(set)
1549123039828:if(nLoci < rp & out.format == "pdf"){
1549123039830:# hlay    <- matrix(c(rep(1, nLoci), rep(NA, rp-nLoci)))
1549123039832:hlay    <- matrix(c(rep(1, nLoci), NA))
1549123039834:total   <- getPlotHeight(rp)
1549123039836:cHeight <- getPlotHeight(nLoci)
1549123039838:blank   <- getPlotHeight(rp-nLoci) - 2.39
1549123039840:# heights <- matrix(c(rep(1, nLoci), rep(1/rp+2, rp-nLoci)))
1549123039842:# heights <- matrix(c(rep(1, nLoci), 0.6))
1549123039844:heights <- matrix(c(1, blank/total))
1549123039846:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549123039848:# p       <- grid.arrange(p, layout_matrix = hlay, heights = unit(c(cHeight, blank), c("in", "in")))
1549123039849:print(str_glue("{total}, {cHeight}, {blank}"))
1549123039851:}
1549123039853:p
1549123039855:})
1549123039857:ml <- marrangeGrob(plots, nrow=1, ncol=1, #padding = unit(10, "mm"),
1549123039859:top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549123039860:ggsave(filename = "multipage.pdf", plot = ml,
1549123039862:width  = width, height = getPlotHeight(rowsPerPage), dpi = 400, limitsize = FALSE)
1549123039866:# Generate plot
1549123039868:labelsData <- getLabelsData(data.to.plot)
1549123039869:(depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549123039871:# >>>>>>> 64e9112fd081cc5c75caf0f7d0d03cd9f5ea18f4
1549123039873:# Save plot
1549123039875:out.filename <- paste0(out.prefix, ".", out.format)
1549123039877:if (out.format == "png") {
1549123039879:ggsave(filename = out.filename, plot = depth.plot,
1549123039881:width  = width, height = height, dpi = 300, limitsize = FALSE, type = "cairo-png")
1549123039883:} else {
1549123039885:ggsave(filename = out.filename, plot = depth.plot,
1549123039887:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549123039889:}
1549123039893:# Depth distribution plot ------------------------------------------------
1549123039895:hFactor  <- 3
1549123039896:wFactor  <- 2
1549123039898:if (nLoci == 1)
1549123039900:hFactor <- 3.5
1549123039902:height       <- nLoci * hFactor
1549123039905:width        <- nAlleles * wFactor
1549123039925:# Generate plot
1549123039927:(dist.plot <- plotDepthDist(data.to.plot, labelsData, fillPalette, borderPalette))
1549123039929:# Save plot
1549123039931:out.filename <- paste0(out.prefix, "_dist.", out.format)
1549123039933:if (out.format == "png") {
1549123039935:ggsave(filename = out.filename, plot = dist.plot,
1549123039937:width  = width, height = height, type = "cairo-png", dpi = 300)
1549123039939:} else {
1549123039941:ggsave(filename = out.filename, plot = dist.plot,
1549123039943:width  = width, height = height, dpi = 400)
1549123039945:}
1549123039947:cat("Done! \n")
1549123039951:# Code core - End ---------------------------------------------------------
1549123039953:}
1549123089520:5.747 + 5.114
1549123100276:11.018 - 11.018
1549123110599:11.018 - 11.018
1549123121496:11.018 - 10.861
1549123142937:#!/usr/bin/env Rscript
1549123142938:# ##############################################################################
1549123142938:#  Author:   Hector Fabio Espitia-Navarro
1549123142939:#            Georgia Institute of Technology
1549123142939:#  Version:  1.0
1549123142940:#  Date:     01/19/2019
1549123142941:# ##############################################################################
1549123142942:# Install required packages -----------------------------------------------
1549123142942:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549123142943:if(!file.exists(personal.lib.path))
1549123142943:dir.create(personal.lib.path)
1549123142944:printMessage <- function(message, verbose){
1549123142945:if(verbose)
1549123142945:cat(message)
1549123142946:}
1549123142946:# crayon::bold("Hola")
1549123142947:installAndLoadPackages <- function(pkg, verbose){
1549123142947:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1549123142948:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1549123142948:printMessage("Done!\n", verbose)
1549123142948:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549123142949:if (length(new.pkg)) {
1549123142949:printMessage("Installing new packages... ", verbose)
1549123142950:install.packages(new.pkg, dependencies = TRUE,
1549123142950:repos="http://cran.rstudio.com/",
1549123142951:lib = personal.lib.path)
1549123142951:printMessage("Done!\n", verbose)
1549123142952:}
1549123142952:printMessage("Loading required packages... ", verbose)
1549123142953:sapply(pkg, function(x){
1549123142953:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549123142953:})
1549123142954:printMessage("Done!\n", verbose)
1549123142954:}
1549123142955:# github.related.packages <- c("devtools", "Rcpp")
1549123142955:# packages <- c("argparser", "tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite")
1549123142956:packages <- c("tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite", "gridExtra")
1549123142956:# installAndLoadPackages(packages, verbose = TRUE)
1549123142957:installAndLoadPackages("argparser", verbose = FALSE)
1549123142999:# Command line arguments processing ---------------------------------------
1549123143000:# Get script name
1549123143000:initial.options <- commandArgs(trailingOnly = FALSE)
1549123143001:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1549123143002:# Process command line arguments
1549123143002:# Create a parser
1549123143002:p <- arg_parser("This script generates k-mer depth plots using a depth file generated by the\033[1mSTing typer\033[22m tool (-t option).",
1549123143003:name = script.name)
1549123143059:# Add Positional arguments (required)
1549123143060:p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
1549123143061:# Add options
1549123143062:p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1549123143064:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1549123143064:default = "kmer_depth")
1549123143066:p <- add_argument(p, "--sample_name", help = "Sample name.",
1549123143067:default = "input file's name")
1549123143068:p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'",
1549123143069:default = "pdf")
1549123143070:# Initialization of variables ---------------------------------------------
1549123143071:# Values to test the script using RStudio
1549123143071:script.home <- "/home/hspitia/projects/sting"
1549123143072:# inputFile   <- paste(script.home, "ERR036060.depth.2.tsv", sep = "/")
1549123143073:# geneFile    <- paste(script.home, "rmlst_failed_loci.txt", sep = "/")
1549123143073:inputFile   <- paste(script.home, "depth.tsv", sep = "/")
1549123143074:geneFile    <- paste(script.home, "loci.txt", sep = "/")
1549123143075:out.format  <- "pdf"
1549123143075:out.prefix  <- "kmer_ext_depth"
1549123143076:sample.name <- basename(inputFile)
1549123143077:# Parse command line arguments
1549123143077:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1549123143078:argv <- list()
1549123143079:if(command.line) {
1549123143079:argv <- parse_args(p)
1549123143080:} else {
1549123143080:argv <- parse_args(p, list(inputFile,
1549123143081:# "--gene_file", geneFile,
1549123143081:"--prefix", out.prefix,
1549123143082:"--sample_name", sample.name,
1549123143082:"--format", out.format))
1549123143083:}
1549123143085:# Get argument values from the command line
1549123143085:input.file  <- argv$input_file
1549123143086:gene.file   <- argv$gene_file
1549123143087:out.format  <- argv$format
1549123143087:out.prefix  <- argv$prefix
1549123143088:sample.name <- argv$sample_name
1549123143088:# if (sample.name == "")
1549123143089:if (sample.name == "input file's name")
1549123143089:sample.name <- basename(input.file)
1549123143089:# Function to check if file exists ----------------------------------------
1549123143090:CheckFileExists <- function(file.list) {
1549123143090:non.exist.files <- !file.exists(file.list)
1549123143090:if(any(non.exist.files)) {
1549123143091:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549123143091:}
1549123143091:}
1549123143092:# Check for input files ---------------------------------------------------
1549123143092:files.to.check <- c(input.file)
1549123143092:error.message  <- CheckFileExists(files.to.check)
1549123143093:if(!is.null(error.message)){
1549123143093:stop(error.message)
1549123143094:} else {
1549123143094:# Code core - Begin -------------------------------------------------------
1549123143094:installAndLoadPackages(packages, verbose = TRUE)
1549123143095:# FUNCTIONS:
1549123143095:# Function to dark a list of colors ---------------------------------------
1549123143096:darkColors <- function(palette, level){
1549123143096:rgbColors <- as.data.frame(t(as.data.frame(lapply(as.data.frame(t(col2rgb(palette))),
1549123143097:function(x) { round(x * level)}))))
1549123143097:unname(sapply(rgbColors, function(x){ rgb(x[1], x[2], x[3], maxColorValue=255) }))
1549123143098:}
1549123143098:# Function for plotting k-mer depth ----------------------------------------
1549123143098:plotDepth <- function(dataToPlot, labelsData, fillColors, borderColors) {
1549123143099:max.x       <- max(dataToPlot$Position)
1549123143099:max.y       <- max(dataToPlot$kmerDepth)
1549123143099:x.limits    <- seq(0, max.x, 100)
1549123143100:y.limits    <- seq(0, max.y, 20)
1549123143100:nTopAlleles <- length(unique(dataToPlot$N))
1549123143101:d.plot <- ggplot(data = dataToPlot, aes(x = Position, y = kmerDepth),
1549123143101:size = 0.2) +
1549123143102:geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1549123143102:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1549123143103:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1549123143103:# scale_color_manual(values = getPalette) +
1549123143103:scale_color_manual(values = borderColors) +
1549123143104:scale_fill_manual(values = fillColors) +
1549123143104:geom_text(data = labelsData,
1549123143105:# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1549123143105:# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1549123143106:aes(x = Length, y = info.y * 0.5, group = Locus,
1549123143106:hjust = 0,
1549123143107:label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1549123143107:show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1549123143108:nudge_x = -(max.x*0.025)
1549123143108:) +
1549123143109:geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1549123143109:alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1549123143110:# geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1549123143110:size = annotTextSize * 1.05, color = "#333333") +
1549123143111:geom_text(data = labelsData,
1549123143111:parse = TRUE,
1549123143112:aes(x = info.x, y = info.y,
1549123143112:label = paste0("{{{{italic(s)==", format(round(Score, 2), nsmall = 2),
1549123143113:"*~~~italic(hat(f)[k])} ==", format(round(NormKmerCount, 2), nsmall = 2),
1549123143113:"*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1549123143114:"*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1549123143114:"~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1549123143115:hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1549123143116:facet_grid(Locus ~ N, scales = "free_y") +
1549123143116:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1549123143117:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1549123143118:theme_bw() +
1549123143118:plotTheme +
1549123143119:labs(title    = expression(italic("k")*"-mer depth"),
1549123143119:subtitle = paste("Top", nTopAlleles, "alleles/genes on sample", sample.name),
1549123143120:x        = "Position along sequence (bp)",
1549123143121:y        = expression(paste(italic(k), "-mer depth")),
1549123143121:# caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1549123143123:caption  = expression(paste(italic("s"),": score;  ",
1549123143124:italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1549123143125:italic("c"),": coverage;  ",
1549123143127:italic(sigma), ": standard deviation;  ",
1549123143128:italic(bar(d)), ": average depth"), sep = "")
1549123143129:)
1549123143130:# guides(fill  = guide_legend(title  ="Allele"), color = FALSE) +
1549123143130:d.plot
1549123143131:}
1549123143132:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549123143132:# Function for plotting k-mer depth distributions as box plots ------------
1549123143133:plotDepthDist <- function(data.to.plot, labelsData, fillColors, borderColors){
1549123143134:dist.plot <- ggplot(data.to.plot, aes(x = AlPos, y = kmerDepth)) +
1549123143134:geom_jitter(position = position_jitter(width=.3), aes(color = Locus),
1549123143135:alpha = 0.4, size = 1.2, shape = 16) +
1549123143136:geom_boxplot(alpha = 0.7, size = 0.5, aes(fill = Locus, color = Locus)) +
1549123143140:geom_text(data = labelsData, size = 4, hjust = "center",
1549123143142:aes(x = N,#(N - 0.5),
1549123143143:y = info.y * 1.05,
1549123143144:label = Allele),
1549123143146:color = "#333333") +
1549123143147:geom_text(data = labelsData, size = 3, hjust = "center",
1549123143148:parse = TRUE,
1549123143149:aes(x = N,#(N - 0.4),
1549123143151:# y = info.y * 0.08,
1549123143152:y = info.y * 0.96,
1549123143153:label = paste0("sigma ==",format(round(sd, 1), nsmall = 1))),
1549123143155:color = "#333333") +
1549123143156:geom_point(data = labelsData,
1549123143157:shape = 23, fill = "white",
1549123143159:aes(x = N, y = meanDepth)) +
1549123143160:facet_grid(Locus ~ ., scales = "free_y") +
1549123143161:scale_color_manual(values = borderColors) +
1549123143163:scale_fill_manual(values = fillColors) +
1549123143164:labs(title = expression(paste(italic("k"), "-mer depth distribution")),
1549123143165:subtitle = basename(input.file),
1549123143167:x        = "Allele Ranking",
1549123143168:y        = expression(paste(italic(k), "-mer depth")),
1549123143170:caption  = expression(paste(italic(sigma), ": standard deviation")))+#,"sd: standard deviation") +
1549123143171:theme_bw() +
1549123143173:plotTheme +
1549123143174:theme(axis.text.x   = element_text(angle = 0, size = axisTextSize,
1549123143175:vjust = 1, hjust = 0.5, color = textColor))
1549123143177:dist.plot
1549123143178:}
1549123143180:# Function to get data for annotations ------------------------------------
1549123143182:getLabelsData <- function(data.to.plot) {
1549123143183:max.x <- max(data.to.plot$Position)
1549123143185:max.y <- max(data.to.plot$kmerDepth)
1549123143188:nLoci    <- length(unique(data.to.plot$Locus))
1549123143189:nAlleles <- length(unique(data.to.plot$N))
1549123143192:alleles     <- unique(data.to.plot$Allele)
1549123143194:loci        <- as.character(unique(data.to.plot$Locus))
1549123143195:lociLabels  <- c()
1549123143197:name.x      <- c()
1549123143198:name.y      <- c()
1549123143200:info.x      <- c()
1549123143201:info.y      <- c()
1549123143203:covs        <- c()
1549123143204:avgDepths   <- c()
1549123143206:meanDepth.x <- c()
1549123143207:meanDepth.y <- c()
1549123143209:for (i in loci) {
1549123143210:lociLabels <- c(lociLabels, rep(i, nAlleles))
1549123143212:}
1549123143213:for (allele in alleles) {
1549123143215:locus       <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1549123143217:maxPos      <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549123143218:maxDepth    <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549123143220:# name.x      <- c(name.x, (maxPos / 2))
1549123143222:name.x      <- c(name.x, (max.x / 2))
1549123143224:name.y      <- c(name.y, (maxDepth * 0.25))
1549123143225:info.x      <- c(info.x, max.x * 0.02)
1549123143227:info.y      <- c(info.y, maxDepth * 1.5)
1549123143228:covs        <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549123143230:avgDepths   <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549123143231:}
1549123143232:labelsData <- data.frame(Allele = alleles,
1549123143234:name.x = name.x,
1549123143236:name.y = name.y,
1549123143238:info.x = info.x,
1549123143239:info.y = info.y,
1549123143241:meanDepth = avgDepths,
1549123143243:N = rep(unique(data.to.plot$N), nLoci),
1549123143245:Locus = lociLabels,
1549123143247:cov = covs
1549123143249:) %>%
1549123143251:left_join(data.to.plot %>%
1549123143252:group_by(Allele, Length, NormKmerCount, Score) %>%
1549123143254:summarise(sd = sd(kmerDepth)),
1549123143255:by = c("Allele" = "Allele")) #%>%
1549123143256:# mutate(
1549123143258:#   info   = paste0("cov=", format(round(covs, 1), nsmall = 1), "%   ",
1549123143259:#                   paste0("ad=", format(round(avgDepths, 1), nsmall = 1)),
1549123143260:#                   "   ",
1549123143262:#                   # expression(paste(italic(sigma), "=",format(round(sd, 1), nsmall = 1))))
1549123143263:#                   paste0("sd=", format(round(sd, 1), nsmall = 1))
1549123143264:#   )
1549123143266:# )
1549123143267:labelsData
1549123143268:}
1549123143271:# Check for genes/loci file to filter loci to plot  -----------------------
1549123143273:loci.to.plot <- c()
1549123143274:# if (!is.null(gene.file)|| gene.file != "") {
1549123143275:if (!is.null(gene.file) && !is.na(gene.file) && gene.file != "") {
1549123143277:error.message <- CheckFileExists(gene.file)
1549123143280:if (!is.null(error.message)){
1549123143282:cat("Warning:")
1549123143284:cat(error.message)
1549123143286:cat("  The plotting process will continue without filtering genes/loci.\n")
1549123143288:} else {
1549123143290:loci.to.plot <- scan(gene.file, character(), quiet = TRUE)
1549123143292:}
1549123143295:}
1549123143299:# Data processing and plotting --------------------------------------------
1549123143301:cat("Plotting depths... ")
1549123143303:options(stringsAsFactors = T, readr.num_columns = 0)
1549123143307:# Load data
1549123143309:inData <- read_tsv(input.file)
1549123143311:# inData <- read.delim(input.file)
1549123143314:# colnames(inData) <- c("Allele", "Position", "k-mer Depth", "Weighted k-mer Depth")
1549123143316:colnames(inData) <- c("N", "Locus", "Allele", "Position", "kmerDepth",
1549123143318:"NormKmerCount", "Coverage", "Score", "AverageKmerDepth")
1549123143322:# Transform data
1549123143324:data.to.plot <- inData %>%
1549123143326:left_join(inData %>%
1549123143328:group_by(Allele) %>%
1549123143330:summarise(Length = n()), by = "Allele") %>%
1549123143332:arrange(Locus, N) %>%
1549123143334:mutate(
1549123143336:AlPos = factor(N, levels = unique(.$N)),
1549123143338:Allele = factor(Allele, levels = unique(inData$Allele)))
1549123143340:# Filtering loci/genes from genes_file input param
1549123143342:if (length(loci.to.plot) > 0) {
1549123143344:data.to.plot <- data.to.plot %>%
1549123143346:filter(Locus %in% loci.to.plot)
1549123143348:}
1549123143352:longestLocusNameLength <- max(str_length(as.character(unique(inData$Locus))))
1549123143354:# labelsData <- getLabelsData(data.to.plot)
1549123143356:nLoci      <- length(unique(data.to.plot$Locus))
1549123143358:nAlleles   <- length(unique(data.to.plot$N))
1549123143363:# Theme-related variable definition ---------------------------------------
1549123143365:annotLinetype         <- "solid"
1549123143367:annotTextSize         <- 4
1549123143370:axisColor             <- "#000000"
1549123143372:axisTextSize          <- 12
1549123143373:barAnnotTextSize      <- 4
1549123143375:baseTextSize          <- 14
1549123143376:gridColor             <- "#e0e0e0"
1549123143378:lineSize              <- 0.3
1549123143379:panelColor            <- "#fff4e0"
1549123143380:panelColor            <- "#f2efe6"
1549123143382:# panelColor            <- "#ffffff"
1549123143383:# stripBackground       <- "#cccccc"
1549123143385:stripTextSize         <- axisTextSize
1549123143386:if (longestLocusNameLength > 12)
1549123143387:stripTextSize       <- stripTextSize * 0.6
1549123143389:textColor             <- "#000000"
1549123143390:# baseFontFamily        <- "Arial"
1549123143393:# Custom theme definition for plots ---------------------------------------
1549123143395:plotTheme <- list(
1549123143396:theme(
1549123143398:axis.text.x      = element_text(angle = 50, size = axisTextSize,
1549123143399:vjust = 1, hjust = 1, color = textColor),
1549123143401:axis.text.y      = element_text(size = axisTextSize, color = textColor),
1549123143402:axis.ticks       = element_line(size = lineSize),
1549123143404:axis.title.x     = element_text(margin = margin(6,0,8,0, "mm")),
1549123143405:axis.title.y     = element_text(margin = margin(0,6,0,0, "mm")),
1549123143407:legend.position  = "none",
1549123143408:panel.border     = element_rect(size = lineSize),
1549123143411:panel.background = element_rect(fill = panelColor),
1549123143413:panel.grid       = element_line(size = lineSize, colour = gridColor),
1549123143415:panel.grid.minor = element_blank(),
1549123143418:plot.margin      = margin(10,10,0,10, "mm"),
1549123143420:panel.spacing    = unit(4, "mm"),
1549123143423:plot.caption     = element_text(size = baseTextSize * 0.7, face = "italic"),
1549123143425:plot.title       = element_text(hjust = 0.5),
1549123143428:plot.subtitle    = element_text(hjust = 0.5),
1549123143430:strip.background = element_rect(size = lineSize),
1549123143433:strip.text       = element_text(size = stripTextSize),
1549123143435:text             = element_text(size = baseTextSize)
1549123143438:)
1549123143440:)
1549123143445:# Palette definition ------------------------------------------------------
1549123143447:# colourCount <- length(unique(inData$Locus))
1549123143450:colourCount <- nLoci
1549123143452:# colourCount  <- length(unique(data.to.plot$Allele))
1549123143455:# fillPalette  <- colorRampPalette(brewer.pal(8, "Dark2"))(colourCount)
1549123143457:# fillPalette  <- colorRampPalette(brewer.pal(12, "Paired"))(colourCount)
1549123143460:# fillPalette  <- colorRampPalette(brewer.pal(9, "Set1"))(colourCount)
1549123143462:# fillPalette  <- colorRampPalette(pal_npg("nrc")(10))(colourCount)
1549123143465:# fillPalette  <- colorRampPalette(pal_d3("category20")(20))(colourCount)
1549123143467:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549123143471:borderPalette <- darkColors(fillPalette, 0.6)
1549123143473:# library("scales"); show_col(fillPalette); show_col(borderPalette)
1549123143484:# # Depth plot -------------------------------------------------------------
1549123143490:# hFactor  <- 1.2
1549123143492:# wFactor  <- 4.8
1549123143495:# # if (nLoci == 1)
1549123143498:# #   hFactor <- 1.4;
1549123143503:# height <- (nLoci * hFactor) + 2 + 0.1 + ((nLoci-1)*0.05)
1549123143505:# width  <- nAlleles * wFactor
1549123143508:# # Generate plot
1549123143509:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549123143511:# # Save plot
1549123143513:# out.filename <- paste0(out.prefix, ".", out.format)
1549123143515:# if (out.format == "png") {
1549123143517:# 	ggsave(filename = out.filename, plot = depth.plot,
1549123143519:# 				 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549123143521:# } else {
1549123143523:# 	ggsave(filename = out.filename, plot = depth.plot,
1549123143525:# 				 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549123143526:# }
1549123143530:# Depth plot -------------------------------------------------------------
1549123143532:# <<<<<<< HEAD
1549123143534:#   rowsPerPage <- 7
1549123143536:#   hFactor     <- 1.2
1549123143538:#   wFactor     <- 4.8
1549123143540:#   rows        <- nLoci
1549123143542:#   if (nLoci > rowsPerPage)
1549123143543:#     rows <- rowsPerPage;
1549123143547:#   height <- (rows * hFactor) + 2 + 0.1 + ((rows-1)*0.05)
1549123143548:#   width  <- nAlleles * wFactor
1549123143550:#
1549123143552:#   loci     <- unique(data.to.plot$Locus)
1549123143554:#   lociList <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549123143557:#   lociList <- split(loci, ceiling(seq_along(loci)/3))
1549123143560:#   plotList <- list()
1549123143562:#   for (lociSet in lociList) {
1549123143565:#   	print(lociSet)
1549123143568:#   	subset.to.plot <- data.to.plot %>%
1549123143571:#   		filter(Locus %in% lociSet)
1549123143573:#   	labelsData <- getLabelsData(subset.to.plot)
1549123143576:#   	currentPlot <- plotDepth(subset.to.plot, labelsData, fillPalette, borderPalette)
1549123143579:#   	plotList <- c(plotList, list(currentPlot))
1549123143582:#   	# print(currentPlot)
1549123143584:#   	# print(unique(subset.to.plot$Locus))
1549123143587:#   }
1549123143589:#  	length(plotList)
1549123143590:#
1549123143592:#  	if (out.format == "pdf") {
1549123143594:#  		out.filename <- paste(out.prefix, out.format, sep = ".")
1549123143595:#  		pdf(out.filename)
1549123143597:#  		for (i in seq_along(plotList)) {
1549123143599:#  			nLociToPlot <- length(lociList[[i]])
1549123143601:#  			height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1549123143602:#  			width  <- nAlleles * wFactor
1549123143604:#  			# out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549123143606:#  			# print(out.filename)
1549123143607:#  			print(plotList[[i]])
1549123143609:#  		}
1549123143610:#  		dev.off()
1549123143612:#
1549123143614:#  	}
1549123143615:#  	for (i in seq_along(plotList)) {
1549123143617:#  		nLociToPlot <- length(lociList[[i]])
1549123143619:#  		height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1549123143621:#  		width  <- nAlleles * wFactor
1549123143623:#  		out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549123143625:#  		print(out.filename)
1549123143627:#  		pdf(out.filename, width = width, height = height)
1549123143629:#  		print(plotList[[i]])
1549123143631:#  		dev.off()
1549123143633:#  	}
1549123143635:#  	else if (out.format == "png") {
1549123143637:#  		ggsave(filename = out.filename, plot = depth.plot,
1549123143639:#  					 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549123143641:#  	} else {
1549123143643:#  		ggsave(filename = out.filename, plot = depth.plot,
1549123143645:#  					 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549123143647:#  	}
1549123143648:#
1549123143650:#  	plot_grid()
1549123143652:#  	# Generate plot
1549123143654:#   # (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549123143657:# =======
1549123143659:hFactor  <- 1.6
1549123143661:wFactor  <- 4.8
1549123143662:# if (nLoci == 1)
1549123143664:#   hFactor <- 1.4;
1549123143670:#               loci          titles and     strip    space between locus
1549123143672:#                             footnote
1549123143673:height <- (nLoci * hFactor) + 2              + 0.1    + ((nLoci-1)*0.05)
1549123143677:getPlotHeight <- function(rows){
1549123143679:# loci + titles and foot note + strip + space between locus
1549123143680:(rows*hFactor) + 2.39 + ((rows-1)*0.157) #in
1549123143682:}
1549123143688:width  <- nAlleles * wFactor
1549123143690:height <- getPlotHeight(nLoci)
1549123143691:rowsPerPage <- 5
1549123143693:loci <- unique(data.to.plot$Locus)
1549123143695:sets <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549123143699:plots <- lapply(sets, function(set, dp=data.to.plot, rp=rowsPerPage){
1549123143701:# set <- sets[[2]]
1549123143703:subsetToPlot <- dp %>% filter(Locus %in% set)
1549123143705:ld    <- getLabelsData(subsetToPlot)
1549123143706:(p    <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette))
1549123143708:nLoci <- length(set)
1549123143710:if(nLoci < rp & out.format == "pdf"){
1549123143712:# hlay    <- matrix(c(rep(1, nLoci), rep(NA, rp-nLoci)))
1549123143715:hlay    <- matrix(c(rep(1, nLoci), NA))
1549123143717:total   <- getPlotHeight(rp)
1549123143719:cHeight <- getPlotHeight(nLoci)
1549123143722:blank   <- getPlotHeight(rp-nLoci) - 2.39
1549123143724:# heights <- matrix(c(rep(1, nLoci), rep(1/rp+2, rp-nLoci)))
1549123143726:# heights <- matrix(c(rep(1, nLoci), 0.6))
1549123143728:heights <- matrix(c(1, blank/total))
1549123143730:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549123143733:# p       <- grid.arrange(p, layout_matrix = hlay, heights = unit(c(cHeight, blank), c("in", "in")))
1549123143736:print(str_glue("{total}, {cHeight}, {blank}, {blank/total}"))
1549123143738:}
1549123143740:p
1549123143742:})
1549123143744:ml <- marrangeGrob(plots, nrow=1, ncol=1, #padding = unit(10, "mm"),
1549123143746:top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549123143748:ggsave(filename = "multipage.pdf", plot = ml,
1549123143750:width  = width, height = getPlotHeight(rowsPerPage), dpi = 400, limitsize = FALSE)
1549123143754:# Generate plot
1549123143756:labelsData <- getLabelsData(data.to.plot)
1549123143758:(depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549123143760:# >>>>>>> 64e9112fd081cc5c75caf0f7d0d03cd9f5ea18f4
1549123143762:# Save plot
1549123143764:out.filename <- paste0(out.prefix, ".", out.format)
1549123143767:if (out.format == "png") {
1549123143769:ggsave(filename = out.filename, plot = depth.plot,
1549123143772:width  = width, height = height, dpi = 300, limitsize = FALSE, type = "cairo-png")
1549123143774:} else {
1549123143777:ggsave(filename = out.filename, plot = depth.plot,
1549123143780:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549123143783:}
1549123143800:# Depth distribution plot ------------------------------------------------
1549123143803:hFactor  <- 3
1549123143806:wFactor  <- 2
1549123143809:if (nLoci == 1)
1549123143812:hFactor <- 3.5
1549123143815:height       <- nLoci * hFactor
1549123143818:width        <- nAlleles * wFactor
1549123143821:# Generate plot
1549123143824:(dist.plot <- plotDepthDist(data.to.plot, labelsData, fillPalette, borderPalette))
1549123143827:# Save plot
1549123143830:out.filename <- paste0(out.prefix, "_dist.", out.format)
1549123143836:if (out.format == "png") {
1549123143839:ggsave(filename = out.filename, plot = dist.plot,
1549123143842:width  = width, height = height, type = "cairo-png", dpi = 300)
1549123143845:} else {
1549123143849:ggsave(filename = out.filename, plot = dist.plot,
1549123143851:width  = width, height = height, dpi = 400)
1549123143853:}
1549123143855:cat("Done! \n")
1549123143860:# Code core - End ---------------------------------------------------------
1549123143862:}
1549123199294:#!/usr/bin/env Rscript
1549123199294:# ##############################################################################
1549123199294:#  Author:   Hector Fabio Espitia-Navarro
1549123199295:#            Georgia Institute of Technology
1549123199295:#  Version:  1.0
1549123199295:#  Date:     01/19/2019
1549123199295:# ##############################################################################
1549123199296:# Install required packages -----------------------------------------------
1549123199296:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549123199297:if(!file.exists(personal.lib.path))
1549123199297:dir.create(personal.lib.path)
1549123199298:printMessage <- function(message, verbose){
1549123199298:if(verbose)
1549123199299:cat(message)
1549123199299:}
1549123199300:# crayon::bold("Hola")
1549123199300:installAndLoadPackages <- function(pkg, verbose){
1549123199300:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1549123199301:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1549123199301:printMessage("Done!\n", verbose)
1549123199301:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549123199302:if (length(new.pkg)) {
1549123199302:printMessage("Installing new packages... ", verbose)
1549123199303:install.packages(new.pkg, dependencies = TRUE,
1549123199303:repos="http://cran.rstudio.com/",
1549123199303:lib = personal.lib.path)
1549123199306:printMessage("Done!\n", verbose)
1549123199307:}
1549123199308:printMessage("Loading required packages... ", verbose)
1549123199308:sapply(pkg, function(x){
1549123199309:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549123199310:})
1549123199310:printMessage("Done!\n", verbose)
1549123199311:}
1549123199311:# github.related.packages <- c("devtools", "Rcpp")
1549123199312:# packages <- c("argparser", "tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite")
1549123199312:packages <- c("tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite", "gridExtra")
1549123199313:# installAndLoadPackages(packages, verbose = TRUE)
1549123199313:installAndLoadPackages("argparser", verbose = FALSE)
1549123199355:# Command line arguments processing ---------------------------------------
1549123199355:# Get script name
1549123199356:initial.options <- commandArgs(trailingOnly = FALSE)
1549123199357:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1549123199357:# Process command line arguments
1549123199358:# Create a parser
1549123199358:p <- arg_parser("This script generates k-mer depth plots using a depth file generated by the\033[1mSTing typer\033[22m tool (-t option).",
1549123199359:name = script.name)
1549123199362:# Add Positional arguments (required)
1549123199362:p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
1549123199364:# Add options
1549123199364:p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1549123199366:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1549123199366:default = "kmer_depth")
1549123199368:p <- add_argument(p, "--sample_name", help = "Sample name.",
1549123199368:default = "input file's name")
1549123199370:p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'",
1549123199370:default = "pdf")
1549123199372:# Initialization of variables ---------------------------------------------
1549123199373:# Values to test the script using RStudio
1549123199373:script.home <- "/home/hspitia/projects/sting"
1549123199374:# inputFile   <- paste(script.home, "ERR036060.depth.2.tsv", sep = "/")
1549123199374:# geneFile    <- paste(script.home, "rmlst_failed_loci.txt", sep = "/")
1549123199375:inputFile   <- paste(script.home, "depth.tsv", sep = "/")
1549123199375:geneFile    <- paste(script.home, "loci.txt", sep = "/")
1549123199376:out.format  <- "pdf"
1549123199377:out.prefix  <- "kmer_ext_depth"
1549123199378:sample.name <- basename(inputFile)
1549123199378:# Parse command line arguments
1549123199379:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1549123199380:argv <- list()
1549123199380:if(command.line) {
1549123199381:argv <- parse_args(p)
1549123199381:} else {
1549123199382:argv <- parse_args(p, list(inputFile,
1549123199382:# "--gene_file", geneFile,
1549123199383:"--prefix", out.prefix,
1549123199383:"--sample_name", sample.name,
1549123199384:"--format", out.format))
1549123199384:}
1549123199386:# Get argument values from the command line
1549123199387:input.file  <- argv$input_file
1549123199388:gene.file   <- argv$gene_file
1549123199388:out.format  <- argv$format
1549123199389:out.prefix  <- argv$prefix
1549123199390:sample.name <- argv$sample_name
1549123199391:# if (sample.name == "")
1549123199391:if (sample.name == "input file's name")
1549123199392:sample.name <- basename(input.file)
1549123199393:# Function to check if file exists ----------------------------------------
1549123199394:CheckFileExists <- function(file.list) {
1549123199394:non.exist.files <- !file.exists(file.list)
1549123199395:if(any(non.exist.files)) {
1549123199395:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549123199395:}
1549123199396:}
1549123199397:# Check for input files ---------------------------------------------------
1549123199397:files.to.check <- c(input.file)
1549123199398:error.message  <- CheckFileExists(files.to.check)
1549123199399:if(!is.null(error.message)){
1549123199400:stop(error.message)
1549123199400:} else {
1549123199400:# Code core - Begin -------------------------------------------------------
1549123199401:installAndLoadPackages(packages, verbose = TRUE)
1549123199401:# FUNCTIONS:
1549123199402:# Function to dark a list of colors ---------------------------------------
1549123199402:darkColors <- function(palette, level){
1549123199403:rgbColors <- as.data.frame(t(as.data.frame(lapply(as.data.frame(t(col2rgb(palette))),
1549123199403:function(x) { round(x * level)}))))
1549123199404:unname(sapply(rgbColors, function(x){ rgb(x[1], x[2], x[3], maxColorValue=255) }))
1549123199404:}
1549123199405:# Function for plotting k-mer depth ----------------------------------------
1549123199405:plotDepth <- function(dataToPlot, labelsData, fillColors, borderColors) {
1549123199405:max.x       <- max(dataToPlot$Position)
1549123199406:max.y       <- max(dataToPlot$kmerDepth)
1549123199406:x.limits    <- seq(0, max.x, 100)
1549123199407:y.limits    <- seq(0, max.y, 20)
1549123199407:nTopAlleles <- length(unique(dataToPlot$N))
1549123199408:d.plot <- ggplot(data = dataToPlot, aes(x = Position, y = kmerDepth),
1549123199408:size = 0.2) +
1549123199408:geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1549123199409:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1549123199409:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1549123199410:# scale_color_manual(values = getPalette) +
1549123199410:scale_color_manual(values = borderColors) +
1549123199411:scale_fill_manual(values = fillColors) +
1549123199411:geom_text(data = labelsData,
1549123199412:# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1549123199412:# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1549123199413:aes(x = Length, y = info.y * 0.5, group = Locus,
1549123199413:hjust = 0,
1549123199413:label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1549123199414:show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1549123199414:nudge_x = -(max.x*0.025)
1549123199415:) +
1549123199415:geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1549123199416:alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1549123199416:# geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1549123199417:size = annotTextSize * 1.05, color = "#333333") +
1549123199417:geom_text(data = labelsData,
1549123199418:parse = TRUE,
1549123199419:aes(x = info.x, y = info.y,
1549123199419:label = paste0("{{{{italic(s)==", format(round(Score, 2), nsmall = 2),
1549123199420:"*~~~italic(hat(f)[k])} ==", format(round(NormKmerCount, 2), nsmall = 2),
1549123199420:"*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1549123199421:"*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1549123199421:"~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1549123199422:hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1549123199423:facet_grid(Locus ~ N, scales = "free_y") +
1549123199423:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1549123199424:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1549123199425:theme_bw() +
1549123199425:plotTheme +
1549123199426:labs(title    = expression(italic("k")*"-mer depth"),
1549123199427:subtitle = paste("Top", nTopAlleles, "alleles/genes on sample", sample.name),
1549123199427:x        = "Position along sequence (bp)",
1549123199428:y        = expression(paste(italic(k), "-mer depth")),
1549123199429:# caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1549123199430:caption  = expression(paste(italic("s"),": score;  ",
1549123199432:italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1549123199434:italic("c"),": coverage;  ",
1549123199436:italic(sigma), ": standard deviation;  ",
1549123199438:italic(bar(d)), ": average depth"), sep = "")
1549123199439:)
1549123199441:# guides(fill  = guide_legend(title  ="Allele"), color = FALSE) +
1549123199442:d.plot
1549123199443:}
1549123199444:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549123199445:# Function for plotting k-mer depth distributions as box plots ------------
1549123199446:plotDepthDist <- function(data.to.plot, labelsData, fillColors, borderColors){
1549123199447:dist.plot <- ggplot(data.to.plot, aes(x = AlPos, y = kmerDepth)) +
1549123199449:geom_jitter(position = position_jitter(width=.3), aes(color = Locus),
1549123199450:alpha = 0.4, size = 1.2, shape = 16) +
1549123199451:geom_boxplot(alpha = 0.7, size = 0.5, aes(fill = Locus, color = Locus)) +
1549123199452:geom_text(data = labelsData, size = 4, hjust = "center",
1549123199453:aes(x = N,#(N - 0.5),
1549123199455:y = info.y * 1.05,
1549123199456:label = Allele),
1549123199457:color = "#333333") +
1549123199459:geom_text(data = labelsData, size = 3, hjust = "center",
1549123199460:parse = TRUE,
1549123199461:aes(x = N,#(N - 0.4),
1549123199462:# y = info.y * 0.08,
1549123199464:y = info.y * 0.96,
1549123199465:label = paste0("sigma ==",format(round(sd, 1), nsmall = 1))),
1549123199466:color = "#333333") +
1549123199468:geom_point(data = labelsData,
1549123199469:shape = 23, fill = "white",
1549123199470:aes(x = N, y = meanDepth)) +
1549123199472:facet_grid(Locus ~ ., scales = "free_y") +
1549123199473:scale_color_manual(values = borderColors) +
1549123199474:scale_fill_manual(values = fillColors) +
1549123199475:labs(title = expression(paste(italic("k"), "-mer depth distribution")),
1549123199476:subtitle = basename(input.file),
1549123199477:x        = "Allele Ranking",
1549123199478:y        = expression(paste(italic(k), "-mer depth")),
1549123199479:caption  = expression(paste(italic(sigma), ": standard deviation")))+#,"sd: standard deviation") +
1549123199480:theme_bw() +
1549123199480:plotTheme +
1549123199481:theme(axis.text.x   = element_text(angle = 0, size = axisTextSize,
1549123199482:vjust = 1, hjust = 0.5, color = textColor))
1549123199483:dist.plot
1549123199484:}
1549123199485:# Function to get data for annotations ------------------------------------
1549123199486:getLabelsData <- function(data.to.plot) {
1549123199487:max.x <- max(data.to.plot$Position)
1549123199488:max.y <- max(data.to.plot$kmerDepth)
1549123199490:nLoci    <- length(unique(data.to.plot$Locus))
1549123199490:nAlleles <- length(unique(data.to.plot$N))
1549123199492:alleles     <- unique(data.to.plot$Allele)
1549123199493:loci        <- as.character(unique(data.to.plot$Locus))
1549123199494:lociLabels  <- c()
1549123199495:name.x      <- c()
1549123199496:name.y      <- c()
1549123199497:info.x      <- c()
1549123199498:info.y      <- c()
1549123199499:covs        <- c()
1549123199500:avgDepths   <- c()
1549123199501:meanDepth.x <- c()
1549123199502:meanDepth.y <- c()
1549123199504:for (i in loci) {
1549123199505:lociLabels <- c(lociLabels, rep(i, nAlleles))
1549123199506:}
1549123199508:for (allele in alleles) {
1549123199509:locus       <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1549123199510:maxPos      <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549123199511:maxDepth    <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549123199512:# name.x      <- c(name.x, (maxPos / 2))
1549123199513:name.x      <- c(name.x, (max.x / 2))
1549123199514:name.y      <- c(name.y, (maxDepth * 0.25))
1549123199516:info.x      <- c(info.x, max.x * 0.02)
1549123199517:info.y      <- c(info.y, maxDepth * 1.5)
1549123199518:covs        <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549123199519:avgDepths   <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549123199520:}
1549123199522:labelsData <- data.frame(Allele = alleles,
1549123199523:name.x = name.x,
1549123199524:name.y = name.y,
1549123199525:info.x = info.x,
1549123199526:info.y = info.y,
1549123199528:meanDepth = avgDepths,
1549123199529:N = rep(unique(data.to.plot$N), nLoci),
1549123199530:Locus = lociLabels,
1549123199532:cov = covs
1549123199533:) %>%
1549123199534:left_join(data.to.plot %>%
1549123199536:group_by(Allele, Length, NormKmerCount, Score) %>%
1549123199537:summarise(sd = sd(kmerDepth)),
1549123199538:by = c("Allele" = "Allele")) #%>%
1549123199539:# mutate(
1549123199541:#   info   = paste0("cov=", format(round(covs, 1), nsmall = 1), "%   ",
1549123199543:#                   paste0("ad=", format(round(avgDepths, 1), nsmall = 1)),
1549123199544:#                   "   ",
1549123199546:#                   # expression(paste(italic(sigma), "=",format(round(sd, 1), nsmall = 1))))
1549123199547:#                   paste0("sd=", format(round(sd, 1), nsmall = 1))
1549123199548:#   )
1549123199550:# )
1549123199551:labelsData
1549123199553:}
1549123199555:# Check for genes/loci file to filter loci to plot  -----------------------
1549123199556:loci.to.plot <- c()
1549123199557:# if (!is.null(gene.file)|| gene.file != "") {
1549123199559:if (!is.null(gene.file) && !is.na(gene.file) && gene.file != "") {
1549123199560:error.message <- CheckFileExists(gene.file)
1549123199561:if (!is.null(error.message)){
1549123199562:cat("Warning:")
1549123199563:cat(error.message)
1549123199565:cat("  The plotting process will continue without filtering genes/loci.\n")
1549123199566:} else {
1549123199567:loci.to.plot <- scan(gene.file, character(), quiet = TRUE)
1549123199569:}
1549123199570:}
1549123199572:# Data processing and plotting --------------------------------------------
1549123199574:cat("Plotting depths... ")
1549123199577:options(stringsAsFactors = T, readr.num_columns = 0)
1549123199580:# Load data
1549123199581:inData <- read_tsv(input.file)
1549123199582:# inData <- read.delim(input.file)
1549123199585:# colnames(inData) <- c("Allele", "Position", "k-mer Depth", "Weighted k-mer Depth")
1549123199586:colnames(inData) <- c("N", "Locus", "Allele", "Position", "kmerDepth",
1549123199587:"NormKmerCount", "Coverage", "Score", "AverageKmerDepth")
1549123199589:# Transform data
1549123199591:data.to.plot <- inData %>%
1549123199592:left_join(inData %>%
1549123199593:group_by(Allele) %>%
1549123199594:summarise(Length = n()), by = "Allele") %>%
1549123199597:arrange(Locus, N) %>%
1549123199599:mutate(
1549123199601:AlPos = factor(N, levels = unique(.$N)),
1549123199603:Allele = factor(Allele, levels = unique(inData$Allele)))
1549123199605:# Filtering loci/genes from genes_file input param
1549123199607:if (length(loci.to.plot) > 0) {
1549123199609:data.to.plot <- data.to.plot %>%
1549123199612:filter(Locus %in% loci.to.plot)
1549123199614:}
1549123199618:longestLocusNameLength <- max(str_length(as.character(unique(inData$Locus))))
1549123199620:# labelsData <- getLabelsData(data.to.plot)
1549123199622:nLoci      <- length(unique(data.to.plot$Locus))
1549123199624:nAlleles   <- length(unique(data.to.plot$N))
1549123199629:# Theme-related variable definition ---------------------------------------
1549123199631:annotLinetype         <- "solid"
1549123199633:annotTextSize         <- 4
1549123199635:axisColor             <- "#000000"
1549123199637:axisTextSize          <- 12
1549123199639:barAnnotTextSize      <- 4
1549123199641:baseTextSize          <- 14
1549123199644:gridColor             <- "#e0e0e0"
1549123199646:lineSize              <- 0.3
1549123199648:panelColor            <- "#fff4e0"
1549123199650:panelColor            <- "#f2efe6"
1549123199652:# panelColor            <- "#ffffff"
1549123199653:# stripBackground       <- "#cccccc"
1549123199655:stripTextSize         <- axisTextSize
1549123199656:if (longestLocusNameLength > 12)
1549123199658:stripTextSize       <- stripTextSize * 0.6
1549123199659:textColor             <- "#000000"
1549123199661:# baseFontFamily        <- "Arial"
1549123199664:# Custom theme definition for plots ---------------------------------------
1549123199665:plotTheme <- list(
1549123199667:theme(
1549123199668:axis.text.x      = element_text(angle = 50, size = axisTextSize,
1549123199669:vjust = 1, hjust = 1, color = textColor),
1549123199671:axis.text.y      = element_text(size = axisTextSize, color = textColor),
1549123199672:axis.ticks       = element_line(size = lineSize),
1549123199674:axis.title.x     = element_text(margin = margin(6,0,8,0, "mm")),
1549123199675:axis.title.y     = element_text(margin = margin(0,6,0,0, "mm")),
1549123199677:legend.position  = "none",
1549123199679:panel.border     = element_rect(size = lineSize),
1549123199680:panel.background = element_rect(fill = panelColor),
1549123199682:panel.grid       = element_line(size = lineSize, colour = gridColor),
1549123199684:panel.grid.minor = element_blank(),
1549123199686:plot.margin      = margin(10,10,0,10, "mm"),
1549123199687:panel.spacing    = unit(4, "mm"),
1549123199689:plot.caption     = element_text(size = baseTextSize * 0.7, face = "italic"),
1549123199691:plot.title       = element_text(hjust = 0.5),
1549123199693:plot.subtitle    = element_text(hjust = 0.5),
1549123199695:strip.background = element_rect(size = lineSize),
1549123199697:strip.text       = element_text(size = stripTextSize),
1549123199698:text             = element_text(size = baseTextSize)
1549123199700:)
1549123199702:)
1549123199707:# Palette definition ------------------------------------------------------
1549123199710:# colourCount <- length(unique(inData$Locus))
1549123199713:colourCount <- nLoci
1549123199715:# colourCount  <- length(unique(data.to.plot$Allele))
1549123199718:# fillPalette  <- colorRampPalette(brewer.pal(8, "Dark2"))(colourCount)
1549123199721:# fillPalette  <- colorRampPalette(brewer.pal(12, "Paired"))(colourCount)
1549123199724:# fillPalette  <- colorRampPalette(brewer.pal(9, "Set1"))(colourCount)
1549123199727:# fillPalette  <- colorRampPalette(pal_npg("nrc")(10))(colourCount)
1549123199730:# fillPalette  <- colorRampPalette(pal_d3("category20")(20))(colourCount)
1549123199732:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549123199735:borderPalette <- darkColors(fillPalette, 0.6)
1549123199737:# library("scales"); show_col(fillPalette); show_col(borderPalette)
1549123199746:# # Depth plot -------------------------------------------------------------
1549123199749:# hFactor  <- 1.2
1549123199752:# wFactor  <- 4.8
1549123199754:# # if (nLoci == 1)
1549123199757:# #   hFactor <- 1.4;
1549123199762:# height <- (nLoci * hFactor) + 2 + 0.1 + ((nLoci-1)*0.05)
1549123199765:# width  <- nAlleles * wFactor
1549123199768:# # Generate plot
1549123199770:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549123199773:# # Save plot
1549123199776:# out.filename <- paste0(out.prefix, ".", out.format)
1549123199779:# if (out.format == "png") {
1549123199781:# 	ggsave(filename = out.filename, plot = depth.plot,
1549123199784:# 				 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549123199786:# } else {
1549123199788:# 	ggsave(filename = out.filename, plot = depth.plot,
1549123199791:# 				 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549123199793:# }
1549123199798:# Depth plot -------------------------------------------------------------
1549123199800:# <<<<<<< HEAD
1549123199803:#   rowsPerPage <- 7
1549123199805:#   hFactor     <- 1.2
1549123199808:#   wFactor     <- 4.8
1549123199810:#   rows        <- nLoci
1549123199813:#   if (nLoci > rowsPerPage)
1549123199815:#     rows <- rowsPerPage;
1549123199820:#   height <- (rows * hFactor) + 2 + 0.1 + ((rows-1)*0.05)
1549123199823:#   width  <- nAlleles * wFactor
1549123199825:#
1549123199828:#   loci     <- unique(data.to.plot$Locus)
1549123199830:#   lociList <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549123199833:#   lociList <- split(loci, ceiling(seq_along(loci)/3))
1549123199835:#   plotList <- list()
1549123199838:#   for (lociSet in lociList) {
1549123199840:#   	print(lociSet)
1549123199843:#   	subset.to.plot <- data.to.plot %>%
1549123199845:#   		filter(Locus %in% lociSet)
1549123199848:#   	labelsData <- getLabelsData(subset.to.plot)
1549123199850:#   	currentPlot <- plotDepth(subset.to.plot, labelsData, fillPalette, borderPalette)
1549123199852:#   	plotList <- c(plotList, list(currentPlot))
1549123199854:#   	# print(currentPlot)
1549123199856:#   	# print(unique(subset.to.plot$Locus))
1549123199858:#   }
1549123199860:#  	length(plotList)
1549123199861:#
1549123199863:#  	if (out.format == "pdf") {
1549123199865:#  		out.filename <- paste(out.prefix, out.format, sep = ".")
1549123199866:#  		pdf(out.filename)
1549123199868:#  		for (i in seq_along(plotList)) {
1549123199870:#  			nLociToPlot <- length(lociList[[i]])
1549123199871:#  			height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1549123199873:#  			width  <- nAlleles * wFactor
1549123199875:#  			# out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549123199876:#  			# print(out.filename)
1549123199878:#  			print(plotList[[i]])
1549123199879:#  		}
1549123199881:#  		dev.off()
1549123199883:#
1549123199884:#  	}
1549123199886:#  	for (i in seq_along(plotList)) {
1549123199888:#  		nLociToPlot <- length(lociList[[i]])
1549123199889:#  		height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1549123199891:#  		width  <- nAlleles * wFactor
1549123199893:#  		out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549123199895:#  		print(out.filename)
1549123199897:#  		pdf(out.filename, width = width, height = height)
1549123199899:#  		print(plotList[[i]])
1549123199900:#  		dev.off()
1549123199902:#  	}
1549123199904:#  	else if (out.format == "png") {
1549123199906:#  		ggsave(filename = out.filename, plot = depth.plot,
1549123199908:#  					 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549123199910:#  	} else {
1549123199912:#  		ggsave(filename = out.filename, plot = depth.plot,
1549123199914:#  					 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549123199916:#  	}
1549123199917:#
1549123199919:#  	plot_grid()
1549123199926:#  	# Generate plot
1549123199928:#   # (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549123199934:# =======
1549123199937:hFactor  <- 1.6
1549123199939:wFactor  <- 4.8
1549123199942:# if (nLoci == 1)
1549123199945:#   hFactor <- 1.4;
1549123199952:#               loci          titles and     strip    space between locus
1549123199955:#                             footnote
1549123199958:height <- (nLoci * hFactor) + 2              + 0.1    + ((nLoci-1)*0.05)
1549123199963:getPlotHeight <- function(rows){
1549123199965:# loci + titles and foot note + strip + space between locus
1549123199968:(rows*hFactor) + 2.39 + ((rows-1)*0.157) #in
1549123199969:}
1549123199972:width  <- nAlleles * wFactor
1549123199974:height <- getPlotHeight(nLoci)
1549123199976:rowsPerPage <- 5
1549123199977:loci <- unique(data.to.plot$Locus)
1549123199979:sets <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549123199983:plots <- lapply(sets, function(set, dp=data.to.plot, rp=rowsPerPage){
1549123199985:# set <- sets[[2]]
1549123199986:subsetToPlot <- dp %>% filter(Locus %in% set)
1549123199988:ld    <- getLabelsData(subsetToPlot)
1549123199990:(p    <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette))
1549123199991:nLoci <- length(set)
1549123199993:if(nLoci < rp & out.format == "pdf"){
1549123199995:# hlay    <- matrix(c(rep(1, nLoci), rep(NA, rp-nLoci)))
1549123199997:hlay    <- matrix(c(rep(1, nLoci), NA))
1549123199998:total   <- getPlotHeight(rp)
1549123200001:cHeight <- getPlotHeight(nLoci)
1549123200003:blank   <- getPlotHeight(rp-nLoci) - 2.39
1549123200006:# heights <- matrix(c(rep(1, nLoci), rep(1/rp+2, rp-nLoci)))
1549123200010:# heights <- matrix(c(rep(1, nLoci), 0.6))
1549123200012:heights <- matrix(c(1, 0.6))
1549123200014:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549123200016:# p       <- grid.arrange(p, layout_matrix = hlay, heights = unit(c(cHeight, blank), c("in", "in")))
1549123200018:print(str_glue("{total}, {cHeight}, {blank}, {blank/total}"))
1549123200020:}
1549123200022:p
1549123200024:})
1549123200025:ml <- marrangeGrob(plots, nrow=1, ncol=1, #padding = unit(10, "mm"),
1549123200027:top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549123200029:ggsave(filename = "multipage.pdf", plot = ml,
1549123200031:width  = width, height = getPlotHeight(rowsPerPage), dpi = 400, limitsize = FALSE)
1549123200035:# Generate plot
1549123200037:labelsData <- getLabelsData(data.to.plot)
1549123200038:(depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549123200040:# >>>>>>> 64e9112fd081cc5c75caf0f7d0d03cd9f5ea18f4
1549123200042:# Save plot
1549123200044:out.filename <- paste0(out.prefix, ".", out.format)
1549123200046:if (out.format == "png") {
1549123200048:ggsave(filename = out.filename, plot = depth.plot,
1549123200050:width  = width, height = height, dpi = 300, limitsize = FALSE, type = "cairo-png")
1549123200052:} else {
1549123200054:ggsave(filename = out.filename, plot = depth.plot,
1549123200056:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549123200058:}
1549123200061:# Depth distribution plot ------------------------------------------------
1549123200063:hFactor  <- 3
1549123200065:wFactor  <- 2
1549123200067:if (nLoci == 1)
1549123200069:hFactor <- 3.5
1549123200071:height       <- nLoci * hFactor
1549123200073:width        <- nAlleles * wFactor
1549123200076:# Generate plot
1549123200079:(dist.plot <- plotDepthDist(data.to.plot, labelsData, fillPalette, borderPalette))
1549123200082:# Save plot
1549123200085:out.filename <- paste0(out.prefix, "_dist.", out.format)
1549123200088:if (out.format == "png") {
1549123200092:ggsave(filename = out.filename, plot = dist.plot,
1549123200095:width  = width, height = height, type = "cairo-png", dpi = 300)
1549123200098:} else {
1549123200101:ggsave(filename = out.filename, plot = dist.plot,
1549123200105:width  = width, height = height, dpi = 400)
1549123200108:}
1549123200111:cat("Done! \n")
1549123200118:# Code core - End ---------------------------------------------------------
1549123200121:}
1549123234312:#!/usr/bin/env Rscript
1549123234313:# ##############################################################################
1549123234313:#  Author:   Hector Fabio Espitia-Navarro
1549123234313:#            Georgia Institute of Technology
1549123234314:#  Version:  1.0
1549123234314:#  Date:     01/19/2019
1549123234314:# ##############################################################################
1549123234315:# Install required packages -----------------------------------------------
1549123234315:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549123234316:if(!file.exists(personal.lib.path))
1549123234316:dir.create(personal.lib.path)
1549123234317:printMessage <- function(message, verbose){
1549123234317:if(verbose)
1549123234317:cat(message)
1549123234318:}
1549123234319:# crayon::bold("Hola")
1549123234319:installAndLoadPackages <- function(pkg, verbose){
1549123234320:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1549123234320:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1549123234321:printMessage("Done!\n", verbose)
1549123234321:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549123234321:if (length(new.pkg)) {
1549123234322:printMessage("Installing new packages... ", verbose)
1549123234322:install.packages(new.pkg, dependencies = TRUE,
1549123234323:repos="http://cran.rstudio.com/",
1549123234323:lib = personal.lib.path)
1549123234324:printMessage("Done!\n", verbose)
1549123234324:}
1549123234324:printMessage("Loading required packages... ", verbose)
1549123234325:sapply(pkg, function(x){
1549123234325:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549123234325:})
1549123234326:printMessage("Done!\n", verbose)
1549123234326:}
1549123234327:# github.related.packages <- c("devtools", "Rcpp")
1549123234327:# packages <- c("argparser", "tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite")
1549123234327:packages <- c("tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite", "gridExtra")
1549123234328:# installAndLoadPackages(packages, verbose = TRUE)
1549123234328:installAndLoadPackages("argparser", verbose = FALSE)
1549123234365:# Command line arguments processing ---------------------------------------
1549123234366:# Get script name
1549123234366:initial.options <- commandArgs(trailingOnly = FALSE)
1549123234367:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1549123234367:# Process command line arguments
1549123234367:# Create a parser
1549123234368:p <- arg_parser("This script generates k-mer depth plots using a depth file generated by the\033[1mSTing typer\033[22m tool (-t option).",
1549123234368:name = script.name)
1549123234369:# Add Positional arguments (required)
1549123234370:p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
1549123234371:# Add options
1549123234371:p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1549123234372:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1549123234372:default = "kmer_depth")
1549123234373:p <- add_argument(p, "--sample_name", help = "Sample name.",
1549123234373:default = "input file's name")
1549123234374:p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'",
1549123234375:default = "pdf")
1549123234375:# Initialization of variables ---------------------------------------------
1549123234376:# Values to test the script using RStudio
1549123234376:script.home <- "/home/hspitia/projects/sting"
1549123234376:# inputFile   <- paste(script.home, "ERR036060.depth.2.tsv", sep = "/")
1549123234377:# geneFile    <- paste(script.home, "rmlst_failed_loci.txt", sep = "/")
1549123234377:inputFile   <- paste(script.home, "depth.tsv", sep = "/")
1549123234377:geneFile    <- paste(script.home, "loci.txt", sep = "/")
1549123234378:out.format  <- "pdf"
1549123234378:out.prefix  <- "kmer_ext_depth"
1549123234379:sample.name <- basename(inputFile)
1549123234379:# Parse command line arguments
1549123234380:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1549123234380:argv <- list()
1549123234380:if(command.line) {
1549123234381:argv <- parse_args(p)
1549123234381:} else {
1549123234381:argv <- parse_args(p, list(inputFile,
1549123234382:# "--gene_file", geneFile,
1549123234382:"--prefix", out.prefix,
1549123234382:"--sample_name", sample.name,
1549123234382:"--format", out.format))
1549123234383:}
1549123234385:# Get argument values from the command line
1549123234385:input.file  <- argv$input_file
1549123234385:gene.file   <- argv$gene_file
1549123234386:out.format  <- argv$format
1549123234387:out.prefix  <- argv$prefix
1549123234387:sample.name <- argv$sample_name
1549123234387:# if (sample.name == "")
1549123234388:if (sample.name == "input file's name")
1549123234388:sample.name <- basename(input.file)
1549123234389:# Function to check if file exists ----------------------------------------
1549123234389:CheckFileExists <- function(file.list) {
1549123234390:non.exist.files <- !file.exists(file.list)
1549123234390:if(any(non.exist.files)) {
1549123234390:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549123234391:}
1549123234392:}
1549123234392:# Check for input files ---------------------------------------------------
1549123234393:files.to.check <- c(input.file)
1549123234393:error.message  <- CheckFileExists(files.to.check)
1549123234394:if(!is.null(error.message)){
1549123234395:stop(error.message)
1549123234395:} else {
1549123234395:# Code core - Begin -------------------------------------------------------
1549123234396:installAndLoadPackages(packages, verbose = TRUE)
1549123234396:# FUNCTIONS:
1549123234397:# Function to dark a list of colors ---------------------------------------
1549123234397:darkColors <- function(palette, level){
1549123234398:rgbColors <- as.data.frame(t(as.data.frame(lapply(as.data.frame(t(col2rgb(palette))),
1549123234398:function(x) { round(x * level)}))))
1549123234399:unname(sapply(rgbColors, function(x){ rgb(x[1], x[2], x[3], maxColorValue=255) }))
1549123234400:}
1549123234400:# Function for plotting k-mer depth ----------------------------------------
1549123234400:plotDepth <- function(dataToPlot, labelsData, fillColors, borderColors) {
1549123234401:max.x       <- max(dataToPlot$Position)
1549123234401:max.y       <- max(dataToPlot$kmerDepth)
1549123234402:x.limits    <- seq(0, max.x, 100)
1549123234402:y.limits    <- seq(0, max.y, 20)
1549123234403:nTopAlleles <- length(unique(dataToPlot$N))
1549123234403:d.plot <- ggplot(data = dataToPlot, aes(x = Position, y = kmerDepth),
1549123234404:size = 0.2) +
1549123234404:geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1549123234405:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1549123234406:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1549123234406:# scale_color_manual(values = getPalette) +
1549123234406:scale_color_manual(values = borderColors) +
1549123234407:scale_fill_manual(values = fillColors) +
1549123234407:geom_text(data = labelsData,
1549123234408:# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1549123234408:# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1549123234409:aes(x = Length, y = info.y * 0.5, group = Locus,
1549123234409:hjust = 0,
1549123234410:label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1549123234410:show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1549123234411:nudge_x = -(max.x*0.025)
1549123234411:) +
1549123234412:geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1549123234412:alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1549123234413:# geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1549123234413:size = annotTextSize * 1.05, color = "#333333") +
1549123234414:geom_text(data = labelsData,
1549123234414:parse = TRUE,
1549123234415:aes(x = info.x, y = info.y,
1549123234415:label = paste0("{{{{italic(s)==", format(round(Score, 2), nsmall = 2),
1549123234416:"*~~~italic(hat(f)[k])} ==", format(round(NormKmerCount, 2), nsmall = 2),
1549123234417:"*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1549123234417:"*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1549123234418:"~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1549123234419:hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1549123234419:facet_grid(Locus ~ N, scales = "free_y") +
1549123234420:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1549123234421:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1549123234421:theme_bw() +
1549123234422:plotTheme +
1549123234423:labs(title    = expression(italic("k")*"-mer depth"),
1549123234423:subtitle = paste("Top", nTopAlleles, "alleles/genes on sample", sample.name),
1549123234424:x        = "Position along sequence (bp)",
1549123234425:y        = expression(paste(italic(k), "-mer depth")),
1549123234426:# caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1549123234427:caption  = expression(paste(italic("s"),": score;  ",
1549123234429:italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1549123234430:italic("c"),": coverage;  ",
1549123234431:italic(sigma), ": standard deviation;  ",
1549123234432:italic(bar(d)), ": average depth"), sep = "")
1549123234433:)
1549123234434:# guides(fill  = guide_legend(title  ="Allele"), color = FALSE) +
1549123234434:d.plot
1549123234435:}
1549123234436:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549123234436:# Function for plotting k-mer depth distributions as box plots ------------
1549123234437:plotDepthDist <- function(data.to.plot, labelsData, fillColors, borderColors){
1549123234438:dist.plot <- ggplot(data.to.plot, aes(x = AlPos, y = kmerDepth)) +
1549123234438:geom_jitter(position = position_jitter(width=.3), aes(color = Locus),
1549123234439:alpha = 0.4, size = 1.2, shape = 16) +
1549123234440:geom_boxplot(alpha = 0.7, size = 0.5, aes(fill = Locus, color = Locus)) +
1549123234441:geom_text(data = labelsData, size = 4, hjust = "center",
1549123234442:aes(x = N,#(N - 0.5),
1549123234442:y = info.y * 1.05,
1549123234443:label = Allele),
1549123234444:color = "#333333") +
1549123234445:geom_text(data = labelsData, size = 3, hjust = "center",
1549123234445:parse = TRUE,
1549123234446:aes(x = N,#(N - 0.4),
1549123234447:# y = info.y * 0.08,
1549123234448:y = info.y * 0.96,
1549123234449:label = paste0("sigma ==",format(round(sd, 1), nsmall = 1))),
1549123234449:color = "#333333") +
1549123234450:geom_point(data = labelsData,
1549123234451:shape = 23, fill = "white",
1549123234452:aes(x = N, y = meanDepth)) +
1549123234453:facet_grid(Locus ~ ., scales = "free_y") +
1549123234454:scale_color_manual(values = borderColors) +
1549123234454:scale_fill_manual(values = fillColors) +
1549123234455:labs(title = expression(paste(italic("k"), "-mer depth distribution")),
1549123234456:subtitle = basename(input.file),
1549123234457:x        = "Allele Ranking",
1549123234458:y        = expression(paste(italic(k), "-mer depth")),
1549123234459:caption  = expression(paste(italic(sigma), ": standard deviation")))+#,"sd: standard deviation") +
1549123234460:theme_bw() +
1549123234461:plotTheme +
1549123234461:theme(axis.text.x   = element_text(angle = 0, size = axisTextSize,
1549123234462:vjust = 1, hjust = 0.5, color = textColor))
1549123234463:dist.plot
1549123234464:}
1549123234465:# Function to get data for annotations ------------------------------------
1549123234466:getLabelsData <- function(data.to.plot) {
1549123234467:max.x <- max(data.to.plot$Position)
1549123234468:max.y <- max(data.to.plot$kmerDepth)
1549123234469:nLoci    <- length(unique(data.to.plot$Locus))
1549123234470:nAlleles <- length(unique(data.to.plot$N))
1549123234472:alleles     <- unique(data.to.plot$Allele)
1549123234473:loci        <- as.character(unique(data.to.plot$Locus))
1549123234474:lociLabels  <- c()
1549123234475:name.x      <- c()
1549123234476:name.y      <- c()
1549123234477:info.x      <- c()
1549123234478:info.y      <- c()
1549123234479:covs        <- c()
1549123234480:avgDepths   <- c()
1549123234481:meanDepth.x <- c()
1549123234482:meanDepth.y <- c()
1549123234483:for (i in loci) {
1549123234484:lociLabels <- c(lociLabels, rep(i, nAlleles))
1549123234485:}
1549123234486:for (allele in alleles) {
1549123234487:locus       <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1549123234488:maxPos      <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549123234489:maxDepth    <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549123234490:# name.x      <- c(name.x, (maxPos / 2))
1549123234491:name.x      <- c(name.x, (max.x / 2))
1549123234492:name.y      <- c(name.y, (maxDepth * 0.25))
1549123234494:info.x      <- c(info.x, max.x * 0.02)
1549123234495:info.y      <- c(info.y, maxDepth * 1.5)
1549123234496:covs        <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549123234497:avgDepths   <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549123234498:}
1549123234499:labelsData <- data.frame(Allele = alleles,
1549123234501:name.x = name.x,
1549123234502:name.y = name.y,
1549123234503:info.x = info.x,
1549123234504:info.y = info.y,
1549123234505:meanDepth = avgDepths,
1549123234506:N = rep(unique(data.to.plot$N), nLoci),
1549123234507:Locus = lociLabels,
1549123234508:cov = covs
1549123234510:) %>%
1549123234511:left_join(data.to.plot %>%
1549123234512:group_by(Allele, Length, NormKmerCount, Score) %>%
1549123234513:summarise(sd = sd(kmerDepth)),
1549123234514:by = c("Allele" = "Allele")) #%>%
1549123234515:# mutate(
1549123234516:#   info   = paste0("cov=", format(round(covs, 1), nsmall = 1), "%   ",
1549123234517:#                   paste0("ad=", format(round(avgDepths, 1), nsmall = 1)),
1549123234519:#                   "   ",
1549123234520:#                   # expression(paste(italic(sigma), "=",format(round(sd, 1), nsmall = 1))))
1549123234521:#                   paste0("sd=", format(round(sd, 1), nsmall = 1))
1549123234522:#   )
1549123234523:# )
1549123234524:labelsData
1549123234526:}
1549123234528:# Check for genes/loci file to filter loci to plot  -----------------------
1549123234529:loci.to.plot <- c()
1549123234530:# if (!is.null(gene.file)|| gene.file != "") {
1549123234531:if (!is.null(gene.file) && !is.na(gene.file) && gene.file != "") {
1549123234533:error.message <- CheckFileExists(gene.file)
1549123234534:if (!is.null(error.message)){
1549123234535:cat("Warning:")
1549123234536:cat(error.message)
1549123234538:cat("  The plotting process will continue without filtering genes/loci.\n")
1549123234539:} else {
1549123234540:loci.to.plot <- scan(gene.file, character(), quiet = TRUE)
1549123234542:}
1549123234543:}
1549123234545:# Data processing and plotting --------------------------------------------
1549123234546:cat("Plotting depths... ")
1549123234548:options(stringsAsFactors = T, readr.num_columns = 0)
1549123234550:# Load data
1549123234551:inData <- read_tsv(input.file)
1549123234552:# inData <- read.delim(input.file)
1549123234555:# colnames(inData) <- c("Allele", "Position", "k-mer Depth", "Weighted k-mer Depth")
1549123234556:colnames(inData) <- c("N", "Locus", "Allele", "Position", "kmerDepth",
1549123234557:"NormKmerCount", "Coverage", "Score", "AverageKmerDepth")
1549123234560:# Transform data
1549123234561:data.to.plot <- inData %>%
1549123234562:left_join(inData %>%
1549123234564:group_by(Allele) %>%
1549123234565:summarise(Length = n()), by = "Allele") %>%
1549123234566:arrange(Locus, N) %>%
1549123234568:mutate(
1549123234569:AlPos = factor(N, levels = unique(.$N)),
1549123234570:Allele = factor(Allele, levels = unique(inData$Allele)))
1549123234571:# Filtering loci/genes from genes_file input param
1549123234573:if (length(loci.to.plot) > 0) {
1549123234574:data.to.plot <- data.to.plot %>%
1549123234575:filter(Locus %in% loci.to.plot)
1549123234577:}
1549123234579:longestLocusNameLength <- max(str_length(as.character(unique(inData$Locus))))
1549123234581:# labelsData <- getLabelsData(data.to.plot)
1549123234582:nLoci      <- length(unique(data.to.plot$Locus))
1549123234583:nAlleles   <- length(unique(data.to.plot$N))
1549123234586:# Theme-related variable definition ---------------------------------------
1549123234587:annotLinetype         <- "solid"
1549123234589:annotTextSize         <- 4
1549123234590:axisColor             <- "#000000"
1549123234592:axisTextSize          <- 12
1549123234593:barAnnotTextSize      <- 4
1549123234595:baseTextSize          <- 14
1549123234596:gridColor             <- "#e0e0e0"
1549123234598:lineSize              <- 0.3
1549123234599:panelColor            <- "#fff4e0"
1549123234601:panelColor            <- "#f2efe6"
1549123234602:# panelColor            <- "#ffffff"
1549123234603:# stripBackground       <- "#cccccc"
1549123234605:stripTextSize         <- axisTextSize
1549123234606:if (longestLocusNameLength > 12)
1549123234608:stripTextSize       <- stripTextSize * 0.6
1549123234609:textColor             <- "#000000"
1549123234610:# baseFontFamily        <- "Arial"
1549123234613:# Custom theme definition for plots ---------------------------------------
1549123234614:plotTheme <- list(
1549123234616:theme(
1549123234617:axis.text.x      = element_text(angle = 50, size = axisTextSize,
1549123234619:vjust = 1, hjust = 1, color = textColor),
1549123234620:axis.text.y      = element_text(size = axisTextSize, color = textColor),
1549123234622:axis.ticks       = element_line(size = lineSize),
1549123234623:axis.title.x     = element_text(margin = margin(6,0,8,0, "mm")),
1549123234625:axis.title.y     = element_text(margin = margin(0,6,0,0, "mm")),
1549123234626:legend.position  = "none",
1549123234628:panel.border     = element_rect(size = lineSize),
1549123234629:panel.background = element_rect(fill = panelColor),
1549123234631:panel.grid       = element_line(size = lineSize, colour = gridColor),
1549123234632:panel.grid.minor = element_blank(),
1549123234634:plot.margin      = margin(10,10,0,10, "mm"),
1549123234635:panel.spacing    = unit(4, "mm"),
1549123234637:plot.caption     = element_text(size = baseTextSize * 0.7, face = "italic"),
1549123234638:plot.title       = element_text(hjust = 0.5),
1549123234640:plot.subtitle    = element_text(hjust = 0.5),
1549123234641:strip.background = element_rect(size = lineSize),
1549123234643:strip.text       = element_text(size = stripTextSize),
1549123234644:text             = element_text(size = baseTextSize)
1549123234646:)
1549123234647:)
1549123234651:# Palette definition ------------------------------------------------------
1549123234652:# colourCount <- length(unique(inData$Locus))
1549123234654:colourCount <- nLoci
1549123234656:# colourCount  <- length(unique(data.to.plot$Allele))
1549123234657:# fillPalette  <- colorRampPalette(brewer.pal(8, "Dark2"))(colourCount)
1549123234659:# fillPalette  <- colorRampPalette(brewer.pal(12, "Paired"))(colourCount)
1549123234660:# fillPalette  <- colorRampPalette(brewer.pal(9, "Set1"))(colourCount)
1549123234662:# fillPalette  <- colorRampPalette(pal_npg("nrc")(10))(colourCount)
1549123234663:# fillPalette  <- colorRampPalette(pal_d3("category20")(20))(colourCount)
1549123234665:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549123234667:borderPalette <- darkColors(fillPalette, 0.6)
1549123234669:# library("scales"); show_col(fillPalette); show_col(borderPalette)
1549123234679:# # Depth plot -------------------------------------------------------------
1549123234681:# hFactor  <- 1.2
1549123234684:# wFactor  <- 4.8
1549123234687:# # if (nLoci == 1)
1549123234689:# #   hFactor <- 1.4;
1549123234692:# height <- (nLoci * hFactor) + 2 + 0.1 + ((nLoci-1)*0.05)
1549123234694:# width  <- nAlleles * wFactor
1549123234695:# # Generate plot
1549123234697:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549123234698:# # Save plot
1549123234700:# out.filename <- paste0(out.prefix, ".", out.format)
1549123234702:# if (out.format == "png") {
1549123234703:# 	ggsave(filename = out.filename, plot = depth.plot,
1549123234705:# 				 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549123234706:# } else {
1549123234708:# 	ggsave(filename = out.filename, plot = depth.plot,
1549123234710:# 				 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549123234711:# }
1549123234715:# Depth plot -------------------------------------------------------------
1549123234716:# <<<<<<< HEAD
1549123234718:#   rowsPerPage <- 7
1549123234720:#   hFactor     <- 1.2
1549123234721:#   wFactor     <- 4.8
1549123234723:#   rows        <- nLoci
1549123234724:#   if (nLoci > rowsPerPage)
1549123234726:#     rows <- rowsPerPage;
1549123234729:#   height <- (rows * hFactor) + 2 + 0.1 + ((rows-1)*0.05)
1549123234730:#   width  <- nAlleles * wFactor
1549123234732:#
1549123234734:#   loci     <- unique(data.to.plot$Locus)
1549123234735:#   lociList <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549123234737:#   lociList <- split(loci, ceiling(seq_along(loci)/3))
1549123234738:#   plotList <- list()
1549123234740:#   for (lociSet in lociList) {
1549123234742:#   	print(lociSet)
1549123234743:#   	subset.to.plot <- data.to.plot %>%
1549123234745:#   		filter(Locus %in% lociSet)
1549123234747:#   	labelsData <- getLabelsData(subset.to.plot)
1549123234748:#   	currentPlot <- plotDepth(subset.to.plot, labelsData, fillPalette, borderPalette)
1549123234750:#   	plotList <- c(plotList, list(currentPlot))
1549123234752:#   	# print(currentPlot)
1549123234753:#   	# print(unique(subset.to.plot$Locus))
1549123234755:#   }
1549123234757:#  	length(plotList)
1549123234759:#
1549123234761:#  	if (out.format == "pdf") {
1549123234762:#  		out.filename <- paste(out.prefix, out.format, sep = ".")
1549123234764:#  		pdf(out.filename)
1549123234766:#  		for (i in seq_along(plotList)) {
1549123234767:#  			nLociToPlot <- length(lociList[[i]])
1549123234769:#  			height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1549123234771:#  			width  <- nAlleles * wFactor
1549123234772:#  			# out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549123234774:#  			# print(out.filename)
1549123234776:#  			print(plotList[[i]])
1549123234777:#  		}
1549123234779:#  		dev.off()
1549123234781:#
1549123234782:#  	}
1549123234784:#  	for (i in seq_along(plotList)) {
1549123234786:#  		nLociToPlot <- length(lociList[[i]])
1549123234787:#  		height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1549123234789:#  		width  <- nAlleles * wFactor
1549123234791:#  		out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549123234792:#  		print(out.filename)
1549123234794:#  		pdf(out.filename, width = width, height = height)
1549123234795:#  		print(plotList[[i]])
1549123234797:#  		dev.off()
1549123234799:#  	}
1549123234800:#  	else if (out.format == "png") {
1549123234802:#  		ggsave(filename = out.filename, plot = depth.plot,
1549123234804:#  					 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549123234805:#  	} else {
1549123234807:#  		ggsave(filename = out.filename, plot = depth.plot,
1549123234809:#  					 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549123234811:#  	}
1549123234812:#
1549123234814:#  	plot_grid()
1549123234815:#  	# Generate plot
1549123234817:#   # (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549123234820:# =======
1549123234822:hFactor  <- 1.6
1549123234823:wFactor  <- 4.8
1549123234825:# if (nLoci == 1)
1549123234827:#   hFactor <- 1.4;
1549123234831:#               loci          titles and     strip    space between locus
1549123234833:#                             footnote
1549123234835:height <- (nLoci * hFactor) + 2              + 0.1    + ((nLoci-1)*0.05)
1549123234838:getPlotHeight <- function(rows){
1549123234840:# loci + titles and foot note + strip + space between locus
1549123234842:(rows*hFactor) + 2.39 + ((rows-1)*0.157) #in
1549123234843:}
1549123234846:width  <- nAlleles * wFactor
1549123234848:height <- getPlotHeight(nLoci)
1549123234850:rowsPerPage <- 5
1549123234851:loci <- unique(data.to.plot$Locus)
1549123234853:sets <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549123234856:plots <- lapply(sets, function(set, dp=data.to.plot, rp=rowsPerPage){
1549123234858:# set <- sets[[2]]
1549123234860:subsetToPlot <- dp %>% filter(Locus %in% set)
1549123234861:ld    <- getLabelsData(subsetToPlot)
1549123234863:(p    <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette))
1549123234865:nLoci <- length(set)
1549123234867:if(nLoci < rp & out.format == "pdf"){
1549123234869:# hlay    <- matrix(c(rep(1, nLoci), rep(NA, rp-nLoci)))
1549123234870:hlay    <- matrix(c(rep(1, nLoci), NA))
1549123234872:total   <- getPlotHeight(rp)
1549123234874:cHeight <- getPlotHeight(nLoci)
1549123234876:blank   <- getPlotHeight(rp-nLoci) - 2.39
1549123234877:# heights <- matrix(c(rep(1, nLoci), rep(1/rp+2, rp-nLoci)))
1549123234879:# heights <- matrix(c(rep(1, nLoci), 0.6))
1549123234881:heights <- matrix(c(0.5, 0.6))
1549123234883:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549123234884:# p       <- grid.arrange(p, layout_matrix = hlay, heights = unit(c(cHeight, blank), c("in", "in")))
1549123234886:print(str_glue("{total}, {cHeight}, {blank}, {blank/total}"))
1549123234888:}
1549123234890:p
1549123234892:})
1549123234894:ml <- marrangeGrob(plots, nrow=1, ncol=1, #padding = unit(10, "mm"),
1549123234896:top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549123234897:ggsave(filename = "multipage.pdf", plot = ml,
1549123234899:width  = width, height = getPlotHeight(rowsPerPage), dpi = 400, limitsize = FALSE)
1549123234903:# Generate plot
1549123234905:labelsData <- getLabelsData(data.to.plot)
1549123234907:(depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549123234908:# >>>>>>> 64e9112fd081cc5c75caf0f7d0d03cd9f5ea18f4
1549123234910:# Save plot
1549123234912:out.filename <- paste0(out.prefix, ".", out.format)
1549123234914:if (out.format == "png") {
1549123234916:ggsave(filename = out.filename, plot = depth.plot,
1549123234918:width  = width, height = height, dpi = 300, limitsize = FALSE, type = "cairo-png")
1549123234920:} else {
1549123234922:ggsave(filename = out.filename, plot = depth.plot,
1549123234924:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549123234926:}
1549123234930:# Depth distribution plot ------------------------------------------------
1549123234932:hFactor  <- 3
1549123234933:wFactor  <- 2
1549123234935:if (nLoci == 1)
1549123234937:hFactor <- 3.5
1549123234939:height       <- nLoci * hFactor
1549123234941:width        <- nAlleles * wFactor
1549123234943:# Generate plot
1549123234945:(dist.plot <- plotDepthDist(data.to.plot, labelsData, fillPalette, borderPalette))
1549123234947:# Save plot
1549123234949:out.filename <- paste0(out.prefix, "_dist.", out.format)
1549123234951:if (out.format == "png") {
1549123234953:ggsave(filename = out.filename, plot = dist.plot,
1549123234955:width  = width, height = height, type = "cairo-png", dpi = 300)
1549123234957:} else {
1549123234959:ggsave(filename = out.filename, plot = dist.plot,
1549123234961:width  = width, height = height, dpi = 400)
1549123234963:}
1549123234965:cat("Done! \n")
1549123234969:# Code core - End ---------------------------------------------------------
1549123234971:}
1549123262603:width  <- nAlleles * wFactor
1549123262604:height <- getPlotHeight(nLoci)
1549123262605:rowsPerPage <- 5
1549123262606:loci <- unique(data.to.plot$Locus)
1549123262607:sets <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549123262609:plots <- lapply(sets, function(set, dp=data.to.plot, rp=rowsPerPage){
1549123262609:# set <- sets[[2]]
1549123262610:subsetToPlot <- dp %>% filter(Locus %in% set)
1549123262610:ld    <- getLabelsData(subsetToPlot)
1549123262610:(p    <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette))
1549123262610:nLoci <- length(set)
1549123262611:if(nLoci < rp & out.format == "pdf"){
1549123262611:# hlay    <- matrix(c(rep(1, nLoci), rep(NA, rp-nLoci)))
1549123262612:hlay    <- matrix(c(rep(1, nLoci), NA))
1549123262612:total   <- getPlotHeight(rp)
1549123262612:cHeight <- getPlotHeight(nLoci)
1549123262613:blank   <- getPlotHeight(rp-nLoci) - 2.39
1549123262613:# heights <- matrix(c(rep(1, nLoci), rep(1/rp+2, rp-nLoci)))
1549123262613:# heights <- matrix(c(rep(1, nLoci), 0.6))
1549123262614:heights <- matrix(c(0.5, 0.6))
1549123262614:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549123262615:# p       <- grid.arrange(p, layout_matrix = hlay, heights = unit(c(cHeight, blank), c("in", "in")))
1549123262615:print(str_glue("{total}, {cHeight}, {blank}, {blank/total}"))
1549123262615:}
1549123262616:p
1549123262616:})
1549123265174:ml <- marrangeGrob(plots, nrow=1, ncol=1, #padding = unit(10, "mm"),
1549123265174:top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549123270102:ggsave(filename = "multipage.pdf", plot = ml,
1549123270102:width  = width, height = getPlotHeight(rowsPerPage), dpi = 400, limitsize = FALSE)
1549123289189:getPlotHeight(nLoci)
1549123315093:rows
1549123322678:nLoci
1549123333632:rowsPerPage
1549123337388:getPlotHeight(rowsPerPage)
1549123350949:rowsPerPage
1549123354434:getPlotHeight(rowsPerPage)
1549123540531:width  <- nAlleles * wFactor
1549123540574:height <- getPlotHeight(nLoci)
1549123540575:rowsPerPage <- 5
1549123540576:loci <- unique(data.to.plot$Locus)
1549123540577:sets <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549123540579:plots <- lapply(sets, function(set, dp=data.to.plot, rp=rowsPerPage){
1549123540579:# set <- sets[[2]]
1549123540580:subsetToPlot <- dp %>% filter(Locus %in% set)
1549123540580:ld    <- getLabelsData(subsetToPlot)
1549123540581:(p    <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette))
1549123540582:nLoci <- length(set)
1549123540582:if(nLoci < rp & out.format == "pdf"){
1549123540583:# hlay    <- matrix(c(rep(1, nLoci), rep(NA, rp-nLoci)))
1549123540583:hlay    <- matrix(c(rep(1, nLoci), NA))
1549123540584:total   <- getPlotHeight(rp)
1549123540585:cHeight <- getPlotHeight(nLoci)
1549123540585:blank   <- getPlotHeight(rp-nLoci) - 2.39
1549123540586:# heights <- matrix(c(rep(1, nLoci), rep(1/rp+2, rp-nLoci)))
1549123540586:# heights <- matrix(c(rep(1, nLoci), 0.6))
1549123540587:heights <- matrix(c(0.5, 0.6))
1549123540588:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549123540589:# p       <- grid.arrange(p, layout_matrix = hlay, heights = unit(c(cHeight, blank), c("in", "in")))
1549123540590:print(str_glue("{total}, {cHeight}, {blank}, {blank/total}"))
1549123540590:}
1549123540591:p
1549123540592:})
1549123543828:ml <- marrangeGrob(plots, nrow=1, ncol=1, #padding = unit(10, "mm"),
1549123543828:top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549123550291:ml
1549124449948:#!/usr/bin/env Rscript
1549124449993:# ##############################################################################
1549124449994:#  Author:   Hector Fabio Espitia-Navarro
1549124449994:#            Georgia Institute of Technology
1549124449994:#  Version:  1.0
1549124449995:#  Date:     01/19/2019
1549124449995:# ##############################################################################
1549124449995:# Install required packages -----------------------------------------------
1549124449996:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549124449996:if(!file.exists(personal.lib.path))
1549124449997:dir.create(personal.lib.path)
1549124449997:printMessage <- function(message, verbose){
1549124449998:if(verbose)
1549124449998:cat(message)
1549124449998:}
1549124449999:# crayon::bold("Hola")
1549124449999:installAndLoadPackages <- function(pkg, verbose){
1549124449999:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1549124450000:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1549124450000:printMessage("Done!\n", verbose)
1549124450001:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549124450001:if (length(new.pkg)) {
1549124450001:printMessage("Installing new packages... ", verbose)
1549124450002:install.packages(new.pkg, dependencies = TRUE,
1549124450002:repos="http://cran.rstudio.com/",
1549124450003:lib = personal.lib.path)
1549124450003:printMessage("Done!\n", verbose)
1549124450003:}
1549124450004:printMessage("Loading required packages... ", verbose)
1549124450004:sapply(pkg, function(x){
1549124450004:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549124450005:})
1549124450005:printMessage("Done!\n", verbose)
1549124450006:}
1549124450006:# github.related.packages <- c("devtools", "Rcpp")
1549124450007:# packages <- c("argparser", "tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite")
1549124450007:packages <- c("tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite", "gridExtra")
1549124450007:# installAndLoadPackages(packages, verbose = TRUE)
1549124450008:installAndLoadPackages("argparser", verbose = FALSE)
1549124471235:# Command line arguments processing ---------------------------------------
1549124471235:# Get script name
1549124471236:initial.options <- commandArgs(trailingOnly = FALSE)
1549124471236:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1549124471237:# Process command line arguments
1549124471237:# Create a parser
1549124471237:p <- arg_parser("This script generates k-mer depth plots using a depth file generated by the\033[1mSTing typer\033[22m tool (-t option).",
1549124471238:name = script.name)
1549124471280:# Add Positional arguments (required)
1549124471281:p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
1549124471281:# Add options
1549124471282:p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1549124471283:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1549124471283:default = "kmer_depth")
1549124471284:p <- add_argument(p, "--sample_name", help = "Sample name.",
1549124471284:default = "input file's name")
1549124471285:p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'",
1549124471286:default = "pdf")
1549124471289:# Initialization of variables ---------------------------------------------
1549124471289:# Values to test the script using RStudio
1549124471289:script.home <- "/home/hspitia/projects/sting"
1549124471290:# inputFile   <- paste(script.home, "ERR036060.depth.2.tsv", sep = "/")
1549124471291:# geneFile    <- paste(script.home, "rmlst_failed_loci.txt", sep = "/")
1549124471291:inputFile   <- paste(script.home, "depth.tsv", sep = "/")
1549124471292:geneFile    <- paste(script.home, "loci.txt", sep = "/")
1549124471293:out.format  <- "pdf"
1549124471294:out.prefix  <- "kmer_ext_depth"
1549124471295:sample.name <- basename(inputFile)
1549124471295:# Parse command line arguments
1549124471296:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1549124471297:argv <- list()
1549124471297:if(command.line) {
1549124471298:argv <- parse_args(p)
1549124471298:} else {
1549124471299:argv <- parse_args(p, list(inputFile,
1549124471299:# "--gene_file", geneFile,
1549124471300:"--prefix", out.prefix,
1549124471300:"--sample_name", sample.name,
1549124471300:"--format", out.format))
1549124471301:}
1549124471307:# Get argument values from the command line
1549124471308:input.file  <- argv$input_file
1549124471308:gene.file   <- argv$gene_file
1549124471309:out.format  <- argv$format
1549124471310:out.prefix  <- argv$prefix
1549124471311:sample.name <- argv$sample_name
1549124471311:# if (sample.name == "")
1549124471312:if (sample.name == "input file's name")
1549124471312:sample.name <- basename(input.file)
1549124471313:# Function to check if file exists ----------------------------------------
1549124471314:CheckFileExists <- function(file.list) {
1549124471314:non.exist.files <- !file.exists(file.list)
1549124471314:if(any(non.exist.files)) {
1549124471315:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549124471315:}
1549124471316:}
1549124471316:# Check for input files ---------------------------------------------------
1549124471317:files.to.check <- c(input.file)
1549124471317:error.message  <- CheckFileExists(files.to.check)
1549124471318:if(!is.null(error.message)){
1549124471318:stop(error.message)
1549124471318:} else {
1549124471319:# Code core - Begin -------------------------------------------------------
1549124471320:installAndLoadPackages(packages, verbose = TRUE)
1549124471320:# FUNCTIONS:
1549124471321:# Function to dark a list of colors ---------------------------------------
1549124471322:darkColors <- function(palette, level){
1549124471322:rgbColors <- as.data.frame(t(as.data.frame(lapply(as.data.frame(t(col2rgb(palette))),
1549124471322:function(x) { round(x * level)}))))
1549124471323:unname(sapply(rgbColors, function(x){ rgb(x[1], x[2], x[3], maxColorValue=255) }))
1549124471323:}
1549124471323:# Function for plotting k-mer depth ----------------------------------------
1549124471324:plotDepth <- function(dataToPlot, labelsData, fillColors, borderColors) {
1549124471324:max.x       <- max(dataToPlot$Position)
1549124471324:max.y       <- max(dataToPlot$kmerDepth)
1549124471325:x.limits    <- seq(0, max.x, 100)
1549124471325:y.limits    <- seq(0, max.y, 20)
1549124471325:nTopAlleles <- length(unique(dataToPlot$N))
1549124471327:d.plot <- ggplot(data = dataToPlot, aes(x = Position, y = kmerDepth),
1549124471327:size = 0.2) +
1549124471328:geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1549124471328:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1549124471329:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1549124471330:# scale_color_manual(values = getPalette) +
1549124471330:scale_color_manual(values = borderColors) +
1549124471331:scale_fill_manual(values = fillColors) +
1549124471331:geom_text(data = labelsData,
1549124471332:# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1549124471332:# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1549124471333:aes(x = Length, y = info.y * 0.5, group = Locus,
1549124471333:hjust = 0,
1549124471333:label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1549124471334:show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1549124471334:nudge_x = -(max.x*0.025)
1549124471335:) +
1549124471335:geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1549124471336:alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1549124471336:# geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1549124471337:size = annotTextSize * 1.05, color = "#333333") +
1549124471338:geom_text(data = labelsData,
1549124471339:parse = TRUE,
1549124471340:aes(x = info.x, y = info.y,
1549124471341:label = paste0("{{{{italic(s)==", format(round(Score, 2), nsmall = 2),
1549124471342:"*~~~italic(hat(f)[k])} ==", format(round(NormKmerCount, 2), nsmall = 2),
1549124471343:"*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1549124471344:"*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1549124471345:"~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1549124471345:hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1549124471346:facet_grid(Locus ~ N, scales = "free_y") +
1549124471347:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1549124471348:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1549124471349:theme_bw() +
1549124471350:plotTheme +
1549124471351:labs(title    = expression(italic("k")*"-mer depth"),
1549124471352:subtitle = paste("Top", nTopAlleles, "alleles/genes on sample", sample.name),
1549124471353:x        = "Position along sequence (bp)",
1549124471354:y        = expression(paste(italic(k), "-mer depth")),
1549124471355:# caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1549124471357:caption  = expression(paste(italic("s"),": score;  ",
1549124471359:italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1549124471361:italic("c"),": coverage;  ",
1549124471363:italic(sigma), ": standard deviation;  ",
1549124471364:italic(bar(d)), ": average depth"), sep = "")
1549124471365:)
1549124471366:# guides(fill  = guide_legend(title  ="Allele"), color = FALSE) +
1549124471367:d.plot
1549124471368:}
1549124471369:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549124471370:# Function for plotting k-mer depth distributions as box plots ------------
1549124471371:plotDepthDist <- function(data.to.plot, labelsData, fillColors, borderColors){
1549124471372:dist.plot <- ggplot(data.to.plot, aes(x = AlPos, y = kmerDepth)) +
1549124471373:geom_jitter(position = position_jitter(width=.3), aes(color = Locus),
1549124471375:alpha = 0.4, size = 1.2, shape = 16) +
1549124471376:geom_boxplot(alpha = 0.7, size = 0.5, aes(fill = Locus, color = Locus)) +
1549124471377:geom_text(data = labelsData, size = 4, hjust = "center",
1549124471378:aes(x = N,#(N - 0.5),
1549124471379:y = info.y * 1.05,
1549124471380:label = Allele),
1549124471381:color = "#333333") +
1549124471382:geom_text(data = labelsData, size = 3, hjust = "center",
1549124471383:parse = TRUE,
1549124471384:aes(x = N,#(N - 0.4),
1549124471386:# y = info.y * 0.08,
1549124471387:y = info.y * 0.96,
1549124471388:label = paste0("sigma ==",format(round(sd, 1), nsmall = 1))),
1549124471389:color = "#333333") +
1549124471390:geom_point(data = labelsData,
1549124471391:shape = 23, fill = "white",
1549124471393:aes(x = N, y = meanDepth)) +
1549124471394:facet_grid(Locus ~ ., scales = "free_y") +
1549124471395:scale_color_manual(values = borderColors) +
1549124471396:scale_fill_manual(values = fillColors) +
1549124471397:labs(title = expression(paste(italic("k"), "-mer depth distribution")),
1549124471399:subtitle = basename(input.file),
1549124471400:x        = "Allele Ranking",
1549124471401:y        = expression(paste(italic(k), "-mer depth")),
1549124471402:caption  = expression(paste(italic(sigma), ": standard deviation")))+#,"sd: standard deviation") +
1549124471404:theme_bw() +
1549124471405:plotTheme +
1549124471406:theme(axis.text.x   = element_text(angle = 0, size = axisTextSize,
1549124471408:vjust = 1, hjust = 0.5, color = textColor))
1549124471409:dist.plot
1549124471410:}
1549124471411:# Function to get data for annotations ------------------------------------
1549124471413:getLabelsData <- function(data.to.plot) {
1549124471414:max.x <- max(data.to.plot$Position)
1549124471415:max.y <- max(data.to.plot$kmerDepth)
1549124471418:nLoci    <- length(unique(data.to.plot$Locus))
1549124471419:nAlleles <- length(unique(data.to.plot$N))
1549124471422:alleles     <- unique(data.to.plot$Allele)
1549124471423:loci        <- as.character(unique(data.to.plot$Locus))
1549124471424:lociLabels  <- c()
1549124471426:name.x      <- c()
1549124471427:name.y      <- c()
1549124471429:info.x      <- c()
1549124471430:info.y      <- c()
1549124471431:covs        <- c()
1549124471433:avgDepths   <- c()
1549124471434:meanDepth.x <- c()
1549124471435:meanDepth.y <- c()
1549124471437:for (i in loci) {
1549124471438:lociLabels <- c(lociLabels, rep(i, nAlleles))
1549124471440:}
1549124471441:for (allele in alleles) {
1549124471442:locus       <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1549124471444:maxPos      <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549124471445:maxDepth    <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549124471447:# name.x      <- c(name.x, (maxPos / 2))
1549124471448:name.x      <- c(name.x, (max.x / 2))
1549124471450:name.y      <- c(name.y, (maxDepth * 0.25))
1549124471451:info.x      <- c(info.x, max.x * 0.02)
1549124471453:info.y      <- c(info.y, maxDepth * 1.5)
1549124471454:covs        <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549124471456:avgDepths   <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549124471457:}
1549124471459:labelsData <- data.frame(Allele = alleles,
1549124471460:name.x = name.x,
1549124471462:name.y = name.y,
1549124471463:info.x = info.x,
1549124471465:info.y = info.y,
1549124471467:meanDepth = avgDepths,
1549124471468:N = rep(unique(data.to.plot$N), nLoci),
1549124471469:Locus = lociLabels,
1549124471471:cov = covs
1549124471472:) %>%
1549124471473:left_join(data.to.plot %>%
1549124471475:group_by(Allele, Length, NormKmerCount, Score) %>%
1549124471476:summarise(sd = sd(kmerDepth)),
1549124471477:by = c("Allele" = "Allele")) #%>%
1549124471479:# mutate(
1549124471480:#   info   = paste0("cov=", format(round(covs, 1), nsmall = 1), "%   ",
1549124471481:#                   paste0("ad=", format(round(avgDepths, 1), nsmall = 1)),
1549124471482:#                   "   ",
1549124471483:#                   # expression(paste(italic(sigma), "=",format(round(sd, 1), nsmall = 1))))
1549124471484:#                   paste0("sd=", format(round(sd, 1), nsmall = 1))
1549124471486:#   )
1549124471487:# )
1549124471489:labelsData
1549124471490:}
1549124471492:# Check for genes/loci file to filter loci to plot  -----------------------
1549124471493:loci.to.plot <- c()
1549124471494:# if (!is.null(gene.file)|| gene.file != "") {
1549124471495:if (!is.null(gene.file) && !is.na(gene.file) && gene.file != "") {
1549124471496:error.message <- CheckFileExists(gene.file)
1549124471498:if (!is.null(error.message)){
1549124471499:cat("Warning:")
1549124471500:cat(error.message)
1549124471501:cat("  The plotting process will continue without filtering genes/loci.\n")
1549124471503:} else {
1549124471504:loci.to.plot <- scan(gene.file, character(), quiet = TRUE)
1549124471506:}
1549124471508:}
1549124471511:# Data processing and plotting --------------------------------------------
1549124471513:cat("Plotting depths... ")
1549124471515:options(stringsAsFactors = T, readr.num_columns = 0)
1549124471518:# Load data
1549124471520:inData <- read_tsv(input.file)
1549124471522:# inData <- read.delim(input.file)
1549124471525:# colnames(inData) <- c("Allele", "Position", "k-mer Depth", "Weighted k-mer Depth")
1549124471527:colnames(inData) <- c("N", "Locus", "Allele", "Position", "kmerDepth",
1549124471529:"NormKmerCount", "Coverage", "Score", "AverageKmerDepth")
1549124471532:# Transform data
1549124471534:data.to.plot <- inData %>%
1549124471536:left_join(inData %>%
1549124471537:group_by(Allele) %>%
1549124471539:summarise(Length = n()), by = "Allele") %>%
1549124471541:arrange(Locus, N) %>%
1549124471543:mutate(
1549124471545:AlPos = factor(N, levels = unique(.$N)),
1549124471546:Allele = factor(Allele, levels = unique(inData$Allele)))
1549124471548:# Filtering loci/genes from genes_file input param
1549124471550:if (length(loci.to.plot) > 0) {
1549124471552:data.to.plot <- data.to.plot %>%
1549124471554:filter(Locus %in% loci.to.plot)
1549124471556:}
1549124471559:longestLocusNameLength <- max(str_length(as.character(unique(inData$Locus))))
1549124471561:# labelsData <- getLabelsData(data.to.plot)
1549124471563:nLoci      <- length(unique(data.to.plot$Locus))
1549124471565:nAlleles   <- length(unique(data.to.plot$N))
1549124471569:# Theme-related variable definition ---------------------------------------
1549124471571:annotLinetype         <- "solid"
1549124471573:annotTextSize         <- 4
1549124471575:axisColor             <- "#000000"
1549124471577:axisTextSize          <- 12
1549124471579:barAnnotTextSize      <- 4
1549124471581:baseTextSize          <- 14
1549124471583:gridColor             <- "#e0e0e0"
1549124471585:lineSize              <- 0.3
1549124471587:panelColor            <- "#fff4e0"
1549124471589:panelColor            <- "#f2efe6"
1549124471591:# panelColor            <- "#ffffff"
1549124471593:# stripBackground       <- "#cccccc"
1549124471595:stripTextSize         <- axisTextSize
1549124471600:if (longestLocusNameLength > 12)
1549124471602:stripTextSize       <- stripTextSize * 0.6
1549124471604:textColor             <- "#000000"
1549124471606:# baseFontFamily        <- "Arial"
1549124471610:# Custom theme definition for plots ---------------------------------------
1549124471612:plotTheme <- list(
1549124471615:theme(
1549124471617:axis.text.x      = element_text(angle = 50, size = axisTextSize,
1549124471619:vjust = 1, hjust = 1, color = textColor),
1549124471621:axis.text.y      = element_text(size = axisTextSize, color = textColor),
1549124471623:axis.ticks       = element_line(size = lineSize),
1549124471625:axis.title.x     = element_text(margin = margin(6,0,8,0, "mm")),
1549124471627:axis.title.y     = element_text(margin = margin(0,6,0,0, "mm")),
1549124471629:legend.position  = "none",
1549124471631:panel.border     = element_rect(size = lineSize),
1549124471634:panel.background = element_rect(fill = panelColor),
1549124471636:panel.grid       = element_line(size = lineSize, colour = gridColor),
1549124471638:panel.grid.minor = element_blank(),
1549124471640:plot.margin      = margin(10,10,0,10, "mm"),
1549124471642:panel.spacing    = unit(4, "mm"),
1549124471644:plot.caption     = element_text(size = baseTextSize * 0.7, face = "italic"),
1549124471647:plot.title       = element_text(hjust = 0.5),
1549124471649:plot.subtitle    = element_text(hjust = 0.5),
1549124471651:strip.background = element_rect(size = lineSize),
1549124471653:strip.text       = element_text(size = stripTextSize),
1549124471655:text             = element_text(size = baseTextSize)
1549124471657:)
1549124471660:)
1549124471664:# Palette definition ------------------------------------------------------
1549124471666:# colourCount <- length(unique(inData$Locus))
1549124471668:colourCount <- nLoci
1549124471671:# colourCount  <- length(unique(data.to.plot$Allele))
1549124471673:# fillPalette  <- colorRampPalette(brewer.pal(8, "Dark2"))(colourCount)
1549124471675:# fillPalette  <- colorRampPalette(brewer.pal(12, "Paired"))(colourCount)
1549124471677:# fillPalette  <- colorRampPalette(brewer.pal(9, "Set1"))(colourCount)
1549124471680:# fillPalette  <- colorRampPalette(pal_npg("nrc")(10))(colourCount)
1549124471682:# fillPalette  <- colorRampPalette(pal_d3("category20")(20))(colourCount)
1549124471684:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549124471686:borderPalette <- darkColors(fillPalette, 0.6)
1549124471689:# library("scales"); show_col(fillPalette); show_col(borderPalette)
1549124471697:# # Depth plot -------------------------------------------------------------
1549124471699:# hFactor  <- 1.2
1549124471701:# wFactor  <- 4.8
1549124471704:# # if (nLoci == 1)
1549124471706:# #   hFactor <- 1.4;
1549124471710:# height <- (nLoci * hFactor) + 2 + 0.1 + ((nLoci-1)*0.05)
1549124471712:# width  <- nAlleles * wFactor
1549124471714:# # Generate plot
1549124471717:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549124471719:# # Save plot
1549124471721:# out.filename <- paste0(out.prefix, ".", out.format)
1549124471723:# if (out.format == "png") {
1549124471725:# 	ggsave(filename = out.filename, plot = depth.plot,
1549124471728:# 				 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549124471730:# } else {
1549124471732:# 	ggsave(filename = out.filename, plot = depth.plot,
1549124471734:# 				 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549124471737:# }
1549124471741:# Depth plot -------------------------------------------------------------
1549124471743:# <<<<<<< HEAD
1549124471746:#   rowsPerPage <- 7
1549124471748:#   hFactor     <- 1.2
1549124471750:#   wFactor     <- 4.8
1549124471752:#   rows        <- nLoci
1549124471755:#   if (nLoci > rowsPerPage)
1549124471757:#     rows <- rowsPerPage;
1549124471761:#   height <- (rows * hFactor) + 2 + 0.1 + ((rows-1)*0.05)
1549124471763:#   width  <- nAlleles * wFactor
1549124471766:#
1549124471768:#   loci     <- unique(data.to.plot$Locus)
1549124471770:#   lociList <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549124471772:#   lociList <- split(loci, ceiling(seq_along(loci)/3))
1549124471775:#   plotList <- list()
1549124471777:#   for (lociSet in lociList) {
1549124471779:#   	print(lociSet)
1549124471782:#   	subset.to.plot <- data.to.plot %>%
1549124471784:#   		filter(Locus %in% lociSet)
1549124471786:#   	labelsData <- getLabelsData(subset.to.plot)
1549124471788:#   	currentPlot <- plotDepth(subset.to.plot, labelsData, fillPalette, borderPalette)
1549124471791:#   	plotList <- c(plotList, list(currentPlot))
1549124471792:#   	# print(currentPlot)
1549124471794:#   	# print(unique(subset.to.plot$Locus))
1549124471795:#   }
1549124471797:#  	length(plotList)
1549124471799:#
1549124471801:#  	if (out.format == "pdf") {
1549124471803:#  		out.filename <- paste(out.prefix, out.format, sep = ".")
1549124471804:#  		pdf(out.filename)
1549124471806:#  		for (i in seq_along(plotList)) {
1549124471808:#  			nLociToPlot <- length(lociList[[i]])
1549124471809:#  			height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1549124471811:#  			width  <- nAlleles * wFactor
1549124471813:#  			# out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549124471815:#  			# print(out.filename)
1549124471816:#  			print(plotList[[i]])
1549124471818:#  		}
1549124471820:#  		dev.off()
1549124471821:#
1549124471823:#  	}
1549124471825:#  	for (i in seq_along(plotList)) {
1549124471826:#  		nLociToPlot <- length(lociList[[i]])
1549124471828:#  		height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1549124471830:#  		width  <- nAlleles * wFactor
1549124471832:#  		out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549124471833:#  		print(out.filename)
1549124471835:#  		pdf(out.filename, width = width, height = height)
1549124471837:#  		print(plotList[[i]])
1549124471838:#  		dev.off()
1549124471840:#  	}
1549124471842:#  	else if (out.format == "png") {
1549124471843:#  		ggsave(filename = out.filename, plot = depth.plot,
1549124471845:#  					 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549124471847:#  	} else {
1549124471848:#  		ggsave(filename = out.filename, plot = depth.plot,
1549124471850:#  					 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549124471852:#  	}
1549124471853:#
1549124471855:#  	plot_grid()
1549124471857:#  	# Generate plot
1549124471858:#   # (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549124471862:# =======
1549124471863:hFactor  <- 1.6
1549124471865:wFactor  <- 4.8
1549124471868:# if (nLoci == 1)
1549124471870:#   hFactor <- 1.4;
1549124471877:#               loci          titles and     strip    space between locus
1549124471880:#                             footnote
1549124471882:height <- (nLoci * hFactor) + 2              + 0.1    + ((nLoci-1)*0.05)
1549124471887:getPlotHeight <- function(rows){
1549124471888:# loci + titles and foot note + strip + space between locus
1549124471890:(rows*hFactor) + 2.39 + ((rows-1)*0.157) #in
1549124471892:}
1549124471895:width  <- nAlleles * wFactor
1549124471897:height <- getPlotHeight(nLoci)
1549124471899:rowsPerPage <- 5
1549124471901:loci <- unique(data.to.plot$Locus)
1549124471903:sets <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549124471906:plots <- lapply(sets, function(set, dp=data.to.plot, rp=rowsPerPage){
1549124471908:# set <- sets[[2]]
1549124471910:subsetToPlot <- dp %>% filter(Locus %in% set)
1549124471912:ld    <- getLabelsData(subsetToPlot)
1549124471914:(p    <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette))
1549124471915:nLoci <- length(set)
1549124471917:if(nLoci < rp & out.format == "pdf"){
1549124471919:# hlay    <- matrix(c(rep(1, nLoci), rep(NA, rp-nLoci)))
1549124471921:# hlay    <- matrix(c(rep(1, nLoci), NA))
1549124471924:hlay    <- matrix(c(rep(1, nLoci), NA))
1549124471927:total   <- getPlotHeight(rp)
1549124471930:cHeight <- getPlotHeight(nLoci)
1549124471932:blank   <- getPlotHeight(rp-nLoci) - 2.39
1549124471935:# heights <- matrix(c(rep(1, nLoci), rep(1/rp+2, rp-nLoci)))
1549124471937:# heights <- matrix(c(rep(1, nLoci), 0.6))
1549124471940:heights <- matrix(c(0.5, 0.6))
1549124471942:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549124471944:# p       <- grid.arrange(p, layout_matrix = hlay, heights = unit(c(cHeight, blank), c("in", "in")))
1549124471945:print(str_glue("{total}, {cHeight}, {blank}, {blank/total}"))
1549124471947:}
1549124471949:p
1549124471951:})
1549124471953:ml <- marrangeGrob(plots, nrow=1, ncol=1, #padding = unit(10, "mm"),
1549124471955:top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549124471957:ml
1549124471959:ggsave(filename = "multipage.pdf", plot = ml,
1549124471961:width  = width, height = getPlotHeight(rowsPerPage), dpi = 400, limitsize = FALSE)
1549124471965:# Generate plot
1549124471968:labelsData <- getLabelsData(data.to.plot)
1549124471970:(depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549124471972:# >>>>>>> 64e9112fd081cc5c75caf0f7d0d03cd9f5ea18f4
1549124471975:# Save plot
1549124471977:out.filename <- paste0(out.prefix, ".", out.format)
1549124471979:if (out.format == "png") {
1549124471981:ggsave(filename = out.filename, plot = depth.plot,
1549124471984:width  = width, height = height, dpi = 300, limitsize = FALSE, type = "cairo-png")
1549124471986:} else {
1549124471989:ggsave(filename = out.filename, plot = depth.plot,
1549124471991:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549124471994:}
1549124471997:# Depth distribution plot ------------------------------------------------
1549124472000:hFactor  <- 3
1549124472003:wFactor  <- 2
1549124472007:if (nLoci == 1)
1549124472010:hFactor <- 3.5
1549124472013:height       <- nLoci * hFactor
1549124472016:width        <- nAlleles * wFactor
1549124472019:# Generate plot
1549124472022:(dist.plot <- plotDepthDist(data.to.plot, labelsData, fillPalette, borderPalette))
1549124472024:# Save plot
1549124472027:out.filename <- paste0(out.prefix, "_dist.", out.format)
1549124472030:if (out.format == "png") {
1549124472032:ggsave(filename = out.filename, plot = dist.plot,
1549124472035:width  = width, height = height, type = "cairo-png", dpi = 300)
1549124472037:} else {
1549124472040:ggsave(filename = out.filename, plot = dist.plot,
1549124472043:width  = width, height = height, dpi = 400)
1549124472046:}
1549124472048:cat("Done! \n")
1549124472053:# Code core - End ---------------------------------------------------------
1549124472055:}
1549125231426:ml
1549125267747:#!/usr/bin/env Rscript
1549125267747:# ##############################################################################
1549125267748:#  Author:   Hector Fabio Espitia-Navarro
1549125267748:#            Georgia Institute of Technology
1549125267749:#  Version:  1.0
1549125267749:#  Date:     01/19/2019
1549125267750:# ##############################################################################
1549125267750:# Install required packages -----------------------------------------------
1549125267751:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549125267752:if(!file.exists(personal.lib.path))
1549125267752:dir.create(personal.lib.path)
1549125267753:printMessage <- function(message, verbose){
1549125267753:if(verbose)
1549125267754:cat(message)
1549125267754:}
1549125267755:# crayon::bold("Hola")
1549125267755:installAndLoadPackages <- function(pkg, verbose){
1549125267756:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1549125267756:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1549125267756:printMessage("Done!\n", verbose)
1549125267757:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549125267757:if (length(new.pkg)) {
1549125267757:printMessage("Installing new packages... ", verbose)
1549125267758:install.packages(new.pkg, dependencies = TRUE,
1549125267758:repos="http://cran.rstudio.com/",
1549125267759:lib = personal.lib.path)
1549125267759:printMessage("Done!\n", verbose)
1549125267759:}
1549125267760:printMessage("Loading required packages... ", verbose)
1549125267760:sapply(pkg, function(x){
1549125267760:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549125267761:})
1549125267761:printMessage("Done!\n", verbose)
1549125267762:}
1549125267763:# github.related.packages <- c("devtools", "Rcpp")
1549125267764:# packages <- c("argparser", "tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite")
1549125267764:packages <- c("tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite", "gridExtra")
1549125267765:# installAndLoadPackages(packages, verbose = TRUE)
1549125267765:installAndLoadPackages("argparser", verbose = FALSE)
1549125267862:# Command line arguments processing ---------------------------------------
1549125267862:# Get script name
1549125267863:initial.options <- commandArgs(trailingOnly = FALSE)
1549125267866:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1549125267867:# Process command line arguments
1549125267868:# Create a parser
1549125267869:p <- arg_parser("This script generates k-mer depth plots using a depth file generated by the\033[1mSTing typer\033[22m tool (-t option).",
1549125267871:name = script.name)
1549125267902:# Add Positional arguments (required)
1549125267902:p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
1549125267904:# Add options
1549125267905:p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1549125267906:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1549125267907:default = "kmer_depth")
1549125267909:p <- add_argument(p, "--sample_name", help = "Sample name.",
1549125267909:default = "input file's name")
1549125267911:p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'",
1549125267911:default = "pdf")
1549125267913:# Initialization of variables ---------------------------------------------
1549125267913:# Values to test the script using RStudio
1549125267914:script.home <- "/home/hspitia/projects/sting"
1549125267915:# inputFile   <- paste(script.home, "ERR036060.depth.2.tsv", sep = "/")
1549125267915:# geneFile    <- paste(script.home, "rmlst_failed_loci.txt", sep = "/")
1549125267916:inputFile   <- paste(script.home, "depth.tsv", sep = "/")
1549125267917:geneFile    <- paste(script.home, "loci.txt", sep = "/")
1549125267918:out.format  <- "pdf"
1549125267918:out.prefix  <- "kmer_ext_depth"
1549125267919:sample.name <- basename(inputFile)
1549125267919:# Parse command line arguments
1549125267920:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1549125267920:argv <- list()
1549125267921:if(command.line) {
1549125267921:argv <- parse_args(p)
1549125267921:} else {
1549125267922:argv <- parse_args(p, list(inputFile,
1549125267922:# "--gene_file", geneFile,
1549125267922:"--prefix", out.prefix,
1549125267923:"--sample_name", sample.name,
1549125267923:"--format", out.format))
1549125267923:}
1549125268131:# Get argument values from the command line
1549125268131:input.file  <- argv$input_file
1549125268132:gene.file   <- argv$gene_file
1549125268132:out.format  <- argv$format
1549125268133:out.prefix  <- argv$prefix
1549125268133:sample.name <- argv$sample_name
1549125268133:# if (sample.name == "")
1549125268134:if (sample.name == "input file's name")
1549125268134:sample.name <- basename(input.file)
1549125268135:# Function to check if file exists ----------------------------------------
1549125268135:CheckFileExists <- function(file.list) {
1549125268135:non.exist.files <- !file.exists(file.list)
1549125268136:if(any(non.exist.files)) {
1549125268136:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549125268136:}
1549125268137:}
1549125268137:# Check for input files ---------------------------------------------------
1549125268138:files.to.check <- c(input.file)
1549125268138:error.message  <- CheckFileExists(files.to.check)
1549125268139:if(!is.null(error.message)){
1549125268140:stop(error.message)
1549125268140:} else {
1549125268141:# Code core - Begin -------------------------------------------------------
1549125268141:installAndLoadPackages(packages, verbose = TRUE)
1549125268142:# FUNCTIONS:
1549125268142:# Function to dark a list of colors ---------------------------------------
1549125268143:darkColors <- function(palette, level){
1549125268143:rgbColors <- as.data.frame(t(as.data.frame(lapply(as.data.frame(t(col2rgb(palette))),
1549125268143:function(x) { round(x * level)}))))
1549125268144:unname(sapply(rgbColors, function(x){ rgb(x[1], x[2], x[3], maxColorValue=255) }))
1549125268144:}
1549125268145:# Function for plotting k-mer depth ----------------------------------------
1549125268145:plotDepth <- function(dataToPlot, labelsData, fillColors, borderColors) {
1549125268146:max.x       <- max(dataToPlot$Position)
1549125268147:max.y       <- max(dataToPlot$kmerDepth)
1549125268147:x.limits    <- seq(0, max.x, 100)
1549125268148:y.limits    <- seq(0, max.y, 20)
1549125268149:nTopAlleles <- length(unique(dataToPlot$N))
1549125268150:d.plot <- ggplot(data = dataToPlot, aes(x = Position, y = kmerDepth),
1549125268150:size = 0.2) +
1549125268151:geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1549125268152:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1549125268152:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1549125268153:# scale_color_manual(values = getPalette) +
1549125268154:scale_color_manual(values = borderColors) +
1549125268154:scale_fill_manual(values = fillColors) +
1549125268155:geom_text(data = labelsData,
1549125268157:# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1549125268158:# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1549125268159:aes(x = Length, y = info.y * 0.5, group = Locus,
1549125268159:hjust = 0,
1549125268160:label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1549125268161:show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1549125268162:nudge_x = -(max.x*0.025)
1549125268163:) +
1549125268164:geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1549125268165:alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1549125268166:# geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1549125268167:size = annotTextSize * 1.05, color = "#333333") +
1549125268168:geom_text(data = labelsData,
1549125268168:parse = TRUE,
1549125268169:aes(x = info.x, y = info.y,
1549125268170:label = paste0("{{{{italic(s)==", format(round(Score, 2), nsmall = 2),
1549125268172:"*~~~italic(hat(f)[k])} ==", format(round(NormKmerCount, 2), nsmall = 2),
1549125268173:"*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1549125268174:"*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1549125268175:"~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1549125268177:hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1549125268178:facet_grid(Locus ~ N, scales = "free_y") +
1549125268179:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1549125268180:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1549125268181:theme_bw() +
1549125268182:plotTheme +
1549125268183:labs(title    = expression(italic("k")*"-mer depth"),
1549125268185:subtitle = paste("Top", nTopAlleles, "alleles/genes on sample", sample.name),
1549125268186:x        = "Position along sequence (bp)",
1549125268187:y        = expression(paste(italic(k), "-mer depth")),
1549125268188:# caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1549125268191:caption  = expression(paste(italic("s"),": score;  ",
1549125268194:italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1549125268196:italic("c"),": coverage;  ",
1549125268198:italic(sigma), ": standard deviation;  ",
1549125268201:italic(bar(d)), ": average depth"), sep = "")
1549125268202:)
1549125268203:# guides(fill  = guide_legend(title  ="Allele"), color = FALSE) +
1549125268204:d.plot
1549125268206:}
1549125268207:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549125268208:# Function for plotting k-mer depth distributions as box plots ------------
1549125268210:plotDepthDist <- function(data.to.plot, labelsData, fillColors, borderColors){
1549125268211:dist.plot <- ggplot(data.to.plot, aes(x = AlPos, y = kmerDepth)) +
1549125268212:geom_jitter(position = position_jitter(width=.3), aes(color = Locus),
1549125268213:alpha = 0.4, size = 1.2, shape = 16) +
1549125268228:geom_boxplot(alpha = 0.7, size = 0.5, aes(fill = Locus, color = Locus)) +
1549125268230:geom_text(data = labelsData, size = 4, hjust = "center",
1549125268231:aes(x = N,#(N - 0.5),
1549125268232:y = info.y * 1.05,
1549125268234:label = Allele),
1549125268235:color = "#333333") +
1549125268236:geom_text(data = labelsData, size = 3, hjust = "center",
1549125268238:parse = TRUE,
1549125268239:aes(x = N,#(N - 0.4),
1549125268242:# y = info.y * 0.08,
1549125268243:y = info.y * 0.96,
1549125268245:label = paste0("sigma ==",format(round(sd, 1), nsmall = 1))),
1549125268246:color = "#333333") +
1549125268247:geom_point(data = labelsData,
1549125268249:shape = 23, fill = "white",
1549125268251:aes(x = N, y = meanDepth)) +
1549125268253:facet_grid(Locus ~ ., scales = "free_y") +
1549125268254:scale_color_manual(values = borderColors) +
1549125268256:scale_fill_manual(values = fillColors) +
1549125268258:labs(title = expression(paste(italic("k"), "-mer depth distribution")),
1549125268259:subtitle = basename(input.file),
1549125268261:x        = "Allele Ranking",
1549125268262:y        = expression(paste(italic(k), "-mer depth")),
1549125268265:caption  = expression(paste(italic(sigma), ": standard deviation")))+#,"sd: standard deviation") +
1549125268271:theme_bw() +
1549125268273:plotTheme +
1549125268275:theme(axis.text.x   = element_text(angle = 0, size = axisTextSize,
1549125268276:vjust = 1, hjust = 0.5, color = textColor))
1549125268278:dist.plot
1549125268279:}
1549125268281:# Function to get data for annotations ------------------------------------
1549125268283:getLabelsData <- function(data.to.plot) {
1549125268284:max.x <- max(data.to.plot$Position)
1549125268286:max.y <- max(data.to.plot$kmerDepth)
1549125268289:nLoci    <- length(unique(data.to.plot$Locus))
1549125268290:nAlleles <- length(unique(data.to.plot$N))
1549125268293:alleles     <- unique(data.to.plot$Allele)
1549125268295:loci        <- as.character(unique(data.to.plot$Locus))
1549125268297:lociLabels  <- c()
1549125268298:name.x      <- c()
1549125268300:name.y      <- c()
1549125268302:info.x      <- c()
1549125268303:info.y      <- c()
1549125268305:covs        <- c()
1549125268306:avgDepths   <- c()
1549125268308:meanDepth.x <- c()
1549125268309:meanDepth.y <- c()
1549125268311:for (i in loci) {
1549125268313:lociLabels <- c(lociLabels, rep(i, nAlleles))
1549125268314:}
1549125268316:for (allele in alleles) {
1549125268318:locus       <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1549125268319:maxPos      <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549125268321:maxDepth    <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549125268322:# name.x      <- c(name.x, (maxPos / 2))
1549125268324:name.x      <- c(name.x, (max.x / 2))
1549125268326:name.y      <- c(name.y, (maxDepth * 0.25))
1549125268328:info.x      <- c(info.x, max.x * 0.02)
1549125268329:info.y      <- c(info.y, maxDepth * 1.5)
1549125268331:covs        <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549125268333:avgDepths   <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549125268335:}
1549125268336:labelsData <- data.frame(Allele = alleles,
1549125268338:name.x = name.x,
1549125268340:name.y = name.y,
1549125268342:info.x = info.x,
1549125268344:info.y = info.y,
1549125268346:meanDepth = avgDepths,
1549125268347:N = rep(unique(data.to.plot$N), nLoci),
1549125268350:Locus = lociLabels,
1549125268352:cov = covs
1549125268353:) %>%
1549125268355:left_join(data.to.plot %>%
1549125268357:group_by(Allele, Length, NormKmerCount, Score) %>%
1549125268359:summarise(sd = sd(kmerDepth)),
1549125268360:by = c("Allele" = "Allele")) #%>%
1549125268361:# mutate(
1549125268363:#   info   = paste0("cov=", format(round(covs, 1), nsmall = 1), "%   ",
1549125268364:#                   paste0("ad=", format(round(avgDepths, 1), nsmall = 1)),
1549125268366:#                   "   ",
1549125268367:#                   # expression(paste(italic(sigma), "=",format(round(sd, 1), nsmall = 1))))
1549125268368:#                   paste0("sd=", format(round(sd, 1), nsmall = 1))
1549125268369:#   )
1549125268371:# )
1549125268372:labelsData
1549125268374:}
1549125268376:# Check for genes/loci file to filter loci to plot  -----------------------
1549125268378:loci.to.plot <- c()
1549125268379:# if (!is.null(gene.file)|| gene.file != "") {
1549125268381:if (!is.null(gene.file) && !is.na(gene.file) && gene.file != "") {
1549125268382:error.message <- CheckFileExists(gene.file)
1549125268383:if (!is.null(error.message)){
1549125268385:cat("Warning:")
1549125268386:cat(error.message)
1549125268387:cat("  The plotting process will continue without filtering genes/loci.\n")
1549125268388:} else {
1549125268390:loci.to.plot <- scan(gene.file, character(), quiet = TRUE)
1549125268391:}
1549125268393:}
1549125268395:# Data processing and plotting --------------------------------------------
1549125268397:cat("Plotting depths... ")
1549125268398:options(stringsAsFactors = T, readr.num_columns = 0)
1549125268401:# Load data
1549125268403:inData <- read_tsv(input.file)
1549125268405:# inData <- read.delim(input.file)
1549125268409:# colnames(inData) <- c("Allele", "Position", "k-mer Depth", "Weighted k-mer Depth")
1549125268411:colnames(inData) <- c("N", "Locus", "Allele", "Position", "kmerDepth",
1549125268412:"NormKmerCount", "Coverage", "Score", "AverageKmerDepth")
1549125268416:# Transform data
1549125268417:data.to.plot <- inData %>%
1549125268419:left_join(inData %>%
1549125268420:group_by(Allele) %>%
1549125268422:summarise(Length = n()), by = "Allele") %>%
1549125268424:arrange(Locus, N) %>%
1549125268425:mutate(
1549125268427:AlPos = factor(N, levels = unique(.$N)),
1549125268429:Allele = factor(Allele, levels = unique(inData$Allele)))
1549125268430:# Filtering loci/genes from genes_file input param
1549125268432:if (length(loci.to.plot) > 0) {
1549125268434:data.to.plot <- data.to.plot %>%
1549125268436:filter(Locus %in% loci.to.plot)
1549125268437:}
1549125268440:longestLocusNameLength <- max(str_length(as.character(unique(inData$Locus))))
1549125268442:# labelsData <- getLabelsData(data.to.plot)
1549125268443:nLoci      <- length(unique(data.to.plot$Locus))
1549125268445:nAlleles   <- length(unique(data.to.plot$N))
1549125268448:# Theme-related variable definition ---------------------------------------
1549125268450:annotLinetype         <- "solid"
1549125268465:annotTextSize         <- 4
1549125268467:axisColor             <- "#000000"
1549125268469:axisTextSize          <- 12
1549125268471:barAnnotTextSize      <- 4
1549125268473:baseTextSize          <- 14
1549125268475:gridColor             <- "#e0e0e0"
1549125268489:lineSize              <- 0.3
1549125268492:panelColor            <- "#fff4e0"
1549125268494:panelColor            <- "#f2efe6"
1549125268496:# panelColor            <- "#ffffff"
1549125268498:# stripBackground       <- "#cccccc"
1549125268512:stripTextSize         <- axisTextSize
1549125268514:if (longestLocusNameLength > 12)
1549125268517:stripTextSize       <- stripTextSize * 0.6
1549125268519:textColor             <- "#000000"
1549125268521:# baseFontFamily        <- "Arial"
1549125268538:# Custom theme definition for plots ---------------------------------------
1549125268540:plotTheme <- list(
1549125268542:theme(
1549125268544:axis.text.x      = element_text(angle = 50, size = axisTextSize,
1549125268546:vjust = 1, hjust = 1, color = textColor),
1549125268561:axis.text.y      = element_text(size = axisTextSize, color = textColor),
1549125268563:axis.ticks       = element_line(size = lineSize),
1549125268565:axis.title.x     = element_text(margin = margin(6,0,8,0, "mm")),
1549125268568:axis.title.y     = element_text(margin = margin(0,6,0,0, "mm")),
1549125268570:legend.position  = "none",
1549125268576:panel.border     = element_rect(size = lineSize),
1549125268579:panel.background = element_rect(fill = panelColor),
1549125268581:panel.grid       = element_line(size = lineSize, colour = gridColor),
1549125268584:panel.grid.minor = element_blank(),
1549125268587:plot.margin      = margin(10,10,0,10, "mm"),
1549125268591:panel.spacing    = unit(4, "mm"),
1549125268594:plot.caption     = element_text(size = baseTextSize * 0.7, face = "italic"),
1549125268597:plot.title       = element_text(hjust = 0.5),
1549125268600:plot.subtitle    = element_text(hjust = 0.5),
1549125268607:strip.background = element_rect(size = lineSize),
1549125268611:strip.text       = element_text(size = stripTextSize),
1549125268613:text             = element_text(size = baseTextSize)
1549125268616:)
1549125268618:)
1549125268624:# Palette definition ------------------------------------------------------
1549125268627:# colourCount <- length(unique(inData$Locus))
1549125268629:colourCount <- nLoci
1549125268631:# colourCount  <- length(unique(data.to.plot$Allele))
1549125268634:# fillPalette  <- colorRampPalette(brewer.pal(8, "Dark2"))(colourCount)
1549125268637:# fillPalette  <- colorRampPalette(brewer.pal(12, "Paired"))(colourCount)
1549125268641:# fillPalette  <- colorRampPalette(brewer.pal(9, "Set1"))(colourCount)
1549125268644:# fillPalette  <- colorRampPalette(pal_npg("nrc")(10))(colourCount)
1549125268646:# fillPalette  <- colorRampPalette(pal_d3("category20")(20))(colourCount)
1549125268649:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549125268651:borderPalette <- darkColors(fillPalette, 0.6)
1549125268654:# library("scales"); show_col(fillPalette); show_col(borderPalette)
1549125268664:# # Depth plot -------------------------------------------------------------
1549125268667:# hFactor  <- 1.2
1549125268669:# wFactor  <- 4.8
1549125268672:# # if (nLoci == 1)
1549125268675:# #   hFactor <- 1.4;
1549125268679:# height <- (nLoci * hFactor) + 2 + 0.1 + ((nLoci-1)*0.05)
1549125268681:# width  <- nAlleles * wFactor
1549125268683:# # Generate plot
1549125268685:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549125268687:# # Save plot
1549125268689:# out.filename <- paste0(out.prefix, ".", out.format)
1549125268691:# if (out.format == "png") {
1549125268693:# 	ggsave(filename = out.filename, plot = depth.plot,
1549125268695:# 				 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549125268697:# } else {
1549125268699:# 	ggsave(filename = out.filename, plot = depth.plot,
1549125268701:# 				 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549125268702:# }
1549125268707:# Depth plot -------------------------------------------------------------
1549125268710:# <<<<<<< HEAD
1549125268711:#   rowsPerPage <- 7
1549125268713:#   hFactor     <- 1.2
1549125268715:#   wFactor     <- 4.8
1549125268717:#   rows        <- nLoci
1549125268719:#   if (nLoci > rowsPerPage)
1549125268720:#     rows <- rowsPerPage;
1549125268725:#   height <- (rows * hFactor) + 2 + 0.1 + ((rows-1)*0.05)
1549125268727:#   width  <- nAlleles * wFactor
1549125268729:#
1549125268731:#   loci     <- unique(data.to.plot$Locus)
1549125268733:#   lociList <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549125268735:#   lociList <- split(loci, ceiling(seq_along(loci)/3))
1549125268737:#   plotList <- list()
1549125268740:#   for (lociSet in lociList) {
1549125268743:#   	print(lociSet)
1549125268745:#   	subset.to.plot <- data.to.plot %>%
1549125268747:#   		filter(Locus %in% lociSet)
1549125268749:#   	labelsData <- getLabelsData(subset.to.plot)
1549125268751:#   	currentPlot <- plotDepth(subset.to.plot, labelsData, fillPalette, borderPalette)
1549125268754:#   	plotList <- c(plotList, list(currentPlot))
1549125268756:#   	# print(currentPlot)
1549125268760:#   	# print(unique(subset.to.plot$Locus))
1549125268762:#   }
1549125268764:#  	length(plotList)
1549125268766:#
1549125268768:#  	if (out.format == "pdf") {
1549125268770:#  		out.filename <- paste(out.prefix, out.format, sep = ".")
1549125268772:#  		pdf(out.filename)
1549125268775:#  		for (i in seq_along(plotList)) {
1549125268777:#  			nLociToPlot <- length(lociList[[i]])
1549125268779:#  			height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1549125268781:#  			width  <- nAlleles * wFactor
1549125268783:#  			# out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549125268785:#  			# print(out.filename)
1549125268787:#  			print(plotList[[i]])
1549125268790:#  		}
1549125268793:#  		dev.off()
1549125268795:#
1549125268797:#  	}
1549125268800:#  	for (i in seq_along(plotList)) {
1549125268803:#  		nLociToPlot <- length(lociList[[i]])
1549125268806:#  		height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1549125268809:#  		width  <- nAlleles * wFactor
1549125268812:#  		out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549125268814:#  		print(out.filename)
1549125268817:#  		pdf(out.filename, width = width, height = height)
1549125268820:#  		print(plotList[[i]])
1549125268823:#  		dev.off()
1549125268826:#  	}
1549125268829:#  	else if (out.format == "png") {
1549125268832:#  		ggsave(filename = out.filename, plot = depth.plot,
1549125268835:#  					 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549125268838:#  	} else {
1549125268841:#  		ggsave(filename = out.filename, plot = depth.plot,
1549125268844:#  					 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549125268847:#  	}
1549125268850:#
1549125268853:#  	plot_grid()
1549125268855:#  	# Generate plot
1549125268858:#   # (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549125268871:# =======
1549125268874:hFactor  <- 1.6
1549125268880:wFactor  <- 4.8
1549125268883:# if (nLoci == 1)
1549125268886:#   hFactor <- 1.4;
1549125268895:#               loci          titles and     strip    space between locus
1549125268898:#                             footnote
1549125268902:height <- (nLoci * hFactor) + 2              + 0.1    + ((nLoci-1)*0.05)
1549125268909:getPlotHeight <- function(rows){
1549125268913:# loci + titles and foot note + strip + space between locus
1549125268917:(rows*hFactor) + 2.39 + ((rows-1)*0.157) #in
1549125268921:}
1549125268929:width  <- nAlleles * wFactor
1549125268932:height <- getPlotHeight(nLoci)
1549125268936:rowsPerPage <- 5
1549125268941:loci <- unique(data.to.plot$Locus)
1549125268944:sets <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549125268955:plots <- lapply(sets, function(set, dp=data.to.plot, rp=rowsPerPage){
1549125268967:# set <- sets[[2]]
1549125268970:subsetToPlot <- dp %>% filter(Locus %in% set)
1549125268973:ld    <- getLabelsData(subsetToPlot)
1549125268976:(p    <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette))
1549125268979:nLoci <- length(set)
1549125268982:if(nLoci < rp & out.format == "pdf"){
1549125268985:# hlay    <- matrix(c(rep(1, nLoci), rep(NA, rp-nLoci)))
1549125268988:# hlay    <- matrix(c(rep(1, nLoci), NA))
1549125268992:hlay    <- matrix(1, NA)
1549125268995:total   <- getPlotHeight(rp)
1549125268998:cHeight <- getPlotHeight(nLoci)
1549125269002:blank   <- getPlotHeight(rp-nLoci) - 2.39
1549125269005:# heights <- matrix(c(rep(1, nLoci), rep(1/rp+2, rp-nLoci)))
1549125269008:# heights <- matrix(c(rep(1, nLoci), 0.6))
1549125269012:heights <- matrix(c(cHeight/total, blank/total))
1549125269015:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549125269018:# p       <- grid.arrange(p, layout_matrix = hlay, heights = unit(c(cHeight, blank), c("in", "in")))
1549125269021:print(str_glue("{total}, {cHeight}, {blank}, {blank/total}"))
1549125269025:}
1549125269028:p
1549125269031:})
1549125269034:ml <- marrangeGrob(plots, nrow=1, ncol=1, #padding = unit(10, "mm"),
1549125269037:top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549125269040:ml
1549125269043:ggsave(filename = "multipage.pdf", plot = ml,
1549125269046:width  = width, height = getPlotHeight(rowsPerPage), dpi = 400, limitsize = FALSE)
1549125269054:# Generate plot
1549125269058:labelsData <- getLabelsData(data.to.plot)
1549125269066:(depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549125269070:# >>>>>>> 64e9112fd081cc5c75caf0f7d0d03cd9f5ea18f4
1549125269074:# Save plot
1549125269077:out.filename <- paste0(out.prefix, ".", out.format)
1549125269080:if (out.format == "png") {
1549125269083:ggsave(filename = out.filename, plot = depth.plot,
1549125269086:width  = width, height = height, dpi = 300, limitsize = FALSE, type = "cairo-png")
1549125269090:} else {
1549125269094:ggsave(filename = out.filename, plot = depth.plot,
1549125269097:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549125269100:}
1549125269107:# Depth distribution plot ------------------------------------------------
1549125269111:hFactor  <- 3
1549125269114:wFactor  <- 2
1549125269117:if (nLoci == 1)
1549125269120:hFactor <- 3.5
1549125269124:height       <- nLoci * hFactor
1549125269127:width        <- nAlleles * wFactor
1549125269130:# Generate plot
1549125269133:(dist.plot <- plotDepthDist(data.to.plot, labelsData, fillPalette, borderPalette))
1549125269136:# Save plot
1549125269140:out.filename <- paste0(out.prefix, "_dist.", out.format)
1549125269143:if (out.format == "png") {
1549125269146:ggsave(filename = out.filename, plot = dist.plot,
1549125269150:width  = width, height = height, type = "cairo-png", dpi = 300)
1549125269153:} else {
1549125269156:ggsave(filename = out.filename, plot = dist.plot,
1549125269159:width  = width, height = height, dpi = 400)
1549125269162:}
1549125269166:cat("Done! \n")
1549125269172:# Code core - End ---------------------------------------------------------
1549125269176:}
1549125281608:#!/usr/bin/env Rscript
1549125281609:# ##############################################################################
1549125281610:#  Author:   Hector Fabio Espitia-Navarro
1549125281610:#            Georgia Institute of Technology
1549125281611:#  Version:  1.0
1549125281611:#  Date:     01/19/2019
1549125281611:# ##############################################################################
1549125281612:# Install required packages -----------------------------------------------
1549125281612:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549125281613:if(!file.exists(personal.lib.path))
1549125281613:dir.create(personal.lib.path)
1549125281614:printMessage <- function(message, verbose){
1549125281614:if(verbose)
1549125281615:cat(message)
1549125281615:}
1549125281616:# crayon::bold("Hola")
1549125281616:installAndLoadPackages <- function(pkg, verbose){
1549125281617:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1549125281617:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1549125281617:printMessage("Done!\n", verbose)
1549125281618:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549125281618:if (length(new.pkg)) {
1549125281618:printMessage("Installing new packages... ", verbose)
1549125281619:install.packages(new.pkg, dependencies = TRUE,
1549125281619:repos="http://cran.rstudio.com/",
1549125281620:lib = personal.lib.path)
1549125281621:printMessage("Done!\n", verbose)
1549125281621:}
1549125281622:printMessage("Loading required packages... ", verbose)
1549125281622:sapply(pkg, function(x){
1549125281622:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549125281623:})
1549125281623:printMessage("Done!\n", verbose)
1549125281624:}
1549125281625:# github.related.packages <- c("devtools", "Rcpp")
1549125281626:# packages <- c("argparser", "tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite")
1549125281626:packages <- c("tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite", "gridExtra")
1549125281627:# installAndLoadPackages(packages, verbose = TRUE)
1549125281627:installAndLoadPackages("argparser", verbose = FALSE)
1549125281670:# Command line arguments processing ---------------------------------------
1549125281671:# Get script name
1549125281671:initial.options <- commandArgs(trailingOnly = FALSE)
1549125281672:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1549125281673:# Process command line arguments
1549125281674:# Create a parser
1549125281674:p <- arg_parser("This script generates k-mer depth plots using a depth file generated by the\033[1mSTing typer\033[22m tool (-t option).",
1549125281675:name = script.name)
1549125281677:# Add Positional arguments (required)
1549125281678:p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
1549125281679:# Add options
1549125281680:p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1549125281681:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1549125281682:default = "kmer_depth")
1549125281683:p <- add_argument(p, "--sample_name", help = "Sample name.",
1549125281684:default = "input file's name")
1549125281685:p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'",
1549125281686:default = "pdf")
1549125281687:# Initialization of variables ---------------------------------------------
1549125281688:# Values to test the script using RStudio
1549125281688:script.home <- "/home/hspitia/projects/sting"
1549125281689:# inputFile   <- paste(script.home, "ERR036060.depth.2.tsv", sep = "/")
1549125281690:# geneFile    <- paste(script.home, "rmlst_failed_loci.txt", sep = "/")
1549125281690:inputFile   <- paste(script.home, "depth.tsv", sep = "/")
1549125281691:geneFile    <- paste(script.home, "loci.txt", sep = "/")
1549125281692:out.format  <- "pdf"
1549125281692:out.prefix  <- "kmer_ext_depth"
1549125281693:sample.name <- basename(inputFile)
1549125281694:# Parse command line arguments
1549125281695:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1549125281695:argv <- list()
1549125281696:if(command.line) {
1549125281697:argv <- parse_args(p)
1549125281697:} else {
1549125281697:argv <- parse_args(p, list(inputFile,
1549125281698:# "--gene_file", geneFile,
1549125281698:"--prefix", out.prefix,
1549125281699:"--sample_name", sample.name,
1549125281699:"--format", out.format))
1549125281700:}
1549125281702:# Get argument values from the command line
1549125281702:input.file  <- argv$input_file
1549125281703:gene.file   <- argv$gene_file
1549125281704:out.format  <- argv$format
1549125281705:out.prefix  <- argv$prefix
1549125281706:sample.name <- argv$sample_name
1549125281707:# if (sample.name == "")
1549125281707:if (sample.name == "input file's name")
1549125281708:sample.name <- basename(input.file)
1549125281709:# Function to check if file exists ----------------------------------------
1549125281709:CheckFileExists <- function(file.list) {
1549125281710:non.exist.files <- !file.exists(file.list)
1549125281710:if(any(non.exist.files)) {
1549125281711:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549125281711:}
1549125281712:}
1549125281712:# Check for input files ---------------------------------------------------
1549125281713:files.to.check <- c(input.file)
1549125281714:error.message  <- CheckFileExists(files.to.check)
1549125281715:if(!is.null(error.message)){
1549125281715:stop(error.message)
1549125281716:} else {
1549125281716:# Code core - Begin -------------------------------------------------------
1549125281717:installAndLoadPackages(packages, verbose = TRUE)
1549125281717:# FUNCTIONS:
1549125281718:# Function to dark a list of colors ---------------------------------------
1549125281718:darkColors <- function(palette, level){
1549125281719:rgbColors <- as.data.frame(t(as.data.frame(lapply(as.data.frame(t(col2rgb(palette))),
1549125281719:function(x) { round(x * level)}))))
1549125281720:unname(sapply(rgbColors, function(x){ rgb(x[1], x[2], x[3], maxColorValue=255) }))
1549125281720:}
1549125281721:# Function for plotting k-mer depth ----------------------------------------
1549125281722:plotDepth <- function(dataToPlot, labelsData, fillColors, borderColors) {
1549125281722:max.x       <- max(dataToPlot$Position)
1549125281723:max.y       <- max(dataToPlot$kmerDepth)
1549125281724:x.limits    <- seq(0, max.x, 100)
1549125281725:y.limits    <- seq(0, max.y, 20)
1549125281726:nTopAlleles <- length(unique(dataToPlot$N))
1549125281728:d.plot <- ggplot(data = dataToPlot, aes(x = Position, y = kmerDepth),
1549125281728:size = 0.2) +
1549125281729:geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1549125281730:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1549125281731:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1549125281732:# scale_color_manual(values = getPalette) +
1549125281733:scale_color_manual(values = borderColors) +
1549125281734:scale_fill_manual(values = fillColors) +
1549125281735:geom_text(data = labelsData,
1549125281736:# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1549125281737:# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1549125281738:aes(x = Length, y = info.y * 0.5, group = Locus,
1549125281740:hjust = 0,
1549125281741:label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1549125281742:show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1549125281743:nudge_x = -(max.x*0.025)
1549125281744:) +
1549125281745:geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1549125281746:alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1549125281747:# geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1549125281748:size = annotTextSize * 1.05, color = "#333333") +
1549125281749:geom_text(data = labelsData,
1549125281749:parse = TRUE,
1549125281750:aes(x = info.x, y = info.y,
1549125281750:label = paste0("{{{{italic(s)==", format(round(Score, 2), nsmall = 2),
1549125281751:"*~~~italic(hat(f)[k])} ==", format(round(NormKmerCount, 2), nsmall = 2),
1549125281752:"*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1549125281752:"*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1549125281753:"~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1549125281753:hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1549125281754:facet_grid(Locus ~ N, scales = "free_y") +
1549125281755:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1549125281755:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1549125281757:theme_bw() +
1549125281757:plotTheme +
1549125281758:labs(title    = expression(italic("k")*"-mer depth"),
1549125281759:subtitle = paste("Top", nTopAlleles, "alleles/genes on sample", sample.name),
1549125281759:x        = "Position along sequence (bp)",
1549125281760:y        = expression(paste(italic(k), "-mer depth")),
1549125281761:# caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1549125281763:caption  = expression(paste(italic("s"),": score;  ",
1549125281764:italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1549125281766:italic("c"),": coverage;  ",
1549125281767:italic(sigma), ": standard deviation;  ",
1549125281769:italic(bar(d)), ": average depth"), sep = "")
1549125281770:)
1549125281770:# guides(fill  = guide_legend(title  ="Allele"), color = FALSE) +
1549125281771:d.plot
1549125281772:}
1549125281773:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549125281774:# Function for plotting k-mer depth distributions as box plots ------------
1549125281775:plotDepthDist <- function(data.to.plot, labelsData, fillColors, borderColors){
1549125281776:dist.plot <- ggplot(data.to.plot, aes(x = AlPos, y = kmerDepth)) +
1549125281777:geom_jitter(position = position_jitter(width=.3), aes(color = Locus),
1549125281778:alpha = 0.4, size = 1.2, shape = 16) +
1549125281779:geom_boxplot(alpha = 0.7, size = 0.5, aes(fill = Locus, color = Locus)) +
1549125281780:geom_text(data = labelsData, size = 4, hjust = "center",
1549125281781:aes(x = N,#(N - 0.5),
1549125281781:y = info.y * 1.05,
1549125281782:label = Allele),
1549125281783:color = "#333333") +
1549125281784:geom_text(data = labelsData, size = 3, hjust = "center",
1549125281785:parse = TRUE,
1549125281787:aes(x = N,#(N - 0.4),
1549125281788:# y = info.y * 0.08,
1549125281789:y = info.y * 0.96,
1549125281790:label = paste0("sigma ==",format(round(sd, 1), nsmall = 1))),
1549125281791:color = "#333333") +
1549125281791:geom_point(data = labelsData,
1549125281792:shape = 23, fill = "white",
1549125281793:aes(x = N, y = meanDepth)) +
1549125281794:facet_grid(Locus ~ ., scales = "free_y") +
1549125281795:scale_color_manual(values = borderColors) +
1549125281796:scale_fill_manual(values = fillColors) +
1549125281797:labs(title = expression(paste(italic("k"), "-mer depth distribution")),
1549125281798:subtitle = basename(input.file),
1549125281799:x        = "Allele Ranking",
1549125281801:y        = expression(paste(italic(k), "-mer depth")),
1549125281802:caption  = expression(paste(italic(sigma), ": standard deviation")))+#,"sd: standard deviation") +
1549125281803:theme_bw() +
1549125281804:plotTheme +
1549125281805:theme(axis.text.x   = element_text(angle = 0, size = axisTextSize,
1549125281806:vjust = 1, hjust = 0.5, color = textColor))
1549125281807:dist.plot
1549125281809:}
1549125281810:# Function to get data for annotations ------------------------------------
1549125281811:getLabelsData <- function(data.to.plot) {
1549125281812:max.x <- max(data.to.plot$Position)
1549125281813:max.y <- max(data.to.plot$kmerDepth)
1549125281815:nLoci    <- length(unique(data.to.plot$Locus))
1549125281816:nAlleles <- length(unique(data.to.plot$N))
1549125281818:alleles     <- unique(data.to.plot$Allele)
1549125281819:loci        <- as.character(unique(data.to.plot$Locus))
1549125281820:lociLabels  <- c()
1549125281821:name.x      <- c()
1549125281822:name.y      <- c()
1549125281823:info.x      <- c()
1549125281824:info.y      <- c()
1549125281826:covs        <- c()
1549125281827:avgDepths   <- c()
1549125281828:meanDepth.x <- c()
1549125281829:meanDepth.y <- c()
1549125281830:for (i in loci) {
1549125281831:lociLabels <- c(lociLabels, rep(i, nAlleles))
1549125281832:}
1549125281833:for (allele in alleles) {
1549125281834:locus       <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1549125281835:maxPos      <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549125281836:maxDepth    <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549125281838:# name.x      <- c(name.x, (maxPos / 2))
1549125281839:name.x      <- c(name.x, (max.x / 2))
1549125281840:name.y      <- c(name.y, (maxDepth * 0.25))
1549125281841:info.x      <- c(info.x, max.x * 0.02)
1549125281842:info.y      <- c(info.y, maxDepth * 1.5)
1549125281843:covs        <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549125281845:avgDepths   <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549125281846:}
1549125281847:labelsData <- data.frame(Allele = alleles,
1549125281848:name.x = name.x,
1549125281849:name.y = name.y,
1549125281851:info.x = info.x,
1549125281852:info.y = info.y,
1549125281853:meanDepth = avgDepths,
1549125281854:N = rep(unique(data.to.plot$N), nLoci),
1549125281855:Locus = lociLabels,
1549125281857:cov = covs
1549125281858:) %>%
1549125281859:left_join(data.to.plot %>%
1549125281860:group_by(Allele, Length, NormKmerCount, Score) %>%
1549125281861:summarise(sd = sd(kmerDepth)),
1549125281863:by = c("Allele" = "Allele")) #%>%
1549125281864:# mutate(
1549125281866:#   info   = paste0("cov=", format(round(covs, 1), nsmall = 1), "%   ",
1549125281867:#                   paste0("ad=", format(round(avgDepths, 1), nsmall = 1)),
1549125281869:#                   "   ",
1549125281870:#                   # expression(paste(italic(sigma), "=",format(round(sd, 1), nsmall = 1))))
1549125281871:#                   paste0("sd=", format(round(sd, 1), nsmall = 1))
1549125281872:#   )
1549125281874:# )
1549125281875:labelsData
1549125281877:}
1549125281879:# Check for genes/loci file to filter loci to plot  -----------------------
1549125281885:loci.to.plot <- c()
1549125281887:# if (!is.null(gene.file)|| gene.file != "") {
1549125281888:if (!is.null(gene.file) && !is.na(gene.file) && gene.file != "") {
1549125281890:error.message <- CheckFileExists(gene.file)
1549125281892:if (!is.null(error.message)){
1549125281893:cat("Warning:")
1549125281895:cat(error.message)
1549125281897:cat("  The plotting process will continue without filtering genes/loci.\n")
1549125281898:} else {
1549125281900:loci.to.plot <- scan(gene.file, character(), quiet = TRUE)
1549125281901:}
1549125281903:}
1549125281906:# Data processing and plotting --------------------------------------------
1549125281908:cat("Plotting depths... ")
1549125281910:options(stringsAsFactors = T, readr.num_columns = 0)
1549125281913:# Load data
1549125281915:inData <- read_tsv(input.file)
1549125281917:# inData <- read.delim(input.file)
1549125281921:# colnames(inData) <- c("Allele", "Position", "k-mer Depth", "Weighted k-mer Depth")
1549125281922:colnames(inData) <- c("N", "Locus", "Allele", "Position", "kmerDepth",
1549125281923:"NormKmerCount", "Coverage", "Score", "AverageKmerDepth")
1549125281926:# Transform data
1549125281928:data.to.plot <- inData %>%
1549125281929:left_join(inData %>%
1549125281931:group_by(Allele) %>%
1549125281933:summarise(Length = n()), by = "Allele") %>%
1549125281935:arrange(Locus, N) %>%
1549125281937:mutate(
1549125281939:AlPos = factor(N, levels = unique(.$N)),
1549125281941:Allele = factor(Allele, levels = unique(inData$Allele)))
1549125281943:# Filtering loci/genes from genes_file input param
1549125281945:if (length(loci.to.plot) > 0) {
1549125281948:data.to.plot <- data.to.plot %>%
1549125281950:filter(Locus %in% loci.to.plot)
1549125281952:}
1549125281956:longestLocusNameLength <- max(str_length(as.character(unique(inData$Locus))))
1549125281958:# labelsData <- getLabelsData(data.to.plot)
1549125281960:nLoci      <- length(unique(data.to.plot$Locus))
1549125281963:nAlleles   <- length(unique(data.to.plot$N))
1549125281967:# Theme-related variable definition ---------------------------------------
1549125281969:annotLinetype         <- "solid"
1549125281971:annotTextSize         <- 4
1549125281974:axisColor             <- "#000000"
1549125281976:axisTextSize          <- 12
1549125281978:barAnnotTextSize      <- 4
1549125281979:baseTextSize          <- 14
1549125281981:gridColor             <- "#e0e0e0"
1549125281982:lineSize              <- 0.3
1549125281984:panelColor            <- "#fff4e0"
1549125281986:panelColor            <- "#f2efe6"
1549125281987:# panelColor            <- "#ffffff"
1549125281989:# stripBackground       <- "#cccccc"
1549125281990:stripTextSize         <- axisTextSize
1549125281992:if (longestLocusNameLength > 12)
1549125281994:stripTextSize       <- stripTextSize * 0.6
1549125281995:textColor             <- "#000000"
1549125281996:# baseFontFamily        <- "Arial"
1549125282000:# Custom theme definition for plots ---------------------------------------
1549125282001:plotTheme <- list(
1549125282003:theme(
1549125282005:axis.text.x      = element_text(angle = 50, size = axisTextSize,
1549125282007:vjust = 1, hjust = 1, color = textColor),
1549125282009:axis.text.y      = element_text(size = axisTextSize, color = textColor),
1549125282011:axis.ticks       = element_line(size = lineSize),
1549125282013:axis.title.x     = element_text(margin = margin(6,0,8,0, "mm")),
1549125282014:axis.title.y     = element_text(margin = margin(0,6,0,0, "mm")),
1549125282016:legend.position  = "none",
1549125282018:panel.border     = element_rect(size = lineSize),
1549125282021:panel.background = element_rect(fill = panelColor),
1549125282023:panel.grid       = element_line(size = lineSize, colour = gridColor),
1549125282025:panel.grid.minor = element_blank(),
1549125282027:plot.margin      = margin(10,10,0,10, "mm"),
1549125282028:panel.spacing    = unit(4, "mm"),
1549125282031:plot.caption     = element_text(size = baseTextSize * 0.7, face = "italic"),
1549125282033:plot.title       = element_text(hjust = 0.5),
1549125282035:plot.subtitle    = element_text(hjust = 0.5),
1549125282037:strip.background = element_rect(size = lineSize),
1549125282038:strip.text       = element_text(size = stripTextSize),
1549125282041:text             = element_text(size = baseTextSize)
1549125282043:)
1549125282045:)
1549125282049:# Palette definition ------------------------------------------------------
1549125282051:# colourCount <- length(unique(inData$Locus))
1549125282052:colourCount <- nLoci
1549125282054:# colourCount  <- length(unique(data.to.plot$Allele))
1549125282057:# fillPalette  <- colorRampPalette(brewer.pal(8, "Dark2"))(colourCount)
1549125282062:# fillPalette  <- colorRampPalette(brewer.pal(12, "Paired"))(colourCount)
1549125282064:# fillPalette  <- colorRampPalette(brewer.pal(9, "Set1"))(colourCount)
1549125282066:# fillPalette  <- colorRampPalette(pal_npg("nrc")(10))(colourCount)
1549125282068:# fillPalette  <- colorRampPalette(pal_d3("category20")(20))(colourCount)
1549125282070:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549125282071:borderPalette <- darkColors(fillPalette, 0.6)
1549125282073:# library("scales"); show_col(fillPalette); show_col(borderPalette)
1549125282080:# # Depth plot -------------------------------------------------------------
1549125282082:# hFactor  <- 1.2
1549125282084:# wFactor  <- 4.8
1549125282086:# # if (nLoci == 1)
1549125282088:# #   hFactor <- 1.4;
1549125282092:# height <- (nLoci * hFactor) + 2 + 0.1 + ((nLoci-1)*0.05)
1549125282094:# width  <- nAlleles * wFactor
1549125282096:# # Generate plot
1549125282098:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549125282100:# # Save plot
1549125282103:# out.filename <- paste0(out.prefix, ".", out.format)
1549125282105:# if (out.format == "png") {
1549125282108:# 	ggsave(filename = out.filename, plot = depth.plot,
1549125282111:# 				 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549125282113:# } else {
1549125282116:# 	ggsave(filename = out.filename, plot = depth.plot,
1549125282118:# 				 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549125282121:# }
1549125282126:# Depth plot -------------------------------------------------------------
1549125282129:# <<<<<<< HEAD
1549125282131:#   rowsPerPage <- 7
1549125282134:#   hFactor     <- 1.2
1549125282136:#   wFactor     <- 4.8
1549125282139:#   rows        <- nLoci
1549125282142:#   if (nLoci > rowsPerPage)
1549125282145:#     rows <- rowsPerPage;
1549125282149:#   height <- (rows * hFactor) + 2 + 0.1 + ((rows-1)*0.05)
1549125282152:#   width  <- nAlleles * wFactor
1549125282154:#
1549125282157:#   loci     <- unique(data.to.plot$Locus)
1549125282160:#   lociList <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549125282163:#   lociList <- split(loci, ceiling(seq_along(loci)/3))
1549125282165:#   plotList <- list()
1549125282168:#   for (lociSet in lociList) {
1549125282171:#   	print(lociSet)
1549125282174:#   	subset.to.plot <- data.to.plot %>%
1549125282177:#   		filter(Locus %in% lociSet)
1549125282179:#   	labelsData <- getLabelsData(subset.to.plot)
1549125282182:#   	currentPlot <- plotDepth(subset.to.plot, labelsData, fillPalette, borderPalette)
1549125282198:#   	plotList <- c(plotList, list(currentPlot))
1549125282201:#   	# print(currentPlot)
1549125282203:#   	# print(unique(subset.to.plot$Locus))
1549125282209:#   }
1549125282212:#  	length(plotList)
1549125282215:#
1549125282217:#  	if (out.format == "pdf") {
1549125282220:#  		out.filename <- paste(out.prefix, out.format, sep = ".")
1549125282223:#  		pdf(out.filename)
1549125282226:#  		for (i in seq_along(plotList)) {
1549125282229:#  			nLociToPlot <- length(lociList[[i]])
1549125282231:#  			height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1549125282234:#  			width  <- nAlleles * wFactor
1549125282237:#  			# out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549125282239:#  			# print(out.filename)
1549125282242:#  			print(plotList[[i]])
1549125282246:#  		}
1549125282248:#  		dev.off()
1549125282251:#
1549125282253:#  	}
1549125282256:#  	for (i in seq_along(plotList)) {
1549125282259:#  		nLociToPlot <- length(lociList[[i]])
1549125282262:#  		height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1549125282265:#  		width  <- nAlleles * wFactor
1549125282267:#  		out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549125282270:#  		print(out.filename)
1549125282272:#  		pdf(out.filename, width = width, height = height)
1549125282275:#  		print(plotList[[i]])
1549125282278:#  		dev.off()
1549125282281:#  	}
1549125282283:#  	else if (out.format == "png") {
1549125282286:#  		ggsave(filename = out.filename, plot = depth.plot,
1549125282288:#  					 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549125282291:#  	} else {
1549125282294:#  		ggsave(filename = out.filename, plot = depth.plot,
1549125282297:#  					 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549125282299:#  	}
1549125282302:#
1549125282305:#  	plot_grid()
1549125282307:#  	# Generate plot
1549125282310:#   # (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549125282315:# =======
1549125282318:hFactor  <- 1.6
1549125282320:wFactor  <- 4.8
1549125282323:# if (nLoci == 1)
1549125282326:#   hFactor <- 1.4;
1549125282337:#               loci          titles and     strip    space between locus
1549125282341:#                             footnote
1549125282344:height <- (nLoci * hFactor) + 2              + 0.1    + ((nLoci-1)*0.05)
1549125282350:getPlotHeight <- function(rows){
1549125282352:# loci + titles and foot note + strip + space between locus
1549125282355:(rows*hFactor) + 2.39 + ((rows-1)*0.157) #in
1549125282358:}
1549125282364:width  <- nAlleles * wFactor
1549125282367:height <- getPlotHeight(nLoci)
1549125282369:rowsPerPage <- 5
1549125282372:loci <- unique(data.to.plot$Locus)
1549125282375:sets <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549125282379:plots <- lapply(sets, function(set, dp=data.to.plot, rp=rowsPerPage){
1549125282381:# set <- sets[[2]]
1549125282383:subsetToPlot <- dp %>% filter(Locus %in% set)
1549125282385:ld    <- getLabelsData(subsetToPlot)
1549125282388:(p    <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette))
1549125282391:nLoci <- length(set)
1549125282394:if(nLoci < rp & out.format == "pdf"){
1549125282396:# hlay    <- matrix(c(rep(1, nLoci), rep(NA, rp-nLoci)))
1549125282398:# hlay    <- matrix(c(rep(1, nLoci), NA))
1549125282399:hlay    <- matrix(c(1, NA))
1549125282401:total   <- getPlotHeight(rp)
1549125282403:cHeight <- getPlotHeight(nLoci)
1549125282405:blank   <- getPlotHeight(rp-nLoci) - 2.39
1549125282409:# heights <- matrix(c(rep(1, nLoci), rep(1/rp+2, rp-nLoci)))
1549125282414:# heights <- matrix(c(rep(1, nLoci), 0.6))
1549125282417:heights <- matrix(c(cHeight/total, blank/total))
1549125282419:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549125282422:# p       <- grid.arrange(p, layout_matrix = hlay, heights = unit(c(cHeight, blank), c("in", "in")))
1549125282428:print(str_glue("{total}, {cHeight}, {blank}, {blank/total}"))
1549125282431:}
1549125282434:p
1549125282437:})
1549125282441:ml <- marrangeGrob(plots, nrow=1, ncol=1, #padding = unit(10, "mm"),
1549125282447:top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549125282450:ml
1549125282453:ggsave(filename = "multipage.pdf", plot = ml,
1549125282455:width  = width, height = getPlotHeight(rowsPerPage), dpi = 400, limitsize = FALSE)
1549125282466:# Generate plot
1549125282468:labelsData <- getLabelsData(data.to.plot)
1549125282470:(depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549125282472:# >>>>>>> 64e9112fd081cc5c75caf0f7d0d03cd9f5ea18f4
1549125282475:# Save plot
1549125282477:out.filename <- paste0(out.prefix, ".", out.format)
1549125282479:if (out.format == "png") {
1549125282482:ggsave(filename = out.filename, plot = depth.plot,
1549125282484:width  = width, height = height, dpi = 300, limitsize = FALSE, type = "cairo-png")
1549125282486:} else {
1549125282489:ggsave(filename = out.filename, plot = depth.plot,
1549125282493:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549125282496:}
1549125282502:# Depth distribution plot ------------------------------------------------
1549125282505:hFactor  <- 3
1549125282508:wFactor  <- 2
1549125282512:if (nLoci == 1)
1549125282515:hFactor <- 3.5
1549125282518:height       <- nLoci * hFactor
1549125282521:width        <- nAlleles * wFactor
1549125282524:# Generate plot
1549125282528:(dist.plot <- plotDepthDist(data.to.plot, labelsData, fillPalette, borderPalette))
1549125282531:# Save plot
1549125282534:out.filename <- paste0(out.prefix, "_dist.", out.format)
1549125282537:if (out.format == "png") {
1549125282540:ggsave(filename = out.filename, plot = dist.plot,
1549125282544:width  = width, height = height, type = "cairo-png", dpi = 300)
1549125282547:} else {
1549125282550:ggsave(filename = out.filename, plot = dist.plot,
1549125282553:width  = width, height = height, dpi = 400)
1549125282556:}
1549125282559:cat("Done! \n")
1549125282564:# Code core - End ---------------------------------------------------------
1549125282566:}
1549125303371:ml <- marrangeGrob(plots, nrow=1, ncol=1, #padding = unit(10, "mm"),
1549125303371:top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549125307589:ml
1549125375836:width  <- nAlleles * wFactor
1549125375837:height <- getPlotHeight(nLoci)
1549125375838:rowsPerPage <- 4
1549125375838:loci <- unique(data.to.plot$Locus)
1549125375839:sets <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549125375840:plots <- lapply(sets, function(set, dp=data.to.plot, rp=rowsPerPage){
1549125375841:# set <- sets[[2]]
1549125375841:subsetToPlot <- dp %>% filter(Locus %in% set)
1549125375841:ld    <- getLabelsData(subsetToPlot)
1549125375842:(p    <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette))
1549125375842:nLoci <- length(set)
1549125375842:if(nLoci < rp & out.format == "pdf"){
1549125375843:# hlay    <- matrix(c(rep(1, nLoci), rep(NA, rp-nLoci)))
1549125375843:# hlay    <- matrix(c(rep(1, nLoci), NA))
1549125375843:hlay    <- matrix(c(1, NA))
1549125375844:total   <- getPlotHeight(rp)
1549125375844:cHeight <- getPlotHeight(nLoci)
1549125375845:blank   <- getPlotHeight(rp-nLoci) - 2.39
1549125375845:# heights <- matrix(c(rep(1, nLoci), rep(1/rp+2, rp-nLoci)))
1549125375846:# heights <- matrix(c(rep(1, nLoci), 0.6))
1549125375846:heights <- matrix(c(cHeight/total, blank/total))
1549125375847:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549125375848:# p       <- grid.arrange(p, layout_matrix = hlay, heights = unit(c(cHeight, blank), c("in", "in")))
1549125375849:print(str_glue("{total}, {cHeight}, {blank}, {blank/total}"))
1549125375850:}
1549125375850:p
1549125375851:})
1549125380904:ml <- marrangeGrob(plots, nrow=1, ncol=1, #padding = unit(10, "mm"),
1549125380905:top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549125384704:ml
1549125386110:ggsave(filename = "multipage.pdf", plot = ml,
1549125386110:width  = width, height = getPlotHeight(rowsPerPage), dpi = 400, limitsize = FALSE)
1549125404207:#!/usr/bin/env Rscript
1549125404207:# ##############################################################################
1549125404207:#  Author:   Hector Fabio Espitia-Navarro
1549125404208:#            Georgia Institute of Technology
1549125404208:#  Version:  1.0
1549125404208:#  Date:     01/19/2019
1549125404209:# ##############################################################################
1549125404209:# Install required packages -----------------------------------------------
1549125404210:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549125404210:if(!file.exists(personal.lib.path))
1549125404211:dir.create(personal.lib.path)
1549125404212:printMessage <- function(message, verbose){
1549125404212:if(verbose)
1549125404212:cat(message)
1549125404213:}
1549125404214:# crayon::bold("Hola")
1549125404214:installAndLoadPackages <- function(pkg, verbose){
1549125404215:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1549125404215:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1549125404216:printMessage("Done!\n", verbose)
1549125404216:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549125404217:if (length(new.pkg)) {
1549125404218:printMessage("Installing new packages... ", verbose)
1549125404218:install.packages(new.pkg, dependencies = TRUE,
1549125404219:repos="http://cran.rstudio.com/",
1549125404219:lib = personal.lib.path)
1549125404219:printMessage("Done!\n", verbose)
1549125404220:}
1549125404220:printMessage("Loading required packages... ", verbose)
1549125404221:sapply(pkg, function(x){
1549125404221:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549125404221:})
1549125404222:printMessage("Done!\n", verbose)
1549125404222:}
1549125404223:# github.related.packages <- c("devtools", "Rcpp")
1549125404223:# packages <- c("argparser", "tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite")
1549125404224:packages <- c("tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite", "gridExtra")
1549125404224:# installAndLoadPackages(packages, verbose = TRUE)
1549125404224:installAndLoadPackages("argparser", verbose = FALSE)
1549125404246:# Command line arguments processing ---------------------------------------
1549125404247:# Get script name
1549125404247:initial.options <- commandArgs(trailingOnly = FALSE)
1549125404247:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1549125404248:# Process command line arguments
1549125404248:# Create a parser
1549125404249:p <- arg_parser("This script generates k-mer depth plots using a depth file generated by the\033[1mSTing typer\033[22m tool (-t option).",
1549125404249:name = script.name)
1549125404251:# Add Positional arguments (required)
1549125404251:p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
1549125404253:# Add options
1549125404253:p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1549125404254:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1549125404255:default = "kmer_depth")
1549125404256:p <- add_argument(p, "--sample_name", help = "Sample name.",
1549125404256:default = "input file's name")
1549125404257:p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'",
1549125404257:default = "pdf")
1549125404259:# Initialization of variables ---------------------------------------------
1549125404259:# Values to test the script using RStudio
1549125404260:script.home <- "/home/hspitia/projects/sting"
1549125404260:# inputFile   <- paste(script.home, "ERR036060.depth.2.tsv", sep = "/")
1549125404261:# geneFile    <- paste(script.home, "rmlst_failed_loci.txt", sep = "/")
1549125404261:inputFile   <- paste(script.home, "depth.tsv", sep = "/")
1549125404262:geneFile    <- paste(script.home, "loci.txt", sep = "/")
1549125404262:out.format  <- "pdf"
1549125404263:out.prefix  <- "kmer_ext_depth"
1549125404264:sample.name <- basename(inputFile)
1549125404264:# Parse command line arguments
1549125404265:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1549125404266:argv <- list()
1549125404266:if(command.line) {
1549125404267:argv <- parse_args(p)
1549125404267:} else {
1549125404267:argv <- parse_args(p, list(inputFile,
1549125404268:# "--gene_file", geneFile,
1549125404268:"--prefix", out.prefix,
1549125404269:"--sample_name", sample.name,
1549125404270:"--format", out.format))
1549125404270:}
1549125404272:# Get argument values from the command line
1549125404272:input.file  <- argv$input_file
1549125404273:gene.file   <- argv$gene_file
1549125404277:out.format  <- argv$format
1549125404277:out.prefix  <- argv$prefix
1549125404278:sample.name <- argv$sample_name
1549125404278:# if (sample.name == "")
1549125404279:if (sample.name == "input file's name")
1549125404279:sample.name <- basename(input.file)
1549125404280:# Function to check if file exists ----------------------------------------
1549125404280:CheckFileExists <- function(file.list) {
1549125404281:non.exist.files <- !file.exists(file.list)
1549125404281:if(any(non.exist.files)) {
1549125404282:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549125404282:}
1549125404282:}
1549125404283:# Check for input files ---------------------------------------------------
1549125404283:files.to.check <- c(input.file)
1549125404284:error.message  <- CheckFileExists(files.to.check)
1549125404286:if(!is.null(error.message)){
1549125404286:stop(error.message)
1549125404286:} else {
1549125404287:# Code core - Begin -------------------------------------------------------
1549125404287:installAndLoadPackages(packages, verbose = TRUE)
1549125404287:# FUNCTIONS:
1549125404288:# Function to dark a list of colors ---------------------------------------
1549125404288:darkColors <- function(palette, level){
1549125404288:rgbColors <- as.data.frame(t(as.data.frame(lapply(as.data.frame(t(col2rgb(palette))),
1549125404289:function(x) { round(x * level)}))))
1549125404289:unname(sapply(rgbColors, function(x){ rgb(x[1], x[2], x[3], maxColorValue=255) }))
1549125404289:}
1549125404290:# Function for plotting k-mer depth ----------------------------------------
1549125404290:plotDepth <- function(dataToPlot, labelsData, fillColors, borderColors) {
1549125404290:max.x       <- max(dataToPlot$Position)
1549125404291:max.y       <- max(dataToPlot$kmerDepth)
1549125404291:x.limits    <- seq(0, max.x, 100)
1549125404292:y.limits    <- seq(0, max.y, 20)
1549125404293:nTopAlleles <- length(unique(dataToPlot$N))
1549125404293:d.plot <- ggplot(data = dataToPlot, aes(x = Position, y = kmerDepth),
1549125404294:size = 0.2) +
1549125404294:geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1549125404295:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1549125404295:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1549125404296:# scale_color_manual(values = getPalette) +
1549125404296:scale_color_manual(values = borderColors) +
1549125404297:scale_fill_manual(values = fillColors) +
1549125404298:geom_text(data = labelsData,
1549125404298:# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1549125404299:# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1549125404300:aes(x = Length, y = info.y * 0.5, group = Locus,
1549125404301:hjust = 0,
1549125404302:label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1549125404302:show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1549125404303:nudge_x = -(max.x*0.025)
1549125404304:) +
1549125404305:geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1549125404305:alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1549125404306:# geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1549125404307:size = annotTextSize * 1.05, color = "#333333") +
1549125404308:geom_text(data = labelsData,
1549125404309:parse = TRUE,
1549125404309:aes(x = info.x, y = info.y,
1549125404310:label = paste0("{{{{italic(s)==", format(round(Score, 2), nsmall = 2),
1549125404311:"*~~~italic(hat(f)[k])} ==", format(round(NormKmerCount, 2), nsmall = 2),
1549125404311:"*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1549125404312:"*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1549125404313:"~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1549125404313:hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1549125404314:facet_grid(Locus ~ N, scales = "free_y") +
1549125404315:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1549125404315:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1549125404316:theme_bw() +
1549125404318:plotTheme +
1549125404319:labs(title    = expression(italic("k")*"-mer depth"),
1549125404320:subtitle = paste("Top", nTopAlleles, "alleles/genes on sample", sample.name),
1549125404321:x        = "Position along sequence (bp)",
1549125404322:y        = expression(paste(italic(k), "-mer depth")),
1549125404323:# caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1549125404324:caption  = expression(paste(italic("s"),": score;  ",
1549125404326:italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1549125404327:italic("c"),": coverage;  ",
1549125404328:italic(sigma), ": standard deviation;  ",
1549125404330:italic(bar(d)), ": average depth"), sep = "")
1549125404331:)
1549125404332:# guides(fill  = guide_legend(title  ="Allele"), color = FALSE) +
1549125404333:d.plot
1549125404334:}
1549125404335:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549125404336:# Function for plotting k-mer depth distributions as box plots ------------
1549125404337:plotDepthDist <- function(data.to.plot, labelsData, fillColors, borderColors){
1549125404338:dist.plot <- ggplot(data.to.plot, aes(x = AlPos, y = kmerDepth)) +
1549125404339:geom_jitter(position = position_jitter(width=.3), aes(color = Locus),
1549125404340:alpha = 0.4, size = 1.2, shape = 16) +
1549125404341:geom_boxplot(alpha = 0.7, size = 0.5, aes(fill = Locus, color = Locus)) +
1549125404342:geom_text(data = labelsData, size = 4, hjust = "center",
1549125404342:aes(x = N,#(N - 0.5),
1549125404343:y = info.y * 1.05,
1549125404344:label = Allele),
1549125404345:color = "#333333") +
1549125404346:geom_text(data = labelsData, size = 3, hjust = "center",
1549125404347:parse = TRUE,
1549125404347:aes(x = N,#(N - 0.4),
1549125404348:# y = info.y * 0.08,
1549125404349:y = info.y * 0.96,
1549125404351:label = paste0("sigma ==",format(round(sd, 1), nsmall = 1))),
1549125404352:color = "#333333") +
1549125404353:geom_point(data = labelsData,
1549125404354:shape = 23, fill = "white",
1549125404356:aes(x = N, y = meanDepth)) +
1549125404357:facet_grid(Locus ~ ., scales = "free_y") +
1549125404358:scale_color_manual(values = borderColors) +
1549125404359:scale_fill_manual(values = fillColors) +
1549125404360:labs(title = expression(paste(italic("k"), "-mer depth distribution")),
1549125404361:subtitle = basename(input.file),
1549125404362:x        = "Allele Ranking",
1549125404362:y        = expression(paste(italic(k), "-mer depth")),
1549125404363:caption  = expression(paste(italic(sigma), ": standard deviation")))+#,"sd: standard deviation") +
1549125404364:theme_bw() +
1549125404365:plotTheme +
1549125404366:theme(axis.text.x   = element_text(angle = 0, size = axisTextSize,
1549125404368:vjust = 1, hjust = 0.5, color = textColor))
1549125404369:dist.plot
1549125404370:}
1549125404371:# Function to get data for annotations ------------------------------------
1549125404372:getLabelsData <- function(data.to.plot) {
1549125404373:max.x <- max(data.to.plot$Position)
1549125404374:max.y <- max(data.to.plot$kmerDepth)
1549125404376:nLoci    <- length(unique(data.to.plot$Locus))
1549125404377:nAlleles <- length(unique(data.to.plot$N))
1549125404380:alleles     <- unique(data.to.plot$Allele)
1549125404382:loci        <- as.character(unique(data.to.plot$Locus))
1549125404384:lociLabels  <- c()
1549125404385:name.x      <- c()
1549125404387:name.y      <- c()
1549125404388:info.x      <- c()
1549125404389:info.y      <- c()
1549125404390:covs        <- c()
1549125404392:avgDepths   <- c()
1549125404393:meanDepth.x <- c()
1549125404394:meanDepth.y <- c()
1549125404394:for (i in loci) {
1549125404395:lociLabels <- c(lociLabels, rep(i, nAlleles))
1549125404397:}
1549125404399:for (allele in alleles) {
1549125404401:locus       <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1549125404403:maxPos      <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549125404404:maxDepth    <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549125404405:# name.x      <- c(name.x, (maxPos / 2))
1549125404406:name.x      <- c(name.x, (max.x / 2))
1549125404407:name.y      <- c(name.y, (maxDepth * 0.25))
1549125404408:info.x      <- c(info.x, max.x * 0.02)
1549125404409:info.y      <- c(info.y, maxDepth * 1.5)
1549125404410:covs        <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549125404411:avgDepths   <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549125404413:}
1549125404414:labelsData <- data.frame(Allele = alleles,
1549125404416:name.x = name.x,
1549125404418:name.y = name.y,
1549125404420:info.x = info.x,
1549125404422:info.y = info.y,
1549125404424:meanDepth = avgDepths,
1549125404426:N = rep(unique(data.to.plot$N), nLoci),
1549125404428:Locus = lociLabels,
1549125404429:cov = covs
1549125404431:) %>%
1549125404433:left_join(data.to.plot %>%
1549125404435:group_by(Allele, Length, NormKmerCount, Score) %>%
1549125404437:summarise(sd = sd(kmerDepth)),
1549125404439:by = c("Allele" = "Allele")) #%>%
1549125404441:# mutate(
1549125404443:#   info   = paste0("cov=", format(round(covs, 1), nsmall = 1), "%   ",
1549125404445:#                   paste0("ad=", format(round(avgDepths, 1), nsmall = 1)),
1549125404447:#                   "   ",
1549125404449:#                   # expression(paste(italic(sigma), "=",format(round(sd, 1), nsmall = 1))))
1549125404451:#                   paste0("sd=", format(round(sd, 1), nsmall = 1))
1549125404453:#   )
1549125404455:# )
1549125404457:labelsData
1549125404459:}
1549125404462:# Check for genes/loci file to filter loci to plot  -----------------------
1549125404464:loci.to.plot <- c()
1549125404466:# if (!is.null(gene.file)|| gene.file != "") {
1549125404468:if (!is.null(gene.file) && !is.na(gene.file) && gene.file != "") {
1549125404471:error.message <- CheckFileExists(gene.file)
1549125404473:if (!is.null(error.message)){
1549125404474:cat("Warning:")
1549125404476:cat(error.message)
1549125404478:cat("  The plotting process will continue without filtering genes/loci.\n")
1549125404480:} else {
1549125404482:loci.to.plot <- scan(gene.file, character(), quiet = TRUE)
1549125404485:}
1549125404487:}
1549125404489:# Data processing and plotting --------------------------------------------
1549125404491:cat("Plotting depths... ")
1549125404492:options(stringsAsFactors = T, readr.num_columns = 0)
1549125404495:# Load data
1549125404496:inData <- read_tsv(input.file)
1549125404498:# inData <- read.delim(input.file)
1549125404501:# colnames(inData) <- c("Allele", "Position", "k-mer Depth", "Weighted k-mer Depth")
1549125404503:colnames(inData) <- c("N", "Locus", "Allele", "Position", "kmerDepth",
1549125404504:"NormKmerCount", "Coverage", "Score", "AverageKmerDepth")
1549125404507:# Transform data
1549125404509:data.to.plot <- inData %>%
1549125404510:left_join(inData %>%
1549125404511:group_by(Allele) %>%
1549125404513:summarise(Length = n()), by = "Allele") %>%
1549125404514:arrange(Locus, N) %>%
1549125404516:mutate(
1549125404517:AlPos = factor(N, levels = unique(.$N)),
1549125404519:Allele = factor(Allele, levels = unique(inData$Allele)))
1549125404521:# Filtering loci/genes from genes_file input param
1549125404522:if (length(loci.to.plot) > 0) {
1549125404524:data.to.plot <- data.to.plot %>%
1549125404525:filter(Locus %in% loci.to.plot)
1549125404527:}
1549125404530:longestLocusNameLength <- max(str_length(as.character(unique(inData$Locus))))
1549125404531:# labelsData <- getLabelsData(data.to.plot)
1549125404533:nLoci      <- length(unique(data.to.plot$Locus))
1549125404535:nAlleles   <- length(unique(data.to.plot$N))
1549125404538:# Theme-related variable definition ---------------------------------------
1549125404540:annotLinetype         <- "solid"
1549125404541:annotTextSize         <- 4
1549125404543:axisColor             <- "#000000"
1549125404544:axisTextSize          <- 12
1549125404546:barAnnotTextSize      <- 4
1549125404547:baseTextSize          <- 14
1549125404549:gridColor             <- "#e0e0e0"
1549125404551:lineSize              <- 0.3
1549125404553:panelColor            <- "#fff4e0"
1549125404555:panelColor            <- "#f2efe6"
1549125404556:# panelColor            <- "#ffffff"
1549125404558:# stripBackground       <- "#cccccc"
1549125404559:stripTextSize         <- axisTextSize
1549125404561:if (longestLocusNameLength > 12)
1549125404563:stripTextSize       <- stripTextSize * 0.6
1549125404564:textColor             <- "#000000"
1549125404566:# baseFontFamily        <- "Arial"
1549125404569:# Custom theme definition for plots ---------------------------------------
1549125404571:plotTheme <- list(
1549125404573:theme(
1549125404575:axis.text.x      = element_text(angle = 50, size = axisTextSize,
1549125404577:vjust = 1, hjust = 1, color = textColor),
1549125404579:axis.text.y      = element_text(size = axisTextSize, color = textColor),
1549125404581:axis.ticks       = element_line(size = lineSize),
1549125404582:axis.title.x     = element_text(margin = margin(6,0,8,0, "mm")),
1549125404585:axis.title.y     = element_text(margin = margin(0,6,0,0, "mm")),
1549125404587:legend.position  = "none",
1549125404589:panel.border     = element_rect(size = lineSize),
1549125404591:panel.background = element_rect(fill = panelColor),
1549125404592:panel.grid       = element_line(size = lineSize, colour = gridColor),
1549125404594:panel.grid.minor = element_blank(),
1549125404597:plot.margin      = margin(10,10,0,10, "mm"),
1549125404599:panel.spacing    = unit(4, "mm"),
1549125404602:plot.caption     = element_text(size = baseTextSize * 0.7, face = "italic"),
1549125404604:plot.title       = element_text(hjust = 0.5),
1549125404607:plot.subtitle    = element_text(hjust = 0.5),
1549125404610:strip.background = element_rect(size = lineSize),
1549125404612:strip.text       = element_text(size = stripTextSize),
1549125404615:text             = element_text(size = baseTextSize)
1549125404617:)
1549125404621:)
1549125404626:# Palette definition ------------------------------------------------------
1549125404629:# colourCount <- length(unique(inData$Locus))
1549125404631:colourCount <- nLoci
1549125404634:# colourCount  <- length(unique(data.to.plot$Allele))
1549125404638:# fillPalette  <- colorRampPalette(brewer.pal(8, "Dark2"))(colourCount)
1549125404640:# fillPalette  <- colorRampPalette(brewer.pal(12, "Paired"))(colourCount)
1549125404643:# fillPalette  <- colorRampPalette(brewer.pal(9, "Set1"))(colourCount)
1549125404646:# fillPalette  <- colorRampPalette(pal_npg("nrc")(10))(colourCount)
1549125404649:# fillPalette  <- colorRampPalette(pal_d3("category20")(20))(colourCount)
1549125404652:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549125404655:borderPalette <- darkColors(fillPalette, 0.6)
1549125404658:# library("scales"); show_col(fillPalette); show_col(borderPalette)
1549125404668:# # Depth plot -------------------------------------------------------------
1549125404671:# hFactor  <- 1.2
1549125404674:# wFactor  <- 4.8
1549125404679:# # if (nLoci == 1)
1549125404682:# #   hFactor <- 1.4;
1549125404688:# height <- (nLoci * hFactor) + 2 + 0.1 + ((nLoci-1)*0.05)
1549125404690:# width  <- nAlleles * wFactor
1549125404693:# # Generate plot
1549125404696:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549125404699:# # Save plot
1549125404702:# out.filename <- paste0(out.prefix, ".", out.format)
1549125404704:# if (out.format == "png") {
1549125404707:# 	ggsave(filename = out.filename, plot = depth.plot,
1549125404710:# 				 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549125404712:# } else {
1549125404715:# 	ggsave(filename = out.filename, plot = depth.plot,
1549125404719:# 				 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549125404722:# }
1549125404727:# Depth plot -------------------------------------------------------------
1549125404729:# <<<<<<< HEAD
1549125404732:#   rowsPerPage <- 7
1549125404735:#   hFactor     <- 1.2
1549125404738:#   wFactor     <- 4.8
1549125404741:#   rows        <- nLoci
1549125404744:#   if (nLoci > rowsPerPage)
1549125404746:#     rows <- rowsPerPage;
1549125404751:#   height <- (rows * hFactor) + 2 + 0.1 + ((rows-1)*0.05)
1549125404754:#   width  <- nAlleles * wFactor
1549125404757:#
1549125404760:#   loci     <- unique(data.to.plot$Locus)
1549125404761:#   lociList <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549125404763:#   lociList <- split(loci, ceiling(seq_along(loci)/3))
1549125404765:#   plotList <- list()
1549125404768:#   for (lociSet in lociList) {
1549125404770:#   	print(lociSet)
1549125404772:#   	subset.to.plot <- data.to.plot %>%
1549125404774:#   		filter(Locus %in% lociSet)
1549125404776:#   	labelsData <- getLabelsData(subset.to.plot)
1549125404778:#   	currentPlot <- plotDepth(subset.to.plot, labelsData, fillPalette, borderPalette)
1549125404780:#   	plotList <- c(plotList, list(currentPlot))
1549125404781:#   	# print(currentPlot)
1549125404784:#   	# print(unique(subset.to.plot$Locus))
1549125404786:#   }
1549125404788:#  	length(plotList)
1549125404790:#
1549125404792:#  	if (out.format == "pdf") {
1549125404794:#  		out.filename <- paste(out.prefix, out.format, sep = ".")
1549125404796:#  		pdf(out.filename)
1549125404797:#  		for (i in seq_along(plotList)) {
1549125404799:#  			nLociToPlot <- length(lociList[[i]])
1549125404802:#  			height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1549125404804:#  			width  <- nAlleles * wFactor
1549125404806:#  			# out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549125404808:#  			# print(out.filename)
1549125404810:#  			print(plotList[[i]])
1549125404811:#  		}
1549125404813:#  		dev.off()
1549125404815:#
1549125404818:#  	}
1549125404820:#  	for (i in seq_along(plotList)) {
1549125404822:#  		nLociToPlot <- length(lociList[[i]])
1549125404824:#  		height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1549125404825:#  		width  <- nAlleles * wFactor
1549125404827:#  		out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549125404829:#  		print(out.filename)
1549125404831:#  		pdf(out.filename, width = width, height = height)
1549125404833:#  		print(plotList[[i]])
1549125404836:#  		dev.off()
1549125404839:#  	}
1549125404841:#  	else if (out.format == "png") {
1549125404844:#  		ggsave(filename = out.filename, plot = depth.plot,
1549125404847:#  					 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549125404849:#  	} else {
1549125404852:#  		ggsave(filename = out.filename, plot = depth.plot,
1549125404856:#  					 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549125404858:#  	}
1549125404861:#
1549125404863:#  	plot_grid()
1549125404866:#  	# Generate plot
1549125404869:#   # (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549125404874:# =======
1549125404877:hFactor  <- 1.6
1549125404880:wFactor  <- 4.8
1549125404882:# if (nLoci == 1)
1549125404885:#   hFactor <- 1.4;
1549125404893:#               loci          titles and     strip    space between locus
1549125404896:#                             footnote
1549125404898:height <- (nLoci * hFactor) + 2              + 0.1    + ((nLoci-1)*0.05)
1549125404904:getPlotHeight <- function(rows){
1549125404906:# loci + titles and foot note + strip + space between locus
1549125404909:(rows*hFactor) + 2.39 + ((rows-1)*0.157) #in
1549125404911:}
1549125404917:width  <- nAlleles * wFactor
1549125404920:height <- getPlotHeight(nLoci)
1549125404923:rowsPerPage <- 4
1549125404926:loci <- unique(data.to.plot$Locus)
1549125404930:sets <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549125404936:plots <- lapply(sets, function(set, dp=data.to.plot, rp=rowsPerPage){
1549125404939:# set <- sets[[2]]
1549125404941:subsetToPlot <- dp %>% filter(Locus %in% set)
1549125404944:ld    <- getLabelsData(subsetToPlot)
1549125404946:(p    <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette))
1549125404948:nLoci <- length(set)
1549125404951:if(nLoci < rp & out.format == "pdf"){
1549125404953:# hlay    <- matrix(c(rep(1, nLoci), rep(NA, rp-nLoci)))
1549125404955:# hlay    <- matrix(c(rep(1, nLoci), NA))
1549125404957:hlay    <- matrix(c(1, NA))
1549125404959:total   <- getPlotHeight(rp)
1549125404961:cHeight <- getPlotHeight(nLoci)
1549125404963:blank   <- getPlotHeight(rp-nLoci) - 2.39
1549125404966:# heights <- matrix(c(rep(1, nLoci), rep(1/rp+2, rp-nLoci)))
1549125404969:# heights <- matrix(c(rep(1, nLoci), 0.6))
1549125404971:heights <- matrix(c(cHeight/total, blank/total))
1549125404973:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549125404975:# p       <- grid.arrange(p, layout_matrix = hlay, heights = unit(c(cHeight, blank), c("in", "in")))
1549125404978:print(str_glue("{total}, {cHeight}, {blank}, {blank/total}"))
1549125404980:}
1549125404982:p
1549125404985:})
1549125404987:ml <- marrangeGrob(plots, nrow=1, ncol=1, #padding = unit(10, "mm"),
1549125404989:top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549125404991:ml
1549125404993:ggsave(filename = "multipage.pdf", plot = ml,
1549125404995:width  = width, height = getPlotHeight(rowsPerPage), dpi = 400, limitsize = FALSE)
1549125405000:# Generate plot
1549125405002:labelsData <- getLabelsData(data.to.plot)
1549125405005:(depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549125405008:# >>>>>>> 64e9112fd081cc5c75caf0f7d0d03cd9f5ea18f4
1549125405012:# Save plot
1549125405014:out.filename <- paste0(out.prefix, ".", out.format)
1549125405016:if (out.format == "png") {
1549125405019:ggsave(filename = out.filename, plot = depth.plot,
1549125405021:width  = width, height = height, dpi = 300, limitsize = FALSE, type = "cairo-png")
1549125405023:} else {
1549125405025:ggsave(filename = out.filename, plot = depth.plot,
1549125405028:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549125405030:}
1549125405036:# Depth distribution plot ------------------------------------------------
1549125405041:hFactor  <- 3
1549125405046:wFactor  <- 2
1549125405049:if (nLoci == 1)
1549125405052:hFactor <- 3.5
1549125405054:height       <- nLoci * hFactor
1549125405057:width        <- nAlleles * wFactor
1549125405059:# Generate plot
1549125405061:(dist.plot <- plotDepthDist(data.to.plot, labelsData, fillPalette, borderPalette))
1549125405063:# Save plot
1549125405065:out.filename <- paste0(out.prefix, "_dist.", out.format)
1549125405069:if (out.format == "png") {
1549125405071:ggsave(filename = out.filename, plot = dist.plot,
1549125405073:width  = width, height = height, type = "cairo-png", dpi = 300)
1549125405076:} else {
1549125405078:ggsave(filename = out.filename, plot = dist.plot,
1549125405080:width  = width, height = height, dpi = 400)
1549125405082:}
1549125405086:cat("Done! \n")
1549125405090:# Code core - End ---------------------------------------------------------
1549125405092:}
1549125437044:#!/usr/bin/env Rscript
1549125437044:# ##############################################################################
1549125437044:#  Author:   Hector Fabio Espitia-Navarro
1549125437045:#            Georgia Institute of Technology
1549125437045:#  Version:  1.0
1549125437045:#  Date:     01/19/2019
1549125437046:# ##############################################################################
1549125437046:# Install required packages -----------------------------------------------
1549125437046:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549125437047:if(!file.exists(personal.lib.path))
1549125437047:dir.create(personal.lib.path)
1549125437048:printMessage <- function(message, verbose){
1549125437048:if(verbose)
1549125437049:cat(message)
1549125437049:}
1549125437050:# crayon::bold("Hola")
1549125437050:installAndLoadPackages <- function(pkg, verbose){
1549125437050:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1549125437051:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1549125437051:printMessage("Done!\n", verbose)
1549125437051:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549125437052:if (length(new.pkg)) {
1549125437052:printMessage("Installing new packages... ", verbose)
1549125437052:install.packages(new.pkg, dependencies = TRUE,
1549125437053:repos="http://cran.rstudio.com/",
1549125437053:lib = personal.lib.path)
1549125437054:printMessage("Done!\n", verbose)
1549125437055:}
1549125437056:printMessage("Loading required packages... ", verbose)
1549125437056:sapply(pkg, function(x){
1549125437056:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549125437057:})
1549125437057:printMessage("Done!\n", verbose)
1549125437058:}
1549125437059:# github.related.packages <- c("devtools", "Rcpp")
1549125437059:# packages <- c("argparser", "tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite")
1549125437060:packages <- c("tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite", "gridExtra")
1549125437061:# installAndLoadPackages(packages, verbose = TRUE)
1549125437062:installAndLoadPackages("argparser", verbose = FALSE)
1549125437090:# Command line arguments processing ---------------------------------------
1549125437090:# Get script name
1549125437090:initial.options <- commandArgs(trailingOnly = FALSE)
1549125437091:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1549125437092:# Process command line arguments
1549125437092:# Create a parser
1549125437092:p <- arg_parser("This script generates k-mer depth plots using a depth file generated by the\033[1mSTing typer\033[22m tool (-t option).",
1549125437092:name = script.name)
1549125437094:# Add Positional arguments (required)
1549125437094:p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
1549125437095:# Add options
1549125437096:p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1549125437097:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1549125437097:default = "kmer_depth")
1549125437098:p <- add_argument(p, "--sample_name", help = "Sample name.",
1549125437098:default = "input file's name")
1549125437099:p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'",
1549125437100:default = "pdf")
1549125437101:# Initialization of variables ---------------------------------------------
1549125437101:# Values to test the script using RStudio
1549125437101:script.home <- "/home/hspitia/projects/sting"
1549125437102:# inputFile   <- paste(script.home, "ERR036060.depth.2.tsv", sep = "/")
1549125437102:# geneFile    <- paste(script.home, "rmlst_failed_loci.txt", sep = "/")
1549125437103:inputFile   <- paste(script.home, "depth.tsv", sep = "/")
1549125437104:geneFile    <- paste(script.home, "loci.txt", sep = "/")
1549125437105:out.format  <- "pdf"
1549125437106:out.prefix  <- "kmer_ext_depth"
1549125437107:sample.name <- basename(inputFile)
1549125437107:# Parse command line arguments
1549125437108:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1549125437108:argv <- list()
1549125437109:if(command.line) {
1549125437109:argv <- parse_args(p)
1549125437109:} else {
1549125437109:argv <- parse_args(p, list(inputFile,
1549125437110:# "--gene_file", geneFile,
1549125437110:"--prefix", out.prefix,
1549125437110:"--sample_name", sample.name,
1549125437111:"--format", out.format))
1549125437111:}
1549125437112:# Get argument values from the command line
1549125437113:input.file  <- argv$input_file
1549125437113:gene.file   <- argv$gene_file
1549125437113:out.format  <- argv$format
1549125437114:out.prefix  <- argv$prefix
1549125437114:sample.name <- argv$sample_name
1549125437116:# if (sample.name == "")
1549125437117:if (sample.name == "input file's name")
1549125437117:sample.name <- basename(input.file)
1549125437119:# Function to check if file exists ----------------------------------------
1549125437122:CheckFileExists <- function(file.list) {
1549125437123:non.exist.files <- !file.exists(file.list)
1549125437123:if(any(non.exist.files)) {
1549125437124:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549125437124:}
1549125437125:}
1549125437125:# Check for input files ---------------------------------------------------
1549125437126:files.to.check <- c(input.file)
1549125437127:error.message  <- CheckFileExists(files.to.check)
1549125437128:if(!is.null(error.message)){
1549125437129:stop(error.message)
1549125437129:} else {
1549125437129:# Code core - Begin -------------------------------------------------------
1549125437130:installAndLoadPackages(packages, verbose = TRUE)
1549125437130:# FUNCTIONS:
1549125437131:# Function to dark a list of colors ---------------------------------------
1549125437131:darkColors <- function(palette, level){
1549125437132:rgbColors <- as.data.frame(t(as.data.frame(lapply(as.data.frame(t(col2rgb(palette))),
1549125437133:function(x) { round(x * level)}))))
1549125437133:unname(sapply(rgbColors, function(x){ rgb(x[1], x[2], x[3], maxColorValue=255) }))
1549125437134:}
1549125437135:# Function for plotting k-mer depth ----------------------------------------
1549125437135:plotDepth <- function(dataToPlot, labelsData, fillColors, borderColors) {
1549125437138:max.x       <- max(dataToPlot$Position)
1549125437139:max.y       <- max(dataToPlot$kmerDepth)
1549125437140:x.limits    <- seq(0, max.x, 100)
1549125437141:y.limits    <- seq(0, max.y, 20)
1549125437141:nTopAlleles <- length(unique(dataToPlot$N))
1549125437142:d.plot <- ggplot(data = dataToPlot, aes(x = Position, y = kmerDepth),
1549125437143:size = 0.2) +
1549125437144:geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1549125437145:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1549125437145:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1549125437146:# scale_color_manual(values = getPalette) +
1549125437147:scale_color_manual(values = borderColors) +
1549125437148:scale_fill_manual(values = fillColors) +
1549125437149:geom_text(data = labelsData,
1549125437150:# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1549125437151:# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1549125437151:aes(x = Length, y = info.y * 0.5, group = Locus,
1549125437155:hjust = 0,
1549125437156:label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1549125437157:show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1549125437158:nudge_x = -(max.x*0.025)
1549125437159:) +
1549125437160:geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1549125437160:alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1549125437161:# geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1549125437162:size = annotTextSize * 1.05, color = "#333333") +
1549125437164:geom_text(data = labelsData,
1549125437165:parse = TRUE,
1549125437173:aes(x = info.x, y = info.y,
1549125437174:label = paste0("{{{{italic(s)==", format(round(Score, 2), nsmall = 2),
1549125437175:"*~~~italic(hat(f)[k])} ==", format(round(NormKmerCount, 2), nsmall = 2),
1549125437176:"*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1549125437177:"*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1549125437178:"~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1549125437179:hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1549125437180:facet_grid(Locus ~ N, scales = "free_y") +
1549125437181:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1549125437182:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1549125437183:theme_bw() +
1549125437184:plotTheme +
1549125437186:labs(title    = expression(italic("k")*"-mer depth"),
1549125437187:subtitle = paste("Top", nTopAlleles, "alleles/genes on sample", sample.name),
1549125437188:x        = "Position along sequence (bp)",
1549125437190:y        = expression(paste(italic(k), "-mer depth")),
1549125437191:# caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1549125437194:caption  = expression(paste(italic("s"),": score;  ",
1549125437198:italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1549125437200:italic("c"),": coverage;  ",
1549125437201:italic(sigma), ": standard deviation;  ",
1549125437204:italic(bar(d)), ": average depth"), sep = "")
1549125437205:)
1549125437207:# guides(fill  = guide_legend(title  ="Allele"), color = FALSE) +
1549125437210:d.plot
1549125437212:}
1549125437213:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549125437214:# Function for plotting k-mer depth distributions as box plots ------------
1549125437215:plotDepthDist <- function(data.to.plot, labelsData, fillColors, borderColors){
1549125437216:dist.plot <- ggplot(data.to.plot, aes(x = AlPos, y = kmerDepth)) +
1549125437217:geom_jitter(position = position_jitter(width=.3), aes(color = Locus),
1549125437218:alpha = 0.4, size = 1.2, shape = 16) +
1549125437220:geom_boxplot(alpha = 0.7, size = 0.5, aes(fill = Locus, color = Locus)) +
1549125437221:geom_text(data = labelsData, size = 4, hjust = "center",
1549125437223:aes(x = N,#(N - 0.5),
1549125437224:y = info.y * 1.05,
1549125437225:label = Allele),
1549125437227:color = "#333333") +
1549125437228:geom_text(data = labelsData, size = 3, hjust = "center",
1549125437229:parse = TRUE,
1549125437230:aes(x = N,#(N - 0.4),
1549125437231:# y = info.y * 0.08,
1549125437233:y = info.y * 0.96,
1549125437234:label = paste0("sigma ==",format(round(sd, 1), nsmall = 1))),
1549125437235:color = "#333333") +
1549125437237:geom_point(data = labelsData,
1549125437239:shape = 23, fill = "white",
1549125437240:aes(x = N, y = meanDepth)) +
1549125437242:facet_grid(Locus ~ ., scales = "free_y") +
1549125437243:scale_color_manual(values = borderColors) +
1549125437244:scale_fill_manual(values = fillColors) +
1549125437246:labs(title = expression(paste(italic("k"), "-mer depth distribution")),
1549125437247:subtitle = basename(input.file),
1549125437249:x        = "Allele Ranking",
1549125437250:y        = expression(paste(italic(k), "-mer depth")),
1549125437251:caption  = expression(paste(italic(sigma), ": standard deviation")))+#,"sd: standard deviation") +
1549125437253:theme_bw() +
1549125437255:plotTheme +
1549125437257:theme(axis.text.x   = element_text(angle = 0, size = axisTextSize,
1549125437258:vjust = 1, hjust = 0.5, color = textColor))
1549125437260:dist.plot
1549125437261:}
1549125437263:# Function to get data for annotations ------------------------------------
1549125437264:getLabelsData <- function(data.to.plot) {
1549125437265:max.x <- max(data.to.plot$Position)
1549125437267:max.y <- max(data.to.plot$kmerDepth)
1549125437270:nLoci    <- length(unique(data.to.plot$Locus))
1549125437272:nAlleles <- length(unique(data.to.plot$N))
1549125437276:alleles     <- unique(data.to.plot$Allele)
1549125437277:loci        <- as.character(unique(data.to.plot$Locus))
1549125437279:lociLabels  <- c()
1549125437280:name.x      <- c()
1549125437281:name.y      <- c()
1549125437282:info.x      <- c()
1549125437283:info.y      <- c()
1549125437284:covs        <- c()
1549125437285:avgDepths   <- c()
1549125437287:meanDepth.x <- c()
1549125437289:meanDepth.y <- c()
1549125437290:for (i in loci) {
1549125437292:lociLabels <- c(lociLabels, rep(i, nAlleles))
1549125437293:}
1549125437294:for (allele in alleles) {
1549125437295:locus       <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1549125437296:maxPos      <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549125437297:maxDepth    <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549125437298:# name.x      <- c(name.x, (maxPos / 2))
1549125437300:name.x      <- c(name.x, (max.x / 2))
1549125437301:name.y      <- c(name.y, (maxDepth * 0.25))
1549125437302:info.x      <- c(info.x, max.x * 0.02)
1549125437304:info.y      <- c(info.y, maxDepth * 1.5)
1549125437305:covs        <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549125437307:avgDepths   <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549125437308:}
1549125437309:labelsData <- data.frame(Allele = alleles,
1549125437311:name.x = name.x,
1549125437312:name.y = name.y,
1549125437313:info.x = info.x,
1549125437314:info.y = info.y,
1549125437316:meanDepth = avgDepths,
1549125437317:N = rep(unique(data.to.plot$N), nLoci),
1549125437318:Locus = lociLabels,
1549125437320:cov = covs
1549125437321:) %>%
1549125437323:left_join(data.to.plot %>%
1549125437324:group_by(Allele, Length, NormKmerCount, Score) %>%
1549125437325:summarise(sd = sd(kmerDepth)),
1549125437327:by = c("Allele" = "Allele")) #%>%
1549125437328:# mutate(
1549125437329:#   info   = paste0("cov=", format(round(covs, 1), nsmall = 1), "%   ",
1549125437331:#                   paste0("ad=", format(round(avgDepths, 1), nsmall = 1)),
1549125437332:#                   "   ",
1549125437333:#                   # expression(paste(italic(sigma), "=",format(round(sd, 1), nsmall = 1))))
1549125437335:#                   paste0("sd=", format(round(sd, 1), nsmall = 1))
1549125437336:#   )
1549125437338:# )
1549125437340:labelsData
1549125437341:}
1549125437344:# Check for genes/loci file to filter loci to plot  -----------------------
1549125437345:loci.to.plot <- c()
1549125437346:# if (!is.null(gene.file)|| gene.file != "") {
1549125437348:if (!is.null(gene.file) && !is.na(gene.file) && gene.file != "") {
1549125437349:error.message <- CheckFileExists(gene.file)
1549125437350:if (!is.null(error.message)){
1549125437352:cat("Warning:")
1549125437354:cat(error.message)
1549125437356:cat("  The plotting process will continue without filtering genes/loci.\n")
1549125437357:} else {
1549125437359:loci.to.plot <- scan(gene.file, character(), quiet = TRUE)
1549125437360:}
1549125437362:}
1549125437366:# Data processing and plotting --------------------------------------------
1549125437368:cat("Plotting depths... ")
1549125437370:options(stringsAsFactors = T, readr.num_columns = 0)
1549125437374:# Load data
1549125437375:inData <- read_tsv(input.file)
1549125437377:# inData <- read.delim(input.file)
1549125437379:# colnames(inData) <- c("Allele", "Position", "k-mer Depth", "Weighted k-mer Depth")
1549125437381:colnames(inData) <- c("N", "Locus", "Allele", "Position", "kmerDepth",
1549125437382:"NormKmerCount", "Coverage", "Score", "AverageKmerDepth")
1549125437385:# Transform data
1549125437386:data.to.plot <- inData %>%
1549125437388:left_join(inData %>%
1549125437390:group_by(Allele) %>%
1549125437391:summarise(Length = n()), by = "Allele") %>%
1549125437393:arrange(Locus, N) %>%
1549125437394:mutate(
1549125437395:AlPos = factor(N, levels = unique(.$N)),
1549125437397:Allele = factor(Allele, levels = unique(inData$Allele)))
1549125437398:# Filtering loci/genes from genes_file input param
1549125437399:if (length(loci.to.plot) > 0) {
1549125437401:data.to.plot <- data.to.plot %>%
1549125437402:filter(Locus %in% loci.to.plot)
1549125437404:}
1549125437407:longestLocusNameLength <- max(str_length(as.character(unique(inData$Locus))))
1549125437409:# labelsData <- getLabelsData(data.to.plot)
1549125437410:nLoci      <- length(unique(data.to.plot$Locus))
1549125437412:nAlleles   <- length(unique(data.to.plot$N))
1549125437415:# Theme-related variable definition ---------------------------------------
1549125437418:annotLinetype         <- "solid"
1549125437420:annotTextSize         <- 4
1549125437423:axisColor             <- "#000000"
1549125437425:axisTextSize          <- 12
1549125437427:barAnnotTextSize      <- 4
1549125437429:baseTextSize          <- 14
1549125437431:gridColor             <- "#e0e0e0"
1549125437432:lineSize              <- 0.3
1549125437434:panelColor            <- "#fff4e0"
1549125437437:panelColor            <- "#f2efe6"
1549125437439:# panelColor            <- "#ffffff"
1549125437441:# stripBackground       <- "#cccccc"
1549125437442:stripTextSize         <- axisTextSize
1549125437444:if (longestLocusNameLength > 12)
1549125437446:stripTextSize       <- stripTextSize * 0.6
1549125437448:textColor             <- "#000000"
1549125437450:# baseFontFamily        <- "Arial"
1549125437454:# Custom theme definition for plots ---------------------------------------
1549125437457:plotTheme <- list(
1549125437459:theme(
1549125437460:axis.text.x      = element_text(angle = 50, size = axisTextSize,
1549125437462:vjust = 1, hjust = 1, color = textColor),
1549125437464:axis.text.y      = element_text(size = axisTextSize, color = textColor),
1549125437465:axis.ticks       = element_line(size = lineSize),
1549125437467:axis.title.x     = element_text(margin = margin(6,0,8,0, "mm")),
1549125437470:axis.title.y     = element_text(margin = margin(0,6,0,0, "mm")),
1549125437473:legend.position  = "none",
1549125437475:panel.border     = element_rect(size = lineSize),
1549125437476:panel.background = element_rect(fill = panelColor),
1549125437478:panel.grid       = element_line(size = lineSize, colour = gridColor),
1549125437480:panel.grid.minor = element_blank(),
1549125437482:plot.margin      = margin(10,10,0,10, "mm"),
1549125437484:panel.spacing    = unit(4, "mm"),
1549125437486:plot.caption     = element_text(size = baseTextSize * 0.7, face = "italic"),
1549125437489:plot.title       = element_text(hjust = 0.5),
1549125437491:plot.subtitle    = element_text(hjust = 0.5),
1549125437492:strip.background = element_rect(size = lineSize),
1549125437494:strip.text       = element_text(size = stripTextSize),
1549125437496:text             = element_text(size = baseTextSize)
1549125437498:)
1549125437499:)
1549125437503:# Palette definition ------------------------------------------------------
1549125437506:# colourCount <- length(unique(inData$Locus))
1549125437508:colourCount <- nLoci
1549125437509:# colourCount  <- length(unique(data.to.plot$Allele))
1549125437511:# fillPalette  <- colorRampPalette(brewer.pal(8, "Dark2"))(colourCount)
1549125437513:# fillPalette  <- colorRampPalette(brewer.pal(12, "Paired"))(colourCount)
1549125437515:# fillPalette  <- colorRampPalette(brewer.pal(9, "Set1"))(colourCount)
1549125437517:# fillPalette  <- colorRampPalette(pal_npg("nrc")(10))(colourCount)
1549125437518:# fillPalette  <- colorRampPalette(pal_d3("category20")(20))(colourCount)
1549125437521:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549125437523:borderPalette <- darkColors(fillPalette, 0.6)
1549125437528:# library("scales"); show_col(fillPalette); show_col(borderPalette)
1549125437538:# # Depth plot -------------------------------------------------------------
1549125437541:# hFactor  <- 1.2
1549125437543:# wFactor  <- 4.8
1549125437546:# # if (nLoci == 1)
1549125437549:# #   hFactor <- 1.4;
1549125437554:# height <- (nLoci * hFactor) + 2 + 0.1 + ((nLoci-1)*0.05)
1549125437557:# width  <- nAlleles * wFactor
1549125437559:# # Generate plot
1549125437562:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549125437564:# # Save plot
1549125437568:# out.filename <- paste0(out.prefix, ".", out.format)
1549125437571:# if (out.format == "png") {
1549125437574:# 	ggsave(filename = out.filename, plot = depth.plot,
1549125437577:# 				 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549125437579:# } else {
1549125437582:# 	ggsave(filename = out.filename, plot = depth.plot,
1549125437584:# 				 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549125437587:# }
1549125437593:# Depth plot -------------------------------------------------------------
1549125437595:# <<<<<<< HEAD
1549125437597:#   rowsPerPage <- 7
1549125437599:#   hFactor     <- 1.2
1549125437601:#   wFactor     <- 4.8
1549125437604:#   rows        <- nLoci
1549125437606:#   if (nLoci > rowsPerPage)
1549125437608:#     rows <- rowsPerPage;
1549125437612:#   height <- (rows * hFactor) + 2 + 0.1 + ((rows-1)*0.05)
1549125437614:#   width  <- nAlleles * wFactor
1549125437616:#
1549125437618:#   loci     <- unique(data.to.plot$Locus)
1549125437620:#   lociList <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549125437622:#   lociList <- split(loci, ceiling(seq_along(loci)/3))
1549125437624:#   plotList <- list()
1549125437626:#   for (lociSet in lociList) {
1549125437627:#   	print(lociSet)
1549125437629:#   	subset.to.plot <- data.to.plot %>%
1549125437631:#   		filter(Locus %in% lociSet)
1549125437632:#   	labelsData <- getLabelsData(subset.to.plot)
1549125437634:#   	currentPlot <- plotDepth(subset.to.plot, labelsData, fillPalette, borderPalette)
1549125437636:#   	plotList <- c(plotList, list(currentPlot))
1549125437638:#   	# print(currentPlot)
1549125437641:#   	# print(unique(subset.to.plot$Locus))
1549125437645:#   }
1549125437648:#  	length(plotList)
1549125437651:#
1549125437653:#  	if (out.format == "pdf") {
1549125437656:#  		out.filename <- paste(out.prefix, out.format, sep = ".")
1549125437658:#  		pdf(out.filename)
1549125437660:#  		for (i in seq_along(plotList)) {
1549125437662:#  			nLociToPlot <- length(lociList[[i]])
1549125437664:#  			height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1549125437666:#  			width  <- nAlleles * wFactor
1549125437668:#  			# out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549125437670:#  			# print(out.filename)
1549125437695:#  			print(plotList[[i]])
1549125437697:#  		}
1549125437699:#  		dev.off()
1549125437701:#
1549125437703:#  	}
1549125437705:#  	for (i in seq_along(plotList)) {
1549125437707:#  		nLociToPlot <- length(lociList[[i]])
1549125437709:#  		height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1549125437711:#  		width  <- nAlleles * wFactor
1549125437713:#  		out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549125437715:#  		print(out.filename)
1549125437718:#  		pdf(out.filename, width = width, height = height)
1549125437720:#  		print(plotList[[i]])
1549125437723:#  		dev.off()
1549125437726:#  	}
1549125437728:#  	else if (out.format == "png") {
1549125437731:#  		ggsave(filename = out.filename, plot = depth.plot,
1549125437733:#  					 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549125437735:#  	} else {
1549125437737:#  		ggsave(filename = out.filename, plot = depth.plot,
1549125437740:#  					 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549125437742:#  	}
1549125437745:#
1549125437748:#  	plot_grid()
1549125437750:#  	# Generate plot
1549125437752:#   # (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549125437757:# =======
1549125437759:hFactor  <- 1.6
1549125437760:wFactor  <- 4.8
1549125437762:# if (nLoci == 1)
1549125437765:#   hFactor <- 1.4;
1549125437771:#               loci          titles and     strip    space between locus
1549125437773:#                             footnote
1549125437776:height <- (nLoci * hFactor) + 2              + 0.1    + ((nLoci-1)*0.05)
1549125437780:getPlotHeight <- function(rows){
1549125437782:# loci + titles and foot note + strip + space between locus
1549125437784:(rows*hFactor) + 2.39 + ((rows-1)*0.157) #in
1549125437787:}
1549125437792:width  <- nAlleles * wFactor
1549125437794:height <- getPlotHeight(nLoci)
1549125437796:rowsPerPage <- 2
1549125437798:loci <- unique(data.to.plot$Locus)
1549125437800:sets <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549125437806:plots <- lapply(sets, function(set, dp=data.to.plot, rp=rowsPerPage){
1549125437808:# set <- sets[[2]]
1549125437810:subsetToPlot <- dp %>% filter(Locus %in% set)
1549125437812:ld    <- getLabelsData(subsetToPlot)
1549125437815:(p    <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette))
1549125437817:nLoci <- length(set)
1549125437819:if(nLoci < rp & out.format == "pdf"){
1549125437822:# hlay    <- matrix(c(rep(1, nLoci), rep(NA, rp-nLoci)))
1549125437825:# hlay    <- matrix(c(rep(1, nLoci), NA))
1549125437827:hlay    <- matrix(c(1, NA))
1549125437829:total   <- getPlotHeight(rp)
1549125437831:cHeight <- getPlotHeight(nLoci)
1549125437834:blank   <- getPlotHeight(rp-nLoci) - 2.39
1549125437836:# heights <- matrix(c(rep(1, nLoci), rep(1/rp+2, rp-nLoci)))
1549125437839:# heights <- matrix(c(rep(1, nLoci), 0.6))
1549125437842:heights <- matrix(c(cHeight/total, blank/total))
1549125437844:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549125437847:# p       <- grid.arrange(p, layout_matrix = hlay, heights = unit(c(cHeight, blank), c("in", "in")))
1549125437849:print(str_glue("{total}, {cHeight}, {blank}, {blank/total}"))
1549125437851:}
1549125437853:p
1549125437856:})
1549125437859:ml <- marrangeGrob(plots, nrow=1, ncol=1, #padding = unit(10, "mm"),
1549125437861:top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549125437863:# ml
1549125437865:ggsave(filename = "multipage.pdf", plot = ml,
1549125437867:width  = width, height = getPlotHeight(rowsPerPage), dpi = 400, limitsize = FALSE)
1549125437873:# Generate plot
1549125437875:labelsData <- getLabelsData(data.to.plot)
1549125437877:(depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549125437880:# >>>>>>> 64e9112fd081cc5c75caf0f7d0d03cd9f5ea18f4
1549125437882:# Save plot
1549125437884:out.filename <- paste0(out.prefix, ".", out.format)
1549125437887:if (out.format == "png") {
1549125437890:ggsave(filename = out.filename, plot = depth.plot,
1549125437892:width  = width, height = height, dpi = 300, limitsize = FALSE, type = "cairo-png")
1549125437894:} else {
1549125437897:ggsave(filename = out.filename, plot = depth.plot,
1549125437899:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549125437901:}
1549125437907:# Depth distribution plot ------------------------------------------------
1549125437910:hFactor  <- 3
1549125437913:wFactor  <- 2
1549125437916:if (nLoci == 1)
1549125437920:hFactor <- 3.5
1549125437923:height       <- nLoci * hFactor
1549125437926:width        <- nAlleles * wFactor
1549125437929:# Generate plot
1549125437933:(dist.plot <- plotDepthDist(data.to.plot, labelsData, fillPalette, borderPalette))
1549125437936:# Save plot
1549125437939:out.filename <- paste0(out.prefix, "_dist.", out.format)
1549125437942:if (out.format == "png") {
1549125437946:ggsave(filename = out.filename, plot = dist.plot,
1549125437949:width  = width, height = height, type = "cairo-png", dpi = 300)
1549125437951:} else {
1549125437955:ggsave(filename = out.filename, plot = dist.plot,
1549125437958:width  = width, height = height, dpi = 400)
1549125437961:}
1549125437964:cat("Done! \n")
1549125437970:# Code core - End ---------------------------------------------------------
1549125437973:}
1549125476089:#!/usr/bin/env Rscript
1549125476090:# ##############################################################################
1549125476091:#  Author:   Hector Fabio Espitia-Navarro
1549125476091:#            Georgia Institute of Technology
1549125476092:#  Version:  1.0
1549125476092:#  Date:     01/19/2019
1549125476092:# ##############################################################################
1549125476093:# Install required packages -----------------------------------------------
1549125476093:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549125476094:if(!file.exists(personal.lib.path))
1549125476094:dir.create(personal.lib.path)
1549125476095:printMessage <- function(message, verbose){
1549125476095:if(verbose)
1549125476095:cat(message)
1549125476096:}
1549125476096:# crayon::bold("Hola")
1549125476097:installAndLoadPackages <- function(pkg, verbose){
1549125476097:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1549125476098:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1549125476098:printMessage("Done!\n", verbose)
1549125476099:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549125476099:if (length(new.pkg)) {
1549125476100:printMessage("Installing new packages... ", verbose)
1549125476100:install.packages(new.pkg, dependencies = TRUE,
1549125476100:repos="http://cran.rstudio.com/",
1549125476101:lib = personal.lib.path)
1549125476101:printMessage("Done!\n", verbose)
1549125476102:}
1549125476102:printMessage("Loading required packages... ", verbose)
1549125476102:sapply(pkg, function(x){
1549125476103:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549125476103:})
1549125476104:printMessage("Done!\n", verbose)
1549125476104:}
1549125476105:# github.related.packages <- c("devtools", "Rcpp")
1549125476105:# packages <- c("argparser", "tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite")
1549125476105:packages <- c("tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite", "gridExtra")
1549125476106:# installAndLoadPackages(packages, verbose = TRUE)
1549125476106:installAndLoadPackages("argparser", verbose = FALSE)
1549125476130:# Command line arguments processing ---------------------------------------
1549125476130:# Get script name
1549125476131:initial.options <- commandArgs(trailingOnly = FALSE)
1549125476131:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1549125476132:# Process command line arguments
1549125476132:# Create a parser
1549125476132:p <- arg_parser("This script generates k-mer depth plots using a depth file generated by the\033[1mSTing typer\033[22m tool (-t option).",
1549125476133:name = script.name)
1549125476134:# Add Positional arguments (required)
1549125476134:p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
1549125476135:# Add options
1549125476135:p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1549125476136:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1549125476137:default = "kmer_depth")
1549125476138:p <- add_argument(p, "--sample_name", help = "Sample name.",
1549125476138:default = "input file's name")
1549125476139:p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'",
1549125476140:default = "pdf")
1549125476141:# Initialization of variables ---------------------------------------------
1549125476141:# Values to test the script using RStudio
1549125476142:script.home <- "/home/hspitia/projects/sting"
1549125476142:# inputFile   <- paste(script.home, "ERR036060.depth.2.tsv", sep = "/")
1549125476143:# geneFile    <- paste(script.home, "rmlst_failed_loci.txt", sep = "/")
1549125476143:inputFile   <- paste(script.home, "depth.tsv", sep = "/")
1549125476144:geneFile    <- paste(script.home, "loci.txt", sep = "/")
1549125476144:out.format  <- "pdf"
1549125476145:out.prefix  <- "kmer_ext_depth"
1549125476145:sample.name <- basename(inputFile)
1549125476145:# Parse command line arguments
1549125476146:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1549125476146:argv <- list()
1549125476147:if(command.line) {
1549125476147:argv <- parse_args(p)
1549125476147:} else {
1549125476147:argv <- parse_args(p, list(inputFile,
1549125476148:# "--gene_file", geneFile,
1549125476148:"--prefix", out.prefix,
1549125476149:"--sample_name", sample.name,
1549125476149:"--format", out.format))
1549125476149:}
1549125476151:# Get argument values from the command line
1549125476151:input.file  <- argv$input_file
1549125476151:gene.file   <- argv$gene_file
1549125476152:out.format  <- argv$format
1549125476152:out.prefix  <- argv$prefix
1549125476153:sample.name <- argv$sample_name
1549125476153:# if (sample.name == "")
1549125476153:if (sample.name == "input file's name")
1549125476154:sample.name <- basename(input.file)
1549125476154:# Function to check if file exists ----------------------------------------
1549125476155:CheckFileExists <- function(file.list) {
1549125476155:non.exist.files <- !file.exists(file.list)
1549125476155:if(any(non.exist.files)) {
1549125476156:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549125476156:}
1549125476157:}
1549125476157:# Check for input files ---------------------------------------------------
1549125476158:files.to.check <- c(input.file)
1549125476158:error.message  <- CheckFileExists(files.to.check)
1549125476159:if(!is.null(error.message)){
1549125476160:stop(error.message)
1549125476160:} else {
1549125476160:# Code core - Begin -------------------------------------------------------
1549125476161:installAndLoadPackages(packages, verbose = TRUE)
1549125476161:# FUNCTIONS:
1549125476161:# Function to dark a list of colors ---------------------------------------
1549125476162:darkColors <- function(palette, level){
1549125476162:rgbColors <- as.data.frame(t(as.data.frame(lapply(as.data.frame(t(col2rgb(palette))),
1549125476163:function(x) { round(x * level)}))))
1549125476163:unname(sapply(rgbColors, function(x){ rgb(x[1], x[2], x[3], maxColorValue=255) }))
1549125476164:}
1549125476165:# Function for plotting k-mer depth ----------------------------------------
1549125476165:plotDepth <- function(dataToPlot, labelsData, fillColors, borderColors) {
1549125476166:max.x       <- max(dataToPlot$Position)
1549125476166:max.y       <- max(dataToPlot$kmerDepth)
1549125476167:x.limits    <- seq(0, max.x, 100)
1549125476167:y.limits    <- seq(0, max.y, 20)
1549125476168:nTopAlleles <- length(unique(dataToPlot$N))
1549125476169:d.plot <- ggplot(data = dataToPlot, aes(x = Position, y = kmerDepth),
1549125476170:size = 0.2) +
1549125476170:geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1549125476171:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1549125476172:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1549125476173:# scale_color_manual(values = getPalette) +
1549125476174:scale_color_manual(values = borderColors) +
1549125476174:scale_fill_manual(values = fillColors) +
1549125476175:geom_text(data = labelsData,
1549125476176:# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1549125476177:# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1549125476179:aes(x = Length, y = info.y * 0.5, group = Locus,
1549125476180:hjust = 0,
1549125476181:label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1549125476182:show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1549125476182:nudge_x = -(max.x*0.025)
1549125476183:) +
1549125476184:geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1549125476185:alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1549125476186:# geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1549125476187:size = annotTextSize * 1.05, color = "#333333") +
1549125476188:geom_text(data = labelsData,
1549125476189:parse = TRUE,
1549125476190:aes(x = info.x, y = info.y,
1549125476191:label = paste0("{{{{italic(s)==", format(round(Score, 2), nsmall = 2),
1549125476193:"*~~~italic(hat(f)[k])} ==", format(round(NormKmerCount, 2), nsmall = 2),
1549125476194:"*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1549125476195:"*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1549125476196:"~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1549125476196:hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1549125476197:facet_grid(Locus ~ N, scales = "free_y") +
1549125476198:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1549125476199:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1549125476200:theme_bw() +
1549125476201:plotTheme +
1549125476202:labs(title    = expression(italic("k")*"-mer depth"),
1549125476203:subtitle = paste("Top", nTopAlleles, "alleles/genes on sample", sample.name),
1549125476204:x        = "Position along sequence (bp)",
1549125476205:y        = expression(paste(italic(k), "-mer depth")),
1549125476206:# caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1549125476210:caption  = expression(paste(italic("s"),": score;  ",
1549125476212:italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1549125476214:italic("c"),": coverage;  ",
1549125476216:italic(sigma), ": standard deviation;  ",
1549125476218:italic(bar(d)), ": average depth"), sep = "")
1549125476219:)
1549125476220:# guides(fill  = guide_legend(title  ="Allele"), color = FALSE) +
1549125476221:d.plot
1549125476223:}
1549125476224:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549125476225:# Function for plotting k-mer depth distributions as box plots ------------
1549125476227:plotDepthDist <- function(data.to.plot, labelsData, fillColors, borderColors){
1549125476228:dist.plot <- ggplot(data.to.plot, aes(x = AlPos, y = kmerDepth)) +
1549125476229:geom_jitter(position = position_jitter(width=.3), aes(color = Locus),
1549125476230:alpha = 0.4, size = 1.2, shape = 16) +
1549125476231:geom_boxplot(alpha = 0.7, size = 0.5, aes(fill = Locus, color = Locus)) +
1549125476232:geom_text(data = labelsData, size = 4, hjust = "center",
1549125476233:aes(x = N,#(N - 0.5),
1549125476235:y = info.y * 1.05,
1549125476236:label = Allele),
1549125476237:color = "#333333") +
1549125476238:geom_text(data = labelsData, size = 3, hjust = "center",
1549125476240:parse = TRUE,
1549125476241:aes(x = N,#(N - 0.4),
1549125476242:# y = info.y * 0.08,
1549125476244:y = info.y * 0.96,
1549125476245:label = paste0("sigma ==",format(round(sd, 1), nsmall = 1))),
1549125476246:color = "#333333") +
1549125476247:geom_point(data = labelsData,
1549125476249:shape = 23, fill = "white",
1549125476250:aes(x = N, y = meanDepth)) +
1549125476251:facet_grid(Locus ~ ., scales = "free_y") +
1549125476252:scale_color_manual(values = borderColors) +
1549125476254:scale_fill_manual(values = fillColors) +
1549125476255:labs(title = expression(paste(italic("k"), "-mer depth distribution")),
1549125476257:subtitle = basename(input.file),
1549125476258:x        = "Allele Ranking",
1549125476260:y        = expression(paste(italic(k), "-mer depth")),
1549125476261:caption  = expression(paste(italic(sigma), ": standard deviation")))+#,"sd: standard deviation") +
1549125476263:theme_bw() +
1549125476264:plotTheme +
1549125476266:theme(axis.text.x   = element_text(angle = 0, size = axisTextSize,
1549125476267:vjust = 1, hjust = 0.5, color = textColor))
1549125476268:dist.plot
1549125476270:}
1549125476271:# Function to get data for annotations ------------------------------------
1549125476273:getLabelsData <- function(data.to.plot) {
1549125476274:max.x <- max(data.to.plot$Position)
1549125476276:max.y <- max(data.to.plot$kmerDepth)
1549125476279:nLoci    <- length(unique(data.to.plot$Locus))
1549125476280:nAlleles <- length(unique(data.to.plot$N))
1549125476283:alleles     <- unique(data.to.plot$Allele)
1549125476284:loci        <- as.character(unique(data.to.plot$Locus))
1549125476286:lociLabels  <- c()
1549125476287:name.x      <- c()
1549125476289:name.y      <- c()
1549125476291:info.x      <- c()
1549125476292:info.y      <- c()
1549125476294:covs        <- c()
1549125476295:avgDepths   <- c()
1549125476297:meanDepth.x <- c()
1549125476298:meanDepth.y <- c()
1549125476300:for (i in loci) {
1549125476301:lociLabels <- c(lociLabels, rep(i, nAlleles))
1549125476303:}
1549125476304:for (allele in alleles) {
1549125476306:locus       <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1549125476308:maxPos      <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549125476310:maxDepth    <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549125476311:# name.x      <- c(name.x, (maxPos / 2))
1549125476313:name.x      <- c(name.x, (max.x / 2))
1549125476314:name.y      <- c(name.y, (maxDepth * 0.25))
1549125476316:info.x      <- c(info.x, max.x * 0.02)
1549125476318:info.y      <- c(info.y, maxDepth * 1.5)
1549125476319:covs        <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549125476321:avgDepths   <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549125476323:}
1549125476325:labelsData <- data.frame(Allele = alleles,
1549125476327:name.x = name.x,
1549125476328:name.y = name.y,
1549125476330:info.x = info.x,
1549125476332:info.y = info.y,
1549125476333:meanDepth = avgDepths,
1549125476335:N = rep(unique(data.to.plot$N), nLoci),
1549125476337:Locus = lociLabels,
1549125476338:cov = covs
1549125476340:) %>%
1549125476342:left_join(data.to.plot %>%
1549125476344:group_by(Allele, Length, NormKmerCount, Score) %>%
1549125476346:summarise(sd = sd(kmerDepth)),
1549125476348:by = c("Allele" = "Allele")) #%>%
1549125476349:# mutate(
1549125476351:#   info   = paste0("cov=", format(round(covs, 1), nsmall = 1), "%   ",
1549125476353:#                   paste0("ad=", format(round(avgDepths, 1), nsmall = 1)),
1549125476354:#                   "   ",
1549125476356:#                   # expression(paste(italic(sigma), "=",format(round(sd, 1), nsmall = 1))))
1549125476357:#                   paste0("sd=", format(round(sd, 1), nsmall = 1))
1549125476359:#   )
1549125476360:# )
1549125476362:labelsData
1549125476363:}
1549125476365:# Check for genes/loci file to filter loci to plot  -----------------------
1549125476367:loci.to.plot <- c()
1549125476368:# if (!is.null(gene.file)|| gene.file != "") {
1549125476369:if (!is.null(gene.file) && !is.na(gene.file) && gene.file != "") {
1549125476370:error.message <- CheckFileExists(gene.file)
1549125476372:if (!is.null(error.message)){
1549125476374:cat("Warning:")
1549125476375:cat(error.message)
1549125476377:cat("  The plotting process will continue without filtering genes/loci.\n")
1549125476378:} else {
1549125476379:loci.to.plot <- scan(gene.file, character(), quiet = TRUE)
1549125476381:}
1549125476382:}
1549125476384:# Data processing and plotting --------------------------------------------
1549125476385:cat("Plotting depths... ")
1549125476387:options(stringsAsFactors = T, readr.num_columns = 0)
1549125476389:# Load data
1549125476391:inData <- read_tsv(input.file)
1549125476392:# inData <- read.delim(input.file)
1549125476396:# colnames(inData) <- c("Allele", "Position", "k-mer Depth", "Weighted k-mer Depth")
1549125476397:colnames(inData) <- c("N", "Locus", "Allele", "Position", "kmerDepth",
1549125476399:"NormKmerCount", "Coverage", "Score", "AverageKmerDepth")
1549125476402:# Transform data
1549125476403:data.to.plot <- inData %>%
1549125476404:left_join(inData %>%
1549125476406:group_by(Allele) %>%
1549125476408:summarise(Length = n()), by = "Allele") %>%
1549125476409:arrange(Locus, N) %>%
1549125476411:mutate(
1549125476412:AlPos = factor(N, levels = unique(.$N)),
1549125476414:Allele = factor(Allele, levels = unique(inData$Allele)))
1549125476415:# Filtering loci/genes from genes_file input param
1549125476417:if (length(loci.to.plot) > 0) {
1549125476418:data.to.plot <- data.to.plot %>%
1549125476420:filter(Locus %in% loci.to.plot)
1549125476421:}
1549125476425:longestLocusNameLength <- max(str_length(as.character(unique(inData$Locus))))
1549125476426:# labelsData <- getLabelsData(data.to.plot)
1549125476428:nLoci      <- length(unique(data.to.plot$Locus))
1549125476429:nAlleles   <- length(unique(data.to.plot$N))
1549125476432:# Theme-related variable definition ---------------------------------------
1549125476433:annotLinetype         <- "solid"
1549125476435:annotTextSize         <- 4
1549125476436:axisColor             <- "#000000"
1549125476437:axisTextSize          <- 12
1549125476439:barAnnotTextSize      <- 4
1549125476441:baseTextSize          <- 14
1549125476443:gridColor             <- "#e0e0e0"
1549125476444:lineSize              <- 0.3
1549125476446:panelColor            <- "#fff4e0"
1549125476447:panelColor            <- "#f2efe6"
1549125476449:# panelColor            <- "#ffffff"
1549125476450:# stripBackground       <- "#cccccc"
1549125476451:stripTextSize         <- axisTextSize
1549125476453:if (longestLocusNameLength > 12)
1549125476454:stripTextSize       <- stripTextSize * 0.6
1549125476456:textColor             <- "#000000"
1549125476458:# baseFontFamily        <- "Arial"
1549125476462:# Custom theme definition for plots ---------------------------------------
1549125476464:plotTheme <- list(
1549125476466:theme(
1549125476467:axis.text.x      = element_text(angle = 50, size = axisTextSize,
1549125476468:vjust = 1, hjust = 1, color = textColor),
1549125476471:axis.text.y      = element_text(size = axisTextSize, color = textColor),
1549125476474:axis.ticks       = element_line(size = lineSize),
1549125476477:axis.title.x     = element_text(margin = margin(6,0,8,0, "mm")),
1549125476479:axis.title.y     = element_text(margin = margin(0,6,0,0, "mm")),
1549125476482:legend.position  = "none",
1549125476483:panel.border     = element_rect(size = lineSize),
1549125476485:panel.background = element_rect(fill = panelColor),
1549125476487:panel.grid       = element_line(size = lineSize, colour = gridColor),
1549125476488:panel.grid.minor = element_blank(),
1549125476490:plot.margin      = margin(10,10,0,10, "mm"),
1549125476492:panel.spacing    = unit(4, "mm"),
1549125476494:plot.caption     = element_text(size = baseTextSize * 0.7, face = "italic"),
1549125476496:plot.title       = element_text(hjust = 0.5),
1549125476498:plot.subtitle    = element_text(hjust = 0.5),
1549125476499:strip.background = element_rect(size = lineSize),
1549125476501:strip.text       = element_text(size = stripTextSize),
1549125476503:text             = element_text(size = baseTextSize)
1549125476505:)
1549125476507:)
1549125476511:# Palette definition ------------------------------------------------------
1549125476513:# colourCount <- length(unique(inData$Locus))
1549125476515:colourCount <- nLoci
1549125476516:# colourCount  <- length(unique(data.to.plot$Allele))
1549125476518:# fillPalette  <- colorRampPalette(brewer.pal(8, "Dark2"))(colourCount)
1549125476520:# fillPalette  <- colorRampPalette(brewer.pal(12, "Paired"))(colourCount)
1549125476522:# fillPalette  <- colorRampPalette(brewer.pal(9, "Set1"))(colourCount)
1549125476524:# fillPalette  <- colorRampPalette(pal_npg("nrc")(10))(colourCount)
1549125476526:# fillPalette  <- colorRampPalette(pal_d3("category20")(20))(colourCount)
1549125476528:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549125476530:borderPalette <- darkColors(fillPalette, 0.6)
1549125476531:# library("scales"); show_col(fillPalette); show_col(borderPalette)
1549125476538:# # Depth plot -------------------------------------------------------------
1549125476540:# hFactor  <- 1.2
1549125476542:# wFactor  <- 4.8
1549125476544:# # if (nLoci == 1)
1549125476546:# #   hFactor <- 1.4;
1549125476550:# height <- (nLoci * hFactor) + 2 + 0.1 + ((nLoci-1)*0.05)
1549125476551:# width  <- nAlleles * wFactor
1549125476553:# # Generate plot
1549125476555:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549125476557:# # Save plot
1549125476559:# out.filename <- paste0(out.prefix, ".", out.format)
1549125476561:# if (out.format == "png") {
1549125476563:# 	ggsave(filename = out.filename, plot = depth.plot,
1549125476565:# 				 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549125476566:# } else {
1549125476568:# 	ggsave(filename = out.filename, plot = depth.plot,
1549125476570:# 				 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549125476572:# }
1549125476576:# Depth plot -------------------------------------------------------------
1549125476578:# <<<<<<< HEAD
1549125476580:#   rowsPerPage <- 7
1549125476582:#   hFactor     <- 1.2
1549125476584:#   wFactor     <- 4.8
1549125476586:#   rows        <- nLoci
1549125476587:#   if (nLoci > rowsPerPage)
1549125476589:#     rows <- rowsPerPage;
1549125476593:#   height <- (rows * hFactor) + 2 + 0.1 + ((rows-1)*0.05)
1549125476595:#   width  <- nAlleles * wFactor
1549125476597:#
1549125476599:#   loci     <- unique(data.to.plot$Locus)
1549125476601:#   lociList <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549125476602:#   lociList <- split(loci, ceiling(seq_along(loci)/3))
1549125476604:#   plotList <- list()
1549125476606:#   for (lociSet in lociList) {
1549125476609:#   	print(lociSet)
1549125476611:#   	subset.to.plot <- data.to.plot %>%
1549125476613:#   		filter(Locus %in% lociSet)
1549125476614:#   	labelsData <- getLabelsData(subset.to.plot)
1549125476616:#   	currentPlot <- plotDepth(subset.to.plot, labelsData, fillPalette, borderPalette)
1549125476618:#   	plotList <- c(plotList, list(currentPlot))
1549125476620:#   	# print(currentPlot)
1549125476621:#   	# print(unique(subset.to.plot$Locus))
1549125476624:#   }
1549125476626:#  	length(plotList)
1549125476628:#
1549125476630:#  	if (out.format == "pdf") {
1549125476631:#  		out.filename <- paste(out.prefix, out.format, sep = ".")
1549125476633:#  		pdf(out.filename)
1549125476635:#  		for (i in seq_along(plotList)) {
1549125476637:#  			nLociToPlot <- length(lociList[[i]])
1549125476639:#  			height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1549125476641:#  			width  <- nAlleles * wFactor
1549125476644:#  			# out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549125476645:#  			# print(out.filename)
1549125476647:#  			print(plotList[[i]])
1549125476649:#  		}
1549125476651:#  		dev.off()
1549125476653:#
1549125476654:#  	}
1549125476656:#  	for (i in seq_along(plotList)) {
1549125476659:#  		nLociToPlot <- length(lociList[[i]])
1549125476661:#  		height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1549125476663:#  		width  <- nAlleles * wFactor
1549125476665:#  		out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549125476667:#  		print(out.filename)
1549125476669:#  		pdf(out.filename, width = width, height = height)
1549125476671:#  		print(plotList[[i]])
1549125476673:#  		dev.off()
1549125476676:#  	}
1549125476678:#  	else if (out.format == "png") {
1549125476680:#  		ggsave(filename = out.filename, plot = depth.plot,
1549125476682:#  					 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549125476684:#  	} else {
1549125476685:#  		ggsave(filename = out.filename, plot = depth.plot,
1549125476687:#  					 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549125476689:#  	}
1549125476692:#
1549125476694:#  	plot_grid()
1549125476696:#  	# Generate plot
1549125476698:#   # (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549125476701:# =======
1549125476703:hFactor  <- 1.6
1549125476705:wFactor  <- 4.8
1549125476707:# if (nLoci == 1)
1549125476710:#   hFactor <- 1.4;
1549125476715:#               loci          titles and     strip    space between locus
1549125476717:#                             footnote
1549125476719:height <- (nLoci * hFactor) + 2              + 0.1    + ((nLoci-1)*0.05)
1549125476723:getPlotHeight <- function(rows){
1549125476725:# loci + titles and foot note + strip + space between locus
1549125476727:(rows*hFactor) + 2.39 + ((rows-1)*0.157) #in
1549125476729:}
1549125476733:width  <- nAlleles * wFactor
1549125476735:height <- getPlotHeight(nLoci)
1549125476736:rowsPerPage <- 6
1549125476738:loci <- unique(data.to.plot$Locus)
1549125476740:sets <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549125476744:plots <- lapply(sets, function(set, dp=data.to.plot, rp=rowsPerPage){
1549125476845:# set <- sets[[2]]
1549125476848:subsetToPlot <- dp %>% filter(Locus %in% set)
1549125476850:ld    <- getLabelsData(subsetToPlot)
1549125476853:(p    <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette))
1549125476856:nLoci <- length(set)
1549125476859:if(nLoci < rp & out.format == "pdf"){
1549125476862:hlay    <- matrix(c(1, NA))
1549125476864:total   <- getPlotHeight(rp)
1549125476867:cHeight <- getPlotHeight(nLoci)
1549125476870:blank   <- getPlotHeight(rp-nLoci) - 2.39
1549125476872:heights <- matrix(c(cHeight/total, blank/total))
1549125476875:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549125476878:# p       <- grid.arrange(p, layout_matrix = hlay, heights = unit(c(cHeight, blank), c("in", "in")))
1549125476881:print(str_glue("{total}, {cHeight}, {blank}, {blank/total}"))
1549125476884:}
1549125476886:p
1549125476889:})
1549125476893:ml <- marrangeGrob(plots, nrow=1, ncol=1, #padding = unit(10, "mm"),
1549125476895:top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549125476898:# ml
1549125476901:ggsave(filename = "multipage.pdf", plot = ml,
1549125476904:width  = width, height = getPlotHeight(rowsPerPage), dpi = 400, limitsize = FALSE)
1549125476910:# Generate plot
1549125476913:labelsData <- getLabelsData(data.to.plot)
1549125476916:(depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549125476919:# >>>>>>> 64e9112fd081cc5c75caf0f7d0d03cd9f5ea18f4
1549125476922:# Save plot
1549125476925:out.filename <- paste0(out.prefix, ".", out.format)
1549125476928:if (out.format == "png") {
1549125476931:ggsave(filename = out.filename, plot = depth.plot,
1549125476934:width  = width, height = height, dpi = 300, limitsize = FALSE, type = "cairo-png")
1549125476937:} else {
1549125476940:ggsave(filename = out.filename, plot = depth.plot,
1549125476943:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549125476946:}
1549125476952:# Depth distribution plot ------------------------------------------------
1549125476955:hFactor  <- 3
1549125476959:wFactor  <- 2
1549125476961:if (nLoci == 1)
1549125476964:hFactor <- 3.5
1549125476967:height       <- nLoci * hFactor
1549125476970:width        <- nAlleles * wFactor
1549125476973:# Generate plot
1549125476977:(dist.plot <- plotDepthDist(data.to.plot, labelsData, fillPalette, borderPalette))
1549125476980:# Save plot
1549125476983:out.filename <- paste0(out.prefix, "_dist.", out.format)
1549125476986:if (out.format == "png") {
1549125476989:ggsave(filename = out.filename, plot = dist.plot,
1549125476992:width  = width, height = height, type = "cairo-png", dpi = 300)
1549125476995:} else {
1549125476998:ggsave(filename = out.filename, plot = dist.plot,
1549125477001:width  = width, height = height, dpi = 400)
1549125477004:}
1549125477009:cat("Done! \n")
1549125477015:# Code core - End ---------------------------------------------------------
1549125477017:}
1549125499914:#!/usr/bin/env Rscript
1549125499914:# ##############################################################################
1549125499915:#  Author:   Hector Fabio Espitia-Navarro
1549125499915:#            Georgia Institute of Technology
1549125499915:#  Version:  1.0
1549125499916:#  Date:     01/19/2019
1549125499916:# ##############################################################################
1549125499916:# Install required packages -----------------------------------------------
1549125499917:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549125499917:if(!file.exists(personal.lib.path))
1549125499918:dir.create(personal.lib.path)
1549125499918:printMessage <- function(message, verbose){
1549125499919:if(verbose)
1549125499919:cat(message)
1549125499919:}
1549125499920:# crayon::bold("Hola")
1549125499920:installAndLoadPackages <- function(pkg, verbose){
1549125499921:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1549125499921:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1549125499921:printMessage("Done!\n", verbose)
1549125499921:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549125499922:if (length(new.pkg)) {
1549125499922:printMessage("Installing new packages... ", verbose)
1549125499922:install.packages(new.pkg, dependencies = TRUE,
1549125499923:repos="http://cran.rstudio.com/",
1549125499923:lib = personal.lib.path)
1549125499924:printMessage("Done!\n", verbose)
1549125499924:}
1549125499925:printMessage("Loading required packages... ", verbose)
1549125499925:sapply(pkg, function(x){
1549125499925:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549125499926:})
1549125499926:printMessage("Done!\n", verbose)
1549125499927:}
1549125499928:# github.related.packages <- c("devtools", "Rcpp")
1549125499928:# packages <- c("argparser", "tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite")
1549125499928:packages <- c("tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite", "gridExtra")
1549125499929:# installAndLoadPackages(packages, verbose = TRUE)
1549125499929:installAndLoadPackages("argparser", verbose = FALSE)
1549125499964:# Command line arguments processing ---------------------------------------
1549125499965:# Get script name
1549125499965:initial.options <- commandArgs(trailingOnly = FALSE)
1549125499966:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1549125499967:# Process command line arguments
1549125499967:# Create a parser
1549125499968:p <- arg_parser("This script generates k-mer depth plots using a depth file generated by the\033[1mSTing typer\033[22m tool (-t option).",
1549125499968:name = script.name)
1549125499971:# Add Positional arguments (required)
1549125499971:p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
1549125499972:# Add options
1549125499973:p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1549125499975:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1549125499975:default = "kmer_depth")
1549125499977:p <- add_argument(p, "--sample_name", help = "Sample name.",
1549125499978:default = "input file's name")
1549125499979:p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'",
1549125499980:default = "pdf")
1549125499981:# Initialization of variables ---------------------------------------------
1549125499982:# Values to test the script using RStudio
1549125499982:script.home <- "/home/hspitia/projects/sting"
1549125499983:# inputFile   <- paste(script.home, "ERR036060.depth.2.tsv", sep = "/")
1549125499983:# geneFile    <- paste(script.home, "rmlst_failed_loci.txt", sep = "/")
1549125499984:inputFile   <- paste(script.home, "depth.tsv", sep = "/")
1549125499984:geneFile    <- paste(script.home, "loci.txt", sep = "/")
1549125499985:out.format  <- "pdf"
1549125499986:out.prefix  <- "kmer_ext_depth"
1549125499987:sample.name <- basename(inputFile)
1549125499988:# Parse command line arguments
1549125499988:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1549125499989:argv <- list()
1549125499989:if(command.line) {
1549125499990:argv <- parse_args(p)
1549125499991:} else {
1549125499991:argv <- parse_args(p, list(inputFile,
1549125499992:# "--gene_file", geneFile,
1549125499993:"--prefix", out.prefix,
1549125499993:"--sample_name", sample.name,
1549125499994:"--format", out.format))
1549125499994:}
1549125499996:# Get argument values from the command line
1549125499996:input.file  <- argv$input_file
1549125499997:gene.file   <- argv$gene_file
1549125499998:out.format  <- argv$format
1549125499999:out.prefix  <- argv$prefix
1549125500000:sample.name <- argv$sample_name
1549125500000:# if (sample.name == "")
1549125500001:if (sample.name == "input file's name")
1549125500001:sample.name <- basename(input.file)
1549125500002:# Function to check if file exists ----------------------------------------
1549125500003:CheckFileExists <- function(file.list) {
1549125500003:non.exist.files <- !file.exists(file.list)
1549125500004:if(any(non.exist.files)) {
1549125500004:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549125500005:}
1549125500005:}
1549125500006:# Check for input files ---------------------------------------------------
1549125500006:files.to.check <- c(input.file)
1549125500007:error.message  <- CheckFileExists(files.to.check)
1549125500009:if(!is.null(error.message)){
1549125500009:stop(error.message)
1549125500010:} else {
1549125500010:# Code core - Begin -------------------------------------------------------
1549125500011:installAndLoadPackages(packages, verbose = TRUE)
1549125500011:# FUNCTIONS:
1549125500012:# Function to dark a list of colors ---------------------------------------
1549125500012:darkColors <- function(palette, level){
1549125500013:rgbColors <- as.data.frame(t(as.data.frame(lapply(as.data.frame(t(col2rgb(palette))),
1549125500014:function(x) { round(x * level)}))))
1549125500014:unname(sapply(rgbColors, function(x){ rgb(x[1], x[2], x[3], maxColorValue=255) }))
1549125500015:}
1549125500015:# Function for plotting k-mer depth ----------------------------------------
1549125500016:plotDepth <- function(dataToPlot, labelsData, fillColors, borderColors) {
1549125500017:max.x       <- max(dataToPlot$Position)
1549125500018:max.y       <- max(dataToPlot$kmerDepth)
1549125500019:x.limits    <- seq(0, max.x, 100)
1549125500019:y.limits    <- seq(0, max.y, 20)
1549125500020:nTopAlleles <- length(unique(dataToPlot$N))
1549125500021:d.plot <- ggplot(data = dataToPlot, aes(x = Position, y = kmerDepth),
1549125500022:size = 0.2) +
1549125500023:geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1549125500024:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1549125500025:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1549125500026:# scale_color_manual(values = getPalette) +
1549125500027:scale_color_manual(values = borderColors) +
1549125500027:scale_fill_manual(values = fillColors) +
1549125500029:geom_text(data = labelsData,
1549125500030:# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1549125500031:# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1549125500031:aes(x = Length, y = info.y * 0.5, group = Locus,
1549125500032:hjust = 0,
1549125500034:label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1549125500036:show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1549125500038:nudge_x = -(max.x*0.025)
1549125500039:) +
1549125500041:geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1549125500042:alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1549125500043:# geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1549125500044:size = annotTextSize * 1.05, color = "#333333") +
1549125500045:geom_text(data = labelsData,
1549125500046:parse = TRUE,
1549125500046:aes(x = info.x, y = info.y,
1549125500047:label = paste0("{{{{italic(s)==", format(round(Score, 2), nsmall = 2),
1549125500048:"*~~~italic(hat(f)[k])} ==", format(round(NormKmerCount, 2), nsmall = 2),
1549125500049:"*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1549125500050:"*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1549125500051:"~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1549125500052:hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1549125500053:facet_grid(Locus ~ N, scales = "free_y") +
1549125500054:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1549125500054:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1549125500055:theme_bw() +
1549125500056:plotTheme +
1549125500058:labs(title    = expression(italic("k")*"-mer depth"),
1549125500060:subtitle = paste("Top", nTopAlleles, "alleles/genes on sample", sample.name),
1549125500061:x        = "Position along sequence (bp)",
1549125500062:y        = expression(paste(italic(k), "-mer depth")),
1549125500063:# caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1549125500066:caption  = expression(paste(italic("s"),": score;  ",
1549125500068:italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1549125500070:italic("c"),": coverage;  ",
1549125500072:italic(sigma), ": standard deviation;  ",
1549125500075:italic(bar(d)), ": average depth"), sep = "")
1549125500076:)
1549125500078:# guides(fill  = guide_legend(title  ="Allele"), color = FALSE) +
1549125500079:d.plot
1549125500080:}
1549125500082:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549125500083:# Function for plotting k-mer depth distributions as box plots ------------
1549125500084:plotDepthDist <- function(data.to.plot, labelsData, fillColors, borderColors){
1549125500085:dist.plot <- ggplot(data.to.plot, aes(x = AlPos, y = kmerDepth)) +
1549125500086:geom_jitter(position = position_jitter(width=.3), aes(color = Locus),
1549125500088:alpha = 0.4, size = 1.2, shape = 16) +
1549125500090:geom_boxplot(alpha = 0.7, size = 0.5, aes(fill = Locus, color = Locus)) +
1549125500091:geom_text(data = labelsData, size = 4, hjust = "center",
1549125500093:aes(x = N,#(N - 0.5),
1549125500094:y = info.y * 1.05,
1549125500096:label = Allele),
1549125500097:color = "#333333") +
1549125500098:geom_text(data = labelsData, size = 3, hjust = "center",
1549125500099:parse = TRUE,
1549125500101:aes(x = N,#(N - 0.4),
1549125500102:# y = info.y * 0.08,
1549125500103:y = info.y * 0.96,
1549125500105:label = paste0("sigma ==",format(round(sd, 1), nsmall = 1))),
1549125500106:color = "#333333") +
1549125500107:geom_point(data = labelsData,
1549125500109:shape = 23, fill = "white",
1549125500110:aes(x = N, y = meanDepth)) +
1549125500112:facet_grid(Locus ~ ., scales = "free_y") +
1549125500113:scale_color_manual(values = borderColors) +
1549125500115:scale_fill_manual(values = fillColors) +
1549125500116:labs(title = expression(paste(italic("k"), "-mer depth distribution")),
1549125500117:subtitle = basename(input.file),
1549125500118:x        = "Allele Ranking",
1549125500120:y        = expression(paste(italic(k), "-mer depth")),
1549125500121:caption  = expression(paste(italic(sigma), ": standard deviation")))+#,"sd: standard deviation") +
1549125500123:theme_bw() +
1549125500125:plotTheme +
1549125500126:theme(axis.text.x   = element_text(angle = 0, size = axisTextSize,
1549125500128:vjust = 1, hjust = 0.5, color = textColor))
1549125500129:dist.plot
1549125500131:}
1549125500132:# Function to get data for annotations ------------------------------------
1549125500134:getLabelsData <- function(data.to.plot) {
1549125500135:max.x <- max(data.to.plot$Position)
1549125500136:max.y <- max(data.to.plot$kmerDepth)
1549125500139:nLoci    <- length(unique(data.to.plot$Locus))
1549125500141:nAlleles <- length(unique(data.to.plot$N))
1549125500145:alleles     <- unique(data.to.plot$Allele)
1549125500146:loci        <- as.character(unique(data.to.plot$Locus))
1549125500148:lociLabels  <- c()
1549125500149:name.x      <- c()
1549125500151:name.y      <- c()
1549125500152:info.x      <- c()
1549125500154:info.y      <- c()
1549125500155:covs        <- c()
1549125500157:avgDepths   <- c()
1549125500159:meanDepth.x <- c()
1549125500161:meanDepth.y <- c()
1549125500163:for (i in loci) {
1549125500164:lociLabels <- c(lociLabels, rep(i, nAlleles))
1549125500166:}
1549125500168:for (allele in alleles) {
1549125500169:locus       <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1549125500171:maxPos      <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549125500173:maxDepth    <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549125500175:# name.x      <- c(name.x, (maxPos / 2))
1549125500177:name.x      <- c(name.x, (max.x / 2))
1549125500178:name.y      <- c(name.y, (maxDepth * 0.25))
1549125500180:info.x      <- c(info.x, max.x * 0.02)
1549125500182:info.y      <- c(info.y, maxDepth * 1.5)
1549125500184:covs        <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549125500186:avgDepths   <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549125500188:}
1549125500190:labelsData <- data.frame(Allele = alleles,
1549125500192:name.x = name.x,
1549125500194:name.y = name.y,
1549125500196:info.x = info.x,
1549125500197:info.y = info.y,
1549125500199:meanDepth = avgDepths,
1549125500201:N = rep(unique(data.to.plot$N), nLoci),
1549125500202:Locus = lociLabels,
1549125500204:cov = covs
1549125500206:) %>%
1549125500208:left_join(data.to.plot %>%
1549125500210:group_by(Allele, Length, NormKmerCount, Score) %>%
1549125500212:summarise(sd = sd(kmerDepth)),
1549125500214:by = c("Allele" = "Allele")) #%>%
1549125500216:# mutate(
1549125500218:#   info   = paste0("cov=", format(round(covs, 1), nsmall = 1), "%   ",
1549125500220:#                   paste0("ad=", format(round(avgDepths, 1), nsmall = 1)),
1549125500222:#                   "   ",
1549125500224:#                   # expression(paste(italic(sigma), "=",format(round(sd, 1), nsmall = 1))))
1549125500226:#                   paste0("sd=", format(round(sd, 1), nsmall = 1))
1549125500228:#   )
1549125500230:# )
1549125500232:labelsData
1549125500233:}
1549125500237:# Check for genes/loci file to filter loci to plot  -----------------------
1549125500239:loci.to.plot <- c()
1549125500241:# if (!is.null(gene.file)|| gene.file != "") {
1549125500243:if (!is.null(gene.file) && !is.na(gene.file) && gene.file != "") {
1549125500245:error.message <- CheckFileExists(gene.file)
1549125500247:if (!is.null(error.message)){
1549125500249:cat("Warning:")
1549125500251:cat(error.message)
1549125500253:cat("  The plotting process will continue without filtering genes/loci.\n")
1549125500254:} else {
1549125500256:loci.to.plot <- scan(gene.file, character(), quiet = TRUE)
1549125500259:}
1549125500261:}
1549125500265:# Data processing and plotting --------------------------------------------
1549125500267:cat("Plotting depths... ")
1549125500269:options(stringsAsFactors = T, readr.num_columns = 0)
1549125500272:# Load data
1549125500274:inData <- read_tsv(input.file)
1549125500277:# inData <- read.delim(input.file)
1549125500281:# colnames(inData) <- c("Allele", "Position", "k-mer Depth", "Weighted k-mer Depth")
1549125500283:colnames(inData) <- c("N", "Locus", "Allele", "Position", "kmerDepth",
1549125500285:"NormKmerCount", "Coverage", "Score", "AverageKmerDepth")
1549125500288:# Transform data
1549125500290:data.to.plot <- inData %>%
1549125500293:left_join(inData %>%
1549125500295:group_by(Allele) %>%
1549125500297:summarise(Length = n()), by = "Allele") %>%
1549125500299:arrange(Locus, N) %>%
1549125500301:mutate(
1549125500303:AlPos = factor(N, levels = unique(.$N)),
1549125500305:Allele = factor(Allele, levels = unique(inData$Allele)))
1549125500307:# Filtering loci/genes from genes_file input param
1549125500310:if (length(loci.to.plot) > 0) {
1549125500312:data.to.plot <- data.to.plot %>%
1549125500314:filter(Locus %in% loci.to.plot)
1549125500316:}
1549125500320:longestLocusNameLength <- max(str_length(as.character(unique(inData$Locus))))
1549125500322:# labelsData <- getLabelsData(data.to.plot)
1549125500324:nLoci      <- length(unique(data.to.plot$Locus))
1549125500327:nAlleles   <- length(unique(data.to.plot$N))
1549125500331:# Theme-related variable definition ---------------------------------------
1549125500333:annotLinetype         <- "solid"
1549125500335:annotTextSize         <- 4
1549125500337:axisColor             <- "#000000"
1549125500339:axisTextSize          <- 12
1549125500341:barAnnotTextSize      <- 4
1549125500344:baseTextSize          <- 14
1549125500346:gridColor             <- "#e0e0e0"
1549125500349:lineSize              <- 0.3
1549125500351:panelColor            <- "#fff4e0"
1549125500353:panelColor            <- "#f2efe6"
1549125500355:# panelColor            <- "#ffffff"
1549125500357:# stripBackground       <- "#cccccc"
1549125500360:stripTextSize         <- axisTextSize
1549125500362:if (longestLocusNameLength > 12)
1549125500364:stripTextSize       <- stripTextSize * 0.6
1549125500365:textColor             <- "#000000"
1549125500367:# baseFontFamily        <- "Arial"
1549125500370:# Custom theme definition for plots ---------------------------------------
1549125500371:plotTheme <- list(
1549125500373:theme(
1549125500375:axis.text.x      = element_text(angle = 50, size = axisTextSize,
1549125500376:vjust = 1, hjust = 1, color = textColor),
1549125500379:axis.text.y      = element_text(size = axisTextSize, color = textColor),
1549125500383:axis.ticks       = element_line(size = lineSize),
1549125500385:axis.title.x     = element_text(margin = margin(6,0,8,0, "mm")),
1549125500387:axis.title.y     = element_text(margin = margin(0,6,0,0, "mm")),
1549125500389:legend.position  = "none",
1549125500394:panel.border     = element_rect(size = lineSize),
1549125500400:panel.background = element_rect(fill = panelColor),
1549125500403:panel.grid       = element_line(size = lineSize, colour = gridColor),
1549125500406:panel.grid.minor = element_blank(),
1549125500408:plot.margin      = margin(10,10,0,10, "mm"),
1549125500411:panel.spacing    = unit(4, "mm"),
1549125500413:plot.caption     = element_text(size = baseTextSize * 0.7, face = "italic"),
1549125500415:plot.title       = element_text(hjust = 0.5),
1549125500418:plot.subtitle    = element_text(hjust = 0.5),
1549125500420:strip.background = element_rect(size = lineSize),
1549125500423:strip.text       = element_text(size = stripTextSize),
1549125500425:text             = element_text(size = baseTextSize)
1549125500428:)
1549125500431:)
1549125500435:# Palette definition ------------------------------------------------------
1549125500438:# colourCount <- length(unique(inData$Locus))
1549125500440:colourCount <- nLoci
1549125500443:# colourCount  <- length(unique(data.to.plot$Allele))
1549125500445:# fillPalette  <- colorRampPalette(brewer.pal(8, "Dark2"))(colourCount)
1549125500448:# fillPalette  <- colorRampPalette(brewer.pal(12, "Paired"))(colourCount)
1549125500450:# fillPalette  <- colorRampPalette(brewer.pal(9, "Set1"))(colourCount)
1549125500453:# fillPalette  <- colorRampPalette(pal_npg("nrc")(10))(colourCount)
1549125500455:# fillPalette  <- colorRampPalette(pal_d3("category20")(20))(colourCount)
1549125500458:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549125500460:borderPalette <- darkColors(fillPalette, 0.6)
1549125500463:# library("scales"); show_col(fillPalette); show_col(borderPalette)
1549125500472:# # Depth plot -------------------------------------------------------------
1549125500474:# hFactor  <- 1.2
1549125500477:# wFactor  <- 4.8
1549125500480:# # if (nLoci == 1)
1549125500482:# #   hFactor <- 1.4;
1549125500487:# height <- (nLoci * hFactor) + 2 + 0.1 + ((nLoci-1)*0.05)
1549125500489:# width  <- nAlleles * wFactor
1549125500492:# # Generate plot
1549125500495:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549125500497:# # Save plot
1549125500500:# out.filename <- paste0(out.prefix, ".", out.format)
1549125500502:# if (out.format == "png") {
1549125500504:# 	ggsave(filename = out.filename, plot = depth.plot,
1549125500507:# 				 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549125500510:# } else {
1549125500512:# 	ggsave(filename = out.filename, plot = depth.plot,
1549125500515:# 				 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549125500517:# }
1549125500522:# Depth plot -------------------------------------------------------------
1549125500525:# <<<<<<< HEAD
1549125500527:#   rowsPerPage <- 7
1549125500530:#   hFactor     <- 1.2
1549125500532:#   wFactor     <- 4.8
1549125500535:#   rows        <- nLoci
1549125500537:#   if (nLoci > rowsPerPage)
1549125500540:#     rows <- rowsPerPage;
1549125500545:#   height <- (rows * hFactor) + 2 + 0.1 + ((rows-1)*0.05)
1549125500547:#   width  <- nAlleles * wFactor
1549125500550:#
1549125500552:#   loci     <- unique(data.to.plot$Locus)
1549125500555:#   lociList <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549125500557:#   lociList <- split(loci, ceiling(seq_along(loci)/3))
1549125500560:#   plotList <- list()
1549125500563:#   for (lociSet in lociList) {
1549125500565:#   	print(lociSet)
1549125500568:#   	subset.to.plot <- data.to.plot %>%
1549125500570:#   		filter(Locus %in% lociSet)
1549125500573:#   	labelsData <- getLabelsData(subset.to.plot)
1549125500576:#   	currentPlot <- plotDepth(subset.to.plot, labelsData, fillPalette, borderPalette)
1549125500578:#   	plotList <- c(plotList, list(currentPlot))
1549125500581:#   	# print(currentPlot)
1549125500583:#   	# print(unique(subset.to.plot$Locus))
1549125500586:#   }
1549125500588:#  	length(plotList)
1549125500591:#
1549125500593:#  	if (out.format == "pdf") {
1549125500596:#  		out.filename <- paste(out.prefix, out.format, sep = ".")
1549125500598:#  		pdf(out.filename)
1549125500601:#  		for (i in seq_along(plotList)) {
1549125500603:#  			nLociToPlot <- length(lociList[[i]])
1549125500606:#  			height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1549125500609:#  			width  <- nAlleles * wFactor
1549125500611:#  			# out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549125500614:#  			# print(out.filename)
1549125500616:#  			print(plotList[[i]])
1549125500619:#  		}
1549125500621:#  		dev.off()
1549125500624:#
1549125500627:#  	}
1549125500629:#  	for (i in seq_along(plotList)) {
1549125500632:#  		nLociToPlot <- length(lociList[[i]])
1549125500634:#  		height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1549125500637:#  		width  <- nAlleles * wFactor
1549125500639:#  		out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549125500642:#  		print(out.filename)
1549125500644:#  		pdf(out.filename, width = width, height = height)
1549125500647:#  		print(plotList[[i]])
1549125500650:#  		dev.off()
1549125500652:#  	}
1549125500655:#  	else if (out.format == "png") {
1549125500657:#  		ggsave(filename = out.filename, plot = depth.plot,
1549125500660:#  					 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549125500663:#  	} else {
1549125500665:#  		ggsave(filename = out.filename, plot = depth.plot,
1549125500668:#  					 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549125500670:#  	}
1549125500673:#
1549125500676:#  	plot_grid()
1549125500679:#  	# Generate plot
1549125500681:#   # (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549125500686:# =======
1549125500688:hFactor  <- 1.6
1549125500691:wFactor  <- 4.8
1549125500694:# if (nLoci == 1)
1549125500696:#   hFactor <- 1.4;
1549125500703:#               loci          titles and     strip    space between locus
1549125500706:#                             footnote
1549125500709:height <- (nLoci * hFactor) + 2              + 0.1    + ((nLoci-1)*0.05)
1549125500714:getPlotHeight <- function(rows){
1549125500716:# loci + titles and foot note + strip + space between locus
1549125500719:(rows*hFactor) + 2.39 + ((rows-1)*0.157) #in
1549125500721:}
1549125500727:width  <- nAlleles * wFactor
1549125500729:height <- getPlotHeight(nLoci)
1549125500732:rowsPerPage <- 6
1549125500734:loci <- unique(data.to.plot$Locus)
1549125500737:sets <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549125500742:plots <- lapply(sets, function(set, dp=data.to.plot, rp=rowsPerPage){
1549125500745:# set <- sets[[2]]
1549125500747:subsetToPlot <- dp %>% filter(Locus %in% set)
1549125500750:ld    <- getLabelsData(subsetToPlot)
1549125500753:(p    <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette))
1549125500755:nLoci <- length(set)
1549125500758:if(nLoci < rp & out.format == "pdf"){
1549125500761:hlay    <- matrix(c(1, NA))
1549125500764:total   <- getPlotHeight(rp)
1549125500767:cHeight <- getPlotHeight(nLoci)
1549125500769:blank   <- getPlotHeight(rp-nLoci) - 2.39
1549125500772:heights <- matrix(c(cHeight/total, blank/total))
1549125500775:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549125500778:# p       <- grid.arrange(p, layout_matrix = hlay, heights = unit(c(cHeight, blank), c("in", "in")))
1549125500781:print(str_glue("{total}, {cHeight}, {blank}, {blank/total}"))
1549125500784:}
1549125500786:p
1549125500789:})
1549125500792:ml <- marrangeGrob(plots, nrow=1, ncol=1, padding = unit(10, "mm"),
1549125500795:top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549125500798:# ml
1549125500801:ggsave(filename = "multipage.pdf", plot = ml,
1549125500804:width  = width, height = getPlotHeight(rowsPerPage), dpi = 400, limitsize = FALSE)
1549125500810:# Generate plot
1549125500813:labelsData <- getLabelsData(data.to.plot)
1549125500816:(depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549125500819:# >>>>>>> 64e9112fd081cc5c75caf0f7d0d03cd9f5ea18f4
1549125500822:# Save plot
1549125500825:out.filename <- paste0(out.prefix, ".", out.format)
1549125500828:if (out.format == "png") {
1549125500831:ggsave(filename = out.filename, plot = depth.plot,
1549125500834:width  = width, height = height, dpi = 300, limitsize = FALSE, type = "cairo-png")
1549125500837:} else {
1549125500840:ggsave(filename = out.filename, plot = depth.plot,
1549125500843:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549125500846:}
1549125500852:# Depth distribution plot ------------------------------------------------
1549125500855:hFactor  <- 3
1549125500858:wFactor  <- 2
1549125500861:if (nLoci == 1)
1549125500864:hFactor <- 3.5
1549125500867:height       <- nLoci * hFactor
1549125500870:width        <- nAlleles * wFactor
1549125500873:# Generate plot
1549125500877:(dist.plot <- plotDepthDist(data.to.plot, labelsData, fillPalette, borderPalette))
1549125500880:# Save plot
1549125500883:out.filename <- paste0(out.prefix, "_dist.", out.format)
1549125500886:if (out.format == "png") {
1549125500890:ggsave(filename = out.filename, plot = dist.plot,
1549125500893:width  = width, height = height, type = "cairo-png", dpi = 300)
1549125500896:} else {
1549125500898:ggsave(filename = out.filename, plot = dist.plot,
1549125500901:width  = width, height = height, dpi = 400)
1549125500903:}
1549125500905:cat("Done! \n")
1549125500911:# Code core - End ---------------------------------------------------------
1549125500913:}
1549126223028:#!/usr/bin/env Rscript
1549126223028:# ##############################################################################
1549126223029:#  Author:   Hector Fabio Espitia-Navarro
1549126223029:#            Georgia Institute of Technology
1549126223030:#  Version:  1.0
1549126223030:#  Date:     01/19/2019
1549126223031:# ##############################################################################
1549126223031:# Install required packages -----------------------------------------------
1549126223032:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549126223033:if(!file.exists(personal.lib.path))
1549126223033:dir.create(personal.lib.path)
1549126223034:printMessage <- function(message, verbose){
1549126223035:if(verbose)
1549126223035:cat(message)
1549126223035:}
1549126223036:# crayon::bold("Hola")
1549126223036:installAndLoadPackages <- function(pkg, verbose){
1549126223037:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1549126223037:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1549126223037:printMessage("Done!\n", verbose)
1549126223038:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549126223038:if (length(new.pkg)) {
1549126223038:printMessage("Installing new packages... ", verbose)
1549126223039:install.packages(new.pkg, dependencies = TRUE,
1549126223039:repos="http://cran.rstudio.com/",
1549126223040:lib = personal.lib.path)
1549126223041:printMessage("Done!\n", verbose)
1549126223041:}
1549126223042:printMessage("Loading required packages... ", verbose)
1549126223042:sapply(pkg, function(x){
1549126223043:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549126223044:})
1549126223044:printMessage("Done!\n", verbose)
1549126223045:}
1549126223045:# github.related.packages <- c("devtools", "Rcpp")
1549126223046:# packages <- c("argparser", "tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite")
1549126223046:packages <- c("tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite", "gridExtra")
1549126223046:# installAndLoadPackages(packages, verbose = TRUE)
1549126223047:installAndLoadPackages("argparser", verbose = FALSE)
1549126223086:# Command line arguments processing ---------------------------------------
1549126223086:# Get script name
1549126223087:initial.options <- commandArgs(trailingOnly = FALSE)
1549126223088:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1549126223089:# Process command line arguments
1549126223089:# Create a parser
1549126223090:p <- arg_parser("This script generates k-mer depth plots using a depth file generated by the\033[1mSTing typer\033[22m tool (-t option).",
1549126223090:name = script.name)
1549126223093:# Add Positional arguments (required)
1549126223103:p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
1549126223105:# Add options
1549126223105:p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1549126223107:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1549126223107:default = "kmer_depth")
1549126223109:p <- add_argument(p, "--sample_name", help = "Sample name.",
1549126223109:default = "input file's name")
1549126223111:p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'",
1549126223112:default = "pdf")
1549126223113:# Initialization of variables ---------------------------------------------
1549126223114:# Values to test the script using RStudio
1549126223114:script.home <- "/home/hspitia/projects/sting"
1549126223115:# inputFile   <- paste(script.home, "ERR036060.depth.2.tsv", sep = "/")
1549126223115:# geneFile    <- paste(script.home, "rmlst_failed_loci.txt", sep = "/")
1549126223116:inputFile   <- paste(script.home, "depth.tsv", sep = "/")
1549126223116:geneFile    <- paste(script.home, "loci.txt", sep = "/")
1549126223117:out.format  <- "pdf"
1549126223117:out.prefix  <- "kmer_ext_depth"
1549126223118:sample.name <- basename(inputFile)
1549126223118:# Parse command line arguments
1549126223118:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1549126223119:argv <- list()
1549126223119:if(command.line) {
1549126223120:argv <- parse_args(p)
1549126223120:} else {
1549126223120:argv <- parse_args(p, list(inputFile,
1549126223121:# "--gene_file", geneFile,
1549126223121:"--prefix", out.prefix,
1549126223121:"--sample_name", sample.name,
1549126223122:"--format", out.format))
1549126223122:}
1549126223123:# Get argument values from the command line
1549126223124:input.file  <- argv$input_file
1549126223124:gene.file   <- argv$gene_file
1549126223124:out.format  <- argv$format
1549126223125:out.prefix  <- argv$prefix
1549126223125:sample.name <- argv$sample_name
1549126223126:# if (sample.name == "")
1549126223126:if (sample.name == "input file's name")
1549126223126:sample.name <- basename(input.file)
1549126223127:# Function to check if file exists ----------------------------------------
1549126223127:CheckFileExists <- function(file.list) {
1549126223128:non.exist.files <- !file.exists(file.list)
1549126223128:if(any(non.exist.files)) {
1549126223128:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549126223129:}
1549126223129:}
1549126223129:# Check for input files ---------------------------------------------------
1549126223130:files.to.check <- c(input.file)
1549126223130:error.message  <- CheckFileExists(files.to.check)
1549126223131:if(!is.null(error.message)){
1549126223131:stop(error.message)
1549126223132:} else {
1549126223132:# Code core - Begin -------------------------------------------------------
1549126223132:installAndLoadPackages(packages, verbose = TRUE)
1549126223132:# FUNCTIONS:
1549126223133:# Function to dark a list of colors ---------------------------------------
1549126223133:darkColors <- function(palette, level){
1549126223133:rgbColors <- as.data.frame(t(as.data.frame(lapply(as.data.frame(t(col2rgb(palette))),
1549126223134:function(x) { round(x * level)}))))
1549126223134:unname(sapply(rgbColors, function(x){ rgb(x[1], x[2], x[3], maxColorValue=255) }))
1549126223134:}
1549126223135:# Function for plotting k-mer depth ----------------------------------------
1549126223135:plotDepth <- function(dataToPlot, labelsData, fillColors, borderColors) {
1549126223136:max.x       <- max(dataToPlot$Position)
1549126223137:max.y       <- max(dataToPlot$kmerDepth)
1549126223137:x.limits    <- seq(0, max.x, 100)
1549126223138:y.limits    <- seq(0, max.y, 20)
1549126223138:nTopAlleles <- length(unique(dataToPlot$N))
1549126223139:d.plot <- ggplot(data = dataToPlot, aes(x = Position, y = kmerDepth),
1549126223139:size = 0.2) +
1549126223140:geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1549126223140:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1549126223141:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1549126223141:# scale_color_manual(values = getPalette) +
1549126223142:scale_color_manual(values = borderColors) +
1549126223142:scale_fill_manual(values = fillColors) +
1549126223143:geom_text(data = labelsData,
1549126223143:# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1549126223144:# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1549126223144:aes(x = Length, y = info.y * 0.5, group = Locus,
1549126223151:hjust = 0,
1549126223152:label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1549126223153:show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1549126223154:nudge_x = -(max.x*0.025)
1549126223154:) +
1549126223155:geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1549126223156:alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1549126223157:# geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1549126223158:size = annotTextSize * 1.05, color = "#333333") +
1549126223158:geom_text(data = labelsData,
1549126223159:parse = TRUE,
1549126223160:aes(x = info.x, y = info.y,
1549126223161:label = paste0("{{{{italic(s)==", format(round(Score, 2), nsmall = 2),
1549126223162:"*~~~italic(hat(f)[k])} ==", format(round(NormKmerCount, 2), nsmall = 2),
1549126223163:"*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1549126223163:"*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1549126223169:"~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1549126223170:hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1549126223172:facet_grid(Locus ~ N, scales = "free_y") +
1549126223173:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1549126223174:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1549126223175:theme_bw() +
1549126223176:plotTheme +
1549126223178:labs(title    = expression(italic("k")*"-mer depth"),
1549126223179:subtitle = paste("Top", nTopAlleles, "alleles/genes on sample", sample.name),
1549126223180:x        = "Position along sequence (bp)",
1549126223181:y        = expression(paste(italic(k), "-mer depth")),
1549126223182:# caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1549126223185:caption  = expression(paste(italic("s"),": score;  ",
1549126223186:italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1549126223188:italic("c"),": coverage;  ",
1549126223190:italic(sigma), ": standard deviation;  ",
1549126223192:italic(bar(d)), ": average depth"), sep = "")
1549126223193:)
1549126223194:# guides(fill  = guide_legend(title  ="Allele"), color = FALSE) +
1549126223196:d.plot
1549126223197:}
1549126223198:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549126223199:# Function for plotting k-mer depth distributions as box plots ------------
1549126223200:plotDepthDist <- function(data.to.plot, labelsData, fillColors, borderColors){
1549126223202:dist.plot <- ggplot(data.to.plot, aes(x = AlPos, y = kmerDepth)) +
1549126223203:geom_jitter(position = position_jitter(width=.3), aes(color = Locus),
1549126223204:alpha = 0.4, size = 1.2, shape = 16) +
1549126223205:geom_boxplot(alpha = 0.7, size = 0.5, aes(fill = Locus, color = Locus)) +
1549126223206:geom_text(data = labelsData, size = 4, hjust = "center",
1549126223207:aes(x = N,#(N - 0.5),
1549126223209:y = info.y * 1.05,
1549126223210:label = Allele),
1549126223211:color = "#333333") +
1549126223212:geom_text(data = labelsData, size = 3, hjust = "center",
1549126223213:parse = TRUE,
1549126223214:aes(x = N,#(N - 0.4),
1549126223216:# y = info.y * 0.08,
1549126223217:y = info.y * 0.96,
1549126223218:label = paste0("sigma ==",format(round(sd, 1), nsmall = 1))),
1549126223220:color = "#333333") +
1549126223221:geom_point(data = labelsData,
1549126223222:shape = 23, fill = "white",
1549126223224:aes(x = N, y = meanDepth)) +
1549126223225:facet_grid(Locus ~ ., scales = "free_y") +
1549126223226:scale_color_manual(values = borderColors) +
1549126223228:scale_fill_manual(values = fillColors) +
1549126223229:labs(title = expression(paste(italic("k"), "-mer depth distribution")),
1549126223230:subtitle = basename(input.file),
1549126223231:x        = "Allele Ranking",
1549126223233:y        = expression(paste(italic(k), "-mer depth")),
1549126223234:caption  = expression(paste(italic(sigma), ": standard deviation")))+#,"sd: standard deviation") +
1549126223236:theme_bw() +
1549126223237:plotTheme +
1549126223238:theme(axis.text.x   = element_text(angle = 0, size = axisTextSize,
1549126223240:vjust = 1, hjust = 0.5, color = textColor))
1549126223241:dist.plot
1549126223243:}
1549126223244:# Function to get data for annotations ------------------------------------
1549126223246:getLabelsData <- function(data.to.plot) {
1549126223248:max.x <- max(data.to.plot$Position)
1549126223249:max.y <- max(data.to.plot$kmerDepth)
1549126223252:nLoci    <- length(unique(data.to.plot$Locus))
1549126223254:nAlleles <- length(unique(data.to.plot$N))
1549126223257:alleles     <- unique(data.to.plot$Allele)
1549126223258:loci        <- as.character(unique(data.to.plot$Locus))
1549126223260:lociLabels  <- c()
1549126223262:name.x      <- c()
1549126223263:name.y      <- c()
1549126223265:info.x      <- c()
1549126223267:info.y      <- c()
1549126223268:covs        <- c()
1549126223270:avgDepths   <- c()
1549126223272:meanDepth.x <- c()
1549126223274:meanDepth.y <- c()
1549126223275:for (i in loci) {
1549126223277:lociLabels <- c(lociLabels, rep(i, nAlleles))
1549126223279:}
1549126223281:for (allele in alleles) {
1549126223282:locus       <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1549126223284:maxPos      <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549126223286:maxDepth    <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549126223288:# name.x      <- c(name.x, (maxPos / 2))
1549126223290:name.x      <- c(name.x, (max.x / 2))
1549126223291:name.y      <- c(name.y, (maxDepth * 0.25))
1549126223293:info.x      <- c(info.x, max.x * 0.02)
1549126223295:info.y      <- c(info.y, maxDepth * 1.5)
1549126223297:covs        <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549126223299:avgDepths   <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549126223301:}
1549126223303:labelsData <- data.frame(Allele = alleles,
1549126223304:name.x = name.x,
1549126223306:name.y = name.y,
1549126223308:info.x = info.x,
1549126223310:info.y = info.y,
1549126223312:meanDepth = avgDepths,
1549126223314:N = rep(unique(data.to.plot$N), nLoci),
1549126223316:Locus = lociLabels,
1549126223318:cov = covs
1549126223320:) %>%
1549126223322:left_join(data.to.plot %>%
1549126223324:group_by(Allele, Length, NormKmerCount, Score) %>%
1549126223326:summarise(sd = sd(kmerDepth)),
1549126223327:by = c("Allele" = "Allele")) #%>%
1549126223329:# mutate(
1549126223331:#   info   = paste0("cov=", format(round(covs, 1), nsmall = 1), "%   ",
1549126223333:#                   paste0("ad=", format(round(avgDepths, 1), nsmall = 1)),
1549126223335:#                   "   ",
1549126223337:#                   # expression(paste(italic(sigma), "=",format(round(sd, 1), nsmall = 1))))
1549126223339:#                   paste0("sd=", format(round(sd, 1), nsmall = 1))
1549126223340:#   )
1549126223342:# )
1549126223343:labelsData
1549126223345:}
1549126223347:# Check for genes/loci file to filter loci to plot  -----------------------
1549126223348:loci.to.plot <- c()
1549126223350:# if (!is.null(gene.file)|| gene.file != "") {
1549126223351:if (!is.null(gene.file) && !is.na(gene.file) && gene.file != "") {
1549126223352:error.message <- CheckFileExists(gene.file)
1549126223354:if (!is.null(error.message)){
1549126223355:cat("Warning:")
1549126223356:cat(error.message)
1549126223358:cat("  The plotting process will continue without filtering genes/loci.\n")
1549126223359:} else {
1549126223360:loci.to.plot <- scan(gene.file, character(), quiet = TRUE)
1549126223362:}
1549126223363:}
1549126223366:# Data processing and plotting --------------------------------------------
1549126223367:cat("Plotting depths... ")
1549126223369:options(stringsAsFactors = T, readr.num_columns = 0)
1549126223371:# Load data
1549126223373:inData <- read_tsv(input.file)
1549126223374:# inData <- read.delim(input.file)
1549126223377:# colnames(inData) <- c("Allele", "Position", "k-mer Depth", "Weighted k-mer Depth")
1549126223379:colnames(inData) <- c("N", "Locus", "Allele", "Position", "kmerDepth",
1549126223380:"NormKmerCount", "Coverage", "Score", "AverageKmerDepth")
1549126223383:# Transform data
1549126223384:data.to.plot <- inData %>%
1549126223386:left_join(inData %>%
1549126223387:group_by(Allele) %>%
1549126223389:summarise(Length = n()), by = "Allele") %>%
1549126223390:arrange(Locus, N) %>%
1549126223392:mutate(
1549126223393:AlPos = factor(N, levels = unique(.$N)),
1549126223395:Allele = factor(Allele, levels = unique(inData$Allele)))
1549126223396:# Filtering loci/genes from genes_file input param
1549126223398:if (length(loci.to.plot) > 0) {
1549126223399:data.to.plot <- data.to.plot %>%
1549126223401:filter(Locus %in% loci.to.plot)
1549126223402:}
1549126223405:longestLocusNameLength <- max(str_length(as.character(unique(inData$Locus))))
1549126223407:# labelsData <- getLabelsData(data.to.plot)
1549126223409:nLoci      <- length(unique(data.to.plot$Locus))
1549126223410:nAlleles   <- length(unique(data.to.plot$N))
1549126223413:# Theme-related variable definition ---------------------------------------
1549126223415:annotLinetype         <- "solid"
1549126223416:annotTextSize         <- 4
1549126223418:axisColor             <- "#000000"
1549126223419:axisTextSize          <- 12
1549126223421:barAnnotTextSize      <- 4
1549126223422:baseTextSize          <- 14
1549126223424:gridColor             <- "#e0e0e0"
1549126223425:lineSize              <- 0.3
1549126223427:panelColor            <- "#fff4e0"
1549126223428:panelColor            <- "#f2efe6"
1549126223430:# panelColor            <- "#ffffff"
1549126223431:# stripBackground       <- "#cccccc"
1549126223432:stripTextSize         <- axisTextSize
1549126223434:if (longestLocusNameLength > 12)
1549126223435:stripTextSize       <- stripTextSize * 0.6
1549126223437:textColor             <- "#000000"
1549126223439:# baseFontFamily        <- "Arial"
1549126223442:# Custom theme definition for plots ---------------------------------------
1549126223443:plotTheme <- list(
1549126223445:theme(
1549126223447:axis.text.x      = element_text(angle = 50, size = axisTextSize,
1549126223448:vjust = 1, hjust = 1, color = textColor),
1549126223450:axis.text.y      = element_text(size = axisTextSize, color = textColor),
1549126223451:axis.ticks       = element_line(size = lineSize),
1549126223453:axis.title.x     = element_text(margin = margin(6,0,8,0, "mm")),
1549126223455:axis.title.y     = element_text(margin = margin(0,6,0,0, "mm")),
1549126223456:legend.position  = "none",
1549126223458:panel.border     = element_rect(size = lineSize),
1549126223460:panel.background = element_rect(fill = panelColor),
1549126223461:panel.grid       = element_line(size = lineSize, colour = gridColor),
1549126223463:panel.grid.minor = element_blank(),
1549126223465:plot.margin      = margin(10,10,0,10, "mm"),
1549126223467:panel.spacing    = unit(4, "mm"),
1549126223470:plot.caption     = element_text(size = baseTextSize * 0.7, face = "italic"),
1549126223473:plot.title       = element_text(hjust = 0.5),
1549126223477:plot.subtitle    = element_text(hjust = 0.5),
1549126223480:strip.background = element_rect(size = lineSize),
1549126223483:strip.text       = element_text(size = stripTextSize),
1549126223485:text             = element_text(size = baseTextSize)
1549126223488:)
1549126223490:)
1549126223495:# Palette definition ------------------------------------------------------
1549126223497:# colourCount <- length(unique(inData$Locus))
1549126223517:colourCount <- nLoci
1549126223520:# colourCount  <- length(unique(data.to.plot$Allele))
1549126223522:# fillPalette  <- colorRampPalette(brewer.pal(8, "Dark2"))(colourCount)
1549126223525:# fillPalette  <- colorRampPalette(brewer.pal(12, "Paired"))(colourCount)
1549126223527:# fillPalette  <- colorRampPalette(brewer.pal(9, "Set1"))(colourCount)
1549126223538:# fillPalette  <- colorRampPalette(pal_npg("nrc")(10))(colourCount)
1549126223540:# fillPalette  <- colorRampPalette(pal_d3("category20")(20))(colourCount)
1549126223542:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549126223544:borderPalette <- darkColors(fillPalette, 0.6)
1549126223546:# library("scales"); show_col(fillPalette); show_col(borderPalette)
1549126223554:# # Depth plot -------------------------------------------------------------
1549126223556:# hFactor  <- 1.2
1549126223559:# wFactor  <- 4.8
1549126223562:# # if (nLoci == 1)
1549126223564:# #   hFactor <- 1.4;
1549126223569:# height <- (nLoci * hFactor) + 2 + 0.1 + ((nLoci-1)*0.05)
1549126223572:# width  <- nAlleles * wFactor
1549126223574:# # Generate plot
1549126223577:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549126223580:# # Save plot
1549126223582:# out.filename <- paste0(out.prefix, ".", out.format)
1549126223585:# if (out.format == "png") {
1549126223586:# 	ggsave(filename = out.filename, plot = depth.plot,
1549126223588:# 				 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549126223590:# } else {
1549126223592:# 	ggsave(filename = out.filename, plot = depth.plot,
1549126223593:# 				 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549126223595:# }
1549126223599:# Depth plot -------------------------------------------------------------
1549126223600:# <<<<<<< HEAD
1549126223602:#   rowsPerPage <- 7
1549126223604:#   hFactor     <- 1.2
1549126223605:#   wFactor     <- 4.8
1549126223607:#   rows        <- nLoci
1549126223610:#   if (nLoci > rowsPerPage)
1549126223611:#     rows <- rowsPerPage;
1549126223614:#   height <- (rows * hFactor) + 2 + 0.1 + ((rows-1)*0.05)
1549126223616:#   width  <- nAlleles * wFactor
1549126223618:#
1549126223619:#   loci     <- unique(data.to.plot$Locus)
1549126223621:#   lociList <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549126223622:#   lociList <- split(loci, ceiling(seq_along(loci)/3))
1549126223624:#   plotList <- list()
1549126223626:#   for (lociSet in lociList) {
1549126223628:#   	print(lociSet)
1549126223629:#   	subset.to.plot <- data.to.plot %>%
1549126223632:#   		filter(Locus %in% lociSet)
1549126223634:#   	labelsData <- getLabelsData(subset.to.plot)
1549126223636:#   	currentPlot <- plotDepth(subset.to.plot, labelsData, fillPalette, borderPalette)
1549126223638:#   	plotList <- c(plotList, list(currentPlot))
1549126223640:#   	# print(currentPlot)
1549126223642:#   	# print(unique(subset.to.plot$Locus))
1549126223643:#   }
1549126223645:#  	length(plotList)
1549126223647:#
1549126223648:#  	if (out.format == "pdf") {
1549126223650:#  		out.filename <- paste(out.prefix, out.format, sep = ".")
1549126223652:#  		pdf(out.filename)
1549126223653:#  		for (i in seq_along(plotList)) {
1549126223655:#  			nLociToPlot <- length(lociList[[i]])
1549126223657:#  			height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1549126223658:#  			width  <- nAlleles * wFactor
1549126223660:#  			# out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549126223663:#  			# print(out.filename)
1549126223666:#  			print(plotList[[i]])
1549126223669:#  		}
1549126223678:#  		dev.off()
1549126223680:#
1549126223683:#  	}
1549126223686:#  	for (i in seq_along(plotList)) {
1549126223688:#  		nLociToPlot <- length(lociList[[i]])
1549126223691:#  		height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1549126223694:#  		width  <- nAlleles * wFactor
1549126223696:#  		out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549126223699:#  		print(out.filename)
1549126223702:#  		pdf(out.filename, width = width, height = height)
1549126223705:#  		print(plotList[[i]])
1549126223707:#  		dev.off()
1549126223710:#  	}
1549126223713:#  	else if (out.format == "png") {
1549126223715:#  		ggsave(filename = out.filename, plot = depth.plot,
1549126223719:#  					 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549126223722:#  	} else {
1549126223724:#  		ggsave(filename = out.filename, plot = depth.plot,
1549126223727:#  					 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549126223730:#  	}
1549126223733:#
1549126223735:#  	plot_grid()
1549126223738:#  	# Generate plot
1549126223741:#   # (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549126223746:# =======
1549126223748:hFactor  <- 1.6
1549126223751:wFactor  <- 4.8
1549126223756:getPlotHeight <- function(rows){
1549126223758:# loci + titles and foot note + strip + space between locus
1549126223761:(rows*hFactor) + 2.39 + ((rows-1)*0.157) #in
1549126223763:}
1549126223768:rowsPerPage <- 7
1549126223771:width  <- nAlleles * wFactor
1549126223773:height <- getPlotHeight(rowsPerPage)
1549126223776:loci   <- unique(data.to.plot$Locus)
1549126223779:sets   <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549126223784:plots <- lapply(sets, function(set, dp=data.to.plot, rp=rowsPerPage){
1549126223786:subsetToPlot <- dp %>% filter(Locus %in% set)
1549126223789:ld    <- getLabelsData(subsetToPlot)
1549126223792:(p    <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette))
1549126223794:nLoci <- length(set)
1549126223797:if(nLoci < rp & out.format == "pdf"){
1549126223800:hlay    <- matrix(c(1, NA))
1549126223803:total   <- getPlotHeight(rp)
1549126223805:cHeight <- getPlotHeight(nLoci)
1549126223807:blank   <- getPlotHeight(rp-nLoci) - 2.39
1549126223809:heights <- matrix(c(cHeight/total, blank/total))
1549126223811:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549126223813:}
1549126223816:p
1549126223818:})
1549126223822:if (out.format == "pdf") {
1549126223824:out.filename <- paste(out.prefix, out.format, sep = ".")
1549126223826:ml <- marrangeGrob(plots, nrow=1, ncol=1, padding = unit(10, "mm"),
1549126223828:top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549126223830:ggsave(filename = "multipage.pdf", plot = ml,
1549126223832:width  = width, height = getPlotHeight(rowsPerPage), dpi = 400, limitsize = FALSE)
1549126223834:}
1549126223836:else {
1549126223838:for (i in seq_along(plots)) {
1549126223840:out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549126223842:ggsave(filename = out.filename, plot = plots[[i]],
1549126223844:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549126223846:}
1549126223849:}
1549126223851:# # Generate plot
1549126223853:# labelsData <- getLabelsData(data.to.plot)
1549126223855:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549126223857:# # Save plot
1549126223859:# out.filename <- paste0(out.prefix, ".", out.format)
1549126223861:# if (out.format == "png") {
1549126223863:#   ggsave(filename = out.filename, plot = depth.plot,
1549126223865:#          width  = width, height = height, dpi = 300, limitsize = FALSE, type = "cairo-png")
1549126223866:# } else {
1549126223868:#   ggsave(filename = out.filename, plot = depth.plot,
1549126223870:#          width  = width, height = height, dpi = 400, limitsize = FALSE)
1549126223872:# }
1549126223876:# # Depth distribution plot ------------------------------------------------
1549126223878:# hFactor  <- 3
1549126223880:# wFactor  <- 2
1549126223882:# if (nLoci == 1)
1549126223884:#   hFactor <- 3.5
1549126223886:# height       <- nLoci * hFactor
1549126223888:# width        <- nAlleles * wFactor
1549126223891:# # Generate plot
1549126223894:# (dist.plot <- plotDepthDist(data.to.plot, labelsData, fillPalette, borderPalette))
1549126223897:# # Save plot
1549126223900:# out.filename <- paste0(out.prefix, "_dist.", out.format)
1549126223903:# if (out.format == "png") {
1549126223917:#   ggsave(filename = out.filename, plot = dist.plot,
1549126223920:#          width  = width, height = height, type = "cairo-png", dpi = 300)
1549126223923:# } else {
1549126223927:#   ggsave(filename = out.filename, plot = dist.plot,
1549126223930:#          width  = width, height = height, dpi = 400)
1549126223933:# }
1549126223939:cat("Done! \n")
1549126223946:# Code core - End ---------------------------------------------------------
1549126223949:}
1549126272478:#!/usr/bin/env Rscript
1549126272479:# ##############################################################################
1549126272479:#  Author:   Hector Fabio Espitia-Navarro
1549126272479:#            Georgia Institute of Technology
1549126272480:#  Version:  1.0
1549126272480:#  Date:     01/19/2019
1549126272480:# ##############################################################################
1549126272481:# Install required packages -----------------------------------------------
1549126272481:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549126272482:if(!file.exists(personal.lib.path))
1549126272482:dir.create(personal.lib.path)
1549126272483:printMessage <- function(message, verbose){
1549126272483:if(verbose)
1549126272483:cat(message)
1549126272484:}
1549126272484:# crayon::bold("Hola")
1549126272485:installAndLoadPackages <- function(pkg, verbose){
1549126272485:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1549126272485:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1549126272485:printMessage("Done!\n", verbose)
1549126272486:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549126272486:if (length(new.pkg)) {
1549126272486:printMessage("Installing new packages... ", verbose)
1549126272487:install.packages(new.pkg, dependencies = TRUE,
1549126272487:repos="http://cran.rstudio.com/",
1549126272487:lib = personal.lib.path)
1549126272488:printMessage("Done!\n", verbose)
1549126272488:}
1549126272489:printMessage("Loading required packages... ", verbose)
1549126272489:sapply(pkg, function(x){
1549126272489:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549126272490:})
1549126272490:printMessage("Done!\n", verbose)
1549126272490:}
1549126272491:# github.related.packages <- c("devtools", "Rcpp")
1549126272491:# packages <- c("argparser", "tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite")
1549126272492:packages <- c("tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite", "gridExtra")
1549126272492:# installAndLoadPackages(packages, verbose = TRUE)
1549126272492:installAndLoadPackages("argparser", verbose = FALSE)
1549126272523:# Command line arguments processing ---------------------------------------
1549126272523:# Get script name
1549126272523:initial.options <- commandArgs(trailingOnly = FALSE)
1549126272524:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1549126272525:# Process command line arguments
1549126272526:# Create a parser
1549126272526:p <- arg_parser("This script generates k-mer depth plots using a depth file generated by the\033[1mSTing typer\033[22m tool (-t option).",
1549126272527:name = script.name)
1549126272529:# Add Positional arguments (required)
1549126272530:p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
1549126272531:# Add options
1549126272532:p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1549126272534:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1549126272534:default = "kmer_depth")
1549126272536:p <- add_argument(p, "--sample_name", help = "Sample name.",
1549126272536:default = "input file's name")
1549126272538:p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'",
1549126272538:default = "pdf")
1549126272540:# Initialization of variables ---------------------------------------------
1549126272541:# Values to test the script using RStudio
1549126272541:script.home <- "/home/hspitia/projects/sting"
1549126272542:# inputFile   <- paste(script.home, "ERR036060.depth.2.tsv", sep = "/")
1549126272542:# geneFile    <- paste(script.home, "rmlst_failed_loci.txt", sep = "/")
1549126272543:inputFile   <- paste(script.home, "depth.tsv", sep = "/")
1549126272544:geneFile    <- paste(script.home, "loci.txt", sep = "/")
1549126272545:out.format  <- "pdf"
1549126272545:out.prefix  <- "kmer_ext_depth"
1549126272546:sample.name <- basename(inputFile)
1549126272547:# Parse command line arguments
1549126272547:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1549126272548:argv <- list()
1549126272549:if(command.line) {
1549126272549:argv <- parse_args(p)
1549126272550:} else {
1549126272550:argv <- parse_args(p, list(inputFile,
1549126272551:# "--gene_file", geneFile,
1549126272551:"--prefix", out.prefix,
1549126272552:"--sample_name", sample.name,
1549126272552:"--format", out.format))
1549126272553:}
1549126272555:# Get argument values from the command line
1549126272556:input.file  <- argv$input_file
1549126272568:gene.file   <- argv$gene_file
1549126272569:out.format  <- argv$format
1549126272570:out.prefix  <- argv$prefix
1549126272571:sample.name <- argv$sample_name
1549126272572:# if (sample.name == "")
1549126272572:if (sample.name == "input file's name")
1549126272573:sample.name <- basename(input.file)
1549126272574:# Function to check if file exists ----------------------------------------
1549126272574:CheckFileExists <- function(file.list) {
1549126272575:non.exist.files <- !file.exists(file.list)
1549126272575:if(any(non.exist.files)) {
1549126272576:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549126272576:}
1549126272577:}
1549126272578:# Check for input files ---------------------------------------------------
1549126272578:files.to.check <- c(input.file)
1549126272579:error.message  <- CheckFileExists(files.to.check)
1549126272589:if(!is.null(error.message)){
1549126272590:stop(error.message)
1549126272590:} else {
1549126272591:# Code core - Begin -------------------------------------------------------
1549126272591:installAndLoadPackages(packages, verbose = TRUE)
1549126272592:# FUNCTIONS:
1549126272593:# Function to dark a list of colors ---------------------------------------
1549126272604:darkColors <- function(palette, level){
1549126272605:rgbColors <- as.data.frame(t(as.data.frame(lapply(as.data.frame(t(col2rgb(palette))),
1549126272606:function(x) { round(x * level)}))))
1549126272606:unname(sapply(rgbColors, function(x){ rgb(x[1], x[2], x[3], maxColorValue=255) }))
1549126272607:}
1549126272607:# Function for plotting k-mer depth ----------------------------------------
1549126272615:plotDepth <- function(dataToPlot, labelsData, fillColors, borderColors) {
1549126272615:max.x       <- max(dataToPlot$Position)
1549126272616:max.y       <- max(dataToPlot$kmerDepth)
1549126272617:x.limits    <- seq(0, max.x, 100)
1549126272617:y.limits    <- seq(0, max.y, 20)
1549126272618:nTopAlleles <- length(unique(dataToPlot$N))
1549126272619:d.plot <- ggplot(data = dataToPlot, aes(x = Position, y = kmerDepth),
1549126272620:size = 0.2) +
1549126272621:geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1549126272622:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1549126272623:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1549126272623:# scale_color_manual(values = getPalette) +
1549126272624:scale_color_manual(values = borderColors) +
1549126272625:scale_fill_manual(values = fillColors) +
1549126272626:geom_text(data = labelsData,
1549126272626:# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1549126272627:# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1549126272628:aes(x = Length, y = info.y * 0.5, group = Locus,
1549126272629:hjust = 0,
1549126272629:label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1549126272630:show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1549126272631:nudge_x = -(max.x*0.025)
1549126272633:) +
1549126272634:geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1549126272635:alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1549126272635:# geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1549126272636:size = annotTextSize * 1.05, color = "#333333") +
1549126272637:geom_text(data = labelsData,
1549126272641:parse = TRUE,
1549126272643:aes(x = info.x, y = info.y,
1549126272646:label = paste0("{{{{italic(s)==", format(round(Score, 2), nsmall = 2),
1549126272647:"*~~~italic(hat(f)[k])} ==", format(round(NormKmerCount, 2), nsmall = 2),
1549126272648:"*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1549126272649:"*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1549126272650:"~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1549126272651:hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1549126272652:facet_grid(Locus ~ N, scales = "free_y") +
1549126272654:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1549126272655:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1549126272656:theme_bw() +
1549126272657:plotTheme +
1549126272658:labs(title    = expression(italic("k")*"-mer depth"),
1549126272659:subtitle = paste("Top", nTopAlleles, "alleles/genes on sample", sample.name),
1549126272660:x        = "Position along sequence (bp)",
1549126272661:y        = expression(paste(italic(k), "-mer depth")),
1549126272662:# caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1549126272665:caption  = expression(paste(italic("s"),": score;  ",
1549126272668:italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1549126272670:italic("c"),": coverage;  ",
1549126272672:italic(sigma), ": standard deviation;  ",
1549126272674:italic(bar(d)), ": average depth"), sep = "")
1549126272675:)
1549126272676:# guides(fill  = guide_legend(title  ="Allele"), color = FALSE) +
1549126272677:d.plot
1549126272678:}
1549126272679:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549126272680:# Function for plotting k-mer depth distributions as box plots ------------
1549126272682:plotDepthDist <- function(data.to.plot, labelsData, fillColors, borderColors){
1549126272683:dist.plot <- ggplot(data.to.plot, aes(x = AlPos, y = kmerDepth)) +
1549126272684:geom_jitter(position = position_jitter(width=.3), aes(color = Locus),
1549126272685:alpha = 0.4, size = 1.2, shape = 16) +
1549126272687:geom_boxplot(alpha = 0.7, size = 0.5, aes(fill = Locus, color = Locus)) +
1549126272688:geom_text(data = labelsData, size = 4, hjust = "center",
1549126272689:aes(x = N,#(N - 0.5),
1549126272690:y = info.y * 1.05,
1549126272692:label = Allele),
1549126272693:color = "#333333") +
1549126272694:geom_text(data = labelsData, size = 3, hjust = "center",
1549126272695:parse = TRUE,
1549126272696:aes(x = N,#(N - 0.4),
1549126272698:# y = info.y * 0.08,
1549126272699:y = info.y * 0.96,
1549126272700:label = paste0("sigma ==",format(round(sd, 1), nsmall = 1))),
1549126272701:color = "#333333") +
1549126272703:geom_point(data = labelsData,
1549126272704:shape = 23, fill = "white",
1549126272705:aes(x = N, y = meanDepth)) +
1549126272707:facet_grid(Locus ~ ., scales = "free_y") +
1549126272708:scale_color_manual(values = borderColors) +
1549126272709:scale_fill_manual(values = fillColors) +
1549126272710:labs(title = expression(paste(italic("k"), "-mer depth distribution")),
1549126272712:subtitle = basename(input.file),
1549126272713:x        = "Allele Ranking",
1549126272714:y        = expression(paste(italic(k), "-mer depth")),
1549126272716:caption  = expression(paste(italic(sigma), ": standard deviation")))+#,"sd: standard deviation") +
1549126272717:theme_bw() +
1549126272719:plotTheme +
1549126272720:theme(axis.text.x   = element_text(angle = 0, size = axisTextSize,
1549126272721:vjust = 1, hjust = 0.5, color = textColor))
1549126272723:dist.plot
1549126272724:}
1549126272725:# Function to get data for annotations ------------------------------------
1549126272727:getLabelsData <- function(data.to.plot) {
1549126272728:max.x <- max(data.to.plot$Position)
1549126272730:max.y <- max(data.to.plot$kmerDepth)
1549126272732:nLoci    <- length(unique(data.to.plot$Locus))
1549126272734:nAlleles <- length(unique(data.to.plot$N))
1549126272737:alleles     <- unique(data.to.plot$Allele)
1549126272738:loci        <- as.character(unique(data.to.plot$Locus))
1549126272740:lociLabels  <- c()
1549126272741:name.x      <- c()
1549126272743:name.y      <- c()
1549126272744:info.x      <- c()
1549126272745:info.y      <- c()
1549126272746:covs        <- c()
1549126272747:avgDepths   <- c()
1549126272748:meanDepth.x <- c()
1549126272749:meanDepth.y <- c()
1549126272750:for (i in loci) {
1549126272751:lociLabels <- c(lociLabels, rep(i, nAlleles))
1549126272753:}
1549126272754:for (allele in alleles) {
1549126272755:locus       <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1549126272756:maxPos      <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549126272757:maxDepth    <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549126272758:# name.x      <- c(name.x, (maxPos / 2))
1549126272759:name.x      <- c(name.x, (max.x / 2))
1549126272761:name.y      <- c(name.y, (maxDepth * 0.25))
1549126272763:info.x      <- c(info.x, max.x * 0.02)
1549126272765:info.y      <- c(info.y, maxDepth * 1.5)
1549126272766:covs        <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549126272767:avgDepths   <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549126272769:}
1549126272770:labelsData <- data.frame(Allele = alleles,
1549126272772:name.x = name.x,
1549126272773:name.y = name.y,
1549126272775:info.x = info.x,
1549126272776:info.y = info.y,
1549126272777:meanDepth = avgDepths,
1549126272778:N = rep(unique(data.to.plot$N), nLoci),
1549126272779:Locus = lociLabels,
1549126272781:cov = covs
1549126272782:) %>%
1549126272783:left_join(data.to.plot %>%
1549126272784:group_by(Allele, Length, NormKmerCount, Score) %>%
1549126272786:summarise(sd = sd(kmerDepth)),
1549126272787:by = c("Allele" = "Allele")) #%>%
1549126272788:# mutate(
1549126272789:#   info   = paste0("cov=", format(round(covs, 1), nsmall = 1), "%   ",
1549126272791:#                   paste0("ad=", format(round(avgDepths, 1), nsmall = 1)),
1549126272792:#                   "   ",
1549126272793:#                   # expression(paste(italic(sigma), "=",format(round(sd, 1), nsmall = 1))))
1549126272794:#                   paste0("sd=", format(round(sd, 1), nsmall = 1))
1549126272796:#   )
1549126272797:# )
1549126272798:labelsData
1549126272799:}
1549126272802:# Check for genes/loci file to filter loci to plot  -----------------------
1549126272803:loci.to.plot <- c()
1549126272804:# if (!is.null(gene.file)|| gene.file != "") {
1549126272806:if (!is.null(gene.file) && !is.na(gene.file) && gene.file != "") {
1549126272807:error.message <- CheckFileExists(gene.file)
1549126272809:if (!is.null(error.message)){
1549126272810:cat("Warning:")
1549126272812:cat(error.message)
1549126272813:cat("  The plotting process will continue without filtering genes/loci.\n")
1549126272814:} else {
1549126272816:loci.to.plot <- scan(gene.file, character(), quiet = TRUE)
1549126272817:}
1549126272818:}
1549126272820:# Data processing and plotting --------------------------------------------
1549126272822:cat("Plotting depths... ")
1549126272823:options(stringsAsFactors = T, readr.num_columns = 0)
1549126272826:# Load data
1549126272827:inData <- read_tsv(input.file)
1549126272829:# inData <- read.delim(input.file)
1549126272833:# colnames(inData) <- c("Allele", "Position", "k-mer Depth", "Weighted k-mer Depth")
1549126272835:colnames(inData) <- c("N", "Locus", "Allele", "Position", "kmerDepth",
1549126272837:"NormKmerCount", "Coverage", "Score", "AverageKmerDepth")
1549126272841:# Transform data
1549126272843:data.to.plot <- inData %>%
1549126272845:left_join(inData %>%
1549126272847:group_by(Allele) %>%
1549126272849:summarise(Length = n()), by = "Allele") %>%
1549126272851:arrange(Locus, N) %>%
1549126272852:mutate(
1549126272854:AlPos = factor(N, levels = unique(.$N)),
1549126272856:Allele = factor(Allele, levels = unique(inData$Allele)))
1549126272858:# Filtering loci/genes from genes_file input param
1549126272860:if (length(loci.to.plot) > 0) {
1549126272862:data.to.plot <- data.to.plot %>%
1549126272864:filter(Locus %in% loci.to.plot)
1549126272865:}
1549126272867:longestLocusNameLength <- max(str_length(as.character(unique(inData$Locus))))
1549126272869:# labelsData <- getLabelsData(data.to.plot)
1549126272870:nLoci      <- length(unique(data.to.plot$Locus))
1549126272871:nAlleles   <- length(unique(data.to.plot$N))
1549126272876:# Theme-related variable definition ---------------------------------------
1549126272878:annotLinetype         <- "solid"
1549126272880:annotTextSize         <- 4
1549126272883:axisColor             <- "#000000"
1549126272885:axisTextSize          <- 12
1549126272888:barAnnotTextSize      <- 4
1549126272890:baseTextSize          <- 14
1549126272891:gridColor             <- "#e0e0e0"
1549126272893:lineSize              <- 0.3
1549126272894:panelColor            <- "#fff4e0"
1549126272896:panelColor            <- "#f2efe6"
1549126272898:# panelColor            <- "#ffffff"
1549126272899:# stripBackground       <- "#cccccc"
1549126272901:stripTextSize         <- axisTextSize
1549126272902:if (longestLocusNameLength > 12)
1549126272904:stripTextSize       <- stripTextSize * 0.6
1549126272906:textColor             <- "#000000"
1549126272907:# baseFontFamily        <- "Arial"
1549126272911:# Custom theme definition for plots ---------------------------------------
1549126272912:plotTheme <- list(
1549126272914:theme(
1549126272916:axis.text.x      = element_text(angle = 50, size = axisTextSize,
1549126272918:vjust = 1, hjust = 1, color = textColor),
1549126272920:axis.text.y      = element_text(size = axisTextSize, color = textColor),
1549126272923:axis.ticks       = element_line(size = lineSize),
1549126272925:axis.title.x     = element_text(margin = margin(6,0,8,0, "mm")),
1549126272928:axis.title.y     = element_text(margin = margin(0,6,0,0, "mm")),
1549126272930:legend.position  = "none",
1549126272932:panel.border     = element_rect(size = lineSize),
1549126272935:panel.background = element_rect(fill = panelColor),
1549126272937:panel.grid       = element_line(size = lineSize, colour = gridColor),
1549126272940:panel.grid.minor = element_blank(),
1549126272942:plot.margin      = margin(10,10,0,10, "mm"),
1549126272945:panel.spacing    = unit(4, "mm"),
1549126272948:plot.caption     = element_text(size = baseTextSize * 0.7, face = "italic"),
1549126272950:plot.title       = element_text(hjust = 0.5),
1549126272953:plot.subtitle    = element_text(hjust = 0.5),
1549126272956:strip.background = element_rect(size = lineSize),
1549126272959:strip.text       = element_text(size = stripTextSize),
1549126272961:text             = element_text(size = baseTextSize)
1549126272963:)
1549126272966:)
1549126272971:# Palette definition ------------------------------------------------------
1549126272973:# colourCount <- length(unique(inData$Locus))
1549126272976:colourCount <- nLoci
1549126272978:# colourCount  <- length(unique(data.to.plot$Allele))
1549126272980:# fillPalette  <- colorRampPalette(brewer.pal(8, "Dark2"))(colourCount)
1549126272982:# fillPalette  <- colorRampPalette(brewer.pal(12, "Paired"))(colourCount)
1549126272984:# fillPalette  <- colorRampPalette(brewer.pal(9, "Set1"))(colourCount)
1549126272986:# fillPalette  <- colorRampPalette(pal_npg("nrc")(10))(colourCount)
1549126272988:# fillPalette  <- colorRampPalette(pal_d3("category20")(20))(colourCount)
1549126272989:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549126272991:borderPalette <- darkColors(fillPalette, 0.6)
1549126272993:# library("scales"); show_col(fillPalette); show_col(borderPalette)
1549126273001:# # Depth plot -------------------------------------------------------------
1549126273003:# hFactor  <- 1.2
1549126273005:# wFactor  <- 4.8
1549126273007:# # if (nLoci == 1)
1549126273010:# #   hFactor <- 1.4;
1549126273016:# height <- (nLoci * hFactor) + 2 + 0.1 + ((nLoci-1)*0.05)
1549126273017:# width  <- nAlleles * wFactor
1549126273019:# # Generate plot
1549126273021:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549126273023:# # Save plot
1549126273025:# out.filename <- paste0(out.prefix, ".", out.format)
1549126273027:# if (out.format == "png") {
1549126273029:# 	ggsave(filename = out.filename, plot = depth.plot,
1549126273031:# 				 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549126273032:# } else {
1549126273034:# 	ggsave(filename = out.filename, plot = depth.plot,
1549126273038:# 				 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549126273041:# }
1549126273046:# Depth plot -------------------------------------------------------------
1549126273048:# <<<<<<< HEAD
1549126273051:#   rowsPerPage <- 7
1549126273054:#   hFactor     <- 1.2
1549126273057:#   wFactor     <- 4.8
1549126273059:#   rows        <- nLoci
1549126273062:#   if (nLoci > rowsPerPage)
1549126273064:#     rows <- rowsPerPage;
1549126273069:#   height <- (rows * hFactor) + 2 + 0.1 + ((rows-1)*0.05)
1549126273072:#   width  <- nAlleles * wFactor
1549126273074:#
1549126273077:#   loci     <- unique(data.to.plot$Locus)
1549126273079:#   lociList <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549126273082:#   lociList <- split(loci, ceiling(seq_along(loci)/3))
1549126273084:#   plotList <- list()
1549126273097:#   for (lociSet in lociList) {
1549126273100:#   	print(lociSet)
1549126273109:#   	subset.to.plot <- data.to.plot %>%
1549126273112:#   		filter(Locus %in% lociSet)
1549126273115:#   	labelsData <- getLabelsData(subset.to.plot)
1549126273117:#   	currentPlot <- plotDepth(subset.to.plot, labelsData, fillPalette, borderPalette)
1549126273120:#   	plotList <- c(plotList, list(currentPlot))
1549126273122:#   	# print(currentPlot)
1549126273125:#   	# print(unique(subset.to.plot$Locus))
1549126273128:#   }
1549126273130:#  	length(plotList)
1549126273133:#
1549126273135:#  	if (out.format == "pdf") {
1549126273138:#  		out.filename <- paste(out.prefix, out.format, sep = ".")
1549126273141:#  		pdf(out.filename)
1549126273143:#  		for (i in seq_along(plotList)) {
1549126273146:#  			nLociToPlot <- length(lociList[[i]])
1549126273148:#  			height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1549126273151:#  			width  <- nAlleles * wFactor
1549126273154:#  			# out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549126273156:#  			# print(out.filename)
1549126273159:#  			print(plotList[[i]])
1549126273163:#  		}
1549126273166:#  		dev.off()
1549126273168:#
1549126273171:#  	}
1549126273173:#  	for (i in seq_along(plotList)) {
1549126273176:#  		nLociToPlot <- length(lociList[[i]])
1549126273179:#  		height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1549126273181:#  		width  <- nAlleles * wFactor
1549126273184:#  		out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549126273186:#  		print(out.filename)
1549126273190:#  		pdf(out.filename, width = width, height = height)
1549126273192:#  		print(plotList[[i]])
1549126273195:#  		dev.off()
1549126273197:#  	}
1549126273200:#  	else if (out.format == "png") {
1549126273203:#  		ggsave(filename = out.filename, plot = depth.plot,
1549126273205:#  					 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549126273207:#  	} else {
1549126273209:#  		ggsave(filename = out.filename, plot = depth.plot,
1549126273211:#  					 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549126273213:#  	}
1549126273214:#
1549126273216:#  	plot_grid()
1549126273218:#  	# Generate plot
1549126273220:#   # (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549126273223:# =======
1549126273225:hFactor  <- 1.6
1549126273227:wFactor  <- 4.8
1549126273230:getPlotHeight <- function(rows){
1549126273232:# loci + titles and foot note + strip + space between locus
1549126273234:(rows*hFactor) + 2.39 + ((rows-1)*0.157) #in
1549126273236:}
1549126273240:rowsPerPage <- 3
1549126273241:width  <- nAlleles * wFactor
1549126273243:height <- getPlotHeight(rowsPerPage)
1549126273245:loci   <- unique(data.to.plot$Locus)
1549126273247:sets   <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549126273251:plots <- lapply(sets, function(set, dp=data.to.plot, rp=rowsPerPage){
1549126273252:subsetToPlot <- dp %>% filter(Locus %in% set)
1549126273254:ld    <- getLabelsData(subsetToPlot)
1549126273256:(p    <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette))
1549126273258:nLoci <- length(set)
1549126273260:if(nLoci < rp & out.format == "pdf"){
1549126273262:hlay    <- matrix(c(1, NA))
1549126273263:total   <- getPlotHeight(rp)
1549126273265:cHeight <- getPlotHeight(nLoci)
1549126273267:blank   <- getPlotHeight(rp-nLoci) - 2.39
1549126273269:heights <- matrix(c(cHeight/total, blank/total))
1549126273271:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549126273272:}
1549126273274:p
1549126273276:})
1549126273279:if (out.format == "pdf") {
1549126273281:out.filename <- paste(out.prefix, out.format, sep = ".")
1549126273283:ml <- marrangeGrob(plots, nrow=1, ncol=1, padding = unit(10, "mm"),
1549126273285:top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549126273287:ggsave(filename = out.filename, plot = ml,
1549126273289:width  = width, height = getPlotHeight(rowsPerPage), dpi = 400, limitsize = FALSE)
1549126273290:}
1549126273292:else {
1549126273295:for (i in seq_along(plots)) {
1549126273297:out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549126273299:ggsave(filename = out.filename, plot = plots[[i]],
1549126273302:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549126273305:}
1549126273309:}
1549126273312:# # Generate plot
1549126273315:# labelsData <- getLabelsData(data.to.plot)
1549126273319:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549126273322:# # Save plot
1549126273325:# out.filename <- paste0(out.prefix, ".", out.format)
1549126273328:# if (out.format == "png") {
1549126273331:#   ggsave(filename = out.filename, plot = depth.plot,
1549126273334:#          width  = width, height = height, dpi = 300, limitsize = FALSE, type = "cairo-png")
1549126273337:# } else {
1549126273341:#   ggsave(filename = out.filename, plot = depth.plot,
1549126273344:#          width  = width, height = height, dpi = 400, limitsize = FALSE)
1549126273347:# }
1549126273353:# # Depth distribution plot ------------------------------------------------
1549126273356:# hFactor  <- 3
1549126273359:# wFactor  <- 2
1549126273362:# if (nLoci == 1)
1549126273365:#   hFactor <- 3.5
1549126273368:# height       <- nLoci * hFactor
1549126273371:# width        <- nAlleles * wFactor
1549126273374:# # Generate plot
1549126273377:# (dist.plot <- plotDepthDist(data.to.plot, labelsData, fillPalette, borderPalette))
1549126273380:# # Save plot
1549126273383:# out.filename <- paste0(out.prefix, "_dist.", out.format)
1549126273386:# if (out.format == "png") {
1549126273389:#   ggsave(filename = out.filename, plot = dist.plot,
1549126273392:#          width  = width, height = height, type = "cairo-png", dpi = 300)
1549126273395:# } else {
1549126273398:#   ggsave(filename = out.filename, plot = dist.plot,
1549126273404:#          width  = width, height = height, dpi = 400)
1549126273408:# }
1549126273414:cat("Done! \n")
1549126273420:# Code core - End ---------------------------------------------------------
1549126273423:}
1549126381513:plotTitlesSize <- 2.39
1549126392707:plotTitlesSize <- 2.39
1549126463731:#!/usr/bin/env Rscript
1549126463731:# ##############################################################################
1549126463732:#  Author:   Hector Fabio Espitia-Navarro
1549126463732:#            Georgia Institute of Technology
1549126463733:#  Version:  1.0
1549126463733:#  Date:     01/19/2019
1549126463734:# ##############################################################################
1549126463734:# Install required packages -----------------------------------------------
1549126463735:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549126463736:if(!file.exists(personal.lib.path))
1549126463736:dir.create(personal.lib.path)
1549126463737:printMessage <- function(message, verbose){
1549126463738:if(verbose)
1549126463738:cat(message)
1549126463739:}
1549126463740:# crayon::bold("Hola")
1549126463741:installAndLoadPackages <- function(pkg, verbose){
1549126463742:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1549126463742:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1549126463743:printMessage("Done!\n", verbose)
1549126463743:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549126463743:if (length(new.pkg)) {
1549126463744:printMessage("Installing new packages... ", verbose)
1549126463744:install.packages(new.pkg, dependencies = TRUE,
1549126463744:repos="http://cran.rstudio.com/",
1549126463745:lib = personal.lib.path)
1549126463745:printMessage("Done!\n", verbose)
1549126463745:}
1549126463746:printMessage("Loading required packages... ", verbose)
1549126463746:sapply(pkg, function(x){
1549126463746:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549126463747:})
1549126463747:printMessage("Done!\n", verbose)
1549126463747:}
1549126463748:# github.related.packages <- c("devtools", "Rcpp")
1549126463749:# packages <- c("argparser", "tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite")
1549126463749:packages <- c("tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite", "gridExtra")
1549126463749:# installAndLoadPackages(packages, verbose = TRUE)
1549126463750:installAndLoadPackages("argparser", verbose = FALSE)
1549126463774:# Command line arguments processing ---------------------------------------
1549126463774:# Get script name
1549126463775:initial.options <- commandArgs(trailingOnly = FALSE)
1549126463775:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1549126463776:# Process command line arguments
1549126463777:# Create a parser
1549126463777:p <- arg_parser("This script generates k-mer depth plots using a depth file generated by the\033[1mSTing typer\033[22m tool (-t option).",
1549126463777:name = script.name)
1549126463779:# Add Positional arguments (required)
1549126463779:p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
1549126463780:# Add options
1549126463781:p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1549126463782:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1549126463782:default = "kmer_depth")
1549126463783:p <- add_argument(p, "--sample_name", help = "Sample name.",
1549126463783:default = "input file's name")
1549126463784:p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'",
1549126463784:default = "pdf")
1549126463785:# Initialization of variables ---------------------------------------------
1549126463785:# Values to test the script using RStudio
1549126463786:script.home <- "/home/hspitia/projects/sting"
1549126463786:# inputFile   <- paste(script.home, "ERR036060.depth.2.tsv", sep = "/")
1549126463786:# geneFile    <- paste(script.home, "rmlst_failed_loci.txt", sep = "/")
1549126463787:inputFile   <- paste(script.home, "depth.tsv", sep = "/")
1549126463787:geneFile    <- paste(script.home, "loci.txt", sep = "/")
1549126463788:out.format  <- "png"
1549126463788:out.prefix  <- "kmer_ext_depth"
1549126463789:sample.name <- basename(inputFile)
1549126463789:# Parse command line arguments
1549126463789:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1549126463790:argv <- list()
1549126463790:if(command.line) {
1549126463790:argv <- parse_args(p)
1549126463791:} else {
1549126463791:argv <- parse_args(p, list(inputFile,
1549126463791:# "--gene_file", geneFile,
1549126463792:"--prefix", out.prefix,
1549126463792:"--sample_name", sample.name,
1549126463792:"--format", out.format))
1549126463792:}
1549126463794:# Get argument values from the command line
1549126463794:input.file  <- argv$input_file
1549126463794:gene.file   <- argv$gene_file
1549126463795:out.format  <- argv$format
1549126463795:out.prefix  <- argv$prefix
1549126463796:sample.name <- argv$sample_name
1549126463796:# if (sample.name == "")
1549126463796:if (sample.name == "input file's name")
1549126463797:sample.name <- basename(input.file)
1549126463797:# Function to check if file exists ----------------------------------------
1549126463798:CheckFileExists <- function(file.list) {
1549126463798:non.exist.files <- !file.exists(file.list)
1549126463798:if(any(non.exist.files)) {
1549126463798:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549126463799:}
1549126463799:}
1549126463799:# Check for input files ---------------------------------------------------
1549126463800:files.to.check <- c(input.file)
1549126463800:error.message  <- CheckFileExists(files.to.check)
1549126463801:if(!is.null(error.message)){
1549126463801:stop(error.message)
1549126463802:} else {
1549126463802:# Code core - Begin -------------------------------------------------------
1549126463803:installAndLoadPackages(packages, verbose = TRUE)
1549126463803:# FUNCTIONS:
1549126463803:# Function to dark a list of colors ---------------------------------------
1549126463803:darkColors <- function(palette, level){
1549126463804:rgbColors <- as.data.frame(t(as.data.frame(lapply(as.data.frame(t(col2rgb(palette))),
1549126463804:function(x) { round(x * level)}))))
1549126463804:unname(sapply(rgbColors, function(x){ rgb(x[1], x[2], x[3], maxColorValue=255) }))
1549126463805:}
1549126463805:# Function for plotting k-mer depth ----------------------------------------
1549126463805:plotDepth <- function(dataToPlot, labelsData, fillColors, borderColors) {
1549126463806:max.x       <- max(dataToPlot$Position)
1549126463806:max.y       <- max(dataToPlot$kmerDepth)
1549126463806:x.limits    <- seq(0, max.x, 100)
1549126463807:y.limits    <- seq(0, max.y, 20)
1549126463807:nTopAlleles <- length(unique(dataToPlot$N))
1549126463808:d.plot <- ggplot(data = dataToPlot, aes(x = Position, y = kmerDepth),
1549126463808:size = 0.2) +
1549126463809:geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1549126463809:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1549126463810:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1549126463810:# scale_color_manual(values = getPalette) +
1549126463810:scale_color_manual(values = borderColors) +
1549126463811:scale_fill_manual(values = fillColors) +
1549126463811:geom_text(data = labelsData,
1549126463812:# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1549126463812:# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1549126463813:aes(x = Length, y = info.y * 0.5, group = Locus,
1549126463813:hjust = 0,
1549126463814:label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1549126463814:show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1549126463815:nudge_x = -(max.x*0.025)
1549126463815:) +
1549126463816:geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1549126463816:alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1549126463817:# geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1549126463818:size = annotTextSize * 1.05, color = "#333333") +
1549126463818:geom_text(data = labelsData,
1549126463819:parse = TRUE,
1549126463820:aes(x = info.x, y = info.y,
1549126463821:label = paste0("{{{{italic(s)==", format(round(Score, 2), nsmall = 2),
1549126463822:"*~~~italic(hat(f)[k])} ==", format(round(NormKmerCount, 2), nsmall = 2),
1549126463823:"*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1549126463824:"*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1549126463825:"~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1549126463826:hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1549126463827:facet_grid(Locus ~ N, scales = "free_y") +
1549126463828:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1549126463830:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1549126463831:theme_bw() +
1549126463832:plotTheme +
1549126463833:labs(title    = expression(italic("k")*"-mer depth"),
1549126463834:subtitle = paste("Top", nTopAlleles, "alleles/genes on sample", sample.name),
1549126463835:x        = "Position along sequence (bp)",
1549126463836:y        = expression(paste(italic(k), "-mer depth")),
1549126463838:# caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1549126463841:caption  = expression(paste(italic("s"),": score;  ",
1549126463843:italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1549126463845:italic("c"),": coverage;  ",
1549126463848:italic(sigma), ": standard deviation;  ",
1549126463850:italic(bar(d)), ": average depth"), sep = "")
1549126463851:)
1549126463853:# guides(fill  = guide_legend(title  ="Allele"), color = FALSE) +
1549126463854:d.plot
1549126463855:}
1549126463857:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549126463858:# Function for plotting k-mer depth distributions as box plots ------------
1549126463859:plotDepthDist <- function(data.to.plot, labelsData, fillColors, borderColors){
1549126463860:dist.plot <- ggplot(data.to.plot, aes(x = AlPos, y = kmerDepth)) +
1549126463861:geom_jitter(position = position_jitter(width=.3), aes(color = Locus),
1549126463863:alpha = 0.4, size = 1.2, shape = 16) +
1549126463864:geom_boxplot(alpha = 0.7, size = 0.5, aes(fill = Locus, color = Locus)) +
1549126463866:geom_text(data = labelsData, size = 4, hjust = "center",
1549126463868:aes(x = N,#(N - 0.5),
1549126463873:y = info.y * 1.05,
1549126463874:label = Allele),
1549126463876:color = "#333333") +
1549126463877:geom_text(data = labelsData, size = 3, hjust = "center",
1549126463878:parse = TRUE,
1549126463879:aes(x = N,#(N - 0.4),
1549126463879:# y = info.y * 0.08,
1549126463881:y = info.y * 0.96,
1549126463881:label = paste0("sigma ==",format(round(sd, 1), nsmall = 1))),
1549126463882:color = "#333333") +
1549126463883:geom_point(data = labelsData,
1549126463884:shape = 23, fill = "white",
1549126463885:aes(x = N, y = meanDepth)) +
1549126463886:facet_grid(Locus ~ ., scales = "free_y") +
1549126463887:scale_color_manual(values = borderColors) +
1549126463889:scale_fill_manual(values = fillColors) +
1549126463890:labs(title = expression(paste(italic("k"), "-mer depth distribution")),
1549126463892:subtitle = basename(input.file),
1549126463894:x        = "Allele Ranking",
1549126463895:y        = expression(paste(italic(k), "-mer depth")),
1549126463897:caption  = expression(paste(italic(sigma), ": standard deviation")))+#,"sd: standard deviation") +
1549126463898:theme_bw() +
1549126463900:plotTheme +
1549126463901:theme(axis.text.x   = element_text(angle = 0, size = axisTextSize,
1549126463903:vjust = 1, hjust = 0.5, color = textColor))
1549126463904:dist.plot
1549126463906:}
1549126463907:# Function to get data for annotations ------------------------------------
1549126463909:getLabelsData <- function(data.to.plot) {
1549126463910:max.x <- max(data.to.plot$Position)
1549126463911:max.y <- max(data.to.plot$kmerDepth)
1549126463914:nLoci    <- length(unique(data.to.plot$Locus))
1549126463916:nAlleles <- length(unique(data.to.plot$N))
1549126463919:alleles     <- unique(data.to.plot$Allele)
1549126463920:loci        <- as.character(unique(data.to.plot$Locus))
1549126463922:lociLabels  <- c()
1549126463923:name.x      <- c()
1549126463925:name.y      <- c()
1549126463926:info.x      <- c()
1549126463928:info.y      <- c()
1549126463929:covs        <- c()
1549126463931:avgDepths   <- c()
1549126463933:meanDepth.x <- c()
1549126463934:meanDepth.y <- c()
1549126463936:for (i in loci) {
1549126463937:lociLabels <- c(lociLabels, rep(i, nAlleles))
1549126463939:}
1549126463940:for (allele in alleles) {
1549126463942:locus       <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1549126463943:maxPos      <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549126463945:maxDepth    <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549126463947:# name.x      <- c(name.x, (maxPos / 2))
1549126463948:name.x      <- c(name.x, (max.x / 2))
1549126463950:name.y      <- c(name.y, (maxDepth * 0.25))
1549126463951:info.x      <- c(info.x, max.x * 0.02)
1549126463953:info.y      <- c(info.y, maxDepth * 1.5)
1549126463955:covs        <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549126463957:avgDepths   <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549126463961:}
1549126463962:labelsData <- data.frame(Allele = alleles,
1549126463964:name.x = name.x,
1549126463965:name.y = name.y,
1549126463967:info.x = info.x,
1549126463968:info.y = info.y,
1549126463970:meanDepth = avgDepths,
1549126463971:N = rep(unique(data.to.plot$N), nLoci),
1549126463972:Locus = lociLabels,
1549126463974:cov = covs
1549126463975:) %>%
1549126463976:left_join(data.to.plot %>%
1549126463978:group_by(Allele, Length, NormKmerCount, Score) %>%
1549126463979:summarise(sd = sd(kmerDepth)),
1549126463981:by = c("Allele" = "Allele")) #%>%
1549126463982:# mutate(
1549126463983:#   info   = paste0("cov=", format(round(covs, 1), nsmall = 1), "%   ",
1549126463985:#                   paste0("ad=", format(round(avgDepths, 1), nsmall = 1)),
1549126463986:#                   "   ",
1549126463987:#                   # expression(paste(italic(sigma), "=",format(round(sd, 1), nsmall = 1))))
1549126463989:#                   paste0("sd=", format(round(sd, 1), nsmall = 1))
1549126463990:#   )
1549126463991:# )
1549126463993:labelsData
1549126463994:}
1549126463997:# Check for genes/loci file to filter loci to plot  -----------------------
1549126463998:loci.to.plot <- c()
1549126463999:# if (!is.null(gene.file)|| gene.file != "") {
1549126464001:if (!is.null(gene.file) && !is.na(gene.file) && gene.file != "") {
1549126464003:error.message <- CheckFileExists(gene.file)
1549126464005:if (!is.null(error.message)){
1549126464007:cat("Warning:")
1549126464010:cat(error.message)
1549126464012:cat("  The plotting process will continue without filtering genes/loci.\n")
1549126464013:} else {
1549126464015:loci.to.plot <- scan(gene.file, character(), quiet = TRUE)
1549126464016:}
1549126464018:}
1549126464022:# Data processing and plotting --------------------------------------------
1549126464025:cat("Plotting depths... ")
1549126464027:options(stringsAsFactors = T, readr.num_columns = 0)
1549126464031:# Load data
1549126464033:inData <- read_tsv(input.file)
1549126464035:# inData <- read.delim(input.file)
1549126464039:# colnames(inData) <- c("Allele", "Position", "k-mer Depth", "Weighted k-mer Depth")
1549126464041:colnames(inData) <- c("N", "Locus", "Allele", "Position", "kmerDepth",
1549126464043:"NormKmerCount", "Coverage", "Score", "AverageKmerDepth")
1549126464047:# Transform data
1549126464049:data.to.plot <- inData %>%
1549126464051:left_join(inData %>%
1549126464054:group_by(Allele) %>%
1549126464056:summarise(Length = n()), by = "Allele") %>%
1549126464058:arrange(Locus, N) %>%
1549126464060:mutate(
1549126464061:AlPos = factor(N, levels = unique(.$N)),
1549126464063:Allele = factor(Allele, levels = unique(inData$Allele)))
1549126464065:# Filtering loci/genes from genes_file input param
1549126464066:if (length(loci.to.plot) > 0) {
1549126464068:data.to.plot <- data.to.plot %>%
1549126464069:filter(Locus %in% loci.to.plot)
1549126464071:}
1549126464074:longestLocusNameLength <- max(str_length(as.character(unique(inData$Locus))))
1549126464075:# labelsData <- getLabelsData(data.to.plot)
1549126464077:nLoci      <- length(unique(data.to.plot$Locus))
1549126464078:nAlleles   <- length(unique(data.to.plot$N))
1549126464081:# Theme-related variable definition ---------------------------------------
1549126464083:annotLinetype         <- "solid"
1549126464084:annotTextSize         <- 4
1549126464086:axisColor             <- "#000000"
1549126464087:axisTextSize          <- 12
1549126464089:barAnnotTextSize      <- 4
1549126464090:baseTextSize          <- 14
1549126464092:gridColor             <- "#e0e0e0"
1549126464093:lineSize              <- 0.3
1549126464095:panelColor            <- "#fff4e0"
1549126464096:panelColor            <- "#f2efe6"
1549126464098:# panelColor            <- "#ffffff"
1549126464099:# stripBackground       <- "#cccccc"
1549126464101:stripTextSize         <- axisTextSize
1549126464103:if (longestLocusNameLength > 12)
1549126464104:stripTextSize       <- stripTextSize * 0.6
1549126464106:textColor             <- "#000000"
1549126464107:# baseFontFamily        <- "Arial"
1549126464110:# Custom theme definition for plots ---------------------------------------
1549126464112:plotTheme <- list(
1549126464113:theme(
1549126464115:axis.text.x      = element_text(angle = 50, size = axisTextSize,
1549126464116:vjust = 1, hjust = 1, color = textColor),
1549126464118:axis.text.y      = element_text(size = axisTextSize, color = textColor),
1549126464119:axis.ticks       = element_line(size = lineSize),
1549126464121:axis.title.x     = element_text(margin = margin(6,0,8,0, "mm")),
1549126464122:axis.title.y     = element_text(margin = margin(0,6,0,0, "mm")),
1549126464124:legend.position  = "none",
1549126464126:panel.border     = element_rect(size = lineSize),
1549126464128:panel.background = element_rect(fill = panelColor),
1549126464129:panel.grid       = element_line(size = lineSize, colour = gridColor),
1549126464131:panel.grid.minor = element_blank(),
1549126464133:plot.margin      = margin(10,10,0,10, "mm"),
1549126464134:panel.spacing    = unit(4, "mm"),
1549126464136:plot.caption     = element_text(size = baseTextSize * 0.7, face = "italic"),
1549126464138:plot.title       = element_text(hjust = 0.5),
1549126464141:plot.subtitle    = element_text(hjust = 0.5),
1549126464142:strip.background = element_rect(size = lineSize),
1549126464144:strip.text       = element_text(size = stripTextSize),
1549126464146:text             = element_text(size = baseTextSize)
1549126464148:)
1549126464150:)
1549126464153:# Palette definition ------------------------------------------------------
1549126464155:# colourCount <- length(unique(inData$Locus))
1549126464157:colourCount <- nLoci
1549126464159:# colourCount  <- length(unique(data.to.plot$Allele))
1549126464161:# fillPalette  <- colorRampPalette(brewer.pal(8, "Dark2"))(colourCount)
1549126464163:# fillPalette  <- colorRampPalette(brewer.pal(12, "Paired"))(colourCount)
1549126464166:# fillPalette  <- colorRampPalette(brewer.pal(9, "Set1"))(colourCount)
1549126464167:# fillPalette  <- colorRampPalette(pal_npg("nrc")(10))(colourCount)
1549126464170:# fillPalette  <- colorRampPalette(pal_d3("category20")(20))(colourCount)
1549126464173:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549126464175:borderPalette <- darkColors(fillPalette, 0.6)
1549126464178:# library("scales"); show_col(fillPalette); show_col(borderPalette)
1549126464186:# # Depth plot -------------------------------------------------------------
1549126464188:# hFactor  <- 1.2
1549126464190:# wFactor  <- 4.8
1549126464191:# # if (nLoci == 1)
1549126464193:# #   hFactor <- 1.4;
1549126464197:# height <- (nLoci * hFactor) + 2 + 0.1 + ((nLoci-1)*0.05)
1549126464198:# width  <- nAlleles * wFactor
1549126464200:# # Generate plot
1549126464202:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549126464204:# # Save plot
1549126464206:# out.filename <- paste0(out.prefix, ".", out.format)
1549126464208:# if (out.format == "png") {
1549126464210:# 	ggsave(filename = out.filename, plot = depth.plot,
1549126464211:# 				 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549126464213:# } else {
1549126464215:# 	ggsave(filename = out.filename, plot = depth.plot,
1549126464217:# 				 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549126464219:# }
1549126464223:# Depth plot -------------------------------------------------------------
1549126464225:# <<<<<<< HEAD
1549126464227:#   rowsPerPage <- 7
1549126464229:#   hFactor     <- 1.2
1549126464230:#   wFactor     <- 4.8
1549126464232:#   rows        <- nLoci
1549126464235:#   if (nLoci > rowsPerPage)
1549126464238:#     rows <- rowsPerPage;
1549126464243:#   height <- (rows * hFactor) + 2 + 0.1 + ((rows-1)*0.05)
1549126464246:#   width  <- nAlleles * wFactor
1549126464249:#
1549126464252:#   loci     <- unique(data.to.plot$Locus)
1549126464254:#   lociList <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549126464257:#   lociList <- split(loci, ceiling(seq_along(loci)/3))
1549126464260:#   plotList <- list()
1549126464263:#   for (lociSet in lociList) {
1549126464265:#   	print(lociSet)
1549126464268:#   	subset.to.plot <- data.to.plot %>%
1549126464271:#   		filter(Locus %in% lociSet)
1549126464273:#   	labelsData <- getLabelsData(subset.to.plot)
1549126464276:#   	currentPlot <- plotDepth(subset.to.plot, labelsData, fillPalette, borderPalette)
1549126464278:#   	plotList <- c(plotList, list(currentPlot))
1549126464281:#   	# print(currentPlot)
1549126464283:#   	# print(unique(subset.to.plot$Locus))
1549126464286:#   }
1549126464289:#  	length(plotList)
1549126464291:#
1549126464294:#  	if (out.format == "pdf") {
1549126464297:#  		out.filename <- paste(out.prefix, out.format, sep = ".")
1549126464299:#  		pdf(out.filename)
1549126464302:#  		for (i in seq_along(plotList)) {
1549126464305:#  			nLociToPlot <- length(lociList[[i]])
1549126464307:#  			height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1549126464310:#  			width  <- nAlleles * wFactor
1549126464312:#  			# out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549126464315:#  			# print(out.filename)
1549126464318:#  			print(plotList[[i]])
1549126464321:#  		}
1549126464323:#  		dev.off()
1549126464326:#
1549126464331:#  	}
1549126464334:#  	for (i in seq_along(plotList)) {
1549126464336:#  		nLociToPlot <- length(lociList[[i]])
1549126464353:#  		height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1549126464356:#  		width  <- nAlleles * wFactor
1549126464359:#  		out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549126464361:#  		print(out.filename)
1549126464376:#  		pdf(out.filename, width = width, height = height)
1549126464379:#  		print(plotList[[i]])
1549126464382:#  		dev.off()
1549126464384:#  	}
1549126464386:#  	else if (out.format == "png") {
1549126464388:#  		ggsave(filename = out.filename, plot = depth.plot,
1549126464391:#  					 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549126464394:#  	} else {
1549126464396:#  		ggsave(filename = out.filename, plot = depth.plot,
1549126464399:#  					 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549126464402:#  	}
1549126464404:#
1549126464407:#  	plot_grid()
1549126464410:#  	# Generate plot
1549126464412:#   # (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549126464417:# =======
1549126464420:hFactor        <- 1.6
1549126464422:wFactor        <- 4.8
1549126464425:plotTitlesSize <- 2.39
1549126464427:getPlotHeight <- function(rows, extras){
1549126464429:# loci + titles and foot note + strip + space between locus
1549126464430:(rows*hFactor) + extras + ((rows-1)*0.157) #in
1549126464432:}
1549126464435:rowsPerPage <- 3
1549126464437:width  <- nAlleles * wFactor
1549126464439:height <- getPlotHeight(rowsPerPage, plotTitlesSize)
1549126464440:loci   <- unique(data.to.plot$Locus)
1549126464442:sets   <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549126464446:plots <- lapply(sets, function(set, dp=data.to.plot, rp=rowsPerPage){
1549126464448:subsetToPlot <- dp %>% filter(Locus %in% set)
1549126464450:ld    <- getLabelsData(subsetToPlot)
1549126464452:(p    <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette))
1549126464458:nLoci <- length(set)
1549126464461:if(nLoci < rp & out.format == "pdf"){
1549126464464:hlay    <- matrix(c(1, NA))
1549126464467:total   <- getPlotHeight(rp, plotTitlesSize)
1549126464470:cHeight <- getPlotHeight(nLoci, plotTitlesSize)
1549126464473:blank   <- getPlotHeight(rp-nLoci, 0)
1549126464476:heights <- matrix(c(cHeight/total, blank/total))
1549126464479:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549126464482:}
1549126464485:p
1549126464489:})
1549126464494:if (out.format == "pdf") {
1549126464497:out.filename <- paste(out.prefix, out.format, sep = ".")
1549126464500:ml <- marrangeGrob(plots, nrow=1, ncol=1, padding = unit(10, "mm"),
1549126464503:top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549126464506:ggsave(filename = out.filename, plot = ml,
1549126464510:width  = width, height = getPlotHeight(rowsPerPage), dpi = 400, limitsize = FALSE)
1549126464512:}
1549126464515:else {
1549126464517:for (i in seq_along(plots)) {
1549126464519:out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549126464521:ggsave(filename = out.filename, plot = plots[[i]],
1549126464523:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549126464526:}
1549126464528:}
1549126464532:# # Depth distribution plot ------------------------------------------------
1549126464535:# hFactor  <- 3
1549126464537:# wFactor  <- 2
1549126464540:# if (nLoci == 1)
1549126464542:#   hFactor <- 3.5
1549126464544:# height       <- nLoci * hFactor
1549126464547:# width        <- nAlleles * wFactor
1549126464549:# # Generate plot
1549126464551:# (dist.plot <- plotDepthDist(data.to.plot, labelsData, fillPalette, borderPalette))
1549126464553:# # Save plot
1549126464556:# out.filename <- paste0(out.prefix, "_dist.", out.format)
1549126464558:# if (out.format == "png") {
1549126464560:#   ggsave(filename = out.filename, plot = dist.plot,
1549126464562:#          width  = width, height = height, type = "cairo-png", dpi = 300)
1549126464564:# } else {
1549126464566:#   ggsave(filename = out.filename, plot = dist.plot,
1549126464569:#          width  = width, height = height, dpi = 400)
1549126464571:# }
1549126464576:cat("Done! \n")
1549126464582:# Code core - End ---------------------------------------------------------
1549126464585:}
1549126536028:#!/usr/bin/env Rscript
1549126536028:# ##############################################################################
1549126536028:#  Author:   Hector Fabio Espitia-Navarro
1549126536029:#            Georgia Institute of Technology
1549126536029:#  Version:  1.0
1549126536029:#  Date:     01/19/2019
1549126536030:# ##############################################################################
1549126536030:# Install required packages -----------------------------------------------
1549126536031:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549126536031:if(!file.exists(personal.lib.path))
1549126536031:dir.create(personal.lib.path)
1549126536032:printMessage <- function(message, verbose){
1549126536032:if(verbose)
1549126536033:cat(message)
1549126536033:}
1549126536034:# crayon::bold("Hola")
1549126536034:installAndLoadPackages <- function(pkg, verbose){
1549126536034:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1549126536035:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1549126536035:printMessage("Done!\n", verbose)
1549126536035:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549126536036:if (length(new.pkg)) {
1549126536036:printMessage("Installing new packages... ", verbose)
1549126536036:install.packages(new.pkg, dependencies = TRUE,
1549126536037:repos="http://cran.rstudio.com/",
1549126536037:lib = personal.lib.path)
1549126536038:printMessage("Done!\n", verbose)
1549126536038:}
1549126536039:printMessage("Loading required packages... ", verbose)
1549126536040:sapply(pkg, function(x){
1549126536040:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549126536040:})
1549126536041:printMessage("Done!\n", verbose)
1549126536041:}
1549126536042:# github.related.packages <- c("devtools", "Rcpp")
1549126536042:# packages <- c("argparser", "tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite")
1549126536043:packages <- c("tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite", "gridExtra")
1549126536043:# installAndLoadPackages(packages, verbose = TRUE)
1549126536043:installAndLoadPackages("argparser", verbose = FALSE)
1549126536086:# Command line arguments processing ---------------------------------------
1549126536086:# Get script name
1549126536087:initial.options <- commandArgs(trailingOnly = FALSE)
1549126536088:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1549126536089:# Process command line arguments
1549126536089:# Create a parser
1549126536090:p <- arg_parser("This script generates k-mer depth plots using a depth file generated by the\033[1mSTing typer\033[22m tool (-t option).",
1549126536090:name = script.name)
1549126536093:# Add Positional arguments (required)
1549126536093:p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
1549126536095:# Add options
1549126536095:p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1549126536097:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1549126536098:default = "kmer_depth")
1549126536099:p <- add_argument(p, "--sample_name", help = "Sample name.",
1549126536099:default = "input file's name")
1549126536101:p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'",
1549126536101:default = "pdf")
1549126536103:# Initialization of variables ---------------------------------------------
1549126536104:# Values to test the script using RStudio
1549126536104:script.home <- "/home/hspitia/projects/sting"
1549126536105:# inputFile   <- paste(script.home, "ERR036060.depth.2.tsv", sep = "/")
1549126536105:# geneFile    <- paste(script.home, "rmlst_failed_loci.txt", sep = "/")
1549126536106:inputFile   <- paste(script.home, "depth.tsv", sep = "/")
1549126536107:geneFile    <- paste(script.home, "loci.txt", sep = "/")
1549126536107:out.format  <- "png"
1549126536108:out.prefix  <- "kmer_ext_depth"
1549126536109:sample.name <- basename(inputFile)
1549126536110:# Parse command line arguments
1549126536110:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1549126536111:argv <- list()
1549126536112:if(command.line) {
1549126536112:argv <- parse_args(p)
1549126536113:} else {
1549126536113:argv <- parse_args(p, list(inputFile,
1549126536114:# "--gene_file", geneFile,
1549126536114:"--prefix", out.prefix,
1549126536115:"--sample_name", sample.name,
1549126536115:"--format", out.format))
1549126536116:}
1549126536118:# Get argument values from the command line
1549126536118:input.file  <- argv$input_file
1549126536119:gene.file   <- argv$gene_file
1549126536120:out.format  <- argv$format
1549126536121:out.prefix  <- argv$prefix
1549126536122:sample.name <- argv$sample_name
1549126536122:# if (sample.name == "")
1549126536123:if (sample.name == "input file's name")
1549126536123:sample.name <- basename(input.file)
1549126536124:# Function to check if file exists ----------------------------------------
1549126536125:CheckFileExists <- function(file.list) {
1549126536125:non.exist.files <- !file.exists(file.list)
1549126536126:if(any(non.exist.files)) {
1549126536126:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549126536127:}
1549126536127:}
1549126536128:# Check for input files ---------------------------------------------------
1549126536128:files.to.check <- c(input.file)
1549126536129:error.message  <- CheckFileExists(files.to.check)
1549126536130:if(!is.null(error.message)){
1549126536131:stop(error.message)
1549126536131:} else {
1549126536131:# Code core - Begin -------------------------------------------------------
1549126536132:installAndLoadPackages(packages, verbose = TRUE)
1549126536132:# FUNCTIONS:
1549126536133:# Function to dark a list of colors ---------------------------------------
1549126536133:darkColors <- function(palette, level){
1549126536134:rgbColors <- as.data.frame(t(as.data.frame(lapply(as.data.frame(t(col2rgb(palette))),
1549126536134:function(x) { round(x * level)}))))
1549126536135:unname(sapply(rgbColors, function(x){ rgb(x[1], x[2], x[3], maxColorValue=255) }))
1549126536135:}
1549126536136:# Function for plotting k-mer depth ----------------------------------------
1549126536136:plotDepth <- function(dataToPlot, labelsData, fillColors, borderColors) {
1549126536137:max.x       <- max(dataToPlot$Position)
1549126536137:max.y       <- max(dataToPlot$kmerDepth)
1549126536138:x.limits    <- seq(0, max.x, 100)
1549126536138:y.limits    <- seq(0, max.y, 20)
1549126536139:nTopAlleles <- length(unique(dataToPlot$N))
1549126536140:d.plot <- ggplot(data = dataToPlot, aes(x = Position, y = kmerDepth),
1549126536141:size = 0.2) +
1549126536141:geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1549126536142:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1549126536142:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1549126536143:# scale_color_manual(values = getPalette) +
1549126536144:scale_color_manual(values = borderColors) +
1549126536144:scale_fill_manual(values = fillColors) +
1549126536145:geom_text(data = labelsData,
1549126536146:# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1549126536146:# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1549126536147:aes(x = Length, y = info.y * 0.5, group = Locus,
1549126536148:hjust = 0,
1549126536148:label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1549126536149:show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1549126536150:nudge_x = -(max.x*0.025)
1549126536151:) +
1549126536151:geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1549126536152:alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1549126536153:# geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1549126536154:size = annotTextSize * 1.05, color = "#333333") +
1549126536154:geom_text(data = labelsData,
1549126536155:parse = TRUE,
1549126536156:aes(x = info.x, y = info.y,
1549126536157:label = paste0("{{{{italic(s)==", format(round(Score, 2), nsmall = 2),
1549126536157:"*~~~italic(hat(f)[k])} ==", format(round(NormKmerCount, 2), nsmall = 2),
1549126536158:"*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1549126536159:"*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1549126536160:"~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1549126536161:hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1549126536162:facet_grid(Locus ~ N, scales = "free_y") +
1549126536163:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1549126536164:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1549126536165:theme_bw() +
1549126536166:plotTheme +
1549126536167:labs(title    = expression(italic("k")*"-mer depth"),
1549126536168:subtitle = paste("Top", nTopAlleles, "alleles/genes on sample", sample.name),
1549126536169:x        = "Position along sequence (bp)",
1549126536169:y        = expression(paste(italic(k), "-mer depth")),
1549126536170:# caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1549126536172:caption  = expression(paste(italic("s"),": score;  ",
1549126536173:italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1549126536174:italic("c"),": coverage;  ",
1549126536176:italic(sigma), ": standard deviation;  ",
1549126536178:italic(bar(d)), ": average depth"), sep = "")
1549126536179:)
1549126536180:# guides(fill  = guide_legend(title  ="Allele"), color = FALSE) +
1549126536180:d.plot
1549126536181:}
1549126536182:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549126536182:# Function for plotting k-mer depth distributions as box plots ------------
1549126536183:plotDepthDist <- function(data.to.plot, labelsData, fillColors, borderColors){
1549126536184:dist.plot <- ggplot(data.to.plot, aes(x = AlPos, y = kmerDepth)) +
1549126536185:geom_jitter(position = position_jitter(width=.3), aes(color = Locus),
1549126536185:alpha = 0.4, size = 1.2, shape = 16) +
1549126536186:geom_boxplot(alpha = 0.7, size = 0.5, aes(fill = Locus, color = Locus)) +
1549126536187:geom_text(data = labelsData, size = 4, hjust = "center",
1549126536188:aes(x = N,#(N - 0.5),
1549126536189:y = info.y * 1.05,
1549126536189:label = Allele),
1549126536190:color = "#333333") +
1549126536191:geom_text(data = labelsData, size = 3, hjust = "center",
1549126536192:parse = TRUE,
1549126536193:aes(x = N,#(N - 0.4),
1549126536194:# y = info.y * 0.08,
1549126536195:y = info.y * 0.96,
1549126536196:label = paste0("sigma ==",format(round(sd, 1), nsmall = 1))),
1549126536197:color = "#333333") +
1549126536198:geom_point(data = labelsData,
1549126536199:shape = 23, fill = "white",
1549126536200:aes(x = N, y = meanDepth)) +
1549126536201:facet_grid(Locus ~ ., scales = "free_y") +
1549126536202:scale_color_manual(values = borderColors) +
1549126536203:scale_fill_manual(values = fillColors) +
1549126536204:labs(title = expression(paste(italic("k"), "-mer depth distribution")),
1549126536205:subtitle = basename(input.file),
1549126536207:x        = "Allele Ranking",
1549126536209:y        = expression(paste(italic(k), "-mer depth")),
1549126536210:caption  = expression(paste(italic(sigma), ": standard deviation")))+#,"sd: standard deviation") +
1549126536213:theme_bw() +
1549126536214:plotTheme +
1549126536215:theme(axis.text.x   = element_text(angle = 0, size = axisTextSize,
1549126536216:vjust = 1, hjust = 0.5, color = textColor))
1549126536217:dist.plot
1549126536218:}
1549126536220:# Function to get data for annotations ------------------------------------
1549126536221:getLabelsData <- function(data.to.plot) {
1549126536222:max.x <- max(data.to.plot$Position)
1549126536223:max.y <- max(data.to.plot$kmerDepth)
1549126536225:nLoci    <- length(unique(data.to.plot$Locus))
1549126536226:nAlleles <- length(unique(data.to.plot$N))
1549126536228:alleles     <- unique(data.to.plot$Allele)
1549126536229:loci        <- as.character(unique(data.to.plot$Locus))
1549126536230:lociLabels  <- c()
1549126536231:name.x      <- c()
1549126536232:name.y      <- c()
1549126536233:info.x      <- c()
1549126536234:info.y      <- c()
1549126536235:covs        <- c()
1549126536235:avgDepths   <- c()
1549126536237:meanDepth.x <- c()
1549126536238:meanDepth.y <- c()
1549126536240:for (i in loci) {
1549126536241:lociLabels <- c(lociLabels, rep(i, nAlleles))
1549126536243:}
1549126536244:for (allele in alleles) {
1549126536246:locus       <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1549126536247:maxPos      <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549126536249:maxDepth    <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549126536251:# name.x      <- c(name.x, (maxPos / 2))
1549126536252:name.x      <- c(name.x, (max.x / 2))
1549126536254:name.y      <- c(name.y, (maxDepth * 0.25))
1549126536256:info.x      <- c(info.x, max.x * 0.02)
1549126536258:info.y      <- c(info.y, maxDepth * 1.5)
1549126536259:covs        <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549126536261:avgDepths   <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549126536263:}
1549126536264:labelsData <- data.frame(Allele = alleles,
1549126536266:name.x = name.x,
1549126536268:name.y = name.y,
1549126536269:info.x = info.x,
1549126536271:info.y = info.y,
1549126536273:meanDepth = avgDepths,
1549126536274:N = rep(unique(data.to.plot$N), nLoci),
1549126536276:Locus = lociLabels,
1549126536278:cov = covs
1549126536280:) %>%
1549126536281:left_join(data.to.plot %>%
1549126536283:group_by(Allele, Length, NormKmerCount, Score) %>%
1549126536285:summarise(sd = sd(kmerDepth)),
1549126536287:by = c("Allele" = "Allele")) #%>%
1549126536289:# mutate(
1549126536290:#   info   = paste0("cov=", format(round(covs, 1), nsmall = 1), "%   ",
1549126536292:#                   paste0("ad=", format(round(avgDepths, 1), nsmall = 1)),
1549126536294:#                   "   ",
1549126536296:#                   # expression(paste(italic(sigma), "=",format(round(sd, 1), nsmall = 1))))
1549126536298:#                   paste0("sd=", format(round(sd, 1), nsmall = 1))
1549126536299:#   )
1549126536301:# )
1549126536303:labelsData
1549126536305:}
1549126536308:# Check for genes/loci file to filter loci to plot  -----------------------
1549126536310:loci.to.plot <- c()
1549126536312:# if (!is.null(gene.file)|| gene.file != "") {
1549126536314:if (!is.null(gene.file) && !is.na(gene.file) && gene.file != "") {
1549126536316:error.message <- CheckFileExists(gene.file)
1549126536318:if (!is.null(error.message)){
1549126536320:cat("Warning:")
1549126536322:cat(error.message)
1549126536324:cat("  The plotting process will continue without filtering genes/loci.\n")
1549126536326:} else {
1549126536328:loci.to.plot <- scan(gene.file, character(), quiet = TRUE)
1549126536330:}
1549126536332:}
1549126536336:# Data processing and plotting --------------------------------------------
1549126536339:cat("Plotting depths... ")
1549126536341:options(stringsAsFactors = T, readr.num_columns = 0)
1549126536345:# Load data
1549126536347:inData <- read_tsv(input.file)
1549126536349:# inData <- read.delim(input.file)
1549126536353:# colnames(inData) <- c("Allele", "Position", "k-mer Depth", "Weighted k-mer Depth")
1549126536356:colnames(inData) <- c("N", "Locus", "Allele", "Position", "kmerDepth",
1549126536358:"NormKmerCount", "Coverage", "Score", "AverageKmerDepth")
1549126536362:# Transform data
1549126536364:data.to.plot <- inData %>%
1549126536366:left_join(inData %>%
1549126536369:group_by(Allele) %>%
1549126536371:summarise(Length = n()), by = "Allele") %>%
1549126536373:arrange(Locus, N) %>%
1549126536375:mutate(
1549126536377:AlPos = factor(N, levels = unique(.$N)),
1549126536379:Allele = factor(Allele, levels = unique(inData$Allele)))
1549126536381:# Filtering loci/genes from genes_file input param
1549126536383:if (length(loci.to.plot) > 0) {
1549126536385:data.to.plot <- data.to.plot %>%
1549126536387:filter(Locus %in% loci.to.plot)
1549126536389:}
1549126536394:longestLocusNameLength <- max(str_length(as.character(unique(inData$Locus))))
1549126536395:# labelsData <- getLabelsData(data.to.plot)
1549126536397:nLoci      <- length(unique(data.to.plot$Locus))
1549126536398:nAlleles   <- length(unique(data.to.plot$N))
1549126536401:# Theme-related variable definition ---------------------------------------
1549126536403:annotLinetype         <- "solid"
1549126536404:annotTextSize         <- 4
1549126536406:axisColor             <- "#000000"
1549126536407:axisTextSize          <- 12
1549126536409:barAnnotTextSize      <- 4
1549126536411:baseTextSize          <- 14
1549126536412:gridColor             <- "#e0e0e0"
1549126536414:lineSize              <- 0.3
1549126536415:panelColor            <- "#fff4e0"
1549126536417:panelColor            <- "#f2efe6"
1549126536419:# panelColor            <- "#ffffff"
1549126536420:# stripBackground       <- "#cccccc"
1549126536423:stripTextSize         <- axisTextSize
1549126536425:if (longestLocusNameLength > 12)
1549126536427:stripTextSize       <- stripTextSize * 0.6
1549126536430:textColor             <- "#000000"
1549126536432:# baseFontFamily        <- "Arial"
1549126536437:# Custom theme definition for plots ---------------------------------------
1549126536439:plotTheme <- list(
1549126536442:theme(
1549126536445:axis.text.x      = element_text(angle = 50, size = axisTextSize,
1549126536458:vjust = 1, hjust = 1, color = textColor),
1549126536461:axis.text.y      = element_text(size = axisTextSize, color = textColor),
1549126536463:axis.ticks       = element_line(size = lineSize),
1549126536466:axis.title.x     = element_text(margin = margin(6,0,8,0, "mm")),
1549126536470:axis.title.y     = element_text(margin = margin(0,6,0,0, "mm")),
1549126536472:legend.position  = "none",
1549126536473:panel.border     = element_rect(size = lineSize),
1549126536475:panel.background = element_rect(fill = panelColor),
1549126536477:panel.grid       = element_line(size = lineSize, colour = gridColor),
1549126536478:panel.grid.minor = element_blank(),
1549126536480:plot.margin      = margin(10,10,0,10, "mm"),
1549126536482:panel.spacing    = unit(4, "mm"),
1549126536484:plot.caption     = element_text(size = baseTextSize * 0.7, face = "italic"),
1549126536485:plot.title       = element_text(hjust = 0.5),
1549126536487:plot.subtitle    = element_text(hjust = 0.5),
1549126536489:strip.background = element_rect(size = lineSize),
1549126536491:strip.text       = element_text(size = stripTextSize),
1549126536493:text             = element_text(size = baseTextSize)
1549126536494:)
1549126536497:)
1549126536500:# Palette definition ------------------------------------------------------
1549126536502:# colourCount <- length(unique(inData$Locus))
1549126536504:colourCount <- nLoci
1549126536506:# colourCount  <- length(unique(data.to.plot$Allele))
1549126536509:# fillPalette  <- colorRampPalette(brewer.pal(8, "Dark2"))(colourCount)
1549126536511:# fillPalette  <- colorRampPalette(brewer.pal(12, "Paired"))(colourCount)
1549126536513:# fillPalette  <- colorRampPalette(brewer.pal(9, "Set1"))(colourCount)
1549126536515:# fillPalette  <- colorRampPalette(pal_npg("nrc")(10))(colourCount)
1549126536517:# fillPalette  <- colorRampPalette(pal_d3("category20")(20))(colourCount)
1549126536518:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549126536520:borderPalette <- darkColors(fillPalette, 0.6)
1549126536522:# library("scales"); show_col(fillPalette); show_col(borderPalette)
1549126536528:# # Depth plot -------------------------------------------------------------
1549126536530:# hFactor  <- 1.2
1549126536532:# wFactor  <- 4.8
1549126536534:# # if (nLoci == 1)
1549126536535:# #   hFactor <- 1.4;
1549126536539:# height <- (nLoci * hFactor) + 2 + 0.1 + ((nLoci-1)*0.05)
1549126536541:# width  <- nAlleles * wFactor
1549126536542:# # Generate plot
1549126536544:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549126536546:# # Save plot
1549126536547:# out.filename <- paste0(out.prefix, ".", out.format)
1549126536549:# if (out.format == "png") {
1549126536551:# 	ggsave(filename = out.filename, plot = depth.plot,
1549126536553:# 				 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549126536555:# } else {
1549126536556:# 	ggsave(filename = out.filename, plot = depth.plot,
1549126536558:# 				 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549126536560:# }
1549126536563:# Depth plot -------------------------------------------------------------
1549126536565:# <<<<<<< HEAD
1549126536567:#   rowsPerPage <- 7
1549126536569:#   hFactor     <- 1.2
1549126536570:#   wFactor     <- 4.8
1549126536572:#   rows        <- nLoci
1549126536574:#   if (nLoci > rowsPerPage)
1549126536576:#     rows <- rowsPerPage;
1549126536579:#   height <- (rows * hFactor) + 2 + 0.1 + ((rows-1)*0.05)
1549126536581:#   width  <- nAlleles * wFactor
1549126536583:#
1549126536585:#   loci     <- unique(data.to.plot$Locus)
1549126536588:#   lociList <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549126536590:#   lociList <- split(loci, ceiling(seq_along(loci)/3))
1549126536592:#   plotList <- list()
1549126536595:#   for (lociSet in lociList) {
1549126536597:#   	print(lociSet)
1549126536600:#   	subset.to.plot <- data.to.plot %>%
1549126536602:#   		filter(Locus %in% lociSet)
1549126536605:#   	labelsData <- getLabelsData(subset.to.plot)
1549126536607:#   	currentPlot <- plotDepth(subset.to.plot, labelsData, fillPalette, borderPalette)
1549126536609:#   	plotList <- c(plotList, list(currentPlot))
1549126536612:#   	# print(currentPlot)
1549126536614:#   	# print(unique(subset.to.plot$Locus))
1549126536616:#   }
1549126536619:#  	length(plotList)
1549126536621:#
1549126536624:#  	if (out.format == "pdf") {
1549126536626:#  		out.filename <- paste(out.prefix, out.format, sep = ".")
1549126536628:#  		pdf(out.filename)
1549126536631:#  		for (i in seq_along(plotList)) {
1549126536633:#  			nLociToPlot <- length(lociList[[i]])
1549126536635:#  			height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1549126536638:#  			width  <- nAlleles * wFactor
1549126536640:#  			# out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549126536643:#  			# print(out.filename)
1549126536645:#  			print(plotList[[i]])
1549126536648:#  		}
1549126536651:#  		dev.off()
1549126536653:#
1549126536656:#  	}
1549126536659:#  	for (i in seq_along(plotList)) {
1549126536661:#  		nLociToPlot <- length(lociList[[i]])
1549126536664:#  		height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1549126536667:#  		width  <- nAlleles * wFactor
1549126536670:#  		out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549126536673:#  		print(out.filename)
1549126536675:#  		pdf(out.filename, width = width, height = height)
1549126536678:#  		print(plotList[[i]])
1549126536683:#  		dev.off()
1549126536686:#  	}
1549126536688:#  	else if (out.format == "png") {
1549126536691:#  		ggsave(filename = out.filename, plot = depth.plot,
1549126536694:#  					 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549126536696:#  	} else {
1549126536699:#  		ggsave(filename = out.filename, plot = depth.plot,
1549126536702:#  					 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549126536704:#  	}
1549126536707:#
1549126536709:#  	plot_grid()
1549126536712:#  	# Generate plot
1549126536714:#   # (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549126536719:# =======
1549126536721:hFactor        <- 1.6
1549126536723:wFactor        <- 4.8
1549126536726:plotTitlesSize <- 2.39
1549126536729:getPlotHeight <- function(rows, extras){
1549126536731:# loci + titles and foot note + strip + space between locus
1549126536734:(rows*hFactor) + extras + ((rows-1)*0.157) #in
1549126536736:}
1549126536742:rowsPerPage <- 3
1549126536744:width  <- nAlleles * wFactor
1549126536747:height <- getPlotHeight(rowsPerPage, plotTitlesSize)
1549126536750:loci   <- unique(data.to.plot$Locus)
1549126536752:sets   <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549126536758:plots <- lapply(sets, function(set, dp=data.to.plot, rp=rowsPerPage){
1549126536760:subsetToPlot <- dp %>% filter(Locus %in% set)
1549126536763:ld    <- getLabelsData(subsetToPlot)
1549126536766:(p    <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette))
1549126536769:nLoci <- length(set)
1549126536771:if(nLoci < rp){
1549126536774:hlay    <- matrix(c(1, NA))
1549126536777:total   <- getPlotHeight(rp, plotTitlesSize)
1549126536779:cHeight <- getPlotHeight(nLoci, plotTitlesSize)
1549126536781:blank   <- getPlotHeight(rp-nLoci, 0)
1549126536783:heights <- matrix(c(cHeight/total, blank/total))
1549126536785:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549126536787:}
1549126536789:p
1549126536791:})
1549126536795:if (out.format == "pdf") {
1549126536797:out.filename <- paste(out.prefix, out.format, sep = ".")
1549126536799:ml <- marrangeGrob(plots, nrow=1, ncol=1, padding = unit(10, "mm"),
1549126536801:top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549126536803:ggsave(filename = out.filename, plot = ml,
1549126536804:width  = width, height = getPlotHeight(rowsPerPage), dpi = 400, limitsize = FALSE)
1549126536807:}
1549126536809:else {
1549126536811:for (i in seq_along(plots)) {
1549126536814:out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549126536817:ggsave(filename = out.filename, plot = plots[[i]],
1549126536819:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549126536821:}
1549126536824:}
1549126536830:# # Depth distribution plot ------------------------------------------------
1549126536833:# hFactor  <- 3
1549126536836:# wFactor  <- 2
1549126536838:# if (nLoci == 1)
1549126536840:#   hFactor <- 3.5
1549126536842:# height       <- nLoci * hFactor
1549126536844:# width        <- nAlleles * wFactor
1549126536846:# # Generate plot
1549126536849:# (dist.plot <- plotDepthDist(data.to.plot, labelsData, fillPalette, borderPalette))
1549126536851:# # Save plot
1549126536853:# out.filename <- paste0(out.prefix, "_dist.", out.format)
1549126536855:# if (out.format == "png") {
1549126536857:#   ggsave(filename = out.filename, plot = dist.plot,
1549126536859:#          width  = width, height = height, type = "cairo-png", dpi = 300)
1549126536861:# } else {
1549126536863:#   ggsave(filename = out.filename, plot = dist.plot,
1549126536865:#          width  = width, height = height, dpi = 400)
1549126536868:# }
1549126536872:cat("Done! \n")
1549126536876:# Code core - End ---------------------------------------------------------
1549126536878:}
1549126659463:#!/usr/bin/env Rscript
1549126659464:# ##############################################################################
1549126659465:#  Author:   Hector Fabio Espitia-Navarro
1549126659465:#            Georgia Institute of Technology
1549126659466:#  Version:  1.0
1549126659466:#  Date:     01/19/2019
1549126659466:# ##############################################################################
1549126659467:# Install required packages -----------------------------------------------
1549126659468:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549126659469:if(!file.exists(personal.lib.path))
1549126659469:dir.create(personal.lib.path)
1549126659470:printMessage <- function(message, verbose){
1549126659471:if(verbose)
1549126659471:cat(message)
1549126659472:}
1549126659473:# crayon::bold("Hola")
1549126659473:installAndLoadPackages <- function(pkg, verbose){
1549126659474:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1549126659474:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1549126659474:printMessage("Done!\n", verbose)
1549126659475:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549126659475:if (length(new.pkg)) {
1549126659475:printMessage("Installing new packages... ", verbose)
1549126659476:install.packages(new.pkg, dependencies = TRUE,
1549126659476:repos="http://cran.rstudio.com/",
1549126659476:lib = personal.lib.path)
1549126659477:printMessage("Done!\n", verbose)
1549126659477:}
1549126659478:printMessage("Loading required packages... ", verbose)
1549126659478:sapply(pkg, function(x){
1549126659479:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549126659479:})
1549126659480:printMessage("Done!\n", verbose)
1549126659480:}
1549126659481:# github.related.packages <- c("devtools", "Rcpp")
1549126659481:# packages <- c("argparser", "tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite")
1549126659482:packages <- c("tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite", "gridExtra")
1549126659482:# installAndLoadPackages(packages, verbose = TRUE)
1549126659482:installAndLoadPackages("argparser", verbose = FALSE)
1549126659518:# Command line arguments processing ---------------------------------------
1549126659519:# Get script name
1549126659519:initial.options <- commandArgs(trailingOnly = FALSE)
1549126659520:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1549126659521:# Process command line arguments
1549126659521:# Create a parser
1549126659522:p <- arg_parser("This script generates k-mer depth plots using a depth file generated by the\033[1mSTing typer\033[22m tool (-t option).",
1549126659522:name = script.name)
1549126659525:# Add Positional arguments (required)
1549126659525:p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
1549126659526:# Add options
1549126659527:p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1549126659528:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1549126659529:default = "kmer_depth")
1549126659530:p <- add_argument(p, "--sample_name", help = "Sample name.",
1549126659530:default = "input file's name")
1549126659532:p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'",
1549126659532:default = "pdf")
1549126659533:# Initialization of variables ---------------------------------------------
1549126659534:# Values to test the script using RStudio
1549126659534:script.home <- "/home/hspitia/projects/sting"
1549126659535:# inputFile   <- paste(script.home, "ERR036060.depth.2.tsv", sep = "/")
1549126659535:# geneFile    <- paste(script.home, "rmlst_failed_loci.txt", sep = "/")
1549126659536:inputFile   <- paste(script.home, "depth.tsv", sep = "/")
1549126659536:geneFile    <- paste(script.home, "loci.txt", sep = "/")
1549126659537:out.format  <- "png"
1549126659538:out.prefix  <- "kmer_ext_depth"
1549126659539:sample.name <- basename(inputFile)
1549126659539:# Parse command line arguments
1549126659540:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1549126659562:argv <- list()
1549126659563:if(command.line) {
1549126659563:argv <- parse_args(p)
1549126659564:} else {
1549126659564:argv <- parse_args(p, list(inputFile,
1549126659564:# "--gene_file", geneFile,
1549126659565:"--prefix", out.prefix,
1549126659565:"--sample_name", sample.name,
1549126659565:"--format", out.format))
1549126659566:}
1549126659567:# Get argument values from the command line
1549126659567:input.file  <- argv$input_file
1549126659568:gene.file   <- argv$gene_file
1549126659568:out.format  <- argv$format
1549126659569:out.prefix  <- argv$prefix
1549126659569:sample.name <- argv$sample_name
1549126659570:# if (sample.name == "")
1549126659570:if (sample.name == "input file's name")
1549126659570:sample.name <- basename(input.file)
1549126659571:# Function to check if file exists ----------------------------------------
1549126659571:CheckFileExists <- function(file.list) {
1549126659571:non.exist.files <- !file.exists(file.list)
1549126659572:if(any(non.exist.files)) {
1549126659572:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549126659572:}
1549126659573:}
1549126659573:# Check for input files ---------------------------------------------------
1549126659573:files.to.check <- c(input.file)
1549126659574:error.message  <- CheckFileExists(files.to.check)
1549126659575:if(!is.null(error.message)){
1549126659575:stop(error.message)
1549126659575:} else {
1549126659575:# Code core - Begin -------------------------------------------------------
1549126659576:installAndLoadPackages(packages, verbose = TRUE)
1549126659576:# FUNCTIONS:
1549126659576:# Function to dark a list of colors ---------------------------------------
1549126659577:darkColors <- function(palette, level){
1549126659577:rgbColors <- as.data.frame(t(as.data.frame(lapply(as.data.frame(t(col2rgb(palette))),
1549126659577:function(x) { round(x * level)}))))
1549126659578:unname(sapply(rgbColors, function(x){ rgb(x[1], x[2], x[3], maxColorValue=255) }))
1549126659578:}
1549126659578:# Function for plotting k-mer depth ----------------------------------------
1549126659579:plotDepth <- function(dataToPlot, labelsData, fillColors, borderColors) {
1549126659579:max.x       <- max(dataToPlot$Position)
1549126659580:max.y       <- max(dataToPlot$kmerDepth)
1549126659580:x.limits    <- seq(0, max.x, 100)
1549126659581:y.limits    <- seq(0, max.y, 20)
1549126659581:nTopAlleles <- length(unique(dataToPlot$N))
1549126659582:d.plot <- ggplot(data = dataToPlot, aes(x = Position, y = kmerDepth),
1549126659582:size = 0.2) +
1549126659583:geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1549126659584:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1549126659584:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1549126659585:# scale_color_manual(values = getPalette) +
1549126659586:scale_color_manual(values = borderColors) +
1549126659586:scale_fill_manual(values = fillColors) +
1549126659587:geom_text(data = labelsData,
1549126659587:# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1549126659587:# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1549126659588:aes(x = Length, y = info.y * 0.5, group = Locus,
1549126659589:hjust = 0,
1549126659589:label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1549126659590:show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1549126659591:nudge_x = -(max.x*0.025)
1549126659591:) +
1549126659592:geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1549126659593:alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1549126659594:# geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1549126659594:size = annotTextSize * 1.05, color = "#333333") +
1549126659597:geom_text(data = labelsData,
1549126659598:parse = TRUE,
1549126659599:aes(x = info.x, y = info.y,
1549126659600:label = paste0("{{{{italic(s)==", format(round(Score, 2), nsmall = 2),
1549126659601:"*~~~italic(hat(f)[k])} ==", format(round(NormKmerCount, 2), nsmall = 2),
1549126659602:"*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1549126659602:"*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1549126659603:"~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1549126659603:hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1549126659604:facet_grid(Locus ~ N, scales = "free_y") +
1549126659605:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1549126659605:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1549126659606:theme_bw() +
1549126659606:plotTheme +
1549126659607:labs(title    = expression(italic("k")*"-mer depth"),
1549126659607:subtitle = paste("Top", nTopAlleles, "alleles/genes on sample", sample.name),
1549126659608:x        = "Position along sequence (bp)",
1549126659609:y        = expression(paste(italic(k), "-mer depth")),
1549126659609:# caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1549126659611:caption  = expression(paste(italic("s"),": score;  ",
1549126659612:italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1549126659613:italic("c"),": coverage;  ",
1549126659615:italic(sigma), ": standard deviation;  ",
1549126659616:italic(bar(d)), ": average depth"), sep = "")
1549126659617:)
1549126659618:# guides(fill  = guide_legend(title  ="Allele"), color = FALSE) +
1549126659619:d.plot
1549126659619:}
1549126659620:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549126659621:# Function for plotting k-mer depth distributions as box plots ------------
1549126659622:plotDepthDist <- function(data.to.plot, labelsData, fillColors, borderColors){
1549126659622:dist.plot <- ggplot(data.to.plot, aes(x = AlPos, y = kmerDepth)) +
1549126659623:geom_jitter(position = position_jitter(width=.3), aes(color = Locus),
1549126659624:alpha = 0.4, size = 1.2, shape = 16) +
1549126659625:geom_boxplot(alpha = 0.7, size = 0.5, aes(fill = Locus, color = Locus)) +
1549126659626:geom_text(data = labelsData, size = 4, hjust = "center",
1549126659627:aes(x = N,#(N - 0.5),
1549126659628:y = info.y * 1.05,
1549126659628:label = Allele),
1549126659629:color = "#333333") +
1549126659630:geom_text(data = labelsData, size = 3, hjust = "center",
1549126659631:parse = TRUE,
1549126659632:aes(x = N,#(N - 0.4),
1549126659633:# y = info.y * 0.08,
1549126659634:y = info.y * 0.96,
1549126659634:label = paste0("sigma ==",format(round(sd, 1), nsmall = 1))),
1549126659635:color = "#333333") +
1549126659636:geom_point(data = labelsData,
1549126659637:shape = 23, fill = "white",
1549126659638:aes(x = N, y = meanDepth)) +
1549126659639:facet_grid(Locus ~ ., scales = "free_y") +
1549126659640:scale_color_manual(values = borderColors) +
1549126659641:scale_fill_manual(values = fillColors) +
1549126659642:labs(title = expression(paste(italic("k"), "-mer depth distribution")),
1549126659643:subtitle = basename(input.file),
1549126659644:x        = "Allele Ranking",
1549126659645:y        = expression(paste(italic(k), "-mer depth")),
1549126659646:caption  = expression(paste(italic(sigma), ": standard deviation")))+#,"sd: standard deviation") +
1549126659647:theme_bw() +
1549126659648:plotTheme +
1549126659649:theme(axis.text.x   = element_text(angle = 0, size = axisTextSize,
1549126659650:vjust = 1, hjust = 0.5, color = textColor))
1549126659651:dist.plot
1549126659652:}
1549126659653:# Function to get data for annotations ------------------------------------
1549126659654:getLabelsData <- function(data.to.plot) {
1549126659655:max.x <- max(data.to.plot$Position)
1549126659656:max.y <- max(data.to.plot$kmerDepth)
1549126659658:nLoci    <- length(unique(data.to.plot$Locus))
1549126659659:nAlleles <- length(unique(data.to.plot$N))
1549126659661:alleles     <- unique(data.to.plot$Allele)
1549126659662:loci        <- as.character(unique(data.to.plot$Locus))
1549126659663:lociLabels  <- c()
1549126659664:name.x      <- c()
1549126659665:name.y      <- c()
1549126659666:info.x      <- c()
1549126659667:info.y      <- c()
1549126659668:covs        <- c()
1549126659669:avgDepths   <- c()
1549126659670:meanDepth.x <- c()
1549126659671:meanDepth.y <- c()
1549126659672:for (i in loci) {
1549126659674:lociLabels <- c(lociLabels, rep(i, nAlleles))
1549126659675:}
1549126659676:for (allele in alleles) {
1549126659677:locus       <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1549126659678:maxPos      <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549126659679:maxDepth    <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549126659680:# name.x      <- c(name.x, (maxPos / 2))
1549126659681:name.x      <- c(name.x, (max.x / 2))
1549126659683:name.y      <- c(name.y, (maxDepth * 0.25))
1549126659684:info.x      <- c(info.x, max.x * 0.02)
1549126659685:info.y      <- c(info.y, maxDepth * 1.5)
1549126659686:covs        <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549126659687:avgDepths   <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549126659688:}
1549126659690:labelsData <- data.frame(Allele = alleles,
1549126659691:name.x = name.x,
1549126659692:name.y = name.y,
1549126659693:info.x = info.x,
1549126659694:info.y = info.y,
1549126659696:meanDepth = avgDepths,
1549126659698:N = rep(unique(data.to.plot$N), nLoci),
1549126659700:Locus = lociLabels,
1549126659701:cov = covs
1549126659703:) %>%
1549126659705:left_join(data.to.plot %>%
1549126659707:group_by(Allele, Length, NormKmerCount, Score) %>%
1549126659709:summarise(sd = sd(kmerDepth)),
1549126659711:by = c("Allele" = "Allele")) #%>%
1549126659713:# mutate(
1549126659714:#   info   = paste0("cov=", format(round(covs, 1), nsmall = 1), "%   ",
1549126659716:#                   paste0("ad=", format(round(avgDepths, 1), nsmall = 1)),
1549126659718:#                   "   ",
1549126659720:#                   # expression(paste(italic(sigma), "=",format(round(sd, 1), nsmall = 1))))
1549126659722:#                   paste0("sd=", format(round(sd, 1), nsmall = 1))
1549126659724:#   )
1549126659726:# )
1549126659727:labelsData
1549126659729:}
1549126659733:# Check for genes/loci file to filter loci to plot  -----------------------
1549126659735:loci.to.plot <- c()
1549126659736:# if (!is.null(gene.file)|| gene.file != "") {
1549126659738:if (!is.null(gene.file) && !is.na(gene.file) && gene.file != "") {
1549126659740:error.message <- CheckFileExists(gene.file)
1549126659741:if (!is.null(error.message)){
1549126659742:cat("Warning:")
1549126659744:cat(error.message)
1549126659745:cat("  The plotting process will continue without filtering genes/loci.\n")
1549126659746:} else {
1549126659748:loci.to.plot <- scan(gene.file, character(), quiet = TRUE)
1549126659749:}
1549126659750:}
1549126659753:# Data processing and plotting --------------------------------------------
1549126659754:cat("Plotting depths... ")
1549126659755:options(stringsAsFactors = T, readr.num_columns = 0)
1549126659758:# Load data
1549126659759:inData <- read_tsv(input.file)
1549126659762:# inData <- read.delim(input.file)
1549126659765:# colnames(inData) <- c("Allele", "Position", "k-mer Depth", "Weighted k-mer Depth")
1549126659766:colnames(inData) <- c("N", "Locus", "Allele", "Position", "kmerDepth",
1549126659768:"NormKmerCount", "Coverage", "Score", "AverageKmerDepth")
1549126659771:# Transform data
1549126659772:data.to.plot <- inData %>%
1549126659773:left_join(inData %>%
1549126659775:group_by(Allele) %>%
1549126659776:summarise(Length = n()), by = "Allele") %>%
1549126659778:arrange(Locus, N) %>%
1549126659779:mutate(
1549126659781:AlPos = factor(N, levels = unique(.$N)),
1549126659782:Allele = factor(Allele, levels = unique(inData$Allele)))
1549126659783:# Filtering loci/genes from genes_file input param
1549126659785:if (length(loci.to.plot) > 0) {
1549126659786:data.to.plot <- data.to.plot %>%
1549126659788:filter(Locus %in% loci.to.plot)
1549126659789:}
1549126659792:longestLocusNameLength <- max(str_length(as.character(unique(inData$Locus))))
1549126659794:# labelsData <- getLabelsData(data.to.plot)
1549126659795:nLoci      <- length(unique(data.to.plot$Locus))
1549126659797:nAlleles   <- length(unique(data.to.plot$N))
1549126659799:# Theme-related variable definition ---------------------------------------
1549126659801:annotLinetype         <- "solid"
1549126659803:annotTextSize         <- 4
1549126659804:axisColor             <- "#000000"
1549126659806:axisTextSize          <- 12
1549126659807:barAnnotTextSize      <- 4
1549126659809:baseTextSize          <- 14
1549126659810:gridColor             <- "#e0e0e0"
1549126659812:lineSize              <- 0.3
1549126659813:panelColor            <- "#fff4e0"
1549126659815:panelColor            <- "#f2efe6"
1549126659816:# panelColor            <- "#ffffff"
1549126659818:# stripBackground       <- "#cccccc"
1549126659819:stripTextSize         <- axisTextSize
1549126659821:if (longestLocusNameLength > 12)
1549126659822:stripTextSize       <- stripTextSize * 0.6
1549126659824:textColor             <- "#000000"
1549126659825:# baseFontFamily        <- "Arial"
1549126659828:# Custom theme definition for plots ---------------------------------------
1549126659830:plotTheme <- list(
1549126659832:theme(
1549126659833:axis.text.x      = element_text(angle = 50, size = axisTextSize,
1549126659835:vjust = 1, hjust = 1, color = textColor),
1549126659836:axis.text.y      = element_text(size = axisTextSize, color = textColor),
1549126659838:axis.ticks       = element_line(size = lineSize),
1549126659840:axis.title.x     = element_text(margin = margin(6,0,8,0, "mm")),
1549126659843:axis.title.y     = element_text(margin = margin(0,6,0,0, "mm")),
1549126659845:legend.position  = "none",
1549126659848:panel.border     = element_rect(size = lineSize),
1549126659852:panel.background = element_rect(fill = panelColor),
1549126659854:panel.grid       = element_line(size = lineSize, colour = gridColor),
1549126659857:panel.grid.minor = element_blank(),
1549126659858:plot.margin      = margin(10,10,0,10, "mm"),
1549126659860:panel.spacing    = unit(4, "mm"),
1549126659862:plot.caption     = element_text(size = baseTextSize * 0.7, face = "italic"),
1549126659864:plot.title       = element_text(hjust = 0.5),
1549126659866:plot.subtitle    = element_text(hjust = 0.5),
1549126659867:strip.background = element_rect(size = lineSize),
1549126659869:strip.text       = element_text(size = stripTextSize),
1549126659871:text             = element_text(size = baseTextSize)
1549126659872:)
1549126659876:)
1549126659880:# Palette definition ------------------------------------------------------
1549126659883:# colourCount <- length(unique(inData$Locus))
1549126659885:colourCount <- nLoci
1549126659888:# colourCount  <- length(unique(data.to.plot$Allele))
1549126659890:# fillPalette  <- colorRampPalette(brewer.pal(8, "Dark2"))(colourCount)
1549126659893:# fillPalette  <- colorRampPalette(brewer.pal(12, "Paired"))(colourCount)
1549126659895:# fillPalette  <- colorRampPalette(brewer.pal(9, "Set1"))(colourCount)
1549126659898:# fillPalette  <- colorRampPalette(pal_npg("nrc")(10))(colourCount)
1549126659900:# fillPalette  <- colorRampPalette(pal_d3("category20")(20))(colourCount)
1549126659903:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549126659905:borderPalette <- darkColors(fillPalette, 0.6)
1549126659908:# library("scales"); show_col(fillPalette); show_col(borderPalette)
1549126659928:# # Depth plot -------------------------------------------------------------
1549126659931:# hFactor  <- 1.2
1549126659934:# wFactor  <- 4.8
1549126659936:# # if (nLoci == 1)
1549126659938:# #   hFactor <- 1.4;
1549126659942:# height <- (nLoci * hFactor) + 2 + 0.1 + ((nLoci-1)*0.05)
1549126659945:# width  <- nAlleles * wFactor
1549126659948:# # Generate plot
1549126659950:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549126659953:# # Save plot
1549126659956:# out.filename <- paste0(out.prefix, ".", out.format)
1549126659958:# if (out.format == "png") {
1549126659961:# 	ggsave(filename = out.filename, plot = depth.plot,
1549126659964:# 				 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549126659966:# } else {
1549126659969:# 	ggsave(filename = out.filename, plot = depth.plot,
1549126659971:# 				 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549126659974:# }
1549126659979:# Depth plot -------------------------------------------------------------
1549126659982:# <<<<<<< HEAD
1549126659984:#   rowsPerPage <- 7
1549126659987:#   hFactor     <- 1.2
1549126659989:#   wFactor     <- 4.8
1549126659992:#   rows        <- nLoci
1549126659994:#   if (nLoci > rowsPerPage)
1549126659996:#     rows <- rowsPerPage;
1549126659999:#   height <- (rows * hFactor) + 2 + 0.1 + ((rows-1)*0.05)
1549126660001:#   width  <- nAlleles * wFactor
1549126660002:#
1549126660004:#   loci     <- unique(data.to.plot$Locus)
1549126660006:#   lociList <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549126660008:#   lociList <- split(loci, ceiling(seq_along(loci)/3))
1549126660010:#   plotList <- list()
1549126660012:#   for (lociSet in lociList) {
1549126660014:#   	print(lociSet)
1549126660015:#   	subset.to.plot <- data.to.plot %>%
1549126660019:#   		filter(Locus %in% lociSet)
1549126660021:#   	labelsData <- getLabelsData(subset.to.plot)
1549126660022:#   	currentPlot <- plotDepth(subset.to.plot, labelsData, fillPalette, borderPalette)
1549126660024:#   	plotList <- c(plotList, list(currentPlot))
1549126660026:#   	# print(currentPlot)
1549126660028:#   	# print(unique(subset.to.plot$Locus))
1549126660030:#   }
1549126660031:#  	length(plotList)
1549126660033:#
1549126660035:#  	if (out.format == "pdf") {
1549126660037:#  		out.filename <- paste(out.prefix, out.format, sep = ".")
1549126660039:#  		pdf(out.filename)
1549126660040:#  		for (i in seq_along(plotList)) {
1549126660042:#  			nLociToPlot <- length(lociList[[i]])
1549126660044:#  			height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1549126660046:#  			width  <- nAlleles * wFactor
1549126660048:#  			# out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549126660049:#  			# print(out.filename)
1549126660051:#  			print(plotList[[i]])
1549126660053:#  		}
1549126660055:#  		dev.off()
1549126660057:#
1549126660058:#  	}
1549126660060:#  	for (i in seq_along(plotList)) {
1549126660062:#  		nLociToPlot <- length(lociList[[i]])
1549126660064:#  		height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1549126660066:#  		width  <- nAlleles * wFactor
1549126660067:#  		out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549126660069:#  		print(out.filename)
1549126660071:#  		pdf(out.filename, width = width, height = height)
1549126660073:#  		print(plotList[[i]])
1549126660075:#  		dev.off()
1549126660076:#  	}
1549126660078:#  	else if (out.format == "png") {
1549126660080:#  		ggsave(filename = out.filename, plot = depth.plot,
1549126660082:#  					 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549126660084:#  	} else {
1549126660085:#  		ggsave(filename = out.filename, plot = depth.plot,
1549126660087:#  					 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549126660089:#  	}
1549126660091:#
1549126660093:#  	plot_grid()
1549126660094:#  	# Generate plot
1549126660096:#   # (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549126660100:# =======
1549126660101:# hFactor        <- 1.6
1549126660103:wFactor        <- 4.8
1549126660105:plotTitlesSize <- 2.39
1549126660107:getPlotHeight <- function(rows, extras){
1549126660109:hFactor <- 1.6
1549126660111:if(rows == 1)
1549126660113:hFactor <- 1.7
1549126660114:# loci + titles and foot note + strip + space between locus
1549126660116:(rows*hFactor) + extras + ((rows-1)*0.157) #in
1549126660118:}
1549126660122:rowsPerPage <- 3
1549126660123:width  <- nAlleles * wFactor
1549126660125:height <- getPlotHeight(rowsPerPage, plotTitlesSize)
1549126660127:loci   <- unique(data.to.plot$Locus)
1549126660129:sets   <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549126660132:plots <- lapply(sets, function(set, dp=data.to.plot, rp=rowsPerPage){
1549126660134:subsetToPlot <- dp %>% filter(Locus %in% set)
1549126660136:ld    <- getLabelsData(subsetToPlot)
1549126660137:(p    <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette))
1549126660139:nLoci <- length(set)
1549126660141:if(nLoci < rp){
1549126660143:hlay    <- matrix(c(1, NA))
1549126660144:total   <- getPlotHeight(rp, plotTitlesSize)
1549126660146:cHeight <- getPlotHeight(nLoci, plotTitlesSize)
1549126660148:blank   <- getPlotHeight(rp-nLoci, 0)
1549126660150:heights <- matrix(c(cHeight/total, blank/total))
1549126660152:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549126660153:}
1549126660155:p
1549126660157:})
1549126660162:if (out.format == "pdf") {
1549126660166:out.filename <- paste(out.prefix, out.format, sep = ".")
1549126660168:ml <- marrangeGrob(plots, nrow=1, ncol=1, padding = unit(10, "mm"),
1549126660171:top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549126660174:ggsave(filename = out.filename, plot = ml,
1549126660177:width  = width, height = getPlotHeight(rowsPerPage), dpi = 400, limitsize = FALSE)
1549126660180:}
1549126660183:else {
1549126660186:for (i in seq_along(plots)) {
1549126660189:out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549126660192:ggsave(filename = out.filename, plot = plots[[i]],
1549126660195:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549126660198:}
1549126660200:}
1549126660207:# # Depth distribution plot ------------------------------------------------
1549126660210:# hFactor  <- 3
1549126660213:# wFactor  <- 2
1549126660216:# if (nLoci == 1)
1549126660219:#   hFactor <- 3.5
1549126660222:# height       <- nLoci * hFactor
1549126660225:# width        <- nAlleles * wFactor
1549126660228:# # Generate plot
1549126660231:# (dist.plot <- plotDepthDist(data.to.plot, labelsData, fillPalette, borderPalette))
1549126660234:# # Save plot
1549126660237:# out.filename <- paste0(out.prefix, "_dist.", out.format)
1549126660240:# if (out.format == "png") {
1549126660243:#   ggsave(filename = out.filename, plot = dist.plot,
1549126660246:#          width  = width, height = height, type = "cairo-png", dpi = 300)
1549126660249:# } else {
1549126660252:#   ggsave(filename = out.filename, plot = dist.plot,
1549126660255:#          width  = width, height = height, dpi = 400)
1549126660258:# }
1549126660264:cat("Done! \n")
1549126660270:# Code core - End ---------------------------------------------------------
1549126660272:}
1549126691649:#!/usr/bin/env Rscript
1549126691649:# ##############################################################################
1549126691650:#  Author:   Hector Fabio Espitia-Navarro
1549126691650:#            Georgia Institute of Technology
1549126691650:#  Version:  1.0
1549126691650:#  Date:     01/19/2019
1549126691651:# ##############################################################################
1549126691653:# Install required packages -----------------------------------------------
1549126691653:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549126691654:if(!file.exists(personal.lib.path))
1549126691655:dir.create(personal.lib.path)
1549126691656:printMessage <- function(message, verbose){
1549126691657:if(verbose)
1549126691657:cat(message)
1549126691658:}
1549126691659:# crayon::bold("Hola")
1549126691659:installAndLoadPackages <- function(pkg, verbose){
1549126691660:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1549126691660:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1549126691661:printMessage("Done!\n", verbose)
1549126691662:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549126691662:if (length(new.pkg)) {
1549126691663:printMessage("Installing new packages... ", verbose)
1549126691664:install.packages(new.pkg, dependencies = TRUE,
1549126691664:repos="http://cran.rstudio.com/",
1549126691665:lib = personal.lib.path)
1549126691666:printMessage("Done!\n", verbose)
1549126691666:}
1549126691667:printMessage("Loading required packages... ", verbose)
1549126691668:sapply(pkg, function(x){
1549126691668:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549126691669:})
1549126691669:printMessage("Done!\n", verbose)
1549126691670:}
1549126691671:# github.related.packages <- c("devtools", "Rcpp")
1549126691671:# packages <- c("argparser", "tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite")
1549126691672:packages <- c("tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite", "gridExtra")
1549126691673:# installAndLoadPackages(packages, verbose = TRUE)
1549126691673:installAndLoadPackages("argparser", verbose = FALSE)
1549126691709:# Command line arguments processing ---------------------------------------
1549126691709:# Get script name
1549126691710:initial.options <- commandArgs(trailingOnly = FALSE)
1549126691710:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1549126691711:# Process command line arguments
1549126691711:# Create a parser
1549126691711:p <- arg_parser("This script generates k-mer depth plots using a depth file generated by the\033[1mSTing typer\033[22m tool (-t option).",
1549126691711:name = script.name)
1549126691713:# Add Positional arguments (required)
1549126691713:p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
1549126691714:# Add options
1549126691714:p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1549126691715:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1549126691716:default = "kmer_depth")
1549126691716:p <- add_argument(p, "--sample_name", help = "Sample name.",
1549126691717:default = "input file's name")
1549126691718:p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'",
1549126691718:default = "pdf")
1549126691719:# Initialization of variables ---------------------------------------------
1549126691719:# Values to test the script using RStudio
1549126691719:script.home <- "/home/hspitia/projects/sting"
1549126691720:# inputFile   <- paste(script.home, "ERR036060.depth.2.tsv", sep = "/")
1549126691720:# geneFile    <- paste(script.home, "rmlst_failed_loci.txt", sep = "/")
1549126691720:inputFile   <- paste(script.home, "depth.tsv", sep = "/")
1549126691721:geneFile    <- paste(script.home, "loci.txt", sep = "/")
1549126691721:out.format  <- "png"
1549126691722:out.prefix  <- "kmer_ext_depth"
1549126691722:sample.name <- basename(inputFile)
1549126691723:# Parse command line arguments
1549126691723:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1549126691724:argv <- list()
1549126691724:if(command.line) {
1549126691725:argv <- parse_args(p)
1549126691725:} else {
1549126691725:argv <- parse_args(p, list(inputFile,
1549126691725:# "--gene_file", geneFile,
1549126691726:"--prefix", out.prefix,
1549126691726:"--sample_name", sample.name,
1549126691726:"--format", out.format))
1549126691727:}
1549126691728:# Get argument values from the command line
1549126691728:input.file  <- argv$input_file
1549126691729:gene.file   <- argv$gene_file
1549126691730:out.format  <- argv$format
1549126691730:out.prefix  <- argv$prefix
1549126691731:sample.name <- argv$sample_name
1549126691731:# if (sample.name == "")
1549126691732:if (sample.name == "input file's name")
1549126691733:sample.name <- basename(input.file)
1549126691733:# Function to check if file exists ----------------------------------------
1549126691734:CheckFileExists <- function(file.list) {
1549126691735:non.exist.files <- !file.exists(file.list)
1549126691735:if(any(non.exist.files)) {
1549126691736:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549126691736:}
1549126691737:}
1549126691737:# Check for input files ---------------------------------------------------
1549126691738:files.to.check <- c(input.file)
1549126691739:error.message  <- CheckFileExists(files.to.check)
1549126691739:if(!is.null(error.message)){
1549126691740:stop(error.message)
1549126691740:} else {
1549126691740:# Code core - Begin -------------------------------------------------------
1549126691741:installAndLoadPackages(packages, verbose = TRUE)
1549126691741:# FUNCTIONS:
1549126691741:# Function to dark a list of colors ---------------------------------------
1549126691741:darkColors <- function(palette, level){
1549126691742:rgbColors <- as.data.frame(t(as.data.frame(lapply(as.data.frame(t(col2rgb(palette))),
1549126691742:function(x) { round(x * level)}))))
1549126691742:unname(sapply(rgbColors, function(x){ rgb(x[1], x[2], x[3], maxColorValue=255) }))
1549126691743:}
1549126691743:# Function for plotting k-mer depth ----------------------------------------
1549126691744:plotDepth <- function(dataToPlot, labelsData, fillColors, borderColors) {
1549126691744:max.x       <- max(dataToPlot$Position)
1549126691745:max.y       <- max(dataToPlot$kmerDepth)
1549126691745:x.limits    <- seq(0, max.x, 100)
1549126691745:y.limits    <- seq(0, max.y, 20)
1549126691746:nTopAlleles <- length(unique(dataToPlot$N))
1549126691746:d.plot <- ggplot(data = dataToPlot, aes(x = Position, y = kmerDepth),
1549126691747:size = 0.2) +
1549126691747:geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1549126691748:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1549126691748:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1549126691749:# scale_color_manual(values = getPalette) +
1549126691749:scale_color_manual(values = borderColors) +
1549126691750:scale_fill_manual(values = fillColors) +
1549126691750:geom_text(data = labelsData,
1549126691751:# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1549126691751:# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1549126691751:aes(x = Length, y = info.y * 0.5, group = Locus,
1549126691752:hjust = 0,
1549126691753:label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1549126691753:show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1549126691754:nudge_x = -(max.x*0.025)
1549126691754:) +
1549126691755:geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1549126691755:alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1549126691756:# geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1549126691756:size = annotTextSize * 1.05, color = "#333333") +
1549126691757:geom_text(data = labelsData,
1549126691757:parse = TRUE,
1549126691758:aes(x = info.x, y = info.y,
1549126691759:label = paste0("{{{{italic(s)==", format(round(Score, 2), nsmall = 2),
1549126691759:"*~~~italic(hat(f)[k])} ==", format(round(NormKmerCount, 2), nsmall = 2),
1549126691760:"*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1549126691761:"*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1549126691761:"~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1549126691762:hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1549126691763:facet_grid(Locus ~ N, scales = "free_y") +
1549126691764:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1549126691766:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1549126691767:theme_bw() +
1549126691767:plotTheme +
1549126691768:labs(title    = expression(italic("k")*"-mer depth"),
1549126691769:subtitle = paste("Top", nTopAlleles, "alleles/genes on sample", sample.name),
1549126691770:x        = "Position along sequence (bp)",
1549126691770:y        = expression(paste(italic(k), "-mer depth")),
1549126691771:# caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1549126691773:caption  = expression(paste(italic("s"),": score;  ",
1549126691774:italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1549126691775:italic("c"),": coverage;  ",
1549126691777:italic(sigma), ": standard deviation;  ",
1549126691778:italic(bar(d)), ": average depth"), sep = "")
1549126691779:)
1549126691780:# guides(fill  = guide_legend(title  ="Allele"), color = FALSE) +
1549126691780:d.plot
1549126691781:}
1549126691782:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549126691783:# Function for plotting k-mer depth distributions as box plots ------------
1549126691783:plotDepthDist <- function(data.to.plot, labelsData, fillColors, borderColors){
1549126691784:dist.plot <- ggplot(data.to.plot, aes(x = AlPos, y = kmerDepth)) +
1549126691785:geom_jitter(position = position_jitter(width=.3), aes(color = Locus),
1549126691786:alpha = 0.4, size = 1.2, shape = 16) +
1549126691787:geom_boxplot(alpha = 0.7, size = 0.5, aes(fill = Locus, color = Locus)) +
1549126691788:geom_text(data = labelsData, size = 4, hjust = "center",
1549126691788:aes(x = N,#(N - 0.5),
1549126691789:y = info.y * 1.05,
1549126691790:label = Allele),
1549126691791:color = "#333333") +
1549126691792:geom_text(data = labelsData, size = 3, hjust = "center",
1549126691793:parse = TRUE,
1549126691793:aes(x = N,#(N - 0.4),
1549126691794:# y = info.y * 0.08,
1549126691795:y = info.y * 0.96,
1549126691796:label = paste0("sigma ==",format(round(sd, 1), nsmall = 1))),
1549126691797:color = "#333333") +
1549126691798:geom_point(data = labelsData,
1549126691799:shape = 23, fill = "white",
1549126691800:aes(x = N, y = meanDepth)) +
1549126691801:facet_grid(Locus ~ ., scales = "free_y") +
1549126691801:scale_color_manual(values = borderColors) +
1549126691802:scale_fill_manual(values = fillColors) +
1549126691803:labs(title = expression(paste(italic("k"), "-mer depth distribution")),
1549126691804:subtitle = basename(input.file),
1549126691805:x        = "Allele Ranking",
1549126691806:y        = expression(paste(italic(k), "-mer depth")),
1549126691807:caption  = expression(paste(italic(sigma), ": standard deviation")))+#,"sd: standard deviation") +
1549126691808:theme_bw() +
1549126691809:plotTheme +
1549126691810:theme(axis.text.x   = element_text(angle = 0, size = axisTextSize,
1549126691811:vjust = 1, hjust = 0.5, color = textColor))
1549126691812:dist.plot
1549126691813:}
1549126691814:# Function to get data for annotations ------------------------------------
1549126691815:getLabelsData <- function(data.to.plot) {
1549126691816:max.x <- max(data.to.plot$Position)
1549126691817:max.y <- max(data.to.plot$kmerDepth)
1549126691819:nLoci    <- length(unique(data.to.plot$Locus))
1549126691820:nAlleles <- length(unique(data.to.plot$N))
1549126691822:alleles     <- unique(data.to.plot$Allele)
1549126691822:loci        <- as.character(unique(data.to.plot$Locus))
1549126691823:lociLabels  <- c()
1549126691824:name.x      <- c()
1549126691825:name.y      <- c()
1549126691826:info.x      <- c()
1549126691827:info.y      <- c()
1549126691828:covs        <- c()
1549126691829:avgDepths   <- c()
1549126691830:meanDepth.x <- c()
1549126691831:meanDepth.y <- c()
1549126691832:for (i in loci) {
1549126691833:lociLabels <- c(lociLabels, rep(i, nAlleles))
1549126691834:}
1549126691835:for (allele in alleles) {
1549126691836:locus       <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1549126691837:maxPos      <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549126691839:maxDepth    <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549126691840:# name.x      <- c(name.x, (maxPos / 2))
1549126691841:name.x      <- c(name.x, (max.x / 2))
1549126691842:name.y      <- c(name.y, (maxDepth * 0.25))
1549126691843:info.x      <- c(info.x, max.x * 0.02)
1549126691844:info.y      <- c(info.y, maxDepth * 1.5)
1549126691845:covs        <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549126691846:avgDepths   <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549126691847:}
1549126691848:labelsData <- data.frame(Allele = alleles,
1549126691849:name.x = name.x,
1549126691851:name.y = name.y,
1549126691852:info.x = info.x,
1549126691853:info.y = info.y,
1549126691854:meanDepth = avgDepths,
1549126691855:N = rep(unique(data.to.plot$N), nLoci),
1549126691857:Locus = lociLabels,
1549126691858:cov = covs
1549126691859:) %>%
1549126691860:left_join(data.to.plot %>%
1549126691862:group_by(Allele, Length, NormKmerCount, Score) %>%
1549126691863:summarise(sd = sd(kmerDepth)),
1549126691864:by = c("Allele" = "Allele")) #%>%
1549126691866:# mutate(
1549126691868:#   info   = paste0("cov=", format(round(covs, 1), nsmall = 1), "%   ",
1549126691869:#                   paste0("ad=", format(round(avgDepths, 1), nsmall = 1)),
1549126691870:#                   "   ",
1549126691871:#                   # expression(paste(italic(sigma), "=",format(round(sd, 1), nsmall = 1))))
1549126691872:#                   paste0("sd=", format(round(sd, 1), nsmall = 1))
1549126691873:#   )
1549126691874:# )
1549126691876:labelsData
1549126691878:}
1549126691880:# Check for genes/loci file to filter loci to plot  -----------------------
1549126691881:loci.to.plot <- c()
1549126691883:# if (!is.null(gene.file)|| gene.file != "") {
1549126691884:if (!is.null(gene.file) && !is.na(gene.file) && gene.file != "") {
1549126691885:error.message <- CheckFileExists(gene.file)
1549126691886:if (!is.null(error.message)){
1549126691887:cat("Warning:")
1549126691889:cat(error.message)
1549126691891:cat("  The plotting process will continue without filtering genes/loci.\n")
1549126691894:} else {
1549126691897:loci.to.plot <- scan(gene.file, character(), quiet = TRUE)
1549126691900:}
1549126691902:}
1549126691905:# Data processing and plotting --------------------------------------------
1549126691906:cat("Plotting depths... ")
1549126691908:options(stringsAsFactors = T, readr.num_columns = 0)
1549126691910:# Load data
1549126691911:inData <- read_tsv(input.file)
1549126691913:# inData <- read.delim(input.file)
1549126691915:# colnames(inData) <- c("Allele", "Position", "k-mer Depth", "Weighted k-mer Depth")
1549126691917:colnames(inData) <- c("N", "Locus", "Allele", "Position", "kmerDepth",
1549126691918:"NormKmerCount", "Coverage", "Score", "AverageKmerDepth")
1549126691921:# Transform data
1549126691922:data.to.plot <- inData %>%
1549126691924:left_join(inData %>%
1549126691925:group_by(Allele) %>%
1549126691927:summarise(Length = n()), by = "Allele") %>%
1549126691928:arrange(Locus, N) %>%
1549126691930:mutate(
1549126691932:AlPos = factor(N, levels = unique(.$N)),
1549126691933:Allele = factor(Allele, levels = unique(inData$Allele)))
1549126691935:# Filtering loci/genes from genes_file input param
1549126691936:if (length(loci.to.plot) > 0) {
1549126691938:data.to.plot <- data.to.plot %>%
1549126691940:filter(Locus %in% loci.to.plot)
1549126691941:}
1549126691944:longestLocusNameLength <- max(str_length(as.character(unique(inData$Locus))))
1549126691946:# labelsData <- getLabelsData(data.to.plot)
1549126691947:nLoci      <- length(unique(data.to.plot$Locus))
1549126691949:nAlleles   <- length(unique(data.to.plot$N))
1549126691952:# Theme-related variable definition ---------------------------------------
1549126691954:annotLinetype         <- "solid"
1549126691955:annotTextSize         <- 4
1549126691957:axisColor             <- "#000000"
1549126691959:axisTextSize          <- 12
1549126691961:barAnnotTextSize      <- 4
1549126691963:baseTextSize          <- 14
1549126691965:gridColor             <- "#e0e0e0"
1549126691967:lineSize              <- 0.3
1549126691970:panelColor            <- "#fff4e0"
1549126691972:panelColor            <- "#f2efe6"
1549126691974:# panelColor            <- "#ffffff"
1549126691976:# stripBackground       <- "#cccccc"
1549126691984:stripTextSize         <- axisTextSize
1549126691987:if (longestLocusNameLength > 12)
1549126691989:stripTextSize       <- stripTextSize * 0.6
1549126691992:textColor             <- "#000000"
1549126691994:# baseFontFamily        <- "Arial"
1549126691999:# Custom theme definition for plots ---------------------------------------
1549126692002:plotTheme <- list(
1549126692004:theme(
1549126692007:axis.text.x      = element_text(angle = 50, size = axisTextSize,
1549126692009:vjust = 1, hjust = 1, color = textColor),
1549126692012:axis.text.y      = element_text(size = axisTextSize, color = textColor),
1549126692014:axis.ticks       = element_line(size = lineSize),
1549126692017:axis.title.x     = element_text(margin = margin(6,0,8,0, "mm")),
1549126692019:axis.title.y     = element_text(margin = margin(0,6,0,0, "mm")),
1549126692023:legend.position  = "none",
1549126692025:panel.border     = element_rect(size = lineSize),
1549126692027:panel.background = element_rect(fill = panelColor),
1549126692030:panel.grid       = element_line(size = lineSize, colour = gridColor),
1549126692032:panel.grid.minor = element_blank(),
1549126692034:plot.margin      = margin(10,10,0,10, "mm"),
1549126692037:panel.spacing    = unit(4, "mm"),
1549126692039:plot.caption     = element_text(size = baseTextSize * 0.7, face = "italic"),
1549126692041:plot.title       = element_text(hjust = 0.5),
1549126692044:plot.subtitle    = element_text(hjust = 0.5),
1549126692046:strip.background = element_rect(size = lineSize),
1549126692049:strip.text       = element_text(size = stripTextSize),
1549126692051:text             = element_text(size = baseTextSize)
1549126692054:)
1549126692056:)
1549126692059:# Palette definition ------------------------------------------------------
1549126692061:# colourCount <- length(unique(inData$Locus))
1549126692063:colourCount <- nLoci
1549126692065:# colourCount  <- length(unique(data.to.plot$Allele))
1549126692066:# fillPalette  <- colorRampPalette(brewer.pal(8, "Dark2"))(colourCount)
1549126692068:# fillPalette  <- colorRampPalette(brewer.pal(12, "Paired"))(colourCount)
1549126692070:# fillPalette  <- colorRampPalette(brewer.pal(9, "Set1"))(colourCount)
1549126692071:# fillPalette  <- colorRampPalette(pal_npg("nrc")(10))(colourCount)
1549126692073:# fillPalette  <- colorRampPalette(pal_d3("category20")(20))(colourCount)
1549126692075:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549126692077:borderPalette <- darkColors(fillPalette, 0.6)
1549126692079:# library("scales"); show_col(fillPalette); show_col(borderPalette)
1549126692085:# # Depth plot -------------------------------------------------------------
1549126692087:# hFactor  <- 1.2
1549126692089:# wFactor  <- 4.8
1549126692091:# # if (nLoci == 1)
1549126692092:# #   hFactor <- 1.4;
1549126692096:# height <- (nLoci * hFactor) + 2 + 0.1 + ((nLoci-1)*0.05)
1549126692097:# width  <- nAlleles * wFactor
1549126692100:# # Generate plot
1549126692102:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549126692104:# # Save plot
1549126692107:# out.filename <- paste0(out.prefix, ".", out.format)
1549126692109:# if (out.format == "png") {
1549126692112:# 	ggsave(filename = out.filename, plot = depth.plot,
1549126692115:# 				 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549126692117:# } else {
1549126692119:# 	ggsave(filename = out.filename, plot = depth.plot,
1549126692121:# 				 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549126692123:# }
1549126692127:# Depth plot -------------------------------------------------------------
1549126692129:# <<<<<<< HEAD
1549126692131:#   rowsPerPage <- 7
1549126692133:#   hFactor     <- 1.2
1549126692135:#   wFactor     <- 4.8
1549126692137:#   rows        <- nLoci
1549126692139:#   if (nLoci > rowsPerPage)
1549126692142:#     rows <- rowsPerPage;
1549126692147:#   height <- (rows * hFactor) + 2 + 0.1 + ((rows-1)*0.05)
1549126692150:#   width  <- nAlleles * wFactor
1549126692152:#
1549126692155:#   loci     <- unique(data.to.plot$Locus)
1549126692158:#   lociList <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549126692160:#   lociList <- split(loci, ceiling(seq_along(loci)/3))
1549126692163:#   plotList <- list()
1549126692166:#   for (lociSet in lociList) {
1549126692169:#   	print(lociSet)
1549126692171:#   	subset.to.plot <- data.to.plot %>%
1549126692174:#   		filter(Locus %in% lociSet)
1549126692176:#   	labelsData <- getLabelsData(subset.to.plot)
1549126692179:#   	currentPlot <- plotDepth(subset.to.plot, labelsData, fillPalette, borderPalette)
1549126692181:#   	plotList <- c(plotList, list(currentPlot))
1549126692184:#   	# print(currentPlot)
1549126692187:#   	# print(unique(subset.to.plot$Locus))
1549126692190:#   }
1549126692193:#  	length(plotList)
1549126692195:#
1549126692198:#  	if (out.format == "pdf") {
1549126692200:#  		out.filename <- paste(out.prefix, out.format, sep = ".")
1549126692203:#  		pdf(out.filename)
1549126692206:#  		for (i in seq_along(plotList)) {
1549126692208:#  			nLociToPlot <- length(lociList[[i]])
1549126692211:#  			height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1549126692213:#  			width  <- nAlleles * wFactor
1549126692215:#  			# out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549126692217:#  			# print(out.filename)
1549126692219:#  			print(plotList[[i]])
1549126692221:#  		}
1549126692223:#  		dev.off()
1549126692225:#
1549126692227:#  	}
1549126692229:#  	for (i in seq_along(plotList)) {
1549126692230:#  		nLociToPlot <- length(lociList[[i]])
1549126692232:#  		height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1549126692234:#  		width  <- nAlleles * wFactor
1549126692236:#  		out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549126692238:#  		print(out.filename)
1549126692239:#  		pdf(out.filename, width = width, height = height)
1549126692241:#  		print(plotList[[i]])
1549126692243:#  		dev.off()
1549126692245:#  	}
1549126692247:#  	else if (out.format == "png") {
1549126692249:#  		ggsave(filename = out.filename, plot = depth.plot,
1549126692250:#  					 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549126692252:#  	} else {
1549126692254:#  		ggsave(filename = out.filename, plot = depth.plot,
1549126692256:#  					 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549126692258:#  	}
1549126692260:#
1549126692261:#  	plot_grid()
1549126692263:#  	# Generate plot
1549126692265:#   # (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549126692269:# =======
1549126692271:# hFactor        <- 1.6
1549126692273:wFactor        <- 4.8
1549126692274:plotTitlesSize <- 2.39
1549126692276:getPlotHeight <- function(rows, extras){
1549126692278:hFactor <- 1.6
1549126692280:if(rows == 1)
1549126692282:hFactor <- 1.8
1549126692284:# loci + titles and foot note + strip + space between locus
1549126692286:(rows*hFactor) + extras + ((rows-1)*0.157) #in
1549126692288:}
1549126692291:rowsPerPage <- 3
1549126692294:width  <- nAlleles * wFactor
1549126692297:height <- getPlotHeight(rowsPerPage, plotTitlesSize)
1549126692299:loci   <- unique(data.to.plot$Locus)
1549126692301:sets   <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549126692306:plots <- lapply(sets, function(set, dp=data.to.plot, rp=rowsPerPage){
1549126692309:subsetToPlot <- dp %>% filter(Locus %in% set)
1549126692312:ld    <- getLabelsData(subsetToPlot)
1549126692314:(p    <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette))
1549126692317:nLoci <- length(set)
1549126692319:if(nLoci < rp){
1549126692321:hlay    <- matrix(c(1, NA))
1549126692323:total   <- getPlotHeight(rp, plotTitlesSize)
1549126692325:cHeight <- getPlotHeight(nLoci, plotTitlesSize)
1549126692327:blank   <- getPlotHeight(rp-nLoci, 0)
1549126692329:heights <- matrix(c(cHeight/total, blank/total))
1549126692331:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549126692334:}
1549126692336:p
1549126692338:})
1549126692342:if (out.format == "pdf") {
1549126692344:out.filename <- paste(out.prefix, out.format, sep = ".")
1549126692346:ml <- marrangeGrob(plots, nrow=1, ncol=1, padding = unit(10, "mm"),
1549126692348:top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549126692350:ggsave(filename = out.filename, plot = ml,
1549126692352:width  = width, height = getPlotHeight(rowsPerPage), dpi = 400, limitsize = FALSE)
1549126692355:}
1549126692357:else {
1549126692359:for (i in seq_along(plots)) {
1549126692361:out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549126692363:ggsave(filename = out.filename, plot = plots[[i]],
1549126692365:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549126692367:}
1549126692369:}
1549126692373:# # Depth distribution plot ------------------------------------------------
1549126692375:# hFactor  <- 3
1549126692377:# wFactor  <- 2
1549126692379:# if (nLoci == 1)
1549126692381:#   hFactor <- 3.5
1549126692383:# height       <- nLoci * hFactor
1549126692386:# width        <- nAlleles * wFactor
1549126692387:# # Generate plot
1549126692390:# (dist.plot <- plotDepthDist(data.to.plot, labelsData, fillPalette, borderPalette))
1549126692396:# # Save plot
1549126692399:# out.filename <- paste0(out.prefix, "_dist.", out.format)
1549126692401:# if (out.format == "png") {
1549126692403:#   ggsave(filename = out.filename, plot = dist.plot,
1549126692406:#          width  = width, height = height, type = "cairo-png", dpi = 300)
1549126692408:# } else {
1549126692410:#   ggsave(filename = out.filename, plot = dist.plot,
1549126692412:#          width  = width, height = height, dpi = 400)
1549126692415:# }
1549126692419:cat("Done! \n")
1549126692423:# Code core - End ---------------------------------------------------------
1549126692425:}
1549126750307:#!/usr/bin/env Rscript
1549126750307:# ##############################################################################
1549126750308:#  Author:   Hector Fabio Espitia-Navarro
1549126750309:#            Georgia Institute of Technology
1549126750309:#  Version:  1.0
1549126750309:#  Date:     01/19/2019
1549126750310:# ##############################################################################
1549126750311:# Install required packages -----------------------------------------------
1549126750311:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549126750312:if(!file.exists(personal.lib.path))
1549126750312:dir.create(personal.lib.path)
1549126750313:printMessage <- function(message, verbose){
1549126750314:if(verbose)
1549126750314:cat(message)
1549126750315:}
1549126750316:# crayon::bold("Hola")
1549126750316:installAndLoadPackages <- function(pkg, verbose){
1549126750317:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1549126750317:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1549126750318:printMessage("Done!\n", verbose)
1549126750318:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549126750319:if (length(new.pkg)) {
1549126750319:printMessage("Installing new packages... ", verbose)
1549126750320:install.packages(new.pkg, dependencies = TRUE,
1549126750320:repos="http://cran.rstudio.com/",
1549126750320:lib = personal.lib.path)
1549126750321:printMessage("Done!\n", verbose)
1549126750321:}
1549126750321:printMessage("Loading required packages... ", verbose)
1549126750322:sapply(pkg, function(x){
1549126750322:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549126750322:})
1549126750323:printMessage("Done!\n", verbose)
1549126750323:}
1549126750324:# github.related.packages <- c("devtools", "Rcpp")
1549126750324:# packages <- c("argparser", "tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite")
1549126750324:packages <- c("tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite", "gridExtra")
1549126750325:# installAndLoadPackages(packages, verbose = TRUE)
1549126750325:installAndLoadPackages("argparser", verbose = FALSE)
1549126750353:# Command line arguments processing ---------------------------------------
1549126750354:# Get script name
1549126750354:initial.options <- commandArgs(trailingOnly = FALSE)
1549126750354:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1549126750355:# Process command line arguments
1549126750355:# Create a parser
1549126750356:p <- arg_parser("This script generates k-mer depth plots using a depth file generated by the\033[1mSTing typer\033[22m tool (-t option).",
1549126750356:name = script.name)
1549126750358:# Add Positional arguments (required)
1549126750358:p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
1549126750359:# Add options
1549126750360:p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1549126750361:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1549126750361:default = "kmer_depth")
1549126750362:p <- add_argument(p, "--sample_name", help = "Sample name.",
1549126750362:default = "input file's name")
1549126750363:p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'",
1549126750363:default = "pdf")
1549126750364:# Initialization of variables ---------------------------------------------
1549126750365:# Values to test the script using RStudio
1549126750365:script.home <- "/home/hspitia/projects/sting"
1549126750365:# inputFile   <- paste(script.home, "ERR036060.depth.2.tsv", sep = "/")
1549126750366:# geneFile    <- paste(script.home, "rmlst_failed_loci.txt", sep = "/")
1549126750366:inputFile   <- paste(script.home, "depth.tsv", sep = "/")
1549126750366:geneFile    <- paste(script.home, "loci.txt", sep = "/")
1549126750367:out.format  <- "png"
1549126750367:out.prefix  <- "kmer_ext_depth"
1549126750368:sample.name <- basename(inputFile)
1549126750368:# Parse command line arguments
1549126750368:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1549126750369:argv <- list()
1549126750369:if(command.line) {
1549126750370:argv <- parse_args(p)
1549126750370:} else {
1549126750370:argv <- parse_args(p, list(inputFile,
1549126750370:# "--gene_file", geneFile,
1549126750371:"--prefix", out.prefix,
1549126750371:"--sample_name", sample.name,
1549126750371:"--format", out.format))
1549126750371:}
1549126750373:# Get argument values from the command line
1549126750373:input.file  <- argv$input_file
1549126750373:gene.file   <- argv$gene_file
1549126750374:out.format  <- argv$format
1549126750374:out.prefix  <- argv$prefix
1549126750375:sample.name <- argv$sample_name
1549126750375:# if (sample.name == "")
1549126750376:if (sample.name == "input file's name")
1549126750376:sample.name <- basename(input.file)
1549126750376:# Function to check if file exists ----------------------------------------
1549126750377:CheckFileExists <- function(file.list) {
1549126750377:non.exist.files <- !file.exists(file.list)
1549126750377:if(any(non.exist.files)) {
1549126750378:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549126750378:}
1549126750378:}
1549126750379:# Check for input files ---------------------------------------------------
1549126750379:files.to.check <- c(input.file)
1549126750379:error.message  <- CheckFileExists(files.to.check)
1549126750380:if(!is.null(error.message)){
1549126750380:stop(error.message)
1549126750381:} else {
1549126750381:# Code core - Begin -------------------------------------------------------
1549126750381:installAndLoadPackages(packages, verbose = TRUE)
1549126750382:# FUNCTIONS:
1549126750382:# Function to dark a list of colors ---------------------------------------
1549126750382:darkColors <- function(palette, level){
1549126750382:rgbColors <- as.data.frame(t(as.data.frame(lapply(as.data.frame(t(col2rgb(palette))),
1549126750383:function(x) { round(x * level)}))))
1549126750383:unname(sapply(rgbColors, function(x){ rgb(x[1], x[2], x[3], maxColorValue=255) }))
1549126750383:}
1549126750384:# Function for plotting k-mer depth ----------------------------------------
1549126750384:plotDepth <- function(dataToPlot, labelsData, fillColors, borderColors) {
1549126750384:max.x       <- max(dataToPlot$Position)
1549126750385:max.y       <- max(dataToPlot$kmerDepth)
1549126750385:x.limits    <- seq(0, max.x, 100)
1549126750386:y.limits    <- seq(0, max.y, 20)
1549126750386:nTopAlleles <- length(unique(dataToPlot$N))
1549126750387:d.plot <- ggplot(data = dataToPlot, aes(x = Position, y = kmerDepth),
1549126750387:size = 0.2) +
1549126750387:geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1549126750388:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1549126750388:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1549126750389:# scale_color_manual(values = getPalette) +
1549126750389:scale_color_manual(values = borderColors) +
1549126750390:scale_fill_manual(values = fillColors) +
1549126750390:geom_text(data = labelsData,
1549126750390:# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1549126750391:# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1549126750391:aes(x = Length, y = info.y * 0.5, group = Locus,
1549126750392:hjust = 0,
1549126750392:label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1549126750393:show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1549126750393:nudge_x = -(max.x*0.025)
1549126750394:) +
1549126750394:geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1549126750395:alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1549126750396:# geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1549126750397:size = annotTextSize * 1.05, color = "#333333") +
1549126750398:geom_text(data = labelsData,
1549126750399:parse = TRUE,
1549126750400:aes(x = info.x, y = info.y,
1549126750401:label = paste0("{{{{italic(s)==", format(round(Score, 2), nsmall = 2),
1549126750402:"*~~~italic(hat(f)[k])} ==", format(round(NormKmerCount, 2), nsmall = 2),
1549126750402:"*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1549126750403:"*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1549126750403:"~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1549126750404:hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1549126750405:facet_grid(Locus ~ N, scales = "free_y") +
1549126750405:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1549126750406:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1549126750407:theme_bw() +
1549126750407:plotTheme +
1549126750408:labs(title    = expression(italic("k")*"-mer depth"),
1549126750408:subtitle = paste("Top", nTopAlleles, "alleles/genes on sample", sample.name),
1549126750409:x        = "Position along sequence (bp)",
1549126750410:y        = expression(paste(italic(k), "-mer depth")),
1549126750410:# caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1549126750412:caption  = expression(paste(italic("s"),": score;  ",
1549126750413:italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1549126750415:italic("c"),": coverage;  ",
1549126750416:italic(sigma), ": standard deviation;  ",
1549126750417:italic(bar(d)), ": average depth"), sep = "")
1549126750418:)
1549126750419:# guides(fill  = guide_legend(title  ="Allele"), color = FALSE) +
1549126750420:d.plot
1549126750420:}
1549126750421:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549126750422:# Function for plotting k-mer depth distributions as box plots ------------
1549126750422:plotDepthDist <- function(data.to.plot, labelsData, fillColors, borderColors){
1549126750423:dist.plot <- ggplot(data.to.plot, aes(x = AlPos, y = kmerDepth)) +
1549126750424:geom_jitter(position = position_jitter(width=.3), aes(color = Locus),
1549126750425:alpha = 0.4, size = 1.2, shape = 16) +
1549126750426:geom_boxplot(alpha = 0.7, size = 0.5, aes(fill = Locus, color = Locus)) +
1549126750427:geom_text(data = labelsData, size = 4, hjust = "center",
1549126750428:aes(x = N,#(N - 0.5),
1549126750431:y = info.y * 1.05,
1549126750433:label = Allele),
1549126750434:color = "#333333") +
1549126750435:geom_text(data = labelsData, size = 3, hjust = "center",
1549126750437:parse = TRUE,
1549126750438:aes(x = N,#(N - 0.4),
1549126750439:# y = info.y * 0.08,
1549126750440:y = info.y * 0.96,
1549126750441:label = paste0("sigma ==",format(round(sd, 1), nsmall = 1))),
1549126750443:color = "#333333") +
1549126750444:geom_point(data = labelsData,
1549126750445:shape = 23, fill = "white",
1549126750447:aes(x = N, y = meanDepth)) +
1549126750448:facet_grid(Locus ~ ., scales = "free_y") +
1549126750449:scale_color_manual(values = borderColors) +
1549126750451:scale_fill_manual(values = fillColors) +
1549126750452:labs(title = expression(paste(italic("k"), "-mer depth distribution")),
1549126750454:subtitle = basename(input.file),
1549126750455:x        = "Allele Ranking",
1549126750457:y        = expression(paste(italic(k), "-mer depth")),
1549126750458:caption  = expression(paste(italic(sigma), ": standard deviation")))+#,"sd: standard deviation") +
1549126750460:theme_bw() +
1549126750461:plotTheme +
1549126750468:theme(axis.text.x   = element_text(angle = 0, size = axisTextSize,
1549126750470:vjust = 1, hjust = 0.5, color = textColor))
1549126750471:dist.plot
1549126750473:}
1549126750475:# Function to get data for annotations ------------------------------------
1549126750476:getLabelsData <- function(data.to.plot) {
1549126750478:max.x <- max(data.to.plot$Position)
1549126750480:max.y <- max(data.to.plot$kmerDepth)
1549126750484:nLoci    <- length(unique(data.to.plot$Locus))
1549126750486:nAlleles <- length(unique(data.to.plot$N))
1549126750489:alleles     <- unique(data.to.plot$Allele)
1549126750491:loci        <- as.character(unique(data.to.plot$Locus))
1549126750493:lociLabels  <- c()
1549126750494:name.x      <- c()
1549126750496:name.y      <- c()
1549126750498:info.x      <- c()
1549126750499:info.y      <- c()
1549126750501:covs        <- c()
1549126750503:avgDepths   <- c()
1549126750504:meanDepth.x <- c()
1549126750506:meanDepth.y <- c()
1549126750508:for (i in loci) {
1549126750509:lociLabels <- c(lociLabels, rep(i, nAlleles))
1549126750511:}
1549126750513:for (allele in alleles) {
1549126750514:locus       <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1549126750516:maxPos      <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549126750518:maxDepth    <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549126750520:# name.x      <- c(name.x, (maxPos / 2))
1549126750521:name.x      <- c(name.x, (max.x / 2))
1549126750523:name.y      <- c(name.y, (maxDepth * 0.25))
1549126750524:info.x      <- c(info.x, max.x * 0.02)
1549126750526:info.y      <- c(info.y, maxDepth * 1.5)
1549126750528:covs        <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549126750529:avgDepths   <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549126750531:}
1549126750533:labelsData <- data.frame(Allele = alleles,
1549126750534:name.x = name.x,
1549126750536:name.y = name.y,
1549126750538:info.x = info.x,
1549126750539:info.y = info.y,
1549126750541:meanDepth = avgDepths,
1549126750543:N = rep(unique(data.to.plot$N), nLoci),
1549126750545:Locus = lociLabels,
1549126750546:cov = covs
1549126750548:) %>%
1549126750550:left_join(data.to.plot %>%
1549126750551:group_by(Allele, Length, NormKmerCount, Score) %>%
1549126750553:summarise(sd = sd(kmerDepth)),
1549126750555:by = c("Allele" = "Allele")) #%>%
1549126750557:# mutate(
1549126750559:#   info   = paste0("cov=", format(round(covs, 1), nsmall = 1), "%   ",
1549126750561:#                   paste0("ad=", format(round(avgDepths, 1), nsmall = 1)),
1549126750563:#                   "   ",
1549126750564:#                   # expression(paste(italic(sigma), "=",format(round(sd, 1), nsmall = 1))))
1549126750566:#                   paste0("sd=", format(round(sd, 1), nsmall = 1))
1549126750568:#   )
1549126750570:# )
1549126750572:labelsData
1549126750574:}
1549126750578:# Check for genes/loci file to filter loci to plot  -----------------------
1549126750579:loci.to.plot <- c()
1549126750581:# if (!is.null(gene.file)|| gene.file != "") {
1549126750583:if (!is.null(gene.file) && !is.na(gene.file) && gene.file != "") {
1549126750585:error.message <- CheckFileExists(gene.file)
1549126750587:if (!is.null(error.message)){
1549126750589:cat("Warning:")
1549126750591:cat(error.message)
1549126750593:cat("  The plotting process will continue without filtering genes/loci.\n")
1549126750595:} else {
1549126750597:loci.to.plot <- scan(gene.file, character(), quiet = TRUE)
1549126750599:}
1549126750601:}
1549126750604:# Data processing and plotting --------------------------------------------
1549126750606:cat("Plotting depths... ")
1549126750608:options(stringsAsFactors = T, readr.num_columns = 0)
1549126750610:# Load data
1549126750611:inData <- read_tsv(input.file)
1549126750612:# inData <- read.delim(input.file)
1549126750615:# colnames(inData) <- c("Allele", "Position", "k-mer Depth", "Weighted k-mer Depth")
1549126750616:colnames(inData) <- c("N", "Locus", "Allele", "Position", "kmerDepth",
1549126750617:"NormKmerCount", "Coverage", "Score", "AverageKmerDepth")
1549126750620:# Transform data
1549126750621:data.to.plot <- inData %>%
1549126750622:left_join(inData %>%
1549126750624:group_by(Allele) %>%
1549126750625:summarise(Length = n()), by = "Allele") %>%
1549126750627:arrange(Locus, N) %>%
1549126750630:mutate(
1549126750632:AlPos = factor(N, levels = unique(.$N)),
1549126750634:Allele = factor(Allele, levels = unique(inData$Allele)))
1549126750636:# Filtering loci/genes from genes_file input param
1549126750639:if (length(loci.to.plot) > 0) {
1549126750641:data.to.plot <- data.to.plot %>%
1549126750643:filter(Locus %in% loci.to.plot)
1549126750646:}
1549126750650:longestLocusNameLength <- max(str_length(as.character(unique(inData$Locus))))
1549126750652:# labelsData <- getLabelsData(data.to.plot)
1549126750654:nLoci      <- length(unique(data.to.plot$Locus))
1549126750656:nAlleles   <- length(unique(data.to.plot$N))
1549126750661:# Theme-related variable definition ---------------------------------------
1549126750663:annotLinetype         <- "solid"
1549126750665:annotTextSize         <- 4
1549126750667:axisColor             <- "#000000"
1549126750669:axisTextSize          <- 12
1549126750671:barAnnotTextSize      <- 4
1549126750674:baseTextSize          <- 14
1549126750676:gridColor             <- "#e0e0e0"
1549126750678:lineSize              <- 0.3
1549126750680:panelColor            <- "#fff4e0"
1549126750682:panelColor            <- "#f2efe6"
1549126750685:# panelColor            <- "#ffffff"
1549126750687:# stripBackground       <- "#cccccc"
1549126750689:stripTextSize         <- axisTextSize
1549126750691:if (longestLocusNameLength > 12)
1549126750693:stripTextSize       <- stripTextSize * 0.6
1549126750695:textColor             <- "#000000"
1549126750698:# baseFontFamily        <- "Arial"
1549126750702:# Custom theme definition for plots ---------------------------------------
1549126750704:plotTheme <- list(
1549126750706:theme(
1549126750707:axis.text.x      = element_text(angle = 50, size = axisTextSize,
1549126750709:vjust = 1, hjust = 1, color = textColor),
1549126750710:axis.text.y      = element_text(size = axisTextSize, color = textColor),
1549126750712:axis.ticks       = element_line(size = lineSize),
1549126750714:axis.title.x     = element_text(margin = margin(6,0,8,0, "mm")),
1549126750715:axis.title.y     = element_text(margin = margin(0,6,0,0, "mm")),
1549126750717:legend.position  = "none",
1549126750719:panel.border     = element_rect(size = lineSize),
1549126750720:panel.background = element_rect(fill = panelColor),
1549126750722:panel.grid       = element_line(size = lineSize, colour = gridColor),
1549126750723:panel.grid.minor = element_blank(),
1549126750725:plot.margin      = margin(10,10,0,10, "mm"),
1549126750727:panel.spacing    = unit(4, "mm"),
1549126750728:plot.caption     = element_text(size = baseTextSize * 0.7, face = "italic"),
1549126750730:plot.title       = element_text(hjust = 0.5),
1549126750732:plot.subtitle    = element_text(hjust = 0.5),
1549126750733:strip.background = element_rect(size = lineSize),
1549126750735:strip.text       = element_text(size = stripTextSize),
1549126750737:text             = element_text(size = baseTextSize)
1549126750739:)
1549126750742:)
1549126750747:# Palette definition ------------------------------------------------------
1549126750750:# colourCount <- length(unique(inData$Locus))
1549126750752:colourCount <- nLoci
1549126750755:# colourCount  <- length(unique(data.to.plot$Allele))
1549126750758:# fillPalette  <- colorRampPalette(brewer.pal(8, "Dark2"))(colourCount)
1549126750761:# fillPalette  <- colorRampPalette(brewer.pal(12, "Paired"))(colourCount)
1549126750763:# fillPalette  <- colorRampPalette(brewer.pal(9, "Set1"))(colourCount)
1549126750766:# fillPalette  <- colorRampPalette(pal_npg("nrc")(10))(colourCount)
1549126750769:# fillPalette  <- colorRampPalette(pal_d3("category20")(20))(colourCount)
1549126750771:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549126750773:borderPalette <- darkColors(fillPalette, 0.6)
1549126750776:# library("scales"); show_col(fillPalette); show_col(borderPalette)
1549126750785:# # Depth plot -------------------------------------------------------------
1549126750787:# hFactor  <- 1.2
1549126750789:# wFactor  <- 4.8
1549126750792:# # if (nLoci == 1)
1549126750794:# #   hFactor <- 1.4;
1549126750798:# height <- (nLoci * hFactor) + 2 + 0.1 + ((nLoci-1)*0.05)
1549126750801:# width  <- nAlleles * wFactor
1549126750803:# # Generate plot
1549126750805:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549126750808:# # Save plot
1549126750810:# out.filename <- paste0(out.prefix, ".", out.format)
1549126750813:# if (out.format == "png") {
1549126750815:# 	ggsave(filename = out.filename, plot = depth.plot,
1549126750817:# 				 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549126750819:# } else {
1549126750822:# 	ggsave(filename = out.filename, plot = depth.plot,
1549126750824:# 				 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549126750826:# }
1549126750833:# Depth plot -------------------------------------------------------------
1549126750835:# <<<<<<< HEAD
1549126750838:#   rowsPerPage <- 7
1549126750840:#   hFactor     <- 1.2
1549126750843:#   wFactor     <- 4.8
1549126750846:#   rows        <- nLoci
1549126750849:#   if (nLoci > rowsPerPage)
1549126750851:#     rows <- rowsPerPage;
1549126750856:#   height <- (rows * hFactor) + 2 + 0.1 + ((rows-1)*0.05)
1549126750859:#   width  <- nAlleles * wFactor
1549126750861:#
1549126750864:#   loci     <- unique(data.to.plot$Locus)
1549126750867:#   lociList <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549126750869:#   lociList <- split(loci, ceiling(seq_along(loci)/3))
1549126750878:#   plotList <- list()
1549126750881:#   for (lociSet in lociList) {
1549126750884:#   	print(lociSet)
1549126750886:#   	subset.to.plot <- data.to.plot %>%
1549126750889:#   		filter(Locus %in% lociSet)
1549126750891:#   	labelsData <- getLabelsData(subset.to.plot)
1549126750893:#   	currentPlot <- plotDepth(subset.to.plot, labelsData, fillPalette, borderPalette)
1549126750895:#   	plotList <- c(plotList, list(currentPlot))
1549126750897:#   	# print(currentPlot)
1549126750899:#   	# print(unique(subset.to.plot$Locus))
1549126750901:#   }
1549126750903:#  	length(plotList)
1549126750905:#
1549126750907:#  	if (out.format == "pdf") {
1549126750908:#  		out.filename <- paste(out.prefix, out.format, sep = ".")
1549126750910:#  		pdf(out.filename)
1549126750912:#  		for (i in seq_along(plotList)) {
1549126750914:#  			nLociToPlot <- length(lociList[[i]])
1549126750916:#  			height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1549126750918:#  			width  <- nAlleles * wFactor
1549126750920:#  			# out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549126750922:#  			# print(out.filename)
1549126750923:#  			print(plotList[[i]])
1549126750925:#  		}
1549126750926:#  		dev.off()
1549126750928:#
1549126750930:#  	}
1549126750931:#  	for (i in seq_along(plotList)) {
1549126750933:#  		nLociToPlot <- length(lociList[[i]])
1549126750934:#  		height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1549126750936:#  		width  <- nAlleles * wFactor
1549126750938:#  		out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549126750939:#  		print(out.filename)
1549126750941:#  		pdf(out.filename, width = width, height = height)
1549126750943:#  		print(plotList[[i]])
1549126750945:#  		dev.off()
1549126750947:#  	}
1549126750949:#  	else if (out.format == "png") {
1549126750950:#  		ggsave(filename = out.filename, plot = depth.plot,
1549126750952:#  					 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549126750954:#  	} else {
1549126750956:#  		ggsave(filename = out.filename, plot = depth.plot,
1549126750958:#  					 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549126750959:#  	}
1549126750962:#
1549126750964:#  	plot_grid()
1549126750966:#  	# Generate plot
1549126750968:#   # (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549126750971:# =======
1549126750973:# hFactor        <- 1.6
1549126750975:wFactor        <- 4.8
1549126750977:plotTitlesSize <- 2.39
1549126750979:getPlotHeight <- function(rows, extras){
1549126750981:hFactor <- 1.6
1549126750983:if(rows == 1)
1549126750984:hFactor <- 1.9
1549126750986:# loci + titles and foot note + strip + space between locus
1549126750988:(rows*hFactor) + extras + ((rows-1)*0.157) #in
1549126750990:}
1549126750993:rowsPerPage <- 3
1549126750995:width  <- nAlleles * wFactor
1549126750997:height <- getPlotHeight(rowsPerPage, plotTitlesSize)
1549126750999:loci   <- unique(data.to.plot$Locus)
1549126751001:sets   <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549126751005:plots <- lapply(sets, function(set, dp=data.to.plot, rp=rowsPerPage){
1549126751007:subsetToPlot <- dp %>% filter(Locus %in% set)
1549126751019:ld    <- getLabelsData(subsetToPlot)
1549126751022:(p    <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette))
1549126751025:nLoci <- length(set)
1549126751028:if(nLoci < rp){
1549126751031:hlay    <- matrix(c(1, NA))
1549126751034:total   <- getPlotHeight(rp, plotTitlesSize)
1549126751037:cHeight <- getPlotHeight(nLoci, plotTitlesSize)
1549126751040:blank   <- getPlotHeight(rp-nLoci, 0)
1549126751043:heights <- matrix(c(cHeight/total, blank/total))
1549126751046:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549126751049:}
1549126751052:p
1549126751055:})
1549126751061:if (out.format == "pdf") {
1549126751064:out.filename <- paste(out.prefix, out.format, sep = ".")
1549126751067:ml <- marrangeGrob(plots, nrow=1, ncol=1, padding = unit(10, "mm"),
1549126751069:top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549126751072:ggsave(filename = out.filename, plot = ml,
1549126751074:width  = width, height = getPlotHeight(rowsPerPage), dpi = 400, limitsize = FALSE)
1549126751076:}
1549126751078:else {
1549126751080:for (i in seq_along(plots)) {
1549126751083:out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549126751085:ggsave(filename = out.filename, plot = plots[[i]],
1549126751087:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549126751089:}
1549126751091:}
1549126751095:# # Depth distribution plot ------------------------------------------------
1549126751097:# hFactor  <- 3
1549126751099:# wFactor  <- 2
1549126751102:# if (nLoci == 1)
1549126751104:#   hFactor <- 3.5
1549126751106:# height       <- nLoci * hFactor
1549126751108:# width        <- nAlleles * wFactor
1549126751115:# # Generate plot
1549126751118:# (dist.plot <- plotDepthDist(data.to.plot, labelsData, fillPalette, borderPalette))
1549126751121:# # Save plot
1549126751124:# out.filename <- paste0(out.prefix, "_dist.", out.format)
1549126751127:# if (out.format == "png") {
1549126751130:#   ggsave(filename = out.filename, plot = dist.plot,
1549126751133:#          width  = width, height = height, type = "cairo-png", dpi = 300)
1549126751136:# } else {
1549126751139:#   ggsave(filename = out.filename, plot = dist.plot,
1549126751142:#          width  = width, height = height, dpi = 400)
1549126751145:# }
1549126751151:cat("Done! \n")
1549126751157:# Code core - End ---------------------------------------------------------
1549126751160:}
1549126802541:#!/usr/bin/env Rscript
1549126802542:# ##############################################################################
1549126802542:#  Author:   Hector Fabio Espitia-Navarro
1549126802542:#            Georgia Institute of Technology
1549126802543:#  Version:  1.0
1549126802543:#  Date:     01/19/2019
1549126802543:# ##############################################################################
1549126802544:# Install required packages -----------------------------------------------
1549126802544:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549126802545:if(!file.exists(personal.lib.path))
1549126802545:dir.create(personal.lib.path)
1549126802546:printMessage <- function(message, verbose){
1549126802546:if(verbose)
1549126802546:cat(message)
1549126802547:}
1549126802547:# crayon::bold("Hola")
1549126802548:installAndLoadPackages <- function(pkg, verbose){
1549126802548:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1549126802548:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1549126802549:printMessage("Done!\n", verbose)
1549126802549:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549126802549:if (length(new.pkg)) {
1549126802550:printMessage("Installing new packages... ", verbose)
1549126802550:install.packages(new.pkg, dependencies = TRUE,
1549126802550:repos="http://cran.rstudio.com/",
1549126802551:lib = personal.lib.path)
1549126802551:printMessage("Done!\n", verbose)
1549126802552:}
1549126802552:printMessage("Loading required packages... ", verbose)
1549126802553:sapply(pkg, function(x){
1549126802553:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549126802554:})
1549126802555:printMessage("Done!\n", verbose)
1549126802555:}
1549126802556:# github.related.packages <- c("devtools", "Rcpp")
1549126802557:# packages <- c("argparser", "tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite")
1549126802557:packages <- c("tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite", "gridExtra")
1549126802557:# installAndLoadPackages(packages, verbose = TRUE)
1549126802558:installAndLoadPackages("argparser", verbose = FALSE)
1549126802589:# Command line arguments processing ---------------------------------------
1549126802590:# Get script name
1549126802590:initial.options <- commandArgs(trailingOnly = FALSE)
1549126802591:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1549126802592:# Process command line arguments
1549126802592:# Create a parser
1549126802593:p <- arg_parser("This script generates k-mer depth plots using a depth file generated by the\033[1mSTing typer\033[22m tool (-t option).",
1549126802593:name = script.name)
1549126802596:# Add Positional arguments (required)
1549126802596:p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
1549126802598:# Add options
1549126802598:p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1549126802600:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1549126802601:default = "kmer_depth")
1549126802602:p <- add_argument(p, "--sample_name", help = "Sample name.",
1549126802603:default = "input file's name")
1549126802604:p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'",
1549126802605:default = "pdf")
1549126802606:# Initialization of variables ---------------------------------------------
1549126802606:# Values to test the script using RStudio
1549126802607:script.home <- "/home/hspitia/projects/sting"
1549126802608:# inputFile   <- paste(script.home, "ERR036060.depth.2.tsv", sep = "/")
1549126802608:# geneFile    <- paste(script.home, "rmlst_failed_loci.txt", sep = "/")
1549126802609:inputFile   <- paste(script.home, "depth.tsv", sep = "/")
1549126802609:geneFile    <- paste(script.home, "loci.txt", sep = "/")
1549126802610:out.format  <- "png"
1549126802611:out.prefix  <- "kmer_ext_depth"
1549126802611:sample.name <- basename(inputFile)
1549126802612:# Parse command line arguments
1549126802613:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1549126802613:argv <- list()
1549126802614:if(command.line) {
1549126802614:argv <- parse_args(p)
1549126802615:} else {
1549126802615:argv <- parse_args(p, list(inputFile,
1549126802616:# "--gene_file", geneFile,
1549126802616:"--prefix", out.prefix,
1549126802617:"--sample_name", sample.name,
1549126802617:"--format", out.format))
1549126802617:}
1549126802619:# Get argument values from the command line
1549126802620:input.file  <- argv$input_file
1549126802620:gene.file   <- argv$gene_file
1549126802621:out.format  <- argv$format
1549126802622:out.prefix  <- argv$prefix
1549126802622:sample.name <- argv$sample_name
1549126802623:# if (sample.name == "")
1549126802624:if (sample.name == "input file's name")
1549126802624:sample.name <- basename(input.file)
1549126802625:# Function to check if file exists ----------------------------------------
1549126802625:CheckFileExists <- function(file.list) {
1549126802626:non.exist.files <- !file.exists(file.list)
1549126802626:if(any(non.exist.files)) {
1549126802628:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549126802628:}
1549126802629:}
1549126802629:# Check for input files ---------------------------------------------------
1549126802629:files.to.check <- c(input.file)
1549126802630:error.message  <- CheckFileExists(files.to.check)
1549126802631:if(!is.null(error.message)){
1549126802631:stop(error.message)
1549126802631:} else {
1549126802632:# Code core - Begin -------------------------------------------------------
1549126802632:installAndLoadPackages(packages, verbose = TRUE)
1549126802632:# FUNCTIONS:
1549126802632:# Function to dark a list of colors ---------------------------------------
1549126802633:darkColors <- function(palette, level){
1549126802633:rgbColors <- as.data.frame(t(as.data.frame(lapply(as.data.frame(t(col2rgb(palette))),
1549126802633:function(x) { round(x * level)}))))
1549126802634:unname(sapply(rgbColors, function(x){ rgb(x[1], x[2], x[3], maxColorValue=255) }))
1549126802634:}
1549126802634:# Function for plotting k-mer depth ----------------------------------------
1549126802635:plotDepth <- function(dataToPlot, labelsData, fillColors, borderColors) {
1549126802635:max.x       <- max(dataToPlot$Position)
1549126802636:max.y       <- max(dataToPlot$kmerDepth)
1549126802636:x.limits    <- seq(0, max.x, 100)
1549126802636:y.limits    <- seq(0, max.y, 20)
1549126802637:nTopAlleles <- length(unique(dataToPlot$N))
1549126802638:d.plot <- ggplot(data = dataToPlot, aes(x = Position, y = kmerDepth),
1549126802638:size = 0.2) +
1549126802638:geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1549126802639:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1549126802639:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1549126802640:# scale_color_manual(values = getPalette) +
1549126802640:scale_color_manual(values = borderColors) +
1549126802641:scale_fill_manual(values = fillColors) +
1549126802641:geom_text(data = labelsData,
1549126802642:# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1549126802642:# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1549126802643:aes(x = Length, y = info.y * 0.5, group = Locus,
1549126802643:hjust = 0,
1549126802644:label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1549126802644:show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1549126802645:nudge_x = -(max.x*0.025)
1549126802645:) +
1549126802646:geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1549126802647:alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1549126802647:# geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1549126802648:size = annotTextSize * 1.05, color = "#333333") +
1549126802648:geom_text(data = labelsData,
1549126802649:parse = TRUE,
1549126802649:aes(x = info.x, y = info.y,
1549126802650:label = paste0("{{{{italic(s)==", format(round(Score, 2), nsmall = 2),
1549126802651:"*~~~italic(hat(f)[k])} ==", format(round(NormKmerCount, 2), nsmall = 2),
1549126802651:"*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1549126802652:"*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1549126802652:"~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1549126802653:hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1549126802654:facet_grid(Locus ~ N, scales = "free_y") +
1549126802654:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1549126802655:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1549126802656:theme_bw() +
1549126802656:plotTheme +
1549126802657:labs(title    = expression(italic("k")*"-mer depth"),
1549126802658:subtitle = paste("Top", nTopAlleles, "alleles/genes on sample", sample.name),
1549126802658:x        = "Position along sequence (bp)",
1549126802659:y        = expression(paste(italic(k), "-mer depth")),
1549126802660:# caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1549126802662:caption  = expression(paste(italic("s"),": score;  ",
1549126802665:italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1549126802667:italic("c"),": coverage;  ",
1549126802668:italic(sigma), ": standard deviation;  ",
1549126802670:italic(bar(d)), ": average depth"), sep = "")
1549126802672:)
1549126802673:# guides(fill  = guide_legend(title  ="Allele"), color = FALSE) +
1549126802674:d.plot
1549126802675:}
1549126802677:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549126802678:# Function for plotting k-mer depth distributions as box plots ------------
1549126802679:plotDepthDist <- function(data.to.plot, labelsData, fillColors, borderColors){
1549126802680:dist.plot <- ggplot(data.to.plot, aes(x = AlPos, y = kmerDepth)) +
1549126802682:geom_jitter(position = position_jitter(width=.3), aes(color = Locus),
1549126802683:alpha = 0.4, size = 1.2, shape = 16) +
1549126802684:geom_boxplot(alpha = 0.7, size = 0.5, aes(fill = Locus, color = Locus)) +
1549126802686:geom_text(data = labelsData, size = 4, hjust = "center",
1549126802687:aes(x = N,#(N - 0.5),
1549126802689:y = info.y * 1.05,
1549126802690:label = Allele),
1549126802692:color = "#333333") +
1549126802693:geom_text(data = labelsData, size = 3, hjust = "center",
1549126802695:parse = TRUE,
1549126802696:aes(x = N,#(N - 0.4),
1549126802697:# y = info.y * 0.08,
1549126802698:y = info.y * 0.96,
1549126802699:label = paste0("sigma ==",format(round(sd, 1), nsmall = 1))),
1549126802700:color = "#333333") +
1549126802701:geom_point(data = labelsData,
1549126802702:shape = 23, fill = "white",
1549126802703:aes(x = N, y = meanDepth)) +
1549126802704:facet_grid(Locus ~ ., scales = "free_y") +
1549126802705:scale_color_manual(values = borderColors) +
1549126802707:scale_fill_manual(values = fillColors) +
1549126802708:labs(title = expression(paste(italic("k"), "-mer depth distribution")),
1549126802710:subtitle = basename(input.file),
1549126802711:x        = "Allele Ranking",
1549126802713:y        = expression(paste(italic(k), "-mer depth")),
1549126802714:caption  = expression(paste(italic(sigma), ": standard deviation")))+#,"sd: standard deviation") +
1549126802715:theme_bw() +
1549126802717:plotTheme +
1549126802718:theme(axis.text.x   = element_text(angle = 0, size = axisTextSize,
1549126802720:vjust = 1, hjust = 0.5, color = textColor))
1549126802721:dist.plot
1549126802723:}
1549126802724:# Function to get data for annotations ------------------------------------
1549126802726:getLabelsData <- function(data.to.plot) {
1549126802727:max.x <- max(data.to.plot$Position)
1549126802728:max.y <- max(data.to.plot$kmerDepth)
1549126802731:nLoci    <- length(unique(data.to.plot$Locus))
1549126802733:nAlleles <- length(unique(data.to.plot$N))
1549126802736:alleles     <- unique(data.to.plot$Allele)
1549126802737:loci        <- as.character(unique(data.to.plot$Locus))
1549126802739:lociLabels  <- c()
1549126802740:name.x      <- c()
1549126802742:name.y      <- c()
1549126802744:info.x      <- c()
1549126802746:info.y      <- c()
1549126802748:covs        <- c()
1549126802750:avgDepths   <- c()
1549126802752:meanDepth.x <- c()
1549126802753:meanDepth.y <- c()
1549126802755:for (i in loci) {
1549126802756:lociLabels <- c(lociLabels, rep(i, nAlleles))
1549126802758:}
1549126802759:for (allele in alleles) {
1549126802760:locus       <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1549126802761:maxPos      <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549126802762:maxDepth    <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549126802763:# name.x      <- c(name.x, (maxPos / 2))
1549126802765:name.x      <- c(name.x, (max.x / 2))
1549126802766:name.y      <- c(name.y, (maxDepth * 0.25))
1549126802767:info.x      <- c(info.x, max.x * 0.02)
1549126802768:info.y      <- c(info.y, maxDepth * 1.5)
1549126802769:covs        <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549126802771:avgDepths   <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549126802772:}
1549126802773:labelsData <- data.frame(Allele = alleles,
1549126802774:name.x = name.x,
1549126802776:name.y = name.y,
1549126802777:info.x = info.x,
1549126802778:info.y = info.y,
1549126802779:meanDepth = avgDepths,
1549126802781:N = rep(unique(data.to.plot$N), nLoci),
1549126802782:Locus = lociLabels,
1549126802783:cov = covs
1549126802785:) %>%
1549126802786:left_join(data.to.plot %>%
1549126802787:group_by(Allele, Length, NormKmerCount, Score) %>%
1549126802788:summarise(sd = sd(kmerDepth)),
1549126802790:by = c("Allele" = "Allele")) #%>%
1549126802791:# mutate(
1549126802792:#   info   = paste0("cov=", format(round(covs, 1), nsmall = 1), "%   ",
1549126802796:#                   paste0("ad=", format(round(avgDepths, 1), nsmall = 1)),
1549126802798:#                   "   ",
1549126802800:#                   # expression(paste(italic(sigma), "=",format(round(sd, 1), nsmall = 1))))
1549126802802:#                   paste0("sd=", format(round(sd, 1), nsmall = 1))
1549126802804:#   )
1549126802806:# )
1549126802808:labelsData
1549126802810:}
1549126802814:# Check for genes/loci file to filter loci to plot  -----------------------
1549126802816:loci.to.plot <- c()
1549126802818:# if (!is.null(gene.file)|| gene.file != "") {
1549126802820:if (!is.null(gene.file) && !is.na(gene.file) && gene.file != "") {
1549126802821:error.message <- CheckFileExists(gene.file)
1549126802823:if (!is.null(error.message)){
1549126802825:cat("Warning:")
1549126802827:cat(error.message)
1549126802829:cat("  The plotting process will continue without filtering genes/loci.\n")
1549126802831:} else {
1549126802833:loci.to.plot <- scan(gene.file, character(), quiet = TRUE)
1549126802835:}
1549126802837:}
1549126802841:# Data processing and plotting --------------------------------------------
1549126802843:cat("Plotting depths... ")
1549126802845:options(stringsAsFactors = T, readr.num_columns = 0)
1549126802848:# Load data
1549126802850:inData <- read_tsv(input.file)
1549126802852:# inData <- read.delim(input.file)
1549126802856:# colnames(inData) <- c("Allele", "Position", "k-mer Depth", "Weighted k-mer Depth")
1549126802858:colnames(inData) <- c("N", "Locus", "Allele", "Position", "kmerDepth",
1549126802860:"NormKmerCount", "Coverage", "Score", "AverageKmerDepth")
1549126802864:# Transform data
1549126802866:data.to.plot <- inData %>%
1549126802868:left_join(inData %>%
1549126802869:group_by(Allele) %>%
1549126802871:summarise(Length = n()), by = "Allele") %>%
1549126802872:arrange(Locus, N) %>%
1549126802874:mutate(
1549126802875:AlPos = factor(N, levels = unique(.$N)),
1549126802877:Allele = factor(Allele, levels = unique(inData$Allele)))
1549126802878:# Filtering loci/genes from genes_file input param
1549126802880:if (length(loci.to.plot) > 0) {
1549126802881:data.to.plot <- data.to.plot %>%
1549126802883:filter(Locus %in% loci.to.plot)
1549126802884:}
1549126802887:longestLocusNameLength <- max(str_length(as.character(unique(inData$Locus))))
1549126802890:# labelsData <- getLabelsData(data.to.plot)
1549126802895:nLoci      <- length(unique(data.to.plot$Locus))
1549126802898:nAlleles   <- length(unique(data.to.plot$N))
1549126802903:# Theme-related variable definition ---------------------------------------
1549126802905:annotLinetype         <- "solid"
1549126802907:annotTextSize         <- 4
1549126802910:axisColor             <- "#000000"
1549126802912:axisTextSize          <- 12
1549126802914:barAnnotTextSize      <- 4
1549126802916:baseTextSize          <- 14
1549126802917:gridColor             <- "#e0e0e0"
1549126802918:lineSize              <- 0.3
1549126802920:panelColor            <- "#fff4e0"
1549126802921:panelColor            <- "#f2efe6"
1549126802923:# panelColor            <- "#ffffff"
1549126802924:# stripBackground       <- "#cccccc"
