1549126802974:stripTextSize         <- axisTextSize
1549126802976:if (longestLocusNameLength > 12)
1549126802978:stripTextSize       <- stripTextSize * 0.6
1549126802979:textColor             <- "#000000"
1549126802981:# baseFontFamily        <- "Arial"
1549126802984:# Custom theme definition for plots ---------------------------------------
1549126802986:plotTheme <- list(
1549126802988:theme(
1549126802990:axis.text.x      = element_text(angle = 50, size = axisTextSize,
1549126802992:vjust = 1, hjust = 1, color = textColor),
1549126802994:axis.text.y      = element_text(size = axisTextSize, color = textColor),
1549126802996:axis.ticks       = element_line(size = lineSize),
1549126802998:axis.title.x     = element_text(margin = margin(6,0,8,0, "mm")),
1549126803001:axis.title.y     = element_text(margin = margin(0,6,0,0, "mm")),
1549126803003:legend.position  = "none",
1549126803005:panel.border     = element_rect(size = lineSize),
1549126803007:panel.background = element_rect(fill = panelColor),
1549126803009:panel.grid       = element_line(size = lineSize, colour = gridColor),
1549126803012:panel.grid.minor = element_blank(),
1549126803016:plot.margin      = margin(10,10,0,10, "mm"),
1549126803018:panel.spacing    = unit(4, "mm"),
1549126803021:plot.caption     = element_text(size = baseTextSize * 0.7, face = "italic"),
1549126803023:plot.title       = element_text(hjust = 0.5),
1549126803024:plot.subtitle    = element_text(hjust = 0.5),
1549126803026:strip.background = element_rect(size = lineSize),
1549126803028:strip.text       = element_text(size = stripTextSize),
1549126803029:text             = element_text(size = baseTextSize)
1549126803031:)
1549126803033:)
1549126803036:# Palette definition ------------------------------------------------------
1549126803038:# colourCount <- length(unique(inData$Locus))
1549126803040:colourCount <- nLoci
1549126803042:# colourCount  <- length(unique(data.to.plot$Allele))
1549126803044:# fillPalette  <- colorRampPalette(brewer.pal(8, "Dark2"))(colourCount)
1549126803046:# fillPalette  <- colorRampPalette(brewer.pal(12, "Paired"))(colourCount)
1549126803049:# fillPalette  <- colorRampPalette(brewer.pal(9, "Set1"))(colourCount)
1549126803051:# fillPalette  <- colorRampPalette(pal_npg("nrc")(10))(colourCount)
1549126803053:# fillPalette  <- colorRampPalette(pal_d3("category20")(20))(colourCount)
1549126803056:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549126803058:borderPalette <- darkColors(fillPalette, 0.6)
1549126803060:# library("scales"); show_col(fillPalette); show_col(borderPalette)
1549126803069:# # Depth plot -------------------------------------------------------------
1549126803072:# hFactor  <- 1.2
1549126803074:# wFactor  <- 4.8
1549126803076:# # if (nLoci == 1)
1549126803079:# #   hFactor <- 1.4;
1549126803083:# height <- (nLoci * hFactor) + 2 + 0.1 + ((nLoci-1)*0.05)
1549126803086:# width  <- nAlleles * wFactor
1549126803088:# # Generate plot
1549126803090:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549126803093:# # Save plot
1549126803095:# out.filename <- paste0(out.prefix, ".", out.format)
1549126803097:# if (out.format == "png") {
1549126803100:# 	ggsave(filename = out.filename, plot = depth.plot,
1549126803102:# 				 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549126803104:# } else {
1549126803107:# 	ggsave(filename = out.filename, plot = depth.plot,
1549126803109:# 				 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549126803112:# }
1549126803116:# Depth plot -------------------------------------------------------------
1549126803119:# <<<<<<< HEAD
1549126803121:#   rowsPerPage <- 7
1549126803123:#   hFactor     <- 1.2
1549126803125:#   wFactor     <- 4.8
1549126803127:#   rows        <- nLoci
1549126803129:#   if (nLoci > rowsPerPage)
1549126803131:#     rows <- rowsPerPage;
1549126803136:#   height <- (rows * hFactor) + 2 + 0.1 + ((rows-1)*0.05)
1549126803138:#   width  <- nAlleles * wFactor
1549126803141:#
1549126803148:#   loci     <- unique(data.to.plot$Locus)
1549126803151:#   lociList <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549126803154:#   lociList <- split(loci, ceiling(seq_along(loci)/3))
1549126803156:#   plotList <- list()
1549126803159:#   for (lociSet in lociList) {
1549126803161:#   	print(lociSet)
1549126803164:#   	subset.to.plot <- data.to.plot %>%
1549126803167:#   		filter(Locus %in% lociSet)
1549126803169:#   	labelsData <- getLabelsData(subset.to.plot)
1549126803172:#   	currentPlot <- plotDepth(subset.to.plot, labelsData, fillPalette, borderPalette)
1549126803175:#   	plotList <- c(plotList, list(currentPlot))
1549126803177:#   	# print(currentPlot)
1549126803180:#   	# print(unique(subset.to.plot$Locus))
1549126803182:#   }
1549126803185:#  	length(plotList)
1549126803188:#
1549126803191:#  	if (out.format == "pdf") {
1549126803193:#  		out.filename <- paste(out.prefix, out.format, sep = ".")
1549126803196:#  		pdf(out.filename)
1549126803198:#  		for (i in seq_along(plotList)) {
1549126803202:#  			nLociToPlot <- length(lociList[[i]])
1549126803205:#  			height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1549126803207:#  			width  <- nAlleles * wFactor
1549126803210:#  			# out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549126803213:#  			# print(out.filename)
1549126803215:#  			print(plotList[[i]])
1549126803218:#  		}
1549126803221:#  		dev.off()
1549126803223:#
1549126803226:#  	}
1549126803228:#  	for (i in seq_along(plotList)) {
1549126803231:#  		nLociToPlot <- length(lociList[[i]])
1549126803234:#  		height <- (nLociToPlot * hFactor) + 2 + 0.1 + ((nLociToPlot-1)*0.05)
1549126803236:#  		width  <- nAlleles * wFactor
1549126803239:#  		out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549126803242:#  		print(out.filename)
1549126803244:#  		pdf(out.filename, width = width, height = height)
1549126803247:#  		print(plotList[[i]])
1549126803249:#  		dev.off()
1549126803252:#  	}
1549126803255:#  	else if (out.format == "png") {
1549126803257:#  		ggsave(filename = out.filename, plot = depth.plot,
1549126803259:#  					 width  = width, height = height, type = "cairo-png", dpi = 300, limitsize = FALSE)
1549126803260:#  	} else {
1549126803262:#  		ggsave(filename = out.filename, plot = depth.plot,
1549126803264:#  					 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549126803266:#  	}
1549126803268:#
1549126803269:#  	plot_grid()
1549126803271:#  	# Generate plot
1549126803273:#   # (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549126803276:# =======
1549126803278:# hFactor        <- 1.6
1549126803280:wFactor        <- 4.8
1549126803282:plotTitlesSize <- 2.39
1549126803284:getPlotHeight <- function(rows, extras){
1549126803286:hFactor <- 1.6
1549126803288:if(rows == 1)
1549126803289:hFactor <- 1.88
1549126803291:# loci + titles and foot note + strip + space between locus
1549126803292:(rows*hFactor) + extras + ((rows-1)*0.157) #in
1549126803294:}
1549126803297:rowsPerPage <- 3
1549126803299:width  <- nAlleles * wFactor
1549126803301:height <- getPlotHeight(rowsPerPage, plotTitlesSize)
1549126803302:loci   <- unique(data.to.plot$Locus)
1549126803304:sets   <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549126803308:plots <- lapply(sets, function(set, dp=data.to.plot, rp=rowsPerPage){
1549126803309:subsetToPlot <- dp %>% filter(Locus %in% set)
1549126803311:ld    <- getLabelsData(subsetToPlot)
1549126803313:(p    <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette))
1549126803315:nLoci <- length(set)
1549126803317:if(nLoci < rp){
1549126803319:hlay    <- matrix(c(1, NA))
1549126803321:total   <- getPlotHeight(rp, plotTitlesSize)
1549126803323:cHeight <- getPlotHeight(nLoci, plotTitlesSize)
1549126803327:blank   <- getPlotHeight(rp-nLoci, 0)
1549126803330:heights <- matrix(c(cHeight/total, blank/total))
1549126803332:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549126803334:}
1549126803336:p
1549126803338:})
1549126803343:if (out.format == "pdf") {
1549126803345:out.filename <- paste(out.prefix, out.format, sep = ".")
1549126803347:ml <- marrangeGrob(plots, nrow=1, ncol=1, padding = unit(10, "mm"),
1549126803349:top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549126803351:ggsave(filename = out.filename, plot = ml,
1549126803353:width  = width, height = getPlotHeight(rowsPerPage), dpi = 400, limitsize = FALSE)
1549126803356:}
1549126803358:else {
1549126803360:for (i in seq_along(plots)) {
1549126803362:out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549126803365:ggsave(filename = out.filename, plot = plots[[i]],
1549126803367:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549126803369:}
1549126803372:}
1549126803376:# # Depth distribution plot ------------------------------------------------
1549126803379:# hFactor  <- 3
1549126803383:# wFactor  <- 2
1549126803386:# if (nLoci == 1)
1549126803389:#   hFactor <- 3.5
1549126803392:# height       <- nLoci * hFactor
1549126803395:# width        <- nAlleles * wFactor
1549126803398:# # Generate plot
1549126803401:# (dist.plot <- plotDepthDist(data.to.plot, labelsData, fillPalette, borderPalette))
1549126803405:# # Save plot
1549126803408:# out.filename <- paste0(out.prefix, "_dist.", out.format)
1549126803411:# if (out.format == "png") {
1549126803414:#   ggsave(filename = out.filename, plot = dist.plot,
1549126803417:#          width  = width, height = height, type = "cairo-png", dpi = 300)
1549126803420:# } else {
1549126803423:#   ggsave(filename = out.filename, plot = dist.plot,
1549126803426:#          width  = width, height = height, dpi = 400)
1549126803429:# }
1549126803434:cat("Done! \n")
1549126803440:# Code core - End ---------------------------------------------------------
1549126803443:}
1549128455256:#!/usr/bin/env Rscript
1549128455257:# ##############################################################################
1549128455257:#  Author:   Hector Fabio Espitia-Navarro
1549128455258:#            Georgia Institute of Technology
1549128455258:#  Version:  1.0
1549128455259:#  Date:     01/19/2019
1549128455260:# ##############################################################################
1549128455261:# Install required packages -----------------------------------------------
1549128455261:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549128455262:if(!file.exists(personal.lib.path))
1549128455263:dir.create(personal.lib.path)
1549128455264:printMessage <- function(message, verbose){
1549128455265:if(verbose)
1549128455266:cat(message)
1549128455268:}
1549128455269:# crayon::bold("Hola")
1549128455270:installAndLoadPackages <- function(pkg, verbose){
1549128455270:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1549128455271:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1549128455272:printMessage("Done!\n", verbose)
1549128455272:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549128455272:if (length(new.pkg)) {
1549128455273:printMessage("Installing new packages... ", verbose)
1549128455273:install.packages(new.pkg, dependencies = TRUE,
1549128455273:repos="http://cran.rstudio.com/",
1549128455274:lib = personal.lib.path)
1549128455274:printMessage("Done!\n", verbose)
1549128455275:}
1549128455275:printMessage("Loading required packages... ", verbose)
1549128455275:sapply(pkg, function(x){
1549128455276:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549128455276:})
1549128455277:printMessage("Done!\n", verbose)
1549128455277:}
1549128455279:# github.related.packages <- c("devtools", "Rcpp")
1549128455279:# packages <- c("argparser", "tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite")
1549128455280:packages <- c("tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite", "gridExtra")
1549128455280:# installAndLoadPackages(packages, verbose = TRUE)
1549128455281:installAndLoadPackages("argparser", verbose = FALSE)
1549128455325:# Command line arguments processing ---------------------------------------
1549128455326:# Get script name
1549128455326:initial.options <- commandArgs(trailingOnly = FALSE)
1549128455327:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1549128455328:# Process command line arguments
1549128455328:# Create a parser
1549128455329:p <- arg_parser("This script generates k-mer depth plots using a depth file generated by the\033[1mSTing typer\033[22m tool (-t option).",
1549128455329:name = script.name)
1549128455332:# Add Positional arguments (required)
1549128455333:p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
1549128455334:# Add options
1549128455335:p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1549128455336:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1549128455337:default = "kmer_depth")
1549128455339:p <- add_argument(p, "--sample_name", help = "Sample name.",
1549128455339:default = "input file's name")
1549128455341:p <- add_argument(p, "--max_loci_per_page", help = "Maximum number of loci to print on each page.",
1549128455341:default = "7")
1549128455343:p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'",
1549128455344:default = "pdf")
1549128455345:# Initialization of variables ---------------------------------------------
1549128455346:# Values to test the script using RStudio
1549128455346:script.home       <- "/home/hspitia/projects/sting"
1549128455347:# inputFile         <- paste(script.home, "ERR036060.depth.2.tsv", sep = "/")
1549128455348:# geneFile          <- paste(script.home, "rmlst_failed_loci.txt", sep = "/")
1549128455348:inputFile         <- paste(script.home, "depth.tsv", sep = "/")
1549128455349:geneFile          <- paste(script.home, "loci.txt", sep = "/")
1549128455350:out.prefix        <- "kmer_ext_depth"
1549128455351:sample.name       <- basename(inputFile)
1549128455352:max.loci.per.page <- 7
1549128455352:out.format        <- "png"
1549128455353:# Parse command line arguments
1549128455354:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1549128455355:argv <- list()
1549128455355:if(command.line) {
1549128455356:argv <- parse_args(p)
1549128455356:} else {
1549128455357:argv <- parse_args(p, list(inputFile,
1549128455357:# "--gene_file", geneFile,
1549128455358:"--prefix", out.prefix,
1549128455358:"--sample_name", sample.name,
1549128455359:"--max_loci_per_page", max.loci.per.page,
1549128455359:"--format", out.format))
1549128455360:}
1549128455365:# Get argument values from the command line
1549128455366:input.file        <- argv$input_file
1549128455367:gene.file         <- argv$gene_file
1549128455367:out.format        <- argv$format
1549128455368:out.prefix        <- argv$prefix
1549128455369:max.loci.per.page <- argv$max_loci_per_page
1549128455370:sample.name       <- argv$sample_name
1549128455371:# if (sample.name == "")
1549128455372:if (sample.name == "input file's name")
1549128455372:sample.name <- basename(input.file)
1549128455373:# Function to check if file exists ----------------------------------------
1549128455374:CheckFileExists <- function(file.list) {
1549128455374:non.exist.files <- !file.exists(file.list)
1549128455375:if(any(non.exist.files)) {
1549128455375:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549128455376:}
1549128455376:}
1549128455377:# Check for input files ---------------------------------------------------
1549128455378:files.to.check <- c(input.file)
1549128455379:error.message  <- CheckFileExists(files.to.check)
1549128455385:if(!is.null(error.message)){
1549128455386:stop(error.message)
1549128455387:} else {
1549128455387:# Code core - Begin -------------------------------------------------------
1549128455388:installAndLoadPackages(packages, verbose = TRUE)
1549128455388:# FUNCTIONS:
1549128455389:# Function to dark a list of colors ---------------------------------------
1549128455389:darkColors <- function(palette, level){
1549128455390:rgbColors <- as.data.frame(t(as.data.frame(lapply(as.data.frame(t(col2rgb(palette))),
1549128455390:function(x) { round(x * level)}))))
1549128455391:unname(sapply(rgbColors, function(x){ rgb(x[1], x[2], x[3], maxColorValue=255) }))
1549128455392:}
1549128455392:# Function for plotting k-mer depth ----------------------------------------
1549128455393:plotDepth <- function(dataToPlot, labelsData, fillColors, borderColors) {
1549128455394:max.x       <- max(dataToPlot$Position)
1549128455394:max.y       <- max(dataToPlot$kmerDepth)
1549128455395:x.limits    <- seq(0, max.x, 100)
1549128455395:y.limits    <- seq(0, max.y, 20)
1549128455396:nTopAlleles <- length(unique(dataToPlot$N))
1549128455397:d.plot <- ggplot(data = dataToPlot, aes(x = Position, y = kmerDepth),
1549128455398:size = 0.2) +
1549128455399:geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1549128455400:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1549128455401:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1549128455401:# scale_color_manual(values = getPalette) +
1549128455402:scale_color_manual(values = borderColors) +
1549128455403:scale_fill_manual(values = fillColors) +
1549128455404:geom_text(data = labelsData,
1549128455404:# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1549128455405:# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1549128455406:aes(x = Length, y = info.y * 0.5, group = Locus,
1549128455407:hjust = 0,
1549128455407:label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1549128455408:show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1549128455409:nudge_x = -(max.x*0.025)
1549128455410:) +
1549128455411:geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1549128455412:alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1549128455413:# geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1549128455414:size = annotTextSize * 1.05, color = "#333333") +
1549128455415:geom_text(data = labelsData,
1549128455416:parse = TRUE,
1549128455418:aes(x = info.x, y = info.y,
1549128455419:label = paste0("{{{{italic(s)==", format(round(Score, 2), nsmall = 2),
1549128455419:"*~~~italic(hat(f)[k])} ==", format(round(NormKmerCount, 2), nsmall = 2),
1549128455420:"*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1549128455421:"*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1549128455421:"~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1549128455423:hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1549128455425:facet_grid(Locus ~ N, scales = "free_y") +
1549128455426:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1549128455427:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1549128455428:theme_bw() +
1549128455429:plotTheme +
1549128455430:labs(title    = expression(italic("k")*"-mer depth"),
1549128455431:subtitle = paste("Top", nTopAlleles, "alleles/genes on sample", sample.name),
1549128455432:x        = "Position along sequence (bp)",
1549128455433:y        = expression(paste(italic(k), "-mer depth")),
1549128455433:# caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1549128455435:caption  = expression(paste(italic("s"),": score;  ",
1549128455436:italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1549128455437:italic("c"),": coverage;  ",
1549128455439:italic(sigma), ": standard deviation;  ",
1549128455440:italic(bar(d)), ": average depth"), sep = "")
1549128455441:)
1549128455441:# guides(fill  = guide_legend(title  ="Allele"), color = FALSE) +
1549128455442:d.plot
1549128455442:}
1549128455443:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549128455444:# Function for plotting k-mer depth distributions as box plots ------------
1549128455445:plotDepthDist <- function(data.to.plot, labelsData, fillColors, borderColors){
1549128455446:dist.plot <- ggplot(data.to.plot, aes(x = AlPos, y = kmerDepth)) +
1549128455446:geom_jitter(position = position_jitter(width=.3), aes(color = Locus),
1549128455447:alpha = 0.4, size = 1.2, shape = 16) +
1549128455448:geom_boxplot(alpha = 0.7, size = 0.5, aes(fill = Locus, color = Locus)) +
1549128455449:geom_text(data = labelsData, size = 4, hjust = "center",
1549128455450:aes(x = N,#(N - 0.5),
1549128455451:y = info.y * 1.05,
1549128455451:label = Allele),
1549128455452:color = "#333333") +
1549128455453:geom_text(data = labelsData, size = 3, hjust = "center",
1549128455454:parse = TRUE,
1549128455455:aes(x = N,#(N - 0.4),
1549128455456:# y = info.y * 0.08,
1549128455457:y = info.y * 0.96,
1549128455458:label = paste0("sigma ==",format(round(sd, 1), nsmall = 1))),
1549128455459:color = "#333333") +
1549128455460:geom_point(data = labelsData,
1549128455460:shape = 23, fill = "white",
1549128455461:aes(x = N, y = meanDepth)) +
1549128455462:facet_grid(Locus ~ ., scales = "free_y") +
1549128455463:scale_color_manual(values = borderColors) +
1549128455464:scale_fill_manual(values = fillColors) +
1549128455465:labs(title = expression(paste(italic("k"), "-mer depth distribution")),
1549128455466:subtitle = basename(input.file),
1549128455467:x        = "Allele Ranking",
1549128455468:y        = expression(paste(italic(k), "-mer depth")),
1549128455469:caption  = expression(paste(italic(sigma), ": standard deviation")))+#,"sd: standard deviation") +
1549128455470:theme_bw() +
1549128455471:plotTheme +
1549128455472:theme(axis.text.x   = element_text(angle = 0, size = axisTextSize,
1549128455473:vjust = 1, hjust = 0.5, color = textColor))
1549128455475:dist.plot
1549128455476:}
1549128455477:# Function to get data for annotations ------------------------------------
1549128455478:getLabelsData <- function(data.to.plot) {
1549128455479:max.x <- max(data.to.plot$Position)
1549128455480:max.y <- max(data.to.plot$kmerDepth)
1549128455482:nLoci    <- length(unique(data.to.plot$Locus))
1549128455483:nAlleles <- length(unique(data.to.plot$N))
1549128455485:alleles     <- unique(data.to.plot$Allele)
1549128455486:loci        <- as.character(unique(data.to.plot$Locus))
1549128455487:lociLabels  <- c()
1549128455488:name.x      <- c()
1549128455489:name.y      <- c()
1549128455490:info.x      <- c()
1549128455491:info.y      <- c()
1549128455492:covs        <- c()
1549128455493:avgDepths   <- c()
1549128455495:meanDepth.x <- c()
1549128455496:meanDepth.y <- c()
1549128455497:for (i in loci) {
1549128455499:lociLabels <- c(lociLabels, rep(i, nAlleles))
1549128455501:}
1549128455502:for (allele in alleles) {
1549128455504:locus     <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1549128455506:maxPos    <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549128455508:maxDepth  <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549128455510:name.x    <- c(name.x, (max.x / 2))
1549128455512:name.y    <- c(name.y, (maxDepth * 0.25))
1549128455513:info.x    <- c(info.x, max.x * 0.02)
1549128455515:info.y    <- c(info.y, maxDepth * 1.5)
1549128455517:covs      <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549128455519:avgDepths <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549128455521:}
1549128455523:labelsData <- data.frame(Allele = alleles,
1549128455525:name.x = name.x,
1549128455527:name.y = name.y,
1549128455528:info.x = info.x,
1549128455531:info.y = info.y,
1549128455532:meanDepth = avgDepths,
1549128455534:N = rep(unique(data.to.plot$N), nLoci),
1549128455536:Locus = lociLabels,
1549128455538:cov = covs
1549128455540:) %>%
1549128455542:left_join(data.to.plot %>%
1549128455544:group_by(Allele, Length, NormKmerCount, Score) %>%
1549128455546:summarise(sd = sd(kmerDepth)),
1549128455548:by = c("Allele" = "Allele"))
1549128455550:labelsData
1549128455552:}
1549128455556:# Check for genes/loci file to filter loci to plot  -----------------------
1549128455558:loci.to.plot <- c()
1549128455560:# if (!is.null(gene.file)|| gene.file != "") {
1549128455562:if (!is.null(gene.file) && !is.na(gene.file) && gene.file != "") {
1549128455564:error.message <- CheckFileExists(gene.file)
1549128455565:if (!is.null(error.message)){
1549128455567:cat("Warning:")
1549128455569:cat(error.message)
1549128455571:cat("  The plotting process will continue without filtering genes/loci.\n")
1549128455574:} else {
1549128455575:loci.to.plot <- scan(gene.file, character(), quiet = TRUE)
1549128455576:}
1549128455577:}
1549128455580:# Data processing and plotting --------------------------------------------
1549128455581:cat("Plotting depths... ")
1549128455582:options(stringsAsFactors = T, readr.num_columns = 0)
1549128455584:# Load data
1549128455585:inData <- read_tsv(input.file)
1549128455586:# inData <- read.delim(input.file)
1549128455587:colnames(inData) <- c("N", "Locus", "Allele", "Position", "kmerDepth",
1549128455588:"NormKmerCount", "Coverage", "Score", "AverageKmerDepth")
1549128455590:# Transform data
1549128455591:data.to.plot <- inData %>%
1549128455592:left_join(inData %>%
1549128455593:group_by(Allele) %>%
1549128455595:summarise(Length = n()), by = "Allele") %>%
1549128455596:arrange(Locus, N) %>%
1549128455597:mutate(
1549128455598:AlPos = factor(N, levels = unique(.$N)),
1549128455600:Allele = factor(Allele, levels = unique(inData$Allele)))
1549128455601:# Filtering loci/genes from genes_file input param
1549128455602:if (length(loci.to.plot) > 0) {
1549128455603:data.to.plot <- data.to.plot %>%
1549128455605:filter(Locus %in% loci.to.plot)
1549128455606:}
1549128455607:longestLocusNameLength <- max(str_length(as.character(unique(inData$Locus))))
1549128455609:nLoci    <- length(unique(data.to.plot$Locus))
1549128455611:nAlleles <- length(unique(data.to.plot$N))
1549128455615:# Theme-related variable definition ---------------------------------------
1549128455616:annotLinetype     <- "solid"
1549128455618:annotTextSize     <- 4
1549128455619:axisColor         <- "#000000"
1549128455621:axisTextSize      <- 12
1549128455622:barAnnotTextSize  <- 4
1549128455624:baseTextSize      <- 14
1549128455625:gridColor         <- "#e0e0e0"
1549128455627:lineSize          <- 0.3
1549128455629:# panelColor        <- "#ffffff"
1549128455630:# panelColor        <- "#fff4e0"
1549128455632:panelColor        <- "#f2efe6"
1549128455635:# stripBackground   <- "#cccccc"
1549128455637:stripTextSize     <- axisTextSize
1549128455639:if (longestLocusNameLength > 12)
1549128455642:stripTextSize  <- stripTextSize * 0.6
1549128455644:textColor  <- "#000000"
1549128455646:# baseFontFamily        <- "Arial"
1549128455651:# Custom theme definition for plots ---------------------------------------
1549128455653:plotTheme <- list(
1549128455655:theme(
1549128455658:axis.text.x      = element_text(angle = 50, size = axisTextSize,
1549128455660:vjust = 1, hjust = 1, color = textColor),
1549128455662:axis.text.y      = element_text(size = axisTextSize, color = textColor),
1549128455665:axis.ticks       = element_line(size = lineSize),
1549128455667:axis.title.x     = element_text(margin = margin(6,0,8,0, "mm")),
1549128455669:axis.title.y     = element_text(margin = margin(0,6,0,0, "mm")),
1549128455672:legend.position  = "none",
1549128455674:panel.border     = element_rect(size = lineSize),
1549128455676:panel.background = element_rect(fill = panelColor),
1549128455678:panel.grid       = element_line(size = lineSize, colour = gridColor),
1549128455681:panel.grid.minor = element_blank(),
1549128455683:plot.margin      = margin(10,10,0,10, "mm"),
1549128455685:panel.spacing    = unit(4, "mm"),
1549128455687:plot.caption     = element_text(size = baseTextSize * 0.7, face = "italic"),
1549128455701:plot.title       = element_text(hjust = 0.5),
1549128455703:plot.subtitle    = element_text(hjust = 0.5),
1549128455706:strip.background = element_rect(size = lineSize),
1549128455708:strip.text       = element_text(size = stripTextSize),
1549128455711:text             = element_text(size = baseTextSize)
1549128455725:)
1549128455728:)
1549128455733:# Palette definition ------------------------------------------------------
1549128455735:# colourCount <- length(unique(inData$Locus))
1549128455750:rowsPerPage <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549128455752:# colourCount <- nLoci
1549128455755:colourCount <- rowsPerPage
1549128455758:# colourCount  <- length(unique(data.to.plot$Allele))
1549128455764:# fillPalette  <- colorRampPalette(brewer.pal(8, "Dark2"))(colourCount)
1549128455767:# fillPalette  <- colorRampPalette(brewer.pal(12, "Paired"))(colourCount)
1549128455770:# fillPalette  <- colorRampPalette(brewer.pal(9, "Set1"))(colourCount)
1549128455772:# fillPalette  <- colorRampPalette(pal_npg("nrc")(10))(colourCount)
1549128455775:# fillPalette  <- colorRampPalette(pal_d3("category20")(20))(colourCount)
1549128455777:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549128455780:borderPalette <- darkColors(fillPalette, 0.6)
1549128455783:# library("scales"); show_col(fillPalette); show_col(borderPalette)
1549128455791:# Depth plot -------------------------------------------------------------
1549128455793:# lociPerPage    <- 3
1549128455795:wFactor        <- 4.8
1549128455797:plotTitlesSize <- 2.39
1549128455800:getPlotHeight <- function(rows, extras){
1549128455802:hFactor <- ifelse(rows == 1, 1.88, 1.6)
1549128455804:# loci + titles and foot note + strip + space between locus
1549128455806:(rows*hFactor) + extras + ((rows-1)*0.157) #in
1549128455808:}
1549128455812:# rowsPerPage <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549128455818:height      <- getPlotHeight(rowsPerPage, plotTitlesSize)
1549128455821:width       <- nAlleles * wFactor
1549128455824:loci        <- unique(data.to.plot$Locus)
1549128455828:sets        <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549128455833:plots <- lapply(sets, function(set, dp=data.to.plot, rp=rowsPerPage){
1549128455835:nLoci        <- length(set)
1549128455837:subsetToPlot <- dp %>% filter(Locus %in% set)
1549128455839:# subPalette   <-
1549128455841:ld           <- getLabelsData(subsetToPlot)
1549128455843:p            <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette)
1549128455845:if(nLoci < rp){
1549128455847:hlay    <- matrix(c(1, NA))
1549128455849:total   <- getPlotHeight(rp, plotTitlesSize)
1549128455852:cHeight <- getPlotHeight(nLoci, plotTitlesSize)
1549128455854:blank   <- getPlotHeight(rp-nLoci, 0)
1549128455857:heights <- matrix(c(cHeight/total, blank/total))
1549128455859:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549128455862:}
1549128455865:p
1549128455868:})
1549128455873:if (out.format == "pdf") {
1549128455876:out.filename <- paste(out.prefix, out.format, sep = ".")
1549128455879:ml <- marrangeGrob(plots, nrow=1, ncol=1, padding = unit(10, "mm"),
1549128455882:top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549128455885:ggsave(filename = out.filename, plot = ml,
1549128455888:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549128455891:}
1549128455894:else {
1549128455897:for (i in seq_along(plots)) {
1549128455900:out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549128455903:ggsave(filename = out.filename, plot = plots[[i]],
1549128455906:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549128455909:}
1549128455913:}
1549128455918:# # Depth distribution plot ------------------------------------------------
1549128455920:# hFactor  <- 3
1549128455922:# wFactor  <- 2
1549128455925:# if (nLoci == 1)
1549128455927:#   hFactor <- 3.5
1549128455929:# height       <- nLoci * hFactor
1549128455932:# width        <- nAlleles * wFactor
1549128455934:# # Generate plot
1549128455937:# (dist.plot <- plotDepthDist(data.to.plot, labelsData, fillPalette, borderPalette))
1549128455940:# # Save plot
1549128455943:# out.filename <- paste0(out.prefix, "_dist.", out.format)
1549128455946:# if (out.format == "png") {
1549128455949:#   ggsave(filename = out.filename, plot = dist.plot,
1549128455952:#          width  = width, height = height, type = "cairo-png", dpi = 300)
1549128455955:# } else {
1549128455958:#   ggsave(filename = out.filename, plot = dist.plot,
1549128455961:#          width  = width, height = height, dpi = 400)
1549128455964:# }
1549128455970:cat("Done! \n")
1549128455976:# Code core - End ---------------------------------------------------------
1549128455979:}
1549128544314:#!/usr/bin/env Rscript
1549128544314:# ##############################################################################
1549128544314:#  Author:   Hector Fabio Espitia-Navarro
1549128544315:#            Georgia Institute of Technology
1549128544315:#  Version:  1.0
1549128544315:#  Date:     01/19/2019
1549128544316:# ##############################################################################
1549128544317:# Install required packages -----------------------------------------------
1549128544317:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549128544318:if(!file.exists(personal.lib.path))
1549128544318:dir.create(personal.lib.path)
1549128544319:printMessage <- function(message, verbose){
1549128544320:if(verbose)
1549128544321:cat(message)
1549128544322:}
1549128544325:# crayon::bold("Hola")
1549128544326:installAndLoadPackages <- function(pkg, verbose){
1549128544326:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1549128544327:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1549128544328:printMessage("Done!\n", verbose)
1549128544328:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549128544329:if (length(new.pkg)) {
1549128544329:printMessage("Installing new packages... ", verbose)
1549128544330:install.packages(new.pkg, dependencies = TRUE,
1549128544330:repos="http://cran.rstudio.com/",
1549128544331:lib = personal.lib.path)
1549128544331:printMessage("Done!\n", verbose)
1549128544332:}
1549128544333:printMessage("Loading required packages... ", verbose)
1549128544333:sapply(pkg, function(x){
1549128544334:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549128544334:})
1549128544335:printMessage("Done!\n", verbose)
1549128544335:}
1549128544337:# github.related.packages <- c("devtools", "Rcpp")
1549128544337:# packages <- c("argparser", "tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite")
1549128544338:packages <- c("tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite", "gridExtra")
1549128544338:# installAndLoadPackages(packages, verbose = TRUE)
1549128544339:installAndLoadPackages("argparser", verbose = FALSE)
1549128544377:# Command line arguments processing ---------------------------------------
1549128544378:# Get script name
1549128544378:initial.options <- commandArgs(trailingOnly = FALSE)
1549128544388:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1549128544389:# Process command line arguments
1549128544390:# Create a parser
1549128544390:p <- arg_parser("This script generates k-mer depth plots using a depth file generated by the\033[1mSTing typer\033[22m tool (-t option).",
1549128544391:name = script.name)
1549128544394:# Add Positional arguments (required)
1549128544394:p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
1549128544396:# Add options
1549128544404:p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1549128544406:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1549128544407:default = "kmer_depth")
1549128544408:p <- add_argument(p, "--sample_name", help = "Sample name.",
1549128544409:default = "input file's name")
1549128544410:p <- add_argument(p, "--max_loci_per_page", help = "Maximum number of loci to print on each page.",
1549128544411:default = 7)
1549128544421:p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'",
1549128544421:default = "pdf")
1549128544423:# Initialization of variables ---------------------------------------------
1549128544423:# Values to test the script using RStudio
1549128544424:script.home       <- "/home/hspitia/projects/sting"
1549128544425:# inputFile         <- paste(script.home, "ERR036060.depth.2.tsv", sep = "/")
1549128544425:# geneFile          <- paste(script.home, "rmlst_failed_loci.txt", sep = "/")
1549128544426:inputFile         <- paste(script.home, "depth.tsv", sep = "/")
1549128544426:geneFile          <- paste(script.home, "loci.txt", sep = "/")
1549128544427:out.prefix        <- "kmer_ext_depth"
1549128544440:sample.name       <- basename(inputFile)
1549128544441:max.loci.per.page <- 3
1549128544442:out.format        <- "png"
1549128544443:# Parse command line arguments
1549128544443:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1549128544444:argv <- list()
1549128544445:if(command.line) {
1549128544445:argv <- parse_args(p)
1549128544446:} else {
1549128544446:argv <- parse_args(p, list(inputFile,
1549128544447:# "--gene_file", geneFile,
1549128544447:"--prefix", out.prefix,
1549128544448:"--sample_name", sample.name,
1549128544448:"--max_loci_per_page", max.loci.per.page,
1549128544449:"--format", out.format))
1549128544449:}
1549128544461:# Get argument values from the command line
1549128544461:input.file        <- argv$input_file
1549128544462:gene.file         <- argv$gene_file
1549128544463:out.format        <- argv$format
1549128544464:out.prefix        <- argv$prefix
1549128544465:max.loci.per.page <- argv$max_loci_per_page
1549128544465:sample.name       <- argv$sample_name
1549128544466:# if (sample.name == "")
1549128544467:if (sample.name == "input file's name")
1549128544467:sample.name <- basename(input.file)
1549128544469:# Function to check if file exists ----------------------------------------
1549128544469:CheckFileExists <- function(file.list) {
1549128544470:non.exist.files <- !file.exists(file.list)
1549128544470:if(any(non.exist.files)) {
1549128544471:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549128544471:}
1549128544472:}
1549128544472:# Check for input files ---------------------------------------------------
1549128544473:files.to.check <- c(input.file)
1549128544474:error.message  <- CheckFileExists(files.to.check)
1549128544475:if(!is.null(error.message)){
1549128544475:stop(error.message)
1549128544476:} else {
1549128544476:# Code core - Begin -------------------------------------------------------
1549128544477:installAndLoadPackages(packages, verbose = TRUE)
1549128544477:# FUNCTIONS:
1549128544478:# Function to dark a list of colors ---------------------------------------
1549128544478:darkColors <- function(palette, level){
1549128544479:rgbColors <- as.data.frame(t(as.data.frame(lapply(as.data.frame(t(col2rgb(palette))),
1549128544479:function(x) { round(x * level)}))))
1549128544480:unname(sapply(rgbColors, function(x){ rgb(x[1], x[2], x[3], maxColorValue=255) }))
1549128544480:}
1549128544481:# Function for plotting k-mer depth ----------------------------------------
1549128544481:plotDepth <- function(dataToPlot, labelsData, fillColors, borderColors) {
1549128544482:max.x       <- max(dataToPlot$Position)
1549128544483:max.y       <- max(dataToPlot$kmerDepth)
1549128544483:x.limits    <- seq(0, max.x, 100)
1549128544484:y.limits    <- seq(0, max.y, 20)
1549128544484:nTopAlleles <- length(unique(dataToPlot$N))
1549128544486:d.plot <- ggplot(data = dataToPlot, aes(x = Position, y = kmerDepth),
1549128544486:size = 0.2) +
1549128544487:geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1549128544488:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1549128544489:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1549128544489:# scale_color_manual(values = getPalette) +
1549128544491:scale_color_manual(values = borderColors) +
1549128544492:scale_fill_manual(values = fillColors) +
1549128544492:geom_text(data = labelsData,
1549128544493:# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1549128544494:# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1549128544495:aes(x = Length, y = info.y * 0.5, group = Locus,
1549128544496:hjust = 0,
1549128544496:label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1549128544497:show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1549128544498:nudge_x = -(max.x*0.025)
1549128544499:) +
1549128544500:geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1549128544501:alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1549128544502:# geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1549128544503:size = annotTextSize * 1.05, color = "#333333") +
1549128544504:geom_text(data = labelsData,
1549128544505:parse = TRUE,
1549128544505:aes(x = info.x, y = info.y,
1549128544506:label = paste0("{{{{italic(s)==", format(round(Score, 2), nsmall = 2),
1549128544507:"*~~~italic(hat(f)[k])} ==", format(round(NormKmerCount, 2), nsmall = 2),
1549128544508:"*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1549128544509:"*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1549128544510:"~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1549128544511:hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1549128544512:facet_grid(Locus ~ N, scales = "free_y") +
1549128544513:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1549128544514:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1549128544515:theme_bw() +
1549128544516:plotTheme +
1549128544517:labs(title    = expression(italic("k")*"-mer depth"),
1549128544518:subtitle = paste("Top", nTopAlleles, "alleles/genes on sample", sample.name),
1549128544519:x        = "Position along sequence (bp)",
1549128544520:y        = expression(paste(italic(k), "-mer depth")),
1549128544521:# caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1549128544523:caption  = expression(paste(italic("s"),": score;  ",
1549128544525:italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1549128544527:italic("c"),": coverage;  ",
1549128544529:italic(sigma), ": standard deviation;  ",
1549128544531:italic(bar(d)), ": average depth"), sep = "")
1549128544532:)
1549128544533:# guides(fill  = guide_legend(title  ="Allele"), color = FALSE) +
1549128544535:d.plot
1549128544547:}
1549128544548:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549128544550:# Function for plotting k-mer depth distributions as box plots ------------
1549128544551:plotDepthDist <- function(data.to.plot, labelsData, fillColors, borderColors){
1549128544552:dist.plot <- ggplot(data.to.plot, aes(x = AlPos, y = kmerDepth)) +
1549128544554:geom_jitter(position = position_jitter(width=.3), aes(color = Locus),
1549128544556:alpha = 0.4, size = 1.2, shape = 16) +
1549128544557:geom_boxplot(alpha = 0.7, size = 0.5, aes(fill = Locus, color = Locus)) +
1549128544559:geom_text(data = labelsData, size = 4, hjust = "center",
1549128544560:aes(x = N,#(N - 0.5),
1549128544561:y = info.y * 1.05,
1549128544563:label = Allele),
1549128544564:color = "#333333") +
1549128544565:geom_text(data = labelsData, size = 3, hjust = "center",
1549128544566:parse = TRUE,
1549128544567:aes(x = N,#(N - 0.4),
1549128544568:# y = info.y * 0.08,
1549128544569:y = info.y * 0.96,
1549128544570:label = paste0("sigma ==",format(round(sd, 1), nsmall = 1))),
1549128544570:color = "#333333") +
1549128544571:geom_point(data = labelsData,
1549128544573:shape = 23, fill = "white",
1549128544574:aes(x = N, y = meanDepth)) +
1549128544575:facet_grid(Locus ~ ., scales = "free_y") +
1549128544576:scale_color_manual(values = borderColors) +
1549128544577:scale_fill_manual(values = fillColors) +
1549128544577:labs(title = expression(paste(italic("k"), "-mer depth distribution")),
1549128544578:subtitle = basename(input.file),
1549128544579:x        = "Allele Ranking",
1549128544580:y        = expression(paste(italic(k), "-mer depth")),
1549128544581:caption  = expression(paste(italic(sigma), ": standard deviation")))+#,"sd: standard deviation") +
1549128544582:theme_bw() +
1549128544583:plotTheme +
1549128544584:theme(axis.text.x   = element_text(angle = 0, size = axisTextSize,
1549128544585:vjust = 1, hjust = 0.5, color = textColor))
1549128544586:dist.plot
1549128544587:}
1549128544589:# Function to get data for annotations ------------------------------------
1549128544590:getLabelsData <- function(data.to.plot) {
1549128544591:max.x <- max(data.to.plot$Position)
1549128544592:max.y <- max(data.to.plot$kmerDepth)
1549128544594:nLoci    <- length(unique(data.to.plot$Locus))
1549128544595:nAlleles <- length(unique(data.to.plot$N))
1549128544597:alleles     <- unique(data.to.plot$Allele)
1549128544598:loci        <- as.character(unique(data.to.plot$Locus))
1549128544599:lociLabels  <- c()
1549128544600:name.x      <- c()
1549128544601:name.y      <- c()
1549128544602:info.x      <- c()
1549128544603:info.y      <- c()
1549128544605:covs        <- c()
1549128544606:avgDepths   <- c()
1549128544607:meanDepth.x <- c()
1549128544608:meanDepth.y <- c()
1549128544609:for (i in loci) {
1549128544610:lociLabels <- c(lociLabels, rep(i, nAlleles))
1549128544611:}
1549128544612:for (allele in alleles) {
1549128544613:locus     <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1549128544615:maxPos    <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549128544616:maxDepth  <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549128544617:name.x    <- c(name.x, (max.x / 2))
1549128544618:name.y    <- c(name.y, (maxDepth * 0.25))
1549128544619:info.x    <- c(info.x, max.x * 0.02)
1549128544621:info.y    <- c(info.y, maxDepth * 1.5)
1549128544622:covs      <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549128544623:avgDepths <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549128544624:}
1549128544625:labelsData <- data.frame(Allele = alleles,
1549128544627:name.x = name.x,
1549128544628:name.y = name.y,
1549128544629:info.x = info.x,
1549128544630:info.y = info.y,
1549128544632:meanDepth = avgDepths,
1549128544633:N = rep(unique(data.to.plot$N), nLoci),
1549128544634:Locus = lociLabels,
1549128544635:cov = covs
1549128544637:) %>%
1549128544638:left_join(data.to.plot %>%
1549128544639:group_by(Allele, Length, NormKmerCount, Score) %>%
1549128544641:summarise(sd = sd(kmerDepth)),
1549128544642:by = c("Allele" = "Allele"))
1549128544643:labelsData
1549128544644:}
1549128544647:# Check for genes/loci file to filter loci to plot  -----------------------
1549128544648:loci.to.plot <- c()
1549128544650:# if (!is.null(gene.file)|| gene.file != "") {
1549128544651:if (!is.null(gene.file) && !is.na(gene.file) && gene.file != "") {
1549128544652:error.message <- CheckFileExists(gene.file)
1549128544654:if (!is.null(error.message)){
1549128544655:cat("Warning:")
1549128544656:cat(error.message)
1549128544657:cat("  The plotting process will continue without filtering genes/loci.\n")
1549128544659:} else {
1549128544660:loci.to.plot <- scan(gene.file, character(), quiet = TRUE)
1549128544661:}
1549128544663:}
1549128544667:# Data processing and plotting --------------------------------------------
1549128544669:cat("Plotting depths... ")
1549128544671:options(stringsAsFactors = T, readr.num_columns = 0)
1549128544673:# Load data
1549128544675:inData <- read_tsv(input.file)
1549128544677:# inData <- read.delim(input.file)
1549128544680:colnames(inData) <- c("N", "Locus", "Allele", "Position", "kmerDepth",
1549128544683:"NormKmerCount", "Coverage", "Score", "AverageKmerDepth")
1549128544685:# Transform data
1549128544687:data.to.plot <- inData %>%
1549128544689:left_join(inData %>%
1549128544691:group_by(Allele) %>%
1549128544693:summarise(Length = n()), by = "Allele") %>%
1549128544695:arrange(Locus, N) %>%
1549128544697:mutate(
1549128544699:AlPos = factor(N, levels = unique(.$N)),
1549128544701:Allele = factor(Allele, levels = unique(inData$Allele)))
1549128544705:# Filtering loci/genes from genes_file input param
1549128544707:if (length(loci.to.plot) > 0) {
1549128544709:data.to.plot <- data.to.plot %>%
1549128544717:filter(Locus %in% loci.to.plot)
1549128544719:}
1549128544721:longestLocusNameLength <- max(str_length(as.character(unique(inData$Locus))))
1549128544724:nLoci    <- length(unique(data.to.plot$Locus))
1549128544726:nAlleles <- length(unique(data.to.plot$N))
1549128544731:# Theme-related variable definition ---------------------------------------
1549128544733:annotLinetype     <- "solid"
1549128544735:annotTextSize     <- 4
1549128544738:axisColor         <- "#000000"
1549128544740:axisTextSize      <- 12
1549128544742:barAnnotTextSize  <- 4
1549128544744:baseTextSize      <- 14
1549128544746:gridColor         <- "#e0e0e0"
1549128544749:lineSize          <- 0.3
1549128544751:# panelColor        <- "#ffffff"
1549128544753:# panelColor        <- "#fff4e0"
1549128544756:panelColor        <- "#f2efe6"
1549128544758:# stripBackground   <- "#cccccc"
1549128544760:stripTextSize     <- axisTextSize
1549128544762:if (longestLocusNameLength > 12)
1549128544764:stripTextSize  <- stripTextSize * 0.6
1549128544767:textColor  <- "#000000"
1549128544769:# baseFontFamily        <- "Arial"
1549128544773:# Custom theme definition for plots ---------------------------------------
1549128544776:plotTheme <- list(
1549128544778:theme(
1549128544780:axis.text.x      = element_text(angle = 50, size = axisTextSize,
1549128544782:vjust = 1, hjust = 1, color = textColor),
1549128544785:axis.text.y      = element_text(size = axisTextSize, color = textColor),
1549128544787:axis.ticks       = element_line(size = lineSize),
1549128544789:axis.title.x     = element_text(margin = margin(6,0,8,0, "mm")),
1549128544792:axis.title.y     = element_text(margin = margin(0,6,0,0, "mm")),
1549128544796:legend.position  = "none",
1549128544799:panel.border     = element_rect(size = lineSize),
1549128544801:panel.background = element_rect(fill = panelColor),
1549128544804:panel.grid       = element_line(size = lineSize, colour = gridColor),
1549128544806:panel.grid.minor = element_blank(),
1549128544809:plot.margin      = margin(10,10,0,10, "mm"),
1549128544811:panel.spacing    = unit(4, "mm"),
1549128544814:plot.caption     = element_text(size = baseTextSize * 0.7, face = "italic"),
1549128544816:plot.title       = element_text(hjust = 0.5),
1549128544819:plot.subtitle    = element_text(hjust = 0.5),
1549128544822:strip.background = element_rect(size = lineSize),
1549128544824:strip.text       = element_text(size = stripTextSize),
1549128544827:text             = element_text(size = baseTextSize)
1549128544829:)
1549128544832:)
1549128544837:# Palette definition ------------------------------------------------------
1549128544840:# colourCount <- length(unique(inData$Locus))
1549128544842:rowsPerPage <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549128544845:# colourCount <- nLoci
1549128544848:colourCount <- rowsPerPage
1549128544851:# colourCount  <- length(unique(data.to.plot$Allele))
1549128544854:# fillPalette  <- colorRampPalette(brewer.pal(8, "Dark2"))(colourCount)
1549128544856:# fillPalette  <- colorRampPalette(brewer.pal(12, "Paired"))(colourCount)
1549128544859:# fillPalette  <- colorRampPalette(brewer.pal(9, "Set1"))(colourCount)
1549128544862:# fillPalette  <- colorRampPalette(pal_npg("nrc")(10))(colourCount)
1549128544865:# fillPalette  <- colorRampPalette(pal_d3("category20")(20))(colourCount)
1549128544868:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549128544871:borderPalette <- darkColors(fillPalette, 0.6)
1549128544873:# library("scales"); show_col(fillPalette); show_col(borderPalette)
1549128544884:# Depth plot -------------------------------------------------------------
1549128544887:# lociPerPage    <- 3
1549128544889:wFactor        <- 4.8
1549128544892:plotTitlesSize <- 2.39
1549128544898:getPlotHeight <- function(rows, extras){
1549128544901:hFactor <- ifelse(rows == 1, 1.88, 1.6)
1549128544903:# loci + titles and foot note + strip + space between locus
1549128544906:(rows*hFactor) + extras + ((rows-1)*0.157) #in
1549128544909:}
1549128544917:# rowsPerPage <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549128544920:height      <- getPlotHeight(rowsPerPage, plotTitlesSize)
1549128544923:width       <- nAlleles * wFactor
1549128544925:loci        <- unique(data.to.plot$Locus)
1549128544928:sets        <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549128544933:plots <- lapply(sets, function(set, dp=data.to.plot, rp=rowsPerPage){
1549128544936:nLoci        <- length(set)
1549128544938:subsetToPlot <- dp %>% filter(Locus %in% set)
1549128544941:# subPalette   <-
1549128544944:ld           <- getLabelsData(subsetToPlot)
1549128544947:p            <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette)
1549128544950:if(nLoci < rp){
1549128544953:hlay    <- matrix(c(1, NA))
1549128544955:total   <- getPlotHeight(rp, plotTitlesSize)
1549128544958:cHeight <- getPlotHeight(nLoci, plotTitlesSize)
1549128544961:blank   <- getPlotHeight(rp-nLoci, 0)
1549128544964:heights <- matrix(c(cHeight/total, blank/total))
1549128544967:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549128544970:}
1549128544973:p
1549128544975:})
1549128544979:if (out.format == "pdf") {
1549128544981:out.filename <- paste(out.prefix, out.format, sep = ".")
1549128544982:ml <- marrangeGrob(plots, nrow=1, ncol=1, padding = unit(10, "mm"),
1549128544984:top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549128544986:ggsave(filename = out.filename, plot = ml,
1549128544988:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549128544990:}
1549128544992:else {
1549128544994:for (i in seq_along(plots)) {
1549128544995:out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549128544997:ggsave(filename = out.filename, plot = plots[[i]],
1549128544999:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549128545001:}
1549128545003:}
1549128545007:# # Depth distribution plot ------------------------------------------------
1549128545010:# hFactor  <- 3
1549128545012:# wFactor  <- 2
1549128545014:# if (nLoci == 1)
1549128545016:#   hFactor <- 3.5
1549128545019:# height       <- nLoci * hFactor
1549128545022:# width        <- nAlleles * wFactor
1549128545026:# # Generate plot
1549128545028:# (dist.plot <- plotDepthDist(data.to.plot, labelsData, fillPalette, borderPalette))
1549128545030:# # Save plot
1549128545033:# out.filename <- paste0(out.prefix, "_dist.", out.format)
1549128545036:# if (out.format == "png") {
1549128545039:#   ggsave(filename = out.filename, plot = dist.plot,
1549128545042:#          width  = width, height = height, type = "cairo-png", dpi = 300)
1549128545045:# } else {
1549128545048:#   ggsave(filename = out.filename, plot = dist.plot,
1549128545051:#          width  = width, height = height, dpi = 400)
1549128545054:# }
1549128545060:cat("Done! \n")
1549128545066:# Code core - End ---------------------------------------------------------
1549128545080:}
1549128587912:#!/usr/bin/env Rscript
1549128587913:# ##############################################################################
1549128587913:#  Author:   Hector Fabio Espitia-Navarro
1549128587914:#            Georgia Institute of Technology
1549128587914:#  Version:  1.0
1549128587915:#  Date:     01/19/2019
1549128587915:# ##############################################################################
1549128587915:# Install required packages -----------------------------------------------
1549128587916:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549128587916:if(!file.exists(personal.lib.path))
1549128587917:dir.create(personal.lib.path)
1549128587917:printMessage <- function(message, verbose){
1549128587918:if(verbose)
1549128587918:cat(message)
1549128587918:}
1549128587919:# crayon::bold("Hola")
1549128587919:installAndLoadPackages <- function(pkg, verbose){
1549128587919:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1549128587920:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1549128587920:printMessage("Done!\n", verbose)
1549128587920:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549128587921:if (length(new.pkg)) {
1549128587921:printMessage("Installing new packages... ", verbose)
1549128587921:install.packages(new.pkg, dependencies = TRUE,
1549128587922:repos="http://cran.rstudio.com/",
1549128587922:lib = personal.lib.path)
1549128587923:printMessage("Done!\n", verbose)
1549128587923:}
1549128587924:printMessage("Loading required packages... ", verbose)
1549128587924:sapply(pkg, function(x){
1549128587924:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549128587925:})
1549128587925:printMessage("Done!\n", verbose)
1549128587926:}
1549128587927:# github.related.packages <- c("devtools", "Rcpp")
1549128587927:# packages <- c("argparser", "tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite")
1549128587928:packages <- c("tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite", "gridExtra")
1549128587929:# installAndLoadPackages(packages, verbose = TRUE)
1549128587929:installAndLoadPackages("argparser", verbose = FALSE)
1549128587956:# Command line arguments processing ---------------------------------------
1549128587957:# Get script name
1549128587957:initial.options <- commandArgs(trailingOnly = FALSE)
1549128587958:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1549128587958:# Process command line arguments
1549128587959:# Create a parser
1549128587959:p <- arg_parser("This script generates k-mer depth plots using a depth file generated by the\033[1mSTing typer\033[22m tool (-t option).",
1549128587959:name = script.name)
1549128587961:# Add Positional arguments (required)
1549128587961:p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
1549128587962:# Add options
1549128587963:p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1549128587964:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1549128587964:default = "kmer_depth")
1549128587965:p <- add_argument(p, "--sample_name", help = "Sample name.",
1549128587965:default = "input file's name")
1549128587966:p <- add_argument(p, "--max_loci_per_page", help = "Maximum number of loci to print on each page.",
1549128587967:default = 7)
1549128587968:p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'",
1549128587968:default = "pdf")
1549128587969:# Initialization of variables ---------------------------------------------
1549128587969:# Values to test the script using RStudio
1549128587970:script.home       <- "/home/hspitia/projects/sting"
1549128587970:# inputFile         <- paste(script.home, "ERR036060.depth.2.tsv", sep = "/")
1549128587970:# geneFile          <- paste(script.home, "rmlst_failed_loci.txt", sep = "/")
1549128587971:inputFile         <- paste(script.home, "depth.tsv", sep = "/")
1549128587971:geneFile          <- paste(script.home, "loci.txt", sep = "/")
1549128587972:out.prefix        <- "kmer_ext_depth"
1549128587972:sample.name       <- basename(inputFile)
1549128587973:max.loci.per.page <- 4
1549128587973:out.format        <- "png"
1549128587974:# Parse command line arguments
1549128587974:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1549128587974:argv <- list()
1549128587975:if(command.line) {
1549128587975:argv <- parse_args(p)
1549128587975:} else {
1549128587976:argv <- parse_args(p, list(inputFile,
1549128587976:# "--gene_file", geneFile,
1549128587976:"--prefix", out.prefix,
1549128587977:"--sample_name", sample.name,
1549128587977:"--max_loci_per_page", max.loci.per.page,
1549128587977:"--format", out.format))
1549128587977:}
1549128587979:# Get argument values from the command line
1549128587979:input.file        <- argv$input_file
1549128587980:gene.file         <- argv$gene_file
1549128587980:out.format        <- argv$format
1549128587981:out.prefix        <- argv$prefix
1549128587981:max.loci.per.page <- argv$max_loci_per_page
1549128587981:sample.name       <- argv$sample_name
1549128587982:# if (sample.name == "")
1549128587982:if (sample.name == "input file's name")
1549128587983:sample.name <- basename(input.file)
1549128587983:# Function to check if file exists ----------------------------------------
1549128587983:CheckFileExists <- function(file.list) {
1549128587984:non.exist.files <- !file.exists(file.list)
1549128587984:if(any(non.exist.files)) {
1549128587984:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549128587985:}
1549128587985:}
1549128587985:# Check for input files ---------------------------------------------------
1549128587986:files.to.check <- c(input.file)
1549128587987:error.message  <- CheckFileExists(files.to.check)
1549128587988:if(!is.null(error.message)){
1549128587988:stop(error.message)
1549128587989:} else {
1549128587989:# Code core - Begin -------------------------------------------------------
1549128587990:installAndLoadPackages(packages, verbose = TRUE)
1549128587990:# FUNCTIONS:
1549128587991:# Function to dark a list of colors ---------------------------------------
1549128587991:darkColors <- function(palette, level){
1549128587992:rgbColors <- as.data.frame(t(as.data.frame(lapply(as.data.frame(t(col2rgb(palette))),
1549128587992:function(x) { round(x * level)}))))
1549128587993:unname(sapply(rgbColors, function(x){ rgb(x[1], x[2], x[3], maxColorValue=255) }))
1549128587993:}
1549128587994:# Function for plotting k-mer depth ----------------------------------------
1549128587994:plotDepth <- function(dataToPlot, labelsData, fillColors, borderColors) {
1549128587995:max.x       <- max(dataToPlot$Position)
1549128587995:max.y       <- max(dataToPlot$kmerDepth)
1549128587996:x.limits    <- seq(0, max.x, 100)
1549128587997:y.limits    <- seq(0, max.y, 20)
1549128587997:nTopAlleles <- length(unique(dataToPlot$N))
1549128587998:d.plot <- ggplot(data = dataToPlot, aes(x = Position, y = kmerDepth),
1549128587999:size = 0.2) +
1549128588000:geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1549128588000:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1549128588001:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1549128588002:# scale_color_manual(values = getPalette) +
1549128588003:scale_color_manual(values = borderColors) +
1549128588003:scale_fill_manual(values = fillColors) +
1549128588004:geom_text(data = labelsData,
1549128588005:# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1549128588005:# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1549128588006:aes(x = Length, y = info.y * 0.5, group = Locus,
1549128588007:hjust = 0,
1549128588008:label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1549128588008:show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1549128588009:nudge_x = -(max.x*0.025)
1549128588010:) +
1549128588011:geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1549128588011:alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1549128588012:# geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1549128588013:size = annotTextSize * 1.05, color = "#333333") +
1549128588016:geom_text(data = labelsData,
1549128588016:parse = TRUE,
1549128588017:aes(x = info.x, y = info.y,
1549128588018:label = paste0("{{{{italic(s)==", format(round(Score, 2), nsmall = 2),
1549128588019:"*~~~italic(hat(f)[k])} ==", format(round(NormKmerCount, 2), nsmall = 2),
1549128588020:"*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1549128588021:"*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1549128588022:"~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1549128588023:hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1549128588024:facet_grid(Locus ~ N, scales = "free_y") +
1549128588026:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1549128588027:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1549128588029:theme_bw() +
1549128588030:plotTheme +
1549128588031:labs(title    = expression(italic("k")*"-mer depth"),
1549128588033:subtitle = paste("Top", nTopAlleles, "alleles/genes on sample", sample.name),
1549128588034:x        = "Position along sequence (bp)",
1549128588035:y        = expression(paste(italic(k), "-mer depth")),
1549128588036:# caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1549128588039:caption  = expression(paste(italic("s"),": score;  ",
1549128588041:italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1549128588043:italic("c"),": coverage;  ",
1549128588050:italic(sigma), ": standard deviation;  ",
1549128588053:italic(bar(d)), ": average depth"), sep = "")
1549128588054:)
1549128588056:# guides(fill  = guide_legend(title  ="Allele"), color = FALSE) +
1549128588057:d.plot
1549128588058:}
1549128588059:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549128588060:# Function for plotting k-mer depth distributions as box plots ------------
1549128588062:plotDepthDist <- function(data.to.plot, labelsData, fillColors, borderColors){
1549128588064:dist.plot <- ggplot(data.to.plot, aes(x = AlPos, y = kmerDepth)) +
1549128588066:geom_jitter(position = position_jitter(width=.3), aes(color = Locus),
1549128588067:alpha = 0.4, size = 1.2, shape = 16) +
1549128588068:geom_boxplot(alpha = 0.7, size = 0.5, aes(fill = Locus, color = Locus)) +
1549128588069:geom_text(data = labelsData, size = 4, hjust = "center",
1549128588070:aes(x = N,#(N - 0.5),
1549128588071:y = info.y * 1.05,
1549128588072:label = Allele),
1549128588073:color = "#333333") +
1549128588074:geom_text(data = labelsData, size = 3, hjust = "center",
1549128588075:parse = TRUE,
1549128588075:aes(x = N,#(N - 0.4),
1549128588076:# y = info.y * 0.08,
1549128588078:y = info.y * 0.96,
1549128588079:label = paste0("sigma ==",format(round(sd, 1), nsmall = 1))),
1549128588082:color = "#333333") +
1549128588083:geom_point(data = labelsData,
1549128588083:shape = 23, fill = "white",
1549128588084:aes(x = N, y = meanDepth)) +
1549128588085:facet_grid(Locus ~ ., scales = "free_y") +
1549128588086:scale_color_manual(values = borderColors) +
1549128588087:scale_fill_manual(values = fillColors) +
1549128588088:labs(title = expression(paste(italic("k"), "-mer depth distribution")),
1549128588089:subtitle = basename(input.file),
1549128588090:x        = "Allele Ranking",
1549128588091:y        = expression(paste(italic(k), "-mer depth")),
1549128588092:caption  = expression(paste(italic(sigma), ": standard deviation")))+#,"sd: standard deviation") +
1549128588093:theme_bw() +
1549128588094:plotTheme +
1549128588095:theme(axis.text.x   = element_text(angle = 0, size = axisTextSize,
1549128588096:vjust = 1, hjust = 0.5, color = textColor))
1549128588097:dist.plot
1549128588098:}
1549128588099:# Function to get data for annotations ------------------------------------
1549128588100:getLabelsData <- function(data.to.plot) {
1549128588101:max.x <- max(data.to.plot$Position)
1549128588102:max.y <- max(data.to.plot$kmerDepth)
1549128588104:nLoci    <- length(unique(data.to.plot$Locus))
1549128588105:nAlleles <- length(unique(data.to.plot$N))
1549128588107:alleles     <- unique(data.to.plot$Allele)
1549128588108:loci        <- as.character(unique(data.to.plot$Locus))
1549128588109:lociLabels  <- c()
1549128588111:name.x      <- c()
1549128588112:name.y      <- c()
1549128588113:info.x      <- c()
1549128588114:info.y      <- c()
1549128588115:covs        <- c()
1549128588116:avgDepths   <- c()
1549128588117:meanDepth.x <- c()
1549128588118:meanDepth.y <- c()
1549128588119:for (i in loci) {
1549128588121:lociLabels <- c(lociLabels, rep(i, nAlleles))
1549128588122:}
1549128588123:for (allele in alleles) {
1549128588124:locus     <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1549128588125:maxPos    <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549128588126:maxDepth  <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549128588127:name.x    <- c(name.x, (max.x / 2))
1549128588129:name.y    <- c(name.y, (maxDepth * 0.25))
1549128588130:info.x    <- c(info.x, max.x * 0.02)
1549128588131:info.y    <- c(info.y, maxDepth * 1.5)
1549128588132:covs      <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549128588134:avgDepths <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549128588135:}
1549128588136:labelsData <- data.frame(Allele = alleles,
1549128588138:name.x = name.x,
1549128588139:name.y = name.y,
1549128588141:info.x = info.x,
1549128588143:info.y = info.y,
1549128588144:meanDepth = avgDepths,
1549128588146:N = rep(unique(data.to.plot$N), nLoci),
1549128588148:Locus = lociLabels,
1549128588149:cov = covs
1549128588151:) %>%
1549128588153:left_join(data.to.plot %>%
1549128588155:group_by(Allele, Length, NormKmerCount, Score) %>%
1549128588156:summarise(sd = sd(kmerDepth)),
1549128588159:by = c("Allele" = "Allele"))
1549128588161:labelsData
1549128588163:}
1549128588166:# Check for genes/loci file to filter loci to plot  -----------------------
1549128588168:loci.to.plot <- c()
1549128588169:# if (!is.null(gene.file)|| gene.file != "") {
1549128588170:if (!is.null(gene.file) && !is.na(gene.file) && gene.file != "") {
1549128588172:error.message <- CheckFileExists(gene.file)
1549128588173:if (!is.null(error.message)){
1549128588174:cat("Warning:")
1549128588176:cat(error.message)
1549128588177:cat("  The plotting process will continue without filtering genes/loci.\n")
1549128588179:} else {
1549128588180:loci.to.plot <- scan(gene.file, character(), quiet = TRUE)
1549128588183:}
1549128588185:}
1549128588188:# Data processing and plotting --------------------------------------------
1549128588191:cat("Plotting depths... ")
1549128588194:options(stringsAsFactors = T, readr.num_columns = 0)
1549128588195:# Load data
1549128588201:inData <- read_tsv(input.file)
1549128588203:# inData <- read.delim(input.file)
1549128588205:colnames(inData) <- c("N", "Locus", "Allele", "Position", "kmerDepth",
1549128588207:"NormKmerCount", "Coverage", "Score", "AverageKmerDepth")
1549128588209:# Transform data
1549128588211:data.to.plot <- inData %>%
1549128588220:left_join(inData %>%
1549128588222:group_by(Allele) %>%
1549128588224:summarise(Length = n()), by = "Allele") %>%
1549128588226:arrange(Locus, N) %>%
1549128588228:mutate(
1549128588230:AlPos = factor(N, levels = unique(.$N)),
1549128588232:Allele = factor(Allele, levels = unique(inData$Allele)))
1549128588235:# Filtering loci/genes from genes_file input param
1549128588237:if (length(loci.to.plot) > 0) {
1549128588239:data.to.plot <- data.to.plot %>%
1549128588241:filter(Locus %in% loci.to.plot)
1549128588243:}
1549128588245:longestLocusNameLength <- max(str_length(as.character(unique(inData$Locus))))
1549128588247:nLoci    <- length(unique(data.to.plot$Locus))
1549128588250:nAlleles <- length(unique(data.to.plot$N))
1549128588254:# Theme-related variable definition ---------------------------------------
1549128588256:annotLinetype     <- "solid"
1549128588258:annotTextSize     <- 4
1549128588260:axisColor         <- "#000000"
1549128588263:axisTextSize      <- 12
1549128588264:barAnnotTextSize  <- 4
1549128588266:baseTextSize      <- 14
1549128588267:gridColor         <- "#e0e0e0"
1549128588269:lineSize          <- 0.3
1549128588270:# panelColor        <- "#ffffff"
1549128588272:# panelColor        <- "#fff4e0"
1549128588274:panelColor        <- "#f2efe6"
1549128588276:# stripBackground   <- "#cccccc"
1549128588279:stripTextSize     <- axisTextSize
1549128588281:if (longestLocusNameLength > 12)
1549128588283:stripTextSize  <- stripTextSize * 0.6
1549128588285:textColor  <- "#000000"
1549128588287:# baseFontFamily        <- "Arial"
1549128588291:# Custom theme definition for plots ---------------------------------------
1549128588293:plotTheme <- list(
1549128588295:theme(
1549128588297:axis.text.x      = element_text(angle = 50, size = axisTextSize,
1549128588299:vjust = 1, hjust = 1, color = textColor),
1549128588301:axis.text.y      = element_text(size = axisTextSize, color = textColor),
1549128588303:axis.ticks       = element_line(size = lineSize),
1549128588305:axis.title.x     = element_text(margin = margin(6,0,8,0, "mm")),
1549128588308:axis.title.y     = element_text(margin = margin(0,6,0,0, "mm")),
1549128588310:legend.position  = "none",
1549128588312:panel.border     = element_rect(size = lineSize),
1549128588314:panel.background = element_rect(fill = panelColor),
1549128588316:panel.grid       = element_line(size = lineSize, colour = gridColor),
1549128588318:panel.grid.minor = element_blank(),
1549128588321:plot.margin      = margin(10,10,0,10, "mm"),
1549128588323:panel.spacing    = unit(4, "mm"),
1549128588326:plot.caption     = element_text(size = baseTextSize * 0.7, face = "italic"),
1549128588328:plot.title       = element_text(hjust = 0.5),
1549128588330:plot.subtitle    = element_text(hjust = 0.5),
1549128588331:strip.background = element_rect(size = lineSize),
1549128588334:strip.text       = element_text(size = stripTextSize),
1549128588336:text             = element_text(size = baseTextSize)
1549128588340:)
1549128588343:)
1549128588347:# Palette definition ------------------------------------------------------
1549128588350:# colourCount <- length(unique(inData$Locus))
1549128588352:rowsPerPage <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549128588354:# colourCount <- nLoci
1549128588356:colourCount <- rowsPerPage
1549128588357:# colourCount  <- length(unique(data.to.plot$Allele))
1549128588359:# fillPalette  <- colorRampPalette(brewer.pal(8, "Dark2"))(colourCount)
1549128588362:# fillPalette  <- colorRampPalette(brewer.pal(12, "Paired"))(colourCount)
1549128588365:# fillPalette  <- colorRampPalette(brewer.pal(9, "Set1"))(colourCount)
1549128588368:# fillPalette  <- colorRampPalette(pal_npg("nrc")(10))(colourCount)
1549128588370:# fillPalette  <- colorRampPalette(pal_d3("category20")(20))(colourCount)
1549128588372:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549128588375:borderPalette <- darkColors(fillPalette, 0.6)
1549128588377:# library("scales"); show_col(fillPalette); show_col(borderPalette)
1549128588386:# Depth plot -------------------------------------------------------------
1549128588389:# lociPerPage    <- 3
1549128588391:wFactor        <- 4.8
1549128588394:plotTitlesSize <- 2.39
1549128588399:getPlotHeight <- function(rows, extras){
1549128588401:hFactor <- ifelse(rows == 1, 1.88, 1.6)
1549128588403:# loci + titles and foot note + strip + space between locus
1549128588406:(rows*hFactor) + extras + ((rows-1)*0.157) #in
1549128588408:}
1549128588413:# rowsPerPage <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549128588416:height      <- getPlotHeight(rowsPerPage, plotTitlesSize)
1549128588420:width       <- nAlleles * wFactor
1549128588422:loci        <- unique(data.to.plot$Locus)
1549128588424:sets        <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549128588428:plots <- lapply(sets, function(set, dp=data.to.plot, rp=rowsPerPage){
1549128588430:nLoci        <- length(set)
1549128588432:subsetToPlot <- dp %>% filter(Locus %in% set)
1549128588436:# subPalette   <-
1549128588439:ld           <- getLabelsData(subsetToPlot)
1549128588442:p            <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette)
1549128588445:if(nLoci < rp){
1549128588448:hlay    <- matrix(c(1, NA))
1549128588451:total   <- getPlotHeight(rp, plotTitlesSize)
1549128588454:cHeight <- getPlotHeight(nLoci, plotTitlesSize)
1549128588457:blank   <- getPlotHeight(rp-nLoci, 0)
1549128588460:heights <- matrix(c(cHeight/total, blank/total))
1549128588464:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549128588466:}
1549128588468:p
1549128588471:})
1549128588477:if (out.format == "pdf") {
1549128588480:out.filename <- paste(out.prefix, out.format, sep = ".")
1549128588482:ml <- marrangeGrob(plots, nrow=1, ncol=1, padding = unit(10, "mm"),
1549128588485:top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549128588489:ggsave(filename = out.filename, plot = ml,
1549128588491:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549128588494:}
1549128588497:else {
1549128588500:for (i in seq_along(plots)) {
1549128588503:out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549128588506:ggsave(filename = out.filename, plot = plots[[i]],
1549128588509:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549128588512:}
1549128588515:}
1549128588521:# # Depth distribution plot ------------------------------------------------
1549128588524:# hFactor  <- 3
1549128588528:# wFactor  <- 2
1549128588531:# if (nLoci == 1)
1549128588534:#   hFactor <- 3.5
1549128588538:# height       <- nLoci * hFactor
1549128588541:# width        <- nAlleles * wFactor
1549128588544:# # Generate plot
1549128588547:# (dist.plot <- plotDepthDist(data.to.plot, labelsData, fillPalette, borderPalette))
1549128588550:# # Save plot
1549128588553:# out.filename <- paste0(out.prefix, "_dist.", out.format)
1549128588557:# if (out.format == "png") {
1549128588560:#   ggsave(filename = out.filename, plot = dist.plot,
1549128588563:#          width  = width, height = height, type = "cairo-png", dpi = 300)
1549128588566:# } else {
1549128588569:#   ggsave(filename = out.filename, plot = dist.plot,
1549128588572:#          width  = width, height = height, dpi = 400)
1549128588575:# }
1549128588580:cat("Done! \n")
1549128588585:# Code core - End ---------------------------------------------------------
1549128588588:}
1549128646603:#!/usr/bin/env Rscript
1549128646604:# ##############################################################################
1549128646604:#  Author:   Hector Fabio Espitia-Navarro
1549128646605:#            Georgia Institute of Technology
1549128646605:#  Version:  1.0
1549128646606:#  Date:     01/19/2019
1549128646606:# ##############################################################################
1549128646606:# Install required packages -----------------------------------------------
1549128646607:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549128646607:if(!file.exists(personal.lib.path))
1549128646608:dir.create(personal.lib.path)
1549128646608:printMessage <- function(message, verbose){
1549128646609:if(verbose)
1549128646609:cat(message)
1549128646610:}
1549128646611:# crayon::bold("Hola")
1549128646611:installAndLoadPackages <- function(pkg, verbose){
1549128646611:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1549128646612:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1549128646612:printMessage("Done!\n", verbose)
1549128646613:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549128646613:if (length(new.pkg)) {
1549128646614:printMessage("Installing new packages... ", verbose)
1549128646614:install.packages(new.pkg, dependencies = TRUE,
1549128646614:repos="http://cran.rstudio.com/",
1549128646615:lib = personal.lib.path)
1549128646615:printMessage("Done!\n", verbose)
1549128646616:}
1549128646616:printMessage("Loading required packages... ", verbose)
1549128646616:sapply(pkg, function(x){
1549128646617:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549128646617:})
1549128646617:printMessage("Done!\n", verbose)
1549128646618:}
1549128646618:# github.related.packages <- c("devtools", "Rcpp")
1549128646619:# packages <- c("argparser", "tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite")
1549128646619:packages <- c("tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite", "gridExtra")
1549128646619:# installAndLoadPackages(packages, verbose = TRUE)
1549128646620:installAndLoadPackages("argparser", verbose = FALSE)
1549128646658:# Command line arguments processing ---------------------------------------
1549128646658:# Get script name
1549128646659:initial.options <- commandArgs(trailingOnly = FALSE)
1549128646659:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1549128646660:# Process command line arguments
1549128646661:# Create a parser
1549128646661:p <- arg_parser("This script generates k-mer depth plots using a depth file generated by the\033[1mSTing typer\033[22m tool (-t option).",
1549128646662:name = script.name)
1549128646665:# Add Positional arguments (required)
1549128646665:p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
1549128646667:# Add options
1549128646667:p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1549128646669:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1549128646669:default = "kmer_depth")
1549128646670:p <- add_argument(p, "--sample_name", help = "Sample name.",
1549128646671:default = "input file's name")
1549128646672:p <- add_argument(p, "--max_loci_per_page", help = "Maximum number of loci to print on each page.",
1549128646673:default = 7)
1549128646674:p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'",
1549128646675:default = "pdf")
1549128646676:# Initialization of variables ---------------------------------------------
1549128646677:# Values to test the script using RStudio
1549128646677:script.home       <- "/home/hspitia/projects/sting"
1549128646678:# inputFile         <- paste(script.home, "ERR036060.depth.2.tsv", sep = "/")
1549128646678:# geneFile          <- paste(script.home, "rmlst_failed_loci.txt", sep = "/")
1549128646679:inputFile         <- paste(script.home, "depth.tsv", sep = "/")
1549128646680:geneFile          <- paste(script.home, "loci.txt", sep = "/")
1549128646681:out.prefix        <- "kmer_ext_depth"
1549128646682:sample.name       <- basename(inputFile)
1549128646682:max.loci.per.page <- 4
1549128646683:out.format        <- "pdf"
1549128646684:# Parse command line arguments
1549128646684:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1549128646685:argv <- list()
1549128646686:if(command.line) {
1549128646687:argv <- parse_args(p)
1549128646688:} else {
1549128646689:argv <- parse_args(p, list(inputFile,
1549128646690:# "--gene_file", geneFile,
1549128646691:"--prefix", out.prefix,
1549128646691:"--sample_name", sample.name,
1549128646692:"--max_loci_per_page", max.loci.per.page,
1549128646692:"--format", out.format))
1549128646693:}
1549128646695:# Get argument values from the command line
1549128646696:input.file        <- argv$input_file
1549128646696:gene.file         <- argv$gene_file
1549128646697:out.format        <- argv$format
1549128646698:out.prefix        <- argv$prefix
1549128646699:max.loci.per.page <- argv$max_loci_per_page
1549128646699:sample.name       <- argv$sample_name
1549128646700:# if (sample.name == "")
1549128646701:if (sample.name == "input file's name")
1549128646701:sample.name <- basename(input.file)
1549128646702:# Function to check if file exists ----------------------------------------
1549128646703:CheckFileExists <- function(file.list) {
1549128646703:non.exist.files <- !file.exists(file.list)
1549128646704:if(any(non.exist.files)) {
1549128646704:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549128646705:}
1549128646705:}
1549128646706:# Check for input files ---------------------------------------------------
1549128646707:files.to.check <- c(input.file)
1549128646707:error.message  <- CheckFileExists(files.to.check)
1549128646709:if(!is.null(error.message)){
1549128646709:stop(error.message)
1549128646710:} else {
1549128646710:# Code core - Begin -------------------------------------------------------
1549128646711:installAndLoadPackages(packages, verbose = TRUE)
1549128646711:# FUNCTIONS:
1549128646712:# Function to dark a list of colors ---------------------------------------
1549128646713:darkColors <- function(palette, level){
1549128646713:rgbColors <- as.data.frame(t(as.data.frame(lapply(as.data.frame(t(col2rgb(palette))),
1549128646714:function(x) { round(x * level)}))))
1549128646715:unname(sapply(rgbColors, function(x){ rgb(x[1], x[2], x[3], maxColorValue=255) }))
1549128646715:}
1549128646716:# Function for plotting k-mer depth ----------------------------------------
1549128646717:plotDepth <- function(dataToPlot, labelsData, fillColors, borderColors) {
1549128646717:max.x       <- max(dataToPlot$Position)
1549128646718:max.y       <- max(dataToPlot$kmerDepth)
1549128646719:x.limits    <- seq(0, max.x, 100)
1549128646721:y.limits    <- seq(0, max.y, 20)
1549128646721:nTopAlleles <- length(unique(dataToPlot$N))
1549128646723:d.plot <- ggplot(data = dataToPlot, aes(x = Position, y = kmerDepth),
1549128646723:size = 0.2) +
1549128646724:geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1549128646725:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1549128646726:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1549128646727:# scale_color_manual(values = getPalette) +
1549128646727:scale_color_manual(values = borderColors) +
1549128646728:scale_fill_manual(values = fillColors) +
1549128646729:geom_text(data = labelsData,
1549128646730:# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1549128646731:# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1549128646732:aes(x = Length, y = info.y * 0.5, group = Locus,
1549128646733:hjust = 0,
1549128646733:label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1549128646734:show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1549128646735:nudge_x = -(max.x*0.025)
1549128646736:) +
1549128646737:geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1549128646738:alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1549128646739:# geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1549128646740:size = annotTextSize * 1.05, color = "#333333") +
1549128646741:geom_text(data = labelsData,
1549128646742:parse = TRUE,
1549128646743:aes(x = info.x, y = info.y,
1549128646744:label = paste0("{{{{italic(s)==", format(round(Score, 2), nsmall = 2),
1549128646745:"*~~~italic(hat(f)[k])} ==", format(round(NormKmerCount, 2), nsmall = 2),
1549128646746:"*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1549128646747:"*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1549128646748:"~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1549128646749:hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1549128646750:facet_grid(Locus ~ N, scales = "free_y") +
1549128646752:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1549128646753:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1549128646754:theme_bw() +
1549128646755:plotTheme +
1549128646756:labs(title    = expression(italic("k")*"-mer depth"),
1549128646757:subtitle = paste("Top", nTopAlleles, "alleles/genes on sample", sample.name),
1549128646758:x        = "Position along sequence (bp)",
1549128646759:y        = expression(paste(italic(k), "-mer depth")),
1549128646760:# caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1549128646763:caption  = expression(paste(italic("s"),": score;  ",
1549128646765:italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1549128646767:italic("c"),": coverage;  ",
1549128646769:italic(sigma), ": standard deviation;  ",
1549128646771:italic(bar(d)), ": average depth"), sep = "")
1549128646772:)
1549128646773:# guides(fill  = guide_legend(title  ="Allele"), color = FALSE) +
1549128646774:d.plot
1549128646776:}
1549128646777:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549128646778:# Function for plotting k-mer depth distributions as box plots ------------
1549128646779:plotDepthDist <- function(data.to.plot, labelsData, fillColors, borderColors){
1549128646780:dist.plot <- ggplot(data.to.plot, aes(x = AlPos, y = kmerDepth)) +
1549128646781:geom_jitter(position = position_jitter(width=.3), aes(color = Locus),
1549128646782:alpha = 0.4, size = 1.2, shape = 16) +
1549128646783:geom_boxplot(alpha = 0.7, size = 0.5, aes(fill = Locus, color = Locus)) +
1549128646785:geom_text(data = labelsData, size = 4, hjust = "center",
1549128646786:aes(x = N,#(N - 0.5),
1549128646787:y = info.y * 1.05,
1549128646788:label = Allele),
1549128646789:color = "#333333") +
1549128646791:geom_text(data = labelsData, size = 3, hjust = "center",
1549128646792:parse = TRUE,
1549128646793:aes(x = N,#(N - 0.4),
1549128646794:# y = info.y * 0.08,
1549128646796:y = info.y * 0.96,
1549128646797:label = paste0("sigma ==",format(round(sd, 1), nsmall = 1))),
1549128646798:color = "#333333") +
1549128646799:geom_point(data = labelsData,
1549128646801:shape = 23, fill = "white",
1549128646802:aes(x = N, y = meanDepth)) +
1549128646803:facet_grid(Locus ~ ., scales = "free_y") +
1549128646804:scale_color_manual(values = borderColors) +
1549128646806:scale_fill_manual(values = fillColors) +
1549128646807:labs(title = expression(paste(italic("k"), "-mer depth distribution")),
1549128646808:subtitle = basename(input.file),
1549128646809:x        = "Allele Ranking",
1549128646811:y        = expression(paste(italic(k), "-mer depth")),
1549128646812:caption  = expression(paste(italic(sigma), ": standard deviation")))+#,"sd: standard deviation") +
1549128646813:theme_bw() +
1549128646815:plotTheme +
1549128646816:theme(axis.text.x   = element_text(angle = 0, size = axisTextSize,
1549128646818:vjust = 1, hjust = 0.5, color = textColor))
1549128646819:dist.plot
1549128646821:}
1549128646822:# Function to get data for annotations ------------------------------------
1549128646823:getLabelsData <- function(data.to.plot) {
1549128646825:max.x <- max(data.to.plot$Position)
1549128646826:max.y <- max(data.to.plot$kmerDepth)
1549128646829:nLoci    <- length(unique(data.to.plot$Locus))
1549128646830:nAlleles <- length(unique(data.to.plot$N))
1549128646833:alleles     <- unique(data.to.plot$Allele)
1549128646835:loci        <- as.character(unique(data.to.plot$Locus))
1549128646836:lociLabels  <- c()
1549128646837:name.x      <- c()
1549128646839:name.y      <- c()
1549128646840:info.x      <- c()
1549128646842:info.y      <- c()
1549128646843:covs        <- c()
1549128646845:avgDepths   <- c()
1549128646846:meanDepth.x <- c()
1549128646848:meanDepth.y <- c()
1549128646849:for (i in loci) {
1549128646851:lociLabels <- c(lociLabels, rep(i, nAlleles))
1549128646853:}
1549128646854:for (allele in alleles) {
1549128646856:locus     <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1549128646857:maxPos    <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549128646859:maxDepth  <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549128646860:name.x    <- c(name.x, (max.x / 2))
1549128646862:name.y    <- c(name.y, (maxDepth * 0.25))
1549128646863:info.x    <- c(info.x, max.x * 0.02)
1549128646864:info.y    <- c(info.y, maxDepth * 1.5)
1549128646866:covs      <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549128646867:avgDepths <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549128646868:}
1549128646869:labelsData <- data.frame(Allele = alleles,
1549128646871:name.x = name.x,
1549128646872:name.y = name.y,
1549128646873:info.x = info.x,
1549128646874:info.y = info.y,
1549128646876:meanDepth = avgDepths,
1549128646878:N = rep(unique(data.to.plot$N), nLoci),
1549128646880:Locus = lociLabels,
1549128646881:cov = covs
1549128646883:) %>%
1549128646885:left_join(data.to.plot %>%
1549128646887:group_by(Allele, Length, NormKmerCount, Score) %>%
1549128646889:summarise(sd = sd(kmerDepth)),
1549128646891:by = c("Allele" = "Allele"))
1549128646893:labelsData
1549128646894:}
1549128646896:# Check for genes/loci file to filter loci to plot  -----------------------
1549128646898:loci.to.plot <- c()
1549128646899:# if (!is.null(gene.file)|| gene.file != "") {
1549128646900:if (!is.null(gene.file) && !is.na(gene.file) && gene.file != "") {
1549128646901:error.message <- CheckFileExists(gene.file)
1549128646902:if (!is.null(error.message)){
1549128646904:cat("Warning:")
1549128646905:cat(error.message)
1549128646906:cat("  The plotting process will continue without filtering genes/loci.\n")
1549128646908:} else {
1549128646909:loci.to.plot <- scan(gene.file, character(), quiet = TRUE)
1549128646911:}
1549128646913:}
1549128646916:# Data processing and plotting --------------------------------------------
1549128646918:cat("Plotting depths... ")
1549128646919:options(stringsAsFactors = T, readr.num_columns = 0)
1549128646920:# Load data
1549128646922:inData <- read_tsv(input.file)
1549128646923:# inData <- read.delim(input.file)
1549128646928:colnames(inData) <- c("N", "Locus", "Allele", "Position", "kmerDepth",
1549128646930:"NormKmerCount", "Coverage", "Score", "AverageKmerDepth")
1549128646932:# Transform data
1549128646935:data.to.plot <- inData %>%
1549128646937:left_join(inData %>%
1549128646939:group_by(Allele) %>%
1549128646941:summarise(Length = n()), by = "Allele") %>%
1549128646944:arrange(Locus, N) %>%
1549128646946:mutate(
1549128646948:AlPos = factor(N, levels = unique(.$N)),
1549128646950:Allele = factor(Allele, levels = unique(inData$Allele)))
1549128646953:# Filtering loci/genes from genes_file input param
1549128646955:if (length(loci.to.plot) > 0) {
1549128646958:data.to.plot <- data.to.plot %>%
1549128646960:filter(Locus %in% loci.to.plot)
1549128646962:}
1549128646963:longestLocusNameLength <- max(str_length(as.character(unique(inData$Locus))))
1549128646965:nLoci    <- length(unique(data.to.plot$Locus))
1549128646966:nAlleles <- length(unique(data.to.plot$N))
1549128646969:# Theme-related variable definition ---------------------------------------
1549128646970:annotLinetype     <- "solid"
1549128646972:annotTextSize     <- 4
1549128646973:axisColor         <- "#000000"
1549128646975:axisTextSize      <- 12
1549128646976:barAnnotTextSize  <- 4
1549128646978:baseTextSize      <- 14
1549128646979:gridColor         <- "#e0e0e0"
1549128646980:lineSize          <- 0.3
1549128646982:# panelColor        <- "#ffffff"
1549128646983:# panelColor        <- "#fff4e0"
1549128646984:panelColor        <- "#f2efe6"
1549128646986:# stripBackground   <- "#cccccc"
1549128646987:stripTextSize     <- axisTextSize
1549128646989:if (longestLocusNameLength > 12)
1549128646992:stripTextSize  <- stripTextSize * 0.6
1549128646995:textColor  <- "#000000"
1549128646997:# baseFontFamily        <- "Arial"
1549128647001:# Custom theme definition for plots ---------------------------------------
1549128647002:plotTheme <- list(
1549128647004:theme(
1549128647005:axis.text.x      = element_text(angle = 50, size = axisTextSize,
1549128647007:vjust = 1, hjust = 1, color = textColor),
1549128647009:axis.text.y      = element_text(size = axisTextSize, color = textColor),
1549128647011:axis.ticks       = element_line(size = lineSize),
1549128647014:axis.title.x     = element_text(margin = margin(6,0,8,0, "mm")),
1549128647016:axis.title.y     = element_text(margin = margin(0,6,0,0, "mm")),
1549128647019:legend.position  = "none",
1549128647021:panel.border     = element_rect(size = lineSize),
1549128647022:panel.background = element_rect(fill = panelColor),
1549128647048:panel.grid       = element_line(size = lineSize, colour = gridColor),
1549128647050:panel.grid.minor = element_blank(),
1549128647051:plot.margin      = margin(10,10,0,10, "mm"),
1549128647057:panel.spacing    = unit(4, "mm"),
1549128647059:plot.caption     = element_text(size = baseTextSize * 0.7, face = "italic"),
1549128647062:plot.title       = element_text(hjust = 0.5),
1549128647065:plot.subtitle    = element_text(hjust = 0.5),
1549128647067:strip.background = element_rect(size = lineSize),
1549128647069:strip.text       = element_text(size = stripTextSize),
1549128647072:text             = element_text(size = baseTextSize)
1549128647074:)
1549128647077:)
1549128647082:# Palette definition ------------------------------------------------------
1549128647085:# colourCount <- length(unique(inData$Locus))
1549128647088:rowsPerPage <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549128647091:# colourCount <- nLoci
1549128647093:colourCount <- rowsPerPage
1549128647096:# colourCount  <- length(unique(data.to.plot$Allele))
1549128647099:# fillPalette  <- colorRampPalette(brewer.pal(8, "Dark2"))(colourCount)
1549128647102:# fillPalette  <- colorRampPalette(brewer.pal(12, "Paired"))(colourCount)
1549128647104:# fillPalette  <- colorRampPalette(brewer.pal(9, "Set1"))(colourCount)
1549128647107:# fillPalette  <- colorRampPalette(pal_npg("nrc")(10))(colourCount)
1549128647110:# fillPalette  <- colorRampPalette(pal_d3("category20")(20))(colourCount)
1549128647112:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549128647115:borderPalette <- darkColors(fillPalette, 0.6)
1549128647118:# library("scales"); show_col(fillPalette); show_col(borderPalette)
1549128647131:# Depth plot -------------------------------------------------------------
1549128647134:# lociPerPage    <- 3
1549128647150:wFactor        <- 4.8
1549128647152:plotTitlesSize <- 2.39
1549128647158:getPlotHeight <- function(rows, extras){
1549128647163:hFactor <- ifelse(rows == 1, 1.88, 1.6)
1549128647166:# loci + titles and foot note + strip + space between locus
1549128647169:(rows*hFactor) + extras + ((rows-1)*0.157) #in
1549128647172:}
1549128647176:# rowsPerPage <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549128647178:height      <- getPlotHeight(rowsPerPage, plotTitlesSize)
1549128647180:width       <- nAlleles * wFactor
1549128647182:loci        <- unique(data.to.plot$Locus)
1549128647183:sets        <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549128647188:plots <- lapply(sets, function(set, dp=data.to.plot, rp=rowsPerPage){
1549128647191:nLoci        <- length(set)
1549128647193:subsetToPlot <- dp %>% filter(Locus %in% set)
1549128647194:# subPalette   <-
1549128647196:ld           <- getLabelsData(subsetToPlot)
1549128647198:p            <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette)
1549128647200:if(nLoci < rp){
1549128647202:hlay    <- matrix(c(1, NA))
1549128647204:total   <- getPlotHeight(rp, plotTitlesSize)
1549128647206:cHeight <- getPlotHeight(nLoci, plotTitlesSize)
1549128647208:blank   <- getPlotHeight(rp-nLoci, 0)
1549128647210:heights <- matrix(c(cHeight/total, blank/total))
1549128647212:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549128647214:}
1549128647216:p
1549128647218:})
1549128647222:if (out.format == "pdf") {
1549128647224:out.filename <- paste(out.prefix, out.format, sep = ".")
1549128647226:ml <- marrangeGrob(plots, nrow=1, ncol=1, padding = unit(10, "mm"),
1549128647228:top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549128647230:ggsave(filename = out.filename, plot = ml,
1549128647232:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549128647235:}
1549128647237:else {
1549128647239:for (i in seq_along(plots)) {
1549128647241:out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549128647243:ggsave(filename = out.filename, plot = plots[[i]],
1549128647245:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549128647247:}
1549128647249:}
1549128647253:# # Depth distribution plot ------------------------------------------------
1549128647255:# hFactor  <- 3
1549128647258:# wFactor  <- 2
1549128647260:# if (nLoci == 1)
1549128647262:#   hFactor <- 3.5
1549128647264:# height       <- nLoci * hFactor
1549128647266:# width        <- nAlleles * wFactor
1549128647268:# # Generate plot
1549128647271:# (dist.plot <- plotDepthDist(data.to.plot, labelsData, fillPalette, borderPalette))
1549128647273:# # Save plot
1549128647276:# out.filename <- paste0(out.prefix, "_dist.", out.format)
1549128647279:# if (out.format == "png") {
1549128647282:#   ggsave(filename = out.filename, plot = dist.plot,
1549128647285:#          width  = width, height = height, type = "cairo-png", dpi = 300)
1549128647288:# } else {
1549128647290:#   ggsave(filename = out.filename, plot = dist.plot,
1549128647293:#          width  = width, height = height, dpi = 400)
1549128647296:# }
1549128647301:cat("Done! \n")
1549128647307:# Code core - End ---------------------------------------------------------
1549128647310:}
1549128721385:#!/usr/bin/env Rscript
1549128721385:# ##############################################################################
1549128721385:#  Author:   Hector Fabio Espitia-Navarro
1549128721386:#            Georgia Institute of Technology
1549128721386:#  Version:  1.0
1549128721386:#  Date:     01/19/2019
1549128721387:# ##############################################################################
1549128721387:# Install required packages -----------------------------------------------
1549128721388:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549128721388:if(!file.exists(personal.lib.path))
1549128721389:dir.create(personal.lib.path)
1549128721390:printMessage <- function(message, verbose){
1549128721390:if(verbose)
1549128721391:cat(message)
1549128721391:}
1549128721392:# crayon::bold("Hola")
1549128721393:installAndLoadPackages <- function(pkg, verbose){
1549128721393:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1549128721394:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1549128721394:printMessage("Done!\n", verbose)
1549128721395:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549128721395:if (length(new.pkg)) {
1549128721396:printMessage("Installing new packages... ", verbose)
1549128721396:install.packages(new.pkg, dependencies = TRUE,
1549128721396:repos="http://cran.rstudio.com/",
1549128721397:lib = personal.lib.path)
1549128721397:printMessage("Done!\n", verbose)
1549128721397:}
1549128721398:printMessage("Loading required packages... ", verbose)
1549128721398:sapply(pkg, function(x){
1549128721398:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549128721399:})
1549128721399:printMessage("Done!\n", verbose)
1549128721399:}
1549128721400:# github.related.packages <- c("devtools", "Rcpp")
1549128721400:# packages <- c("argparser", "tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite")
1549128721401:packages <- c("tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite", "gridExtra")
1549128721401:# installAndLoadPackages(packages, verbose = TRUE)
1549128721401:installAndLoadPackages("argparser", verbose = FALSE)
1549128721437:# Command line arguments processing ---------------------------------------
1549128721437:# Get script name
1549128721438:initial.options <- commandArgs(trailingOnly = FALSE)
1549128721438:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1549128721439:# Process command line arguments
1549128721440:# Create a parser
1549128721440:p <- arg_parser("This script generates k-mer depth plots using a depth file generated by the\033[1mSTing typer\033[22m tool (-t option).",
1549128721440:name = script.name)
1549128721443:# Add Positional arguments (required)
1549128721443:p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
1549128721445:# Add options
1549128721445:p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1549128721446:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1549128721447:default = "kmer_depth")
1549128721448:p <- add_argument(p, "--sample_name", help = "Sample name.",
1549128721449:default = "input file's name")
1549128721450:p <- add_argument(p, "--max_loci_per_page", help = "Maximum number of loci to print on each page.",
1549128721450:default = 7)
1549128721452:p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'",
1549128721452:default = "pdf")
1549128721454:# Initialization of variables ---------------------------------------------
1549128721454:# Values to test the script using RStudio
1549128721454:script.home       <- "/home/hspitia/projects/sting"
1549128721455:# inputFile         <- paste(script.home, "ERR036060.depth.2.tsv", sep = "/")
1549128721456:# geneFile          <- paste(script.home, "rmlst_failed_loci.txt", sep = "/")
1549128721456:inputFile         <- paste(script.home, "depth.tsv", sep = "/")
1549128721457:geneFile          <- paste(script.home, "loci.txt", sep = "/")
1549128721457:out.prefix        <- "kmer_ext_depth"
1549128721458:sample.name       <- basename(inputFile)
1549128721459:max.loci.per.page <- 4
1549128721460:out.format        <- "pdf"
1549128721460:# Parse command line arguments
1549128721461:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1549128721461:argv <- list()
1549128721462:if(command.line) {
1549128721463:argv <- parse_args(p)
1549128721463:} else {
1549128721463:argv <- parse_args(p, list(inputFile,
1549128721464:"--gene_file", geneFile,
1549128721464:"--prefix", out.prefix,
1549128721465:"--sample_name", sample.name,
1549128721465:"--max_loci_per_page", max.loci.per.page,
1549128721466:"--format", out.format))
1549128721466:}
1549128721469:# Get argument values from the command line
1549128721469:input.file        <- argv$input_file
1549128721470:gene.file         <- argv$gene_file
1549128721471:out.format        <- argv$format
1549128721471:out.prefix        <- argv$prefix
1549128721472:max.loci.per.page <- argv$max_loci_per_page
1549128721473:sample.name       <- argv$sample_name
1549128721474:# if (sample.name == "")
1549128721474:if (sample.name == "input file's name")
1549128721474:sample.name <- basename(input.file)
1549128721475:# Function to check if file exists ----------------------------------------
1549128721476:CheckFileExists <- function(file.list) {
1549128721476:non.exist.files <- !file.exists(file.list)
1549128721477:if(any(non.exist.files)) {
1549128721477:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549128721478:}
1549128721478:}
1549128721479:# Check for input files ---------------------------------------------------
1549128721480:files.to.check <- c(input.file)
1549128721480:error.message  <- CheckFileExists(files.to.check)
1549128721482:if(!is.null(error.message)){
1549128721482:stop(error.message)
1549128721483:} else {
1549128721483:# Code core - Begin -------------------------------------------------------
1549128721484:installAndLoadPackages(packages, verbose = TRUE)
1549128721484:# FUNCTIONS:
1549128721484:# Function to dark a list of colors ---------------------------------------
1549128721485:darkColors <- function(palette, level){
1549128721485:rgbColors <- as.data.frame(t(as.data.frame(lapply(as.data.frame(t(col2rgb(palette))),
1549128721486:function(x) { round(x * level)}))))
1549128721486:unname(sapply(rgbColors, function(x){ rgb(x[1], x[2], x[3], maxColorValue=255) }))
1549128721487:}
1549128721487:# Function for plotting k-mer depth ----------------------------------------
1549128721488:plotDepth <- function(dataToPlot, labelsData, fillColors, borderColors) {
1549128721489:max.x       <- max(dataToPlot$Position)
1549128721489:max.y       <- max(dataToPlot$kmerDepth)
1549128721490:x.limits    <- seq(0, max.x, 100)
1549128721490:y.limits    <- seq(0, max.y, 20)
1549128721491:nTopAlleles <- length(unique(dataToPlot$N))
1549128721492:d.plot <- ggplot(data = dataToPlot, aes(x = Position, y = kmerDepth),
1549128721493:size = 0.2) +
1549128721493:geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1549128721494:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1549128721495:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1549128721495:# scale_color_manual(values = getPalette) +
1549128721496:scale_color_manual(values = borderColors) +
1549128721496:scale_fill_manual(values = fillColors) +
1549128721497:geom_text(data = labelsData,
1549128721497:# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1549128721498:# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1549128721498:aes(x = Length, y = info.y * 0.5, group = Locus,
1549128721499:hjust = 0,
1549128721499:label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1549128721500:show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1549128721500:nudge_x = -(max.x*0.025)
1549128721501:) +
1549128721502:geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1549128721503:alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1549128721504:# geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1549128721504:size = annotTextSize * 1.05, color = "#333333") +
1549128721505:geom_text(data = labelsData,
1549128721506:parse = TRUE,
1549128721507:aes(x = info.x, y = info.y,
1549128721508:label = paste0("{{{{italic(s)==", format(round(Score, 2), nsmall = 2),
1549128721509:"*~~~italic(hat(f)[k])} ==", format(round(NormKmerCount, 2), nsmall = 2),
1549128721510:"*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1549128721511:"*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1549128721511:"~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1549128721512:hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1549128721513:facet_grid(Locus ~ N, scales = "free_y") +
1549128721514:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1549128721515:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1549128721515:theme_bw() +
1549128721516:plotTheme +
1549128721517:labs(title    = expression(italic("k")*"-mer Depth Distribution"),
1549128721517:subtitle = paste("Top", nTopAlleles, "alleles/genes on sample", sample.name),
1549128721518:x        = "Position along sequence (bp)",
1549128721519:y        = expression(paste(italic(k), "-mer depth")),
1549128721519:# caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1549128721521:caption  = expression(paste(italic("s"),": score;  ",
1549128721523:italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1549128721525:italic("c"),": coverage;  ",
1549128721526:italic(sigma), ": standard deviation;  ",
1549128721527:italic(bar(d)), ": average depth"), sep = "")
1549128721528:)
1549128721529:# guides(fill  = guide_legend(title  ="Allele"), color = FALSE) +
1549128721530:d.plot
1549128721530:}
1549128721531:# (depth.plot   <- plotDepth(data.to.plot, labelsData, fillPalette, borderPalette))
1549128721532:# Function for plotting k-mer depth distributions as box plots ------------
1549128721532:plotDepthDist <- function(data.to.plot, labelsData, fillColors, borderColors){
1549128721533:dist.plot <- ggplot(data.to.plot, aes(x = AlPos, y = kmerDepth)) +
1549128721534:geom_jitter(position = position_jitter(width=.3), aes(color = Locus),
1549128721534:alpha = 0.4, size = 1.2, shape = 16) +
1549128721536:geom_boxplot(alpha = 0.7, size = 0.5, aes(fill = Locus, color = Locus)) +
1549128721537:geom_text(data = labelsData, size = 4, hjust = "center",
1549128721539:aes(x = N,#(N - 0.5),
1549128721540:y = info.y * 1.05,
1549128721541:label = Allele),
1549128721543:color = "#333333") +
1549128721544:geom_text(data = labelsData, size = 3, hjust = "center",
1549128721545:parse = TRUE,
1549128721547:aes(x = N,#(N - 0.4),
1549128721547:# y = info.y * 0.08,
1549128721548:y = info.y * 0.96,
1549128721549:label = paste0("sigma ==",format(round(sd, 1), nsmall = 1))),
1549128721550:color = "#333333") +
1549128721550:geom_point(data = labelsData,
1549128721551:shape = 23, fill = "white",
1549128721552:aes(x = N, y = meanDepth)) +
1549128721552:facet_grid(Locus ~ ., scales = "free_y") +
1549128721553:scale_color_manual(values = borderColors) +
1549128721554:scale_fill_manual(values = fillColors) +
1549128721555:labs(title = expression(paste(italic("k"), "-mer depth distribution")),
1549128721556:subtitle = basename(input.file),
1549128721556:x        = "Allele Ranking",
1549128721557:y        = expression(paste(italic(k), "-mer depth")),
1549128721558:caption  = expression(paste(italic(sigma), ": standard deviation")))+#,"sd: standard deviation") +
1549128721559:theme_bw() +
1549128721560:plotTheme +
1549128721560:theme(axis.text.x   = element_text(angle = 0, size = axisTextSize,
1549128721561:vjust = 1, hjust = 0.5, color = textColor))
1549128721562:dist.plot
1549128721563:}
1549128721564:# Function to get data for annotations ------------------------------------
1549128721564:getLabelsData <- function(data.to.plot) {
1549128721565:max.x <- max(data.to.plot$Position)
1549128721566:max.y <- max(data.to.plot$kmerDepth)
1549128721568:nLoci    <- length(unique(data.to.plot$Locus))
1549128721569:nAlleles <- length(unique(data.to.plot$N))
1549128721572:alleles     <- unique(data.to.plot$Allele)
1549128721574:loci        <- as.character(unique(data.to.plot$Locus))
1549128721576:lociLabels  <- c()
1549128721577:name.x      <- c()
1549128721579:name.y      <- c()
1549128721580:info.x      <- c()
1549128721581:info.y      <- c()
1549128721582:covs        <- c()
1549128721583:avgDepths   <- c()
1549128721584:meanDepth.x <- c()
1549128721586:meanDepth.y <- c()
1549128721587:for (i in loci) {
1549128721588:lociLabels <- c(lociLabels, rep(i, nAlleles))
1549128721589:}
1549128721590:for (allele in alleles) {
1549128721591:locus     <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1549128721593:maxPos    <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549128721594:maxDepth  <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549128721595:name.x    <- c(name.x, (max.x / 2))
1549128721596:name.y    <- c(name.y, (maxDepth * 0.25))
1549128721597:info.x    <- c(info.x, max.x * 0.02)
1549128721599:info.y    <- c(info.y, maxDepth * 1.5)
1549128721600:covs      <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549128721601:avgDepths <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549128721602:}
1549128721604:labelsData <- data.frame(Allele = alleles,
1549128721605:name.x = name.x,
1549128721606:name.y = name.y,
1549128721607:info.x = info.x,
1549128721609:info.y = info.y,
1549128721610:meanDepth = avgDepths,
1549128721611:N = rep(unique(data.to.plot$N), nLoci),
1549128721612:Locus = lociLabels,
1549128721614:cov = covs
1549128721615:) %>%
1549128721616:left_join(data.to.plot %>%
1549128721618:group_by(Allele, Length, NormKmerCount, Score) %>%
1549128721619:summarise(sd = sd(kmerDepth)),
1549128721621:by = c("Allele" = "Allele"))
1549128721622:labelsData
1549128721624:}
1549128721626:# Check for genes/loci file to filter loci to plot  -----------------------
1549128721629:loci.to.plot <- c()
1549128721630:# if (!is.null(gene.file)|| gene.file != "") {
1549128721632:if (!is.null(gene.file) && !is.na(gene.file) && gene.file != "") {
1549128721633:error.message <- CheckFileExists(gene.file)
1549128721635:if (!is.null(error.message)){
1549128721636:cat("Warning:")
1549128721637:cat(error.message)
1549128721639:cat("  The plotting process will continue without filtering genes/loci.\n")
1549128721640:} else {
1549128721642:loci.to.plot <- scan(gene.file, character(), quiet = TRUE)
1549128721643:}
1549128721645:}
1549128721678:# Data processing and plotting --------------------------------------------
1549128721680:cat("Plotting depths... ")
1549128721682:options(stringsAsFactors = T, readr.num_columns = 0)
1549128721684:# Load data
1549128721687:inData <- read_tsv(input.file)
1549128721689:# inData <- read.delim(input.file)
1549128721691:colnames(inData) <- c("N", "Locus", "Allele", "Position", "kmerDepth",
1549128721693:"NormKmerCount", "Coverage", "Score", "AverageKmerDepth")
1549128721696:# Transform data
1549128721698:data.to.plot <- inData %>%
1549128721700:left_join(inData %>%
1549128721702:group_by(Allele) %>%
1549128721705:summarise(Length = n()), by = "Allele") %>%
1549128721707:arrange(Locus, N) %>%
1549128721709:mutate(
1549128721711:AlPos = factor(N, levels = unique(.$N)),
1549128721714:Allele = factor(Allele, levels = unique(inData$Allele)))
1549128721716:# Filtering loci/genes from genes_file input param
1549128721718:if (length(loci.to.plot) > 0) {
1549128721721:data.to.plot <- data.to.plot %>%
1549128721723:filter(Locus %in% loci.to.plot)
1549128721726:}
1549128721728:longestLocusNameLength <- max(str_length(as.character(unique(inData$Locus))))
1549128721730:nLoci    <- length(unique(data.to.plot$Locus))
1549128721732:nAlleles <- length(unique(data.to.plot$N))
1549128721736:# Theme-related variable definition ---------------------------------------
1549128721738:annotLinetype     <- "solid"
1549128721740:annotTextSize     <- 4
1549128721742:axisColor         <- "#000000"
1549128721744:axisTextSize      <- 12
1549128721758:barAnnotTextSize  <- 4
1549128721760:baseTextSize      <- 14
1549128721763:gridColor         <- "#e0e0e0"
1549128721765:lineSize          <- 0.3
1549128721767:# panelColor        <- "#ffffff"
1549128721782:# panelColor        <- "#fff4e0"
1549128721784:panelColor        <- "#f2efe6"
1549128721789:# stripBackground   <- "#cccccc"
1549128721792:stripTextSize     <- axisTextSize
1549128721794:if (longestLocusNameLength > 12)
1549128721796:stripTextSize  <- stripTextSize * 0.6
1549128721800:textColor  <- "#000000"
1549128721802:# baseFontFamily        <- "Arial"
1549128721807:# Custom theme definition for plots ---------------------------------------
1549128721809:plotTheme <- list(
1549128721811:theme(
1549128721814:axis.text.x      = element_text(angle = 50, size = axisTextSize,
1549128721816:vjust = 1, hjust = 1, color = textColor),
1549128721818:axis.text.y      = element_text(size = axisTextSize, color = textColor),
1549128721821:axis.ticks       = element_line(size = lineSize),
1549128721823:axis.title.x     = element_text(margin = margin(6,0,8,0, "mm")),
1549128721825:axis.title.y     = element_text(margin = margin(0,6,0,0, "mm")),
1549128721827:legend.position  = "none",
1549128721829:panel.border     = element_rect(size = lineSize),
1549128721830:panel.background = element_rect(fill = panelColor),
1549128721832:panel.grid       = element_line(size = lineSize, colour = gridColor),
1549128721834:panel.grid.minor = element_blank(),
1549128721835:plot.margin      = margin(10,10,0,10, "mm"),
1549128721837:panel.spacing    = unit(4, "mm"),
1549128721839:plot.caption     = element_text(size = baseTextSize * 0.7, face = "italic"),
1549128721841:plot.title       = element_text(hjust = 0.5),
1549128721842:plot.subtitle    = element_text(hjust = 0.5),
1549128721844:strip.background = element_rect(size = lineSize),
1549128721846:strip.text       = element_text(size = stripTextSize),
1549128721847:text             = element_text(size = baseTextSize)
1549128721849:)
1549128721851:)
1549128721854:# Palette definition ------------------------------------------------------
1549128721856:# colourCount <- length(unique(inData$Locus))
1549128721858:rowsPerPage <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549128721861:# colourCount <- nLoci
1549128721863:colourCount <- rowsPerPage
1549128721865:# colourCount  <- length(unique(data.to.plot$Allele))
1549128721868:# fillPalette  <- colorRampPalette(brewer.pal(8, "Dark2"))(colourCount)
1549128721870:# fillPalette  <- colorRampPalette(brewer.pal(12, "Paired"))(colourCount)
1549128721872:# fillPalette  <- colorRampPalette(brewer.pal(9, "Set1"))(colourCount)
1549128721875:# fillPalette  <- colorRampPalette(pal_npg("nrc")(10))(colourCount)
1549128721877:# fillPalette  <- colorRampPalette(pal_d3("category20")(20))(colourCount)
1549128721879:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549128721882:borderPalette <- darkColors(fillPalette, 0.6)
1549128721884:# library("scales"); show_col(fillPalette); show_col(borderPalette)
1549128721893:# Depth plot -------------------------------------------------------------
1549128721895:# lociPerPage    <- 3
1549128721898:wFactor        <- 4.8
1549128721900:plotTitlesSize <- 2.39
1549128721905:getPlotHeight <- function(rows, extras){
1549128721907:hFactor <- ifelse(rows == 1, 1.88, 1.6)
1549128721910:# loci + titles and foot note + strip + space between locus
1549128721912:(rows*hFactor) + extras + ((rows-1)*0.157) #in
1549128721914:}
1549128721919:# rowsPerPage <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549128721922:height      <- getPlotHeight(rowsPerPage, plotTitlesSize)
1549128721929:width       <- nAlleles * wFactor
1549128721932:loci        <- unique(data.to.plot$Locus)
1549128721935:sets        <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549128721940:plots <- lapply(sets, function(set, dp=data.to.plot, rp=rowsPerPage){
1549128721942:nLoci        <- length(set)
1549128721945:subsetToPlot <- dp %>% filter(Locus %in% set)
1549128721948:# subPalette   <-
1549128721950:ld           <- getLabelsData(subsetToPlot)
1549128721953:p            <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette)
1549128721955:if(nLoci < rp){
1549128721958:hlay    <- matrix(c(1, NA))
1549128721960:total   <- getPlotHeight(rp, plotTitlesSize)
1549128721963:cHeight <- getPlotHeight(nLoci, plotTitlesSize)
1549128721966:blank   <- getPlotHeight(rp-nLoci, 0)
1549128721968:heights <- matrix(c(cHeight/total, blank/total))
1549128721971:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549128721974:}
1549128721976:p
1549128721979:})
1549128721982:if (out.format == "pdf") {
1549128721984:out.filename <- paste(out.prefix, out.format, sep = ".")
1549128721986:ml <- marrangeGrob(plots, nrow=1, ncol=1, padding = unit(10, "mm"),
1549128721988:top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549128721990:ggsave(filename = out.filename, plot = ml,
1549128721992:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549128721994:}
1549128721996:else {
1549128721997:for (i in seq_along(plots)) {
1549128721999:out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549128722001:ggsave(filename = out.filename, plot = plots[[i]],
1549128722003:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549128722005:}
1549128722007:}
1549128722011:# # Depth distribution plot ------------------------------------------------
1549128722014:# hFactor  <- 3
1549128722017:# wFactor  <- 2
1549128722020:# if (nLoci == 1)
1549128722022:#   hFactor <- 3.5
1549128722024:# height       <- nLoci * hFactor
1549128722028:# width        <- nAlleles * wFactor
1549128722031:# # Generate plot
1549128722033:# (dist.plot <- plotDepthDist(data.to.plot, labelsData, fillPalette, borderPalette))
1549128722035:# # Save plot
1549128722038:# out.filename <- paste0(out.prefix, "_dist.", out.format)
1549128722040:# if (out.format == "png") {
1549128722042:#   ggsave(filename = out.filename, plot = dist.plot,
1549128722045:#          width  = width, height = height, type = "cairo-png", dpi = 300)
1549128722048:# } else {
1549128722050:#   ggsave(filename = out.filename, plot = dist.plot,
1549128722052:#          width  = width, height = height, dpi = 400)
1549128722054:# }
1549128722058:cat("Done! \n")
1549128722062:# Code core - End ---------------------------------------------------------
1549128722065:}
1549410417681:source('~/projects/sting/scripts/plot_kmer_depth.R')
1549411796374:#!/usr/bin/env Rscript
1549411796374:# ##############################################################################
1549411796375:#  Author:   Hector Fabio Espitia-Navarro
1549411796375:#            Georgia Institute of Technology
1549411796375:#  Version:  1.0
1549411796376:#  Date:     01/19/2019
1549411796376:# ##############################################################################
1549411796377:# Install required packages -----------------------------------------------
1549411796377:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549411796378:if(!file.exists(personal.lib.path))
1549411796378:dir.create(personal.lib.path)
1549411796379:printMessage <- function(message, verbose){
1549411796379:if(verbose)
1549411796380:cat(message)
1549411796380:}
1549411796381:# crayon::bold("Hola")
1549411796381:installAndLoadPackages <- function(pkg, verbose){
1549411796381:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1549411796382:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1549411796382:printMessage("Done!\n", verbose)
1549411796382:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549411796383:if (length(new.pkg)) {
1549411796384:printMessage("Installing new packages... ", verbose)
1549411796391:install.packages(new.pkg, dependencies = TRUE,
1549411796392:repos="http://cran.rstudio.com/",
1549411796393:lib = personal.lib.path)
1549411796393:printMessage("Done!\n", verbose)
1549411796394:}
1549411796394:printMessage("Loading required packages... ", verbose)
1549411796395:sapply(pkg, function(x){
1549411796396:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549411796396:})
1549411796397:printMessage("Done!\n", verbose)
1549411796398:}
1549411796399:# github.related.packages <- c("devtools", "Rcpp")
1549411796399:# packages <- c("argparser", "tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite")
1549411796400:packages <- c("tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite", "gridExtra")
1549411796401:# installAndLoadPackages(packages, verbose = TRUE)
1549411796401:installAndLoadPackages("argparser", verbose = FALSE)
1549411796523:# Command line arguments processing ---------------------------------------
1549411796524:# Get script name
1549411796524:initial.options <- commandArgs(trailingOnly = FALSE)
1549411796525:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1549411796528:# Process command line arguments
1549411796529:# Create a parser
1549411796529:p <- arg_parser("This script generates k-mer depth plots using a depth file generated by the\033[1mSTing typer\033[22m tool (-t option).",
1549411796529:name = script.name)
1549411796595:# Add Positional arguments (required)
1549411796595:p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
1549411796597:# Add options
1549411796597:p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1549411796599:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1549411796599:default = "kmer_depth")
1549411796601:p <- add_argument(p, "--sample_name", help = "Sample name.",
1549411796602:default = "input file's name")
1549411796603:p <- add_argument(p, "--max_loci_per_page", help = "Maximum number of loci to print on each page.",
1549411796604:default = 7)
1549411796605:p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'",
1549411796606:default = "pdf")
1549411796607:# Initialization of variables ---------------------------------------------
1549411796608:# Values to test the script using RStudio
1549411796608:script.home       <- "/home/hspitia/Dropbox/gatech/projects/STing/manuscript/data/typer/v0.24/detector_on_failed"
1549411796609:# inputFile         <- paste(script.home, "ERR036060.depth.2.tsv", sep = "/")
1549411796609:# geneFile          <- paste(script.home, "rmlst_failed_loci.txt", sep = "/")
1549411796610:inputFile         <- paste(script.home, "detector.v024.nm20.cgmlst.failed_alleles.depth.for_plotting.tsv.gz", sep = "/")
1549411796611:geneFile          <- paste(script.home, "loci.txt", sep = "/")
1549411796612:out.prefix        <- "kmer_depth"
1549411796612:sample.name       <- basename(inputFile)
1549411796613:max.loci.per.page <- 4
1549411796614:out.format        <- "pdf"
1549411796615:# Parse command line arguments
1549411796615:command.line = F  # Turn to FALSE to test the script inside RStudio
1549411796616:argv <- list()
1549411796617:if(command.line) {
1549411796618:argv <- parse_args(p)
1549411796618:} else {
1549411796619:argv <- parse_args(p, list(inputFile,
1549411796619:"--gene_file", geneFile,
1549411796620:"--prefix", out.prefix,
1549411796620:"--sample_name", sample.name,
1549411796620:"--max_loci_per_page", max.loci.per.page,
1549411796621:"--format", out.format))
1549411796621:}
1549411796627:# Get argument values from the command line
1549411796627:input.file        <- argv$input_file
1549411796628:gene.file         <- argv$gene_file
1549411796628:out.format        <- argv$format
1549411796629:out.prefix        <- argv$prefix
1549411796630:max.loci.per.page <- argv$max_loci_per_page
1549411796630:sample.name       <- argv$sample_name
1549411796631:# if (sample.name == "")
1549411796631:if (sample.name == "input file's name")
1549411796631:sample.name <- basename(input.file)
1549411796632:# Function to check if file exists ----------------------------------------
1549411796632:CheckFileExists <- function(file.list) {
1549411796633:non.exist.files <- !file.exists(file.list)
1549411796633:if(any(non.exist.files)) {
1549411796633:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549411796634:}
1549411796634:}
1549411796635:# Check for input files ---------------------------------------------------
1549411796635:files.to.check <- c(input.file)
1549411796635:error.message  <- CheckFileExists(files.to.check)
1549411796636:if(!is.null(error.message)){
1549411796636:stop(error.message)
1549411796637:} else {
1549411796637:# Code core - Begin -------------------------------------------------------
1549411796637:installAndLoadPackages(packages, verbose = TRUE)
1549411796638:# FUNCTIONS:
1549411796638:# Function to dark a list of colors ---------------------------------------
1549411796638:darkColors <- function(palette, level){
1549411796639:rgbColors <- as.data.frame(t(as.data.frame(lapply(as.data.frame(t(col2rgb(palette))),
1549411796639:function(x) { round(x * level)}))))
1549411796639:unname(sapply(rgbColors, function(x){ rgb(x[1], x[2], x[3], maxColorValue=255) }))
1549411796640:}
1549411796640:# Function for plotting k-mer depth ----------------------------------------
1549411796640:plotDepth <- function(dataToPlot, labelsData, fillColors, borderColors) {
1549411796641:max.x       <- max(dataToPlot$Position)
1549411796641:max.y       <- max(dataToPlot$kmerDepth)
1549411796642:x.limits    <- seq(0, max.x, 100)
1549411796642:y.limits    <- seq(0, max.y, 20)
1549411796643:nTopAlleles <- length(unique(dataToPlot$N))
1549411796643:d.plot <- ggplot(data = dataToPlot, aes(x = Position, y = kmerDepth),
1549411796644:size = 0.2) +
1549411796644:geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1549411796645:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1549411796645:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1549411796646:# scale_color_manual(values = getPalette) +
1549411796646:scale_color_manual(values = borderColors) +
1549411796647:scale_fill_manual(values = fillColors) +
1549411796647:geom_text(data = labelsData,
1549411796648:# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1549411796648:# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1549411796648:aes(x = Length, y = info.y * 0.5, group = Locus,
1549411796649:hjust = 0,
1549411796649:label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1549411796650:show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1549411796650:nudge_x = -(max.x*0.025)
1549411796651:) +
1549411796651:geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1549411796652:alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1549411796653:# geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1549411796653:size = annotTextSize * 1.05, color = "#333333") +
1549411796654:geom_text(data = labelsData,
1549411796654:parse = TRUE,
1549411796655:aes(x = info.x, y = info.y,
1549411796655:label = paste0("{{{{italic(s)==", format(round(Score, 2), nsmall = 2),
1549411796656:"*~~~italic(hat(f)[k])} ==", format(round(NormKmerCount, 2), nsmall = 2),
1549411796657:"*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1549411796657:"*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1549411796658:"~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1549411796658:hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1549411796659:facet_grid(Locus ~ N, scales = "free_y") +
1549411796660:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1549411796660:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1549411796661:theme_bw() +
1549411796662:plotTheme +
1549411796662:labs(title    = expression(italic("k")*"-mer Depth Distribution"),
1549411796663:subtitle = paste("Top", nTopAlleles, "alleles/genes on sample", sample.name),
1549411796664:x        = "Position along sequence (bp)",
1549411796664:y        = expression(paste(italic(k), "-mer depth")),
1549411796665:# caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1549411796668:caption  = expression(paste(italic("s"),": score;  ",
1549411796669:italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1549411796670:italic("c"),": coverage;  ",
1549411796672:italic(sigma), ": standard deviation;  ",
1549411796673:italic(bar(d)), ": average depth"), sep = "")
1549411796674:)
1549411796675:d.plot
1549411796675:}
1549411796677:# Function to get data for annotations ------------------------------------
1549411796678:getLabelsData <- function(data.to.plot) {
1549411796678:max.x <- max(data.to.plot$Position)
1549411796679:max.y <- max(data.to.plot$kmerDepth)
1549411796682:nLoci    <- length(unique(data.to.plot$Locus))
1549411796683:nAlleles <- length(unique(data.to.plot$N))
1549411796685:alleles     <- unique(data.to.plot$Allele)
1549411796687:loci        <- as.character(unique(data.to.plot$Locus))
1549411796688:lociLabels  <- c()
1549411796689:name.x      <- c()
1549411796690:name.y      <- c()
1549411796691:info.x      <- c()
1549411796691:info.y      <- c()
1549411796692:covs        <- c()
1549411796693:avgDepths   <- c()
1549411796694:meanDepth.x <- c()
1549411796695:meanDepth.y <- c()
1549411796696:for (i in loci) {
1549411796697:lociLabels <- c(lociLabels, rep(i, nAlleles))
1549411796697:}
1549411796698:for (allele in alleles) {
1549411796699:locus     <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1549411796700:maxPos    <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549411796701:maxDepth  <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549411796701:name.x    <- c(name.x, (max.x / 2))
1549411796702:name.y    <- c(name.y, (maxDepth * 0.25))
1549411796703:info.x    <- c(info.x, max.x * 0.02)
1549411796704:info.y    <- c(info.y, maxDepth * 1.5)
1549411796705:covs      <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549411796706:avgDepths <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549411796707:}
1549411796708:labelsData <- data.frame(Allele = alleles,
1549411796708:name.x = name.x,
1549411796709:name.y = name.y,
1549411796710:info.x = info.x,
1549411796711:info.y = info.y,
1549411796713:meanDepth = avgDepths,
1549411796714:N = rep(unique(data.to.plot$N), nLoci),
1549411796715:Locus = lociLabels,
1549411796715:cov = covs
1549411796716:) %>%
1549411796717:left_join(data.to.plot %>%
1549411796718:group_by(Allele, Length, NormKmerCount, Score) %>%
1549411796719:summarise(sd = sd(kmerDepth)),
1549411796720:by = c("Allele" = "Allele"))
1549411796721:labelsData
1549411796722:}
1549411796724:# Check for genes/loci file to filter loci to plot  -----------------------
1549411796725:loci.to.plot <- c()
1549411796726:# if (!is.null(gene.file)|| gene.file != "") {
1549411796727:if (!is.null(gene.file) && !is.na(gene.file) && gene.file != "") {
1549411796728:error.message <- CheckFileExists(gene.file)
1549411796729:if (!is.null(error.message)){
1549411796730:cat("Warning:")
1549411796731:cat(error.message)
1549411796732:cat("  The plotting process will continue without filtering genes/loci.\n")
1549411796733:} else {
1549411796734:loci.to.plot <- scan(gene.file, character(), quiet = TRUE)
1549411796735:}
1549411796736:}
1549411796738:# Data processing and plotting --------------------------------------------
1549411796739:cat("Plotting depths... ")
1549411796740:options(stringsAsFactors = T, readr.num_columns = 0)
1549411796743:# Load data
1549411796745:inData <- read_tsv(input.file)
1549411796746:# inData <- read.delim(input.file)
1549411796748:# colnames(inData) <- c("N", "Locus", "Allele", "Position", "kmerDepth",
1549411796749:# "NormKmerCount", "Coverage", "Score", "AverageKmerDepth")
1549411796752:colnames(inData) <- c("Sample", "Locus", "Allele", "Position", "kmerDepth",
1549411796754:"NormKmerCount", "Coverage", "AverageKmerDepth",
1549411796755:"AlleleType", "WeightedKmerDepth", "AlleleNumber",
1549411796757:"RunMode", "kmerCounts", "Length")
1549411796758:# # Transform data
1549411796760:# data.to.plot <- inData %>%
1549411796761:#   left_join(inData %>%
1549411796763:#               group_by(Allele) %>%
1549411796764:#               summarise(Length = n()), by = "Allele") %>%
1549411796766:#   arrange(Locus, N) %>%
1549411796767:#   mutate(
1549411796769:#     AlPos = factor(N, levels = unique(.$N)),
1549411796770:#     Allele = factor(Allele, levels = unique(inData$Allele)))
1549411796772:# # Filtering loci/genes from genes_file input param
1549411796773:# if (length(loci.to.plot) > 0) {
1549411796775:#   data.to.plot <- data.to.plot %>%
1549411796776:#     filter(Locus %in% loci.to.plot)
1549411796778:# }
1549411796780:# longestLocusNameLength <- max(str_length(as.character(unique(inData$Locus))))
1549411796781:# nLoci    <- length(unique(data.to.plot$Locus))
1549411796783:# nAlleles <- length(unique(data.to.plot$N))
1549411796784:#
1549411796786:# # Theme-related variable definition ---------------------------------------
1549411796787:# annotLinetype     <- "solid"
1549411796789:# annotTextSize     <- 4
1549411796790:# axisColor         <- "#000000"
1549411796792:# axisTextSize      <- 12
1549411796793:# barAnnotTextSize  <- 4
1549411796795:# baseTextSize      <- 14
1549411796796:# gridColor         <- "#e0e0e0"
1549411796798:# lineSize          <- 0.3
1549411796799:# # panelColor        <- "#ffffff"
1549411796801:# # panelColor        <- "#fff4e0"
1549411796802:# panelColor        <- "#f2efe6"
1549411796804:# # stripBackground   <- "#cccccc"
1549411796806:# stripTextSize     <- axisTextSize
1549411796807:# if (longestLocusNameLength > 12)
1549411796809:#   stripTextSize  <- stripTextSize * 0.6
1549411796810:# textColor  <- "#000000"
1549411796812:# # baseFontFamily        <- "Arial"
1549411796813:#
1549411796815:# # Custom theme definition for plots ---------------------------------------
1549411796816:# plotTheme <- list(
1549411796817:#   theme(
1549411796818:#     axis.text.x      = element_text(angle = 50, size = axisTextSize,
1549411796819:#                                     vjust = 1, hjust = 1, color = textColor),
1549411796821:#     axis.text.y      = element_text(size = axisTextSize, color = textColor),
1549411796822:#     axis.ticks       = element_line(size = lineSize),
1549411796823:#     axis.title.x     = element_text(margin = margin(6,0,8,0, "mm")),
1549411796825:#     axis.title.y     = element_text(margin = margin(0,6,0,0, "mm")),
1549411796826:#     legend.position  = "none",
1549411796827:#     panel.border     = element_rect(size = lineSize),
1549411796828:#     panel.background = element_rect(fill = panelColor),
1549411796829:#     panel.grid       = element_line(size = lineSize, colour = gridColor),
1549411796830:#     panel.grid.minor = element_blank(),
1549411796831:#     plot.margin      = margin(10,10,0,10, "mm"),
1549411796833:#     panel.spacing    = unit(4, "mm"),
1549411796835:#     plot.caption     = element_text(size = baseTextSize * 0.7, face = "italic"),
1549411796837:#     plot.title       = element_text(hjust = 0.5),
1549411796838:#     plot.subtitle    = element_text(hjust = 0.5),
1549411796841:#     strip.background = element_rect(size = lineSize),
1549411796843:#     strip.text       = element_text(size = stripTextSize),
1549411796844:#     text             = element_text(size = baseTextSize)
1549411796845:#   )
1549411796846:# )
1549411796847:#
1549411796849:# # Palette definition ------------------------------------------------------
1549411796850:# # colourCount <- length(unique(inData$Locus))
1549411796851:# rowsPerPage <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549411796852:# # colourCount <- nLoci
1549411796853:# colourCount <- rowsPerPage
1549411796855:# # colourCount  <- length(unique(data.to.plot$Allele))
1549411796856:# # fillPalette  <- colorRampPalette(brewer.pal(8, "Dark2"))(colourCount)
1549411796857:# # fillPalette  <- colorRampPalette(brewer.pal(12, "Paired"))(colourCount)
1549411796858:# # fillPalette  <- colorRampPalette(brewer.pal(9, "Set1"))(colourCount)
1549411796859:# # fillPalette  <- colorRampPalette(pal_npg("nrc")(10))(colourCount)
1549411796860:# # fillPalette  <- colorRampPalette(pal_d3("category20")(20))(colourCount)
1549411796861:# fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549411796863:# borderPalette <- darkColors(fillPalette, 0.6)
1549411796864:# # library("scales"); show_col(fillPalette); show_col(borderPalette)
1549411796867:#
1549411796868:# # Depth plot -------------------------------------------------------------
1549411796869:# # lociPerPage    <- 3
1549411796870:# wFactor        <- 4.8
1549411796871:# plotTitlesSize <- 2.39
1549411796872:#
1549411796874:# getPlotHeight <- function(rows, extras){
1549411796875:# 	hFactor <- ifelse(rows == 1, 1.88, 1.6)
1549411796876:# 	# loci + titles and foot note + strip + space between locus
1549411796877:# 	(rows*hFactor) + extras + ((rows-1)*0.157) #in
1549411796878:# }
1549411796879:#
1549411796880:# # rowsPerPage <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549411796881:# height      <- getPlotHeight(rowsPerPage, plotTitlesSize)
1549411796882:# width       <- nAlleles * wFactor
1549411796885:# loci        <- unique(data.to.plot$Locus)
1549411796887:# sets        <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549411796888:#
1549411796890:# plots <- lapply(sets, function(set, dp=data.to.plot, rp=rowsPerPage){
1549411796891:# 	nLoci        <- length(set)
1549411796893:# 	subsetToPlot <- dp %>% filter(Locus %in% set)
1549411796894:# 	# subPalette   <-
1549411796896:# 	ld           <- getLabelsData(subsetToPlot)
1549411796898:# 	p            <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette)
1549411796899:# 	if(nLoci < rp){
1549411796901:# 		hlay    <- matrix(c(1, NA))
1549411796903:# 		total   <- getPlotHeight(rp, plotTitlesSize)
1549411796904:# 		cHeight <- getPlotHeight(nLoci, plotTitlesSize)
1549411796906:# 		blank   <- getPlotHeight(rp-nLoci, 0)
1549411796907:# 		heights <- matrix(c(cHeight/total, blank/total))
1549411796909:# 		p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549411796910:# 	}
1549411796912:# 	p
1549411796919:# })
1549411796921:#
1549411796923:# if (out.format == "pdf") {
1549411796925:# 	out.filename <- paste(out.prefix, out.format, sep = ".")
1549411796927:# 	ml <- marrangeGrob(plots, nrow=1, ncol=1, padding = unit(10, "mm"),
1549411796929:# 										 top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549411796931:# 	ggsave(filename = out.filename, plot = ml,
1549411796932:# 				 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549411796934:# }
1549411796936:# else {
1549411796938:# 	for (i in seq_along(plots)) {
1549411796939:# 		out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549411796941:# 		ggsave(filename = out.filename, plot = plots[[i]],
1549411796943:# 					 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549411796945:# 	}
1549411796946:# }
1549411796948:#
1549411796950:# # # Depth distribution plot ------------------------------------------------
1549411796952:# # hFactor  <- 3
1549411796953:# # wFactor  <- 2
1549411796955:# # if (nLoci == 1)
1549411796957:# #   hFactor <- 3.5
1549411796958:# # height       <- nLoci * hFactor
1549411796960:# # width        <- nAlleles * wFactor
1549411796962:# # # Generate plot
1549411796964:# # (dist.plot <- plotDepthDist(data.to.plot, labelsData, fillPalette, borderPalette))
1549411796965:# # # Save plot
1549411796967:# # out.filename <- paste0(out.prefix, "_dist.", out.format)
1549411796968:# # if (out.format == "png") {
1549411796969:# #   ggsave(filename = out.filename, plot = dist.plot,
1549411796971:# #          width  = width, height = height, type = "cairo-png", dpi = 300)
1549411796973:# # } else {
1549411796975:# #   ggsave(filename = out.filename, plot = dist.plot,
1549411796977:# #          width  = width, height = height, dpi = 400)
1549411796979:# # }
1549411796981:#
1549411796983:cat("Done! \n")
1549411796987:# Code core - End ---------------------------------------------------------
1549411796989:}
1549412020468:inData
1549412069939:# Transform data
1549412069940:data.to.plot <- inData %>%
1549412069941:mutate(
1549412069941:Sample = factor(Sample, levels = unique(inData$Sample)),
1549412069942:Locus = factor(Locus, levels = unique(inData$Locus)),
1549412069942:Allele = factor(Allele, levels = unique(inData$Allele)))
1549412073009:data.to.plot
1549412089275:# Load data
1549412089275:inData <- read_tsv(input.file)
1549412114719:colnames(inData) <- c("Sample", "Locus", "Allele", "Position", "kmerDepth",
1549412114719:"NormKmerCount", "Coverage", "AverageKmerDepth",
1549412114720:"AlleleType", "WeightedKmerDepth", "AlleleNumber",
1549412114720:"RunMode", "kmerCounts", "Length")
1549412154414:# Transform data
1549412154415:data.to.plot <- inData %>%
1549412154415:mutate(
1549412154415:Sample = factor(Sample, levels = unique(inData$Sample)),
1549412154416:Locus = factor(Locus, levels = unique(inData$Locus)),
1549412154416:AlleleType = factor(AlleleType, levels = unique(inData$AlleleType)),
1549412154416:RunMode = factor(RunMode, levels = unique(inData$RunMode)),
1549412154417:Allele = factor(Allele, levels = unique(inData$Allele))
1549412154417:)
1549412158575:data.to.plot
1549412191934:# # Filtering loci/genes from genes_file input param
1549412191935:# if (length(loci.to.plot) > 0) {
1549412191935:#   data.to.plot <- data.to.plot %>%
1549412191936:#     filter(Locus %in% loci.to.plot)
1549412191936:# }
1549412191937:longestLocusNameLength <- max(str_length(as.character(unique(inData$Locus))))
1549412193796:longestLocusNameLength
1549412331351:samples <- unique(data.to.plot$Sample)
1549412332443:samples
1549412346865:samples <- levels(data.to.plot$Sample)
1549412348412:samples
1549412410883:print(sam)
1549412412551:for (sam in samples[1]) {
1549412412552:print(sam)
1549412412553:}
1549412558478:for (sam in samples[1]) {
1549412558479:print(sam)
1549412558479:subset   <- data.to.plot %>% filter(Sample == sam)
1549412558480:nLoci    <- levels(subset$Locus)
1549412558480:nAlleles <- levels(subset$Alleles)
1549412558481:print(str_glue("sample {sam}: nLoci = {nLoci}  nAlleles = {nAlleles}"))
1549412558481:}
1549412570227:for (sam in samples[1]) {
1549412570228:print(sam)
1549412570228:subset   <- data.to.plot %>% filter(Sample == sam)
1549412570228:nLoci    <- levels(subset$Locus)
1549412570229:nAlleles <- levels(subset$Allele)
1549412570229:print(str_glue("sample {sam}: nLoci = {nLoci}  nAlleles = {nAlleles}"))
1549412570229:}
1549412597588:print(str_glue("sample {sam}: nLoci = {length(nLoci)}  nAlleles = {length(nAlleles)}"))
1549412878443:for (sam in samples[1]) {
1549412878444:print(sam)
1549412878444:subset   <- data.to.plot %>% filter(Sample == sam)
1549412878445:nLoci    <- levels(subset$Locus)
1549412878446:nAlleles <- levels(subset$Allele)
1549412878447:print(str_glue("sample {sam}: nLoci = {length(nLoci)}  nAlleles = {length(nAlleles)}"))
1549412878448:# Plot
1549412878448:d.plot <- ggplot(data = subset, aes(x = Position, y = kmerDepth), size = 0.2) +
1549412878449:# geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1549412878449:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1549412878449:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1549412878450:# scale_color_manual(values = borderColors) +
1549412878450:# scale_fill_manual(values = fillColors) +
1549412878450:# geom_text(data = labelsData,
1549412878451:# 					# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1549412878451:# 					# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1549412878452:# 					aes(x = Length, y = info.y * 0.5, group = Locus,
1549412878452:# 							hjust = 0,
1549412878453:# 							label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1549412878454:# 					show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1549412878455:# 					nudge_x = -(max.x*0.025)
1549412878455:# ) +
1549412878456:# geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1549412878456:# 					 alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1549412878457:# 					 # geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1549412878457:# 					 size = annotTextSize * 1.05, color = "#333333") +
1549412878457:# geom_text(data = labelsData,
1549412878458:# 					parse = TRUE,
1549412878458:# 					aes(x = info.x, y = info.y,
1549412878458:# 							label = paste0("{{{{italic(s)==", format(round(Score, 2), nsmall = 2),
1549412878459:# 														 "*~~~italic(hat(f)[k])} ==", format(round(NormKmerCount, 2), nsmall = 2),
1549412878459:# 														 "*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1549412878459:# 														 "*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1549412878460:# 														 "~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1549412878460:# 					hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1549412878461:facet_grid(rows = vars(Locus), cols = vars(AlleleType), scales = "free_y") +
1549412878461:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1549412878461:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1549412878462:theme_bw() #+
1549412878462:# plotTheme +
1549412878462:# labs(title    = expression(italic("k")*"-mer Depth Distribution"),
1549412878463:# 		 subtitle = paste("Top", nTopAlleles, "alleles/genes on sample", sample.name),
1549412878463:# 		 x        = "Position along sequence (bp)",
1549412878464:# 		 y        = expression(paste(italic(k), "-mer depth")),
1549412878464:# 		 # caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1549412878465:# 		 caption  = expression(paste(italic("s"),": score;  ",
1549412878466:# 		 														italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1549412878467:# 		 														italic("c"),": coverage;  ",
1549412878467:# 		 														italic(sigma), ": standard deviation;  ",
1549412878468:# 		 														italic(bar(d)), ": average depth"), sep = "")
1549412878468:# )
1549412878469:d.plot
1549412878469:}
1549412978100:loci     <- levels(subset$Locus)
1549413036139:for (sam in samples[1]) {
1549413036140:print(sam)
1549413036140:subset   <- data.to.plot %>% filter(Sample == sam)
1549413036141:loci     <- levels(subset$Locus)
1549413036142:alleles <- levels(subset$Allele)
1549413036142:print(str_glue("sample {sam}: nLoci = {length(loci)}  nAlleles = {length(alleles)}"))
1549413036143:subsetToPlot <- subset %>% filter(Locus %in% loci[1:5])
1549413036143:# Plot
1549413036144:d.plot <- ggplot(data = subsetToPlot, aes(x = Position, y = kmerDepth), size = 0.2) +
1549413036144:# geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1549413036145:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1549413036146:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1549413036146:# scale_color_manual(values = borderColors) +
1549413036147:# scale_fill_manual(values = fillColors) +
1549413036148:# geom_text(data = labelsData,
1549413036149:# 					# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1549413036152:# 					# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1549413036153:# 					aes(x = Length, y = info.y * 0.5, group = Locus,
1549413036154:# 							hjust = 0,
1549413036155:# 							label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1549413036156:# 					show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1549413036156:# 					nudge_x = -(max.x*0.025)
1549413036157:# ) +
1549413036158:# geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1549413036158:# 					 alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1549413036159:# 					 # geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1549413036160:# 					 size = annotTextSize * 1.05, color = "#333333") +
1549413036160:# geom_text(data = labelsData,
1549413036161:# 					parse = TRUE,
1549413036162:# 					aes(x = info.x, y = info.y,
1549413036162:# 							label = paste0("{{{{italic(s)==", format(round(Score, 2), nsmall = 2),
1549413036163:# 														 "*~~~italic(hat(f)[k])} ==", format(round(NormKmerCount, 2), nsmall = 2),
1549413036164:# 														 "*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1549413036164:# 														 "*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1549413036165:# 														 "~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1549413036166:# 					hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1549413036166:facet_grid(rows = vars(Locus), cols = vars(AlleleType), scales = "free_y") +
1549413036167:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1549413036168:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1549413036168:theme_bw() #+
1549413036169:# plotTheme +
1549413036170:# labs(title    = expression(italic("k")*"-mer Depth Distribution"),
1549413036170:# 		 subtitle = paste("Top", nTopAlleles, "alleles/genes on sample", sample.name),
1549413036171:# 		 x        = "Position along sequence (bp)",
1549413036172:# 		 y        = expression(paste(italic(k), "-mer depth")),
1549413036172:# 		 # caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1549413036174:# 		 caption  = expression(paste(italic("s"),": score;  ",
1549413036175:# 		 														italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1549413036177:# 		 														italic("c"),": coverage;  ",
1549413036178:# 		 														italic(sigma), ": standard deviation;  ",
1549413036179:# 		 														italic(bar(d)), ": average depth"), sep = "")
1549413036180:# )
1549413036181:d.plot
1549413036181:}
1549413108063:subsetToPlot <- subset %>% filter(Locus %in% loci[1:5])
1549413109398:subsetToPlot
1549413114298:max.x    <- max(subsetToPlot$Position)
1549413114650:max.y    <- max(subsetToPlot$kmerDepth)
1549413114975:x.limits <- seq(0, max.x, 100)
1549413115364:y.limits <- seq(0, max.y, 20)
1549413117162:max.x
1549413121062:x.limits
1549413136610:y.limits
1549413158159:# Plot
1549413158160:d.plot <- ggplot(data = subsetToPlot, aes(x = Position, y = kmerDepth), size = 0.2) +
1549413158160:# geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1549413158161:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1549413158161:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1549413158162:# scale_color_manual(values = borderColors) +
1549413158162:# scale_fill_manual(values = fillColors) +
1549413158163:# geom_text(data = labelsData,
1549413158163:# 					# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1549413158164:# 					# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1549413158164:# 					aes(x = Length, y = info.y * 0.5, group = Locus,
1549413158165:# 							hjust = 0,
1549413158165:# 							label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1549413158166:# 					show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1549413158166:# 					nudge_x = -(max.x*0.025)
1549413158167:# ) +
1549413158167:# geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1549413158168:# 					 alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1549413158168:# 					 # geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1549413158169:# 					 size = annotTextSize * 1.05, color = "#333333") +
1549413158169:# geom_text(data = labelsData,
1549413158170:# 					parse = TRUE,
1549413158170:# 					aes(x = info.x, y = info.y,
1549413158172:# 							label = paste0("{{{{italic(s)==", format(round(Score, 2), nsmall = 2),
1549413158174:# 														 "*~~~italic(hat(f)[k])} ==", format(round(NormKmerCount, 2), nsmall = 2),
1549413158175:# 														 "*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1549413158175:# 														 "*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1549413158176:# 														 "~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1549413158176:# 					hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1549413158177:facet_grid(rows = vars(Locus), cols = vars(AlleleType), scales = "free_y") +
1549413158177:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1549413158178:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1549413158178:theme_bw() #+
1549413163829:# 		 subtitle = paste("Top", nTopAlleles, "alleles/genes on sample", sample.name),
1549413163830:# 		 x        = "Position along sequence (bp)",
1549413163830:# 		 y        = expression(paste(italic(k), "-mer depth")),
1549413163831:# 		 # caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1549413163832:# 		 caption  = expression(paste(italic("s"),": score;  ",
1549413163833:# 		 														italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1549413163834:# 		 														italic("c"),": coverage;  ",
1549413163834:# 		 														italic(sigma), ": standard deviation;  ",
1549413163836:# 		 														italic(bar(d)), ": average depth"), sep = "")
1549413163837:# )
1549413163839:d.plot
1549413287506:d.plot <- ggplot(data = subsetToPlot, aes(x = Position, y = kmerDepth), size = 0.2) +
1549413287507:# geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1549413287508:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1549413287508:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1549413287508:# scale_color_manual(values = borderColors) +
1549413287509:# scale_fill_manual(values = fillColors) +
1549413287509:# geom_text(data = labelsData,
1549413287509:# 					# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1549413287510:# 					# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1549413287510:# 					aes(x = Length, y = info.y * 0.5, group = Locus,
1549413287510:# 							hjust = 0,
1549413287510:# 							label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1549413287511:# 					show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1549413287511:# 					nudge_x = -(max.x*0.025)
1549413287511:# ) +
1549413287512:# geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1549413287512:# 					 alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1549413287512:# 					 # geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1549413287513:# 					 size = annotTextSize * 1.05, color = "#333333") +
1549413287513:# geom_text(data = labelsData,
1549413287513:# 					parse = TRUE,
1549413287514:# 					aes(x = info.x, y = info.y,
1549413287514:# 							label = paste0("{{{{italic(s)==", format(round(Score, 2), nsmall = 2),
1549413287514:# 														 "*~~~italic(hat(f)[k])} ==", format(round(NormKmerCount, 2), nsmall = 2),
1549413287515:# 														 "*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1549413287515:# 														 "*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1549413287515:# 														 "~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1549413287516:# 					hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1549413287516:facet_grid(rows = vars(Locus), cols = vars(AlleleType), scales = "free") +
1549413287516:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1549413287517:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1549413287518:theme_bw() #+
1549413287539:# plotTheme +
1549413287539:# labs(title    = expression(italic("k")*"-mer Depth Distribution"),
1549413287540:# 		 subtitle = paste("Top", nTopAlleles, "alleles/genes on sample", sample.name),
1549413287540:# 		 x        = "Position along sequence (bp)",
1549413287540:# 		 y        = expression(paste(italic(k), "-mer depth")),
1549413287541:# 		 # caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1549413287541:# 		 caption  = expression(paste(italic("s"),": score;  ",
1549413287542:# 		 														italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1549413287542:# 		 														italic("c"),": coverage;  ",
1549413287543:# 		 														italic(sigma), ": standard deviation;  ",
1549413287543:# 		 														italic(bar(d)), ": average depth"), sep = "")
1549413287543:# )
1549413287544:d.plot
1549414004410:# Load data
1549414004410:inData <- read_tsv(input.file)
1549414030216:colnames(inData) <- c("Sample", "Locus", "Allele", "Position", "kmerDepth",
1549414030217:"NormKmerCount", "Coverage", "AverageKmerDepth",
1549414030217:"AlleleType", "NumAllele", "WeightedKmerDepth", "AlleleNumber",
1549414030218:"RunMode", "kmerCounts", "Length")
1549414035301:data.to.plot
1549414064543:# Transform data
1549414064543:data.to.plot <- inData %>%
1549414064543:mutate(
1549414064544:Sample = factor(Sample, levels = unique(inData$Sample)),
1549414064544:Locus = factor(Locus, levels = unique(inData$Locus)),
1549414064544:AlleleType = factor(AlleleType, levels = unique(inData$AlleleType)),
1549414064545:NumAllele = factor(NumAllele, levels = unique(inData$NumAllele)),
1549414064545:RunMode = factor(RunMode, levels = unique(inData$RunMode)),
1549414064545:Allele = factor(Allele, levels = unique(inData$Allele))
1549414064546:)
1549414073073:data.to.plot
1549414253179:inData %>%
1549414253179:group_by(Sample, Locus) %>%
1549414253180:summarise(Length = n())
1549414272163:inData %>%
1549414272163:group_by(Sample, Locus, Allele) %>%
1549414272164:summarise(Length = n())
1549414295916:inData %>%
1549414295916:group_by(Sample, Locus, Allele, AlleleType, NumAllele) %>%
1549414295916:summarise(Length = n())
1549414307272:tmp <- inData %>%
1549414307273:group_by(Sample, Locus, Allele, AlleleType, NumAllele) %>%
1549414307273:summarise(Length = n())
1549414309100:View(tmp)
1549414598268:#!/usr/bin/env Rscript
1549414598268:# ##############################################################################
1549414598269:#  Author:   Hector Fabio Espitia-Navarro
1549414598270:#            Georgia Institute of Technology
1549414598270:#  Version:  1.0
1549414598271:#  Date:     02/05/2019
1549414598272:# ##############################################################################
1549414598273:# Install required packages -----------------------------------------------
1549414598273:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549414598274:if(!file.exists(personal.lib.path))
1549414598275:dir.create(personal.lib.path)
1549414598276:printMessage <- function(message, verbose){
1549414598277:if(verbose)
1549414598277:cat(message)
1549414598278:}
1549414598279:installAndLoadPackages <- function(pkg, verbose){
1549414598280:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1549414598280:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1549414598281:printMessage("Done!\n", verbose)
1549414598282:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549414598282:if (length(new.pkg)) {
1549414598283:printMessage("Installing new packages... ", verbose)
1549414598283:install.packages(new.pkg, dependencies = TRUE,
1549414598284:repos="http://cran.rstudio.com/",
1549414598284:lib = personal.lib.path)
1549414598285:printMessage("Done!\n", verbose)
1549414598286:}
1549414598286:printMessage("Loading required packages... ", verbose)
1549414598287:sapply(pkg, function(x){
1549414598287:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549414598288:})
1549414598289:printMessage("Done!\n", verbose)
1549414598289:}
1549414598291:packages <- c("magrittr", "tidyverse", "stringr", "svglite")
1549414598292:installAndLoadPackages("argparser", verbose = FALSE)
1549414598399:# Command line arguments processing ---------------------------------------
1549414598399:# Get script name
1549414598400:initial.options <- commandArgs(trailingOnly = FALSE)
1549414598401:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1549414598402:# Process command line arguments
1549414598402:# Create a parser
1549414598403:p <- arg_parser("This script format the table of coverage for failed alleles.",
1549414598403:name = script.name)
1549414598435:# Add Positional arguments (required)
1549414598436:p <- add_argument(p, "depth_file", help = "STing detector per base depth file")
1549414598437:p <- add_argument(p, "results_file", help = "STing detector results file file")
1549414598439:p <- add_argument(p, "failed_file", help = "Failed alleles file")
1549414598440:# Add options
1549414598441:# p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1549414598441:p <- add_argument(p, "--out_file", help = "Output filename.",
1549414598442:default = "merged_depth_data.tsv")
1549414598443:# p <- add_argument(p, "--sample_name", help = "Sample name.",
1549414598444:# 									default = "input file's name")
1549414598448:p <- add_argument(p, "--compress", help = "Compress the output file with gzip.",
1549414598448:flag = TRUE)
1549414598450:# Initialization of variables ---------------------------------------------
1549414598451:# Values to test the script using RStudio
1549414598451:dataHome    <- "/home/hspitia/Dropbox/gatech/projects/STing/manuscript/data/typer/v0.24/detector_on_failed"
1549414598452:depthFile   <- paste(dataHome,"detector.v024.nm20.cgmlst.failed_alleles.depth.tsv.gz", sep = "/")
1549414598453:depthFile   <- paste(dataHome,"ERR036060.tsv", sep = "/")
1549414598454:resultsFile <- paste(dataHome,"detector.v0.24.nm20.cgmlst.failed_alleles.results.tsv", sep = "/")
1549414598455:failedFile  <- paste(dataHome,"typer.v0.24.nm20.cgmlst.failed.tsv", sep = "/")
1549414598456:outFile     <- paste(dataHome,"merged_depth_data.tsv", sep = "/")
1549414598456:compress    <- TRUE
1549414598457:# out.prefix  <- "kmer_ext_depth"
1549414598458:# sample.name <- basename(inputFile)
1549414598458:# Parse command line arguments
1549414598459:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1549414598460:argv <- list()
1549414598460:if(command.line) {
1549414598461:argv <- parse_args(p)
1549414598461:} else {
1549414598462:argv <- parse_args(p, list(depthFile, resultsFile, failedFile,
1549414598463:"--out_file", outFile,
1549414598463:"--compress"
1549414598464:# "--format", out.format)
1549414598464:)
1549414598465:)
1549414598465:}
1549414598638:# Get argument values from the command line
1549414598638:depthFile   <- argv$depth_file
1549414598639:resultsFile <- argv$results_file
1549414598639:failedFile  <- argv$failed_file
1549414598640:outFile     <- argv$out_file
1549414598640:compress    <- argv$compress
1549414598641:# if (sample.name == "input file's name")
1549414598641:# 	sample.name <- basename(input.file)
1549414598642:# Function to check if file exists ----------------------------------------
1549414598642:CheckFileExists <- function(file.list) {
1549414598642:non.exist.files <- !file.exists(file.list)
1549414598643:if(any(non.exist.files)) {
1549414598643:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549414598643:}
1549414598644:}
1549414598644:# Check for input files ---------------------------------------------------
1549414598644:files.to.check <- c(depthFile, resultsFile, failedFile)
1549414598645:error.message  <- CheckFileExists(files.to.check)
1549414598645:if(!is.null(error.message)){
1549414598646:stop(error.message)
1549414598646:} else {
1549414598646:# Code core - Begin -------------------------------------------------------
1549414598647:installAndLoadPackages(packages, verbose = TRUE)
1549414598647:# Functions definition: ---------------------------------------------------
1549414598647:#
1549414598648:# General options ---------------------------------------------------------
1549414598648:#
1549414598648:# Load data ---------------------------------------------------------------
1549414598648:depthData   <- read_tsv(depthFile)
1549414598649:resultsData <- read_tsv(resultsFile)
1549414598649:failedData  <- read_tsv(failedFile)
1549414598650:# Format failed table: expand a row with two or more observed alleles into
1549414598650:# a same number of rows
1549414598650:(rowsWithTwoPlusObsAlleles <- failedData %>%
1549414598651:filter(str_detect(Observed, ";"))
1549414598651:)
1549414598652:expandedData <- data_frame()
1549414598652:for (i in 1:nrow(rowsWithTwoPlusObsAlleles)) {
1549414598653:origRow <- rowsWithTwoPlusObsAlleles %>% slice(i)
1549414598653:(obsAlleles    <- unlist(str_split(rowsWithTwoPlusObsAlleles %>% slice(i) %>% select(Observed) %>% pull(), ";")))
1549414598654:(obsSeqAlleles <- unlist(str_split(rowsWithTwoPlusObsAlleles %>% slice(i) %>% select(SeqObs) %>% pull(), " ")))
1549414598654:tmpExpanded   <- data_frame()
1549414598654:alleleNumbers <- c()
1549414598655:for (j in 1:length(obsAlleles)) {
1549414598655:tmpExpanded   <- rbind(tmpExpanded, origRow)
1549414598656:alleleNumbers <- c(alleleNumbers, j)
1549414598657:}
1549414598658:tmpExpanded$Observed  <- obsAlleles
1549414598658:tmpExpanded$SeqObs    <- obsSeqAlleles
1549414598659:tmpExpanded$NumAllele <- alleleNumbers
1549414598676:expandedData          <- rbind(expandedData, tmpExpanded)
1549414598677:}
1549414598677:expandedData
1549414598679:(failedDataFmtd <- failedData %>%
1549414598680:filter(!str_detect(Observed, ";")) %>%
1549414598681:mutate(NumAllele = 1) %>%
1549414598682:rbind(expandedData) %>%
1549414598683:arrange(Sample, Locus) %>%
1549414598683:select(-c(Correct)) %>%
1549414598684:gather(AlleleType, AlleleNumber, -c(Sample, Locus, SeqObs, SeqPred, RunMode, NumAllele)) %>%
1549414598685:gather(SeqType, Allele, -c(Sample, Locus, AlleleType, AlleleNumber, RunMode, NumAllele)) %>%
1549414598686:select(-SeqType)
1549414598687:)
1549414598704:# Transform results data: split sample column into Sample and Locus
1549414598705:resultsData$Locus  <- unlist(lapply(str_split(resultsData$Sample, "_", n=3), function(x) {x[2]}))
1549414598706:resultsData$Sample <- unlist(lapply(str_split(resultsData$Sample, "_", n=3), function(x) {x[1]}))
1549414598707:(resultsData %<>% select(Sample, Locus, everything()))
1549414598709:# Add new info to depth table --------------------------------------------
1549414598711:(outTable <- depthData %>%
1549414598720:left_join(failedDataFmtd %>%
1549414598721:select(sample = Sample,
1549414598722:locus = Locus,
1549414598726:allele = Allele,
1549414598727:allele_type = AlleleType,
1549414598728:allele_number = AlleleNumber,
1549414598729:num_allele = NumAllele,
1549414598730:run_mode = RunMode)) %>%
1549414598731:left_join(resultsData %>%
1549414598732:select(sample = Sample,
1549414598733:locus = Locus,
1549414598734:allele = Gene,
1549414598742:kmer_counts = `k-mer_counts`,
1549414598743:coverage = `Gene_cov(%)`,
1549414598744:length = Gene_length,
1549414598746:mean_kmer_depth = `Mean_k-mer_depth`)) %>%
1549414598747:arrange(sample, allele, allele_type, position) %>%
1549414598748:mutate(norm_count = kmer_counts/length) %>%
1549414598749:select(sample, locus, allele, position, kmer_depth, norm_count,
1549414598750:coverage, mean_kmer_depth, allele_type, num_allele, everything())
1549414598752:)
1549414598754:# Save to file
1549414598755:if (compress)
1549414598756:outFile <- gzfile(str_c(outFile, ".gz"))
1549414598758:write_tsv(outTable, path = outFile)
1549414598761:# Remove all variables from memory
1549414598762:rm(list=ls())
1549414598764:# Code core - End ---------------------------------------------------------
1549414598765:}
1549414604124:#!/usr/bin/env Rscript
1549414604124:# ##############################################################################
1549414604125:#  Author:   Hector Fabio Espitia-Navarro
1549414604125:#            Georgia Institute of Technology
1549414604126:#  Version:  1.0
1549414604126:#  Date:     02/05/2019
1549414604126:# ##############################################################################
1549414604127:# Install required packages -----------------------------------------------
1549414604127:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549414604128:if(!file.exists(personal.lib.path))
1549414604128:dir.create(personal.lib.path)
1549414604129:printMessage <- function(message, verbose){
1549414604129:if(verbose)
1549414604130:cat(message)
1549414604130:}
1549414604131:installAndLoadPackages <- function(pkg, verbose){
1549414604131:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1549414604131:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1549414604132:printMessage("Done!\n", verbose)
1549414604132:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549414604132:if (length(new.pkg)) {
1549414604133:printMessage("Installing new packages... ", verbose)
1549414604133:install.packages(new.pkg, dependencies = TRUE,
1549414604133:repos="http://cran.rstudio.com/",
1549414604134:lib = personal.lib.path)
1549414604134:printMessage("Done!\n", verbose)
1549414604135:}
1549414604135:printMessage("Loading required packages... ", verbose)
1549414604136:sapply(pkg, function(x){
1549414604136:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549414604137:})
1549414604138:printMessage("Done!\n", verbose)
1549414604139:}
1549414604139:packages <- c("magrittr", "tidyverse", "stringr", "svglite")
1549414604140:installAndLoadPackages("argparser", verbose = FALSE)
1549414604163:# Command line arguments processing ---------------------------------------
1549414604163:# Get script name
1549414604163:initial.options <- commandArgs(trailingOnly = FALSE)
1549414604164:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1549414604164:# Process command line arguments
1549414604165:# Create a parser
1549414604165:p <- arg_parser("This script format the table of coverage for failed alleles.",
1549414604165:name = script.name)
1549414604167:# Add Positional arguments (required)
1549414604167:p <- add_argument(p, "depth_file", help = "STing detector per base depth file")
1549414604168:p <- add_argument(p, "results_file", help = "STing detector results file file")
1549414604169:p <- add_argument(p, "failed_file", help = "Failed alleles file")
1549414604170:# Add options
1549414604170:# p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1549414604170:p <- add_argument(p, "--out_file", help = "Output filename.",
1549414604170:default = "merged_depth_data.tsv")
1549414604171:# p <- add_argument(p, "--sample_name", help = "Sample name.",
1549414604172:# 									default = "input file's name")
1549414604172:p <- add_argument(p, "--compress", help = "Compress the output file with gzip.",
1549414604172:flag = TRUE)
1549414604174:# Initialization of variables ---------------------------------------------
1549414604175:# Values to test the script using RStudio
1549414604175:dataHome    <- "/home/hspitia/Dropbox/gatech/projects/STing/manuscript/data/typer/v0.24/detector_on_failed"
1549414604176:depthFile   <- paste(dataHome,"detector.v024.nm20.cgmlst.failed_alleles.depth.tsv.gz", sep = "/")
1549414604177:depthFile   <- paste(dataHome,"ERR036060.tsv", sep = "/")
1549414604177:resultsFile <- paste(dataHome,"detector.v0.24.nm20.cgmlst.failed_alleles.results.tsv", sep = "/")
1549414604178:failedFile  <- paste(dataHome,"typer.v0.24.nm20.cgmlst.failed.tsv", sep = "/")
1549414604178:outFile     <- paste(dataHome,"merged_depth_data.tsv", sep = "/")
1549414604179:compress    <- TRUE
1549414604180:# out.prefix  <- "kmer_ext_depth"
1549414604180:# sample.name <- basename(inputFile)
1549414604181:# Parse command line arguments
1549414604181:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1549414604182:argv <- list()
1549414604182:if(command.line) {
1549414604182:argv <- parse_args(p)
1549414604183:} else {
1549414604183:argv <- parse_args(p, list(depthFile, resultsFile, failedFile,
1549414604183:"--out_file", outFile,
1549414604184:"--compress"
1549414604184:# "--format", out.format)
1549414604184:)
1549414604185:)
1549414604185:}
1549414604186:# Get argument values from the command line
1549414604186:depthFile   <- argv$depth_file
1549414604187:resultsFile <- argv$results_file
1549414604187:failedFile  <- argv$failed_file
1549414604188:outFile     <- argv$out_file
1549414604188:compress    <- argv$compress
1549414604189:# if (sample.name == "input file's name")
1549414604189:# 	sample.name <- basename(input.file)
1549414604190:# Function to check if file exists ----------------------------------------
1549414604190:CheckFileExists <- function(file.list) {
1549414604190:non.exist.files <- !file.exists(file.list)
1549414604191:if(any(non.exist.files)) {
1549414604191:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549414604191:}
1549414604192:}
1549414604192:# Check for input files ---------------------------------------------------
1549414604192:files.to.check <- c(depthFile, resultsFile, failedFile)
1549414604193:error.message  <- CheckFileExists(files.to.check)
1549414604193:if(!is.null(error.message)){
1549414604194:stop(error.message)
1549414604194:} else {
1549414604194:# Code core - Begin -------------------------------------------------------
1549414604195:installAndLoadPackages(packages, verbose = TRUE)
1549414604195:# Functions definition: ---------------------------------------------------
1549414604195:#
1549414604196:# General options ---------------------------------------------------------
1549414604196:#
1549414604196:# Load data ---------------------------------------------------------------
1549414604197:depthData   <- read_tsv(depthFile)
1549414604197:resultsData <- read_tsv(resultsFile)
1549414604197:failedData  <- read_tsv(failedFile)
1549414604198:# Format failed table: expand a row with two or more observed alleles into
1549414604198:# a same number of rows
1549414604198:(rowsWithTwoPlusObsAlleles <- failedData %>%
1549414604199:filter(str_detect(Observed, ";"))
1549414604199:)
1549414604200:expandedData <- data_frame()
1549414604200:for (i in 1:nrow(rowsWithTwoPlusObsAlleles)) {
1549414604201:origRow <- rowsWithTwoPlusObsAlleles %>% slice(i)
1549414604201:(obsAlleles    <- unlist(str_split(rowsWithTwoPlusObsAlleles %>% slice(i) %>% select(Observed) %>% pull(), ";")))
1549414604202:(obsSeqAlleles <- unlist(str_split(rowsWithTwoPlusObsAlleles %>% slice(i) %>% select(SeqObs) %>% pull(), " ")))
1549414604202:tmpExpanded   <- data_frame()
1549414604202:alleleNumbers <- c()
1549414604203:for (j in 1:length(obsAlleles)) {
1549414604203:tmpExpanded   <- rbind(tmpExpanded, origRow)
1549414604204:alleleNumbers <- c(alleleNumbers, j)
1549414604204:}
1549414604205:tmpExpanded$Observed  <- obsAlleles
1549414604205:tmpExpanded$SeqObs    <- obsSeqAlleles
1549414604205:tmpExpanded$NumAllele <- alleleNumbers
1549414604206:expandedData          <- rbind(expandedData, tmpExpanded)
1549414604206:}
1549414604207:expandedData
1549414604208:(failedDataFmtd <- failedData %>%
1549414604208:filter(!str_detect(Observed, ";")) %>%
1549414604209:mutate(NumAllele = 1) %>%
1549414604209:rbind(expandedData) %>%
1549414604210:arrange(Sample, Locus) %>%
1549414604210:select(-c(Correct)) %>%
1549414604211:gather(AlleleType, AlleleNumber, -c(Sample, Locus, SeqObs, SeqPred, RunMode, NumAllele)) %>%
1549414604212:gather(SeqType, Allele, -c(Sample, Locus, AlleleType, AlleleNumber, RunMode, NumAllele)) %>%
1549414604213:select(-SeqType)
1549414604213:)
1549414604215:# Transform results data: split sample column into Sample and Locus
1549414604216:resultsData$Locus  <- unlist(lapply(str_split(resultsData$Sample, "_", n=3), function(x) {x[2]}))
1549414604217:resultsData$Sample <- unlist(lapply(str_split(resultsData$Sample, "_", n=3), function(x) {x[1]}))
1549414604218:(resultsData %<>% select(Sample, Locus, everything()))
1549414604219:# Add new info to depth table --------------------------------------------
1549414604221:(outTable <- depthData %>%
1549414604222:left_join(failedDataFmtd %>%
1549414604223:select(sample = Sample,
1549414604224:locus = Locus,
1549414604224:allele = Allele,
1549414604225:allele_type = AlleleType,
1549414604226:allele_number = AlleleNumber,
1549414604227:num_allele = NumAllele,
1549414604228:run_mode = RunMode)) %>%
1549414604229:left_join(resultsData %>%
1549414604230:select(sample = Sample,
1549414604231:locus = Locus,
1549414604232:allele = Gene,
1549414604233:kmer_counts = `k-mer_counts`,
1549414604234:coverage = `Gene_cov(%)`,
1549414604235:length = Gene_length,
1549414604237:mean_kmer_depth = `Mean_k-mer_depth`)) %>%
1549414604238:arrange(sample, allele, allele_type, position) %>%
1549414604239:mutate(norm_count = kmer_counts/length) %>%
1549414604240:select(sample, locus, allele, position, kmer_depth, norm_count,
1549414604242:coverage, mean_kmer_depth, allele_type, num_allele, everything())
1549414604244:)
1549414604246:# Save to file
1549414604247:if (compress)
1549414604249:outFile <- gzfile(str_c(outFile, ".gz"))
1549414604251:write_tsv(outTable, path = outFile)
1549414604253:# Remove all variables from memory
1549414604254:rm(list=ls())
1549414604257:# Code core - End ---------------------------------------------------------
1549414604258:}
1549414614430:# Functions definition: ---------------------------------------------------
1549414614431:#
1549414614431:# General options ---------------------------------------------------------
1549414614431:#
1549414614432:# Load data ---------------------------------------------------------------
1549414614432:depthData   <- read_tsv(depthFile)
1549414636495:depthFile
1549414638736:depthFile   <- paste(dataHome,"ERR036060.tsv", sep = "/")
1549414642482:#!/usr/bin/env Rscript
1549414642482:# ##############################################################################
1549414642483:#  Author:   Hector Fabio Espitia-Navarro
1549414642483:#            Georgia Institute of Technology
1549414642484:#  Version:  1.0
1549414642484:#  Date:     02/05/2019
1549414642485:# ##############################################################################
1549414642486:# Install required packages -----------------------------------------------
1549414642486:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549414642487:if(!file.exists(personal.lib.path))
1549414642488:dir.create(personal.lib.path)
1549414642489:printMessage <- function(message, verbose){
1549414642490:if(verbose)
1549414642490:cat(message)
1549414642491:}
1549414642492:installAndLoadPackages <- function(pkg, verbose){
1549414642493:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1549414642493:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1549414642494:printMessage("Done!\n", verbose)
1549414642494:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549414642495:if (length(new.pkg)) {
1549414642495:printMessage("Installing new packages... ", verbose)
1549414642496:install.packages(new.pkg, dependencies = TRUE,
1549414642497:repos="http://cran.rstudio.com/",
1549414642497:lib = personal.lib.path)
1549414642498:printMessage("Done!\n", verbose)
1549414642498:}
1549414642499:printMessage("Loading required packages... ", verbose)
1549414642499:sapply(pkg, function(x){
1549414642500:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549414642500:})
1549414642501:printMessage("Done!\n", verbose)
1549414642502:}
1549414642503:packages <- c("magrittr", "tidyverse", "stringr", "svglite")
1549414642504:installAndLoadPackages("argparser", verbose = FALSE)
1549414642537:# Command line arguments processing ---------------------------------------
1549414642538:# Get script name
1549414642538:initial.options <- commandArgs(trailingOnly = FALSE)
1549414642538:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1549414642539:# Process command line arguments
1549414642539:# Create a parser
1549414642540:p <- arg_parser("This script format the table of coverage for failed alleles.",
1549414642540:name = script.name)
1549414642542:# Add Positional arguments (required)
1549414642542:p <- add_argument(p, "depth_file", help = "STing detector per base depth file")
1549414642543:p <- add_argument(p, "results_file", help = "STing detector results file file")
1549414642544:p <- add_argument(p, "failed_file", help = "Failed alleles file")
1549414642545:# Add options
1549414642545:# p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1549414642545:p <- add_argument(p, "--out_file", help = "Output filename.",
1549414642546:default = "merged_depth_data.tsv")
1549414642547:# p <- add_argument(p, "--sample_name", help = "Sample name.",
1549414642547:# 									default = "input file's name")
1549414642547:p <- add_argument(p, "--compress", help = "Compress the output file with gzip.",
1549414642547:flag = TRUE)
1549414642549:# Initialization of variables ---------------------------------------------
1549414642549:# Values to test the script using RStudio
1549414642549:dataHome    <- "/home/hspitia/Dropbox/gatech/projects/STing/manuscript/data/typer/v0.24/detector_on_failed"
1549414642550:depthFile   <- paste(dataHome,"detector.v024.nm20.cgmlst.failed_alleles.depth.tsv.gz", sep = "/")
1549414642550:depthFile   <- paste(dataHome,"ERR036060.tsv", sep = "/")
1549414642550:resultsFile <- paste(dataHome,"detector.v0.24.nm20.cgmlst.failed_alleles.results.tsv", sep = "/")
1549414642551:failedFile  <- paste(dataHome,"typer.v0.24.nm20.cgmlst.failed.tsv", sep = "/")
1549414642551:outFile     <- paste(dataHome,"merged_depth_data.tsv", sep = "/")
1549414642552:compress    <- TRUE
1549414642555:# out.prefix  <- "kmer_ext_depth"
1549414642556:# sample.name <- basename(inputFile)
1549414642556:# Parse command line arguments
1549414642557:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1549414642558:argv <- list()
1549414642558:if(command.line) {
1549414642559:argv <- parse_args(p)
1549414642559:} else {
1549414642560:argv <- parse_args(p, list(depthFile, resultsFile, failedFile,
1549414642560:"--out_file", outFile,
1549414642561:"--compress"
1549414642561:# "--format", out.format)
1549414642562:)
1549414642562:)
1549414642563:}
1549414642564:# Get argument values from the command line
1549414642565:depthFile   <- argv$depth_file
1549414642566:resultsFile <- argv$results_file
1549414642567:failedFile  <- argv$failed_file
1549414642567:outFile     <- argv$out_file
1549414642568:compress    <- argv$compress
1549414642569:# if (sample.name == "input file's name")
1549414642570:# 	sample.name <- basename(input.file)
1549414642571:# Function to check if file exists ----------------------------------------
1549414642571:CheckFileExists <- function(file.list) {
1549414642572:non.exist.files <- !file.exists(file.list)
1549414642572:if(any(non.exist.files)) {
1549414642573:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549414642573:}
1549414642574:}
1549414642575:# Check for input files ---------------------------------------------------
1549414642575:files.to.check <- c(depthFile, resultsFile, failedFile)
1549414642576:error.message  <- CheckFileExists(files.to.check)
1549414642577:if(!is.null(error.message)){
1549414642578:stop(error.message)
1549414642578:} else {
1549414642579:# Code core - Begin -------------------------------------------------------
1549414642579:installAndLoadPackages(packages, verbose = TRUE)
1549414642580:# Functions definition: ---------------------------------------------------
1549414642580:#
1549414642581:# General options ---------------------------------------------------------
1549414642581:#
1549414642582:# Load data ---------------------------------------------------------------
1549414642582:depthData   <- read_tsv(depthFile)
1549414642583:resultsData <- read_tsv(resultsFile)
1549414642583:failedData  <- read_tsv(failedFile)
1549414642584:# Format failed table: expand a row with two or more observed alleles into
1549414642584:# a same number of rows
1549414642585:(rowsWithTwoPlusObsAlleles <- failedData %>%
1549414642585:filter(str_detect(Observed, ";"))
1549414642586:)
1549414642587:expandedData <- data_frame()
1549414642588:for (i in 1:nrow(rowsWithTwoPlusObsAlleles)) {
1549414642588:origRow <- rowsWithTwoPlusObsAlleles %>% slice(i)
1549414642589:(obsAlleles    <- unlist(str_split(rowsWithTwoPlusObsAlleles %>% slice(i) %>% select(Observed) %>% pull(), ";")))
1549414642590:(obsSeqAlleles <- unlist(str_split(rowsWithTwoPlusObsAlleles %>% slice(i) %>% select(SeqObs) %>% pull(), " ")))
1549414642590:tmpExpanded   <- data_frame()
1549414642591:alleleNumbers <- c()
1549414642592:for (j in 1:length(obsAlleles)) {
1549414642592:tmpExpanded   <- rbind(tmpExpanded, origRow)
1549414642593:alleleNumbers <- c(alleleNumbers, j)
1549414642594:}
1549414642594:tmpExpanded$Observed  <- obsAlleles
1549414642595:tmpExpanded$SeqObs    <- obsSeqAlleles
1549414642596:tmpExpanded$NumAllele <- alleleNumbers
1549414642596:expandedData          <- rbind(expandedData, tmpExpanded)
1549414642597:}
1549414642598:expandedData
1549414642599:(failedDataFmtd <- failedData %>%
1549414642600:filter(!str_detect(Observed, ";")) %>%
1549414642601:mutate(NumAllele = 1) %>%
1549414642602:rbind(expandedData) %>%
1549414642602:arrange(Sample, Locus) %>%
1549414642603:select(-c(Correct)) %>%
1549414642605:gather(AlleleType, AlleleNumber, -c(Sample, Locus, SeqObs, SeqPred, RunMode, NumAllele)) %>%
1549414642607:gather(SeqType, Allele, -c(Sample, Locus, AlleleType, AlleleNumber, RunMode, NumAllele)) %>%
1549414642608:select(-SeqType)
1549414642609:)
1549414642610:# Transform results data: split sample column into Sample and Locus
1549414642611:resultsData$Locus  <- unlist(lapply(str_split(resultsData$Sample, "_", n=3), function(x) {x[2]}))
1549414642612:resultsData$Sample <- unlist(lapply(str_split(resultsData$Sample, "_", n=3), function(x) {x[1]}))
1549414642613:(resultsData %<>% select(Sample, Locus, everything()))
1549414642615:# Add new info to depth table --------------------------------------------
1549414642616:(outTable <- depthData %>%
1549414642617:left_join(failedDataFmtd %>%
1549414642617:select(sample = Sample,
1549414642618:locus = Locus,
1549414642619:allele = Allele,
1549414642619:allele_type = AlleleType,
1549414642620:allele_number = AlleleNumber,
1549414642621:num_allele = NumAllele,
1549414642621:run_mode = RunMode)) %>%
1549414642622:left_join(resultsData %>%
1549414642623:select(sample = Sample,
1549414642623:locus = Locus,
1549414642624:allele = Gene,
1549414642625:kmer_counts = `k-mer_counts`,
1549414642626:coverage = `Gene_cov(%)`,
1549414642626:length = Gene_length,
1549414642627:mean_kmer_depth = `Mean_k-mer_depth`)) %>%
1549414642628:arrange(sample, allele, allele_type, position) %>%
1549414642629:mutate(norm_count = kmer_counts/length) %>%
1549414642629:select(sample, locus, allele, position, kmer_depth, norm_count,
1549414642630:coverage, mean_kmer_depth, allele_type, num_allele, everything())
1549414642631:)
1549414642633:# Save to file
1549414642634:if (compress)
1549414642634:outFile <- gzfile(str_c(outFile, ".gz"))
1549414642636:write_tsv(outTable, path = outFile)
1549414642638:# Remove all variables from memory
1549414642638:rm(list=ls())
1549414642640:# Code core - End ---------------------------------------------------------
1549414642641:}
1549414652253:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549414652254:if(!file.exists(personal.lib.path))
1549414652255:dir.create(personal.lib.path)
1549414652257:printMessage <- function(message, verbose){
1549414652257:if(verbose)
1549414652258:cat(message)
1549414652259:}
1549414652260:installAndLoadPackages <- function(pkg, verbose){
1549414652261:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1549414652261:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1549414652262:printMessage("Done!\n", verbose)
1549414652262:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549414652263:if (length(new.pkg)) {
1549414652264:printMessage("Installing new packages... ", verbose)
1549414652264:install.packages(new.pkg, dependencies = TRUE,
1549414652265:repos="http://cran.rstudio.com/",
1549414652265:lib = personal.lib.path)
1549414652266:printMessage("Done!\n", verbose)
1549414652266:}
1549414652267:printMessage("Loading required packages... ", verbose)
1549414652268:sapply(pkg, function(x){
1549414652268:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549414652269:})
1549414652270:printMessage("Done!\n", verbose)
1549414652270:}
1549414652272:packages <- c("magrittr", "tidyverse", "stringr", "svglite")
1549414652273:installAndLoadPackages("argparser", verbose = FALSE)
1549414652320:# Command line arguments processing ---------------------------------------
1549414652320:# Get script name
1549414652320:initial.options <- commandArgs(trailingOnly = FALSE)
1549414652321:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1549414652322:# Process command line arguments
1549414652323:# Create a parser
1549414652323:p <- arg_parser("This script format the table of coverage for failed alleles.",
1549414652324:name = script.name)
1549414652326:# Add Positional arguments (required)
1549414652327:p <- add_argument(p, "depth_file", help = "STing detector per base depth file")
1549414652328:p <- add_argument(p, "results_file", help = "STing detector results file file")
1549414652329:p <- add_argument(p, "failed_file", help = "Failed alleles file")
1549414652330:# Add options
1549414652330:# p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1549414652330:p <- add_argument(p, "--out_file", help = "Output filename.",
1549414652331:default = "merged_depth_data.tsv")
1549414652332:# p <- add_argument(p, "--sample_name", help = "Sample name.",
1549414652332:# 									default = "input file's name")
1549414652332:p <- add_argument(p, "--compress", help = "Compress the output file with gzip.",
1549414652332:flag = TRUE)
1549414655619:# Initialization of variables ---------------------------------------------
1549414655619:# Values to test the script using RStudio
1549414655620:dataHome    <- "/home/hspitia/Dropbox/gatech/projects/STing/manuscript/data/typer/v0.24/detector_on_failed"
1549414655825:depthFile   <- paste(dataHome,"detector.v024.nm20.cgmlst.failed_alleles.depth.tsv.gz", sep = "/")
1549414655918:depthFile   <- paste(dataHome,"ERR036060.tsv", sep = "/")
1549414656095:resultsFile <- paste(dataHome,"detector.v0.24.nm20.cgmlst.failed_alleles.results.tsv", sep = "/")
1549414656264:failedFile  <- paste(dataHome,"typer.v0.24.nm20.cgmlst.failed.tsv", sep = "/")
1549414656486:outFile     <- paste(dataHome,"merged_depth_data.tsv", sep = "/")
1549414656563:compress    <- TRUE
1549414656733:# Parse command line arguments
1549414656733:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1549414656938:argv <- list()
1549414657080:if(command.line) {
1549414657080:argv <- parse_args(p)
1549414657080:} else {
1549414657081:argv <- parse_args(p, list(depthFile, resultsFile, failedFile,
1549414657081:"--out_file", outFile,
1549414657081:"--compress"
1549414657082:# "--format", out.format)
1549414657082:)
1549414657082:)
1549414657083:}
1549414658841:# Get argument values from the command line
1549414658842:depthFile   <- argv$depth_file
1549414659605:resultsFile <- argv$results_file
1549414659822:failedFile  <- argv$failed_file
1549414660029:outFile     <- argv$out_file
1549414660216:compress    <- argv$compress
1549414660383:# Function to check if file exists ----------------------------------------
1549414660383:CheckFileExists <- function(file.list) {
1549414660384:non.exist.files <- !file.exists(file.list)
1549414660385:if(any(non.exist.files)) {
1549414660385:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549414660386:}
1549414660387:}
1549414660575:# Check for input files ---------------------------------------------------
1549414660576:files.to.check <- c(depthFile, resultsFile, failedFile)
1549414661736:error.message  <- CheckFileExists(files.to.check)
1549414668176:if(!is.null(error.message)){
1549414668176:stop(error.message)
1549414668177:} else {
1549414668177:# Code core - Begin -------------------------------------------------------
1549414668177:installAndLoadPackages(packages, verbose = TRUE)
1549414668178:# Functions definition: ---------------------------------------------------
1549414668178:#
1549414668179:# General options ---------------------------------------------------------
1549414668179:#
1549414668179:# Load data ---------------------------------------------------------------
1549414668180:depthData   <- read_tsv(depthFile)
1549414668180:resultsData <- read_tsv(resultsFile)
1549414668180:failedData  <- read_tsv(failedFile)
1549414668181:# Format failed table: expand a row with two or more observed alleles into
1549414668182:# a same number of rows
1549414668182:(rowsWithTwoPlusObsAlleles <- failedData %>%
1549414668183:filter(str_detect(Observed, ";"))
1549414668183:)
1549414668184:expandedData <- data_frame()
1549414668185:for (i in 1:nrow(rowsWithTwoPlusObsAlleles)) {
1549414668185:origRow <- rowsWithTwoPlusObsAlleles %>% slice(i)
1549414668185:(obsAlleles    <- unlist(str_split(rowsWithTwoPlusObsAlleles %>% slice(i) %>% select(Observed) %>% pull(), ";")))
1549414668186:(obsSeqAlleles <- unlist(str_split(rowsWithTwoPlusObsAlleles %>% slice(i) %>% select(SeqObs) %>% pull(), " ")))
1549414668187:tmpExpanded   <- data_frame()
1549414668187:alleleNumbers <- c()
1549414668188:for (j in 1:length(obsAlleles)) {
1549414668188:tmpExpanded   <- rbind(tmpExpanded, origRow)
1549414668189:alleleNumbers <- c(alleleNumbers, j)
1549414668190:}
1549414668191:tmpExpanded$Observed  <- obsAlleles
1549414668191:tmpExpanded$SeqObs    <- obsSeqAlleles
1549414668192:tmpExpanded$NumAllele <- alleleNumbers
1549414668192:expandedData          <- rbind(expandedData, tmpExpanded)
1549414668193:}
1549414668193:expandedData
1549414668194:(failedDataFmtd <- failedData %>%
1549414668195:filter(!str_detect(Observed, ";")) %>%
1549414668196:mutate(NumAllele = 1) %>%
1549414668196:rbind(expandedData) %>%
1549414668197:arrange(Sample, Locus) %>%
1549414668197:select(-c(Correct)) %>%
1549414668198:gather(AlleleType, AlleleNumber, -c(Sample, Locus, SeqObs, SeqPred, RunMode, NumAllele)) %>%
1549414668198:gather(SeqType, Allele, -c(Sample, Locus, AlleleType, AlleleNumber, RunMode, NumAllele)) %>%
1549414668199:select(-SeqType)
1549414668199:)
1549414668200:# Transform results data: split sample column into Sample and Locus
1549414668201:resultsData$Locus  <- unlist(lapply(str_split(resultsData$Sample, "_", n=3), function(x) {x[2]}))
1549414668201:resultsData$Sample <- unlist(lapply(str_split(resultsData$Sample, "_", n=3), function(x) {x[1]}))
1549414668202:(resultsData %<>% select(Sample, Locus, everything()))
1549414668203:# Add new info to depth table --------------------------------------------
1549414668206:(outTable <- depthData %>%
1549414668207:left_join(failedDataFmtd %>%
1549414668208:select(sample = Sample,
1549414668209:locus = Locus,
1549414668210:allele = Allele,
1549414668211:allele_type = AlleleType,
1549414668212:allele_number = AlleleNumber,
1549414668213:num_allele = NumAllele,
1549414668214:run_mode = RunMode)) %>%
1549414668215:left_join(resultsData %>%
1549414668216:select(sample = Sample,
1549414668217:locus = Locus,
1549414668218:allele = Gene,
1549414668219:kmer_counts = `k-mer_counts`,
1549414668220:coverage = `Gene_cov(%)`,
1549414668221:length = Gene_length,
1549414668222:mean_kmer_depth = `Mean_k-mer_depth`)) %>%
1549414668224:arrange(sample, allele, allele_type, position) %>%
1549414668225:mutate(norm_count = kmer_counts/length) %>%
1549414668226:select(sample, locus, allele, position, kmer_depth, norm_count,
1549414668227:coverage, mean_kmer_depth, allele_type, num_allele, everything())
1549414668228:)
1549414668230:# Save to file
1549414668232:if (compress)
1549414668233:outFile <- gzfile(str_c(outFile, ".gz"))
1549414668235:write_tsv(outTable, path = outFile)
1549414668237:# Remove all variables from memory
1549414668239:rm(list=ls())
1549414668241:# Code core - End ---------------------------------------------------------
1549414668242:}
1549414681033:error.message
1549414688327:error.message  <- CheckFileExists(files.to.check)
1549414692408:# Function to check if file exists ----------------------------------------
1549414692409:CheckFileExists <- function(file.list) {
1549414692409:non.exist.files <- !file.exists(file.list)
1549414692409:if(any(non.exist.files)) {
1549414692410:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549414692410:}
1549414692410:}
1549414694159:# Check for input files ---------------------------------------------------
1549414694160:files.to.check <- c(depthFile, resultsFile, failedFile)
1549414694975:error.message  <- CheckFileExists(files.to.check)
1549414705406:#!/usr/bin/env Rscript
1549414705407:# ##############################################################################
1549414705407:#  Author:   Hector Fabio Espitia-Navarro
1549414705407:#            Georgia Institute of Technology
1549414705407:#  Version:  1.0
1549414705408:#  Date:     02/05/2019
1549414705408:# ##############################################################################
1549414705409:# Install required packages -----------------------------------------------
1549414705409:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549414705409:if(!file.exists(personal.lib.path))
1549414705410:dir.create(personal.lib.path)
1549414705410:printMessage <- function(message, verbose){
1549414705411:if(verbose)
1549414705411:cat(message)
1549414705411:}
1549414705412:installAndLoadPackages <- function(pkg, verbose){
1549414705413:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1549414705413:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1549414705414:printMessage("Done!\n", verbose)
1549414705414:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549414705414:if (length(new.pkg)) {
1549414705415:printMessage("Installing new packages... ", verbose)
1549414705417:install.packages(new.pkg, dependencies = TRUE,
1549414705418:repos="http://cran.rstudio.com/",
1549414705419:lib = personal.lib.path)
1549414705419:printMessage("Done!\n", verbose)
1549414705420:}
1549414705420:printMessage("Loading required packages... ", verbose)
1549414705421:sapply(pkg, function(x){
1549414705421:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549414705422:})
1549414705423:printMessage("Done!\n", verbose)
1549414705423:}
1549414705424:packages <- c("magrittr", "tidyverse", "stringr", "svglite")
1549414705425:installAndLoadPackages("argparser", verbose = FALSE)
1549414705461:# Command line arguments processing ---------------------------------------
1549414705462:# Get script name
1549414705462:initial.options <- commandArgs(trailingOnly = FALSE)
1549414705463:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1549414705464:# Process command line arguments
1549414705464:# Create a parser
1549414705465:p <- arg_parser("This script format the table of coverage for failed alleles.",
1549414705465:name = script.name)
1549414705468:# Add Positional arguments (required)
1549414705468:p <- add_argument(p, "depth_file", help = "STing detector per base depth file")
1549414705470:p <- add_argument(p, "results_file", help = "STing detector results file file")
1549414705471:p <- add_argument(p, "failed_file", help = "Failed alleles file")
1549414705473:# Add options
1549414705473:# p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1549414705474:p <- add_argument(p, "--out_file", help = "Output filename.",
1549414705474:default = "merged_depth_data.tsv")
1549414705475:# p <- add_argument(p, "--sample_name", help = "Sample name.",
1549414705476:# 									default = "input file's name")
1549414705476:p <- add_argument(p, "--compress", help = "Compress the output file with gzip.",
1549414705476:flag = TRUE)
1549414705478:# Initialization of variables ---------------------------------------------
1549414705478:# Values to test the script using RStudio
1549414705478:dataHome    <- "/home/hspitia/Dropbox/gatech/projects/STing/manuscript/data/typer/v0.24/detector_on_failed"
1549414705479:depthFile   <- paste(dataHome,"detector.v024.nm20.cgmlst.failed_alleles.depth.tsv.gz", sep = "/")
1549414705479:depthFile   <- paste(dataHome,"ERR036060.tsv", sep = "/")
1549414705480:resultsFile <- paste(dataHome,"detector.v0.24.nm20.cgmlst.failed_alleles.results.tsv", sep = "/")
1549414705480:failedFile  <- paste(dataHome,"typer.v0.24.nm20.cgmlst.failed.tsv", sep = "/")
1549414705481:outFile     <- paste(dataHome,"merged_depth_data.tsv", sep = "/")
1549414705481:compress    <- TRUE
1549414705482:# out.prefix  <- "kmer_ext_depth"
1549414705482:# sample.name <- basename(inputFile)
1549414705482:# Parse command line arguments
1549414705483:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1549414705483:argv <- list()
1549414705483:if(command.line) {
1549414705484:argv <- parse_args(p)
1549414705484:} else {
1549414705484:argv <- parse_args(p, list(depthFile, resultsFile, failedFile,
1549414705485:"--out_file", outFile,
1549414705485:"--compress"
1549414705485:# "--format", out.format)
1549414705486:)
1549414705486:)
1549414705486:}
1549414705487:# Get argument values from the command line
1549414705488:depthFile   <- argv$depth_file
1549414705488:resultsFile <- argv$results_file
1549414705489:failedFile  <- argv$failed_file
1549414705489:outFile     <- argv$out_file
1549414705490:compress    <- argv$compress
1549414711163:# Function to check if file exists ----------------------------------------
1549414711163:CheckFileExists <- function(file.list) {
1549414711164:non.exist.files <- !file.exists(file.list)
1549414711164:if(any(non.exist.files)) {
1549414711164:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549414711165:}
1549414711165:}
1549414712409:# Check for input files ---------------------------------------------------
1549414712409:files.to.check <- c(depthFile, resultsFile, failedFile)
1549414713829:error.message  <- CheckFileExists(files.to.check)
1549414715960:files.to.check
1549414718081:error.message  <- CheckFileExists(files.to.check)
1549414721666:error.message
1549414723694:if(!is.null(error.message)){
1549414723695:stop(error.message)
1549414723695:} else {
1549414723696:# Code core - Begin -------------------------------------------------------
1549414723697:installAndLoadPackages(packages, verbose = TRUE)
1549414723698:# Functions definition: ---------------------------------------------------
1549414723698:#
1549414723699:# General options ---------------------------------------------------------
1549414723699:#
1549414723700:# Load data ---------------------------------------------------------------
1549414723700:depthData   <- read_tsv(depthFile)
1549414723701:resultsData <- read_tsv(resultsFile)
1549414723701:failedData  <- read_tsv(failedFile)
1549414723702:# Format failed table: expand a row with two or more observed alleles into
1549414723702:# a same number of rows
1549414723702:(rowsWithTwoPlusObsAlleles <- failedData %>%
1549414723703:filter(str_detect(Observed, ";"))
1549414723703:)
1549414723704:expandedData <- data_frame()
1549414723704:for (i in 1:nrow(rowsWithTwoPlusObsAlleles)) {
1549414723705:origRow <- rowsWithTwoPlusObsAlleles %>% slice(i)
1549414723706:(obsAlleles    <- unlist(str_split(rowsWithTwoPlusObsAlleles %>% slice(i) %>% select(Observed) %>% pull(), ";")))
1549414723708:(obsSeqAlleles <- unlist(str_split(rowsWithTwoPlusObsAlleles %>% slice(i) %>% select(SeqObs) %>% pull(), " ")))
1549414723708:tmpExpanded   <- data_frame()
1549414723709:alleleNumbers <- c()
1549414723710:for (j in 1:length(obsAlleles)) {
1549414723710:tmpExpanded   <- rbind(tmpExpanded, origRow)
1549414723711:alleleNumbers <- c(alleleNumbers, j)
1549414723711:}
1549414723712:tmpExpanded$Observed  <- obsAlleles
1549414723712:tmpExpanded$SeqObs    <- obsSeqAlleles
1549414723712:tmpExpanded$NumAllele <- alleleNumbers
1549414723713:expandedData          <- rbind(expandedData, tmpExpanded)
1549414723713:}
1549414723714:expandedData
1549414723715:(failedDataFmtd <- failedData %>%
1549414723715:filter(!str_detect(Observed, ";")) %>%
1549414723716:mutate(NumAllele = 1) %>%
1549414723716:rbind(expandedData) %>%
1549414723717:arrange(Sample, Locus) %>%
1549414723717:select(-c(Correct)) %>%
1549414723718:gather(AlleleType, AlleleNumber, -c(Sample, Locus, SeqObs, SeqPred, RunMode, NumAllele)) %>%
1549414723718:gather(SeqType, Allele, -c(Sample, Locus, AlleleType, AlleleNumber, RunMode, NumAllele)) %>%
1549414723719:select(-SeqType)
1549414723719:)
1549414723720:# Transform results data: split sample column into Sample and Locus
1549414723721:resultsData$Locus  <- unlist(lapply(str_split(resultsData$Sample, "_", n=3), function(x) {x[2]}))
1549414723721:resultsData$Sample <- unlist(lapply(str_split(resultsData$Sample, "_", n=3), function(x) {x[1]}))
1549414723722:(resultsData %<>% select(Sample, Locus, everything()))
1549414723723:# Add new info to depth table --------------------------------------------
1549414723724:(outTable <- depthData %>%
1549414723725:left_join(failedDataFmtd %>%
1549414723725:select(sample = Sample,
1549414723726:locus = Locus,
1549414723727:allele = Allele,
1549414723727:allele_type = AlleleType,
1549414723728:allele_number = AlleleNumber,
1549414723728:num_allele = NumAllele,
1549414723729:run_mode = RunMode)) %>%
1549414723730:left_join(resultsData %>%
1549414723731:select(sample = Sample,
1549414723731:locus = Locus,
1549414723732:allele = Gene,
1549414723733:kmer_counts = `k-mer_counts`,
1549414723734:coverage = `Gene_cov(%)`,
1549414723734:length = Gene_length,
1549414723735:mean_kmer_depth = `Mean_k-mer_depth`)) %>%
1549414723736:arrange(sample, allele, allele_type, position) %>%
1549414723736:mutate(norm_count = kmer_counts/length) %>%
1549414723737:select(sample, locus, allele, position, kmer_depth, norm_count,
1549414723738:coverage, mean_kmer_depth, allele_type, num_allele, everything())
1549414723739:)
1549414723742:# Save to file
1549414723743:if (compress)
1549414723744:outFile <- gzfile(str_c(outFile, ".gz"))
1549414723746:write_tsv(outTable, path = outFile)
1549414723748:# Remove all variables from memory
1549414723748:rm(list=ls())
1549414723750:# Code core - End ---------------------------------------------------------
1549414723751:}
1549414736843:# Code core - Begin -------------------------------------------------------
1549414736844:installAndLoadPackages(packages, verbose = TRUE)
1549414741947:#!/usr/bin/env Rscript
1549414741947:# ##############################################################################
1549414741948:#  Author:   Hector Fabio Espitia-Navarro
1549414741948:#            Georgia Institute of Technology
1549414741949:#  Version:  1.0
1549414741949:#  Date:     02/05/2019
1549414741949:# ##############################################################################
1549414741950:# Install required packages -----------------------------------------------
1549414741951:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549414741951:if(!file.exists(personal.lib.path))
1549414741952:dir.create(personal.lib.path)
1549414741953:printMessage <- function(message, verbose){
1549414741953:if(verbose)
1549414741953:cat(message)
1549414741954:}
1549414741954:installAndLoadPackages <- function(pkg, verbose){
1549414741955:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1549414741955:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1549414741956:printMessage("Done!\n", verbose)
1549414741956:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549414741957:if (length(new.pkg)) {
1549414741957:printMessage("Installing new packages... ", verbose)
1549414741958:install.packages(new.pkg, dependencies = TRUE,
1549414741958:repos="http://cran.rstudio.com/",
1549414741959:lib = personal.lib.path)
1549414741959:printMessage("Done!\n", verbose)
1549414741960:}
1549414741960:printMessage("Loading required packages... ", verbose)
1549414741960:sapply(pkg, function(x){
1549414741961:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549414741961:})
1549414741962:printMessage("Done!\n", verbose)
1549414741962:}
1549414741963:packages <- c("magrittr", "tidyverse", "stringr", "svglite")
1549414741963:installAndLoadPackages("argparser", verbose = FALSE)
1549414741986:# Command line arguments processing ---------------------------------------
1549414741987:# Get script name
1549414741987:initial.options <- commandArgs(trailingOnly = FALSE)
1549414741987:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1549414741988:# Process command line arguments
1549414741988:# Create a parser
1549414741989:p <- arg_parser("This script format the table of coverage for failed alleles.",
1549414741989:name = script.name)
1549414741991:# Add Positional arguments (required)
1549414741992:p <- add_argument(p, "depth_file", help = "STing detector per base depth file")
1549414741993:p <- add_argument(p, "results_file", help = "STing detector results file file")
1549414741995:p <- add_argument(p, "failed_file", help = "Failed alleles file")
1549414741996:# Add options
1549414741997:# p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1549414741998:p <- add_argument(p, "--out_file", help = "Output filename.",
1549414741998:default = "merged_depth_data.tsv")
1549414742000:# p <- add_argument(p, "--sample_name", help = "Sample name.",
1549414742000:# 									default = "input file's name")
1549414742001:p <- add_argument(p, "--compress", help = "Compress the output file with gzip.",
1549414742001:flag = TRUE)
1549414742003:# Initialization of variables ---------------------------------------------
1549414742004:# Values to test the script using RStudio
1549414742004:dataHome    <- "/home/hspitia/Dropbox/gatech/projects/STing/manuscript/data/typer/v0.24/detector_on_failed"
1549414742005:depthFile   <- paste(dataHome,"detector.v024.nm20.cgmlst.failed_alleles.depth.tsv.gz", sep = "/")
1549414742006:depthFile   <- paste(dataHome,"ERR036060.tsv", sep = "/")
1549414742007:resultsFile <- paste(dataHome,"detector.v0.24.nm20.cgmlst.failed_alleles.results.tsv", sep = "/")
1549414742007:failedFile  <- paste(dataHome,"typer.v0.24.nm20.cgmlst.failed.tsv", sep = "/")
1549414742008:outFile     <- paste(dataHome,"merged_depth_data.tsv", sep = "/")
1549414742009:compress    <- TRUE
1549414742010:# out.prefix  <- "kmer_ext_depth"
1549414742011:# sample.name <- basename(inputFile)
1549414742012:# Parse command line arguments
1549414742013:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1549414742013:argv <- list()
1549414742014:if(command.line) {
1549414742014:argv <- parse_args(p)
1549414742015:} else {
1549414742015:argv <- parse_args(p, list(depthFile, resultsFile, failedFile,
1549414742016:"--out_file", outFile,
1549414742016:"--compress"
1549414742017:# "--format", out.format)
1549414742017:)
1549414742018:)
1549414742018:}
1549414742020:# Get argument values from the command line
1549414742021:depthFile   <- argv$depth_file
1549414742021:resultsFile <- argv$results_file
1549414742022:failedFile  <- argv$failed_file
1549414742023:outFile     <- argv$out_file
1549414742024:compress    <- argv$compress
1549414742025:# if (sample.name == "input file's name")
1549414742025:# 	sample.name <- basename(input.file)
1549414742026:# Function to check if file exists ----------------------------------------
1549414742026:CheckFileExists <- function(file.list) {
1549414742027:non.exist.files <- !file.exists(file.list)
1549414742027:if(any(non.exist.files)) {
1549414742028:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549414742028:}
1549414742029:}
1549414742030:# Check for input files ---------------------------------------------------
1549414742030:files.to.check <- c(depthFile, resultsFile, failedFile)
1549414742031:error.message  <- CheckFileExists(files.to.check)
1549414742032:if(!is.null(error.message)){
1549414742033:stop(error.message)
1549414742033:} else {
1549414742033:# Code core - Begin -------------------------------------------------------
1549414742034:installAndLoadPackages(packages, verbose = TRUE)
1549414742034:# Functions definition: ---------------------------------------------------
1549414744064:# Functions definition: ---------------------------------------------------
1549414744065:#
1549414744065:# General options ---------------------------------------------------------
1549414744066:#
1549414744066:# Load data ---------------------------------------------------------------
1549414744067:depthData   <- read_tsv(depthFile)
1549414744340:resultsData <- read_tsv(resultsFile)
1549414744721:failedData  <- read_tsv(failedFile)
1549414748352:# Format failed table: expand a row with two or more observed alleles into
1549414748352:# a same number of rows
1549414748353:(rowsWithTwoPlusObsAlleles <- failedData %>%
1549414748353:filter(str_detect(Observed, ";"))
1549414748354:)
1549414748355:expandedData <- data_frame()
1549414748355:for (i in 1:nrow(rowsWithTwoPlusObsAlleles)) {
1549414748355:origRow <- rowsWithTwoPlusObsAlleles %>% slice(i)
1549414748356:(obsAlleles    <- unlist(str_split(rowsWithTwoPlusObsAlleles %>% slice(i) %>% select(Observed) %>% pull(), ";")))
1549414748356:(obsSeqAlleles <- unlist(str_split(rowsWithTwoPlusObsAlleles %>% slice(i) %>% select(SeqObs) %>% pull(), " ")))
1549414748357:tmpExpanded   <- data_frame()
1549414748357:alleleNumbers <- c()
1549414748358:for (j in 1:length(obsAlleles)) {
1549414748358:tmpExpanded   <- rbind(tmpExpanded, origRow)
1549414748359:alleleNumbers <- c(alleleNumbers, j)
1549414748359:}
1549414748360:tmpExpanded$Observed  <- obsAlleles
1549414748361:tmpExpanded$SeqObs    <- obsSeqAlleles
1549414748362:tmpExpanded$NumAllele <- alleleNumbers
1549414748363:expandedData          <- rbind(expandedData, tmpExpanded)
1549414748363:}
1549414748364:expandedData
1549414748365:(failedDataFmtd <- failedData %>%
1549414748365:filter(!str_detect(Observed, ";")) %>%
1549414748366:mutate(NumAllele = 1) %>%
1549414748367:rbind(expandedData) %>%
1549414748367:arrange(Sample, Locus) %>%
1549414748368:select(-c(Correct)) %>%
1549414748368:gather(AlleleType, AlleleNumber, -c(Sample, Locus, SeqObs, SeqPred, RunMode, NumAllele)) %>%
1549414748369:gather(SeqType, Allele, -c(Sample, Locus, AlleleType, AlleleNumber, RunMode, NumAllele)) %>%
1549414748370:select(-SeqType)
1549414748370:)
1549414748371:# Transform results data: split sample column into Sample and Locus
1549414748372:resultsData$Locus  <- unlist(lapply(str_split(resultsData$Sample, "_", n=3), function(x) {x[2]}))
1549414748372:resultsData$Sample <- unlist(lapply(str_split(resultsData$Sample, "_", n=3), function(x) {x[1]}))
1549414748373:(resultsData %<>% select(Sample, Locus, everything()))
1549414748374:# Add new info to depth table --------------------------------------------
1549414748376:(outTable <- depthData %>%
1549414748377:left_join(failedDataFmtd %>%
1549414748378:select(sample = Sample,
1549414748380:locus = Locus,
1549414748381:allele = Allele,
1549414748382:allele_type = AlleleType,
1549414748383:allele_number = AlleleNumber,
1549414748384:num_allele = NumAllele,
1549414748385:run_mode = RunMode)) %>%
1549414748386:left_join(resultsData %>%
1549414748387:select(sample = Sample,
1549414748388:locus = Locus,
1549414748389:allele = Gene,
1549414748390:kmer_counts = `k-mer_counts`,
1549414748392:coverage = `Gene_cov(%)`,
1549414748393:length = Gene_length,
1549414748394:mean_kmer_depth = `Mean_k-mer_depth`)) %>%
1549414748395:arrange(sample, allele, allele_type, position) %>%
1549414748396:mutate(norm_count = kmer_counts/length) %>%
1549414748397:select(sample, locus, allele, position, kmer_depth, norm_count,
1549414748399:coverage, mean_kmer_depth, allele_type, num_allele, everything())
1549414748400:)
1549414748402:# Save to file
1549414748403:if (compress)
1549414748404:outFile <- gzfile(str_c(outFile, ".gz"))
1549414748406:write_tsv(outTable, path = outFile)
1549414748408:# Remove all variables from memory
1549414748409:rm(list=ls())
1549414748411:# Code core - End ---------------------------------------------------------
1549414748412:}
1549414756277:# Code core - Begin -------------------------------------------------------
1549414756278:installAndLoadPackages(packages, verbose = TRUE)
1549414763197:#!/usr/bin/env Rscript
1549414763198:# ##############################################################################
1549414763198:#  Author:   Hector Fabio Espitia-Navarro
1549414763198:#            Georgia Institute of Technology
1549414763199:#  Version:  1.0
1549414763199:#  Date:     02/05/2019
1549414763199:# ##############################################################################
1549414763200:# Install required packages -----------------------------------------------
1549414763201:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549414763201:if(!file.exists(personal.lib.path))
1549414763202:dir.create(personal.lib.path)
1549414763203:printMessage <- function(message, verbose){
1549414763203:if(verbose)
1549414763204:cat(message)
1549414763204:}
1549414767065:#!/usr/bin/env Rscript
1549414767065:# ##############################################################################
1549414767066:#  Author:   Hector Fabio Espitia-Navarro
1549414767066:#            Georgia Institute of Technology
1549414767067:#  Version:  1.0
1549414767067:#  Date:     02/05/2019
1549414767068:# ##############################################################################
1549414767068:# Install required packages -----------------------------------------------
1549414767069:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549414767070:if(!file.exists(personal.lib.path))
1549414767070:dir.create(personal.lib.path)
1549414767071:printMessage <- function(message, verbose){
1549414767072:if(verbose)
1549414767072:cat(message)
1549414767073:}
1549414767073:installAndLoadPackages <- function(pkg, verbose){
1549414767074:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1549414767074:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1549414767075:printMessage("Done!\n", verbose)
1549414767075:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549414767076:if (length(new.pkg)) {
1549414767076:printMessage("Installing new packages... ", verbose)
1549414767077:install.packages(new.pkg, dependencies = TRUE,
1549414767078:repos="http://cran.rstudio.com/",
1549414767079:lib = personal.lib.path)
1549414767080:printMessage("Done!\n", verbose)
1549414767081:}
1549414767081:printMessage("Loading required packages... ", verbose)
1549414767082:sapply(pkg, function(x){
1549414767082:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549414767083:})
1549414767083:printMessage("Done!\n", verbose)
1549414767084:}
1549414767085:packages <- c("magrittr", "tidyverse", "stringr", "svglite")
1549414767085:installAndLoadPackages("argparser", verbose = FALSE)
1549414775722:# Command line arguments processing ---------------------------------------
1549414775722:# Get script name
1549414775723:initial.options <- commandArgs(trailingOnly = FALSE)
1549414775723:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1549414775724:# Process command line arguments
1549414775724:# Create a parser
1549414775725:p <- arg_parser("This script format the table of coverage for failed alleles.",
1549414775725:name = script.name)
1549414775727:# Add Positional arguments (required)
1549414775727:p <- add_argument(p, "depth_file", help = "STing detector per base depth file")
1549414775728:p <- add_argument(p, "results_file", help = "STing detector results file file")
1549414775730:p <- add_argument(p, "failed_file", help = "Failed alleles file")
1549414775731:# Add options
1549414775731:# p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1549414775732:p <- add_argument(p, "--out_file", help = "Output filename.",
1549414775732:default = "merged_depth_data.tsv")
1549414775733:# p <- add_argument(p, "--sample_name", help = "Sample name.",
1549414775734:# 									default = "input file's name")
1549414775734:p <- add_argument(p, "--compress", help = "Compress the output file with gzip.",
1549414775734:flag = TRUE)
1549414775736:# Initialization of variables ---------------------------------------------
1549414775736:# Values to test the script using RStudio
1549414775736:dataHome    <- "/home/hspitia/Dropbox/gatech/projects/STing/manuscript/data/typer/v0.24/detector_on_failed"
1549414775737:depthFile   <- paste(dataHome,"detector.v024.nm20.cgmlst.failed_alleles.depth.tsv.gz", sep = "/")
1549414775737:depthFile   <- paste(dataHome,"ERR036060.tsv", sep = "/")
1549414775738:resultsFile <- paste(dataHome,"detector.v0.24.nm20.cgmlst.failed_alleles.results.tsv", sep = "/")
1549414775738:failedFile  <- paste(dataHome,"typer.v0.24.nm20.cgmlst.failed.tsv", sep = "/")
1549414775739:outFile     <- paste(dataHome,"merged_depth_data.tsv", sep = "/")
1549414775739:compress    <- TRUE
1549414775740:# out.prefix  <- "kmer_ext_depth"
1549414775740:# sample.name <- basename(inputFile)
1549414775740:# Parse command line arguments
1549414775741:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1549414775741:argv <- list()
1549414781362:if(command.line) {
1549414781362:argv <- parse_args(p)
1549414781363:} else {
1549414781364:argv <- parse_args(p, list(depthFile, resultsFile, failedFile,
1549414781364:"--out_file", outFile,
1549414781365:"--compress"
1549414781365:# "--format", out.format)
1549414781366:)
1549414781366:)
1549414781367:}
1549414785977:argv
1549414790964:# Get argument values from the command line
1549414790964:depthFile   <- argv$depth_file
1549414791141:resultsFile <- argv$results_file
1549414791302:failedFile  <- argv$failed_file
1549414791470:outFile     <- argv$out_file
1549414791647:compress    <- argv$compress
1549414792038:# Function to check if file exists ----------------------------------------
1549414792038:CheckFileExists <- function(file.list) {
1549414792038:non.exist.files <- !file.exists(file.list)
1549414792039:if(any(non.exist.files)) {
1549414792039:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549414792039:}
1549414792040:}
1549414793540:# Check for input files ---------------------------------------------------
1549414793540:files.to.check <- c(depthFile, resultsFile, failedFile)
1549414794376:error.message  <- CheckFileExists(files.to.check)
1549414796035:error.message
1549414799531:# Code core - Begin -------------------------------------------------------
1549414799531:installAndLoadPackages(packages, verbose = TRUE)
1549414802291:# Functions definition: ---------------------------------------------------
1549414802292:#
1549414802293:# General options ---------------------------------------------------------
1549414802293:#
1549414802293:# Load data ---------------------------------------------------------------
1549414802294:depthData   <- read_tsv(depthFile)
1549414803529:resultsData <- read_tsv(resultsFile)
1549414804411:failedData  <- read_tsv(failedFile)
1549414809096:depthData
1549414812445:resultsData
1549414814733:failedData
1549414835297:library("dbplyr", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
1549414835983:detach("package:dbplyr", unload=TRUE)
1549414857315:library("dbplyr", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
1549414857787:install.packages(c("backports", "BH", "broom", "callr", "caret", "classInt", "clipr", "colorspace", "covr", "cowplot", "curl", "data.table", "ddalpha", "dendextend", "dimRed", "e1071", "egg", "feather", "fGarch", "forecast", "gclus", "ggmap", "ggpubr", "git2r", "gplots", "haven", "httpuv", "httr", "ipred", "jsonlite", "KFAS", "knitr", "labelled", "lava", "lintr", "lme4", "markdown", "mclust", "microbenchmark", "ModelMetrics", "modelr", "openssl", "pamr", "pheatmap", "pillar", "plotmo", "prabclus", "processx", "ps", "psych", "purrr", "questionr", "RANN", "raster", "RcppArmadillo", "RcppEigen", "recipes", "rlang", "rmarkdown", "rstudioapi", "sfsmisc", "spData", "testit", "TH.data", "tibble", "tidyr", "tinytex", "tseries", "vegan", "xfun", "xts"))
1549414868023:install.packages(c("backports", "BH", "broom", "callr", "caret", "classInt", "clipr", "colorspace", "covr", "cowplot", "curl", "data.table", "ddalpha", "dendextend", "dimRed", "e1071", "egg", "feather", "fGarch", "forecast", "gclus", "ggmap", "ggpubr", "git2r", "gplots", "haven", "httpuv", "httr", "ipred", "jsonlite", "KFAS", "knitr", "labelled", "lava", "lintr", "lme4", "markdown", "mclust", "microbenchmark", "ModelMetrics", "modelr", "openssl", "pamr", "pheatmap", "pillar", "plotmo", "prabclus", "processx", "ps", "psych", "purrr", "questionr", "RANN", "raster", "RcppArmadillo", "RcppEigen", "recipes", "rlang", "rmarkdown", "rstudioapi", "sfsmisc", "spData", "testit", "TH.data", "tibble", "tidyr", "tinytex", "tseries", "vegan", "xfun", "xts"))
1549414882779:install.packages(c("backports", "BH", "broom", "callr", "caret", "classInt", "clipr", "colorspace", "covr", "cowplot", "curl", "data.table", "ddalpha", "dendextend", "dimRed", "e1071", "egg", "feather", "fGarch", "forecast", "gclus", "ggmap", "ggpubr", "git2r", "gplots", "haven", "httpuv", "httr", "ipred", "jsonlite", "KFAS", "knitr", "labelled", "lava", "lintr", "lme4", "markdown", "mclust", "microbenchmark", "ModelMetrics", "modelr", "openssl", "pamr", "pheatmap", "pillar", "plotmo", "prabclus", "processx", "ps", "psych", "purrr", "questionr", "RANN", "raster", "RcppArmadillo", "RcppEigen", "recipes", "rlang", "rmarkdown", "rstudioapi", "sfsmisc", "spData", "testit", "TH.data", "tibble", "tidyr", "tinytex", "tseries", "vegan", "xfun", "xts"))
1549414884639:install.packages(c("backports", "BH", "broom", "callr", "caret", "classInt", "clipr", "colorspace", "covr", "cowplot", "curl", "data.table", "ddalpha", "dendextend", "dimRed", "e1071", "egg", "feather", "fGarch", "forecast", "gclus", "ggmap", "ggpubr", "git2r", "gplots", "haven", "httpuv", "httr", "ipred", "jsonlite", "KFAS", "knitr", "labelled", "lava", "lintr", "lme4", "markdown", "mclust", "microbenchmark", "ModelMetrics", "modelr", "openssl", "pamr", "pheatmap", "pillar", "plotmo", "prabclus", "processx", "ps", "psych", "purrr", "questionr", "RANN", "raster", "RcppArmadillo", "RcppEigen", "recipes", "rlang", "rmarkdown", "rstudioapi", "sfsmisc", "spData", "testit", "TH.data", "tibble", "tidyr", "tinytex", "tseries", "vegan", "xfun", "xts"))
1549416231426:#!/usr/bin/env Rscript
1549416231462:# ##############################################################################
1549416231463:#  Author:   Hector Fabio Espitia-Navarro
1549416231463:#            Georgia Institute of Technology
1549416231463:#  Version:  1.0
1549416231463:#  Date:     02/05/2019
1549416231464:# ##############################################################################
1549416231464:# Install required packages -----------------------------------------------
1549416231464:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549416231465:if(!file.exists(personal.lib.path))
1549416231466:dir.create(personal.lib.path)
1549416231466:printMessage <- function(message, verbose){
1549416231467:if(verbose)
1549416231467:cat(message)
1549416231467:}
1549416231468:installAndLoadPackages <- function(pkg, verbose){
1549416231468:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1549416231469:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1549416231469:printMessage("Done!\n", verbose)
1549416231469:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549416231470:if (length(new.pkg)) {
1549416231470:printMessage("Installing new packages... ", verbose)
1549416231471:install.packages(new.pkg, dependencies = TRUE,
1549416231471:repos="http://cran.rstudio.com/",
1549416231472:lib = personal.lib.path)
1549416231472:printMessage("Done!\n", verbose)
1549416231473:}
1549416231473:printMessage("Loading required packages... ", verbose)
1549416231474:sapply(pkg, function(x){
1549416231474:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549416231475:})
1549416231476:printMessage("Done!\n", verbose)
1549416231476:}
1549416231477:packages <- c("magrittr", "tidyverse", "stringr", "svglite")
1549416231478:installAndLoadPackages("argparser", verbose = FALSE)
1549416231970:# Command line arguments processing ---------------------------------------
1549416231970:# Get script name
1549416231971:initial.options <- commandArgs(trailingOnly = FALSE)
1549416231972:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1549416231972:# Process command line arguments
1549416231973:# Create a parser
1549416231973:p <- arg_parser("This script format the table of coverage for failed alleles.",
1549416231973:name = script.name)
1549416232034:# Add Positional arguments (required)
1549416232035:p <- add_argument(p, "depth_file", help = "STing detector per base depth file")
1549416232037:p <- add_argument(p, "results_file", help = "STing detector results file file")
1549416232038:p <- add_argument(p, "failed_file", help = "Failed alleles file")
1549416232040:# Add options
1549416232041:# p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1549416232041:p <- add_argument(p, "--out_file", help = "Output filename.",
1549416232042:default = "merged_depth_data.tsv")
1549416232043:# p <- add_argument(p, "--sample_name", help = "Sample name.",
1549416232044:# 									default = "input file's name")
1549416232044:p <- add_argument(p, "--compress", help = "Compress the output file with gzip.",
1549416232045:flag = TRUE)
1549416232047:# Initialization of variables ---------------------------------------------
1549416232047:# Values to test the script using RStudio
1549416232048:dataHome    <- "/home/hspitia/Dropbox/gatech/projects/STing/manuscript/data/typer/v0.24/detector_on_failed"
1549416232049:depthFile   <- paste(dataHome,"detector.v024.nm20.cgmlst.failed_alleles.depth.tsv.gz", sep = "/")
1549416232049:depthFile   <- paste(dataHome,"ERR036060.tsv", sep = "/")
1549416232050:resultsFile <- paste(dataHome,"detector.v0.24.nm20.cgmlst.failed_alleles.results.tsv", sep = "/")
1549416232051:failedFile  <- paste(dataHome,"typer.v0.24.nm20.cgmlst.failed.tsv", sep = "/")
1549416232052:outFile     <- paste(dataHome,"merged_depth_data.tsv", sep = "/")
1549416232053:compress    <- TRUE
1549416232054:# out.prefix  <- "kmer_ext_depth"
1549416232054:# sample.name <- basename(inputFile)
1549416232055:# Parse command line arguments
1549416232056:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1549416232056:argv <- list()
1549416232057:if(command.line) {
1549416232058:argv <- parse_args(p)
1549416232058:} else {
1549416232058:argv <- parse_args(p, list(depthFile, resultsFile, failedFile,
1549416232059:"--out_file", outFile,
1549416232059:"--compress"
1549416232060:# "--format", out.format)
1549416232060:)
1549416232061:)
1549416232061:}
1549416232073:# Get argument values from the command line
1549416232073:depthFile   <- argv$depth_file
1549416232074:resultsFile <- argv$results_file
1549416232074:failedFile  <- argv$failed_file
1549416232075:outFile     <- argv$out_file
1549416232075:compress    <- argv$compress
1549416232076:# if (sample.name == "input file's name")
1549416232076:# 	sample.name <- basename(input.file)
1549416232077:# Function to check if file exists ----------------------------------------
1549416232077:CheckFileExists <- function(file.list) {
1549416232077:non.exist.files <- !file.exists(file.list)
1549416232077:if(any(non.exist.files)) {
1549416232078:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549416232078:}
1549416232078:}
1549416232079:# Check for input files ---------------------------------------------------
1549416237957:# Check for input files ---------------------------------------------------
1549416237957:files.to.check <- c(depthFile, resultsFile, failedFile)
1549416241434:#!/usr/bin/env Rscript
1549416241435:# ##############################################################################
1549416241436:#  Author:   Hector Fabio Espitia-Navarro
1549416241436:#            Georgia Institute of Technology
1549416241436:#  Version:  1.0
1549416241437:#  Date:     02/05/2019
1549416241437:# ##############################################################################
1549416241437:# Install required packages -----------------------------------------------
1549416241438:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549416241438:if(!file.exists(personal.lib.path))
1549416241439:dir.create(personal.lib.path)
1549416241440:printMessage <- function(message, verbose){
1549416241440:if(verbose)
1549416241440:cat(message)
1549416241440:}
1549416241441:installAndLoadPackages <- function(pkg, verbose){
1549416241441:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1549416241442:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1549416241442:printMessage("Done!\n", verbose)
1549416241442:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549416241443:if (length(new.pkg)) {
1549416241443:printMessage("Installing new packages... ", verbose)
1549416241443:install.packages(new.pkg, dependencies = TRUE,
1549416241444:repos="http://cran.rstudio.com/",
1549416241444:lib = personal.lib.path)
1549416241445:printMessage("Done!\n", verbose)
1549416241445:}
1549416241446:printMessage("Loading required packages... ", verbose)
1549416241447:sapply(pkg, function(x){
1549416241447:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549416241447:})
1549416241448:printMessage("Done!\n", verbose)
1549416241448:}
1549416241449:packages <- c("magrittr", "tidyverse", "stringr", "svglite")
1549416241449:installAndLoadPackages("argparser", verbose = FALSE)
1549416241484:# Command line arguments processing ---------------------------------------
1549416241484:# Get script name
1549416241485:initial.options <- commandArgs(trailingOnly = FALSE)
1549416241486:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1549416241487:# Process command line arguments
1549416241487:# Create a parser
1549416241488:p <- arg_parser("This script format the table of coverage for failed alleles.",
1549416241488:name = script.name)
1549416241506:# Add Positional arguments (required)
1549416241506:p <- add_argument(p, "depth_file", help = "STing detector per base depth file")
1549416241508:p <- add_argument(p, "results_file", help = "STing detector results file file")
1549416241509:p <- add_argument(p, "failed_file", help = "Failed alleles file")
1549416241511:# Add options
1549416241511:# p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1549416241512:p <- add_argument(p, "--out_file", help = "Output filename.",
1549416241512:default = "merged_depth_data.tsv")
1549416241514:# p <- add_argument(p, "--sample_name", help = "Sample name.",
1549416241514:# 									default = "input file's name")
1549416241515:p <- add_argument(p, "--compress", help = "Compress the output file with gzip.",
1549416241515:flag = TRUE)
1549416241517:# Initialization of variables ---------------------------------------------
1549416241518:# Values to test the script using RStudio
1549416241518:dataHome    <- "/home/hspitia/Dropbox/gatech/projects/STing/manuscript/data/typer/v0.24/detector_on_failed"
1549416241519:depthFile   <- paste(dataHome,"detector.v024.nm20.cgmlst.failed_alleles.depth.tsv.gz", sep = "/")
1549416241520:depthFile   <- paste(dataHome,"ERR036060.tsv", sep = "/")
1549416241521:resultsFile <- paste(dataHome,"detector.v0.24.nm20.cgmlst.failed_alleles.results.tsv", sep = "/")
1549416241521:failedFile  <- paste(dataHome,"typer.v0.24.nm20.cgmlst.failed.tsv", sep = "/")
1549416241522:outFile     <- paste(dataHome,"merged_depth_data.tsv", sep = "/")
1549416241523:compress    <- TRUE
1549416241524:# out.prefix  <- "kmer_ext_depth"
1549416241524:# sample.name <- basename(inputFile)
1549416241525:# Parse command line arguments
1549416241526:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1549416241526:argv <- list()
1549416241527:if(command.line) {
1549416241528:argv <- parse_args(p)
1549416241528:} else {
1549416241529:argv <- parse_args(p, list(depthFile, resultsFile, failedFile,
1549416241529:"--out_file", outFile,
1549416241530:"--compress"
1549416241530:# "--format", out.format)
1549416241531:)
1549416241531:)
1549416241532:}
1549416241676:# Get argument values from the command line
1549416241677:depthFile   <- argv$depth_file
1549416241678:resultsFile <- argv$results_file
1549416241678:failedFile  <- argv$failed_file
1549416241679:outFile     <- argv$out_file
1549416241680:compress    <- argv$compress
1549416241681:# if (sample.name == "input file's name")
1549416241682:# 	sample.name <- basename(input.file)
1549416241682:# Function to check if file exists ----------------------------------------
1549416241683:CheckFileExists <- function(file.list) {
1549416241683:non.exist.files <- !file.exists(file.list)
1549416241684:if(any(non.exist.files)) {
1549416241684:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549416241685:}
1549416241685:}
1549416241686:# Check for input files ---------------------------------------------------
1549416241687:files.to.check <- c(depthFile, resultsFile, failedFile)
1549416241688:error.message  <- CheckFileExists(files.to.check)
1549416241689:if(!is.null(error.message)){
1549416241689:stop(error.message)
1549416241690:} else {
1549416241690:# Code core - Begin -------------------------------------------------------
1549416241691:installAndLoadPackages(packages, verbose = TRUE)
1549416241691:# Functions definition: ---------------------------------------------------
1549416241692:#
1549416241692:# General options ---------------------------------------------------------
1549416241693:#
1549416241693:# Load data ---------------------------------------------------------------
1549416241694:depthData   <- read_tsv(depthFile)
1549416241694:resultsData <- read_tsv(resultsFile)
1549416241695:failedData  <- read_tsv(failedFile)
1549416241696:# Format failed table: expand a row with two or more observed alleles into
1549416241697:# a same number of rows
1549416241697:(rowsWithTwoPlusObsAlleles <- failedData %>%
1549416241698:filter(str_detect(Observed, ";"))
1549416241698:)
1549416241699:expandedData <- data_frame()
1549416241700:for (i in 1:nrow(rowsWithTwoPlusObsAlleles)) {
1549416241700:origRow <- rowsWithTwoPlusObsAlleles %>% slice(i)
1549416241701:(obsAlleles    <- unlist(str_split(rowsWithTwoPlusObsAlleles %>% slice(i) %>% select(Observed) %>% pull(), ";")))
1549416241702:(obsSeqAlleles <- unlist(str_split(rowsWithTwoPlusObsAlleles %>% slice(i) %>% select(SeqObs) %>% pull(), " ")))
1549416241702:tmpExpanded   <- data_frame()
1549416241703:alleleNumbers <- c()
1549416241704:for (j in 1:length(obsAlleles)) {
1549416241704:tmpExpanded   <- rbind(tmpExpanded, origRow)
1549416241705:alleleNumbers <- c(alleleNumbers, j)
1549416241705:}
1549416241706:tmpExpanded$Observed  <- obsAlleles
1549416241707:tmpExpanded$SeqObs    <- obsSeqAlleles
1549416241707:tmpExpanded$NumAllele <- alleleNumbers
1549416241708:expandedData          <- rbind(expandedData, tmpExpanded)
1549416241709:}
1549416241709:expandedData
1549416241711:(failedDataFmtd <- failedData %>%
1549416241711:filter(!str_detect(Observed, ";")) %>%
1549416241712:mutate(NumAllele = 1) %>%
1549416241713:rbind(expandedData) %>%
1549416241714:arrange(Sample, Locus) %>%
1549416241715:select(-c(Correct)) %>%
1549416241716:gather(AlleleType, AlleleNumber, -c(Sample, Locus, SeqObs, SeqPred, RunMode, NumAllele)) %>%
1549416241717:gather(SeqType, Allele, -c(Sample, Locus, AlleleType, AlleleNumber, RunMode, NumAllele)) %>%
1549416241717:select(-SeqType)
1549416241718:)
1549416241720:# Transform results data: split sample column into Sample and Locus
1549416241720:resultsData$Locus  <- unlist(lapply(str_split(resultsData$Sample, "_", n=3), function(x) {x[2]}))
1549416241721:resultsData$Sample <- unlist(lapply(str_split(resultsData$Sample, "_", n=3), function(x) {x[1]}))
1549416241722:(resultsData %<>% select(Sample, Locus, everything()))
1549416241723:# Add new info to depth table --------------------------------------------
1549416241725:(outTable <- depthData %>%
1549416241726:left_join(failedDataFmtd %>%
1549416241727:select(sample = Sample,
1549416241728:locus = Locus,
1549416241729:allele = Allele,
1549416241729:allele_type = AlleleType,
1549416241730:allele_number = AlleleNumber,
1549416241731:num_allele = NumAllele,
1549416241732:run_mode = RunMode)) %>%
1549416241733:left_join(resultsData %>%
1549416241733:select(sample = Sample,
1549416241734:locus = Locus,
1549416241735:allele = Gene,
1549416241735:kmer_counts = `k-mer_counts`,
1549416241736:coverage = `Gene_cov(%)`,
1549416241736:length = Gene_length,
1549416241737:mean_kmer_depth = `Mean_k-mer_depth`)) %>%
1549416241738:arrange(sample, allele, allele_type, position) %>%
1549416241738:mutate(norm_count = kmer_counts/length) %>%
1549416241739:select(sample, locus, allele, position, kmer_depth, norm_count,
1549416241740:coverage, mean_kmer_depth, allele_type, num_allele, everything())
1549416241741:)
1549416241743:# Save to file
1549416241744:if (compress)
1549416241745:outFile <- gzfile(str_c(outFile, ".gz"))
1549416241747:write_tsv(outTable, path = outFile)
1549416241749:# Remove all variables from memory
1549416241750:rm(list=ls())
1549416241752:# Code core - End ---------------------------------------------------------
1549416241754:}
1549416272337:#!/usr/bin/env Rscript
1549416272338:# ##############################################################################
1549416272338:#  Author:   Hector Fabio Espitia-Navarro
1549416272339:#            Georgia Institute of Technology
1549416272339:#  Version:  1.0
1549416272340:#  Date:     02/05/2019
1549416272340:# ##############################################################################
1549416272341:# Install required packages -----------------------------------------------
1549416272341:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549416272342:if(!file.exists(personal.lib.path))
1549416272342:dir.create(personal.lib.path)
1549416272344:printMessage <- function(message, verbose){
1549416272344:if(verbose)
1549416272344:cat(message)
1549416272345:}
1549416272346:installAndLoadPackages <- function(pkg, verbose){
1549416272346:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1549416272347:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1549416272347:printMessage("Done!\n", verbose)
1549416272348:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549416272348:if (length(new.pkg)) {
1549416272348:printMessage("Installing new packages... ", verbose)
1549416272349:install.packages(new.pkg, dependencies = TRUE,
1549416272349:repos="http://cran.rstudio.com/",
1549416272349:lib = personal.lib.path)
1549416272350:printMessage("Done!\n", verbose)
1549416272350:}
1549416272350:printMessage("Loading required packages... ", verbose)
1549416272351:sapply(pkg, function(x){
1549416272351:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549416272352:})
1549416272352:printMessage("Done!\n", verbose)
1549416272352:}
1549416272353:packages <- c("magrittr", "tidyverse", "stringr", "svglite")
1549416272354:installAndLoadPackages("argparser", verbose = FALSE)
1549416272385:# Command line arguments processing ---------------------------------------
1549416272386:# Get script name
1549416272386:initial.options <- commandArgs(trailingOnly = FALSE)
1549416272387:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1549416272388:# Process command line arguments
1549416272388:# Create a parser
1549416272389:p <- arg_parser("This script format the table of coverage for failed alleles.",
1549416272389:name = script.name)
1549416272391:# Add Positional arguments (required)
1549416272392:p <- add_argument(p, "depth_file", help = "STing detector per base depth file")
1549416272393:p <- add_argument(p, "results_file", help = "STing detector results file file")
1549416272394:p <- add_argument(p, "failed_file", help = "Failed alleles file")
1549416272396:# Add options
1549416272396:# p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1549416272397:p <- add_argument(p, "--out_file", help = "Output filename.",
1549416272397:default = "merged_depth_data.tsv")
1549416272398:# p <- add_argument(p, "--sample_name", help = "Sample name.",
1549416272399:# 									default = "input file's name")
1549416272399:p <- add_argument(p, "--compress", help = "Compress the output file with gzip.",
1549416272400:flag = TRUE)
1549416272401:# Initialization of variables ---------------------------------------------
1549416272402:# Values to test the script using RStudio
1549416272402:dataHome    <- "/home/hspitia/Dropbox/gatech/projects/STing/manuscript/data/typer/v0.24/detector_on_failed"
1549416272403:depthFile   <- paste(dataHome,"detector.v024.nm20.cgmlst.failed_alleles.depth.tsv.gz", sep = "/")
1549416272404:depthFile   <- paste(dataHome,"ERR036060.tsv", sep = "/")
1549416272404:resultsFile <- paste(dataHome,"detector.v0.24.nm20.cgmlst.failed_alleles.results.tsv", sep = "/")
1549416272405:failedFile  <- paste(dataHome,"typer.v0.24.nm20.cgmlst.failed.tsv", sep = "/")
1549416272406:outFile     <- paste(dataHome,"merged_depth_data.tsv", sep = "/")
1549416272406:compress    <- TRUE
1549416272407:# out.prefix  <- "kmer_ext_depth"
1549416272408:# sample.name <- basename(inputFile)
1549416272408:# Parse command line arguments
1549416272409:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1549416272410:argv <- list()
1549416272410:if(command.line) {
1549416272411:argv <- parse_args(p)
1549416272411:} else {
1549416272412:argv <- parse_args(p, list(depthFile, resultsFile, failedFile,
1549416272412:"--out_file", outFile,
1549416272413:"--compress"
1549416272413:# "--format", out.format)
1549416272414:)
1549416272414:)
1549416272415:}
1549416272418:# Get argument values from the command line
1549416272418:depthFile   <- argv$depth_file
1549416272419:resultsFile <- argv$results_file
1549416272420:failedFile  <- argv$failed_file
1549416272421:outFile     <- argv$out_file
1549416272422:compress    <- argv$compress
1549416272423:# if (sample.name == "input file's name")
1549416272423:# 	sample.name <- basename(input.file)
1549416272424:# Function to check if file exists ----------------------------------------
1549416272425:CheckFileExists <- function(file.list) {
1549416272425:non.exist.files <- !file.exists(file.list)
1549416272426:if(any(non.exist.files)) {
1549416272426:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549416272426:}
1549416272427:}
1549416272428:# Check for input files ---------------------------------------------------
1549416272428:files.to.check <- c(depthFile, resultsFile, failedFile)
1549416272429:error.message  <- CheckFileExists(files.to.check)
1549416272430:if(!is.null(error.message)){
1549416272431:stop(error.message)
1549416272431:} else {
1549416272431:# Code core - Begin -------------------------------------------------------
1549416272432:installAndLoadPackages(packages, verbose = TRUE)
1549416272432:# Functions definition: ---------------------------------------------------
1549416272433:#
1549416272433:# General options ---------------------------------------------------------
1549416272434:#
1549416272434:# Load data ---------------------------------------------------------------
1549416272435:depthData   <- read_tsv(depthFile)
1549416272435:resultsData <- read_tsv(resultsFile)
1549416272436:failedData  <- read_tsv(failedFile)
1549416272437:# Format failed table: expand a row with two or more observed alleles into
1549416272437:# a same number of rows
1549416272438:(rowsWithTwoPlusObsAlleles <- failedData %>%
1549416272438:filter(str_detect(Observed, ";"))
1549416272439:)
1549416272440:expandedData <- tibble()
1549416272441:for (i in 1:nrow(rowsWithTwoPlusObsAlleles)) {
1549416272441:origRow <- rowsWithTwoPlusObsAlleles %>% slice(i)
1549416272442:(obsAlleles    <- unlist(str_split(rowsWithTwoPlusObsAlleles %>% slice(i) %>% select(Observed) %>% pull(), ";")))
1549416272443:(obsSeqAlleles <- unlist(str_split(rowsWithTwoPlusObsAlleles %>% slice(i) %>% select(SeqObs) %>% pull(), " ")))
1549416272444:tmpExpanded   <- data_frame()
1549416272444:alleleNumbers <- c()
1549416272445:for (j in 1:length(obsAlleles)) {
1549416272445:tmpExpanded   <- rbind(tmpExpanded, origRow)
1549416272446:alleleNumbers <- c(alleleNumbers, j)
1549416272447:}
1549416272447:tmpExpanded$Observed  <- obsAlleles
1549416272448:tmpExpanded$SeqObs    <- obsSeqAlleles
1549416272449:tmpExpanded$NumAllele <- alleleNumbers
1549416272449:expandedData          <- rbind(expandedData, tmpExpanded)
1549416272450:}
1549416272451:expandedData
1549416272453:(failedDataFmtd <- failedData %>%
1549416272454:filter(!str_detect(Observed, ";")) %>%
1549416272455:mutate(NumAllele = 1) %>%
1549416272456:rbind(expandedData) %>%
1549416272457:arrange(Sample, Locus) %>%
1549416272458:select(-c(Correct)) %>%
1549416272458:gather(AlleleType, AlleleNumber, -c(Sample, Locus, SeqObs, SeqPred, RunMode, NumAllele)) %>%
1549416272459:gather(SeqType, Allele, -c(Sample, Locus, AlleleType, AlleleNumber, RunMode, NumAllele)) %>%
1549416272460:select(-SeqType)
1549416272461:)
1549416272462:# Transform results data: split sample column into Sample and Locus
1549416272463:resultsData$Locus  <- unlist(lapply(str_split(resultsData$Sample, "_", n=3), function(x) {x[2]}))
1549416272464:resultsData$Sample <- unlist(lapply(str_split(resultsData$Sample, "_", n=3), function(x) {x[1]}))
1549416272465:(resultsData %<>% select(Sample, Locus, everything()))
1549416272467:# Add new info to depth table --------------------------------------------
1549416272469:(outTable <- depthData %>%
1549416272470:left_join(failedDataFmtd %>%
1549416272472:select(sample = Sample,
1549416272473:locus = Locus,
1549416272474:allele = Allele,
1549416272475:allele_type = AlleleType,
1549416272476:allele_number = AlleleNumber,
1549416272477:num_allele = NumAllele,
1549416272478:run_mode = RunMode)) %>%
1549416272478:left_join(resultsData %>%
1549416272479:select(sample = Sample,
1549416272480:locus = Locus,
1549416272481:allele = Gene,
1549416272482:kmer_counts = `k-mer_counts`,
1549416272483:coverage = `Gene_cov(%)`,
1549416272484:length = Gene_length,
1549416272485:mean_kmer_depth = `Mean_k-mer_depth`)) %>%
1549416272486:arrange(sample, allele, allele_type, position) %>%
1549416272487:mutate(norm_count = kmer_counts/length) %>%
1549416272488:select(sample, locus, allele, position, kmer_depth, norm_count,
1549416272489:coverage, mean_kmer_depth, allele_type, num_allele, everything())
1549416272490:)
1549416272492:# Save to file
1549416272493:if (compress)
1549416272494:outFile <- gzfile(str_c(outFile, ".gz"))
1549416272496:write_tsv(outTable, path = outFile)
1549416272498:# Remove all variables from memory
1549416272499:rm(list=ls())
1549416272501:# Code core - End ---------------------------------------------------------
1549416272502:}
1549416288997:depthData
1549416295515:# Code core - Begin -------------------------------------------------------
1549416295516:installAndLoadPackages(packages, verbose = TRUE)
1549416296189:# Functions definition: ---------------------------------------------------
1549416296189:#
1549416296189:# General options ---------------------------------------------------------
1549416296190:#
1549416296190:# Load data ---------------------------------------------------------------
1549416296190:depthData   <- read_tsv(depthFile)
1549416297042:resultsData <- read_tsv(resultsFile)
1549416297866:failedData  <- read_tsv(failedFile)
1549416303214:#!/usr/bin/env Rscript
1549416303214:# ##############################################################################
1549416303214:#  Author:   Hector Fabio Espitia-Navarro
1549416303215:#            Georgia Institute of Technology
1549416303215:#  Version:  1.0
1549416303216:#  Date:     02/05/2019
1549416303216:# ##############################################################################
1549416303217:# Install required packages -----------------------------------------------
1549416303217:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549416303218:if(!file.exists(personal.lib.path))
1549416303219:dir.create(personal.lib.path)
1549416303220:printMessage <- function(message, verbose){
1549416303220:if(verbose)
1549416303221:cat(message)
1549416303221:}
1549416303223:installAndLoadPackages <- function(pkg, verbose){
1549416303224:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1549416303225:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1549416303225:printMessage("Done!\n", verbose)
1549416303226:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549416303227:if (length(new.pkg)) {
1549416303227:printMessage("Installing new packages... ", verbose)
1549416303228:install.packages(new.pkg, dependencies = TRUE,
1549416303228:repos="http://cran.rstudio.com/",
1549416303229:lib = personal.lib.path)
1549416303229:printMessage("Done!\n", verbose)
1549416303230:}
1549416303231:printMessage("Loading required packages... ", verbose)
1549416303231:sapply(pkg, function(x){
1549416303232:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549416303232:})
1549416303233:printMessage("Done!\n", verbose)
1549416303233:}
1549416303234:packages <- c("magrittr", "tidyverse", "stringr", "svglite")
1549416303234:installAndLoadPackages("argparser", verbose = FALSE)
1549416303255:# Command line arguments processing ---------------------------------------
1549416303255:# Get script name
1549416303256:initial.options <- commandArgs(trailingOnly = FALSE)
1549416303256:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1549416303257:# Process command line arguments
1549416303257:# Create a parser
1549416303257:p <- arg_parser("This script format the table of coverage for failed alleles.",
1549416303258:name = script.name)
1549416303259:# Add Positional arguments (required)
1549416303260:p <- add_argument(p, "depth_file", help = "STing detector per base depth file")
1549416303261:p <- add_argument(p, "results_file", help = "STing detector results file file")
1549416303261:p <- add_argument(p, "failed_file", help = "Failed alleles file")
1549416303262:# Add options
1549416303262:# p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1549416303263:p <- add_argument(p, "--out_file", help = "Output filename.",
1549416303263:default = "merged_depth_data.tsv")
1549416303264:# p <- add_argument(p, "--sample_name", help = "Sample name.",
1549416303264:# 									default = "input file's name")
1549416303264:p <- add_argument(p, "--compress", help = "Compress the output file with gzip.",
1549416303265:flag = TRUE)
1549416303266:# Initialization of variables ---------------------------------------------
1549416303266:# Values to test the script using RStudio
1549416303266:dataHome    <- "/home/hspitia/Dropbox/gatech/projects/STing/manuscript/data/typer/v0.24/detector_on_failed"
1549416303267:depthFile   <- paste(dataHome,"detector.v024.nm20.cgmlst.failed_alleles.depth.tsv.gz", sep = "/")
1549416303267:depthFile   <- paste(dataHome,"ERR036060.tsv", sep = "/")
1549416303268:resultsFile <- paste(dataHome,"detector.v0.24.nm20.cgmlst.failed_alleles.results.tsv", sep = "/")
1549416303268:failedFile  <- paste(dataHome,"typer.v0.24.nm20.cgmlst.failed.tsv", sep = "/")
1549416303269:outFile     <- paste(dataHome,"merged_depth_data.tsv", sep = "/")
1549416303269:compress    <- TRUE
1549416303270:# out.prefix  <- "kmer_ext_depth"
1549416303270:# sample.name <- basename(inputFile)
1549416303271:# Parse command line arguments
1549416303271:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1549416303271:argv <- list()
1549416303272:if(command.line) {
1549416303272:argv <- parse_args(p)
1549416303273:} else {
1549416303273:argv <- parse_args(p, list(depthFile, resultsFile, failedFile,
1549416303273:"--out_file", outFile,
1549416303274:"--compress"
1549416303274:# "--format", out.format)
1549416303275:)
1549416303275:)
1549416303275:}
1549416303276:# Get argument values from the command line
1549416303277:depthFile   <- argv$depth_file
1549416303277:resultsFile <- argv$results_file
1549416303278:failedFile  <- argv$failed_file
1549416303278:outFile     <- argv$out_file
1549416303279:compress    <- argv$compress
1549416303280:# if (sample.name == "input file's name")
1549416303280:# 	sample.name <- basename(input.file)
1549416303281:# Function to check if file exists ----------------------------------------
1549416303281:CheckFileExists <- function(file.list) {
1549416303281:non.exist.files <- !file.exists(file.list)
1549416303282:if(any(non.exist.files)) {
1549416303282:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549416303282:}
1549416303282:}
1549416303283:# Check for input files ---------------------------------------------------
1549416303283:files.to.check <- c(depthFile, resultsFile, failedFile)
1549416303284:error.message  <- CheckFileExists(files.to.check)
1549416305816:error.message
1549416309580:# Code core - Begin -------------------------------------------------------
1549416309580:installAndLoadPackages(packages, verbose = TRUE)
1549416313453:# Functions definition: ---------------------------------------------------
1549416313453:#
1549416313454:# General options ---------------------------------------------------------
1549416313454:#
1549416313455:# Load data ---------------------------------------------------------------
1549416313455:depthData   <- read_tsv(depthFile)
1549416314334:resultsData <- read_tsv(resultsFile)
1549416315042:failedData  <- read_tsv(failedFile)
1549416315957:# Format failed table: expand a row with two or more observed alleles into
1549416315957:# a same number of rows
1549416315958:(rowsWithTwoPlusObsAlleles <- failedData %>%
1549416315958:filter(str_detect(Observed, ";"))
1549416315959:)
1549416322308:expandedData <- tibble()
1549416323170:for (i in 1:nrow(rowsWithTwoPlusObsAlleles)) {
1549416323170:origRow <- rowsWithTwoPlusObsAlleles %>% slice(i)
1549416323171:(obsAlleles    <- unlist(str_split(rowsWithTwoPlusObsAlleles %>% slice(i) %>% select(Observed) %>% pull(), ";")))
1549416323171:(obsSeqAlleles <- unlist(str_split(rowsWithTwoPlusObsAlleles %>% slice(i) %>% select(SeqObs) %>% pull(), " ")))
1549416323171:tmpExpanded   <- data_frame()
1549416323172:alleleNumbers <- c()
1549416323172:for (j in 1:length(obsAlleles)) {
1549416323172:tmpExpanded   <- rbind(tmpExpanded, origRow)
1549416323173:alleleNumbers <- c(alleleNumbers, j)
1549416323173:}
1549416323174:tmpExpanded$Observed  <- obsAlleles
1549416323174:tmpExpanded$SeqObs    <- obsSeqAlleles
1549416323174:tmpExpanded$NumAllele <- alleleNumbers
1549416323175:expandedData          <- rbind(expandedData, tmpExpanded)
1549416323175:}
1549416324156:expandedData
1549416335019:# Functions definition: ---------------------------------------------------
1549416335019:#
1549416335020:# General options ---------------------------------------------------------
1549416335020:#
1549416335020:# Load data ---------------------------------------------------------------
1549416335021:depthData   <- read_tsv(depthFile)
1549416336490:resultsData <- read_tsv(resultsFile)
1549416336839:failedData  <- read_tsv(failedFile)
1549416338714:depthData
1549416344270:resultsData
1549416347912:depthData
1549416356621:# Format failed table: expand a row with two or more observed alleles into
1549416356622:# a same number of rows
1549416356622:(rowsWithTwoPlusObsAlleles <- failedData %>%
1549416356623:filter(str_detect(Observed, ";"))
1549416356624:)
1549416357319:expandedData <- tibble()
1549416357973:for (i in 1:nrow(rowsWithTwoPlusObsAlleles)) {
1549416357974:origRow <- rowsWithTwoPlusObsAlleles %>% slice(i)
1549416357974:(obsAlleles    <- unlist(str_split(rowsWithTwoPlusObsAlleles %>% slice(i) %>% select(Observed) %>% pull(), ";")))
1549416357974:(obsSeqAlleles <- unlist(str_split(rowsWithTwoPlusObsAlleles %>% slice(i) %>% select(SeqObs) %>% pull(), " ")))
1549416357975:tmpExpanded   <- data_frame()
1549416357975:alleleNumbers <- c()
1549416357975:for (j in 1:length(obsAlleles)) {
1549416357976:tmpExpanded   <- rbind(tmpExpanded, origRow)
1549416357976:alleleNumbers <- c(alleleNumbers, j)
1549416357977:}
1549416357977:tmpExpanded$Observed  <- obsAlleles
1549416357977:tmpExpanded$SeqObs    <- obsSeqAlleles
1549416357978:tmpExpanded$NumAllele <- alleleNumbers
1549416357978:expandedData          <- rbind(expandedData, tmpExpanded)
1549416357979:}
1549416359411:expandedData
1549416363886:(failedDataFmtd <- failedData %>%
1549416363887:filter(!str_detect(Observed, ";")) %>%
1549416363888:mutate(NumAllele = 1) %>%
1549416363888:rbind(expandedData) %>%
1549416363889:arrange(Sample, Locus) %>%
1549416363889:select(-c(Correct)) %>%
1549416363890:gather(AlleleType, AlleleNumber, -c(Sample, Locus, SeqObs, SeqPred, RunMode, NumAllele)) %>%
1549416363890:gather(SeqType, Allele, -c(Sample, Locus, AlleleType, AlleleNumber, RunMode, NumAllele)) %>%
1549416363890:select(-SeqType)
1549416363891:)
1549416384786:View(expandedData)
1549416637699:expandedData %>%
1549416637699:select(-c(Observed, SeqObs, NumAllele))
1549416710483:expandedData %>%
1549416710484:select(-c(Observed, SeqObs, NumAllele)) %>%
1549416710484:distinct()
1549416717040:expandedData %>%
1549416717041:select(-c(Observed, SeqObs, NumAllele))
1549416721110:expandedData %>%
1549416721110:select(-c(Observed, SeqObs, NumAllele)) %>%
1549416721110:distinct()
1549416732693:expandedData %>%
1549416732693:select(-c(Observed, SeqObs, NumAllele))
1549416737341:expandedData %>%
1549416737341:select(-c(Observed, SeqObs, NumAllele)) %>%
1549416737342:distinct()
1549416761332:expandedData %>%
1549416761332:select(-c(Observed, SeqObs, NumAllele))
1549416764650:expandedData %>%
1549416764650:select(-c(Observed, SeqObs, NumAllele)) %>%
1549416764651:distinct()
1549416830254:expandedData %>%
1549416830254:select(-c(Observed, SeqObs, NumAllele)) %>%
1549416830254:distinct() %>%
1549416830255:gather(AlleleType, AlleleNumber)
1549416842718:expandedData %>%
1549416842718:select(-c(Observed, SeqObs, NumAllele)) %>%
1549416842719:distinct()
1549416873911:expandedData %>%
1549416873912:select(-c(Observed, SeqObs, NumAllele)) %>%
1549416873912:distinct() %>%
1549416873913:gather(AlleleType, AlleleNumber, -c(Sample, Locus, Correct, SeqPred, RunMode))
1549416898027:expandedData %>%
1549416898028:select(-c(Observed, SeqObs, NumAllele)) %>%
1549416898028:distinct() %>%
1549416898029:gather(AlleleType, AlleleNumber, -c(Sample, Locus, Correct, SeqPred, RunMode)) %>%
1549416898030:select(-Correct)
1549416956270:expandedData
1549417033285:expandedData %>%
1549417033285:select(-c(Observed, SeqObs, NumAllele)) %>%
1549417033286:distinct() %>%
1549417033286:gather(AlleleType, AlleleNumber, -c(Sample, Locus, Correct, SeqPred, RunMode)) %>%
1549417033286:select(-Correct)
1549417074347:expandedData %>%
1549417074348:select(-c(Observed, SeqObs, NumAllele)) %>%
1549417074348:distinct() %>%
1549417074349:gather(AlleleType, AlleleNumber, -c(Sample, Locus, Correct, SeqPred, RunMode)) %>%
1549417074350:select(-Correct, Seq = SeqPred, everything()
1549417079036:)
1549417124202:rbind(expandedData %>%
1549417124202:select(-c(Observed, SeqObs, NumAllele)) %>%
1549417124203:distinct() %>%
1549417124203:gather(AlleleType, AlleleNumber, -c(Sample, Locus, Correct, SeqPred, RunMode)) %>%
1549417124204:select(-Correct, Allele = SeqPred, everything()),
1549417124204:expandedData %>%
1549417124205:select(-c(Predicted, SeqPred, NumAllele)) %>%
1549417124205:distinct() %>%
1549417124206:gather(AlleleType, AlleleNumber, -c(Sample, Locus, Correct, SeqObs, RunMode)) %>%
1549417124206:select(-Correct, Allele = SeqObs, everything()))
1549417159857:expandedData <- rbind(expandedData %>%
1549417159858:select(-c(Observed, SeqObs, NumAllele)) %>%
1549417159858:distinct() %>%
1549417159859:gather(AlleleType, AlleleNumber, -c(Sample, Locus, Correct, SeqPred, RunMode)) %>%
1549417159859:select(-Correct, Allele = SeqPred, everything()),
1549417159860:expandedData %>%
1549417159860:select(-c(Predicted, SeqPred, NumAllele)) %>%
1549417159861:distinct() %>%
1549417159861:gather(AlleleType, AlleleNumber, -c(Sample, Locus, Correct, SeqObs, RunMode)) %>%
1549417159862:select(-Correct, Allele = SeqObs, everything()))
1549417161861:View(expandedData)
1549417214025:expandedData <- tibble()
1549417214576:for (i in 1:nrow(rowsWithTwoPlusObsAlleles)) {
1549417214576:origRow <- rowsWithTwoPlusObsAlleles %>% slice(i)
1549417214576:(obsAlleles    <- unlist(str_split(rowsWithTwoPlusObsAlleles %>% slice(i) %>% select(Observed) %>% pull(), ";")))
1549417214577:(obsSeqAlleles <- unlist(str_split(rowsWithTwoPlusObsAlleles %>% slice(i) %>% select(SeqObs) %>% pull(), " ")))
1549417214577:tmpExpanded   <- data_frame()
1549417214578:alleleNumbers <- c()
1549417214578:for (j in 1:length(obsAlleles)) {
1549417214578:tmpExpanded   <- rbind(tmpExpanded, origRow)
1549417214579:alleleNumbers <- c(alleleNumbers, j)
1549417214579:}
1549417214580:tmpExpanded$Observed  <- obsAlleles
1549417214580:tmpExpanded$SeqObs    <- obsSeqAlleles
1549417214580:tmpExpanded$NumAllele <- alleleNumbers
1549417214581:expandedData          <- rbind(expandedData, tmpExpanded)
1549417214581:}
1549417215632:expandedData <- rbind(expandedData %>%
1549417215632:select(-c(Observed, SeqObs, NumAllele)) %>%
1549417215633:distinct() %>%
1549417215634:gather(AlleleType, AlleleNumber, -c(Sample, Locus, NumAllele, Correct, SeqPred, RunMode)) %>%
1549417215634:select(-Correct, Allele = SeqPred, everything()),
1549417215635:expandedData %>%
1549417215636:select(-c(Predicted, SeqPred, NumAllele)) %>%
1549417215637:distinct() %>%
1549417215637:gather(AlleleType, AlleleNumber, -c(Sample, Locus, NumAllele, Correct, SeqObs, RunMode)) %>%
1549417215638:select(-Correct, Allele = SeqObs, everything()))
1549417228067:expandedData
1549417254055:expandedData <- rbind(expandedData %>%
1549417254056:select(-c(Observed, SeqObs)) %>%
1549417254057:distinct() %>%
1549417254057:gather(AlleleType, AlleleNumber, -c(Sample, Locus, NumAllele, Correct, SeqPred, RunMode)) %>%
1549417254058:select(-Correct, Allele = SeqPred, everything()),
1549417254058:expandedData %>%
1549417254059:select(-c(Predicted, SeqPred)) %>%
1549417254059:distinct() %>%
1549417254060:gather(AlleleType, AlleleNumber, -c(Sample, Locus, NumAllele, Correct, SeqObs, RunMode)) %>%
1549417254060:select(-Correct, Allele = SeqObs, everything()))
1549417257630:expandedData
1549417262695:View(expandedData)
1549417286443:expandedData <- rbind(expandedData %>%
1549417286444:select(-c(Observed, SeqObs)) %>%
1549417286444:distinct() %>%
1549417286445:gather(AlleleType, AlleleNumber, -c(Sample, Locus, NumAllele, Correct, SeqPred, RunMode)) %>%
1549417286445:select(-Correct, Allele = SeqPred, everything()),
1549417286446:expandedData %>%
1549417286447:select(-c(Predicted, SeqPred)) %>%
1549417286447:distinct() %>%
1549417286448:gather(AlleleType, AlleleNumber, -c(Sample, Locus, NumAllele, Correct, SeqObs, RunMode)) %>%
1549417286448:select(-Correct, Allele = SeqObs, everything()))
1549417298211:expandedData <- tibble()
1549417298690:for (i in 1:nrow(rowsWithTwoPlusObsAlleles)) {
1549417298691:origRow <- rowsWithTwoPlusObsAlleles %>% slice(i)
1549417298691:(obsAlleles    <- unlist(str_split(rowsWithTwoPlusObsAlleles %>% slice(i) %>% select(Observed) %>% pull(), ";")))
1549417298692:(obsSeqAlleles <- unlist(str_split(rowsWithTwoPlusObsAlleles %>% slice(i) %>% select(SeqObs) %>% pull(), " ")))
1549417298692:tmpExpanded   <- data_frame()
1549417298693:alleleNumbers <- c()
1549417298693:for (j in 1:length(obsAlleles)) {
1549417298694:tmpExpanded   <- rbind(tmpExpanded, origRow)
1549417298694:alleleNumbers <- c(alleleNumbers, j)
1549417298694:}
1549417298695:tmpExpanded$Observed  <- obsAlleles
1549417298695:tmpExpanded$SeqObs    <- obsSeqAlleles
1549417298696:tmpExpanded$NumAllele <- alleleNumbers
1549417298696:expandedData          <- rbind(expandedData, tmpExpanded)
1549417298696:}
1549417299530:expandedData <- rbind(expandedData %>%
1549417299530:select(-c(Observed, SeqObs)) %>%
1549417299531:distinct() %>%
1549417299531:gather(AlleleType, AlleleNumber, -c(Sample, Locus, NumAllele, Correct, SeqPred, RunMode)) %>%
1549417299531:select(-Correct, Allele = SeqPred, everything()),
1549417299532:expandedData %>%
1549417299532:select(-c(Predicted, SeqPred)) %>%
1549417299532:distinct() %>%
1549417299533:gather(AlleleType, AlleleNumber, -c(Sample, Locus, NumAllele, Correct, SeqObs, RunMode)) %>%
1549417299533:select(-Correct, Allele = SeqObs, everything()))
1549417301509:View(expandedData)
1549417404871:expandedData <- tibble()
1549417404872:for (i in 1:nrow(rowsWithTwoPlusObsAlleles)) {
1549417404872:origRow <- rowsWithTwoPlusObsAlleles %>% slice(i)
1549417404872:(obsAlleles    <- unlist(str_split(rowsWithTwoPlusObsAlleles %>% slice(i) %>% select(Observed) %>% pull(), ";")))
1549417404873:(obsSeqAlleles <- unlist(str_split(rowsWithTwoPlusObsAlleles %>% slice(i) %>% select(SeqObs) %>% pull(), " ")))
1549417404873:tmpExpanded   <- data_frame()
1549417404874:alleleNumbers <- c()
1549417404874:for (j in 1:length(obsAlleles)) {
1549417404875:tmpExpanded   <- rbind(tmpExpanded, origRow)
1549417404875:alleleNumbers <- c(alleleNumbers, j)
1549417404876:}
1549417404876:tmpExpanded$Observed  <- obsAlleles
1549417404877:tmpExpanded$SeqObs    <- obsSeqAlleles
1549417404877:tmpExpanded$NumAllele <- alleleNumbers
1549417404878:expandedData          <- rbind(expandedData, tmpExpanded)
1549417404878:}
1549417411195:(expandedData <- rbind(expandedData %>%
1549417411196:select(-c(Observed, SeqObs)) %>%
1549417411196:distinct() %>%
1549417411196:gather(AlleleType, AlleleNumber, -c(Sample, Locus, NumAllele, Correct, SeqPred, RunMode)) %>%
1549417411197:select(-Correct, Allele = SeqPred, NumAllele, everything()),
1549417411197:expandedData %>%
1549417411197:select(-c(Predicted, SeqPred, NumAllele)) %>%
1549417411198:distinct() %>%
1549417411198:gather(AlleleType, AlleleNumber, -c(Sample, Locus, Correct, SeqObs, RunMode)) %>%
1549417411198:mutate(NumAllele = 1) %>%
1549417411199:select(-Correct, Allele = SeqObs, NumAllele, everything())))
1549417419788:View(expandedData)
1549417435797:expandedData %>%
1549417435798:select(-c(Observed, SeqObs)) %>%
1549417435798:distinct() %>%
1549417435798:gather(AlleleType, AlleleNumber, -c(Sample, Locus, NumAllele, Correct, SeqPred, RunMode)) %>%
1549417435799:select(-Correct, Allele = SeqPred, NumAllele, everything())
1549417444803:expandedData <- tibble()
1549417444804:for (i in 1:nrow(rowsWithTwoPlusObsAlleles)) {
1549417444805:origRow <- rowsWithTwoPlusObsAlleles %>% slice(i)
1549417444805:(obsAlleles    <- unlist(str_split(rowsWithTwoPlusObsAlleles %>% slice(i) %>% select(Observed) %>% pull(), ";")))
1549417444806:(obsSeqAlleles <- unlist(str_split(rowsWithTwoPlusObsAlleles %>% slice(i) %>% select(SeqObs) %>% pull(), " ")))
1549417444806:tmpExpanded   <- data_frame()
1549417444806:alleleNumbers <- c()
1549417444807:for (j in 1:length(obsAlleles)) {
1549417444807:tmpExpanded   <- rbind(tmpExpanded, origRow)
1549417444808:alleleNumbers <- c(alleleNumbers, j)
1549417444808:}
1549417444808:tmpExpanded$Observed  <- obsAlleles
1549417444809:tmpExpanded$SeqObs    <- obsSeqAlleles
1549417444809:tmpExpanded$NumAllele <- alleleNumbers
1549417444810:expandedData          <- rbind(expandedData, tmpExpanded)
1549417444810:}
1549417452651:D
1549417455506:expandedData %>%
1549417455507:select(-c(Observed, SeqObs)) %>%
1549417455507:distinct() %>%
1549417455507:gather(AlleleType, AlleleNumber, -c(Sample, Locus, NumAllele, Correct, SeqPred, RunMode)) %>%
1549417455508:select(-Correct, Allele = SeqPred, NumAllele, everything())
1549417463833:View(expandedData)
1549417486100:obsDataset <- expandedData %>%
1549417486101:select(-c(Observed, SeqObs)) %>%
1549417486101:distinct() %>%
1549417486102:gather(AlleleType, AlleleNumber, -c(Sample, Locus, NumAllele, Correct, SeqPred, RunMode)) %>%
1549417486102:select(-Correct, Allele = SeqPred, NumAllele, everything())
1549417488106:View(obsDataset)
1549417510233:expandedData %>%
1549417510233:select(-c(Observed, SeqObs)) %>%
1549417510234:distinct()
1549417522835:expandedData %>%
1549417522836:select(-c(Observed, SeqObs)) %>%
1549417522836:distinct()
1549417528771:expandedData %>%
1549417528772:select(-c(Observed, SeqObs))
1549417555059:expandedData %>%
1549417555059:select(-c(Observed, SeqObs, NumAllele)) %>%
1549417555060:distinct()
1549417597150:predDataset <- expandedData %>%
1549417597151:select(-c(Observed, SeqObs, NumAllele)) %>%
1549417597151:distinct() %>%
1549417597152:gather(AlleleType, AlleleNumber, -c(Sample, Locus, NumAllele, Correct, SeqPred, RunMode)) %>%
1549417597153:mutate(NumAllele = 1) %>%
1549417597153:select(-Correct, Allele = SeqPred, NumAllele, everything())
1549417605607:expandedData %>%
1549417605607:select(-c(Observed, SeqObs, NumAllele)) %>%
1549417605608:distinct() %>%
1549417605608:gather(AlleleType, AlleleNumber, -c(Sample, Locus, NumAllele, Correct, SeqPred, RunMode)) %>%
1549417605608:mutate(NumAllele = 1)
1549417612884:expandedData <- tibble()
1549417612885:for (i in 1:nrow(rowsWithTwoPlusObsAlleles)) {
1549417612885:origRow <- rowsWithTwoPlusObsAlleles %>% slice(i)
1549417612886:(obsAlleles    <- unlist(str_split(rowsWithTwoPlusObsAlleles %>% slice(i) %>% select(Observed) %>% pull(), ";")))
1549417612886:(obsSeqAlleles <- unlist(str_split(rowsWithTwoPlusObsAlleles %>% slice(i) %>% select(SeqObs) %>% pull(), " ")))
1549417612887:tmpExpanded   <- data_frame()
1549417612887:alleleNumbers <- c()
1549417612887:for (j in 1:length(obsAlleles)) {
1549417612888:tmpExpanded   <- rbind(tmpExpanded, origRow)
1549417612888:alleleNumbers <- c(alleleNumbers, j)
1549417612889:}
1549417612889:tmpExpanded$Observed  <- obsAlleles
1549417612889:tmpExpanded$SeqObs    <- obsSeqAlleles
1549417612890:tmpExpanded$NumAllele <- alleleNumbers
1549417612890:expandedData          <- rbind(expandedData, tmpExpanded)
1549417612890:}
1549417617789:expandedData %>%
1549417617789:select(-c(Observed, SeqObs, NumAllele)) %>%
1549417617790:distinct() %>%
1549417629480:gather(AlleleType, AlleleNumber, -c(Sample, Locus, NumAllele, Correct, SeqPred, RunMode))
1549417641291:expandedData %>%
1549417641291:select(-c(Observed, SeqObs, NumAllele)) %>%
1549417641291:distinct() %>%
1549417641292:gather(AlleleType, AlleleNumber, -c(Sample, Locus, Correct, SeqPred, RunMode)) %>%
1549417641292:mutate(NumAllele = 1) %>%
1549417641293:select(-Correct, Allele = SeqPred, NumAllele, everything())
1549417645634:predDataset <- expandedData %>%
1549417645634:select(-c(Observed, SeqObs, NumAllele)) %>%
1549417645634:distinct() %>%
1549417645635:gather(AlleleType, AlleleNumber, -c(Sample, Locus, Correct, SeqPred, RunMode)) %>%
1549417645635:mutate(NumAllele = 1) %>%
1549417645635:select(-Correct, Allele = SeqPred, NumAllele, everything())
1549417648560:predDataset
1549417652692:View(predDataset)
1549417681702:predDataset <- expandedData %>%
1549417681702:select(-c(Observed, SeqObs, NumAllele)) %>%
1549417681702:distinct() %>%
1549417681703:gather(AlleleType, AlleleNumber, -c(Sample, Locus, Correct, SeqPred, RunMode)) %>%
1549417681703:mutate(NumAllele = 1) %>%
1549417681703:select(Allele = SeqPred, NumAllele, -Correct, everything())
1549417683160:View(predDataset)
1549417705332:predDataset <- expandedData %>%
1549417705332:select(-c(Observed, SeqObs, NumAllele)) %>%
1549417705333:distinct() %>%
1549417705333:gather(AlleleType, AlleleNumber, -c(Sample, Locus, Correct, SeqPred, RunMode)) %>%
1549417705334:mutate(NumAllele = 1) %>%
1549417705335:select(Allele = SeqPred, NumAllele, everything()) %>%
1549417705335:select(-Correct)
1549417707259:View(predDataset)
1549417729681:predDataset <- expandedData %>%
1549417729681:select(-c(Observed, SeqObs, NumAllele, Correct)) %>%
1549417729681:distinct() %>%
1549417729682:gather(AlleleType, AlleleNumber, -c(Sample, Locus, Correct, SeqPred, RunMode)) %>%
1549417729682:mutate(NumAllele = 1) %>%
1549417729682:select(Allele = SeqPred, NumAllele, everything())
1549417738183:predDataset <- expandedData %>%
1549417738184:select(-c(Observed, SeqObs, NumAllele, Correct)) %>%
1549417738184:distinct() %>%
1549417738184:gather(AlleleType, AlleleNumber, -c(Sample, Locus, SeqPred, RunMode)) %>%
1549417738185:mutate(NumAllele = 1) %>%
1549417738185:select(Allele = SeqPred, NumAllele, everything())
1549417740892:predDataset
1549417783228:predDataset <- expandedData %>%
1549417783229:select(-c(Observed, SeqObs, NumAllele, Correct)) %>%
1549417783229:distinct() %>%
1549417783229:gather(AlleleType, AlleleNumber, -c(Sample, Locus, SeqPred, RunMode)) %>%
1549417783230:mutate(NumAllele = 1) %>%
1549417783230:select(Sample, Locus, Allele = SeqPred, NumAllele, everything())
1549417874100:obsDataset <- expandedData %>%
1549417874101:select(-c(Predicted, SeqPred, Correct)) %>%
1549417874101:distinct() %>%
1549417874102:gather(AlleleType, AlleleNumber, -c(Sample, Locus, NumAllele, SeqPred, RunMode)) %>%
1549417874102:select(Sample, Locus, Allele = SeqPred, NumAllele, everything())
1549417880783:expandedData
1549417920016:obsDataset <- expandedData %>%
1549417920016:select(-c(Predicted, SeqPred, Correct)) %>%
1549417920017:distinct() %>%
1549417920017:gather(AlleleType, AlleleNumber, -c(Sample, Locus, NumAllele, SeqObs, RunMode)) %>%
1549417920018:select(Sample, Locus, Allele = SeqObs, NumAllele, everything())
1549417922701:obsDataset
1549417930711:View(obsDataset)
1549417981053:(expandedData <- rbind(obsDataset, predDataset))
1549417990620:View(expandedData)
1549418015435:a
1549418052139:failedData %>%
1549418052140:filter(!str_detect(Observed, ";"))
1549418074541:View(failedData)
1549418151908:expandedData
1549418159304:expandedData <- tibble()
1549418159306:for (i in 1:nrow(rowsWithTwoPlusObsAlleles)) {
1549418159306:origRow <- rowsWithTwoPlusObsAlleles %>% slice(i)
1549418159307:(obsAlleles    <- unlist(str_split(rowsWithTwoPlusObsAlleles %>% slice(i) %>% select(Observed) %>% pull(), ";")))
1549418159308:(obsSeqAlleles <- unlist(str_split(rowsWithTwoPlusObsAlleles %>% slice(i) %>% select(SeqObs) %>% pull(), " ")))
1549418159308:tmpExpanded   <- data_frame()
1549418159309:alleleNumbers <- c()
1549418159310:for (j in 1:length(obsAlleles)) {
1549418159310:tmpExpanded   <- rbind(tmpExpanded, origRow)
1549418159311:alleleNumbers <- c(alleleNumbers, j)
1549418159312:}
1549418159312:tmpExpanded$Observed  <- obsAlleles
1549418159313:tmpExpanded$SeqObs    <- obsSeqAlleles
1549418159314:tmpExpanded$NumAllele <- alleleNumbers
1549418159314:expandedData          <- rbind(expandedData, tmpExpanded)
1549418159315:}
1549418167985:expandedData
1549418230319:expandedData %>%
1549418230319:select(-c(SeqObs, SeqPred))
1549418239205:expandedData %>%
1549418239206:select(-c(SeqObs, SeqPred, Correct))
1549418284888:failedData
1549418298728:failedData %>%
1549418298729:filter(!str_detect(Observed, ";"))
1549418367333:failedData %>%
1549418367333:filter(!str_detect(Observed, ";")) %>%
1549418367334:select(-c(Observed, SeqObs, NumAllele, Correct)) %>%
1549418367334:distinct()
1549418387217:failedData %>%
1549418387218:filter(!str_detect(Observed, ";")) %>%
1549418387219:select(-c(Observed, SeqObs, Correct)) %>%
1549418387219:distinct()
1549418391001:failedData %>%
1549418391002:filter(!str_detect(Observed, ";")) %>%
1549418391002:select(-c(Observed, SeqObs, Correct))
1549418417476:predDataset <- failedData %>%
1549418417476:filter(!str_detect(Observed, ";")) %>%
1549418417477:select(-c(Observed, SeqObs, Correct)) %>%
1549418417477:gather(AlleleType, AlleleNumber, -c(Sample, Locus, SeqPred, RunMode)) %>%
1549418417478:mutate(NumAllele = 1) %>%
1549418417478:select(Sample, Locus, Allele = SeqPred, NumAllele, everything())
1549418420455:predDataset
1549418435730:View(predDataset)
1549418493568:obsDataset <- failedData %>%
1549418493568:filter(!str_detect(Observed, ";")) %>%
1549418493569:select(-c(Predicted, SeqPred, Correct)) %>%
1549418493569:gather(AlleleType, AlleleNumber, -c(Sample, Locus, SeqObs, RunMode)) %>%
1549418493570:mutate(NumAllele = 1) %>%
1549418493571:select(Sample, Locus, Allele = SeqObs, NumAllele, everything())
1549418497307:View(obsDataset)
1549418612677:(failedDataFmtd  <- rbind(obsDataset, predDataset, expandedData))
1549418618438:obsDataset
1549418623452:predDataset
1549418626727:expandedData
1549418645804:(expandedData <- rbind(obsDataset, predDataset))
1549418652499:(failedDataFmtd  <- rbind(obsDataset, predDataset, expandedData))
1549418655865:failedDataFmtd
1549418658590:View(failedDataFmtd)
1549418791904:expandedData <- tibble()
1549418792170:for (i in 1:nrow(rowsWithTwoPlusObsAlleles)) {
1549418792171:origRow <- rowsWithTwoPlusObsAlleles %>% slice(i)
1549418792172:(obsAlleles    <- unlist(str_split(rowsWithTwoPlusObsAlleles %>% slice(i) %>% select(Observed) %>% pull(), ";")))
1549418792173:(obsSeqAlleles <- unlist(str_split(rowsWithTwoPlusObsAlleles %>% slice(i) %>% select(SeqObs) %>% pull(), " ")))
1549418792173:tmpExpanded   <- data_frame()
1549418792174:alleleNumbers <- c()
1549418792174:for (j in 1:length(obsAlleles)) {
1549418792175:tmpExpanded   <- rbind(tmpExpanded, origRow)
1549418792176:alleleNumbers <- c(alleleNumbers, j)
1549418792176:}
1549418792177:tmpExpanded$Observed  <- obsAlleles
1549418792177:tmpExpanded$SeqObs    <- obsSeqAlleles
1549418792178:tmpExpanded$NumAllele <- alleleNumbers
1549418792179:expandedData          <- rbind(expandedData, tmpExpanded)
1549418792179:}
1549418793988:predDataset <- expandedData %>%
1549418793988:select(-c(Observed, SeqObs, NumAllele, Correct)) %>%
1549418793988:distinct() %>%
1549418793989:gather(AlleleType, AlleleNumber, -c(Sample, Locus, SeqPred, RunMode)) %>%
1549418793989:mutate(NumAllele = 1) %>%
1549418793989:select(Sample, Locus, Allele = SeqPred, NumAllele, everything())
1549418794421:obsDataset <- expandedData %>%
1549418794421:select(-c(Predicted, SeqPred, Correct)) %>%
1549418794422:distinct() %>%
1549418794422:gather(AlleleType, AlleleNumber, -c(Sample, Locus, NumAllele, SeqObs, RunMode)) %>%
1549418794422:select(Sample, Locus, Allele = SeqObs, NumAllele, everything())
1549418795155:(expandedData <- rbind(obsDataset, predDataset))
1549418799156:expandedData
1549418806638:predDataset <- failedData %>%
1549418806638:filter(!str_detect(Observed, ";")) %>%
1549418806639:select(-c(Observed, SeqObs, Correct)) %>%
1549418806640:gather(AlleleType, AlleleNumber, -c(Sample, Locus, SeqPred, RunMode)) %>%
1549418806640:mutate(NumAllele = 1) %>%
1549418806640:select(Sample, Locus, Allele = SeqPred, NumAllele, everything())
1549418807556:obsDataset <- failedData %>%
1549418807557:filter(!str_detect(Observed, ";")) %>%
1549418807557:select(-c(Predicted, SeqPred, Correct)) %>%
1549418807558:gather(AlleleType, AlleleNumber, -c(Sample, Locus, SeqObs, RunMode)) %>%
1549418807558:mutate(NumAllele = 1) %>%
1549418807558:select(Sample, Locus, Allele = SeqObs, NumAllele, everything())
1549418812687:(failedDataFmtd  <- rbind(obsDataset, predDataset, expandedData))
1549418814859:View(failedDataFmtd)
1549418908052:failedDataFmtd
1549418919563:expandedData <- tibble()
1549418920952:for (i in 1:nrow(rowsWithTwoPlusObsAlleles)) {
1549418920953:origRow <- rowsWithTwoPlusObsAlleles %>% slice(i)
1549418920954:(obsAlleles    <- unlist(str_split(rowsWithTwoPlusObsAlleles %>% slice(i) %>% select(Observed) %>% pull(), ";")))
1549418920955:(obsSeqAlleles <- unlist(str_split(rowsWithTwoPlusObsAlleles %>% slice(i) %>% select(SeqObs) %>% pull(), " ")))
1549418920956:tmpExpanded   <- data_frame()
1549418920957:alleleNumbers <- c()
1549418920958:for (j in 1:length(obsAlleles)) {
1549418920958:tmpExpanded   <- rbind(tmpExpanded, origRow)
1549418920959:alleleNumbers <- c(alleleNumbers, j)
1549418920960:}
1549418920961:tmpExpanded$Observed  <- obsAlleles
1549418920962:tmpExpanded$SeqObs    <- obsSeqAlleles
1549418920963:tmpExpanded$NumAllele <- alleleNumbers
1549418920964:expandedData          <- rbind(expandedData, tmpExpanded)
1549418920964:}
1549418925850:(failedDataFmtd <- failedData %>%
1549418925850:filter(!str_detect(Observed, ";")) %>%
1549418925851:mutate(NumAllele = 1) %>%
1549418925851:rbind(expandedData) %>%
1549418925852:arrange(Sample, Locus) %>%
1549418925853:select(-c(Correct)) %>%
1549418925853:gather(AlleleType, AlleleNumber, -c(Sample, Locus, SeqObs, SeqPred, RunMode, NumAllele)) %>%
1549418925854:gather(SeqType, Allele, -c(Sample, Locus, AlleleType, AlleleNumber, RunMode, NumAllele)) %>%
1549418925854:select(-SeqType)
1549418925855:)
1549418939263:(failedDataFmtd <- failedData %>%
1549418939263:filter(!str_detect(Observed, ";")) %>%
1549418939264:mutate(NumAllele = 1) %>%
1549418939264:rbind(expandedData) %>%
1549418939264:arrange(Sample, Locus) %>%
1549418939265:select(-c(Correct)) %>%
1549418939265:gather(AlleleType, AlleleNumber, -c(Sample, Locus, SeqObs, SeqPred, RunMode, NumAllele)) %>%
1549418939265:gather(SeqType, Allele, -c(Sample, Locus, AlleleType, AlleleNumber, RunMode, NumAllele)) %>%
1549418939266:select(-SeqType) %>%
1549418939266:distinct()
1549418939266:)
1549418952139:expandedData <- tibble()
1549418953532:for (i in 1:nrow(rowsWithTwoPlusObsAlleles)) {
1549418953533:origRow <- rowsWithTwoPlusObsAlleles %>% slice(i)
1549418953533:(obsAlleles    <- unlist(str_split(rowsWithTwoPlusObsAlleles %>% slice(i) %>% select(Observed) %>% pull(), ";")))
1549418953534:(obsSeqAlleles <- unlist(str_split(rowsWithTwoPlusObsAlleles %>% slice(i) %>% select(SeqObs) %>% pull(), " ")))
1549418953535:tmpExpanded   <- data_frame()
1549418953536:alleleNumbers <- c()
1549418953536:for (j in 1:length(obsAlleles)) {
1549418953537:tmpExpanded   <- rbind(tmpExpanded, origRow)
1549418953537:alleleNumbers <- c(alleleNumbers, j)
1549418953538:}
1549418953538:tmpExpanded$Observed  <- obsAlleles
1549418953539:tmpExpanded$SeqObs    <- obsSeqAlleles
1549418953540:tmpExpanded$NumAllele <- alleleNumbers
1549418953540:expandedData          <- rbind(expandedData, tmpExpanded)
1549418953541:}
1549418957511:predDataset <- expandedData %>%
1549418957512:select(-c(Observed, SeqObs, NumAllele, Correct)) %>%
1549418957512:distinct() %>%
1549418957513:gather(AlleleType, AlleleNumber, -c(Sample, Locus, SeqPred, RunMode)) %>%
1549418957513:mutate(NumAllele = 1) %>%
1549418957513:select(Sample, Locus, Allele = SeqPred, NumAllele, everything())
1549418957528:obsDataset <- expandedData %>%
1549418957528:select(-c(Predicted, SeqPred, Correct)) %>%
1549418957529:distinct() %>%
1549418957529:gather(AlleleType, AlleleNumber, -c(Sample, Locus, NumAllele, SeqObs, RunMode)) %>%
1549418957529:select(Sample, Locus, Allele = SeqObs, NumAllele, everything())
1549418957537:(expandedData <- rbind(obsDataset, predDataset))
1549418957592:predDataset <- failedData %>%
1549418957592:filter(!str_detect(Observed, ";")) %>%
1549418957593:select(-c(Observed, SeqObs, Correct)) %>%
1549418957593:gather(AlleleType, AlleleNumber, -c(Sample, Locus, SeqPred, RunMode)) %>%
1549418957593:mutate(NumAllele = 1) %>%
1549418957594:select(Sample, Locus, Allele = SeqPred, NumAllele, everything())
1549418957607:obsDataset <- failedData %>%
1549418957607:filter(!str_detect(Observed, ";")) %>%
1549418957608:select(-c(Predicted, SeqPred, Correct)) %>%
1549418957608:gather(AlleleType, AlleleNumber, -c(Sample, Locus, SeqObs, RunMode)) %>%
1549418957608:mutate(NumAllele = 1) %>%
1549418957609:select(Sample, Locus, Allele = SeqObs, NumAllele, everything())
1549418957618:(failedDataFmtd  <- rbind(obsDataset, predDataset, expandedData))
1549418970344:# Transform results data: split sample column into Sample and Locus
1549418970345:resultsData$Locus  <- unlist(lapply(str_split(resultsData$Sample, "_", n=3), function(x) {x[2]}))
1549418970909:resultsData$Sample <- unlist(lapply(str_split(resultsData$Sample, "_", n=3), function(x) {x[1]}))
1549418971794:(resultsData %<>% select(Sample, Locus, everything()))
1549418994759:failedDataFmtd %>%
1549418994759:select(sample = Sample,
1549418994760:locus = Locus,
1549418994760:allele = Allele,
1549418994761:allele_type = AlleleType,
1549418994761:allele_number = AlleleNumber,
1549418994762:num_allele = NumAllele,
1549418994762:run_mode = RunMode)
1549419012399:resultsData %>%
1549419012400:select(sample = Sample,
1549419012400:locus = Locus,
1549419012400:allele = Gene,
1549419012401:kmer_counts = `k-mer_counts`,
1549419012401:coverage = `Gene_cov(%)`,
1549419012401:length = Gene_length,
1549419012401:mean_kmer_depth = `Mean_k-mer_depth`)
1549419018294:(outTable <- depthData %>%
1549419018295:left_join(failedDataFmtd %>%
1549419018295:select(sample = Sample,
1549419018296:locus = Locus,
1549419018296:allele = Allele,
1549419018297:allele_type = AlleleType,
1549419018297:allele_number = AlleleNumber,
1549419018298:num_allele = NumAllele,
1549419018298:run_mode = RunMode)) %>%
1549419018298:left_join(resultsData %>%
1549419018299:select(sample = Sample,
1549419018299:locus = Locus,
1549419018300:allele = Gene,
1549419018300:kmer_counts = `k-mer_counts`,
1549419018300:coverage = `Gene_cov(%)`,
1549419018301:length = Gene_length,
1549419018301:mean_kmer_depth = `Mean_k-mer_depth`)) %>%
1549419018301:arrange(sample, allele, allele_type, position) %>%
1549419018302:mutate(norm_count = kmer_counts/length) %>%
1549419018302:select(sample, locus, allele, position, kmer_depth, norm_count,
1549419018303:coverage, mean_kmer_depth, allele_type, num_allele, everything())
1549419018303:)
1549419034074:# Remove all variables from memory
1549419034075:rm(list=ls())
1549419859448:#!/usr/bin/env Rscript
1549419859449:# ##############################################################################
1549419859450:#  Author:   Hector Fabio Espitia-Navarro
1549419859450:#            Georgia Institute of Technology
1549419859451:#  Version:  1.0
1549419859451:#  Date:     01/19/2019
1549419859451:# ##############################################################################
1549419859452:# Install required packages -----------------------------------------------
1549419859453:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549419859454:if(!file.exists(personal.lib.path))
1549419859454:dir.create(personal.lib.path)
1549419859455:printMessage <- function(message, verbose){
1549419859455:if(verbose)
1549419859456:cat(message)
1549419859456:}
1549419859457:# crayon::bold("Hola")
1549419859458:installAndLoadPackages <- function(pkg, verbose){
1549419859458:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1549419859459:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1549419859459:printMessage("Done!\n", verbose)
1549419859460:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549419859460:if (length(new.pkg)) {
1549419859461:printMessage("Installing new packages... ", verbose)
1549419859461:install.packages(new.pkg, dependencies = TRUE,
1549419859461:repos="http://cran.rstudio.com/",
1549419859462:lib = personal.lib.path)
1549419859462:printMessage("Done!\n", verbose)
1549419859463:}
1549419859463:printMessage("Loading required packages... ", verbose)
1549419859464:sapply(pkg, function(x){
1549419859464:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549419859465:})
1549419859465:printMessage("Done!\n", verbose)
1549419859466:}
1549419859467:# github.related.packages <- c("devtools", "Rcpp")
1549419859467:# packages <- c("argparser", "tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite")
1549419859467:packages <- c("tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite", "gridExtra")
1549419859468:# installAndLoadPackages(packages, verbose = TRUE)
1549419859468:installAndLoadPackages("argparser", verbose = FALSE)
1549419859490:# Command line arguments processing ---------------------------------------
1549419859490:# Get script name
1549419859490:initial.options <- commandArgs(trailingOnly = FALSE)
1549419859491:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1549419859492:# Process command line arguments
1549419859492:# Create a parser
1549419859492:p <- arg_parser("This script generates k-mer depth plots using a depth file generated by the\033[1mSTing typer\033[22m tool (-t option).",
1549419859492:name = script.name)
1549419859494:# Add Positional arguments (required)
1549419859494:p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
1549419859495:# Add options
1549419859496:p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1549419859497:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1549419859497:default = "kmer_depth")
1549419859498:p <- add_argument(p, "--sample_name", help = "Sample name.",
1549419859498:default = "input file's name")
1549419859499:p <- add_argument(p, "--max_loci_per_page", help = "Maximum number of loci to print on each page.",
1549419859499:default = 7)
1549419859500:p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'",
1549419859500:default = "pdf")
1549419859501:# Initialization of variables ---------------------------------------------
1549419859502:# Values to test the script using RStudio
1549419859502:script.home       <- "/home/hspitia/Dropbox/gatech/projects/STing/manuscript/data/typer/v0.24/detector_on_failed"
1549419859502:# inputFile         <- paste(script.home, "ERR036060.depth.2.tsv", sep = "/")
1549419859503:# geneFile          <- paste(script.home, "rmlst_failed_loci.txt", sep = "/")
1549419859503:inputFile         <- paste(script.home, "detector.v024.nm20.cgmlst.failed_alleles.depth.for_plotting.tsv.gz", sep = "/")
1549419859503:geneFile          <- paste(script.home, "loci.txt", sep = "/")
1549419859504:out.prefix        <- "kmer_depth"
1549419859504:sample.name       <- basename(inputFile)
1549419859505:max.loci.per.page <- 4
1549419859505:out.format        <- "pdf"
1549419859506:# Parse command line arguments
1549419859506:command.line = F  # Turn to FALSE to test the script inside RStudio
1549419859506:argv <- list()
1549419859507:if(command.line) {
1549419859507:argv <- parse_args(p)
1549419859507:} else {
1549419859508:argv <- parse_args(p, list(inputFile,
1549419859508:"--gene_file", geneFile,
1549419859508:"--prefix", out.prefix,
1549419859508:"--sample_name", sample.name,
1549419859509:"--max_loci_per_page", max.loci.per.page,
1549419859509:"--format", out.format))
1549419859509:}
1549419859511:# Get argument values from the command line
1549419859511:input.file        <- argv$input_file
1549419859512:gene.file         <- argv$gene_file
1549419859512:out.format        <- argv$format
1549419859513:out.prefix        <- argv$prefix
1549419859513:max.loci.per.page <- argv$max_loci_per_page
1549419859514:sample.name       <- argv$sample_name
1549419859514:# if (sample.name == "")
1549419859514:if (sample.name == "input file's name")
1549419859515:sample.name <- basename(input.file)
1549419859515:# Function to check if file exists ----------------------------------------
1549419859516:CheckFileExists <- function(file.list) {
1549419859516:non.exist.files <- !file.exists(file.list)
1549419859516:if(any(non.exist.files)) {
1549419859517:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549419859517:}
1549419859517:}
1549419859518:# Check for input files ---------------------------------------------------
1549419859518:files.to.check <- c(input.file)
1549419859518:error.message  <- CheckFileExists(files.to.check)
1549419859519:if(!is.null(error.message)){
1549419859519:stop(error.message)
1549419859520:} else {
1549419859520:# Code core - Begin -------------------------------------------------------
1549419859520:installAndLoadPackages(packages, verbose = TRUE)
1549419859520:# FUNCTIONS:
1549419859521:# Function to dark a list of colors ---------------------------------------
1549419859521:darkColors <- function(palette, level){
1549419859521:rgbColors <- as.data.frame(t(as.data.frame(lapply(as.data.frame(t(col2rgb(palette))),
1549419859522:function(x) { round(x * level)}))))
1549419859522:unname(sapply(rgbColors, function(x){ rgb(x[1], x[2], x[3], maxColorValue=255) }))
1549419859522:}
1549419859523:# Function for plotting k-mer depth ----------------------------------------
1549419859523:plotDepth <- function(dataToPlot, labelsData, fillColors, borderColors) {
1549419859523:max.x       <- max(dataToPlot$Position)
1549419859524:max.y       <- max(dataToPlot$kmerDepth)
1549419859524:x.limits    <- seq(0, max.x, 100)
1549419859524:y.limits    <- seq(0, max.y, 20)
1549419859525:nTopAlleles <- length(unique(dataToPlot$N))
1549419859525:d.plot <- ggplot(data = dataToPlot, aes(x = Position, y = kmerDepth),
1549419859526:size = 0.2) +
1549419859526:geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1549419859527:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1549419859527:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1549419859528:# scale_color_manual(values = getPalette) +
1549419859528:scale_color_manual(values = borderColors) +
1549419859529:scale_fill_manual(values = fillColors) +
1549419859529:geom_text(data = labelsData,
1549419859529:# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1549419859530:# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1549419859530:aes(x = Length, y = info.y * 0.5, group = Locus,
1549419859531:hjust = 0,
1549419859532:label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1549419859532:show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1549419859533:nudge_x = -(max.x*0.025)
1549419859534:) +
1549419859534:geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1549419859535:alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1549419859536:# geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1549419859536:size = annotTextSize * 1.05, color = "#333333") +
1549419859537:geom_text(data = labelsData,
1549419859538:parse = TRUE,
1549419859538:aes(x = info.x, y = info.y,
1549419859539:label = paste0("{{{{italic(s)==", format(round(Score, 2), nsmall = 2),
1549419859540:"*~~~italic(hat(f)[k])} ==", format(round(NormKmerCount, 2), nsmall = 2),
1549419859540:"*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1549419859541:"*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1549419859541:"~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1549419859542:hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1549419859542:facet_grid(Locus ~ N, scales = "free_y") +
1549419859543:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1549419859544:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1549419859544:theme_bw() +
1549419859545:plotTheme +
1549419859546:labs(title    = expression(italic("k")*"-mer Depth Distribution"),
1549419859546:subtitle = paste("Top", nTopAlleles, "alleles/genes on sample", sample.name),
1549419859547:x        = "Position along sequence (bp)",
1549419859548:y        = expression(paste(italic(k), "-mer depth")),
1549419859548:# caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1549419859551:caption  = expression(paste(italic("s"),": score;  ",
1549419859552:italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1549419859554:italic("c"),": coverage;  ",
1549419859555:italic(sigma), ": standard deviation;  ",
1549419859556:italic(bar(d)), ": average depth"), sep = "")
1549419859557:)
1549419859558:d.plot
1549419859558:}
1549419859560:# Function to get data for annotations ------------------------------------
1549419859560:getLabelsData <- function(data.to.plot) {
1549419859561:max.x <- max(data.to.plot$Position)
1549419859562:max.y <- max(data.to.plot$kmerDepth)
1549419859563:nLoci    <- length(unique(data.to.plot$Locus))
1549419859564:nAlleles <- length(unique(data.to.plot$N))
1549419859565:alleles     <- unique(data.to.plot$Allele)
1549419859566:loci        <- as.character(unique(data.to.plot$Locus))
1549419859567:lociLabels  <- c()
1549419859568:name.x      <- c()
1549419859569:name.y      <- c()
1549419859570:info.x      <- c()
1549419859570:info.y      <- c()
1549419859571:covs        <- c()
1549419859573:avgDepths   <- c()
1549419859574:meanDepth.x <- c()
1549419859576:meanDepth.y <- c()
1549419859577:for (i in loci) {
1549419859578:lociLabels <- c(lociLabels, rep(i, nAlleles))
1549419859579:}
1549419859580:for (allele in alleles) {
1549419859582:locus     <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1549419859583:maxPos    <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549419859584:maxDepth  <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549419859585:name.x    <- c(name.x, (max.x / 2))
1549419859585:name.y    <- c(name.y, (maxDepth * 0.25))
1549419859586:info.x    <- c(info.x, max.x * 0.02)
1549419859587:info.y    <- c(info.y, maxDepth * 1.5)
1549419859588:covs      <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549419859589:avgDepths <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549419859590:}
1549419859590:labelsData <- data.frame(Allele = alleles,
1549419859591:name.x = name.x,
1549419859592:name.y = name.y,
1549419859593:info.x = info.x,
1549419859594:info.y = info.y,
1549419859595:meanDepth = avgDepths,
1549419859596:N = rep(unique(data.to.plot$N), nLoci),
1549419859597:Locus = lociLabels,
1549419859598:cov = covs
1549419859599:) %>%
1549419859600:left_join(data.to.plot %>%
1549419859601:group_by(Allele, Length, NormKmerCount, Score) %>%
1549419859602:summarise(sd = sd(kmerDepth)),
1549419859603:by = c("Allele" = "Allele"))
1549419859605:labelsData
1549419859606:}
1549419859608:# Check for genes/loci file to filter loci to plot  -----------------------
1549419859609:loci.to.plot <- c()
1549419859610:# if (!is.null(gene.file)|| gene.file != "") {
1549419859611:if (!is.null(gene.file) && !is.na(gene.file) && gene.file != "") {
1549419859612:error.message <- CheckFileExists(gene.file)
1549419859613:if (!is.null(error.message)){
1549419859615:cat("Warning:")
1549419859616:cat(error.message)
1549419859617:cat("  The plotting process will continue without filtering genes/loci.\n")
1549419859618:} else {
1549419859619:loci.to.plot <- scan(gene.file, character(), quiet = TRUE)
1549419859620:}
1549419859621:}
1549419859623:# Data processing and plotting --------------------------------------------
1549419859624:cat("Plotting depths... ")
1549419859625:options(stringsAsFactors = T, readr.num_columns = 0)
1549419859626:# Load data
1549419859628:inData <- read_tsv(input.file)
1549419859630:colnames(inData) <- c("Sample", "Locus", "Allele", "Position", "kmerDepth",
1549419859631:"NormKmerCount", "Coverage", "AverageKmerDepth",
1549419859633:"AlleleType", "NumAllele", "WeightedKmerDepth", "AlleleNumber",
1549419859634:"RunMode", "kmerCounts", "Length")
1549419859635:# Transform data
1549419859637:data.to.plot <- inData %>%
1549419859638:mutate(
1549419859639:Sample = factor(Sample, levels = unique(inData$Sample)),
1549419859640:Locus = factor(Locus, levels = unique(inData$Locus)),
1549419859641:AlleleType = factor(AlleleType, levels = unique(inData$AlleleType)),
1549419859643:NumAllele = factor(NumAllele, levels = unique(inData$NumAllele)),
1549419859644:RunMode = factor(RunMode, levels = unique(inData$RunMode)),
1549419859645:Allele = factor(Allele, levels = unique(inData$Allele))
1549419859646:)
1549419859649:tmp <- inData %>%
1549419859650:group_by(Sample, Locus, Allele, AlleleType, NumAllele) %>%
1549419859651:summarise(Length = n())
1549419859652:# # Filtering loci/genes from genes_file input param
1549419859654:# if (length(loci.to.plot) > 0) {
1549419859655:#   data.to.plot <- data.to.plot %>%
1549419859656:#     filter(Locus %in% loci.to.plot)
1549419859657:# }
1549419859659:longestLocusNameLength <- max(str_length(as.character(unique(inData$Locus))))
1549419859660:nSamples <- length(unique(data.to.plot$Sample))
1549419859661:# nLoci    <- length(unique(data.to.plot$Locus))
1549419859662:# nAlleles <- length(unique(data.to.plot$Alleles))
1549419859665:# Theme-related variable definition ---------------------------------------
1549419859666:annotLinetype     <- "solid"
1549419859667:annotTextSize     <- 4
1549419859668:axisColor         <- "#000000"
1549419859670:axisTextSize      <- 12
1549419859671:barAnnotTextSize  <- 4
1549419859672:baseTextSize      <- 14
1549419859674:gridColor         <- "#e0e0e0"
1549419859675:lineSize          <- 0.3
1549419859676:# panelColor        <- "#ffffff"
1549419859677:# panelColor        <- "#fff4e0"
1549419859679:panelColor        <- "#f2efe6"
1549419859680:# stripBackground   <- "#cccccc"
1549419859681:stripTextSize     <- axisTextSize
1549419859682:if (longestLocusNameLength > 12)
1549419859684:stripTextSize  <- stripTextSize * 0.6
1549419859686:textColor  <- "#000000"
1549419859688:# baseFontFamily        <- "Arial"
1549419859691:# Custom theme definition for plots ---------------------------------------
1549419859693:plotTheme <- list(
1549419859694:theme(
1549419859696:axis.text.x      = element_text(angle = 50, size = axisTextSize,
1549419859698:vjust = 1, hjust = 1, color = textColor),
1549419859700:axis.text.y      = element_text(size = axisTextSize, color = textColor),
1549419859702:axis.ticks       = element_line(size = lineSize),
1549419859703:axis.title.x     = element_text(margin = margin(6,0,8,0, "mm")),
1549419859705:axis.title.y     = element_text(margin = margin(0,6,0,0, "mm")),
1549419859707:legend.position  = "none",
1549419859709:panel.border     = element_rect(size = lineSize),
1549419859711:panel.background = element_rect(fill = panelColor),
1549419859713:panel.grid       = element_line(size = lineSize, colour = gridColor),
1549419859715:panel.grid.minor = element_blank(),
1549419859717:plot.margin      = margin(10,10,0,10, "mm"),
1549419859719:panel.spacing    = unit(4, "mm"),
1549419859721:plot.caption     = element_text(size = baseTextSize * 0.7, face = "italic"),
1549419859723:plot.title       = element_text(hjust = 0.5),
1549419859725:plot.subtitle    = element_text(hjust = 0.5),
1549419859727:strip.background = element_rect(size = lineSize),
1549419859729:strip.text       = element_text(size = stripTextSize),
1549419859731:text             = element_text(size = baseTextSize)
1549419859734:)
1549419859736:)
1549419859740:samples <- levels(data.to.plot$Sample)
1549419859744:for (sam in samples[1]) {
1549419859746:print(sam)
1549419859748:subset   <- data.to.plot %>% filter(Sample == sam)
1549419859750:loci     <- levels(subset$Locus)
1549419859752:alleles  <- levels(subset$Allele)
1549419859754:print(str_glue("sample {sam}: nLoci = {length(loci)}  nAlleles = {length(alleles)}"))
1549419859760:subsetToPlot <- subset %>% filter(Locus %in% loci[1:5])
1549419859764:max.x    <- max(subsetToPlot$Position)
1549419859766:max.y    <- max(subsetToPlot$kmerDepth)
1549419859769:x.limits <- seq(0, max.x, 100)
1549419859771:y.limits <- seq(0, max.y, 20)
1549419859775:# Plot
1549419859777:d.plot <- ggplot(data = subsetToPlot, aes(x = Position, y = kmerDepth), size = 0.2) +
1549419859779:# geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1549419859781:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1549419859784:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1549419859786:# scale_color_manual(values = borderColors) +
1549419859788:# scale_fill_manual(values = fillColors) +
1549419859790:# geom_text(data = labelsData,
1549419859792:# 					# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1549419859795:# 					# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1549419859797:# 					aes(x = Length, y = info.y * 0.5, group = Locus,
1549419859799:# 							hjust = 0,
1549419859801:# 							label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1549419859803:# 					show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1549419859806:# 					nudge_x = -(max.x*0.025)
1549419859808:# ) +
1549419859810:# geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1549419859812:# 					 alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1549419859814:# 					 # geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1549419859817:# 					 size = annotTextSize * 1.05, color = "#333333") +
1549419859819:# geom_text(data = labelsData,
1549419859821:# 					parse = TRUE,
1549419859823:# 					aes(x = info.x, y = info.y,
1549419859826:# 							label = paste0("{{{{italic(s)==", format(round(Score, 2), nsmall = 2),
1549419859828:# 														 "*~~~italic(hat(f)[k])} ==", format(round(NormKmerCount, 2), nsmall = 2),
1549419859830:# 														 "*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1549419859833:# 														 "*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1549419859835:# 														 "~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1549419859837:# 					hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1549419859840:facet_grid(rows = vars(Locus), cols = vars(AlleleType), scales = "free") +
1549419859842:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1549419859844:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1549419859846:theme_bw() #+
1549419859849:# plotTheme +
1549419859851:# labs(title    = expression(italic("k")*"-mer Depth Distribution"),
1549419859853:# 		 subtitle = paste("Top", nTopAlleles, "alleles/genes on sample", sample.name),
1549419859856:# 		 x        = "Position along sequence (bp)",
1549419859858:# 		 y        = expression(paste(italic(k), "-mer depth")),
1549419859860:# 		 # caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1549419859866:# 		 caption  = expression(paste(italic("s"),": score;  ",
1549419859871:# 		 														italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1549419859875:# 		 														italic("c"),": coverage;  ",
1549419859880:# 		 														italic(sigma), ": standard deviation;  ",
1549419859884:# 		 														italic(bar(d)), ": average depth"), sep = "")
1549419859886:# )
1549419859888:d.plot
1549419859891:}
1549419859895:# Palette definition ------------------------------------------------------
1549419859897:# colourCount <- length(unique(inData$Locus))
1549419859899:rowsPerPage <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549419859902:# colourCount <- nLoci
1549419859904:colourCount <- rowsPerPage
1549419859906:# colourCount  <- length(unique(data.to.plot$Allele))
1549419859908:# fillPalette  <- colorRampPalette(brewer.pal(8, "Dark2"))(colourCount)
1549419859911:# fillPalette  <- colorRampPalette(brewer.pal(12, "Paired"))(colourCount)
1549419859913:# fillPalette  <- colorRampPalette(brewer.pal(9, "Set1"))(colourCount)
1549419859915:# fillPalette  <- colorRampPalette(pal_npg("nrc")(10))(colourCount)
1549419859918:# fillPalette  <- colorRampPalette(pal_d3("category20")(20))(colourCount)
1549419859920:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549419859922:borderPalette <- darkColors(fillPalette, 0.6)
1549419859925:# library("scales"); show_col(fillPalette); show_col(borderPalette)
1549419859932:#
1549419859934:# # Depth plot -------------------------------------------------------------
1549419859937:# # lociPerPage    <- 3
1549419859939:# wFactor        <- 4.8
1549419859941:# plotTitlesSize <- 2.39
1549419859944:#
1549419859946:# getPlotHeight <- function(rows, extras){
1549419859948:# 	hFactor <- ifelse(rows == 1, 1.88, 1.6)
1549419859950:# 	# loci + titles and foot note + strip + space between locus
1549419859953:# 	(rows*hFactor) + extras + ((rows-1)*0.157) #in
1549419859955:# }
1549419859959:#
1549419859961:# # rowsPerPage <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549419859964:# height      <- getPlotHeight(rowsPerPage, plotTitlesSize)
1549419859967:# width       <- nAlleles * wFactor
1549419859969:# loci        <- unique(data.to.plot$Locus)
1549419859972:# sets        <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549419859974:#
1549419859976:# plots <- lapply(sets, function(set, dp=data.to.plot, rp=rowsPerPage){
1549419859979:# 	nLoci        <- length(set)
1549419859981:# 	subsetToPlot <- dp %>% filter(Locus %in% set)
1549419859984:# 	# subPalette   <-
1549419859986:# 	ld           <- getLabelsData(subsetToPlot)
1549419859988:# 	p            <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette)
1549419859991:# 	if(nLoci < rp){
1549419859993:# 		hlay    <- matrix(c(1, NA))
1549419859995:# 		total   <- getPlotHeight(rp, plotTitlesSize)
1549419859998:# 		cHeight <- getPlotHeight(nLoci, plotTitlesSize)
1549419860000:# 		blank   <- getPlotHeight(rp-nLoci, 0)
1549419860003:# 		heights <- matrix(c(cHeight/total, blank/total))
1549419860005:# 		p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549419860007:# 	}
1549419860010:# 	p
1549419860012:# })
1549419860015:#
1549419860017:# if (out.format == "pdf") {
1549419860021:# 	out.filename <- paste(out.prefix, out.format, sep = ".")
1549419860023:# 	ml <- marrangeGrob(plots, nrow=1, ncol=1, padding = unit(10, "mm"),
1549419860026:# 										 top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549419860028:# 	ggsave(filename = out.filename, plot = ml,
1549419860031:# 				 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549419860035:# }
1549419860038:# else {
1549419860040:# 	for (i in seq_along(plots)) {
1549419860042:# 		out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549419860045:# 		ggsave(filename = out.filename, plot = plots[[i]],
1549419860047:# 					 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549419860049:# 	}
1549419860052:# }
1549419860054:#
1549419860056:# # # Depth distribution plot ------------------------------------------------
1549419860059:# # hFactor  <- 3
1549419860061:# # wFactor  <- 2
1549419860064:# # if (nLoci == 1)
1549419860066:# #   hFactor <- 3.5
1549419860068:# # height       <- nLoci * hFactor
1549419860071:# # width        <- nAlleles * wFactor
1549419860073:# # # Generate plot
1549419860075:# # (dist.plot <- plotDepthDist(data.to.plot, labelsData, fillPalette, borderPalette))
1549419860078:# # # Save plot
1549419860080:# # out.filename <- paste0(out.prefix, "_dist.", out.format)
1549419860083:# # if (out.format == "png") {
1549419860085:# #   ggsave(filename = out.filename, plot = dist.plot,
1549419860087:# #          width  = width, height = height, type = "cairo-png", dpi = 300)
1549419860090:# # } else {
1549419860092:# #   ggsave(filename = out.filename, plot = dist.plot,
1549419860094:# #          width  = width, height = height, dpi = 400)
1549419860097:# # }
1549419860099:#
1549419860102:cat("Done! \n")
1549419860106:# Code core - End ---------------------------------------------------------
1549419860109:}
1549419894364:samples
1549419896893:for (sam in samples[1]) {
1549419896894:print(sam)
1549419896894:subset   <- data.to.plot %>% filter(Sample == sam)
1549419896895:loci     <- levels(subset$Locus)
1549419896895:alleles  <- levels(subset$Allele)
1549419896895:print(str_glue("sample {sam}: nLoci = {length(loci)}  nAlleles = {length(alleles)}"))
1549419896896:subsetToPlot <- subset %>% filter(Locus %in% loci[1:5])
1549419896897:max.x    <- max(subsetToPlot$Position)
1549419896897:max.y    <- max(subsetToPlot$kmerDepth)
1549419896898:x.limits <- seq(0, max.x, 100)
1549419896898:y.limits <- seq(0, max.y, 20)
1549419896899:# Plot
1549419896899:d.plot <- ggplot(data = subsetToPlot, aes(x = Position, y = kmerDepth), size = 0.2) +
1549419896899:# geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1549419896900:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1549419896900:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1549419896901:# scale_color_manual(values = borderColors) +
1549419896901:# scale_fill_manual(values = fillColors) +
1549419896901:# geom_text(data = labelsData,
1549419896902:# 					# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1549419896902:# 					# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1549419896903:# 					aes(x = Length, y = info.y * 0.5, group = Locus,
1549419896903:# 							hjust = 0,
1549419896903:# 							label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1549419896904:# 					show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1549419896905:# 					nudge_x = -(max.x*0.025)
1549419896905:# ) +
1549419896906:# geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1549419896906:# 					 alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1549419896906:# 					 # geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1549419896907:# 					 size = annotTextSize * 1.05, color = "#333333") +
1549419896907:# geom_text(data = labelsData,
1549419896908:# 					parse = TRUE,
1549419896908:# 					aes(x = info.x, y = info.y,
1549419896909:# 							label = paste0("{{{{italic(s)==", format(round(Score, 2), nsmall = 2),
1549419896909:# 														 "*~~~italic(hat(f)[k])} ==", format(round(NormKmerCount, 2), nsmall = 2),
1549419896910:# 														 "*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1549419896910:# 														 "*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1549419896910:# 														 "~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1549419896911:# 					hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1549419896911:facet_grid(rows = vars(Locus), cols = vars(AlleleType), scales = "free") +
1549419896912:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1549419896913:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1549419896913:theme_bw() #+
1549419896914:# plotTheme +
1549419896914:# labs(title    = expression(italic("k")*"-mer Depth Distribution"),
1549419896915:# 		 subtitle = paste("Top", nTopAlleles, "alleles/genes on sample", sample.name),
1549419896915:# 		 x        = "Position along sequence (bp)",
1549419896916:# 		 y        = expression(paste(italic(k), "-mer depth")),
1549419896916:# 		 # caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1549419896918:# 		 caption  = expression(paste(italic("s"),": score;  ",
1549419896918:# 		 														italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1549419896919:# 		 														italic("c"),": coverage;  ",
1549419896920:# 		 														italic(sigma), ": standard deviation;  ",
1549419896920:# 		 														italic(bar(d)), ": average depth"), sep = "")
1549419896921:# )
1549419896921:d.plot
1549419896922:}
1549419914737:# 		 subtitle = paste("Top", nTopAlleles, "alleles/genes on sample", sample.name),
1549419914737:# 		 x        = "Position along sequence (bp)",
1549419914771:# 		 y        = expression(paste(italic(k), "-mer depth")),
1549419914772:# 		 # caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1549419914773:# 		 caption  = expression(paste(italic("s"),": score;  ",
1549419914775:# 		 														italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1549419914776:# 		 														italic("c"),": coverage;  ",
1549419914777:# 		 														italic(sigma), ": standard deviation;  ",
1549419914779:# 		 														italic(bar(d)), ": average depth"), sep = "")
1549419914779:# )
1549419914780:d.plot
1549419959125:# Plot
1549419959126:d.plot <- ggplot(data = subsetToPlot, aes(x = Position, y = kmerDepth), size = 0.2) +
1549419959126:# geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1549419959126:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1549419959127:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1549419959127:# scale_color_manual(values = borderColors) +
1549419959127:# scale_fill_manual(values = fillColors) +
1549419959128:# geom_text(data = labelsData,
1549419959128:# 					# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1549419959129:# 					# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1549419959129:# 					aes(x = Length, y = info.y * 0.5, group = Locus,
1549419959129:# 							hjust = 0,
1549419959130:# 							label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1549419959130:# 					show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1549419959131:# 					nudge_x = -(max.x*0.025)
1549419959131:# ) +
1549419959132:# geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1549419959132:# 					 alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1549419959133:# 					 # geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1549419959133:# 					 size = annotTextSize * 1.05, color = "#333333") +
1549419959134:# geom_text(data = labelsData,
1549419959135:# 					parse = TRUE,
1549419959135:# 					aes(x = info.x, y = info.y,
1549419959136:# 							label = paste0("{{{{italic(s)==", format(round(Score, 2), nsmall = 2),
1549419959137:# 														 "*~~~italic(hat(f)[k])} ==", format(round(NormKmerCount, 2), nsmall = 2),
1549419959137:# 														 "*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1549419959137:# 														 "*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1549419959138:# 														 "~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1549419959138:# 					hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1549419959138:facet_grid(rows = vars(Locus), cols = vars(AlleleType, NumAllele), scales = "free") +
1549419959139:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1549419959139:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1549419959140:theme_bw() #+
1549419983981:# Plot
1549419983981:(d.plot <- ggplot(data = subsetToPlot, aes(x = Position, y = kmerDepth), size = 0.2) +
1549419983982:# geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1549419983982:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1549419983982:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1549419983983:# scale_color_manual(values = borderColors) +
1549419983983:# scale_fill_manual(values = fillColors) +
1549419983983:# geom_text(data = labelsData,
1549419983984:# 					# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1549419983984:# 					# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1549419983984:# 					aes(x = Length, y = info.y * 0.5, group = Locus,
1549419983985:# 							hjust = 0,
1549419983985:# 							label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1549419983985:# 					show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1549419983986:# 					nudge_x = -(max.x*0.025)
1549419983986:# ) +
1549419983986:# geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1549419983986:# 					 alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1549419983987:# 					 # geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1549419983987:# 					 size = annotTextSize * 1.05, color = "#333333") +
1549419983987:# geom_text(data = labelsData,
1549419983988:# 					parse = TRUE,
1549419983988:# 					aes(x = info.x, y = info.y,
1549419983988:# 							label = paste0("{{{{italic(s)==", format(round(Score, 2), nsmall = 2),
1549419983989:# 														 "*~~~italic(hat(f)[k])} ==", format(round(NormKmerCount, 2), nsmall = 2),
1549419983989:# 														 "*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1549419983989:# 														 "*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1549419983990:# 														 "~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1549419983990:# 					hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1549419983990:facet_grid(rows = vars(Locus), cols = vars(AlleleType, NumAllele), scales = "free") +
1549419983991:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1549419983991:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1549419983992:theme_bw() #+
1549419983992:# plotTheme +
1549419983992:# labs(title    = expression(italic("k")*"-mer Depth Distribution"),
1549419983993:# 		 subtitle = paste("Top", nTopAlleles, "alleles/genes on sample", sample.name),
1549419983993:# 		 x        = "Position along sequence (bp)",
1549419983993:# 		 y        = expression(paste(italic(k), "-mer depth")),
1549419983994:# 		 # caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1549419983994:# 		 caption  = expression(paste(italic("s"),": score;  ",
1549419983995:# 		 														italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1549419983996:# 		 														italic("c"),": coverage;  ",
1549419983996:# 		 														italic(sigma), ": standard deviation;  ",
1549419983997:# 		 														italic(bar(d)), ": average depth"), sep = "")
1549419983997:# )
1549419983998:)
1549420390773:loci[match(loci == "NEIS1689")]
1549420398144:match(loci == "NEIS1689")
1549420506402:which(loci %in% c("NEIS1689"))
1549420528793:loci[c(1:5,37)]
1549420538431:subsetToPlot <- subset %>% filter(Locus %in% loci[c(1:5,37)])
1549420539008:# which(loci %in% c("NEIS1689"))
1549420539009:max.x    <- max(subsetToPlot$Position)
1549420539247:max.y    <- max(subsetToPlot$kmerDepth)
1549420539416:x.limits <- seq(0, max.x, 100)
1549420539585:y.limits <- seq(0, max.y, 20)
1549420540123:# Plot
1549420540124:(d.plot <- ggplot(data = subsetToPlot, aes(x = Position, y = kmerDepth), size = 0.2) +
1549420540124:# geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1549420540125:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1549420540125:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1549420540125:# scale_color_manual(values = borderColors) +
1549420540126:# scale_fill_manual(values = fillColors) +
1549420540126:# geom_text(data = labelsData,
1549420540126:# 					# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1549420540127:# 					# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1549420540127:# 					aes(x = Length, y = info.y * 0.5, group = Locus,
1549420540127:# 							hjust = 0,
1549420540128:# 							label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1549420540128:# 					show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1549420540128:# 					nudge_x = -(max.x*0.025)
1549420540129:# ) +
1549420540129:# geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1549420540130:# 					 alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1549420540130:# 					 # geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1549420540130:# 					 size = annotTextSize * 1.05, color = "#333333") +
1549420540131:# geom_text(data = labelsData,
1549420540131:# 					parse = TRUE,
1549420540132:# 					aes(x = info.x, y = info.y,
1549420540132:# 							label = paste0("{{{{italic(s)==", format(round(Score, 2), nsmall = 2),
1549420540133:# 														 "*~~~italic(hat(f)[k])} ==", format(round(NormKmerCount, 2), nsmall = 2),
1549420540133:# 														 "*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1549420540134:# 														 "*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1549420540134:# 														 "~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1549420540135:# 					hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1549420540135:facet_grid(rows = vars(Locus), cols = vars(AlleleType, NumAllele), scales = "free") +
1549420540135:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1549420540136:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1549420540137:theme_bw() #+
1549420540137:# plotTheme +
1549420540138:# labs(title    = expression(italic("k")*"-mer Depth Distribution"),
1549420540138:# 		 subtitle = paste("Top", nTopAlleles, "alleles/genes on sample", sample.name),
1549420540139:# 		 x        = "Position along sequence (bp)",
1549420540140:# 		 y        = expression(paste(italic(k), "-mer depth")),
1549420540141:# 		 # caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1549420540142:# 		 caption  = expression(paste(italic("s"),": score;  ",
1549420540143:# 		 														italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1549420540144:# 		 														italic("c"),": coverage;  ",
1549420540145:# 		 														italic(sigma), ": standard deviation;  ",
1549420540145:# 		 														italic(bar(d)), ": average depth"), sep = "")
1549420540146:# )
1549420540146:)
1549422247710:#!/usr/bin/env Rscript
1549422247711:# ##############################################################################
1549422247711:#  Author:   Hector Fabio Espitia-Navarro
1549422247712:#            Georgia Institute of Technology
1549422247712:#  Version:  1.0
1549422247713:#  Date:     01/19/2019
1549422247713:# ##############################################################################
1549422247714:# Install required packages -----------------------------------------------
1549422247714:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549422247715:if(!file.exists(personal.lib.path))
1549422247716:dir.create(personal.lib.path)
1549422247717:printMessage <- function(message, verbose){
1549422247717:if(verbose)
1549422247718:cat(message)
1549422247718:}
1549422247719:# crayon::bold("Hola")
1549422247720:installAndLoadPackages <- function(pkg, verbose){
1549422247720:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1549422247721:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1549422247721:printMessage("Done!\n", verbose)
1549422247722:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549422247722:if (length(new.pkg)) {
1549422247722:printMessage("Installing new packages... ", verbose)
1549422247723:install.packages(new.pkg, dependencies = TRUE,
1549422247723:repos="http://cran.rstudio.com/",
1549422247724:lib = personal.lib.path)
1549422247724:printMessage("Done!\n", verbose)
1549422247725:}
1549422247725:printMessage("Loading required packages... ", verbose)
1549422247726:sapply(pkg, function(x){
1549422247726:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549422247727:})
1549422247727:printMessage("Done!\n", verbose)
1549422247727:}
1549422247728:# github.related.packages <- c("devtools", "Rcpp")
1549422247728:# packages <- c("argparser", "tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite")
1549422247729:packages <- c("tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite", "gridExtra")
1549422247729:# installAndLoadPackages(packages, verbose = TRUE)
1549422247729:installAndLoadPackages("argparser", verbose = FALSE)
1549422247753:# Command line arguments processing ---------------------------------------
1549422247753:# Get script name
1549422247753:initial.options <- commandArgs(trailingOnly = FALSE)
1549422247754:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1549422247754:# Process command line arguments
1549422247755:# Create a parser
1549422247755:p <- arg_parser("This script generates k-mer depth plots using a depth file generated by the\033[1mSTing typer\033[22m tool (-t option).",
1549422247755:name = script.name)
1549422247766:# Add Positional arguments (required)
1549422247766:p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
1549422247767:# Add options
1549422247768:p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1549422247768:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1549422247769:default = "kmer_depth")
1549422247770:p <- add_argument(p, "--sample_name", help = "Sample name.",
1549422247770:default = "input file's name")
1549422247771:p <- add_argument(p, "--max_loci_per_page", help = "Maximum number of loci to print on each page.",
1549422247771:default = 7)
1549422247772:p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'",
1549422247772:default = "pdf")
1549422247773:# Initialization of variables ---------------------------------------------
1549422247774:# Values to test the script using RStudio
1549422247774:script.home       <- "/home/hspitia/Dropbox/gatech/projects/STing/manuscript/data/typer/v0.24/detector_on_failed"
1549422247774:# inputFile         <- paste(script.home, "ERR036060.depth.2.tsv", sep = "/")
1549422247775:# geneFile          <- paste(script.home, "rmlst_failed_loci.txt", sep = "/")
1549422247775:inputFile         <- paste(script.home, "detector.v024.nm20.cgmlst.failed_alleles.depth.for_plotting.tsv.gz", sep = "/")
1549422247775:geneFile          <- paste(script.home, "loci.txt", sep = "/")
1549422247776:out.prefix        <- "kmer_depth"
1549422247776:sample.name       <- basename(inputFile)
1549422247777:max.loci.per.page <- 4
1549422247777:out.format        <- "pdf"
1549422247778:# Parse command line arguments
1549422247778:command.line = F  # Turn to FALSE to test the script inside RStudio
1549422247778:argv <- list()
1549422247779:if(command.line) {
1549422247779:argv <- parse_args(p)
1549422247779:} else {
1549422247780:argv <- parse_args(p, list(inputFile,
1549422247780:"--gene_file", geneFile,
1549422247780:"--prefix", out.prefix,
1549422247780:"--sample_name", sample.name,
1549422247781:"--max_loci_per_page", max.loci.per.page,
1549422247781:"--format", out.format))
1549422247781:}
1549422247783:# Get argument values from the command line
1549422247783:input.file        <- argv$input_file
1549422247783:gene.file         <- argv$gene_file
1549422247784:out.format        <- argv$format
1549422247784:out.prefix        <- argv$prefix
1549422247785:max.loci.per.page <- argv$max_loci_per_page
1549422247785:sample.name       <- argv$sample_name
1549422247786:# if (sample.name == "")
1549422247786:if (sample.name == "input file's name")
1549422247786:sample.name <- basename(input.file)
1549422247787:# Function to check if file exists ----------------------------------------
1549422247787:CheckFileExists <- function(file.list) {
1549422247788:non.exist.files <- !file.exists(file.list)
1549422247788:if(any(non.exist.files)) {
1549422247788:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549422247788:}
1549422247789:}
1549422247789:# Check for input files ---------------------------------------------------
1549422247789:files.to.check <- c(input.file)
1549422247790:error.message  <- CheckFileExists(files.to.check)
1549422247791:if(!is.null(error.message)){
1549422247791:stop(error.message)
1549422247791:} else {
1549422247791:# Code core - Begin -------------------------------------------------------
1549422247792:installAndLoadPackages(packages, verbose = TRUE)
1549422247792:# FUNCTIONS:
1549422247792:# Function to dark a list of colors ---------------------------------------
1549422247793:darkColors <- function(palette, level){
1549422247793:rgbColors <- as.data.frame(t(as.data.frame(lapply(as.data.frame(t(col2rgb(palette))),
1549422247793:function(x) { round(x * level)}))))
1549422247794:unname(sapply(rgbColors, function(x){ rgb(x[1], x[2], x[3], maxColorValue=255) }))
1549422247794:}
1549422247794:# Function for plotting k-mer depth ----------------------------------------
1549422247795:plotDepth <- function(dataToPlot, labelsData, fillColors, borderColors) {
1549422247795:max.x       <- max(dataToPlot$Position)
1549422247795:max.y       <- max(dataToPlot$kmerDepth)
1549422247796:x.limits    <- seq(0, max.x, 100)
1549422247796:y.limits    <- seq(0, max.y, 20)
1549422247797:nTopAlleles <- length(unique(dataToPlot$N))
1549422247797:d.plot <- ggplot(data = dataToPlot, aes(x = Position, y = kmerDepth),
1549422247798:size = 0.2) +
1549422247798:geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1549422247799:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1549422247799:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1549422247800:scale_color_manual(values = borderColors) +
1549422247800:scale_fill_manual(values = fillColors) +
1549422247801:geom_text(data = labelsData,
1549422247801:# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1549422247802:# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1549422247802:aes(x = Length, y = info.y * 0.5, group = Locus,
1549422247803:hjust = 0,
1549422247803:label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1549422247804:show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1549422247804:nudge_x = -(max.x*0.025)
1549422247805:) +
1549422247805:geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1549422247806:alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1549422247806:# geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1549422247807:size = annotTextSize * 1.05, color = "#333333") +
1549422247808:geom_text(data = labelsData,
1549422247808:parse = TRUE,
1549422247809:aes(x = info.x, y = info.y,
1549422247809:label = paste0("{{{italic(hat(f)[k]) ==", format(round(NormKmerCount, 2), nsmall = 2),
1549422247810:"*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1549422247811:"*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1549422247811:"~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1549422247812:hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1549422247813:# facet_grid(Locus ~ N, scales = "free_y") +
1549422247814:facet_grid(rows = vars(Locus), cols = vars(AlleleType, NumAllele), scales = "free") +
1549422247815:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1549422247815:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1549422247816:theme_bw() +
1549422247817:plotTheme +
1549422247818:labs(title    = expression(italic("k")*"-mer Depth Distribution"),
1549422247818:subtitle = paste("Top", nTopAlleles, "alleles/genes on sample", sample.name),
1549422247819:x        = "Position along sequence (bp)",
1549422247820:y        = expression(paste(italic(k), "-mer depth")),
1549422247820:# caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1549422247823:caption  = expression(paste(#italic("s"),": score;  ",
1549422247825:italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1549422247827:italic("c"),": coverage;  ",
1549422247828:italic(sigma), ": standard deviation;  ",
1549422247830:italic(bar(d)), ": average depth"), sep = "")
1549422247831:)
1549422247831:d.plot
1549422247832:}
1549422247834:# Function to get data for annotations ------------------------------------
1549422247835:getLabelsData <- function(data.to.plot) {
1549422247835:max.x <- max(data.to.plot$Position)
1549422247836:max.y <- max(data.to.plot$kmerDepth)
1549422247838:nLoci    <- length(unique(data.to.plot$Locus))
1549422247839:nAlleles <- length(unique(data.to.plot$N))
1549422247840:alleles     <- unique(data.to.plot$Allele)
1549422247841:loci        <- as.character(unique(data.to.plot$Locus))
1549422247842:lociLabels  <- c()
1549422247843:name.x      <- c()
1549422247845:name.y      <- c()
1549422247845:info.x      <- c()
1549422247846:info.y      <- c()
1549422247847:covs        <- c()
1549422247849:avgDepths   <- c()
1549422247850:meanDepth.x <- c()
1549422247850:meanDepth.y <- c()
1549422247852:for (i in loci) {
1549422247852:lociLabels <- c(lociLabels, rep(i, nAlleles))
1549422247853:}
1549422247854:for (allele in alleles) {
1549422247855:locus     <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1549422247856:maxPos    <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549422247857:maxDepth  <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549422247858:name.x    <- c(name.x, (max.x / 2))
1549422247859:name.y    <- c(name.y, (maxDepth * 0.25))
1549422247860:info.x    <- c(info.x, max.x * 0.02)
1549422247861:info.y    <- c(info.y, maxDepth * 1.5)
1549422247862:covs      <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549422247863:avgDepths <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549422247864:}
1549422247865:labelsData <- data.frame(Allele = alleles,
1549422247866:name.x = name.x,
1549422247867:name.y = name.y,
1549422247868:info.x = info.x,
1549422247869:info.y = info.y,
1549422247870:meanDepth = avgDepths,
1549422247871:N = rep(unique(data.to.plot$N), nLoci),
1549422247872:Locus = lociLabels,
1549422247873:cov = covs
1549422247874:) %>%
1549422247875:left_join(data.to.plot %>%
1549422247876:group_by(Allele, Length, NormKmerCount, Score) %>%
1549422247877:summarise(sd = sd(kmerDepth)),
1549422247878:by = c("Allele" = "Allele"))
1549422247879:labelsData
1549422247880:}
1549422247883:# Check for genes/loci file to filter loci to plot  -----------------------
1549422247884:loci.to.plot <- c()
1549422247885:# if (!is.null(gene.file)|| gene.file != "") {
1549422247886:if (!is.null(gene.file) && !is.na(gene.file) && gene.file != "") {
1549422247887:error.message <- CheckFileExists(gene.file)
1549422247888:if (!is.null(error.message)){
1549422247889:cat("Warning:")
1549422247890:cat(error.message)
1549422247892:cat("  The plotting process will continue without filtering genes/loci.\n")
1549422247893:} else {
1549422247894:loci.to.plot <- scan(gene.file, character(), quiet = TRUE)
1549422247895:}
1549422247897:}
1549422247900:# Data processing and plotting --------------------------------------------
1549422247901:cat("Plotting depths... ")
1549422247903:options(stringsAsFactors = T, readr.num_columns = 0)
1549422247904:# Load data
1549422247905:inData <- read_tsv(input.file)
1549422247906:colnames(inData) <- c("Sample", "Locus", "Allele", "Position", "kmerDepth",
1549422247907:"NormKmerCount", "Coverage", "AverageKmerDepth",
1549422247908:"AlleleType", "NumAllele", "WeightedKmerDepth", "AlleleNumber",
1549422247910:"RunMode", "kmerCounts", "Length")
1549422247911:# Transform data
1549422247912:data.to.plot <- inData %>%
1549422247914:mutate(
1549422247915:Sample = factor(Sample, levels = unique(inData$Sample)),
1549422247916:Locus = factor(Locus, levels = unique(inData$Locus)),
1549422247917:AlleleType = factor(AlleleType, levels = unique(inData$AlleleType)),
1549422247919:NumAllele = factor(NumAllele, levels = unique(inData$NumAllele)),
1549422247920:RunMode = factor(RunMode, levels = unique(inData$RunMode)),
1549422247921:Allele = factor(Allele, levels = unique(inData$Allele))
1549422247922:)
1549422247925:tmp <- inData %>%
1549422247926:group_by(Sample, Locus, Allele, AlleleType, NumAllele) %>%
1549422247927:summarise(Length = n())
1549422247929:# # Filtering loci/genes from genes_file input param
1549422247930:# if (length(loci.to.plot) > 0) {
1549422247931:#   data.to.plot <- data.to.plot %>%
1549422247932:#     filter(Locus %in% loci.to.plot)
1549422247934:# }
1549422247935:longestLocusNameLength <- max(str_length(as.character(unique(inData$Locus))))
1549422247936:nSamples <- length(unique(data.to.plot$Sample))
1549422247938:# nLoci    <- length(unique(data.to.plot$Locus))
1549422247939:# nAlleles <- length(unique(data.to.plot$Alleles))
1549422247941:# Theme-related variable definition ---------------------------------------
1549422247943:annotLinetype     <- "solid"
1549422247944:annotTextSize     <- 4
1549422247945:axisColor         <- "#000000"
1549422247947:axisTextSize      <- 12
1549422247948:barAnnotTextSize  <- 4
1549422247949:baseTextSize      <- 14
1549422247951:gridColor         <- "#e0e0e0"
1549422247952:lineSize          <- 0.3
1549422247953:# panelColor        <- "#ffffff"
1549422247955:# panelColor        <- "#fff4e0"
1549422247957:panelColor        <- "#f2efe6"
1549422247959:# stripBackground   <- "#cccccc"
1549422247961:stripTextSize     <- axisTextSize
1549422247963:if (longestLocusNameLength > 12)
1549422247965:stripTextSize  <- stripTextSize * 0.6
1549422247967:textColor  <- "#000000"
1549422247969:# baseFontFamily        <- "Arial"
1549422247973:# Custom theme definition for plots ---------------------------------------
1549422247974:plotTheme <- list(
1549422247976:theme(
1549422247978:axis.text.x      = element_text(angle = 50, size = axisTextSize,
1549422247980:vjust = 1, hjust = 1, color = textColor),
1549422247982:axis.text.y      = element_text(size = axisTextSize, color = textColor),
1549422247984:axis.ticks       = element_line(size = lineSize),
1549422247986:axis.title.x     = element_text(margin = margin(6,0,8,0, "mm")),
1549422248020:axis.title.y     = element_text(margin = margin(0,6,0,0, "mm")),
1549422248023:legend.position  = "none",
1549422248024:panel.border     = element_rect(size = lineSize),
1549422248026:panel.background = element_rect(fill = panelColor),
1549422248027:panel.grid       = element_line(size = lineSize, colour = gridColor),
1549422248029:panel.grid.minor = element_blank(),
1549422248030:plot.margin      = margin(10,10,0,10, "mm"),
1549422248032:panel.spacing    = unit(4, "mm"),
1549422248033:plot.caption     = element_text(size = baseTextSize * 0.7, face = "italic"),
1549422248035:plot.title       = element_text(hjust = 0.5),
1549422248036:plot.subtitle    = element_text(hjust = 0.5),
1549422248038:strip.background = element_rect(size = lineSize),
1549422248039:strip.text       = element_text(size = stripTextSize),
1549422248041:text             = element_text(size = baseTextSize)
1549422248042:)
1549422248044:)
1549422248047:samples <- levels(data.to.plot$Sample)
1549422248051:for (sam in samples[1]) {
1549422248052:print(sam)
1549422248055:subset   <- data.to.plot %>% filter(Sample == sam)
1549422248057:loci     <- levels(subset$Locus)
1549422248059:alleles  <- levels(subset$Allele)
1549422248061:nLoci    <- length(loci)
1549422248063:# print(str_glue("sample {sam}: nLoci = {length(loci)}  nAlleles = {length(alleles)}"))
1549422248068:subsetToPlot <- subset %>% filter(Locus %in% loci[c(1:8,37)])
1549422248070:# which(loci %in% c("NEIS1689"))
1549422248072:max.x    <- max(subsetToPlot$Position)
1549422248074:max.y    <- max(subsetToPlot$kmerDepth)
1549422248076:x.limits <- seq(0, max.x, 100)
1549422248079:y.limits <- seq(0, max.y, 20)
1549422248085:rowsPerPage <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549422248087:colourCount <- rowsPerPage
1549422248089:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549422248091:borderPalette <- darkColors(fillPalette, 0.6)
1549422248096:# Depth plot -------------------------------------------------------------
1549422248098:# lociPerPage    <- 3
1549422248100:wFactor        <- 4.8
1549422248103:plotTitlesSize <- 2.39
1549422248108:getPlotHeight <- function(rows, extras){
1549422248111:hFactor <- ifelse(rows == 1, 1.88, 1.6)
1549422248114:# loci + titles and foot note + strip + space between locus
1549422248116:(rows*hFactor) + extras + ((rows-1)*0.157) #in
1549422248119:}
1549422248123:# rowsPerPage <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549422248126:height      <- getPlotHeight(rowsPerPage, plotTitlesSize)
1549422248128:width       <- nAlleles * wFactor
1549422248130:loci        <- unique(data.to.plot$Locus)
1549422248133:sets        <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549422248138:plots <- lapply(sets, function(set, dp=subsetToPlot, rp=rowsPerPage){
1549422248140:nLoci        <- length(set)
1549422248143:subsetToPlot <- dp %>% filter(Locus %in% set)
1549422248145:# subPalette   <-
1549422248148:ld           <- getLabelsData(subsetToPlot)
1549422248150:p            <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette)
1549422248153:if(nLoci < rp){
1549422248155:hlay    <- matrix(c(1, NA))
1549422248157:total   <- getPlotHeight(rp, plotTitlesSize)
1549422248158:cHeight <- getPlotHeight(nLoci, plotTitlesSize)
1549422248161:blank   <- getPlotHeight(rp-nLoci, 0)
1549422248163:heights <- matrix(c(cHeight/total, blank/total))
1549422248165:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549422248169:}
1549422248172:p
1549422248175:})
1549422248180:if (out.format == "pdf") {
1549422248182:out.filename <- paste(out.prefix, out.format, sep = ".")
1549422248184:ml <- marrangeGrob(plots, nrow=1, ncol=1, padding = unit(10, "mm"),
1549422248186:top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549422248188:ggsave(filename = out.filename, plot = ml,
1549422248190:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549422248192:}
1549422248194:else {
1549422248196:for (i in seq_along(plots)) {
1549422248198:out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549422248201:ggsave(filename = out.filename, plot = plots[[i]],
1549422248204:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549422248206:}
1549422248208:}
1549422248210:}
1549422248214:# # Palette definition ------------------------------------------------------
1549422248216:# # colourCount <- length(unique(inData$Locus))
1549422248217:# rowsPerPage <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549422248219:# # colourCount <- nLoci
1549422248221:# colourCount <- rowsPerPage
1549422248223:# # colourCount  <- length(unique(data.to.plot$Allele))
1549422248225:# # fillPalette  <- colorRampPalette(brewer.pal(8, "Dark2"))(colourCount)
1549422248227:# # fillPalette  <- colorRampPalette(brewer.pal(12, "Paired"))(colourCount)
1549422248228:# # fillPalette  <- colorRampPalette(brewer.pal(9, "Set1"))(colourCount)
1549422248230:# # fillPalette  <- colorRampPalette(pal_npg("nrc")(10))(colourCount)
1549422248232:# # fillPalette  <- colorRampPalette(pal_d3("category20")(20))(colourCount)
1549422248234:# fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549422248235:# borderPalette <- darkColors(fillPalette, 0.6)
1549422248237:# # library("scales"); show_col(fillPalette); show_col(borderPalette)
1549422248242:# #
1549422248244:# # Depth plot -------------------------------------------------------------
1549422248246:# # lociPerPage    <- 3
1549422248248:# wFactor        <- 4.8
1549422248250:# plotTitlesSize <- 2.39
1549422248253:#
1549422248255:# getPlotHeight <- function(rows, extras){
1549422248258:# 	hFactor <- ifelse(rows == 1, 1.88, 1.6)
1549422248261:# 	# loci + titles and foot note + strip + space between locus
1549422248264:# 	(rows*hFactor) + extras + ((rows-1)*0.157) #in
1549422248267:# }
1549422248270:#
1549422248272:# # rowsPerPage <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549422248275:# height      <- getPlotHeight(rowsPerPage, plotTitlesSize)
1549422248277:# width       <- nAlleles * wFactor
1549422248279:# loci        <- unique(data.to.plot$Locus)
1549422248282:# sets        <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549422248284:#
1549422248286:# plots <- lapply(sets, function(set, dp=data.to.plot, rp=rowsPerPage){
1549422248288:# 	nLoci        <- length(set)
1549422248290:# 	subsetToPlot <- dp %>% filter(Locus %in% set)
1549422248292:# 	# subPalette   <-
1549422248294:# 	ld           <- getLabelsData(subsetToPlot)
1549422248297:# 	p            <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette)
1549422248299:# 	if(nLoci < rp){
1549422248301:# 		hlay    <- matrix(c(1, NA))
1549422248303:# 		total   <- getPlotHeight(rp, plotTitlesSize)
1549422248305:# 		cHeight <- getPlotHeight(nLoci, plotTitlesSize)
1549422248307:# 		blank   <- getPlotHeight(rp-nLoci, 0)
1549422248309:# 		heights <- matrix(c(cHeight/total, blank/total))
1549422248311:# 		p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549422248313:# 	}
1549422248315:# 	p
1549422248317:# })
1549422248319:#
1549422248322:# if (out.format == "pdf") {
1549422248325:# 	out.filename <- paste(out.prefix, out.format, sep = ".")
1549422248327:# 	ml <- marrangeGrob(plots, nrow=1, ncol=1, padding = unit(10, "mm"),
1549422248329:# 										 top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549422248332:# 	ggsave(filename = out.filename, plot = ml,
1549422248335:# 				 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549422248338:# }
1549422248340:# else {
1549422248342:# 	for (i in seq_along(plots)) {
1549422248344:# 		out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549422248346:# 		ggsave(filename = out.filename, plot = plots[[i]],
1549422248348:# 					 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549422248350:# 	}
1549422248352:# }
1549422248354:#
1549422248356:# # # Depth distribution plot ------------------------------------------------
1549422248358:# # hFactor  <- 3
1549422248360:# # wFactor  <- 2
1549422248362:# # if (nLoci == 1)
1549422248364:# #   hFactor <- 3.5
1549422248366:# # height       <- nLoci * hFactor
1549422248368:# # width        <- nAlleles * wFactor
1549422248370:# # # Generate plot
1549422248372:# # (dist.plot <- plotDepthDist(data.to.plot, labelsData, fillPalette, borderPalette))
1549422248374:# # # Save plot
1549422248376:# # out.filename <- paste0(out.prefix, "_dist.", out.format)
1549422248378:# # if (out.format == "png") {
1549422248380:# #   ggsave(filename = out.filename, plot = dist.plot,
1549422248382:# #          width  = width, height = height, type = "cairo-png", dpi = 300)
1549422248384:# # } else {
1549422248386:# #   ggsave(filename = out.filename, plot = dist.plot,
1549422248388:# #          width  = width, height = height, dpi = 400)
1549422248390:# # }
1549422248393:#
1549422248395:cat("Done! \n")
1549422248400:# Code core - End ---------------------------------------------------------
1549422248402:}
1549422282755:#!/usr/bin/env Rscript
1549422282755:# ##############################################################################
1549422282756:#  Author:   Hector Fabio Espitia-Navarro
1549422282756:#            Georgia Institute of Technology
1549422282756:#  Version:  1.0
1549422282757:#  Date:     01/19/2019
1549422282757:# ##############################################################################
1549422282758:# Install required packages -----------------------------------------------
1549422282758:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549422282758:if(!file.exists(personal.lib.path))
1549422282759:dir.create(personal.lib.path)
1549422282760:printMessage <- function(message, verbose){
1549422282760:if(verbose)
1549422282760:cat(message)
1549422282761:}
1549422282762:# crayon::bold("Hola")
1549422282762:installAndLoadPackages <- function(pkg, verbose){
1549422282762:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1549422282763:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1549422282763:printMessage("Done!\n", verbose)
1549422282763:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549422282764:if (length(new.pkg)) {
1549422282764:printMessage("Installing new packages... ", verbose)
1549422282764:install.packages(new.pkg, dependencies = TRUE,
1549422282765:repos="http://cran.rstudio.com/",
1549422282765:lib = personal.lib.path)
1549422282765:printMessage("Done!\n", verbose)
1549422282766:}
1549422282766:printMessage("Loading required packages... ", verbose)
1549422282767:sapply(pkg, function(x){
1549422282767:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549422282767:})
1549422282768:printMessage("Done!\n", verbose)
1549422282768:}
1549422282769:# github.related.packages <- c("devtools", "Rcpp")
1549422282769:# packages <- c("argparser", "tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite")
1549422282769:packages <- c("tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite", "gridExtra")
1549422282770:# installAndLoadPackages(packages, verbose = TRUE)
1549422282770:installAndLoadPackages("argparser", verbose = FALSE)
1549422282803:# Command line arguments processing ---------------------------------------
1549422282803:# Get script name
1549422282804:initial.options <- commandArgs(trailingOnly = FALSE)
1549422282804:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1549422282805:# Process command line arguments
1549422282806:# Create a parser
1549422282806:p <- arg_parser("This script generates k-mer depth plots using a depth file generated by the\033[1mSTing typer\033[22m tool (-t option).",
1549422282806:name = script.name)
1549422282809:# Add Positional arguments (required)
1549422282809:p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
1549422282810:# Add options
1549422282811:p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1549422282812:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1549422282813:default = "kmer_depth")
1549422282814:p <- add_argument(p, "--sample_name", help = "Sample name.",
1549422282815:default = "input file's name")
1549422282816:p <- add_argument(p, "--max_loci_per_page", help = "Maximum number of loci to print on each page.",
1549422282816:default = 7)
1549422282818:p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'",
1549422282818:default = "pdf")
1549422282820:# Initialization of variables ---------------------------------------------
1549422282820:# Values to test the script using RStudio
1549422282820:script.home       <- "/home/hspitia/Dropbox/gatech/projects/STing/manuscript/data/typer/v0.24/detector_on_failed"
1549422282821:# inputFile         <- paste(script.home, "ERR036060.depth.2.tsv", sep = "/")
1549422282822:# geneFile          <- paste(script.home, "rmlst_failed_loci.txt", sep = "/")
1549422282822:inputFile         <- paste(script.home, "detector.v024.nm20.cgmlst.failed_alleles.depth.for_plotting.tsv.gz", sep = "/")
1549422282823:geneFile          <- paste(script.home, "loci.txt", sep = "/")
1549422282824:out.prefix        <- "kmer_depth"
1549422282825:sample.name       <- basename(inputFile)
1549422282826:max.loci.per.page <- 4
1549422282826:out.format        <- "pdf"
1549422282827:# Parse command line arguments
1549422282828:command.line = F  # Turn to FALSE to test the script inside RStudio
1549422282828:argv <- list()
1549422282829:if(command.line) {
1549422282830:argv <- parse_args(p)
1549422282830:} else {
1549422282831:argv <- parse_args(p, list(inputFile,
1549422282831:"--gene_file", geneFile,
1549422282832:"--prefix", out.prefix,
1549422282832:"--sample_name", sample.name,
1549422282833:"--max_loci_per_page", max.loci.per.page,
1549422282833:"--format", out.format))
1549422282834:}
1549422282836:# Get argument values from the command line
1549422282836:input.file        <- argv$input_file
1549422282837:gene.file         <- argv$gene_file
1549422282838:out.format        <- argv$format
1549422282838:out.prefix        <- argv$prefix
1549422282839:max.loci.per.page <- argv$max_loci_per_page
1549422282840:sample.name       <- argv$sample_name
1549422282840:# if (sample.name == "")
1549422282841:if (sample.name == "input file's name")
1549422282841:sample.name <- basename(input.file)
1549422282842:# Function to check if file exists ----------------------------------------
1549422282843:CheckFileExists <- function(file.list) {
1549422282843:non.exist.files <- !file.exists(file.list)
1549422282844:if(any(non.exist.files)) {
1549422282844:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549422282845:}
1549422282845:}
1549422282846:# Check for input files ---------------------------------------------------
1549422282846:files.to.check <- c(input.file)
1549422282847:error.message  <- CheckFileExists(files.to.check)
1549422282848:if(!is.null(error.message)){
1549422282848:stop(error.message)
1549422282849:} else {
1549422282849:# Code core - Begin -------------------------------------------------------
1549422282850:installAndLoadPackages(packages, verbose = TRUE)
1549422282850:# FUNCTIONS:
1549422282851:# Function to dark a list of colors ---------------------------------------
1549422282851:darkColors <- function(palette, level){
1549422282852:rgbColors <- as.data.frame(t(as.data.frame(lapply(as.data.frame(t(col2rgb(palette))),
1549422282852:function(x) { round(x * level)}))))
1549422282853:unname(sapply(rgbColors, function(x){ rgb(x[1], x[2], x[3], maxColorValue=255) }))
1549422282853:}
1549422282854:# Function for plotting k-mer depth ----------------------------------------
1549422282854:plotDepth <- function(dataToPlot, labelsData, fillColors, borderColors) {
1549422282855:max.x       <- max(dataToPlot$Position)
1549422282855:max.y       <- max(dataToPlot$kmerDepth)
1549422282856:x.limits    <- seq(0, max.x, 100)
1549422282856:y.limits    <- seq(0, max.y, 20)
1549422282857:nTopAlleles <- length(unique(dataToPlot$N))
1549422282858:d.plot <- ggplot(data = dataToPlot, aes(x = Position, y = kmerDepth),
1549422282859:size = 0.2) +
1549422282859:geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1549422282860:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1549422282861:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1549422282862:scale_color_manual(values = borderColors) +
1549422282863:scale_fill_manual(values = fillColors) +
1549422282864:geom_text(data = labelsData,
1549422282865:# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1549422282865:# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1549422282866:aes(x = Length, y = info.y * 0.5, group = Locus,
1549422282867:hjust = 0,
1549422282867:label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1549422282868:show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1549422282869:nudge_x = -(max.x*0.025)
1549422282870:) +
1549422282871:geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1549422282872:alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1549422282872:# geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1549422282873:size = annotTextSize * 1.05, color = "#333333") +
1549422282874:geom_text(data = labelsData,
1549422282875:parse = TRUE,
1549422282876:aes(x = info.x, y = info.y,
1549422282877:label = paste0("{{{italic(hat(f)[k]) ==", format(round(NormKmerCount, 2), nsmall = 2),
1549422282877:"*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1549422282880:"*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1549422282881:"~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1549422282882:hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1549422282884:# facet_grid(Locus ~ N, scales = "free_y") +
1549422282885:facet_grid(rows = vars(Locus), cols = vars(AlleleType, NumAllele), scales = "free") +
1549422282886:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1549422282887:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1549422282888:theme_bw() +
1549422282889:plotTheme +
1549422282890:labs(title    = expression(italic("k")*"-mer Depth Distribution"),
1549422282891:subtitle = paste("Top", nTopAlleles, "alleles/genes on sample", sample.name),
1549422282892:x        = "Position along sequence (bp)",
1549422282893:y        = expression(paste(italic(k), "-mer depth")),
1549422282894:# caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1549422282897:caption  = expression(paste(#italic("s"),": score;  ",
1549422282899:italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1549422282901:italic("c"),": coverage;  ",
1549422282903:italic(sigma), ": standard deviation;  ",
1549422282905:italic(bar(d)), ": average depth"), sep = "")
1549422282906:)
1549422282907:d.plot
1549422282908:}
1549422282910:# Function to get data for annotations ------------------------------------
1549422282912:getLabelsData <- function(data.to.plot) {
1549422282913:max.x <- max(data.to.plot$Position)
1549422282914:max.y <- max(data.to.plot$kmerDepth)
1549422282916:nLoci    <- length(unique(data.to.plot$Locus))
1549422282917:nAlleles <- length(unique(data.to.plot$N))
1549422282920:alleles     <- unique(data.to.plot$Allele)
1549422282921:loci        <- as.character(unique(data.to.plot$Locus))
1549422282922:lociLabels  <- c()
1549422282923:name.x      <- c()
1549422282924:name.y      <- c()
1549422282925:info.x      <- c()
1549422282926:info.y      <- c()
1549422282928:covs        <- c()
1549422282929:avgDepths   <- c()
1549422282930:meanDepth.x <- c()
1549422282931:meanDepth.y <- c()
1549422282933:for (i in loci) {
1549422282934:lociLabels <- c(lociLabels, rep(i, nAlleles))
1549422282935:}
1549422282936:for (allele in alleles) {
1549422282937:locus     <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1549422282939:maxPos    <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549422282940:maxDepth  <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549422282941:name.x    <- c(name.x, (max.x / 2))
1549422282942:name.y    <- c(name.y, (maxDepth * 0.25))
1549422282944:info.x    <- c(info.x, max.x * 0.02)
1549422282945:info.y    <- c(info.y, maxDepth * 1.5)
1549422282946:covs      <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549422282948:avgDepths <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549422282949:}
1549422282950:labelsData <- data.frame(Allele = alleles,
1549422282952:name.x = name.x,
1549422282953:name.y = name.y,
1549422282955:info.x = info.x,
1549422282956:info.y = info.y,
1549422282958:meanDepth = avgDepths,
1549422282959:N = rep(unique(data.to.plot$N), nLoci),
1549422282961:Locus = lociLabels,
1549422282963:cov = covs
1549422282964:) %>%
1549422282966:left_join(data.to.plot %>%
1549422282967:group_by(Allele, Length, NormKmerCount, Score) %>%
1549422282968:summarise(sd = sd(kmerDepth)),
1549422282970:by = c("Allele" = "Allele"))
1549422282971:labelsData
1549422282973:}
1549422282976:# Check for genes/loci file to filter loci to plot  -----------------------
1549422282977:loci.to.plot <- c()
1549422282978:# if (!is.null(gene.file)|| gene.file != "") {
1549422282980:if (!is.null(gene.file) && !is.na(gene.file) && gene.file != "") {
1549422282981:error.message <- CheckFileExists(gene.file)
1549422282983:if (!is.null(error.message)){
1549422282984:cat("Warning:")
1549422282986:cat(error.message)
1549422282988:cat("  The plotting process will continue without filtering genes/loci.\n")
1549422282989:} else {
1549422282991:loci.to.plot <- scan(gene.file, character(), quiet = TRUE)
1549422282993:}
1549422282994:}
1549422282998:# Data processing and plotting --------------------------------------------
1549422282999:cat("Plotting depths... ")
1549422283001:options(stringsAsFactors = T, readr.num_columns = 0)
1549422283003:# Load data
1549422283005:inData <- read_tsv(input.file)
1549422283006:colnames(inData) <- c("Sample", "Locus", "Allele", "Position", "kmerDepth",
1549422283008:"NormKmerCount", "Coverage", "AverageKmerDepth",
1549422283010:"AlleleType", "NumAllele", "WeightedKmerDepth", "AlleleNumber",
1549422283011:"RunMode", "kmerCounts", "Length")
1549422283014:# Transform data
1549422283016:data.to.plot <- inData %>%
1549422283017:mutate(
1549422283019:Sample = factor(Sample, levels = unique(inData$Sample)),
1549422283021:Locus = factor(Locus, levels = unique(inData$Locus)),
1549422283022:AlleleType = factor(AlleleType, levels = unique(inData$AlleleType)),
1549422283024:NumAllele = factor(NumAllele, levels = unique(inData$NumAllele)),
1549422283026:RunMode = factor(RunMode, levels = unique(inData$RunMode)),
1549422283027:Allele = factor(Allele, levels = unique(inData$Allele))
1549422283029:)
1549422283032:tmp <- inData %>%
1549422283034:group_by(Sample, Locus, Allele, AlleleType, NumAllele) %>%
1549422283036:summarise(Length = n())
1549422283037:# # Filtering loci/genes from genes_file input param
1549422283039:# if (length(loci.to.plot) > 0) {
1549422283041:#   data.to.plot <- data.to.plot %>%
1549422283043:#     filter(Locus %in% loci.to.plot)
1549422283045:# }
1549422283046:longestLocusNameLength <- max(str_length(as.character(unique(inData$Locus))))
1549422283048:nSamples <- length(unique(data.to.plot$Sample))
1549422283050:# nLoci    <- length(unique(data.to.plot$Locus))
1549422283052:# nAlleles <- length(unique(data.to.plot$Alleles))
1549422283055:# Theme-related variable definition ---------------------------------------
1549422283057:annotLinetype     <- "solid"
1549422283059:annotTextSize     <- 4
1549422283061:axisColor         <- "#000000"
1549422283064:axisTextSize      <- 12
1549422283065:barAnnotTextSize  <- 4
1549422283067:baseTextSize      <- 14
1549422283069:gridColor         <- "#e0e0e0"
1549422283070:lineSize          <- 0.3
1549422283072:# panelColor        <- "#ffffff"
1549422283074:# panelColor        <- "#fff4e0"
1549422283076:panelColor        <- "#f2efe6"
1549422283077:# stripBackground   <- "#cccccc"
1549422283079:stripTextSize     <- axisTextSize
1549422283081:if (longestLocusNameLength > 12)
1549422283083:stripTextSize  <- stripTextSize * 0.6
1549422283085:textColor  <- "#000000"
1549422283087:# baseFontFamily        <- "Arial"
1549422283090:# Custom theme definition for plots ---------------------------------------
1549422283092:plotTheme <- list(
1549422283094:theme(
1549422283096:axis.text.x      = element_text(angle = 50, size = axisTextSize,
1549422283098:vjust = 1, hjust = 1, color = textColor),
1549422283100:axis.text.y      = element_text(size = axisTextSize, color = textColor),
1549422283101:axis.ticks       = element_line(size = lineSize),
1549422283103:axis.title.x     = element_text(margin = margin(6,0,8,0, "mm")),
1549422283105:axis.title.y     = element_text(margin = margin(0,6,0,0, "mm")),
1549422283107:legend.position  = "none",
1549422283109:panel.border     = element_rect(size = lineSize),
1549422283110:panel.background = element_rect(fill = panelColor),
1549422283112:panel.grid       = element_line(size = lineSize, colour = gridColor),
1549422283114:panel.grid.minor = element_blank(),
1549422283116:plot.margin      = margin(10,10,0,10, "mm"),
1549422283118:panel.spacing    = unit(4, "mm"),
1549422283120:plot.caption     = element_text(size = baseTextSize * 0.7, face = "italic"),
1549422283122:plot.title       = element_text(hjust = 0.5),
1549422283124:plot.subtitle    = element_text(hjust = 0.5),
1549422283126:strip.background = element_rect(size = lineSize),
1549422283129:strip.text       = element_text(size = stripTextSize),
1549422283131:text             = element_text(size = baseTextSize)
1549422283134:)
1549422283136:)
1549422283140:samples <- levels(data.to.plot$Sample)
1549422283144:for (sam in samples[1]) {
1549422283147:print(sam)
1549422283149:subset   <- data.to.plot %>% filter(Sample == sam)
1549422283151:loci     <- levels(subset$Locus)
1549422283154:alleles  <- levels(subset$Allele)
1549422283156:nLoci    <- length(loci)
1549422283158:nAlleles <- length(alleles)
1549422283161:# print(str_glue("sample {sam}: nLoci = {length(loci)}  nAlleles = {length(alleles)}"))
1549422283166:subsetToPlot <- subset %>% filter(Locus %in% loci[c(1:8,37)])
1549422283169:# which(loci %in% c("NEIS1689"))
1549422283171:max.x    <- max(subsetToPlot$Position)
1549422283173:max.y    <- max(subsetToPlot$kmerDepth)
1549422283175:x.limits <- seq(0, max.x, 100)
1549422283177:y.limits <- seq(0, max.y, 20)
1549422283184:rowsPerPage <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549422283186:colourCount <- rowsPerPage
1549422283188:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549422283191:borderPalette <- darkColors(fillPalette, 0.6)
1549422283195:# Depth plot -------------------------------------------------------------
1549422283197:# lociPerPage    <- 3
1549422283200:wFactor        <- 4.8
1549422283202:plotTitlesSize <- 2.39
1549422283206:getPlotHeight <- function(rows, extras){
1549422283209:hFactor <- ifelse(rows == 1, 1.88, 1.6)
1549422283211:# loci + titles and foot note + strip + space between locus
1549422283213:(rows*hFactor) + extras + ((rows-1)*0.157) #in
1549422283216:}
1549422283220:# rowsPerPage <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549422283222:height      <- getPlotHeight(rowsPerPage, plotTitlesSize)
1549422283224:width       <- nAlleles * wFactor
1549422283226:loci        <- unique(data.to.plot$Locus)
1549422283229:sets        <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549422283234:plots <- lapply(sets, function(set, dp=subsetToPlot, rp=rowsPerPage){
1549422283236:nLoci        <- length(set)
1549422283239:subsetToPlot <- dp %>% filter(Locus %in% set)
1549422283241:# subPalette   <-
1549422283244:ld           <- getLabelsData(subsetToPlot)
1549422283246:p            <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette)
1549422283249:if(nLoci < rp){
1549422283251:hlay    <- matrix(c(1, NA))
1549422283253:total   <- getPlotHeight(rp, plotTitlesSize)
1549422283256:cHeight <- getPlotHeight(nLoci, plotTitlesSize)
1549422283259:blank   <- getPlotHeight(rp-nLoci, 0)
1549422283262:heights <- matrix(c(cHeight/total, blank/total))
1549422283264:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549422283267:}
1549422283269:p
1549422283272:})
1549422283276:if (out.format == "pdf") {
1549422283279:out.filename <- paste(out.prefix, out.format, sep = ".")
1549422283281:ml <- marrangeGrob(plots, nrow=1, ncol=1, padding = unit(10, "mm"),
1549422283286:top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549422283289:ggsave(filename = out.filename, plot = ml,
1549422283291:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549422283294:}
1549422283296:else {
1549422283298:for (i in seq_along(plots)) {
1549422283300:out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549422283301:ggsave(filename = out.filename, plot = plots[[i]],
1549422283303:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549422283305:}
1549422283308:}
1549422283310:}
1549422283315:# # Palette definition ------------------------------------------------------
1549422283318:# # colourCount <- length(unique(inData$Locus))
1549422283321:# rowsPerPage <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549422283324:# # colourCount <- nLoci
1549422283327:# colourCount <- rowsPerPage
1549422283329:# # colourCount  <- length(unique(data.to.plot$Allele))
1549422283333:# # fillPalette  <- colorRampPalette(brewer.pal(8, "Dark2"))(colourCount)
1549422283335:# # fillPalette  <- colorRampPalette(brewer.pal(12, "Paired"))(colourCount)
1549422283338:# # fillPalette  <- colorRampPalette(brewer.pal(9, "Set1"))(colourCount)
1549422283341:# # fillPalette  <- colorRampPalette(pal_npg("nrc")(10))(colourCount)
1549422283343:# # fillPalette  <- colorRampPalette(pal_d3("category20")(20))(colourCount)
1549422283346:# fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549422283349:# borderPalette <- darkColors(fillPalette, 0.6)
1549422283352:# # library("scales"); show_col(fillPalette); show_col(borderPalette)
1549422283360:# #
1549422283363:# # Depth plot -------------------------------------------------------------
1549422283365:# # lociPerPage    <- 3
1549422283368:# wFactor        <- 4.8
1549422283371:# plotTitlesSize <- 2.39
1549422283373:#
1549422283376:# getPlotHeight <- function(rows, extras){
1549422283379:# 	hFactor <- ifelse(rows == 1, 1.88, 1.6)
1549422283381:# 	# loci + titles and foot note + strip + space between locus
1549422283384:# 	(rows*hFactor) + extras + ((rows-1)*0.157) #in
1549422283387:# }
1549422283390:#
1549422283392:# # rowsPerPage <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549422283395:# height      <- getPlotHeight(rowsPerPage, plotTitlesSize)
1549422283398:# width       <- nAlleles * wFactor
1549422283400:# loci        <- unique(data.to.plot$Locus)
1549422283403:# sets        <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549422283406:#
1549422283408:# plots <- lapply(sets, function(set, dp=data.to.plot, rp=rowsPerPage){
1549422283411:# 	nLoci        <- length(set)
1549422283414:# 	subsetToPlot <- dp %>% filter(Locus %in% set)
1549422283417:# 	# subPalette   <-
1549422283419:# 	ld           <- getLabelsData(subsetToPlot)
1549422283422:# 	p            <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette)
1549422283425:# 	if(nLoci < rp){
1549422283427:# 		hlay    <- matrix(c(1, NA))
1549422283430:# 		total   <- getPlotHeight(rp, plotTitlesSize)
1549422283433:# 		cHeight <- getPlotHeight(nLoci, plotTitlesSize)
1549422283435:# 		blank   <- getPlotHeight(rp-nLoci, 0)
1549422283438:# 		heights <- matrix(c(cHeight/total, blank/total))
1549422283441:# 		p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549422283443:# 	}
1549422283446:# 	p
1549422283449:# })
1549422283451:#
1549422283454:# if (out.format == "pdf") {
1549422283457:# 	out.filename <- paste(out.prefix, out.format, sep = ".")
1549422283460:# 	ml <- marrangeGrob(plots, nrow=1, ncol=1, padding = unit(10, "mm"),
1549422283463:# 										 top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549422283466:# 	ggsave(filename = out.filename, plot = ml,
1549422283469:# 				 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549422283472:# }
1549422283475:# else {
1549422283478:# 	for (i in seq_along(plots)) {
1549422283480:# 		out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549422283483:# 		ggsave(filename = out.filename, plot = plots[[i]],
1549422283486:# 					 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549422283489:# 	}
1549422283491:# }
1549422283494:#
1549422283497:# # # Depth distribution plot ------------------------------------------------
1549422283499:# # hFactor  <- 3
1549422283502:# # wFactor  <- 2
1549422283505:# # if (nLoci == 1)
1549422283508:# #   hFactor <- 3.5
1549422283510:# # height       <- nLoci * hFactor
1549422283513:# # width        <- nAlleles * wFactor
1549422283516:# # # Generate plot
1549422283518:# # (dist.plot <- plotDepthDist(data.to.plot, labelsData, fillPalette, borderPalette))
1549422283521:# # # Save plot
1549422283524:# # out.filename <- paste0(out.prefix, "_dist.", out.format)
1549422283527:# # if (out.format == "png") {
1549422283530:# #   ggsave(filename = out.filename, plot = dist.plot,
1549422283532:# #          width  = width, height = height, type = "cairo-png", dpi = 300)
1549422283535:# # } else {
1549422283538:# #   ggsave(filename = out.filename, plot = dist.plot,
1549422283540:# #          width  = width, height = height, dpi = 400)
1549422283543:# # }
1549422283546:#
1549422283549:cat("Done! \n")
1549422283554:# Code core - End ---------------------------------------------------------
1549422283557:}
1549422440891:print(sam)
1549422441842:subset   <- data.to.plot %>% filter(Sample == sam)
1549422442365:loci     <- levels(subset$Locus)
1549422442689:alleles  <- levels(subset$Allele)
1549422443205:nLoci    <- length(loci)
1549422443554:nAlleles <- length(alleles)
1549422444033:subsetToPlot <- subset %>% filter(Locus %in% loci[c(1:8,37)])
1549422444599:# which(loci %in% c("NEIS1689"))
1549422444600:max.x    <- max(subsetToPlot$Position)
1549422445034:max.y    <- max(subsetToPlot$kmerDepth)
1549422445368:x.limits <- seq(0, max.x, 100)
1549422445694:y.limits <- seq(0, max.y, 20)
1549422446525:rowsPerPage   <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549422447020:colourCount   <- rowsPerPage
1549422447429:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549422447927:borderPalette <- darkColors(fillPalette, 0.6)
1549422451275:borderPalette
1549422455391:# Depth plot -------------------------------------------------------------
1549422455391:# lociPerPage    <- 3
1549422455392:wFactor        <- 4.8
1549422455744:plotTitlesSize <- 2.39
1549422458601:getPlotHeight <- function(rows, extras){
1549422458601:hFactor <- ifelse(rows == 1, 1.88, 1.6)
1549422458602:# loci + titles and foot note + strip + space between locus
1549422458602:(rows*hFactor) + extras + ((rows-1)*0.157) #in
1549422458602:}
1549422460028:# rowsPerPage <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549422460029:height      <- getPlotHeight(rowsPerPage, plotTitlesSize)
1549422460556:width       <- nAlleles * wFactor
1549422460991:loci        <- unique(data.to.plot$Locus)
1549422461370:sets        <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549422465496:rowsPerPage
1549422507089:print(sam)
1549422508526:subset   <- data.to.plot %>% filter(Sample == sam)
1549422508959:subsetToPlot <- subset %>% filter(Locus %in% loci[c(1:8,37)])
1549422509444:loci     <- levels(subsetToPlot$Locus)
1549422509659:alleles  <- levels(subsetToPlot$Allele)
1549422509895:nLoci    <- length(loci)
1549422514121:nAlleles <- length(alleles)
1549422514524:# which(loci %in% c("NEIS1689"))
1549422514524:max.x    <- max(subsetToPlot$Position)
1549422514743:max.y    <- max(subsetToPlot$kmerDepth)
1549422514971:x.limits <- seq(0, max.x, 100)
1549422515150:y.limits <- seq(0, max.y, 20)
1549422515373:rowsPerPage   <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549422515656:colourCount   <- rowsPerPage
1549422515875:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549422516067:borderPalette <- darkColors(fillPalette, 0.6)
1549422516542:# Depth plot -------------------------------------------------------------
1549422516543:# lociPerPage    <- 3
1549422516543:wFactor        <- 4.8
1549422516858:plotTitlesSize <- 2.39
1549422517576:getPlotHeight <- function(rows, extras){
1549422517577:hFactor <- ifelse(rows == 1, 1.88, 1.6)
1549422517577:# loci + titles and foot note + strip + space between locus
1549422517578:(rows*hFactor) + extras + ((rows-1)*0.157) #in
1549422517578:}
1549422518163:# rowsPerPage <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549422518164:height      <- getPlotHeight(rowsPerPage, plotTitlesSize)
1549422518748:width       <- nAlleles * wFactor
1549422518999:loci        <- unique(data.to.plot$Locus)
1549422519926:sets        <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549422521588:plots <- lapply(sets, function(set, dp=subsetToPlot, rp=rowsPerPage){
1549422521589:nLoci        <- length(set)
1549422521589:subsetToPlot <- dp %>% filter(Locus %in% set)
1549422521590:# subPalette   <-
1549422521591:ld           <- getLabelsData(subsetToPlot)
1549422521591:p            <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette)
1549422521592:if(nLoci < rp){
1549422521592:hlay    <- matrix(c(1, NA))
1549422521593:total   <- getPlotHeight(rp, plotTitlesSize)
1549422521593:cHeight <- getPlotHeight(nLoci, plotTitlesSize)
1549422521594:blank   <- getPlotHeight(rp-nLoci, 0)
1549422521594:heights <- matrix(c(cHeight/total, blank/total))
1549422521595:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549422521596:}
1549422521596:p
1549422521597:})
1549422533779:height
1549422537314:rowsPerPage
1549422569338:max.loci.per.page
1549422598496:nLoci
1549422671975:subsetToPlot <- subset %>% filter(Locus %in% loci[c(1:8,37)])
1549422672782:loci     <- levels(subsetToPlot$Locus)
1549422673789:alleles  <- levels(subsetToPlot$Allele)
1549422674346:nLoci    <- length(loci)
1549422674730:nAlleles <- length(alleles)
1549422675869:nLoci
1549422682395:subset %>% filter(Locus %in% loci[c(1:8,37)])
1549422685610:subsetToPlot <- subset %>% filter(Locus %in% loci[c(1:8,37)])
1549422686874:subsetToPlot
1549422719117:loci     <- as.character(unique(subsetToPlot$Locus))
1549422720078:loci
1549422732013:alleles  <- as.character(unique(subsetToPlot$Allele))
1549422732647:nLoci    <- length(loci)
1549422733638:nLoci
1549422734991:nAlleles <- length(alleles)
1549422736211:nAlleles
1549422737802:# which(loci %in% c("NEIS1689"))
1549422737803:max.x    <- max(subsetToPlot$Position)
1549422738228:max.y    <- max(subsetToPlot$kmerDepth)
1549422738530:x.limits <- seq(0, max.x, 100)
1549422738810:y.limits <- seq(0, max.y, 20)
1549422739286:rowsPerPage   <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549422739655:colourCount   <- rowsPerPage
1549422739996:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549422740376:borderPalette <- darkColors(fillPalette, 0.6)
1549422741074:# Depth plot -------------------------------------------------------------
1549422741075:# lociPerPage    <- 3
1549422741075:wFactor        <- 4.8
1549422741451:plotTitlesSize <- 2.39
1549422741898:getPlotHeight <- function(rows, extras){
1549422741898:hFactor <- ifelse(rows == 1, 1.88, 1.6)
1549422741899:# loci + titles and foot note + strip + space between locus
1549422741899:(rows*hFactor) + extras + ((rows-1)*0.157) #in
1549422741899:}
1549422742885:# rowsPerPage <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549422742885:height      <- getPlotHeight(rowsPerPage, plotTitlesSize)
1549422743113:width       <- nAlleles * wFactor
1549422743351:loci        <- unique(data.to.plot$Locus)
1549422743669:sets        <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549422758540:dp=subsetToPlot, rp=rowsPerPage
1549422763623:dp=subsetToPlot; rp=rowsPerPage
1549422765357:dp
1549422767984:rp
1549422791019:sets
1549422811921:max.loci.per.page <- 7
1549422826970:subsetToPlot <- subset %>% filter(Locus %in% loci[c(1:8,37)])
1549422826977:loci     <- as.character(unique(subsetToPlot$Locus))
1549422826977:alleles  <- as.character(unique(subsetToPlot$Allele))
1549422826978:nLoci    <- length(loci)
1549422826979:nAlleles <- length(alleles)
1549422826979:# which(loci %in% c("NEIS1689"))
1549422826980:max.x    <- max(subsetToPlot$Position)
1549422826980:max.y    <- max(subsetToPlot$kmerDepth)
1549422826981:x.limits <- seq(0, max.x, 100)
1549422826981:y.limits <- seq(0, max.y, 20)
1549422826982:rowsPerPage   <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549422826983:colourCount   <- rowsPerPage
1549422826983:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549422826985:borderPalette <- darkColors(fillPalette, 0.6)
1549422831253:rowsPerPage
1549422834308:# Depth plot -------------------------------------------------------------
1549422834309:# lociPerPage    <- 3
1549422834309:wFactor        <- 4.8
1549422834474:plotTitlesSize <- 2.39
1549422834757:getPlotHeight <- function(rows, extras){
1549422834758:hFactor <- ifelse(rows == 1, 1.88, 1.6)
1549422834758:# loci + titles and foot note + strip + space between locus
1549422834758:(rows*hFactor) + extras + ((rows-1)*0.157) #in
1549422834759:}
1549422835195:# rowsPerPage <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549422835196:height      <- getPlotHeight(rowsPerPage, plotTitlesSize)
1549422835742:width       <- nAlleles * wFactor
1549422835937:loci        <- unique(data.to.plot$Locus)
1549422836750:sets        <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549422851200:set=sets[[1]]; dp=subsetToPlot; rp=rowsPerPage
1549422852107:nLoci        <- length(set)
1549422853508:nLoci
1549422858460:subsetToPlot <- dp %>% filter(Locus %in% set)
1549422860498:subsetToPlot
1549422877038:subToPlot <- subset %>% filter(Locus %in% loci[c(1:8,37)])
1549422894328:print(sam)
1549422894329:subset   <- data.to.plot %>% filter(Sample == sam)
1549422894384:# print(str_glue("sample {sam}: nLoci = {length(loci)}  nAlleles = {length(alleles)}"))
1549422894385:subToPlot <- subset %>% filter(Locus %in% loci[c(1:8,37)])
1549422894389:loci     <- as.character(unique(subsetToPlot$Locus))
1549422894390:alleles  <- as.character(unique(subsetToPlot$Allele))
1549422894391:nLoci    <- length(loci)
1549422894392:nAlleles <- length(alleles)
1549422894392:# which(loci %in% c("NEIS1689"))
1549422894392:max.x    <- max(subToPlot$Position)
1549422894393:max.y    <- max(subToPlot$kmerDepth)
1549422894393:x.limits <- seq(0, max.x, 100)
1549422894394:y.limits <- seq(0, max.y, 20)
1549422894395:rowsPerPage   <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549422894396:colourCount   <- rowsPerPage
1549422894396:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549422894397:borderPalette <- darkColors(fillPalette, 0.6)
1549422894399:# Depth plot -------------------------------------------------------------
1549422894400:# lociPerPage    <- 3
1549422894400:wFactor        <- 4.8
1549422894400:plotTitlesSize <- 2.39
1549422894401:getPlotHeight <- function(rows, extras){
1549422894401:hFactor <- ifelse(rows == 1, 1.88, 1.6)
1549422894402:# loci + titles and foot note + strip + space between locus
1549422894402:(rows*hFactor) + extras + ((rows-1)*0.157) #in
1549422894402:}
1549422894403:# rowsPerPage <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549422894404:height      <- getPlotHeight(rowsPerPage, plotTitlesSize)
1549422894404:width       <- nAlleles * wFactor
1549422894405:loci        <- unique(data.to.plot$Locus)
1549422894425:sets        <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549422902051:set=sets[[1]]; dp=subsetToPlot; rp=rowsPerPage
1549422912639:set=sets[[1]]; dp=subToPlot; rp=rowsPerPage
1549422914063:nLoci        <- length(set)
1549422914670:subsetToPlot <- dp %>% filter(Locus %in% set)
1549422916147:subsetToPlot
1549422923320:# subPalette   <-
1549422923320:ld           <- getLabelsData(subsetToPlot)
1549423173607:# Function to get data for annotations ------------------------------------
1549423173607:getLabelsData <- function(data.to.plot) {
1549423173607:max.x <- max(data.to.plot$Position)
1549423173608:max.y <- max(data.to.plot$kmerDepth)
1549423173608:nLoci    <- length(unique(data.to.plot$Locus))
1549423173608:nAlleles <- length(unique(data.to.plot$N))
1549423173609:alleles     <- as.character(unique(data.to.plot$Allele))
1549423173609:loci        <- as.character(unique(data.to.plot$Locus))
1549423173610:lociLabels  <- c()
1549423173610:name.x      <- c()
1549423173610:name.y      <- c()
1549423173611:info.x      <- c()
1549423173611:info.y      <- c()
1549423173611:covs        <- c()
1549423173612:avgDepths   <- c()
1549423173612:meanDepth.x <- c()
1549423173612:meanDepth.y <- c()
1549423173613:for (i in loci) {
1549423173613:lociLabels <- c(lociLabels, rep(i, nAlleles))
1549423173614:}
1549423173614:for (allele in alleles) {
1549423173615:locus     <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1549423173615:maxPos    <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549423173616:maxDepth  <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549423173616:name.x    <- c(name.x, (max.x / 2))
1549423173616:name.y    <- c(name.y, (maxDepth * 0.25))
1549423173617:info.x    <- c(info.x, max.x * 0.02)
1549423173618:info.y    <- c(info.y, maxDepth * 1.5)
1549423173618:covs      <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549423173619:avgDepths <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549423173619:}
1549423173620:labelsData <- data.frame(Allele = alleles,
1549423173620:name.x = name.x,
1549423173621:name.y = name.y,
1549423173621:info.x = info.x,
1549423173622:info.y = info.y,
1549423173622:meanDepth = avgDepths,
1549423173623:# N = rep(unique(data.to.plot$N), nLoci),
1549423173623:Locus = lociLabels,
1549423173624:cov = covs
1549423173624:) %>%
1549423173625:left_join(data.to.plot %>%
1549423173625:group_by(Allele, Length, NormKmerCount, Score) %>%
1549423173626:summarise(sd = sd(kmerDepth)),
1549423173626:by = c("Allele" = "Allele"))
1549423173627:labelsData
1549423173627:}
1549423187114:nLoci        <- length(set)
1549423187453:subsetToPlot <- dp %>% filter(Locus %in% set)
1549423188185:# subPalette   <-
1549423188185:ld           <- getLabelsData(subsetToPlot)
1549423215048:subsetToPlot
1549423234717:data.to.plot=subsetToPlot
1549423238098:max.x <- max(data.to.plot$Position)
1549423238906:max.y <- max(data.to.plot$kmerDepth)
1549423240500:max.x
1549423242037:max.y
1549423247116:nLoci    <- length(unique(data.to.plot$Locus))
1549423248277:nAlleles <- length(unique(data.to.plot$N))
1549423285465:nLoci    <- length(unique(data.to.plot$Locus))
1549423285803:nAlleles <- length(unique(data.to.plot$Allele))
1549423288407:nAlleles
1549423729628:data.to.plot=subsetToPlot
1549423729881:max.x <- max(data.to.plot$Position)
1549423730080:max.y <- max(data.to.plot$kmerDepth)
1549423730277:nLoci    <- length(unique(data.to.plot$Locus))
1549423730706:nAlleles <- length(unique(data.to.plot$Allele))
1549423731237:alleles     <- as.character(unique(data.to.plot$Allele))
1549423731596:loci        <- as.character(unique(data.to.plot$Locus))
1549423732529:# alleleType  <- c()
1549423732530:lociLabels  <- c()
1549423732909:name.x      <- c()
1549423733169:name.y      <- c()
1549423733407:info.x      <- c()
1549423733592:info.y      <- c()
1549423733793:covs        <- c()
1549423733990:avgDepths   <- c()
1549423734178:meanDepth.x <- c()
1549423734391:meanDepth.y <- c()
1549423734742:# for (i in loci) {
1549423734743:#   lociLabels <- c(lociLabels, rep(i, nAlleles))
1549423734762:# }
1549423734763:for (allele in alleles) {
1549423734763:# locus     <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1549423734763:maxPos    <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549423734764:maxDepth  <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549423734764:name.x    <- c(name.x, (max.x / 2))
1549423734764:name.y    <- c(name.y, (maxDepth * 0.25))
1549423734765:info.x    <- c(info.x, max.x * 0.02)
1549423734765:info.y    <- c(info.y, maxDepth * 1.5)
1549423734765:covs      <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549423734766:avgDepths <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549423734766:}
1549423758835:locus     <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1549423760414:locus
1549423772333:data.to.plot$Allele
1549423778707:data.to.plot$Allele == allele
1549423791703:data.to.plot[data.to.plot$Allele == allele, "Locus"]
1549423796775:locus     <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1549423798165:locus
1549423805726:unique(data.to.plot[data.to.plot$Allele == allele, "Locus"])
1549423818626:as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
1549423906442:locus     <- unique(data.to.plot[data.to.plot$Allele == allele, "Locus"])
1549423907896:locus
1549423922142:levels(locus)
1549423943637:unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]) %>% pull()
1549423956170:locus     <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]) %>% pull())
1549423957272:locus
1549423960842:maxPos    <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549423962135:maxPos
1549423963879:maxDepth  <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549423964871:maxDepth
1549423966118:name.x    <- c(name.x, (max.x / 2))
1549423966900:name.y    <- c(name.y, (maxDepth * 0.25))
1549423967150:info.x    <- c(info.x, max.x * 0.02)
1549423967380:info.y    <- c(info.y, maxDepth * 1.5)
1549423967656:covs      <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549423968001:avgDepths <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549423968480:# for (i in loci) {
1549423968480:#   lociLabels <- c(lociLabels, rep(i, nAlleles))
1549423968481:# }
1549423968481:for (allele in alleles) {
1549423968482:locus     <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]) %>% pull())
1549423968482:maxPos    <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549423968483:maxDepth  <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549423968483:name.x    <- c(name.x, (max.x / 2))
1549423968484:name.y    <- c(name.y, (maxDepth * 0.25))
1549423968484:info.x    <- c(info.x, max.x * 0.02)
1549423968485:info.y    <- c(info.y, maxDepth * 1.5)
1549423968485:covs      <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549423968486:avgDepths <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549423968486:}
1549423969065:labelsData <- data.frame(Allele = alleles,
1549423969065:name.x = name.x,
1549423969065:name.y = name.y,
1549423969066:info.x = info.x,
1549423969066:info.y = info.y,
1549423969066:meanDepth = avgDepths,
1549423969066:# N = rep(unique(data.to.plot$N), nLoci),
1549423969067:# Locus = lociLabels,
1549423969067:cov = covs
1549423969067:) %>%
1549423969068:left_join(data.to.plot %>%
1549423969068:group_by(Locus, Allele, AlleleType, NumAllele, Length, NormKmerCount, Score) %>%
1549423969068:summarise(sd = sd(kmerDepth)),
1549423969069:by = c("Allele" = "Allele"))
1549423991972:data.frame(Allele = alleles,
1549423991973:name.x = name.x,
1549423991973:name.y = name.y,
1549423991974:info.x = info.x,
1549423991974:info.y = info.y,
1549423991975:meanDepth = avgDepths,
1549423991975:# N = rep(unique(data.to.plot$N), nLoci),
1549423991976:# Locus = lociLabels,
1549423991977:cov = covs
1549423991977:)
1549424001783:data.frame(Allele = alleles,
1549424001783:name.x = name.x,
1549424001784:name.y = name.y,
1549424001784:info.x = info.x,
1549424001784:info.y = info.y,
1549424001785:meanDepth = avgDepths,
1549424001785:# N = rep(unique(data.to.plot$N), nLoci),
1549424001785:# Locus = lociLabels,
1549424001786:cov = covs
1549424001786:)
1549424010114:avgDepths
1549424013594:info.y
1549424018975:info.x
1549424023900:name.y
1549424030621:name.x
1549424037123:alleles
1549424066451:alleles
1549424069710:loci
1549424111250:# for (i in loci) {
1549424111251:#   lociLabels <- c(lociLabels, rep(i, nAlleles))
1549424111251:# }
1549424111251:for (allele in alleles) {
1549424111252:locus     <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]) %>% pull())
1549424111252:maxPos    <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549424111253:maxDepth  <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549424111253:name.x    <- c(name.x, (max.x / 2))
1549424111254:name.y    <- c(name.y, (maxDepth * 0.25))
1549424111254:info.x    <- c(info.x, max.x * 0.02)
1549424111254:info.y    <- c(info.y, maxDepth * 1.5)
1549424111255:covs      <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549424111255:avgDepths <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549424111256:}
1549424117802:alleles     <- as.character(unique(data.to.plot$Allele))
1549424117804:loci        <- as.character(unique(data.to.plot$Locus))
1549424117805:# alleleType  <- c()
1549424117806:lociLabels  <- c()
1549424117807:name.x      <- c()
1549424117808:name.y      <- c()
1549424117808:info.x      <- c()
1549424117809:info.y      <- c()
1549424117810:covs        <- c()
1549424117811:avgDepths   <- c()
1549424117812:meanDepth.x <- c()
1549424117812:meanDepth.y <- c()
1549424117813:# for (i in loci) {
1549424117814:#   lociLabels <- c(lociLabels, rep(i, nAlleles))
1549424117814:# }
1549424117815:for (allele in alleles) {
1549424117815:locus     <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]) %>% pull())
1549424117815:maxPos    <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549424117816:maxDepth  <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549424117816:name.x    <- c(name.x, (max.x / 2))
1549424117816:name.y    <- c(name.y, (maxDepth * 0.25))
1549424117817:info.x    <- c(info.x, max.x * 0.02)
1549424117817:info.y    <- c(info.y, maxDepth * 1.5)
1549424117817:covs      <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549424117818:avgDepths <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549424117818:}
1549424120244:labelsData <- data.frame(Allele = alleles,
1549424120244:name.x = name.x,
1549424120245:name.y = name.y,
1549424120245:info.x = info.x,
1549424120245:info.y = info.y,
1549424120246:meanDepth = avgDepths,
1549424120246:# N = rep(unique(data.to.plot$N), nLoci),
1549424120247:# Locus = lociLabels,
1549424120247:cov = covs
1549424120247:) %>%
1549424120247:left_join(data.to.plot %>%
1549424120248:group_by(Locus, Allele, AlleleType, NumAllele, Length, NormKmerCount, Score) %>%
1549424120248:summarise(sd = sd(kmerDepth)),
1549424120248:by = c("Allele" = "Allele"))
1549424135206:alleles     <- as.character(unique(data.to.plot$Allele))
1549424135208:loci        <- as.character(unique(data.to.plot$Locus))
1549424135209:# alleleType  <- c()
1549424135209:lociLabels  <- c()
1549424135210:name.x      <- c()
1549424135211:name.y      <- c()
1549424135212:info.x      <- c()
1549424135212:info.y      <- c()
1549424135213:covs        <- c()
1549424135214:avgDepths   <- c()
1549424135214:meanDepth.x <- c()
1549424135215:meanDepth.y <- c()
1549424135216:# for (i in loci) {
1549424135216:#   lociLabels <- c(lociLabels, rep(i, nAlleles))
1549424135216:# }
1549424135216:for (allele in alleles) {
1549424135217:locus     <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]) %>% pull())
1549424135217:maxPos    <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549424135217:maxDepth  <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549424135218:name.x    <- c(name.x, (max.x / 2))
1549424135218:name.y    <- c(name.y, (maxDepth * 0.25))
1549424135218:info.x    <- c(info.x, max.x * 0.02)
1549424135219:info.y    <- c(info.y, maxDepth * 1.5)
1549424135219:covs      <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549424135219:avgDepths <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549424135220:}
1549424135280:labelsData <- data.frame(Allele = alleles,
1549424135280:name.x = name.x,
1549424135281:name.y = name.y,
1549424135281:info.x = info.x,
1549424135281:info.y = info.y,
1549424135281:meanDepth = avgDepths,
1549424135282:# N = rep(unique(data.to.plot$N), nLoci),
1549424135282:# Locus = lociLabels,
1549424135282:cov = covs
1549424135283:) %>%
1549424135283:left_join(data.to.plot %>%
1549424135283:group_by(Locus, Allele, AlleleType, NumAllele, Length, NormKmerCount) %>%
1549424135284:summarise(sd = sd(kmerDepth)),
1549424135284:by = c("Allele" = "Allele"))
1549424151664:data.to.plot
1549424240805:nLoci    <- length(unique(data.to.plot$Locus))
1549424240806:nAlleles <- length(unique(data.to.plot$Allele))
1549424240808:alleles     <- as.character(unique(data.to.plot$Allele))
1549424240810:loci        <- as.character(unique(data.to.plot$Locus))
1549424240812:# alleleType  <- c()
1549424240812:lociLabels  <- c()
1549424240813:name.x      <- c()
1549424240814:name.y      <- c()
1549424240815:info.x      <- c()
1549424240815:info.y      <- c()
1549424240816:covs        <- c()
1549424240816:avgDepths   <- c()
1549424240817:meanDepth.x <- c()
1549424240817:meanDepth.y <- c()
1549424240817:# for (i in loci) {
1549424240818:#   lociLabels <- c(lociLabels, rep(i, nAlleles))
1549424240818:# }
1549424240818:for (allele in alleles) {
1549424240819:locus     <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]) %>% pull())
1549424240819:maxPos    <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549424240819:maxDepth  <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549424240819:name.x    <- c(name.x, (max.x / 2))
1549424240820:name.y    <- c(name.y, (maxDepth * 0.25))
1549424240820:info.x    <- c(info.x, max.x * 0.02)
1549424240820:info.y    <- c(info.y, maxDepth * 1.5)
1549424240821:covs      <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549424240821:avgDepths <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549424240822:}
1549424240894:labelsData <- data.frame(Locus = loci,
1549424240894:Allele = alleles,
1549424240894:name.x = name.x,
1549424240895:name.y = name.y,
1549424240895:info.x = info.x,
1549424240896:info.y = info.y,
1549424240896:meanDepth = avgDepths,
1549424240896:# N = rep(unique(data.to.plot$N), nLoci),
1549424240897:# Locus = lociLabels,
1549424240897:cov = covs
1549424240897:) %>%
1549424240898:left_join(data.to.plot %>%
1549424240898:group_by(Locus, Allele, AlleleType, NumAllele, Length, NormKmerCount) %>%
1549424240898:summarise(sd = sd(kmerDepth)),
1549424240899:by = c("Locus", "Allele"))
1549424240906:labelsData
1549424314195:lociLabels  <- c()
1549424314197:name.x      <- c()
1549424314198:name.y      <- c()
1549424314199:info.x      <- c()
1549424314199:info.y      <- c()
1549424314200:covs        <- c()
1549424314201:avgDepths   <- c()
1549424314202:meanDepth.x <- c()
1549424314202:meanDepth.y <- c()
1549424314203:# for (i in loci) {
1549424314203:#   lociLabels <- c(lociLabels, rep(i, nAlleles))
1549424314204:# }
1549424314204:for (allele in alleles) {
1549424314204:locus     <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]) %>% pull())
1549424314205:maxPos    <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549424314205:maxDepth  <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549424314205:name.x    <- c(name.x, (max.x / 2))
1549424314206:name.y    <- c(name.y, (maxDepth * 0.25))
1549424314206:info.x    <- c(info.x, max.x * 0.02)
1549424314206:info.y    <- c(info.y, maxDepth * 1.5)
1549424314207:covs      <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549424314207:avgDepths <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549424314208:}
1549424324652:name.x
1549424329797:data.to.plot
1549424390291:data.to.plot %>%
1549424390292:group_by(Locus, Allele, AlleleType, NumAllele, Length, NormKmerCount) %>%
1549424390292:summarise(sd = sd(kmerDepth)
1549424393281:)
1549424426263:labelsData
1549424435989:data.frame(Locus = loci,
1549424435990:Allele = alleles,
1549424435990:name.x = name.x,
1549424435990:name.y = name.y,
1549424435991:info.x = info.x,
1549424435991:info.y = info.y,
1549424435991:meanDepth = avgDepths,
1549424435992:# N = rep(unique(data.to.plot$N), nLoci),
1549424435992:# Locus = lociLabels,
1549424435992:cov = covs
1549424435992:)
1549424440127:labelsData <- data.frame(Locus = loci,
1549424440127:Allele = alleles,
1549424440128:name.x = name.x,
1549424440128:name.y = name.y,
1549424440128:info.x = info.x,
1549424440129:info.y = info.y,
1549424440129:meanDepth = avgDepths,
1549424440129:# N = rep(unique(data.to.plot$N), nLoci),
1549424440130:# Locus = lociLabels,
1549424440130:cov = covs
1549424440130:)
1549424442567:labelsData
1549424470158:data.to.plot %>%
1549424470158:group_by(Locus, Allele, NumAllele, Length, NormKmerCount) %>%
1549424470159:summarise(sd = sd(kmerDepth))
1549424475627:labelsData
1549424485541:data.to.plot %>%
1549424485541:group_by(Locus, Allele, NumAllele, Length, NormKmerCount) %>%
1549424485542:summarise(sd = sd(kmerDepth))
1549424550087:alleles     <- as.character(unique(data.to.plot$Allele))
1549424550089:loci        <- as.character(unique(data.to.plot$Locus))
1549424550090:# alleleType  <- c()
1549424550090:lociLabels  <- c()
1549424550092:name.x      <- c()
1549424550093:name.y      <- c()
1549424550093:info.x      <- c()
1549424550094:info.y      <- c()
1549424550094:covs        <- c()
1549424550095:avgDepths   <- c()
1549424550095:meanDepth.x <- c()
1549424550096:meanDepth.y <- c()
1549424550096:# for (i in loci) {
1549424550097:#   lociLabels <- c(lociLabels, rep(i, nAlleles))
1549424550097:# }
1549424550098:for (allele in alleles) {
1549424550098:locus     <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]) %>% pull())
1549424550098:maxPos    <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549424550099:maxDepth  <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549424550099:name.x    <- c(name.x, (max.x / 2))
1549424550099:name.y    <- c(name.y, (maxDepth * 0.25))
1549424550101:info.x    <- c(info.x, max.x * 0.02)
1549424550101:info.y    <- c(info.y, maxDepth * 1.5)
1549424550101:covs      <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549424550102:avgDepths <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549424550102:}
1549424550156:labelsData <- data.frame(Locus = loci,
1549424550156:Allele = alleles,
1549424550157:name.x = name.x,
1549424550157:name.y = name.y,
1549424550157:info.x = info.x,
1549424550158:info.y = info.y,
1549424550158:meanDepth = avgDepths,
1549424550158:# N = rep(unique(data.to.plot$N), nLoci),
1549424550158:# Locus = lociLabels,
1549424550159:cov = covs
1549424550159:) %>%
1549424550159:left_join(data.to.plot %>%
1549424550160:group_by(Locus, Allele, NumAllele, Length, NormKmerCount) %>%
1549424550160:summarise(sd = sd(kmerDepth)),
1549424550160:by = c("Locus", "Allele"))
1549424627861:alleles     <- as.character(unique(data.to.plot$Allele))
1549424628223:loci        <- as.character(unique(data.to.plot$Locus))
1549424628434:# alleleType  <- c()
1549424628435:lociLabels  <- c()
1549424628633:name.x      <- c()
1549424628803:name.y      <- c()
1549424628982:info.x      <- c()
1549424629143:info.y      <- c()
1549424629327:covs        <- c()
1549424629491:avgDepths   <- c()
1549424629674:meanDepth.x <- c()
1549424629852:meanDepth.y <- c()
1549424630073:# for (i in loci) {
1549424630073:#   lociLabels <- c(lociLabels, rep(i, nAlleles))
1549424630074:# }
1549424630074:for (allele in alleles) {
1549424630075:locus     <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]) %>% pull())
1549424630075:maxPos    <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549424630076:maxDepth  <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549424630077:name.x    <- c(name.x, (max.x / 2))
1549424630077:name.y    <- c(name.y, (maxDepth * 0.25))
1549424630078:info.x    <- c(info.x, max.x * 0.02)
1549424630079:info.y    <- c(info.y, maxDepth * 1.5)
1549424630080:covs      <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549424630081:avgDepths <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549424630082:}
1549424630374:labelsData <- data.frame(Locus = loci,
1549424630374:Allele = alleles,
1549424630375:name.x = name.x,
1549424630376:name.y = name.y,
1549424630376:info.x = info.x,
1549424630377:info.y = info.y,
1549424630377:meanDepth = avgDepths,
1549424630378:# N = rep(unique(data.to.plot$N), nLoci),
1549424630378:# Locus = lociLabels,
1549424630379:cov = covs
1549424630379:) %>%
1549424630380:left_join(data.to.plot %>%
1549424630380:as.character(data.to.plot		)
1549424630381:mutate(Locus = as.character(Locus))
1549424630381:group_by(Locus, Allele, NumAllele, Length, NormKmerCount) %>%
1549424630382:summarise(sd = sd(kmerDepth)),
1549424630382:by = c("Locus", "Allele"))
1549424657032:labelsData <- data.frame(Locus = loci,
1549424657033:Allele = alleles,
1549424657033:name.x = name.x,
1549424657034:name.y = name.y,
1549424657035:info.x = info.x,
1549424657035:info.y = info.y,
1549424657036:meanDepth = avgDepths,
1549424657036:# N = rep(unique(data.to.plot$N), nLoci),
1549424657037:# Locus = lociLabels,
1549424657037:cov = covs
1549424657037:) %>%
1549424657038:left_join(data.to.plot %>%
1549424657038:as.character(data.to.plot$Locus)
1549424657039:mutate(Locus = as.character(Locus))
1549424657039:group_by(Locus, Allele, NumAllele, Length, NormKmerCount) %>%
1549424657040:summarise(sd = sd(kmerDepth)),
1549424657040:by = c("Locus", "Allele"))
1549424665061:labelsData <- data.frame(Locus = loci,
1549424665062:Allele = alleles,
1549424665062:name.x = name.x,
1549424665063:name.y = name.y,
1549424665063:info.x = info.x,
1549424665063:info.y = info.y,
1549424665064:meanDepth = avgDepths,
1549424665064:# N = rep(unique(data.to.plot$N), nLoci),
1549424665064:# Locus = lociLabels,
1549424665065:cov = covs
1549424665065:) %>%
1549424665065:left_join(data.to.plot %>%
1549424665066:as.character(data.to.plot$Locus)
1549424665067:mutate(Locus = as.character(Locus))
1549424665067:group_by(Locus, Allele, NumAllele, Length, NormKmerCount) %>%
1549424665068:summarise(sd = sd(kmerDepth)),
1549424665068:by = c("Locus", "Allele"))
1549424690037:#!/usr/bin/env Rscript
1549424690038:# ##############################################################################
1549424690038:#  Author:   Hector Fabio Espitia-Navarro
1549424690039:#            Georgia Institute of Technology
1549424690039:#  Version:  1.0
1549424690040:#  Date:     01/19/2019
1549424690040:# ##############################################################################
1549424690041:# Install required packages -----------------------------------------------
1549424690042:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549424690043:if(!file.exists(personal.lib.path))
1549424690044:dir.create(personal.lib.path)
1549424690044:printMessage <- function(message, verbose){
1549424690045:if(verbose)
1549424690045:cat(message)
1549424690045:}
1549424690046:# crayon::bold("Hola")
1549424690046:installAndLoadPackages <- function(pkg, verbose){
1549424690047:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1549424690047:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1549424690047:printMessage("Done!\n", verbose)
1549424690048:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549424690048:if (length(new.pkg)) {
1549424690049:printMessage("Installing new packages... ", verbose)
1549424690049:install.packages(new.pkg, dependencies = TRUE,
1549424690050:repos="http://cran.rstudio.com/",
1549424690050:lib = personal.lib.path)
1549424690050:printMessage("Done!\n", verbose)
1549424690051:}
1549424690051:printMessage("Loading required packages... ", verbose)
1549424690051:sapply(pkg, function(x){
1549424690052:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549424690052:})
1549424690052:printMessage("Done!\n", verbose)
1549424690053:}
1549424690053:# github.related.packages <- c("devtools", "Rcpp")
1549424690054:# packages <- c("argparser", "tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite")
1549424690054:packages <- c("tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite", "gridExtra")
1549424690055:# installAndLoadPackages(packages, verbose = TRUE)
1549424690055:installAndLoadPackages("argparser", verbose = FALSE)
1549424690125:# Command line arguments processing ---------------------------------------
1549424690125:# Get script name
1549424690126:initial.options <- commandArgs(trailingOnly = FALSE)
1549424690126:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1549424690127:# Process command line arguments
1549424690127:# Create a parser
1549424690127:p <- arg_parser("This script generates k-mer depth plots using a depth file generated by the\033[1mSTing typer\033[22m tool (-t option).",
1549424690128:name = script.name)
1549424690186:# Add Positional arguments (required)
1549424690187:p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
1549424690188:# Add options
1549424690188:p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1549424690190:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1549424690191:default = "kmer_depth")
1549424690192:p <- add_argument(p, "--sample_name", help = "Sample name.",
1549424690192:default = "input file's name")
1549424690193:p <- add_argument(p, "--max_loci_per_page", help = "Maximum number of loci to print on each page.",
1549424690193:default = 7)
1549424690194:p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'",
1549424690194:default = "pdf")
1549424690195:# Initialization of variables ---------------------------------------------
1549424690195:# Values to test the script using RStudio
1549424690196:script.home       <- "/home/hspitia/Dropbox/gatech/projects/STing/manuscript/data/typer/v0.24/detector_on_failed"
1549424690196:# inputFile         <- paste(script.home, "ERR036060.depth.2.tsv", sep = "/")
1549424690196:# geneFile          <- paste(script.home, "rmlst_failed_loci.txt", sep = "/")
1549424690197:inputFile         <- paste(script.home, "detector.v024.nm20.cgmlst.failed_alleles.depth.for_plotting.tsv.gz", sep = "/")
1549424690197:geneFile          <- paste(script.home, "loci.txt", sep = "/")
1549424690198:out.prefix        <- "kmer_depth"
1549424690198:sample.name       <- basename(inputFile)
1549424690199:max.loci.per.page <- 7
1549424690199:out.format        <- "pdf"
1549424690200:# Parse command line arguments
1549424690200:command.line = F  # Turn to FALSE to test the script inside RStudio
1549424690200:argv <- list()
1549424690201:if(command.line) {
1549424690201:argv <- parse_args(p)
1549424690201:} else {
1549424690202:argv <- parse_args(p, list(inputFile,
1549424690202:"--gene_file", geneFile,
1549424690202:"--prefix", out.prefix,
1549424690203:"--sample_name", sample.name,
1549424690203:"--max_loci_per_page", max.loci.per.page,
1549424690203:"--format", out.format))
1549424690204:}
1549424690210:# Get argument values from the command line
1549424690211:input.file        <- argv$input_file
1549424690212:gene.file         <- argv$gene_file
1549424690212:out.format        <- argv$format
1549424690213:out.prefix        <- argv$prefix
1549424690213:max.loci.per.page <- argv$max_loci_per_page
1549424690214:sample.name       <- argv$sample_name
1549424690214:# if (sample.name == "")
1549424690214:if (sample.name == "input file's name")
1549424690215:sample.name <- basename(input.file)
1549424690215:# Function to check if file exists ----------------------------------------
1549424690216:CheckFileExists <- function(file.list) {
1549424690216:non.exist.files <- !file.exists(file.list)
1549424690216:if(any(non.exist.files)) {
1549424690216:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549424690217:}
1549424690217:}
1549424690217:# Check for input files ---------------------------------------------------
1549424690218:files.to.check <- c(input.file)
1549424690218:error.message  <- CheckFileExists(files.to.check)
1549424692204:#!/usr/bin/env Rscript
1549424692204:# ##############################################################################
1549424692205:#  Author:   Hector Fabio Espitia-Navarro
1549424692205:#            Georgia Institute of Technology
1549424692205:#  Version:  1.0
1549424692206:#  Date:     01/19/2019
1549424692206:# ##############################################################################
1549424692207:# Install required packages -----------------------------------------------
1549424692207:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549424692207:if(!file.exists(personal.lib.path))
1549424692208:dir.create(personal.lib.path)
1549424692209:printMessage <- function(message, verbose){
1549424692209:if(verbose)
1549424692209:cat(message)
1549424692210:}
1549424692211:# crayon::bold("Hola")
1549424692211:installAndLoadPackages <- function(pkg, verbose){
1549424692212:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1549424692212:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1549424692212:printMessage("Done!\n", verbose)
1549424692213:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549424692213:if (length(new.pkg)) {
1549424692214:printMessage("Installing new packages... ", verbose)
1549424692214:install.packages(new.pkg, dependencies = TRUE,
1549424692215:repos="http://cran.rstudio.com/",
1549424692215:lib = personal.lib.path)
1549424692215:printMessage("Done!\n", verbose)
1549424692216:}
1549424692216:printMessage("Loading required packages... ", verbose)
1549424692217:sapply(pkg, function(x){
1549424692217:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549424692218:})
1549424692218:printMessage("Done!\n", verbose)
1549424692219:}
1549424692220:# github.related.packages <- c("devtools", "Rcpp")
1549424692220:# packages <- c("argparser", "tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite")
1549424692221:packages <- c("tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite", "gridExtra")
1549424692221:# installAndLoadPackages(packages, verbose = TRUE)
1549424692221:installAndLoadPackages("argparser", verbose = FALSE)
1549424692240:# Command line arguments processing ---------------------------------------
1549424692240:# Get script name
1549424692241:initial.options <- commandArgs(trailingOnly = FALSE)
1549424692241:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1549424692242:# Process command line arguments
1549424692242:# Create a parser
1549424692242:p <- arg_parser("This script generates k-mer depth plots using a depth file generated by the\033[1mSTing typer\033[22m tool (-t option).",
1549424692243:name = script.name)
1549424692252:# Add Positional arguments (required)
1549424692252:p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
1549424692253:# Add options
1549424692253:p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1549424692254:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1549424692254:default = "kmer_depth")
1549424692255:p <- add_argument(p, "--sample_name", help = "Sample name.",
1549424692255:default = "input file's name")
1549424692256:p <- add_argument(p, "--max_loci_per_page", help = "Maximum number of loci to print on each page.",
1549424692256:default = 7)
1549424692257:p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'",
1549424692257:default = "pdf")
1549424692258:# Initialization of variables ---------------------------------------------
1549424692259:# Values to test the script using RStudio
1549424692259:script.home       <- "/home/hspitia/Dropbox/gatech/projects/STing/manuscript/data/typer/v0.24/detector_on_failed"
1549424692259:# inputFile         <- paste(script.home, "ERR036060.depth.2.tsv", sep = "/")
1549424692260:# geneFile          <- paste(script.home, "rmlst_failed_loci.txt", sep = "/")
1549424692260:inputFile         <- paste(script.home, "detector.v024.nm20.cgmlst.failed_alleles.depth.for_plotting.tsv.gz", sep = "/")
1549424692260:geneFile          <- paste(script.home, "loci.txt", sep = "/")
1549424692261:out.prefix        <- "kmer_depth"
1549424692261:sample.name       <- basename(inputFile)
1549424692262:max.loci.per.page <- 7
1549424692262:out.format        <- "pdf"
1549424692262:# Parse command line arguments
1549424692263:command.line = F  # Turn to FALSE to test the script inside RStudio
1549424692263:argv <- list()
1549424692264:if(command.line) {
1549424692264:argv <- parse_args(p)
1549424692264:} else {
1549424692264:argv <- parse_args(p, list(inputFile,
1549424692265:"--gene_file", geneFile,
1549424692265:"--prefix", out.prefix,
1549424692265:"--sample_name", sample.name,
1549424692266:"--max_loci_per_page", max.loci.per.page,
1549424692266:"--format", out.format))
1549424692266:}
1549424692381:# Get argument values from the command line
1549424692381:input.file        <- argv$input_file
1549424692382:gene.file         <- argv$gene_file
1549424692383:out.format        <- argv$format
1549424692383:out.prefix        <- argv$prefix
1549424692384:max.loci.per.page <- argv$max_loci_per_page
1549424692385:sample.name       <- argv$sample_name
1549424692386:# if (sample.name == "")
1549424692386:if (sample.name == "input file's name")
1549424692386:sample.name <- basename(input.file)
1549424692388:# Function to check if file exists ----------------------------------------
1549424692388:CheckFileExists <- function(file.list) {
1549424692388:non.exist.files <- !file.exists(file.list)
1549424692389:if(any(non.exist.files)) {
1549424692389:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549424692390:}
1549424692390:}
1549424692391:# Check for input files ---------------------------------------------------
1549424692391:files.to.check <- c(input.file)
1549424692392:error.message  <- CheckFileExists(files.to.check)
1549424696815:# Code core - Begin -------------------------------------------------------
1549424696815:installAndLoadPackages(packages, verbose = TRUE)
1549424698128:# FUNCTIONS:
1549424698128:# Function to dark a list of colors ---------------------------------------
1549424698129:darkColors <- function(palette, level){
1549424698129:rgbColors <- as.data.frame(t(as.data.frame(lapply(as.data.frame(t(col2rgb(palette))),
1549424698129:function(x) { round(x * level)}))))
1549424698130:unname(sapply(rgbColors, function(x){ rgb(x[1], x[2], x[3], maxColorValue=255) }))
1549424698130:}
1549424700806:# Function for plotting k-mer depth ----------------------------------------
1549424700807:plotDepth <- function(dataToPlot, labelsData, fillColors, borderColors) {
1549424700808:max.x       <- max(dataToPlot$Position)
1549424700808:max.y       <- max(dataToPlot$kmerDepth)
1549424700809:x.limits    <- seq(0, max.x, 100)
1549424700809:y.limits    <- seq(0, max.y, 20)
1549424700810:nTopAlleles <- length(unique(dataToPlot$N))
1549424700811:d.plot <- ggplot(data = dataToPlot, aes(x = Position, y = kmerDepth),
1549424700811:size = 0.2) +
1549424700812:geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1549424700812:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1549424700813:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1549424700814:scale_color_manual(values = borderColors) +
1549424700814:scale_fill_manual(values = fillColors) +
1549424700815:geom_text(data = labelsData,
1549424700816:# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1549424700816:# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1549424700817:aes(x = Length, y = info.y * 0.5, group = Locus,
1549424700818:hjust = 0,
1549424700818:label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1549424700819:show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1549424700820:nudge_x = -(max.x*0.025)
1549424700820:) +
1549424700821:geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1549424700822:alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1549424700823:# geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1549424700824:size = annotTextSize * 1.05, color = "#333333") +
1549424700824:geom_text(data = labelsData,
1549424700825:parse = TRUE,
1549424700826:aes(x = info.x, y = info.y,
1549424700826:label = paste0("{{{italic(hat(f)[k]) ==", format(round(NormKmerCount, 2), nsmall = 2),
1549424700827:"*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1549424700827:"*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1549424700828:"~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1549424700828:hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1549424700829:# facet_grid(Locus ~ N, scales = "free_y") +
1549424700829:facet_grid(rows = vars(Locus), cols = vars(AlleleType, NumAllele), scales = "free") +
1549424700830:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1549424700830:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1549424700831:theme_bw() +
1549424700831:plotTheme +
1549424700832:labs(title    = expression(italic("k")*"-mer Depth Distribution"),
1549424700832:subtitle = paste("Top", nTopAlleles, "alleles/genes on sample", sample.name),
1549424700833:x        = "Position along sequence (bp)",
1549424700834:y        = expression(paste(italic(k), "-mer depth")),
1549424700835:# caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1549424700837:caption  = expression(paste(#italic("s"),": score;  ",
1549424700839:italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1549424700841:italic("c"),": coverage;  ",
1549424700842:italic(sigma), ": standard deviation;  ",
1549424700844:italic(bar(d)), ": average depth"), sep = "")
1549424700844:)
1549424700845:d.plot
1549424700846:}
1549424713054:options(stringsAsFactors = T, readr.num_columns = 0)
1549424713412:# Load data
1549424713412:inData <- read_tsv(input.file)
1549424723957:colnames(inData) <- c("Sample", "Locus", "Allele", "Position", "kmerDepth",
1549424723957:"NormKmerCount", "Coverage", "AverageKmerDepth",
1549424723958:"AlleleType", "NumAllele", "WeightedKmerDepth", "AlleleNumber",
1549424723958:"RunMode", "kmerCounts", "Length")
1549424723959:# Transform data
1549424723960:data.to.plot <- inData %>%
1549424723960:mutate(
1549424723960:Sample = factor(Sample, levels = unique(inData$Sample)),
1549424723961:Locus = factor(Locus, levels = unique(inData$Locus)),
1549424723961:AlleleType = factor(AlleleType, levels = unique(inData$AlleleType)),
1549424723961:NumAllele = factor(NumAllele, levels = unique(inData$NumAllele)),
1549424723961:RunMode = factor(RunMode, levels = unique(inData$RunMode)),
1549424723962:Allele = factor(Allele, levels = unique(inData$Allele))
1549424723962:)
1549424726143:tmp <- inData %>%
1549424726144:group_by(Sample, Locus, Allele, AlleleType, NumAllele) %>%
1549424726161:summarise(Length = n())
1549424728296:# # Filtering loci/genes from genes_file input param
1549424728297:# if (length(loci.to.plot) > 0) {
1549424728297:#   data.to.plot <- data.to.plot %>%
1549424728297:#     filter(Locus %in% loci.to.plot)
1549424728298:# }
1549424728298:longestLocusNameLength <- max(str_length(as.character(unique(inData$Locus))))
1549424728733:nSamples <- length(unique(data.to.plot$Sample))
1549424729159:# Theme-related variable definition ---------------------------------------
1549424729159:annotLinetype     <- "solid"
1549424729630:annotTextSize     <- 4
1549424729842:axisColor         <- "#000000"
1549424730007:axisTextSize      <- 12
1549424730173:barAnnotTextSize  <- 4
1549424730344:baseTextSize      <- 14
1549424730525:gridColor         <- "#e0e0e0"
1549424731026:lineSize          <- 0.3
1549424731624:# panelColor        <- "#ffffff"
1549424731624:# panelColor        <- "#fff4e0"
1549424731625:panelColor        <- "#f2efe6"
1549424731845:# stripBackground   <- "#cccccc"
1549424731845:stripTextSize     <- axisTextSize
1549424732088:if (longestLocusNameLength > 12)
1549424732924:stripTextSize  <- stripTextSize * 0.6
1549424733388:textColor  <- "#000000"
1549424733890:# Custom theme definition for plots ---------------------------------------
1549424733891:plotTheme <- list(
1549424733891:theme(
1549424733892:axis.text.x      = element_text(angle = 50, size = axisTextSize,
1549424733892:vjust = 1, hjust = 1, color = textColor),
1549424733892:axis.text.y      = element_text(size = axisTextSize, color = textColor),
1549424733893:axis.ticks       = element_line(size = lineSize),
1549424733893:axis.title.x     = element_text(margin = margin(6,0,8,0, "mm")),
1549424733893:axis.title.y     = element_text(margin = margin(0,6,0,0, "mm")),
1549424733894:legend.position  = "none",
1549424733894:panel.border     = element_rect(size = lineSize),
1549424733894:panel.background = element_rect(fill = panelColor),
1549424733895:panel.grid       = element_line(size = lineSize, colour = gridColor),
1549424733895:panel.grid.minor = element_blank(),
1549424733896:plot.margin      = margin(10,10,0,10, "mm"),
1549424733896:panel.spacing    = unit(4, "mm"),
1549424733896:plot.caption     = element_text(size = baseTextSize * 0.7, face = "italic"),
1549424733897:plot.title       = element_text(hjust = 0.5),
1549424733897:plot.subtitle    = element_text(hjust = 0.5),
1549424733898:strip.background = element_rect(size = lineSize),
1549424733898:strip.text       = element_text(size = stripTextSize),
1549424733898:text             = element_text(size = baseTextSize)
1549424733899:)
1549424733899:)
1549424735981:samples <- levels(data.to.plot$Sample)
1549424742414:View(data.to.plot)
1549424753280:for (sam in samples[1]) {
1549424753281:}
1549424756396:print(sam)
1549424758449:for (sam in samples[1]) {
1549424758450:print(sam)
1549424758450:subset   <- data.to.plot %>% filter(Sample == sam)
1549424758451:# print(str_glue("sample {sam}: nLoci = {length(loci)}  nAlleles = {length(alleles)}"))
1549424758453:subToPlot <- subset %>% filter(Locus %in% loci[c(1:8,37)])
1549424758454:loci     <- as.character(unique(subsetToPlot$Locus))
1549424758454:alleles  <- as.character(unique(subsetToPlot$Allele))
1549424758455:nLoci    <- length(loci)
1549424758456:nAlleles <- length(alleles)
1549424758456:# which(loci %in% c("NEIS1689"))
1549424758457:max.x    <- max(subToPlot$Position)
1549424758457:max.y    <- max(subToPlot$kmerDepth)
1549424758458:x.limits <- seq(0, max.x, 100)
1549424758458:y.limits <- seq(0, max.y, 20)
1549424758460:rowsPerPage   <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549424758461:colourCount   <- rowsPerPage
1549424758461:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549424758462:borderPalette <- darkColors(fillPalette, 0.6)
1549424758463:# Depth plot -------------------------------------------------------------
1549424758464:# lociPerPage    <- 3
1549424758464:wFactor        <- 4.8
1549424758465:plotTitlesSize <- 2.39
1549424758466:getPlotHeight <- function(rows, extras){
1549424758466:hFactor <- ifelse(rows == 1, 1.88, 1.6)
1549424758467:# loci + titles and foot note + strip + space between locus
1549424758468:(rows*hFactor) + extras + ((rows-1)*0.157) #in
1549424758468:}
1549424758469:# rowsPerPage <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549424758470:height      <- getPlotHeight(rowsPerPage, plotTitlesSize)
1549424758471:width       <- nAlleles * wFactor
1549424758471:loci        <- unique(data.to.plot$Locus)
1549424758472:sets        <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549424758473:plots <- lapply(sets, function(set, dp=subToPlot, rp=rowsPerPage){
1549424758474:set=sets[[1]]; dp=subToPlot; rp=rowsPerPage
1549424758476:nLoci        <- length(set)
1549424758477:subsetToPlot <- dp %>% filter(Locus %in% set)
1549424758477:# subPalette   <-
1549424758478:ld           <- getLabelsData(subsetToPlot)
1549424758479:p            <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette)
1549424758480:if(nLoci < rp){
1549424758480:hlay    <- matrix(c(1, NA))
1549424758481:total   <- getPlotHeight(rp, plotTitlesSize)
1549424758482:cHeight <- getPlotHeight(nLoci, plotTitlesSize)
1549424758483:blank   <- getPlotHeight(rp-nLoci, 0)
1549424758484:heights <- matrix(c(cHeight/total, blank/total))
1549424758485:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549424758485:}
1549424758486:p
1549424758487:})
1549424758488:if (out.format == "pdf") {
1549424758489:out.filename <- paste(out.prefix, out.format, sep = ".")
1549424758490:ml <- marrangeGrob(plots, nrow=1, ncol=1, padding = unit(10, "mm"),
1549424758491:top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549424758492:ggsave(filename = out.filename, plot = ml,
1549424758493:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549424758494:}
1549424758494:else {
1549424758495:for (i in seq_along(plots)) {
1549424758496:out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549424758497:ggsave(filename = out.filename, plot = plots[[i]],
1549424758498:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549424758499:}
1549424758500:}
1549424758501:}
1549424765822:print(sam)
1549424766351:subset   <- data.to.plot %>% filter(Sample == sam)
1549424767108:subToPlot <- subset %>% filter(Locus %in% loci[c(1:8,37)])
1549424905786:loci    <- levels(data.to.plot$Locus)
1549424909390:subToPlot <- subset %>% filter(Locus %in% loci[c(1:8,37)])
1549424910955:subToPlot
1549424981895:subToPlot <- subset %>% filter(Locus %in% loci[c(1:8,37)])
1549424982809:loci     <- as.character(unique(subToPlot$Locus))
1549424984030:alleles  <- as.character(unique(subToPlot$Allele))
1549424984574:nLoci    <- length(loci)
1549424985175:nAlleles <- length(alleles)
1549424986918:nLoci
1549424988860:nAlleles
1549424990997:# which(loci %in% c("NEIS1689"))
1549424990997:max.x    <- max(subToPlot$Position)
1549424991296:max.y    <- max(subToPlot$kmerDepth)
1549424991728:x.limits <- seq(0, max.x, 100)
1549424992043:y.limits <- seq(0, max.y, 20)
1549424992880:rowsPerPage   <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549424993349:colourCount   <- rowsPerPage
1549424993818:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549424994282:borderPalette <- darkColors(fillPalette, 0.6)
1549424996708:# Depth plot -------------------------------------------------------------
1549424996709:# lociPerPage    <- 3
1549424996709:wFactor        <- 4.8
1549424996873:plotTitlesSize <- 2.39
1549424997065:getPlotHeight <- function(rows, extras){
1549424997066:hFactor <- ifelse(rows == 1, 1.88, 1.6)
1549424997066:# loci + titles and foot note + strip + space between locus
1549424997067:(rows*hFactor) + extras + ((rows-1)*0.157) #in
1549424997068:}
1549424998089:# rowsPerPage <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549424998089:height      <- getPlotHeight(rowsPerPage, plotTitlesSize)
1549424998288:width       <- nAlleles * wFactor
1549424998509:loci        <- unique(data.to.plot$Locus)
1549424998831:sets        <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549425002440:set=sets[[1]]; dp=subToPlot; rp=rowsPerPage
1549425004801:nLoci        <- length(set)
1549425007642:subsetToPlot <- dp %>% filter(Locus %in% set)
1549425029157:data.to.plot=subToPlot
1549425031002:data.to.plot
1549425033544:max.x <- max(data.to.plot$Position)
1549425033998:max.y <- max(data.to.plot$kmerDepth)
1549425034485:nLoci    <- length(unique(data.to.plot$Locus))
1549425034864:nAlleles <- length(unique(data.to.plot$Allele))
1549425035297:alleles     <- as.character(unique(data.to.plot$Allele))
1549425035644:loci        <- as.character(unique(data.to.plot$Locus))
1549425036386:# alleleType  <- c()
1549425036386:lociLabels  <- c()
1549425036863:name.x      <- c()
1549425037087:name.y      <- c()
1549425037319:info.x      <- c()
1549425037495:info.y      <- c()
1549425037717:covs        <- c()
1549425037900:avgDepths   <- c()
1549425038281:meanDepth.x <- c()
1549425038718:meanDepth.y <- c()
1549425042415:# for (i in loci) {
1549425042416:#   lociLabels <- c(lociLabels, rep(i, nAlleles))
1549425042416:# }
1549425042417:for (allele in alleles) {
1549425042417:locus     <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]) %>% pull())
1549425042418:maxPos    <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549425042418:maxDepth  <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549425042419:name.x    <- c(name.x, (max.x / 2))
1549425042419:name.y    <- c(name.y, (maxDepth * 0.25))
1549425042420:info.x    <- c(info.x, max.x * 0.02)
1549425042421:info.y    <- c(info.y, maxDepth * 1.5)
1549425042421:covs      <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549425042422:avgDepths <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549425042422:}
1549425048802:as.character(data.to.plot$Locus)
1549425090318:data.to.plot %>%
1549425090319:mutate(Locus = as.character(Locus),
1549425090319:Allele = as.character(Allele)) %>%
1549425090319:group_by(Locus, Allele, NumAllele, Length, NormKmerCount) %>%
1549425090320:summarise(sd = sd(kmerDepth))
1549425149428:data.to.plot %>%
1549425149429:mutate(Locus = as.character(Locus),
1549425149429:Allele = as.character(Allele),
1549425149429:NumAllele = as.character(NumaAllele)) %>%
1549425149429:group_by(Locus, Allele, NumAllele, Length, NormKmerCount) %>%
1549425149430:summarise(sd = sd(kmerDepth))
1549425162268:data.to.plot %>%
1549425162269:mutate(Locus = as.character(Locus),
1549425162269:Allele = as.character(Allele),
1549425162270:NumAllele = as.character(NumAllele)) %>%
1549425162270:group_by(Locus, Allele, NumAllele, Length, NormKmerCount) %>%
1549425162271:summarise(sd = sd(kmerDepth))
1549425176629:alleles
1549425186686:max.x <- max(data.to.plot$Position)
1549425186687:max.y <- max(data.to.plot$kmerDepth)
1549425186688:nLoci    <- length(unique(data.to.plot$Locus))
1549425186690:nAlleles <- length(unique(data.to.plot$Allele))
1549425186692:alleles     <- as.character(unique(data.to.plot$Allele))
1549425186693:loci        <- as.character(unique(data.to.plot$Locus))
1549425186695:# alleleType  <- c()
1549425186695:lociLabels  <- c()
1549425186696:name.x      <- c()
1549425186697:name.y      <- c()
1549425186697:info.x      <- c()
1549425186698:info.y      <- c()
1549425186698:covs        <- c()
1549425186699:avgDepths   <- c()
1549425186700:meanDepth.x <- c()
1549425186700:meanDepth.y <- c()
1549425186701:# for (i in loci) {
1549425186701:#   lociLabels <- c(lociLabels, rep(i, nAlleles))
1549425186701:# }
1549425186702:for (allele in alleles) {
1549425186702:locus     <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]) %>% pull())
1549425186703:maxPos    <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549425186703:maxDepth  <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549425186704:name.x    <- c(name.x, (max.x / 2))
1549425186704:name.y    <- c(name.y, (maxDepth * 0.25))
1549425186705:info.x    <- c(info.x, max.x * 0.02)
1549425186706:info.y    <- c(info.y, maxDepth * 1.5)
1549425186706:covs      <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549425186707:avgDepths <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549425186707:}
1549425191422:covs
1549425198248:data.frame(Locus = loci,
1549425198249:Allele = alleles,
1549425198249:name.x = name.x,
1549425198250:name.y = name.y,
1549425198250:info.x = info.x,
1549425198251:info.y = info.y,
1549425198251:meanDepth = avgDepths,
1549425198252:# N = rep(unique(data.to.plot$N), nLoci),
1549425198252:# Locus = lociLabels,
1549425198253:cov = covs
1549425198253:)
1549425207383:loci
1549425220233:as.character(unique(data.to.plot$Locus))
1549425224237:subToPlot
1549425230517:data.to.plot=subToPlot
1549425230872:max.x <- max(data.to.plot$Position)
1549425231238:max.y <- max(data.to.plot$kmerDepth)
1549425231694:nLoci    <- length(unique(data.to.plot$Locus))
1549425233235:nAlleles <- length(unique(data.to.plot$Allele))
1549425235097:nAlleles
1549425237175:nLoci
1549425242978:alleles     <- as.character(unique(data.to.plot$Allele))
1549425244321:alleles
1549425254793:nAlleles
1549425258113:nLoci
1549425262612:loci        <- as.character(unique(data.to.plot$Locus))
1549425264221:loci
1549425268986:# alleleType  <- c()
1549425268986:lociLabels  <- c()
1549425269218:name.x      <- c()
1549425269412:name.y      <- c()
1549425269627:info.x      <- c()
1549425269801:info.y      <- c()
1549425269995:covs        <- c()
1549425270188:avgDepths   <- c()
1549425270499:meanDepth.x <- c()
1549425270930:meanDepth.y <- c()
1549425302227:alleles  <- as.character(unique(data.to.plot$Allele))
1549425302574:loci     <- as.character(unique(data.to.plot$Locus))
1549425303053:nAlleles <- length(alleles)
1549425303407:nLoci    <- length(loci)
1549425305096:nAlleles
1549425307028:nLoci
1549425311919:lociLabels  <- c()
1549425311920:name.x      <- c()
1549425311921:name.y      <- c()
1549425311921:info.x      <- c()
1549425311922:info.y      <- c()
1549425311922:covs        <- c()
1549425311923:avgDepths   <- c()
1549425311923:meanDepth.x <- c()
1549425311924:meanDepth.y <- c()
1549425311924:# for (i in loci) {
1549425311924:#   lociLabels <- c(lociLabels, rep(i, nAlleles))
1549425311925:# }
1549425311925:for (allele in alleles) {
1549425311925:locus     <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]) %>% pull())
1549425311926:maxPos    <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549425311926:maxDepth  <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549425311926:name.x    <- c(name.x, (max.x / 2))
1549425311927:name.y    <- c(name.y, (maxDepth * 0.25))
1549425311927:info.x    <- c(info.x, max.x * 0.02)
1549425311927:info.y    <- c(info.y, maxDepth * 1.5)
1549425311928:covs      <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549425311928:avgDepths <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549425311928:}
1549425314395:avgDepths
1549425317723:covs
1549425322743:data.frame(Locus = loci,
1549425322743:Allele = alleles,
1549425322743:name.x = name.x,
1549425322744:name.y = name.y,
1549425322744:info.x = info.x,
1549425322745:info.y = info.y,
1549425322745:meanDepth = avgDepths,
1549425322745:# N = rep(unique(data.to.plot$N), nLoci),
1549425322746:# Locus = lociLabels,
1549425322746:cov = covs
1549425322747:)
1549425331843:alleles
1549425335462:loci
1549425376136:loci
1549425380643:alleles
1549425392682:loci
1549425433202:data.to.plot %>% select(Locus, Allele)
1549425468558:data.to.plot %>% filter(Locus, Allele) %>% distinct()
1549425481724:data.to.plot %>% filter(Locus, Allele)
1549425487730:data.to.plot %>% filter(Locus, Allele)
1549425495288:data.to.plot=subToPlot
1549425496009:max.x <- max(data.to.plot$Position)
1549425496251:max.y <- max(data.to.plot$kmerDepth)
1549425506749:data.to.plot %>% select(Locus, Allele) %>% distinct()
1549425557639:locAllele <- data.to.plot %>% select(Locus, Allele) %>% distinct()
1549425566149:alleles  <- as.character(unique(locAllele$Allele))
1549425567747:alleles
1549425573723:loci     <- as.character(unique(locAllele$Locus))
1549425574773:loci
1549425594420:locAllele$Allele
1549425597552:locAllele$Locus
1549425602226:alleles  <- as.character(locAllele$Allele)
1549425602712:loci     <- as.character(locAllele$Locus)
1549425603992:alleles
1549425606262:loci
1549425630035:data.to.plot=subToPlot
1549425630035:max.x <- max(data.to.plot$Position)
1549425630036:max.y <- max(data.to.plot$kmerDepth)
1549425630037:locAllele <- data.to.plot %>% select(Locus, Allele) %>% distinct()
1549425630040:alleles   <- as.character(locAllele$Allele)
1549425630040:loci      <- as.character(locAllele$Locus)
1549425630041:nAlleles  <- length(alleles)
1549425630041:nLoci     <- length(loci)
1549425630042:# alleleType  <- c()
1549425630042:lociLabels  <- c()
1549425630042:name.x      <- c()
1549425630043:name.y      <- c()
1549425630043:info.x      <- c()
1549425630044:info.y      <- c()
1549425630044:covs        <- c()
1549425630045:avgDepths   <- c()
1549425630045:meanDepth.x <- c()
1549425630045:meanDepth.y <- c()
1549425632959:# for (i in loci) {
1549425632960:#   lociLabels <- c(lociLabels, rep(i, nAlleles))
1549425632960:# }
1549425632960:for (allele in alleles) {
1549425632961:locus     <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]) %>% pull())
1549425632961:maxPos    <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549425632961:maxDepth  <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549425632962:name.x    <- c(name.x, (max.x / 2))
1549425632962:name.y    <- c(name.y, (maxDepth * 0.25))
1549425632962:info.x    <- c(info.x, max.x * 0.02)
1549425632963:info.y    <- c(info.y, maxDepth * 1.5)
1549425632963:covs      <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549425632963:avgDepths <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549425632964:}
1549425637085:data.frame(Locus = loci,
1549425637085:Allele = alleles,
1549425637086:name.x = name.x,
1549425637086:name.y = name.y,
1549425637086:info.x = info.x,
1549425637087:info.y = info.y,
1549425637087:meanDepth = avgDepths,
1549425637088:# N = rep(unique(data.to.plot$N), nLoci),
1549425637088:# Locus = lociLabels,
1549425637088:cov = covs
1549425637089:)
1549425650512:data.frame(Locus = loci,
1549425650512:Allele = alleles,
1549425650513:name.x = name.x,
1549425650513:name.y = name.y,
1549425650513:info.x = info.x,
1549425650514:info.y = info.y,
1549425650514:meanDepth = avgDepths,
1549425650514:# N = rep(unique(data.to.plot$N), nLoci),
1549425650514:# Locus = lociLabels,
1549425650515:cov = covs
1549425650515:) %>%
1549425650515:left_join(data.to.plot %>%
1549425650516:mutate(Locus = as.character(Locus),
1549425650516:Allele = as.character(Allele),
1549425650517:NumAllele = as.character(NumAllele)) %>%
1549425650517:group_by(Locus, Allele, NumAllele, Length, NormKmerCount) %>%
1549425650517:summarise(sd = sd(kmerDepth)),
1549425650518:by = c("Locus", "Allele"))
1549425671296:data.to.plot %>%
1549425671296:mutate(Locus = as.character(Locus),
1549425671297:Allele = as.character(Allele),
1549425671297:NumAllele = as.character(NumAllele))
1549425747145:data.to.plot %>%
1549425747145:mutate(Locus = as.character(Locus),
1549425747146:Allele = as.character(Allele),
1549425747146:NumAllele = as.character(NumAllele)) %>%
1549425747146:group_by(Locus, Allele, NumAllele, Length, NormKmerCount)
1549425752089:data.to.plot %>%
1549425752090:mutate(Locus = as.character(Locus),
1549425752090:Allele = as.character(Allele),
1549425752091:NumAllele = as.character(NumAllele)) %>%
1549425752091:group_by(Locus, Allele, NumAllele, Length, NormKmerCount) %>%
1549425752092:summarise(sd = sd(kmerDepth))
1549425762727:data.frame(Locus = loci,
1549425762727:Allele = alleles,
1549425762728:name.x = name.x,
1549425762729:name.y = name.y,
1549425762729:info.x = info.x,
1549425762730:info.y = info.y,
1549425762730:meanDepth = avgDepths,
1549425762731:# N = rep(unique(data.to.plot$N), nLoci),
1549425762731:# Locus = lociLabels,
1549425762732:cov = covs
1549425762732:)
1549425778036:tibble(Locus = loci,
1549425778036:Allele = alleles,
1549425778036:name.x = name.x,
1549425778037:name.y = name.y,
1549425778037:info.x = info.x,
1549425778037:info.y = info.y,
1549425778038:meanDepth = avgDepths,
1549425778038:# N = rep(unique(data.to.plot$N), nLoci),
1549425778038:# Locus = lociLabels,
1549425778039:cov = covs
1549425778039:)
1549425785633:tibble(Locus = loci,
1549425785634:Allele = alleles,
1549425785634:name.x = name.x,
1549425785635:name.y = name.y,
1549425785636:info.x = info.x,
1549425785636:info.y = info.y,
1549425785637:meanDepth = avgDepths,
1549425785637:# N = rep(unique(data.to.plot$N), nLoci),
1549425785638:# Locus = lociLabels,
1549425785638:cov = covs
1549425785639:) %>%
1549425785639:left_join(data.to.plot %>%
1549425785640:mutate(Locus = as.character(Locus),
1549425785640:Allele = as.character(Allele),
1549425785641:NumAllele = as.character(NumAllele)) %>%
1549425785641:group_by(Locus, Allele, NumAllele, Length, NormKmerCount) %>%
1549425785642:summarise(sd = sd(kmerDepth)),
1549425785642:by = c("Locus", "Allele"))
1549425798680:labelsData <- tibble(Locus = loci,
1549425798681:Allele = alleles,
1549425798682:name.x = name.x,
1549425798682:name.y = name.y,
1549425798682:info.x = info.x,
1549425798683:info.y = info.y,
1549425798683:meanDepth = avgDepths,
1549425798684:# N = rep(unique(data.to.plot$N), nLoci),
1549425798684:# Locus = lociLabels,
1549425798685:cov = covs
1549425798686:) %>%
1549425798686:left_join(data.to.plot %>%
1549425798687:mutate(Locus = as.character(Locus),
1549425798687:Allele = as.character(Allele),
1549425798688:NumAllele = as.character(NumAllele)) %>%
1549425798688:group_by(Locus, Allele, NumAllele, Length, NormKmerCount) %>%
1549425798689:summarise(sd = sd(kmerDepth)),
1549425798689:by = c("Locus", "Allele"))
1549425799803:labelsData
1549425804482:# Function to get data for annotations ------------------------------------
1549425804482:getLabelsData <- function(data.to.plot) {
1549425804483:# data.to.plot=subToPlot
1549425804483:max.x <- max(data.to.plot$Position)
1549425804483:max.y <- max(data.to.plot$kmerDepth)
1549425804484:locAllele <- data.to.plot %>% select(Locus, Allele) %>% distinct()
1549425804484:alleles   <- as.character(locAllele$Allele)
1549425804485:loci      <- as.character(locAllele$Locus)
1549425804486:nAlleles  <- length(alleles)
1549425804486:nLoci     <- length(loci)
1549425804487:# alleleType  <- c()
1549425804488:lociLabels  <- c()
1549425804488:name.x      <- c()
1549425804489:name.y      <- c()
1549425804490:info.x      <- c()
1549425804490:info.y      <- c()
1549425804491:covs        <- c()
1549425804491:avgDepths   <- c()
1549425804494:meanDepth.x <- c()
1549425804494:meanDepth.y <- c()
1549425804495:# for (i in loci) {
1549425804495:#   lociLabels <- c(lociLabels, rep(i, nAlleles))
1549425804496:# }
1549425804496:for (allele in alleles) {
1549425804497:locus     <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]) %>% pull())
1549425804498:maxPos    <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549425804498:maxDepth  <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549425804499:name.x    <- c(name.x, (max.x / 2))
1549425804500:name.y    <- c(name.y, (maxDepth * 0.25))
1549425804500:info.x    <- c(info.x, max.x * 0.02)
1549425804501:info.y    <- c(info.y, maxDepth * 1.5)
1549425804501:covs      <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549425804502:avgDepths <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549425804503:}
1549425804504:labelsData <- tibble(Locus = loci,
1549425804504:Allele = alleles,
1549425804505:name.x = name.x,
1549425804506:name.y = name.y,
1549425804507:info.x = info.x,
1549425804507:info.y = info.y,
1549425804509:meanDepth = avgDepths,
1549425804510:# N = rep(unique(data.to.plot$N), nLoci),
1549425804511:# Locus = lociLabels,
1549425804512:cov = covs
1549425804513:) %>%
1549425804513:left_join(data.to.plot %>%
1549425804514:mutate(Locus = as.character(Locus),
1549425804514:Allele = as.character(Allele),
1549425804515:NumAllele = as.character(NumAllele)) %>%
1549425804515:group_by(Locus, Allele, NumAllele, Length, NormKmerCount) %>%
1549425804516:summarise(sd = sd(kmerDepth)),
1549425804517:by = c("Locus", "Allele"))
1549425804517:labelsData
1549425804518:}
1549425821477:samples <- levels(data.to.plot$Sample)
1549425821752:loci    <- levels(data.to.plot$Locus)
1549425823341:samples
1549425825610:loci
1549425829904:print(sam)
1549425831815:subset   <- data.to.plot %>% filter(Sample == sam)
1549425833974:subset
1549425842717:subToPlot <- subset %>% filter(Locus %in% loci[c(1:8,37)])
1549425842720:loci     <- as.character(unique(subToPlot$Locus))
1549425842722:alleles  <- as.character(unique(subToPlot$Allele))
1549425842724:nLoci    <- length(loci)
1549425842724:nAlleles <- length(alleles)
1549425842725:# which(loci %in% c("NEIS1689"))
1549425842725:max.x    <- max(subToPlot$Position)
1549425842726:max.y    <- max(subToPlot$kmerDepth)
1549425842727:x.limits <- seq(0, max.x, 100)
1549425842728:y.limits <- seq(0, max.y, 20)
1549425842729:rowsPerPage   <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549425842730:colourCount   <- rowsPerPage
1549425842731:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549425842733:borderPalette <- darkColors(fillPalette, 0.6)
1549425842763:# Depth plot -------------------------------------------------------------
1549425842764:# lociPerPage    <- 3
1549425842764:wFactor        <- 4.8
1549425842765:plotTitlesSize <- 2.39
1549425842766:getPlotHeight <- function(rows, extras){
1549425842766:hFactor <- ifelse(rows == 1, 1.88, 1.6)
1549425842767:# loci + titles and foot note + strip + space between locus
1549425842767:(rows*hFactor) + extras + ((rows-1)*0.157) #in
1549425842768:}
1549425842769:# rowsPerPage <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549425842770:height      <- getPlotHeight(rowsPerPage, plotTitlesSize)
1549425842770:width       <- nAlleles * wFactor
1549425842771:loci        <- unique(data.to.plot$Locus)
1549425842772:sets
1549425846476:set=sets[[1]]; dp=subToPlot; rp=rowsPerPage
1549425848742:nLoci        <- length(set)
1549425849749:nLoci
1549425851809:subsetToPlot <- dp %>% filter(Locus %in% set)
1549425853120:subsetToPlot
1549425856802:# subPalette   <-
1549425856802:ld           <- getLabelsData(subsetToPlot)
1549425859371:ld
1549425863988:p            <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette)
1549426037663:p            <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette, sample.name)
1549426049010:# Function for plotting k-mer depth ----------------------------------------
1549426049011:plotDepth <- function(dataToPlot, labelsData, fillColors, borderColors, sampleName) {
1549426049011:max.x       <- max(dataToPlot$Position)
1549426049012:max.y       <- max(dataToPlot$kmerDepth)
1549426049012:x.limits    <- seq(0, max.x, 100)
1549426049013:y.limits    <- seq(0, max.y, 20)
1549426049013:# nTopAlleles <- length(unique(dataToPlot$N))
1549426049014:d.plot <- ggplot(data = dataToPlot, aes(x = Position, y = kmerDepth),
1549426049015:size = 0.2) +
1549426049015:geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1549426049016:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1549426049017:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1549426049017:scale_color_manual(values = borderColors) +
1549426049018:scale_fill_manual(values = fillColors) +
1549426049019:geom_text(data = labelsData,
1549426049020:# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1549426049021:# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1549426049021:aes(x = Length, y = info.y * 0.5, group = Locus,
1549426049022:hjust = 0,
1549426049023:label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1549426049023:show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1549426049024:nudge_x = -(max.x*0.025)
1549426049024:) +
1549426049025:geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1549426049026:alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1549426049026:# geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1549426049027:size = annotTextSize * 1.05, color = "#333333") +
1549426049028:geom_text(data = labelsData,
1549426049029:parse = TRUE,
1549426049029:aes(x = info.x, y = info.y,
1549426049030:label = paste0("{{{italic(hat(f)[k]) ==", format(round(NormKmerCount, 2), nsmall = 2),
1549426049031:"*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1549426049031:"*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1549426049032:"~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1549426049033:hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1549426049034:# facet_grid(Locus ~ N, scales = "free_y") +
1549426049034:facet_grid(rows = vars(Locus), cols = vars(AlleleType, NumAllele), scales = "free") +
1549426049035:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1549426049036:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1549426049037:theme_bw() +
1549426049037:plotTheme +
1549426049038:labs(title    = expression(italic("k")*"-mer Depth Distribution"),
1549426049039:subtitle = paste("Observed and predicted alleles on sample", sampleName),
1549426049040:x        = "Position along sequence (bp)",
1549426049041:y        = expression(paste(italic(k), "-mer depth")),
1549426049041:# caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1549426049044:caption  = expression(paste(#italic("s"),": score;  ",
1549426049045:italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1549426049047:italic("c"),": coverage;  ",
1549426049048:italic(sigma), ": standard deviation;  ",
1549426049050:italic(bar(d)), ": average depth"), sep = "")
1549426049051:)
1549426049052:d.plot
1549426049053:}
1549426060618:p            <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette, sample.name)
1549426066586:p
1549426177810:ld
1549426240780:# Function to get data for annotations ------------------------------------
1549426240780:getLabelsData <- function(data.to.plot) {
1549426240781:# data.to.plot=subToPlot
1549426240781:max.x <- max(data.to.plot$Position)
1549426240782:max.y <- max(data.to.plot$kmerDepth)
1549426240783:locAllele <- data.to.plot %>% select(Locus, Allele) %>% distinct()
1549426240783:alleles   <- as.character(locAllele$Allele)
1549426240784:loci      <- as.character(locAllele$Locus)
1549426240784:nAlleles  <- length(alleles)
1549426240785:nLoci     <- length(loci)
1549426240785:# alleleType  <- c()
1549426240786:lociLabels  <- c()
1549426240786:name.x      <- c()
1549426240787:name.y      <- c()
1549426240787:info.x      <- c()
1549426240787:info.y      <- c()
1549426240788:covs        <- c()
1549426240788:avgDepths   <- c()
1549426240789:meanDepth.x <- c()
1549426240789:meanDepth.y <- c()
1549426240789:# for (i in loci) {
1549426240790:#   lociLabels <- c(lociLabels, rep(i, nAlleles))
1549426240790:# }
1549426240791:for (allele in alleles) {
1549426240791:locus     <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]) %>% pull())
1549426240792:maxPos    <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549426240792:maxDepth  <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549426240793:name.x    <- c(name.x, (max.x / 2))
1549426240793:name.y    <- c(name.y, (maxDepth * 0.25))
1549426240794:info.x    <- c(info.x, max.x * 0.02)
1549426240795:info.y    <- c(info.y, maxDepth * 1.5)
1549426240795:covs      <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549426240796:avgDepths <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549426240796:}
1549426240797:labelsData <- tibble(Locus = loci,
1549426240797:Allele = alleles,
1549426240798:name.x = name.x,
1549426240798:name.y = name.y,
1549426240799:info.x = info.x,
1549426240799:info.y = info.y,
1549426240800:meanDepth = avgDepths,
1549426240801:# N = rep(unique(data.to.plot$N), nLoci),
1549426240802:# Locus = lociLabels,
1549426240802:cov = covs
1549426240803:) %>%
1549426240803:left_join(data.to.plot %>%
1549426240804:mutate(Locus = as.character(Locus),
1549426240805:Allele = as.character(Allele),
1549426240805:NumAllele = as.character(NumAllele)) %>%
1549426240806:group_by(Locus, Allele, NumAllele, AlleleType, Length, NormKmerCount) %>%
1549426240806:summarise(sd = sd(kmerDepth)),
1549426240807:by = c("Locus", "Allele"))
1549426240808:labelsData
1549426240808:}
1549426264328:# subPalette   <-
1549426264328:ld           <- getLabelsData(subsetToPlot)
1549426266004:ld
1549426292556:p            <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette, sample.name)
1549426296615:p
1549426462386:rowsPerPage   <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549426462566:colourCount   <- rowsPerPage
1549426462842:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549426462999:borderPalette <- darkColors(fillPalette, 0.6)
1549426463312:# Depth plot -------------------------------------------------------------
1549426463312:# lociPerPage    <- 3
1549426463313:wFactor        <- 4.8
1549426463698:plotTitlesSize <- 2.39
1549426464470:getPlotHeight <- function(rows, extras){
1549426464471:# hFactor <- ifelse(rows == 1, 1.88, 1.6)
1549426464471:# loci + titles and foot note + strip + space between locus
1549426464472:(rows*hFactor) + extras + ((rows-1)*0.157) #in
1549426464472:}
1549426466001:# rowsPerPage <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549426466002:height      <- getPlotHeight(rowsPerPage, plotTitlesSize)
1549426466300:width       <- nAlleles * wFactor
1549426466530:loci        <- unique(data.to.plot$Locus)
1549426466894:sets        <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549426477586:getPlotHeight <- function(rows, extras){
1549426477586:hFactor <- ifelse(rows == 1, 1.88, 1.6)
1549426477587:# loci + titles and foot note + strip + space between locus
1549426477588:(rows*hFactor) + extras + ((rows-1)*0.157) #in
1549426477589:}
1549426479026:# rowsPerPage <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549426479027:height      <- getPlotHeight(rowsPerPage, plotTitlesSize)
1549426479417:width       <- nAlleles * wFactor
1549426479652:loci        <- unique(data.to.plot$Locus)
1549426480184:sets        <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549426483360:plots <- lapply(sets, function(set, dp=subToPlot, rp=rowsPerPage){
1549426483361:# set=sets[[1]]; dp=subToPlot; rp=rowsPerPage
1549426483362:nLoci        <- length(set)
1549426483362:subsetToPlot <- dp %>% filter(Locus %in% set)
1549426483362:# subPalette   <-
1549426483363:ld           <- getLabelsData(subsetToPlot)
1549426483363:p            <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette, sample.name)
1549426483364:if(nLoci < rp){
1549426483364:hlay    <- matrix(c(1, NA))
1549426483365:total   <- getPlotHeight(rp, plotTitlesSize)
1549426483365:cHeight <- getPlotHeight(nLoci, plotTitlesSize)
1549426483366:blank   <- getPlotHeight(rp-nLoci, 0)
1549426483366:heights <- matrix(c(cHeight/total, blank/total))
1549426483367:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549426483367:}
1549426483368:p
1549426483368:})
1549426611058:getPlotHeight <- function(rows, extras){
1549426611058:hFactor <- ifelse(rows == 1, 1.88, 1.6)
1549426611058:# loci + titles and foot note + strip + space between locus
1549426611059:(rows*hFactor) + extras + ((rows-1)*0.157*2) #in
1549426611059:}
1549426613473:# rowsPerPage <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549426613474:height      <- getPlotHeight(rowsPerPage, plotTitlesSize)
1549426613968:width       <- nAlleles * wFactor
1549426614214:loci        <- unique(data.to.plot$Locus)
1549426614535:sets        <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549426615180:plots <- lapply(sets, function(set, dp=subToPlot, rp=rowsPerPage){
1549426615181:# set=sets[[1]]; dp=subToPlot; rp=rowsPerPage
1549426615181:nLoci        <- length(set)
1549426615182:subsetToPlot <- dp %>% filter(Locus %in% set)
1549426615182:# subPalette   <-
1549426615182:ld           <- getLabelsData(subsetToPlot)
1549426615182:p            <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette, sample.name)
1549426615183:if(nLoci < rp){
1549426615183:hlay    <- matrix(c(1, NA))
1549426615184:total   <- getPlotHeight(rp, plotTitlesSize)
1549426615184:cHeight <- getPlotHeight(nLoci, plotTitlesSize)
1549426615184:blank   <- getPlotHeight(rp-nLoci, 0)
1549426615185:heights <- matrix(c(cHeight/total, blank/total))
1549426615185:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549426615185:}
1549426615186:p
1549426615186:})
1549426667351:if (out.format == "pdf") {
1549426667352:out.filename <- paste(out.prefix, out.format, sep = ".")
1549426667352:ml <- marrangeGrob(plots, nrow=1, ncol=1, padding = unit(10, "mm"),
1549426667353:top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549426667353:ggsave(filename = out.filename, plot = ml,
1549426667354:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549426667354:}
1549426741833:#!/usr/bin/env Rscript
1549426741834:# ##############################################################################
1549426741834:#  Author:   Hector Fabio Espitia-Navarro
1549426741835:#            Georgia Institute of Technology
1549426741835:#  Version:  1.0
1549426741836:#  Date:     01/19/2019
1549426741836:# ##############################################################################
1549426741837:# Install required packages -----------------------------------------------
1549426741837:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549426741838:if(!file.exists(personal.lib.path))
1549426741839:dir.create(personal.lib.path)
1549426741840:printMessage <- function(message, verbose){
1549426741840:if(verbose)
1549426741841:cat(message)
1549426741841:}
1549426741842:# crayon::bold("Hola")
1549426741843:installAndLoadPackages <- function(pkg, verbose){
1549426741843:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1549426741844:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1549426741844:printMessage("Done!\n", verbose)
1549426741845:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549426741845:if (length(new.pkg)) {
1549426741845:printMessage("Installing new packages... ", verbose)
1549426741846:install.packages(new.pkg, dependencies = TRUE,
1549426741846:repos="http://cran.rstudio.com/",
1549426741846:lib = personal.lib.path)
1549426741847:printMessage("Done!\n", verbose)
1549426741847:}
1549426741848:printMessage("Loading required packages... ", verbose)
1549426741848:sapply(pkg, function(x){
1549426741848:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549426741849:})
1549426741849:printMessage("Done!\n", verbose)
1549426741849:}
1549426741850:# github.related.packages <- c("devtools", "Rcpp")
1549426741850:# packages <- c("argparser", "tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite")
1549426741850:packages <- c("tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite", "gridExtra")
1549426741851:# installAndLoadPackages(packages, verbose = TRUE)
1549426741851:installAndLoadPackages("argparser", verbose = FALSE)
1549426741875:# Command line arguments processing ---------------------------------------
1549426741876:# Get script name
1549426741876:initial.options <- commandArgs(trailingOnly = FALSE)
1549426741876:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1549426741877:# Process command line arguments
1549426741877:# Create a parser
1549426741877:p <- arg_parser("This script generates k-mer depth plots using a depth file generated by the\033[1mSTing typer\033[22m tool (-t option).",
1549426741878:name = script.name)
1549426741879:# Add Positional arguments (required)
1549426741880:p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
1549426741881:# Add options
1549426741881:p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1549426741882:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1549426741882:default = "kmer_depth")
1549426741883:p <- add_argument(p, "--sample_name", help = "Sample name.",
1549426741884:default = "input file's name")
1549426741885:p <- add_argument(p, "--max_loci_per_page", help = "Maximum number of loci to print on each page.",
1549426741885:default = 7)
1549426741886:p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'",
1549426741887:default = "pdf")
1549426741888:# Initialization of variables ---------------------------------------------
1549426741889:# Values to test the script using RStudio
1549426741889:script.home       <- "/home/hspitia/Dropbox/gatech/projects/STing/manuscript/data/typer/v0.24/detector_on_failed"
1549426741889:# inputFile         <- paste(script.home, "ERR036060.depth.2.tsv", sep = "/")
1549426741890:# geneFile          <- paste(script.home, "rmlst_failed_loci.txt", sep = "/")
1549426741890:inputFile         <- paste(script.home, "detector.v024.nm20.cgmlst.failed_alleles.depth.for_plotting.tsv.gz", sep = "/")
1549426741890:geneFile          <- paste(script.home, "loci.txt", sep = "/")
1549426741891:out.prefix        <- "kmer_depth"
1549426741891:sample.name       <- basename(inputFile)
1549426741892:max.loci.per.page <- 7
1549426741892:out.format        <- "pdf"
1549426741893:# Parse command line arguments
1549426741893:command.line = F  # Turn to FALSE to test the script inside RStudio
1549426741893:argv <- list()
1549426741894:if(command.line) {
1549426741894:argv <- parse_args(p)
1549426741894:} else {
1549426741895:argv <- parse_args(p, list(inputFile,
1549426741895:"--gene_file", geneFile,
1549426741895:"--prefix", out.prefix,
1549426741895:"--sample_name", sample.name,
1549426741896:"--max_loci_per_page", max.loci.per.page,
1549426741896:"--format", out.format))
1549426741896:}
1549426741899:# Get argument values from the command line
1549426741899:input.file        <- argv$input_file
1549426741900:gene.file         <- argv$gene_file
1549426741900:out.format        <- argv$format
1549426741900:out.prefix        <- argv$prefix
1549426741901:max.loci.per.page <- argv$max_loci_per_page
1549426741901:sample.name       <- argv$sample_name
1549426741902:# if (sample.name == "")
1549426741902:if (sample.name == "input file's name")
1549426741902:sample.name <- basename(input.file)
1549426741903:# Function to check if file exists ----------------------------------------
1549426741903:CheckFileExists <- function(file.list) {
1549426741904:non.exist.files <- !file.exists(file.list)
1549426741904:if(any(non.exist.files)) {
1549426741904:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549426741904:}
1549426741905:}
1549426741905:# Check for input files ---------------------------------------------------
1549426741906:files.to.check <- c(input.file)
1549426741906:error.message  <- CheckFileExists(files.to.check)
1549426741907:if(!is.null(error.message)){
1549426741907:stop(error.message)
1549426741907:} else {
1549426741908:# Code core - Begin -------------------------------------------------------
1549426741908:installAndLoadPackages(packages, verbose = TRUE)
1549426741908:# FUNCTIONS:
1549426741908:# Function to dark a list of colors ---------------------------------------
1549426741909:darkColors <- function(palette, level){
1549426741909:rgbColors <- as.data.frame(t(as.data.frame(lapply(as.data.frame(t(col2rgb(palette))),
1549426741909:function(x) { round(x * level)}))))
1549426741910:unname(sapply(rgbColors, function(x){ rgb(x[1], x[2], x[3], maxColorValue=255) }))
1549426741910:}
1549426741910:# Function for plotting k-mer depth ----------------------------------------
1549426741911:plotDepth <- function(dataToPlot, labelsData, fillColors, borderColors, sampleName) {
1549426741911:max.x       <- max(dataToPlot$Position)
1549426741911:max.y       <- max(dataToPlot$kmerDepth)
1549426741912:x.limits    <- seq(0, max.x, 100)
1549426741912:y.limits    <- seq(0, max.y, 20)
1549426741912:# nTopAlleles <- length(unique(dataToPlot$N))
1549426741913:d.plot <- ggplot(data = dataToPlot, aes(x = Position, y = kmerDepth),
1549426741914:size = 0.2) +
1549426741914:geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1549426741914:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1549426741915:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1549426741915:scale_color_manual(values = borderColors) +
1549426741916:scale_fill_manual(values = fillColors) +
1549426741916:geom_text(data = labelsData,
1549426741917:# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1549426741917:# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1549426741917:aes(x = Length, y = info.y * 0.5, group = Locus,
1549426741918:hjust = 0,
1549426741919:label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1549426741921:show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1549426741921:nudge_x = -(max.x*0.025)
1549426741922:) +
1549426741922:geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1549426741923:alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1549426741923:# geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1549426741924:size = annotTextSize * 1.05, color = "#333333") +
1549426741924:geom_text(data = labelsData,
1549426741925:parse = TRUE,
1549426741925:aes(x = info.x, y = info.y,
1549426741926:label = paste0("{{{italic(hat(f)[k]) ==", format(round(NormKmerCount, 2), nsmall = 2),
1549426741926:"*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1549426741927:"*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1549426741928:"~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1549426741928:hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1549426741929:# facet_grid(Locus ~ N, scales = "free_y") +
1549426741929:facet_grid(rows = vars(Locus), cols = vars(AlleleType, NumAllele), scales = "free") +
1549426741930:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1549426741931:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1549426741931:theme_bw() +
1549426741932:plotTheme +
1549426741932:labs(title    = expression(italic("k")*"-mer Depth Distribution"),
1549426741933:subtitle = paste("Observed and predicted alleles on sample", sampleName),
1549426741934:x        = "Position along sequence (bp)",
1549426741934:y        = expression(paste(italic(k), "-mer depth")),
1549426741935:# caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1549426741938:caption  = expression(paste(#italic("s"),": score;  ",
1549426741939:italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1549426741940:italic("c"),": coverage;  ",
1549426741942:italic(sigma), ": standard deviation;  ",
1549426741943:italic(bar(d)), ": average depth"), sep = "")
1549426741943:)
1549426741944:d.plot
1549426741945:}
1549426741946:# Function to get data for annotations ------------------------------------
1549426741947:getLabelsData <- function(data.to.plot) {
1549426741948:# data.to.plot=subToPlot
1549426741949:max.x <- max(data.to.plot$Position)
1549426741949:max.y <- max(data.to.plot$kmerDepth)
1549426741951:locAllele <- data.to.plot %>% select(Locus, Allele) %>% distinct()
1549426741952:alleles   <- as.character(locAllele$Allele)
1549426741953:loci      <- as.character(locAllele$Locus)
1549426741954:nAlleles  <- length(alleles)
1549426741954:nLoci     <- length(loci)
1549426741955:# alleleType  <- c()
1549426741957:lociLabels  <- c()
1549426741958:name.x      <- c()
1549426741960:name.y      <- c()
1549426741961:info.x      <- c()
1549426741962:info.y      <- c()
1549426741963:covs        <- c()
1549426741964:avgDepths   <- c()
1549426741965:meanDepth.x <- c()
1549426741967:meanDepth.y <- c()
1549426741968:# for (i in loci) {
1549426741969:#   lociLabels <- c(lociLabels, rep(i, nAlleles))
1549426741970:# }
1549426741970:for (allele in alleles) {
1549426741971:locus     <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]) %>% pull())
1549426741972:maxPos    <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549426741973:maxDepth  <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549426741974:name.x    <- c(name.x, (max.x / 2))
1549426741975:name.y    <- c(name.y, (maxDepth * 0.25))
1549426741976:info.x    <- c(info.x, max.x * 0.02)
1549426741977:info.y    <- c(info.y, maxDepth * 1.5)
1549426741977:covs      <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549426741978:avgDepths <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549426741979:}
1549426741981:labelsData <- tibble(Locus = loci,
1549426741982:Allele = alleles,
1549426741983:name.x = name.x,
1549426741984:name.y = name.y,
1549426741986:info.x = info.x,
1549426741988:info.y = info.y,
1549426741989:meanDepth = avgDepths,
1549426741990:# N = rep(unique(data.to.plot$N), nLoci),
1549426741991:# Locus = lociLabels,
1549426741992:cov = covs
1549426741993:) %>%
1549426741994:left_join(data.to.plot %>%
1549426741995:mutate(Locus = as.character(Locus),
1549426741996:Allele = as.character(Allele),
1549426741997:NumAllele = as.character(NumAllele)) %>%
1549426741998:group_by(Locus, Allele, NumAllele, AlleleType, Length, NormKmerCount) %>%
1549426741999:summarise(sd = sd(kmerDepth)),
1549426742000:by = c("Locus", "Allele"))
1549426742001:labelsData
1549426742002:}
1549426742004:# Check for genes/loci file to filter loci to plot  -----------------------
1549426742005:loci.to.plot <- c()
1549426742006:# if (!is.null(gene.file)|| gene.file != "") {
1549426742007:if (!is.null(gene.file) && !is.na(gene.file) && gene.file != "") {
1549426742008:error.message <- CheckFileExists(gene.file)
1549426742010:if (!is.null(error.message)){
1549426742011:cat("Warning:")
1549426742012:cat(error.message)
1549426742013:cat("  The plotting process will continue without filtering genes/loci.\n")
1549426742014:} else {
1549426742015:loci.to.plot <- scan(gene.file, character(), quiet = TRUE)
1549426742016:}
1549426742017:}
1549426742020:# Data processing and plotting --------------------------------------------
1549426742021:cat("Plotting depths... ")
1549426742022:options(stringsAsFactors = T, readr.num_columns = 0)
1549426742023:# Load data
1549426742025:inData <- read_tsv(input.file)
1549426742027:colnames(inData) <- c("Sample", "Locus", "Allele", "Position", "kmerDepth",
1549426742028:"NormKmerCount", "Coverage", "AverageKmerDepth",
1549426742029:"AlleleType", "NumAllele", "WeightedKmerDepth", "AlleleNumber",
1549426742030:"RunMode", "kmerCounts", "Length")
1549426742031:# Transform data
1549426742033:data.to.plot <- inData %>%
1549426742034:mutate(
1549426742035:Sample = factor(Sample, levels = unique(inData$Sample)),
1549426742036:Locus = factor(Locus, levels = unique(inData$Locus)),
1549426742037:AlleleType = factor(AlleleType, levels = unique(inData$AlleleType)),
1549426742038:NumAllele = factor(NumAllele, levels = unique(inData$NumAllele)),
1549426742040:RunMode = factor(RunMode, levels = unique(inData$RunMode)),
1549426742041:Allele = factor(Allele, levels = unique(inData$Allele))
1549426742042:)
1549426742044:tmp <- inData %>%
1549426742046:group_by(Sample, Locus, Allele, AlleleType, NumAllele) %>%
1549426742047:summarise(Length = n())
1549426742048:# # Filtering loci/genes from genes_file input param
1549426742049:# if (length(loci.to.plot) > 0) {
1549426742051:#   data.to.plot <- data.to.plot %>%
1549426742052:#     filter(Locus %in% loci.to.plot)
1549426742053:# }
1549426742055:longestLocusNameLength <- max(str_length(as.character(unique(inData$Locus))))
1549426742056:nSamples <- length(unique(data.to.plot$Sample))
1549426742057:# nLoci    <- length(unique(data.to.plot$Locus))
1549426742058:# nAlleles <- length(unique(data.to.plot$Alleles))
1549426742061:# Theme-related variable definition ---------------------------------------
1549426742062:annotLinetype     <- "solid"
1549426742063:annotTextSize     <- 4
1549426742064:axisColor         <- "#000000"
1549426742066:axisTextSize      <- 12
1549426742067:barAnnotTextSize  <- 4
1549426742068:baseTextSize      <- 14
1549426742070:gridColor         <- "#e0e0e0"
1549426742071:lineSize          <- 0.3
1549426742073:# panelColor        <- "#ffffff"
1549426742074:# panelColor        <- "#fff4e0"
1549426742075:panelColor        <- "#f2efe6"
1549426742076:# stripBackground   <- "#cccccc"
1549426742078:stripTextSize     <- axisTextSize
1549426742079:if (longestLocusNameLength > 12)
1549426742080:stripTextSize  <- stripTextSize * 0.6
1549426742082:textColor  <- "#000000"
1549426742083:# baseFontFamily        <- "Arial"
1549426742086:# Custom theme definition for plots ---------------------------------------
1549426742088:plotTheme <- list(
1549426742090:theme(
1549426742092:axis.text.x      = element_text(angle = 50, size = axisTextSize,
1549426742093:vjust = 1, hjust = 1, color = textColor),
1549426742094:axis.text.y      = element_text(size = axisTextSize, color = textColor),
1549426742095:axis.ticks       = element_line(size = lineSize),
1549426742097:axis.title.x     = element_text(margin = margin(6,0,8,0, "mm")),
1549426742098:axis.title.y     = element_text(margin = margin(0,6,0,0, "mm")),
1549426742099:legend.position  = "none",
1549426742100:panel.border     = element_rect(size = lineSize),
1549426742102:panel.background = element_rect(fill = panelColor),
1549426742103:panel.grid       = element_line(size = lineSize, colour = gridColor),
1549426742104:panel.grid.minor = element_blank(),
1549426742106:plot.margin      = margin(10,10,0,10, "mm"),
1549426742107:panel.spacing    = unit(4, "mm"),
1549426742108:plot.caption     = element_text(size = baseTextSize * 0.7, face = "italic"),
1549426742109:plot.title       = element_text(hjust = 0.5),
1549426742111:plot.subtitle    = element_text(hjust = 0.5),
1549426742112:strip.background = element_rect(size = lineSize),
1549426742114:strip.text       = element_text(size = stripTextSize),
1549426742115:text             = element_text(size = baseTextSize)
1549426742117:)
1549426742119:)
1549426742123:samples <- levels(data.to.plot$Sample)
1549426742125:loci    <- levels(data.to.plot$Locus)
1549426742128:for (sam in samples[1]) {
1549426742130:# print(sam)
1549426742131:subset   <- data.to.plot %>% filter(Sample == sam)
1549426742133:# print(str_glue("sample {sam}: nLoci = {length(loci)}  nAlleles = {length(alleles)}"))
1549426742136:subToPlot <- subset %>% filter(Locus %in% loci[c(1:8,37)])
1549426742137:loci     <- as.character(unique(subToPlot$Locus))
1549426742139:alleles  <- as.character(unique(subToPlot$Allele))
1549426742140:nLoci    <- length(loci)
1549426742142:nAlleles <- length(alleles)
1549426742143:# which(loci %in% c("NEIS1689"))
1549426742145:max.x    <- max(subToPlot$Position)
1549426742147:max.y    <- max(subToPlot$kmerDepth)
1549426742148:x.limits <- seq(0, max.x, 100)
1549426742150:y.limits <- seq(0, max.y, 20)
1549426742154:rowsPerPage   <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549426742156:colourCount   <- rowsPerPage
1549426742157:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549426742159:borderPalette <- darkColors(fillPalette, 0.6)
1549426742162:# Depth plot -------------------------------------------------------------
1549426742164:# lociPerPage    <- 3
1549426742165:wFactor        <- 4.8
1549426742167:plotTitlesSize <- 2.39
1549426742170:getPlotHeight <- function(rows, extras){
1549426742172:hFactor <- ifelse(rows == 1, 1.88, 1.6)
1549426742174:# loci + titles and foot note + strip + space between locus
1549426742175:(rows*hFactor) + extras + ((rows-1)*0.157*2) #in
1549426742177:}
1549426742180:# rowsPerPage <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549426742182:height      <- getPlotHeight(rowsPerPage, plotTitlesSize)
1549426742186:width       <- nAlleles * wFactor
1549426742189:loci        <- unique(data.to.plot$Locus)
1549426742191:sets        <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549426742194:plots <- lapply(sets, function(set, dp=subToPlot, rp=rowsPerPage){
1549426742196:# set=sets[[1]]; dp=subToPlot; rp=rowsPerPage
1549426742201:nLoci        <- length(set)
1549426742202:subsetToPlot <- dp %>% filter(Locus %in% set)
1549426742204:# subPalette   <-
1549426742205:ld           <- getLabelsData(subsetToPlot)
1549426742207:p            <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette, sample.name)
1549426742209:if(nLoci < rp){
1549426742210:hlay    <- matrix(c(1, NA))
1549426742212:total   <- getPlotHeight(rp, plotTitlesSize)
1549426742213:cHeight <- getPlotHeight(nLoci, plotTitlesSize)
1549426742215:blank   <- getPlotHeight(rp-nLoci, 0)
1549426742217:heights <- matrix(c(cHeight/total, blank/total))
1549426742218:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549426742220:}
1549426742222:p
1549426742223:})
1549426742227:if (out.format == "pdf") {
1549426742229:out.filename <- paste(out.prefix, out.format, sep = ".")
1549426742231:ml <- marrangeGrob(plots, nrow=1, ncol=1, padding = unit(10, "mm"),
1549426742233:top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549426742237:ggsave(filename = out.filename, plot = ml,
1549426742241:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549426742244:}
1549426742247:else {
1549426742250:for (i in seq_along(plots)) {
1549426742252:out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549426742254:ggsave(filename = out.filename, plot = plots[[i]],
1549426742256:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549426742258:}
1549426742260:}
1549426742262:}
1549426742265:# # Palette definition ------------------------------------------------------
1549426742267:# # colourCount <- length(unique(inData$Locus))
1549426742269:# rowsPerPage <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549426742271:# # colourCount <- nLoci
1549426742273:# colourCount <- rowsPerPage
1549426742275:# # colourCount  <- length(unique(data.to.plot$Allele))
1549426742277:# # fillPalette  <- colorRampPalette(brewer.pal(8, "Dark2"))(colourCount)
1549426742279:# # fillPalette  <- colorRampPalette(brewer.pal(12, "Paired"))(colourCount)
1549426742281:# # fillPalette  <- colorRampPalette(brewer.pal(9, "Set1"))(colourCount)
1549426742283:# # fillPalette  <- colorRampPalette(pal_npg("nrc")(10))(colourCount)
1549426742285:# # fillPalette  <- colorRampPalette(pal_d3("category20")(20))(colourCount)
1549426742287:# fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549426742289:# borderPalette <- darkColors(fillPalette, 0.6)
1549426742290:# # library("scales"); show_col(fillPalette); show_col(borderPalette)
1549426742296:# #
1549426742298:# # Depth plot -------------------------------------------------------------
1549426742299:# # lociPerPage    <- 3
1549426742301:# wFactor        <- 4.8
1549426742303:# plotTitlesSize <- 2.39
1549426742305:#
1549426742307:# getPlotHeight <- function(rows, extras){
1549426742309:# 	hFactor <- ifelse(rows == 1, 1.88, 1.6)
1549426742311:# 	# loci + titles and foot note + strip + space between locus
1549426742313:# 	(rows*hFactor) + extras + ((rows-1)*0.157) #in
1549426742315:# }
1549426742317:#
1549426742319:# # rowsPerPage <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549426742321:# height      <- getPlotHeight(rowsPerPage, plotTitlesSize)
1549426742324:# width       <- nAlleles * wFactor
1549426742326:# loci        <- unique(data.to.plot$Locus)
1549426742328:# sets        <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549426742330:#
1549426742332:# plots <- lapply(sets, function(set, dp=data.to.plot, rp=rowsPerPage){
1549426742334:# 	nLoci        <- length(set)
1549426742336:# 	subsetToPlot <- dp %>% filter(Locus %in% set)
1549426742338:# 	# subPalette   <-
1549426742340:# 	ld           <- getLabelsData(subsetToPlot)
1549426742342:# 	p            <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette)
1549426742345:# 	if(nLoci < rp){
1549426742347:# 		hlay    <- matrix(c(1, NA))
1549426742349:# 		total   <- getPlotHeight(rp, plotTitlesSize)
1549426742351:# 		cHeight <- getPlotHeight(nLoci, plotTitlesSize)
1549426742353:# 		blank   <- getPlotHeight(rp-nLoci, 0)
1549426742355:# 		heights <- matrix(c(cHeight/total, blank/total))
1549426742357:# 		p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549426742359:# 	}
1549426742361:# 	p
1549426742363:# })
1549426742365:#
1549426742367:# if (out.format == "pdf") {
1549426742369:# 	out.filename <- paste(out.prefix, out.format, sep = ".")
1549426742371:# 	ml <- marrangeGrob(plots, nrow=1, ncol=1, padding = unit(10, "mm"),
1549426742373:# 										 top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549426742375:# 	ggsave(filename = out.filename, plot = ml,
1549426742377:# 				 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549426742379:# }
1549426742381:# else {
1549426742384:# 	for (i in seq_along(plots)) {
1549426742386:# 		out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549426742389:# 		ggsave(filename = out.filename, plot = plots[[i]],
1549426742391:# 					 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549426742393:# 	}
1549426742395:# }
1549426742397:#
1549426742399:# # # Depth distribution plot ------------------------------------------------
1549426742401:# # hFactor  <- 3
1549426742403:# # wFactor  <- 2
1549426742405:# # if (nLoci == 1)
1549426742407:# #   hFactor <- 3.5
1549426742409:# # height       <- nLoci * hFactor
1549426742411:# # width        <- nAlleles * wFactor
1549426742413:# # # Generate plot
1549426742415:# # (dist.plot <- plotDepthDist(data.to.plot, labelsData, fillPalette, borderPalette))
1549426742417:# # # Save plot
1549426742419:# # out.filename <- paste0(out.prefix, "_dist.", out.format)
1549426742421:# # if (out.format == "png") {
1549426742423:# #   ggsave(filename = out.filename, plot = dist.plot,
1549426742425:# #          width  = width, height = height, type = "cairo-png", dpi = 300)
1549426742427:# # } else {
1549426742429:# #   ggsave(filename = out.filename, plot = dist.plot,
1549426742430:# #          width  = width, height = height, dpi = 400)
1549426742432:# # }
1549426742434:#
1549426742436:cat("Done! \n")
1549426742440:# Code core - End ---------------------------------------------------------
1549426742442:}
1549426802077:#!/usr/bin/env Rscript
1549426802078:# ##############################################################################
1549426802078:#  Author:   Hector Fabio Espitia-Navarro
1549426802078:#            Georgia Institute of Technology
1549426802079:#  Version:  1.0
1549426802079:#  Date:     01/19/2019
1549426802079:# ##############################################################################
1549426802080:# Install required packages -----------------------------------------------
1549426802080:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549426802081:if(!file.exists(personal.lib.path))
1549426802081:dir.create(personal.lib.path)
1549426802082:printMessage <- function(message, verbose){
1549426802082:if(verbose)
1549426802082:cat(message)
1549426802083:}
1549426802084:# crayon::bold("Hola")
1549426802084:installAndLoadPackages <- function(pkg, verbose){
1549426802085:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1549426802085:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1549426802086:printMessage("Done!\n", verbose)
1549426802086:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549426802087:if (length(new.pkg)) {
1549426802088:printMessage("Installing new packages... ", verbose)
1549426802089:install.packages(new.pkg, dependencies = TRUE,
1549426802090:repos="http://cran.rstudio.com/",
1549426802091:lib = personal.lib.path)
1549426802091:printMessage("Done!\n", verbose)
1549426802091:}
1549426802092:printMessage("Loading required packages... ", verbose)
1549426802092:sapply(pkg, function(x){
1549426802093:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549426802093:})
1549426802093:printMessage("Done!\n", verbose)
1549426802094:}
1549426802095:# github.related.packages <- c("devtools", "Rcpp")
1549426802095:# packages <- c("argparser", "tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite")
1549426802095:packages <- c("tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite", "gridExtra")
1549426802096:# installAndLoadPackages(packages, verbose = TRUE)
1549426802097:installAndLoadPackages("argparser", verbose = FALSE)
1549426802149:# Command line arguments processing ---------------------------------------
1549426802149:# Get script name
1549426802149:initial.options <- commandArgs(trailingOnly = FALSE)
1549426802150:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1549426802150:# Process command line arguments
1549426802151:# Create a parser
1549426802151:p <- arg_parser("This script generates k-mer depth plots using a depth file generated by the\033[1mSTing typer\033[22m tool (-t option).",
1549426802151:name = script.name)
1549426802213:# Add Positional arguments (required)
1549426802213:p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
1549426802214:# Add options
1549426802215:p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1549426802215:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1549426802216:default = "kmer_depth")
1549426802217:p <- add_argument(p, "--sample_name", help = "Sample name.",
1549426802217:default = "input file's name")
1549426802218:p <- add_argument(p, "--max_loci_per_page", help = "Maximum number of loci to print on each page.",
1549426802219:default = 7)
1549426802220:p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'",
1549426802220:default = "pdf")
1549426802221:# Initialization of variables ---------------------------------------------
1549426802221:# Values to test the script using RStudio
1549426802221:script.home       <- "/home/hspitia/Dropbox/gatech/projects/STing/manuscript/data/typer/v0.24/detector_on_failed"
1549426802222:# inputFile         <- paste(script.home, "ERR036060.depth.2.tsv", sep = "/")
1549426802222:# geneFile          <- paste(script.home, "rmlst_failed_loci.txt", sep = "/")
1549426802222:inputFile         <- paste(script.home, "detector.v024.nm20.cgmlst.failed_alleles.depth.for_plotting.tsv.gz", sep = "/")
1549426802223:geneFile          <- paste(script.home, "loci.txt", sep = "/")
1549426802223:out.prefix        <- "kmer_depth"
1549426802224:sample.name       <- basename(inputFile)
1549426802224:max.loci.per.page <- 7
1549426802225:out.format        <- "pdf"
1549426802225:# Parse command line arguments
1549426802226:command.line = F  # Turn to FALSE to test the script inside RStudio
1549426802226:argv <- list()
1549426802226:if(command.line) {
1549426802227:argv <- parse_args(p)
1549426802227:} else {
1549426802227:argv <- parse_args(p, list(inputFile,
1549426802228:"--gene_file", geneFile,
1549426802228:"--prefix", out.prefix,
1549426802229:"--sample_name", sample.name,
1549426802229:"--max_loci_per_page", max.loci.per.page,
1549426802230:"--format", out.format))
1549426802230:}
1549426802237:# Get argument values from the command line
1549426802238:input.file        <- argv$input_file
1549426802238:gene.file         <- argv$gene_file
1549426802239:out.format        <- argv$format
1549426802239:out.prefix        <- argv$prefix
1549426802240:max.loci.per.page <- argv$max_loci_per_page
1549426802240:sample.name       <- argv$sample_name
1549426802240:# if (sample.name == "")
1549426802241:if (sample.name == "input file's name")
1549426802241:sample.name <- basename(input.file)
1549426802242:# Function to check if file exists ----------------------------------------
1549426802242:CheckFileExists <- function(file.list) {
1549426802242:non.exist.files <- !file.exists(file.list)
1549426802243:if(any(non.exist.files)) {
1549426802243:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549426802243:}
1549426802243:}
1549426802244:# Check for input files ---------------------------------------------------
1549426802244:files.to.check <- c(input.file)
1549426802245:error.message  <- CheckFileExists(files.to.check)
1549426802245:if(!is.null(error.message)){
1549426802246:stop(error.message)
1549426802246:} else {
1549426802246:# Code core - Begin -------------------------------------------------------
1549426802247:installAndLoadPackages(packages, verbose = TRUE)
1549426802247:# FUNCTIONS:
1549426802247:# Function to dark a list of colors ---------------------------------------
1549426802247:darkColors <- function(palette, level){
1549426802248:rgbColors <- as.data.frame(t(as.data.frame(lapply(as.data.frame(t(col2rgb(palette))),
1549426802248:function(x) { round(x * level)}))))
1549426802248:unname(sapply(rgbColors, function(x){ rgb(x[1], x[2], x[3], maxColorValue=255) }))
1549426802249:}
1549426802249:# Function for plotting k-mer depth ----------------------------------------
1549426802249:plotDepth <- function(dataToPlot, labelsData, fillColors, borderColors, sampleName) {
1549426802250:max.x       <- max(dataToPlot$Position)
1549426802250:max.y       <- max(dataToPlot$kmerDepth)
1549426802250:x.limits    <- seq(0, max.x, 100)
1549426802251:y.limits    <- seq(0, max.y, 20)
1549426802251:# nTopAlleles <- length(unique(dataToPlot$N))
1549426802252:d.plot <- ggplot(data = dataToPlot, aes(x = Position, y = kmerDepth),
1549426802252:size = 0.2) +
1549426802253:geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1549426802253:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1549426802254:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1549426802254:scale_color_manual(values = borderColors) +
1549426802255:scale_fill_manual(values = fillColors) +
1549426802255:geom_text(data = labelsData,
1549426802255:# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1549426802256:# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1549426802256:aes(x = Length, y = info.y * 0.5, group = Locus,
1549426802257:hjust = 0,
1549426802257:label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1549426802258:show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1549426802258:nudge_x = -(max.x*0.025)
1549426802259:) +
1549426802260:geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1549426802260:alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1549426802261:# geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1549426802261:size = annotTextSize * 1.05, color = "#333333") +
1549426802262:geom_text(data = labelsData,
1549426802262:parse = TRUE,
1549426802263:aes(x = info.x, y = info.y,
1549426802263:label = paste0("{{{italic(hat(f)[k]) ==", format(round(NormKmerCount, 2), nsmall = 2),
1549426802264:"*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1549426802264:"*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1549426802265:"~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1549426802266:hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1549426802266:# facet_grid(Locus ~ N, scales = "free_y") +
1549426802267:facet_grid(rows = vars(Locus), cols = vars(AlleleType, NumAllele), scales = "free") +
1549426802267:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1549426802268:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1549426802269:theme_bw() +
1549426802269:plotTheme +
1549426802270:labs(title    = expression(italic("k")*"-mer Depth Distribution"),
1549426802270:subtitle = paste("Observed and predicted alleles on sample", sampleName),
1549426802271:x        = "Position along sequence (bp)",
1549426802272:y        = expression(paste(italic(k), "-mer depth")),
1549426802272:# caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1549426802274:caption  = expression(paste(#italic("s"),": score;  ",
1549426802275:italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1549426802277:italic("c"),": coverage;  ",
1549426802278:italic(sigma), ": standard deviation;  ",
1549426802279:italic(bar(d)), ": average depth"), sep = "")
1549426802280:)
1549426802281:d.plot
1549426802281:}
1549426802283:# Function to get data for annotations ------------------------------------
1549426802283:getLabelsData <- function(data.to.plot) {
1549426802284:# data.to.plot=subToPlot
1549426802285:max.x <- max(data.to.plot$Position)
1549426802285:max.y <- max(data.to.plot$kmerDepth)
1549426802287:locAllele <- data.to.plot %>% select(Locus, Allele) %>% distinct()
1549426802287:alleles   <- as.character(locAllele$Allele)
1549426802288:loci      <- as.character(locAllele$Locus)
1549426802289:nAlleles  <- length(alleles)
1549426802290:nLoci     <- length(loci)
1549426802290:# alleleType  <- c()
1549426802291:lociLabels  <- c()
1549426802292:name.x      <- c()
1549426802293:name.y      <- c()
1549426802294:info.x      <- c()
1549426802295:info.y      <- c()
1549426802296:covs        <- c()
1549426802297:avgDepths   <- c()
1549426802298:meanDepth.x <- c()
1549426802300:meanDepth.y <- c()
1549426802301:# for (i in loci) {
1549426802302:#   lociLabels <- c(lociLabels, rep(i, nAlleles))
1549426802302:# }
1549426802303:for (allele in alleles) {
1549426802304:locus     <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]) %>% pull())
1549426802305:maxPos    <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549426802306:maxDepth  <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549426802307:name.x    <- c(name.x, (max.x / 2))
1549426802307:name.y    <- c(name.y, (maxDepth * 0.25))
1549426802308:info.x    <- c(info.x, max.x * 0.02)
1549426802309:info.y    <- c(info.y, maxDepth * 1.5)
1549426802310:covs      <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549426802312:avgDepths <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549426802313:}
1549426802313:labelsData <- tibble(Locus = loci,
1549426802314:Allele = alleles,
1549426802315:name.x = name.x,
1549426802316:name.y = name.y,
1549426802317:info.x = info.x,
1549426802318:info.y = info.y,
1549426802319:meanDepth = avgDepths,
1549426802320:# N = rep(unique(data.to.plot$N), nLoci),
1549426802321:# Locus = lociLabels,
1549426802322:cov = covs
1549426802324:) %>%
1549426802325:left_join(data.to.plot %>%
1549426802327:mutate(Locus = as.character(Locus),
1549426802328:Allele = as.character(Allele),
1549426802329:NumAllele = as.character(NumAllele)) %>%
1549426802331:group_by(Locus, Allele, NumAllele, AlleleType, Length, NormKmerCount) %>%
1549426802332:summarise(sd = sd(kmerDepth)),
1549426802334:by = c("Locus", "Allele"))
1549426802335:labelsData
1549426802337:}
1549426802340:# Check for genes/loci file to filter loci to plot  -----------------------
1549426802341:loci.to.plot <- c()
1549426802344:# if (!is.null(gene.file)|| gene.file != "") {
1549426802345:if (!is.null(gene.file) && !is.na(gene.file) && gene.file != "") {
1549426802346:error.message <- CheckFileExists(gene.file)
1549426802347:if (!is.null(error.message)){
1549426802348:cat("Warning:")
1549426802349:cat(error.message)
1549426802350:cat("  The plotting process will continue without filtering genes/loci.\n")
1549426802351:} else {
1549426802352:loci.to.plot <- scan(gene.file, character(), quiet = TRUE)
1549426802353:}
1549426802354:}
1549426802356:# Data processing and plotting --------------------------------------------
1549426802357:cat("Plotting depths... ")
1549426802359:options(stringsAsFactors = T, readr.num_columns = 0)
1549426802360:# Load data
1549426802361:inData <- read_tsv(input.file)
1549426802362:colnames(inData) <- c("Sample", "Locus", "Allele", "Position", "kmerDepth",
1549426802363:"NormKmerCount", "Coverage", "AverageKmerDepth",
1549426802364:"AlleleType", "NumAllele", "WeightedKmerDepth", "AlleleNumber",
1549426802365:"RunMode", "kmerCounts", "Length")
1549426802367:# Transform data
1549426802368:data.to.plot <- inData %>%
1549426802369:mutate(
1549426802370:Sample = factor(Sample, levels = unique(inData$Sample)),
1549426802371:Locus = factor(Locus, levels = unique(inData$Locus)),
1549426802372:AlleleType = factor(AlleleType, levels = unique(inData$AlleleType)),
1549426802374:NumAllele = factor(NumAllele, levels = unique(inData$NumAllele)),
1549426802375:RunMode = factor(RunMode, levels = unique(inData$RunMode)),
1549426802376:Allele = factor(Allele, levels = unique(inData$Allele))
1549426802377:)
1549426802380:tmp <- inData %>%
1549426802381:group_by(Sample, Locus, Allele, AlleleType, NumAllele) %>%
1549426802382:summarise(Length = n())
1549426802383:# # Filtering loci/genes from genes_file input param
1549426802384:# if (length(loci.to.plot) > 0) {
1549426802385:#   data.to.plot <- data.to.plot %>%
1549426802386:#     filter(Locus %in% loci.to.plot)
1549426802387:# }
1549426802389:longestLocusNameLength <- max(str_length(as.character(unique(inData$Locus))))
1549426802390:nSamples <- length(unique(data.to.plot$Sample))
1549426802391:# nLoci    <- length(unique(data.to.plot$Locus))
1549426802392:# nAlleles <- length(unique(data.to.plot$Alleles))
1549426802395:# Theme-related variable definition ---------------------------------------
1549426802396:annotLinetype     <- "solid"
1549426802399:annotTextSize     <- 4
1549426802401:axisColor         <- "#000000"
1549426802402:axisTextSize      <- 12
1549426802404:barAnnotTextSize  <- 4
1549426802405:baseTextSize      <- 14
1549426802406:gridColor         <- "#e0e0e0"
1549426802407:lineSize          <- 0.3
1549426802408:# panelColor        <- "#ffffff"
1549426802410:# panelColor        <- "#fff4e0"
1549426802411:panelColor        <- "#f2efe6"
1549426802413:# stripBackground   <- "#cccccc"
1549426802415:stripTextSize     <- axisTextSize
1549426802417:if (longestLocusNameLength > 12)
1549426802418:stripTextSize  <- stripTextSize * 0.6
1549426802419:textColor  <- "#000000"
1549426802423:# baseFontFamily        <- "Arial"
1549426802427:# Custom theme definition for plots ---------------------------------------
1549426802429:plotTheme <- list(
1549426802431:theme(
1549426802433:axis.text.x      = element_text(angle = 50, size = axisTextSize,
1549426802435:vjust = 1, hjust = 1, color = textColor),
1549426802437:axis.text.y      = element_text(size = axisTextSize, color = textColor),
1549426802438:axis.ticks       = element_line(size = lineSize),
1549426802439:axis.title.x     = element_text(margin = margin(6,0,8,0, "mm")),
1549426802441:axis.title.y     = element_text(margin = margin(0,6,0,0, "mm")),
1549426802442:legend.position  = "none",
1549426802443:panel.border     = element_rect(size = lineSize),
1549426802444:panel.background = element_rect(fill = panelColor),
1549426802446:panel.grid       = element_line(size = lineSize, colour = gridColor),
1549426802448:panel.grid.minor = element_blank(),
1549426802450:plot.margin      = margin(10,10,0,10, "mm"),
1549426802452:panel.spacing    = unit(4, "mm"),
1549426802453:plot.caption     = element_text(size = baseTextSize * 0.7, face = "italic"),
1549426802454:plot.title       = element_text(hjust = 0.5),
1549426802456:plot.subtitle    = element_text(hjust = 0.5),
1549426802457:strip.background = element_rect(size = lineSize),
1549426802459:strip.text       = element_text(size = stripTextSize),
1549426802460:text             = element_text(size = baseTextSize)
1549426802461:)
1549426802463:)
1549426802465:samples <- levels(data.to.plot$Sample)
1549426802467:loci    <- levels(data.to.plot$Locus)
1549426802470:for (sam in samples[1]) {
1549426802471:# print(sam)
1549426802472:subset   <- data.to.plot %>% filter(Sample == sam)
1549426802474:# print(str_glue("sample {sam}: nLoci = {length(loci)}  nAlleles = {length(alleles)}"))
1549426802477:subToPlot <- subset %>% filter(Locus %in% loci[c(1:8,37)])
1549426802478:loci     <- as.character(unique(subToPlot$Locus))
1549426802480:alleles  <- as.character(unique(subToPlot$Allele))
1549426802481:nLoci    <- length(loci)
1549426802483:nAlleles <- length(alleles)
1549426802484:# which(loci %in% c("NEIS1689"))
1549426802486:max.x    <- max(subToPlot$Position)
1549426802488:max.y    <- max(subToPlot$kmerDepth)
1549426802489:x.limits <- seq(0, max.x, 100)
1549426802491:y.limits <- seq(0, max.y, 20)
1549426802496:rowsPerPage   <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549426802499:colourCount   <- rowsPerPage
1549426802501:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549426802502:borderPalette <- darkColors(fillPalette, 0.6)
1549426802505:# Depth plot -------------------------------------------------------------
1549426802507:# lociPerPage    <- 3
1549426802509:wFactor        <- 4.8
1549426802510:plotTitlesSize <- 2.39
1549426802513:getPlotHeight <- function(rows, extras){
1549426802515:hFactor <- ifelse(rows == 1, 1.88, 1.6)
1549426802517:# loci + titles and foot note + strip + space between locus
1549426802518:(rows*hFactor) + extras + ((rows-1)*0.157*2) #in
1549426802520:}
1549426802523:# rowsPerPage <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549426802524:height      <- getPlotHeight(rowsPerPage, plotTitlesSize)
1549426802526:width       <- nAlleles * wFactor
1549426802528:loci        <- unique(data.to.plot$Locus)
1549426802529:sets        <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549426802532:plots <- lapply(sets, function(set, dp=subToPlot, rp=rowsPerPage){
1549426802534:# set=sets[[1]]; dp=subToPlot; rp=rowsPerPage
1549426802538:nLoci        <- length(set)
1549426802540:subsetToPlot <- dp %>% filter(Locus %in% set)
1549426802542:# subPalette   <-
1549426802543:ld           <- getLabelsData(subsetToPlot)
1549426802545:p            <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette, sample.name)
1549426802547:if(nLoci < rp){
1549426802548:hlay    <- matrix(c(1, NA))
1549426802550:total   <- getPlotHeight(rp, plotTitlesSize)
1549426802552:cHeight <- getPlotHeight(nLoci, plotTitlesSize)
1549426802553:blank   <- getPlotHeight(rp-nLoci, 0)
1549426802555:heights <- matrix(c(cHeight/total, blank/total))
1549426802557:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549426802558:}
1549426802560:p
1549426802562:})
1549426802565:if (out.format == "pdf") {
1549426802567:out.filename <- paste(out.prefix, out.format, sep = ".")
1549426802569:ml <- marrangeGrob(plots, nrow=1, ncol=1, padding = unit(10, "mm"),
1549426802570:top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549426802572:ggsave(filename = out.filename, plot = ml,
1549426802574:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549426802576:}
1549426802578:else {
1549426802580:for (i in seq_along(plots)) {
1549426802581:out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549426802583:ggsave(filename = out.filename, plot = plots[[i]],
1549426802585:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549426802587:}
1549426802589:}
1549426802590:}
1549426802594:# # Palette definition ------------------------------------------------------
1549426802597:# # colourCount <- length(unique(inData$Locus))
1549426802599:# rowsPerPage <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549426802601:# # colourCount <- nLoci
1549426802603:# colourCount <- rowsPerPage
1549426802605:# # colourCount  <- length(unique(data.to.plot$Allele))
1549426802607:# # fillPalette  <- colorRampPalette(brewer.pal(8, "Dark2"))(colourCount)
1549426802609:# # fillPalette  <- colorRampPalette(brewer.pal(12, "Paired"))(colourCount)
1549426802611:# # fillPalette  <- colorRampPalette(brewer.pal(9, "Set1"))(colourCount)
1549426802613:# # fillPalette  <- colorRampPalette(pal_npg("nrc")(10))(colourCount)
1549426802615:# # fillPalette  <- colorRampPalette(pal_d3("category20")(20))(colourCount)
1549426802616:# fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549426802618:# borderPalette <- darkColors(fillPalette, 0.6)
1549426802620:# # library("scales"); show_col(fillPalette); show_col(borderPalette)
1549426802625:# #
1549426802627:# # Depth plot -------------------------------------------------------------
1549426802629:# # lociPerPage    <- 3
1549426802631:# wFactor        <- 4.8
1549426802633:# plotTitlesSize <- 2.39
1549426802635:#
1549426802637:# getPlotHeight <- function(rows, extras){
1549426802638:# 	hFactor <- ifelse(rows == 1, 1.88, 1.6)
1549426802640:# 	# loci + titles and foot note + strip + space between locus
1549426802642:# 	(rows*hFactor) + extras + ((rows-1)*0.157) #in
1549426802644:# }
1549426802646:#
1549426802648:# # rowsPerPage <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549426802650:# height      <- getPlotHeight(rowsPerPage, plotTitlesSize)
1549426802651:# width       <- nAlleles * wFactor
1549426802653:# loci        <- unique(data.to.plot$Locus)
1549426802655:# sets        <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549426802657:#
1549426802659:# plots <- lapply(sets, function(set, dp=data.to.plot, rp=rowsPerPage){
1549426802661:# 	nLoci        <- length(set)
1549426802662:# 	subsetToPlot <- dp %>% filter(Locus %in% set)
1549426802664:# 	# subPalette   <-
1549426802666:# 	ld           <- getLabelsData(subsetToPlot)
1549426802668:# 	p            <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette)
1549426802670:# 	if(nLoci < rp){
1549426802671:# 		hlay    <- matrix(c(1, NA))
1549426802673:# 		total   <- getPlotHeight(rp, plotTitlesSize)
1549426802675:# 		cHeight <- getPlotHeight(nLoci, plotTitlesSize)
1549426802677:# 		blank   <- getPlotHeight(rp-nLoci, 0)
1549426802679:# 		heights <- matrix(c(cHeight/total, blank/total))
1549426802681:# 		p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549426802683:# 	}
1549426802685:# 	p
1549426802687:# })
1549426802689:#
1549426802691:# if (out.format == "pdf") {
1549426802694:# 	out.filename <- paste(out.prefix, out.format, sep = ".")
1549426802696:# 	ml <- marrangeGrob(plots, nrow=1, ncol=1, padding = unit(10, "mm"),
1549426802698:# 										 top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549426802700:# 	ggsave(filename = out.filename, plot = ml,
1549426802702:# 				 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549426802704:# }
1549426802706:# else {
1549426802707:# 	for (i in seq_along(plots)) {
1549426802709:# 		out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549426802712:# 		ggsave(filename = out.filename, plot = plots[[i]],
1549426802714:# 					 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549426802716:# 	}
1549426802718:# }
1549426802720:#
1549426802722:# # # Depth distribution plot ------------------------------------------------
1549426802723:# # hFactor  <- 3
1549426802725:# # wFactor  <- 2
1549426802727:# # if (nLoci == 1)
1549426802729:# #   hFactor <- 3.5
1549426802731:# # height       <- nLoci * hFactor
1549426802733:# # width        <- nAlleles * wFactor
1549426802734:# # # Generate plot
1549426802736:# # (dist.plot <- plotDepthDist(data.to.plot, labelsData, fillPalette, borderPalette))
1549426802738:# # # Save plot
1549426802740:# # out.filename <- paste0(out.prefix, "_dist.", out.format)
1549426802742:# # if (out.format == "png") {
1549426802743:# #   ggsave(filename = out.filename, plot = dist.plot,
1549426802745:# #          width  = width, height = height, type = "cairo-png", dpi = 300)
1549426802747:# # } else {
1549426802749:# #   ggsave(filename = out.filename, plot = dist.plot,
1549426802751:# #          width  = width, height = height, dpi = 400)
1549426802754:# # }
1549426802757:#
1549426802759:cat("Done! \n")
1549426802767:# Code core - End ---------------------------------------------------------
1549426802769:}
1549426831994:rlang::last_error()
1549426899671:subsetToPlot
1549426906440:# subPalette   <-
1549426906441:ld           <- getLabelsData(subsetToPlot)
1549426909672:#!/usr/bin/env Rscript
1549426909672:# ##############################################################################
1549426909672:#  Author:   Hector Fabio Espitia-Navarro
1549426909673:#            Georgia Institute of Technology
1549426909673:#  Version:  1.0
1549426909673:#  Date:     01/19/2019
1549426909674:# ##############################################################################
1549426909674:# Install required packages -----------------------------------------------
1549426909674:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549426909675:if(!file.exists(personal.lib.path))
1549426909675:dir.create(personal.lib.path)
1549426909676:printMessage <- function(message, verbose){
1549426909676:if(verbose)
1549426909677:cat(message)
1549426909677:}
1549426909678:# crayon::bold("Hola")
1549426909678:installAndLoadPackages <- function(pkg, verbose){
1549426909678:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1549426909679:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1549426909679:printMessage("Done!\n", verbose)
1549426909680:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549426909680:if (length(new.pkg)) {
1549426909680:printMessage("Installing new packages... ", verbose)
1549426909681:install.packages(new.pkg, dependencies = TRUE,
1549426909681:repos="http://cran.rstudio.com/",
1549426909682:lib = personal.lib.path)
1549426909682:printMessage("Done!\n", verbose)
1549426909683:}
1549426909683:printMessage("Loading required packages... ", verbose)
1549426909683:sapply(pkg, function(x){
1549426909684:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549426909684:})
1549426909684:printMessage("Done!\n", verbose)
1549426909685:}
1549426909685:# github.related.packages <- c("devtools", "Rcpp")
1549426909686:# packages <- c("argparser", "tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite")
1549426909686:packages <- c("tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite", "gridExtra")
1549426909686:# installAndLoadPackages(packages, verbose = TRUE)
1549426909687:installAndLoadPackages("argparser", verbose = FALSE)
1549426909719:# Command line arguments processing ---------------------------------------
1549426909719:# Get script name
1549426909719:initial.options <- commandArgs(trailingOnly = FALSE)
1549426909720:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1549426909720:# Process command line arguments
1549426909721:# Create a parser
1549426909721:p <- arg_parser("This script generates k-mer depth plots using a depth file generated by the\033[1mSTing typer\033[22m tool (-t option).",
1549426909721:name = script.name)
1549426909731:# Add Positional arguments (required)
1549426909731:p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
1549426909732:# Add options
1549426909732:p <- add_argument(p, "--gene_file", help = "Path to a text file with a list of genes/loci to be plotted.")
1549426909733:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1549426909733:default = "kmer_depth")
1549426909734:p <- add_argument(p, "--sample_name", help = "Sample name.",
1549426909734:default = "input file's name")
1549426909735:p <- add_argument(p, "--max_loci_per_page", help = "Maximum number of loci to print on each page.",
1549426909736:default = 7)
1549426909737:p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'",
1549426909737:default = "pdf")
1549426909738:# Initialization of variables ---------------------------------------------
1549426909738:# Values to test the script using RStudio
1549426909739:script.home       <- "/home/hspitia/Dropbox/gatech/projects/STing/manuscript/data/typer/v0.24/detector_on_failed"
1549426909739:# inputFile         <- paste(script.home, "ERR036060.depth.2.tsv", sep = "/")
1549426909739:# geneFile          <- paste(script.home, "rmlst_failed_loci.txt", sep = "/")
1549426909740:inputFile         <- paste(script.home, "detector.v024.nm20.cgmlst.failed_alleles.depth.for_plotting.tsv.gz", sep = "/")
1549426909740:geneFile          <- paste(script.home, "loci.txt", sep = "/")
1549426909741:out.prefix        <- "kmer_depth"
1549426909741:sample.name       <- basename(inputFile)
1549426909742:max.loci.per.page <- 7
1549426909742:out.format        <- "pdf"
1549426909742:# Parse command line arguments
1549426909743:command.line = F  # Turn to FALSE to test the script inside RStudio
1549426909743:argv <- list()
1549426909744:if(command.line) {
1549426909744:argv <- parse_args(p)
1549426909744:} else {
1549426909745:argv <- parse_args(p, list(inputFile,
1549426909745:"--gene_file", geneFile,
1549426909745:"--prefix", out.prefix,
1549426909746:"--sample_name", sample.name,
1549426909746:"--max_loci_per_page", max.loci.per.page,
1549426909747:"--format", out.format))
1549426909747:}
1549426909838:# Get argument values from the command line
1549426909838:input.file        <- argv$input_file
1549426909839:gene.file         <- argv$gene_file
1549426909839:out.format        <- argv$format
1549426909840:out.prefix        <- argv$prefix
1549426909840:max.loci.per.page <- argv$max_loci_per_page
1549426909841:sample.name       <- argv$sample_name
1549426909841:# if (sample.name == "")
1549426909842:if (sample.name == "input file's name")
1549426909842:sample.name <- basename(input.file)
1549426909843:# Function to check if file exists ----------------------------------------
1549426909843:CheckFileExists <- function(file.list) {
1549426909843:non.exist.files <- !file.exists(file.list)
1549426909843:if(any(non.exist.files)) {
1549426909844:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1549426909844:}
1549426909844:}
1549426909845:# Check for input files ---------------------------------------------------
1549426909845:files.to.check <- c(input.file)
1549426909846:error.message  <- CheckFileExists(files.to.check)
1549426909846:if(!is.null(error.message)){
1549426909847:stop(error.message)
1549426909847:} else {
1549426909847:# Code core - Begin -------------------------------------------------------
1549426909848:installAndLoadPackages(packages, verbose = TRUE)
1549426909848:# FUNCTIONS:
1549426909848:# Function to dark a list of colors ---------------------------------------
1549426909848:darkColors <- function(palette, level){
1549426909849:rgbColors <- as.data.frame(t(as.data.frame(lapply(as.data.frame(t(col2rgb(palette))),
1549426909849:function(x) { round(x * level)}))))
1549426909849:unname(sapply(rgbColors, function(x){ rgb(x[1], x[2], x[3], maxColorValue=255) }))
1549426909850:}
1549426909850:# Function for plotting k-mer depth ----------------------------------------
1549426909850:plotDepth <- function(dataToPlot, labelsData, fillColors, borderColors, sampleName) {
1549426909851:max.x       <- max(dataToPlot$Position)
1549426909851:max.y       <- max(dataToPlot$kmerDepth)
1549426909851:x.limits    <- seq(0, max.x, 100)
1549426909852:y.limits    <- seq(0, max.y, 20)
1549426909852:# nTopAlleles <- length(unique(dataToPlot$N))
1549426909853:d.plot <- ggplot(data = dataToPlot, aes(x = Position, y = kmerDepth),
1549426909853:size = 0.2) +
1549426909854:geom_vline(aes(xintercept = Length), size = 0.5, color = "#a5a5a5") +
1549426909854:geom_area(size = 0.4, alpha = 0.6, aes(color = Locus, fill = Locus)) +
1549426909854:# geom_area(alpha = 0.6, aes(color = Allele, fill = Allele)) +
1549426909855:scale_color_manual(values = borderColors) +
1549426909855:scale_fill_manual(values = fillColors) +
1549426909856:geom_text(data = labelsData,
1549426909856:# aes(x = Length, y = max.y*0.98, group = Locus, hjust = 1,
1549426909857:# aes(x = Length, y = info.y * 1.09, group = Locus, hjust = 1,
1549426909857:aes(x = Length, y = info.y * 0.5, group = Locus,
1549426909858:hjust = 0,
1549426909858:label = str_glue("{format(round(Length, 1), nsmall = 0, big.mark = ',')}")),
1549426909859:show.legend = F, color = "#a5a5a5", size = 3, angle = 90,
1549426909859:nudge_x = -(max.x*0.025)
1549426909860:) +
1549426909860:geom_label(data = labelsData, aes(x = name.x, y = name.y, label = Allele), fill = panelColor,
1549426909861:alpha = 0.5, label.size = 0, label.padding = unit(1, "mm"), label.r = unit(1, "mm"),
1549426909861:# geom_text(data = labelsData, aes(x = name.x, y = name.y, label = Allele),
1549426909862:size = annotTextSize * 1.05, color = "#333333") +
1549426909862:geom_text(data = labelsData,
1549426909863:parse = TRUE,
1549426909863:aes(x = info.x, y = info.y,
1549426909864:label = paste0("{{{italic(hat(f)[k]) ==", format(round(NormKmerCount, 2), nsmall = 2),
1549426909864:"*~~~italic(c)} ==", format(round(cov, 2), nsmall = 2), "*'%'",
1549426909865:"*~~~sigma} ==", format(round(sd, 2), nsmall = 2),
1549426909865:"~~~bar(italic(d))} ==", format(round(meanDepth, 2), nsmall = 2))),
1549426909866:hjust = "left", vjust = 1, size = annotTextSize * 0.8, color = "#222222") +
1549426909867:# facet_grid(Locus ~ N, scales = "free_y") +
1549426909867:facet_grid(rows = vars(Locus), cols = vars(AlleleType, NumAllele), scales = "free") +
1549426909868:# scale_x_discrete(limits = x.limits, expand = c(0, 2.0)) +
1549426909868:scale_x_discrete(limits = x.limits, expand = c(0.006, 2.0)) +
1549426909869:theme_bw() +
1549426909869:plotTheme +
1549426909870:labs(title    = expression(italic("k")*"-mer Depth Distribution"),
1549426909871:subtitle = paste("Observed and predicted alleles on sample", sampleName),
1549426909871:x        = "Position along sequence (bp)",
1549426909872:y        = expression(paste(italic(k), "-mer depth")),
1549426909873:# caption  = "cov: coverage; ad: average depth; sd: standard deviation")
1549426909874:caption  = expression(paste(#italic("s"),": score;  ",
1549426909875:italic(hat(f)[k]),": norm. ", italic("k"), "-mer freq.;  ",
1549426909877:italic("c"),": coverage;  ",
1549426909878:italic(sigma), ": standard deviation;  ",
1549426909879:italic(bar(d)), ": average depth"), sep = "")
1549426909880:)
1549426909883:d.plot
1549426909884:}
1549426909886:# Function to get data for annotations ------------------------------------
1549426909886:getLabelsData <- function(data.to.plot) {
1549426909887:# data.to.plot=subToPlot
1549426909888:max.x <- max(data.to.plot$Position)
1549426909888:max.y <- max(data.to.plot$kmerDepth)
1549426909890:locAllele <- data.to.plot %>% select(Locus, Allele) %>% distinct()
1549426909890:alleles   <- as.character(locAllele$Allele)
1549426909891:loci      <- as.character(locAllele$Locus)
1549426909892:nAlleles  <- length(alleles)
1549426909892:nLoci     <- length(loci)
1549426909893:# alleleType  <- c()
1549426909894:lociLabels  <- c()
1549426909894:name.x      <- c()
1549426909895:name.y      <- c()
1549426909896:info.x      <- c()
1549426909897:info.y      <- c()
1549426909897:covs        <- c()
1549426909898:avgDepths   <- c()
1549426909899:meanDepth.x <- c()
1549426909900:meanDepth.y <- c()
1549426909901:# for (i in loci) {
1549426909902:#   lociLabels <- c(lociLabels, rep(i, nAlleles))
1549426909902:# }
1549426909903:for (allele in alleles) {
1549426909904:locus     <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]) %>% pull())
1549426909905:maxPos    <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
1549426909906:maxDepth  <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
1549426909907:name.x    <- c(name.x, (max.x / 2))
1549426909907:name.y    <- c(name.y, (maxDepth * 0.25))
1549426909908:info.x    <- c(info.x, max.x * 0.02)
1549426909909:info.y    <- c(info.y, maxDepth * 1.5)
1549426909910:covs      <- as.numeric(c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"])))
1549426909911:avgDepths <- as.numeric(c(avgDepths, unique(data.to.plot[data.to.plot$Allele == allele, "AverageKmerDepth"])))
1549426909912:}
1549426909913:labelsData <- tibble(Locus = loci,
1549426909914:Allele = alleles,
1549426909915:name.x = name.x,
1549426909915:name.y = name.y,
1549426909916:info.x = info.x,
1549426909917:info.y = info.y,
1549426909918:meanDepth = avgDepths,
1549426909919:# N = rep(unique(data.to.plot$N), nLoci),
1549426909920:# Locus = lociLabels,
1549426909921:cov = covs
1549426909922:) %>%
1549426909923:left_join(data.to.plot %>%
1549426909924:mutate(Locus = as.character(Locus),
1549426909925:Allele = as.character(Allele),
1549426909926:NumAllele = as.character(NumAllele)) %>%
1549426909927:group_by(Locus, Allele, NumAllele, AlleleType, Length, NormKmerCount) %>%
1549426909928:summarise(sd = sd(kmerDepth)),
1549426909929:by = c("Locus", "Allele"))
1549426909930:labelsData
1549426909931:}
1549426909933:# Check for genes/loci file to filter loci to plot  -----------------------
1549426909934:loci.to.plot <- c()
1549426909935:# if (!is.null(gene.file)|| gene.file != "") {
1549426909936:if (!is.null(gene.file) && !is.na(gene.file) && gene.file != "") {
1549426909937:error.message <- CheckFileExists(gene.file)
1549426909938:if (!is.null(error.message)){
1549426909939:cat("Warning:")
1549426909940:cat(error.message)
1549426909941:cat("  The plotting process will continue without filtering genes/loci.\n")
1549426909942:} else {
1549426909943:loci.to.plot <- scan(gene.file, character(), quiet = TRUE)
1549426909944:}
1549426909945:}
1549426909947:# Data processing and plotting --------------------------------------------
1549426909948:cat("Plotting depths... ")
1549426909949:options(stringsAsFactors = T, readr.num_columns = 0)
1549426909950:# Load data
1549426909952:inData <- read_tsv(input.file)
1549426909953:colnames(inData) <- c("Sample", "Locus", "Allele", "Position", "kmerDepth",
1549426909954:"NormKmerCount", "Coverage", "AverageKmerDepth",
1549426909955:"AlleleType", "NumAllele", "WeightedKmerDepth", "AlleleNumber",
1549426909956:"RunMode", "kmerCounts", "Length")
1549426909957:# Transform data
1549426909958:data.to.plot <- inData %>%
1549426909959:mutate(
1549426909960:Sample = factor(Sample, levels = unique(inData$Sample)),
1549426909961:Locus = factor(Locus, levels = unique(inData$Locus)),
1549426909963:AlleleType = factor(AlleleType, levels = unique(inData$AlleleType)),
1549426909964:NumAllele = factor(NumAllele, levels = unique(inData$NumAllele)),
1549426909965:RunMode = factor(RunMode, levels = unique(inData$RunMode)),
1549426909966:Allele = factor(Allele, levels = unique(inData$Allele))
1549426909967:)
1549426909969:tmp <- inData %>%
1549426909971:group_by(Sample, Locus, Allele, AlleleType, NumAllele) %>%
1549426909972:summarise(Length = n())
1549426909973:# # Filtering loci/genes from genes_file input param
1549426909975:# if (length(loci.to.plot) > 0) {
1549426909976:#   data.to.plot <- data.to.plot %>%
1549426909977:#     filter(Locus %in% loci.to.plot)
1549426909979:# }
1549426909981:longestLocusNameLength <- max(str_length(as.character(unique(inData$Locus))))
1549426909983:nSamples <- length(unique(data.to.plot$Sample))
1549426909985:# nLoci    <- length(unique(data.to.plot$Locus))
1549426909987:# nAlleles <- length(unique(data.to.plot$Alleles))
1549426909989:# Theme-related variable definition ---------------------------------------
1549426909991:annotLinetype     <- "solid"
1549426909992:annotTextSize     <- 4
1549426909993:axisColor         <- "#000000"
1549426909994:axisTextSize      <- 12
1549426909996:barAnnotTextSize  <- 4
1549426909997:baseTextSize      <- 14
1549426909998:gridColor         <- "#e0e0e0"
1549426909999:lineSize          <- 0.3
1549426910001:# panelColor        <- "#ffffff"
1549426910002:# panelColor        <- "#fff4e0"
1549426910003:panelColor        <- "#f2efe6"
1549426910005:# stripBackground   <- "#cccccc"
1549426910006:stripTextSize     <- axisTextSize
1549426910007:if (longestLocusNameLength > 12)
1549426910009:stripTextSize  <- stripTextSize * 0.6
1549426910010:textColor  <- "#000000"
1549426910011:# baseFontFamily        <- "Arial"
1549426910014:# Custom theme definition for plots ---------------------------------------
1549426910016:plotTheme <- list(
1549426910017:theme(
1549426910019:axis.text.x      = element_text(angle = 50, size = axisTextSize,
1549426910022:vjust = 1, hjust = 1, color = textColor),
1549426910023:axis.text.y      = element_text(size = axisTextSize, color = textColor),
1549426910024:axis.ticks       = element_line(size = lineSize),
1549426910026:axis.title.x     = element_text(margin = margin(6,0,8,0, "mm")),
1549426910027:axis.title.y     = element_text(margin = margin(0,6,0,0, "mm")),
1549426910028:legend.position  = "none",
1549426910030:panel.border     = element_rect(size = lineSize),
1549426910031:panel.background = element_rect(fill = panelColor),
1549426910032:panel.grid       = element_line(size = lineSize, colour = gridColor),
1549426910034:panel.grid.minor = element_blank(),
1549426910035:plot.margin      = margin(10,10,0,10, "mm"),
1549426910036:panel.spacing    = unit(4, "mm"),
1549426910038:plot.caption     = element_text(size = baseTextSize * 0.7, face = "italic"),
1549426910039:plot.title       = element_text(hjust = 0.5),
1549426910041:plot.subtitle    = element_text(hjust = 0.5),
1549426910042:strip.background = element_rect(size = lineSize),
1549426910043:strip.text       = element_text(size = stripTextSize),
1549426910046:text             = element_text(size = baseTextSize)
1549426910048:)
1549426910052:)
1549426910056:samples <- levels(data.to.plot$Sample)
1549426910057:loci    <- levels(data.to.plot$Locus)
1549426910060:for (sam in samples[1]) {
1549426910061:# print(sam)
1549426910063:subset   <- data.to.plot %>% filter(Sample == sam)
1549426910064:# print(str_glue("sample {sam}: nLoci = {length(loci)}  nAlleles = {length(alleles)}"))
1549426910067:subToPlot <- subset %>% filter(Locus %in% loci[c(1:8,37)])
1549426910068:loci     <- as.character(unique(subToPlot$Locus))
1549426910069:alleles  <- as.character(unique(subToPlot$Allele))
1549426910071:nLoci    <- length(loci)
1549426910072:nAlleles <- length(alleles)
1549426910074:# which(loci %in% c("NEIS1689"))
1549426910076:max.x    <- max(subToPlot$Position)
1549426910078:max.y    <- max(subToPlot$kmerDepth)
1549426910079:x.limits <- seq(0, max.x, 100)
1549426910081:y.limits <- seq(0, max.y, 20)
1549426910088:rowsPerPage   <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549426910090:colourCount   <- rowsPerPage
1549426910091:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549426910093:borderPalette <- darkColors(fillPalette, 0.6)
1549426910096:# Depth plot -------------------------------------------------------------
1549426910098:# lociPerPage    <- 3
1549426910100:wFactor        <- 4.8
1549426910101:plotTitlesSize <- 2.39
1549426910104:getPlotHeight <- function(rows, extras){
1549426910106:hFactor <- ifelse(rows == 1, 1.88, 1.6)
1549426910108:# loci + titles and foot note + strip + space between locus
1549426910109:(rows*hFactor) + extras + ((rows-1)*0.157*2) #in
1549426910111:}
1549426910114:# rowsPerPage <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549426910116:height      <- getPlotHeight(rowsPerPage, plotTitlesSize)
1549426910118:width       <- nAlleles * wFactor
1549426910119:loci        <- unique(data.to.plot$Locus)
1549426910121:sets        <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549426910124:plots <- lapply(sets, function(set, dp=subToPlot, rp=rowsPerPage){
1549426910126:# set=sets[[1]]; dp=subToPlot; rp=rowsPerPage
1549426910131:nLoci        <- length(set)
1549426910133:subsetToPlot <- dp %>% filter(Locus %in% set)
1549426910135:# subPalette   <-
1549426910137:ld           <- getLabelsData(subsetToPlot)
1549426910138:p            <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette, sample.name)
1549426910140:if(nLoci < rp){
1549426910142:hlay    <- matrix(c(1, NA))
1549426910144:total   <- getPlotHeight(rp, plotTitlesSize)
1549426910145:cHeight <- getPlotHeight(nLoci, plotTitlesSize)
1549426910147:blank   <- getPlotHeight(rp-nLoci, 0)
1549426910149:heights <- matrix(c(cHeight/total, blank/total))
1549426910151:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549426910152:}
1549426910154:p
1549426910156:})
1549426910159:if (out.format == "pdf") {
1549426910161:out.filename <- paste(out.prefix, out.format, sep = ".")
1549426910163:ml <- marrangeGrob(plots, nrow=1, ncol=1, padding = unit(10, "mm"),
1549426910165:top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549426910167:ggsave(filename = out.filename, plot = ml,
1549426910169:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549426910170:}
1549426910172:else {
1549426910174:for (i in seq_along(plots)) {
1549426910176:out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549426910178:ggsave(filename = out.filename, plot = plots[[i]],
1549426910180:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549426910182:}
1549426910184:}
1549426910186:}
1549426910190:# # Palette definition ------------------------------------------------------
1549426910192:# # colourCount <- length(unique(inData$Locus))
1549426910194:# rowsPerPage <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549426910196:# # colourCount <- nLoci
1549426910198:# colourCount <- rowsPerPage
1549426910201:# # colourCount  <- length(unique(data.to.plot$Allele))
1549426910204:# # fillPalette  <- colorRampPalette(brewer.pal(8, "Dark2"))(colourCount)
1549426910206:# # fillPalette  <- colorRampPalette(brewer.pal(12, "Paired"))(colourCount)
1549426910208:# # fillPalette  <- colorRampPalette(brewer.pal(9, "Set1"))(colourCount)
1549426910210:# # fillPalette  <- colorRampPalette(pal_npg("nrc")(10))(colourCount)
1549426910212:# # fillPalette  <- colorRampPalette(pal_d3("category20")(20))(colourCount)
1549426910213:# fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549426910216:# borderPalette <- darkColors(fillPalette, 0.6)
1549426910218:# # library("scales"); show_col(fillPalette); show_col(borderPalette)
1549426910224:# #
1549426910226:# # Depth plot -------------------------------------------------------------
1549426910228:# # lociPerPage    <- 3
1549426910230:# wFactor        <- 4.8
1549426910232:# plotTitlesSize <- 2.39
1549426910234:#
1549426910236:# getPlotHeight <- function(rows, extras){
1549426910237:# 	hFactor <- ifelse(rows == 1, 1.88, 1.6)
1549426910239:# 	# loci + titles and foot note + strip + space between locus
1549426910241:# 	(rows*hFactor) + extras + ((rows-1)*0.157) #in
1549426910243:# }
1549426910245:#
1549426910247:# # rowsPerPage <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549426910249:# height      <- getPlotHeight(rowsPerPage, plotTitlesSize)
1549426910251:# width       <- nAlleles * wFactor
1549426910253:# loci        <- unique(data.to.plot$Locus)
1549426910255:# sets        <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549426910257:#
1549426910259:# plots <- lapply(sets, function(set, dp=data.to.plot, rp=rowsPerPage){
1549426910261:# 	nLoci        <- length(set)
1549426910263:# 	subsetToPlot <- dp %>% filter(Locus %in% set)
1549426910265:# 	# subPalette   <-
1549426910266:# 	ld           <- getLabelsData(subsetToPlot)
1549426910268:# 	p            <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette)
1549426910270:# 	if(nLoci < rp){
1549426910272:# 		hlay    <- matrix(c(1, NA))
1549426910274:# 		total   <- getPlotHeight(rp, plotTitlesSize)
1549426910277:# 		cHeight <- getPlotHeight(nLoci, plotTitlesSize)
1549426910279:# 		blank   <- getPlotHeight(rp-nLoci, 0)
1549426910280:# 		heights <- matrix(c(cHeight/total, blank/total))
1549426910282:# 		p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549426910284:# 	}
1549426910287:# 	p
1549426910290:# })
1549426910293:#
1549426910296:# if (out.format == "pdf") {
1549426910299:# 	out.filename <- paste(out.prefix, out.format, sep = ".")
1549426910302:# 	ml <- marrangeGrob(plots, nrow=1, ncol=1, padding = unit(10, "mm"),
1549426910305:# 										 top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549426910308:# 	ggsave(filename = out.filename, plot = ml,
1549426910310:# 				 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549426910313:# }
1549426910316:# else {
1549426910319:# 	for (i in seq_along(plots)) {
1549426910322:# 		out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549426910325:# 		ggsave(filename = out.filename, plot = plots[[i]],
1549426910328:# 					 width  = width, height = height, dpi = 400, limitsize = FALSE)
1549426910331:# 	}
1549426910334:# }
1549426910337:#
1549426910339:# # # Depth distribution plot ------------------------------------------------
1549426910342:# # hFactor  <- 3
1549426910345:# # wFactor  <- 2
1549426910347:# # if (nLoci == 1)
1549426910350:# #   hFactor <- 3.5
1549426910352:# # height       <- nLoci * hFactor
1549426910355:# # width        <- nAlleles * wFactor
1549426910358:# # # Generate plot
1549426910360:# # (dist.plot <- plotDepthDist(data.to.plot, labelsData, fillPalette, borderPalette))
1549426910363:# # # Save plot
1549426910365:# # out.filename <- paste0(out.prefix, "_dist.", out.format)
1549426910368:# # if (out.format == "png") {
1549426910371:# #   ggsave(filename = out.filename, plot = dist.plot,
1549426910374:# #          width  = width, height = height, type = "cairo-png", dpi = 300)
1549426910377:# # } else {
1549426910379:# #   ggsave(filename = out.filename, plot = dist.plot,
1549426910382:# #          width  = width, height = height, dpi = 400)
1549426910385:# # }
1549426910388:#
1549426910391:cat("Done! \n")
1549426910397:# Code core - End ---------------------------------------------------------
1549426910400:}
1549426932640:samples <- levels(data.to.plot$Sample)
1549426933069:loci    <- levels(data.to.plot$Locus)
1549426934576:samples
1549426936805:loci
1549426946437:for (sam in samples[1]) {}
1549426951439:print(sam)
1549426953505:subset   <- data.to.plot %>% filter(Sample == sam)
1549426955169:subToPlot <- subset %>% filter(Locus %in% loci[c(1:8,37)])
1549426956678:subToPlot
1549426958297:loci     <- as.character(unique(subToPlot$Locus))
1549426958557:alleles  <- as.character(unique(subToPlot$Allele))
1549426958776:nLoci    <- length(loci)
1549426958993:nAlleles <- length(alleles)
1549426959262:# which(loci %in% c("NEIS1689"))
1549426959263:max.x    <- max(subToPlot$Position)
1549426959469:max.y    <- max(subToPlot$kmerDepth)
1549426959695:x.limits <- seq(0, max.x, 100)
1549426959893:y.limits <- seq(0, max.y, 20)
1549426960148:rowsPerPage   <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549426960405:colourCount   <- rowsPerPage
1549426960652:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549426961011:borderPalette <- darkColors(fillPalette, 0.6)
1549426961412:# Depth plot -------------------------------------------------------------
1549426961413:# lociPerPage    <- 3
1549426961413:wFactor        <- 4.8
1549426961832:plotTitlesSize <- 2.39
1549426962150:getPlotHeight <- function(rows, extras){
1549426962151:hFactor <- ifelse(rows == 1, 1.88, 1.6)
1549426962151:# loci + titles and foot note + strip + space between locus
1549426962152:(rows*hFactor) + extras + ((rows-1)*0.157*2) #in
1549426962152:}
1549426963071:# rowsPerPage <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549426963072:height      <- getPlotHeight(rowsPerPage, plotTitlesSize)
1549426963476:width       <- nAlleles * wFactor
1549426963774:loci        <- unique(data.to.plot$Locus)
1549426964193:sets        <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549426978645:sets
1549426995746:unique(data.to.plot$Locus)
1549427004477:loci        <- as.character(unique(data.to.plot$Locus))
1549427005646:loci
1549427006831:sets        <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549427008696:sets
1549427022742:set=sets[[1]]; dp=subToPlot; rp=rowsPerPage
1549427023418:nLoci        <- length(set)
1549427024317:subsetToPlot <- dp %>% filter(Locus %in% set)
1549427029914:# subPalette   <-
1549427029914:ld           <- getLabelsData(subsetToPlot)
1549427032434:p            <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette, sample.name)
1549427034880:if(nLoci < rp){
1549427034881:hlay    <- matrix(c(1, NA))
1549427034881:total   <- getPlotHeight(rp, plotTitlesSize)
1549427034881:cHeight <- getPlotHeight(nLoci, plotTitlesSize)
1549427034882:blank   <- getPlotHeight(rp-nLoci, 0)
1549427034882:heights <- matrix(c(cHeight/total, blank/total))
1549427034882:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549427034883:}
1549427037340:p
1549427045137:plots <- lapply(sets, function(set, dp=subToPlot, rp=rowsPerPage){
1549427045137:set=sets[[1]]; dp=subToPlot; rp=rowsPerPage
1549427045138:nLoci        <- length(set)
1549427045138:subsetToPlot <- dp %>% filter(Locus %in% set)
1549427045139:# subPalette   <-
1549427045139:ld           <- getLabelsData(subsetToPlot)
1549427045139:p            <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette, sample.name)
1549427045140:if(nLoci < rp){
1549427045140:hlay    <- matrix(c(1, NA))
1549427045140:total   <- getPlotHeight(rp, plotTitlesSize)
1549427045141:cHeight <- getPlotHeight(nLoci, plotTitlesSize)
1549427045141:blank   <- getPlotHeight(rp-nLoci, 0)
1549427045141:heights <- matrix(c(cHeight/total, blank/total))
1549427045142:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549427045142:}
1549427045143:p
1549427045143:})
1549427063545:if (out.format == "pdf") {
1549427063546:out.filename <- paste(out.prefix, out.format, sep = ".")
1549427063546:ml <- marrangeGrob(plots, nrow=1, ncol=1, padding = unit(10, "mm"),
1549427063547:top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549427063547:ggsave(filename = out.filename, plot = ml,
1549427063548:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549427063549:}
1549427190659:height
1549427192764:# rowsPerPage <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549427192764:height      <- getPlotHeight(rowsPerPage, plotTitlesSize)
1549427193357:width       <- nAlleles * wFactor
1549427193820:loci        <- as.character(unique(data.to.plot$Locus))
1549427194686:sets        <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549427196381:plots <- lapply(sets, function(set, dp=subToPlot, rp=rowsPerPage){
1549427196381:set=sets[[1]]; dp=subToPlot; rp=rowsPerPage
1549427196382:nLoci        <- length(set)
1549427196383:subsetToPlot <- dp %>% filter(Locus %in% set)
1549427196383:# subPalette   <-
1549427196383:ld           <- getLabelsData(subsetToPlot)
1549427196384:p            <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette, sample.name)
1549427196384:if(nLoci < rp){
1549427196385:hlay    <- matrix(c(1, NA))
1549427196385:total   <- getPlotHeight(rp, plotTitlesSize)
1549427196386:cHeight <- getPlotHeight(nLoci, plotTitlesSize)
1549427196387:blank   <- getPlotHeight(rp-nLoci, 0)
1549427196388:heights <- matrix(c(cHeight/total, blank/total))
1549427196388:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549427196389:}
1549427196390:p
1549427196390:})
1549427218399:length(plots)
1549427229865:if (out.format == "pdf") {
1549427229866:out.filename <- paste(out.prefix, out.format, sep = ".")
1549427229866:ml <- marrangeGrob(plots, nrow=1, ncol=1, padding = unit(10, "mm"),
1549427229866:top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549427229867:ggsave(filename = out.filename, plot = ml,
1549427229867:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549427229868:}
1549427385452:else {
1549427385453:for (i in seq_along(plots)) {
1549427385453:out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549427385454:ggsave(filename = out.filename, plot = plots[[i]],
1549427385454:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549427385455:}
1549427540799:}
1549427540800:for (sam in samples[1]) {
1549427540800:print(sam)
1549427540801:subset   <- data.to.plot %>% filter(Sample == sam)
1549427540801:# print(str_glue("sample {sam}: nLoci = {length(loci)}  nAlleles = {length(alleles)}"))
1549427540802:subToPlot <- subset %>% filter(Locus %in% loci[c(1:8,37)])
1549427540803:loci     <- as.character(unique(subToPlot$Locus))
1549427540803:alleles  <- as.character(unique(subToPlot$Allele))
1549427540804:nLoci    <- length(loci)
1549427540804:nAlleles <- length(alleles)
1549427540805:# which(loci %in% c("NEIS1689"))
1549427540806:max.x    <- max(subToPlot$Position)
1549427540806:max.y    <- max(subToPlot$kmerDepth)
1549427540807:x.limits <- seq(0, max.x, 100)
1549427540807:y.limits <- seq(0, max.y, 20)
1549427540808:rowsPerPage   <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549427540809:colourCount   <- rowsPerPage
1549427540809:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549427540810:borderPalette <- darkColors(fillPalette, 0.6)
1549427540811:# Depth plot -------------------------------------------------------------
1549427540812:# lociPerPage    <- 3
1549427540812:wFactor        <- 4.8
1549427540813:plotTitlesSize <- 2.39
1549427540814:getPlotHeight <- function(rows, extras){
1549427540814:hFactor <- ifelse(rows == 1, 1.88, 1.6)
1549427540815:# loci + titles and foot note + strip + space between locus
1549427540816:(rows*hFactor) + extras + ((rows-1)*0.157*2) #in
1549427540816:}
1549427540818:# rowsPerPage <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549427540818:height      <- getPlotHeight(rowsPerPage, plotTitlesSize)
1549427540819:width       <- nAlleles * wFactor
1549427540819:loci        <- as.character(unique(data.to.plot$Locus))
1549427540820:sets        <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549427540822:plots <- lapply(sets, function(set, dp=subToPlot, rp=rowsPerPage){
1549427540823:set=sets[[1]]; dp=subToPlot; rp=rowsPerPage
1549427540825:nLoci        <- length(set)
1549427540826:subsetToPlot <- dp %>% filter(Locus %in% set)
1549427540827:# subPalette   <-
1549427540828:ld           <- getLabelsData(subsetToPlot)
1549427540829:p            <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette, sample.name)
1549427540830:if(nLoci < rp){
1549427540831:hlay    <- matrix(c(1, NA))
1549427540832:total   <- getPlotHeight(rp, plotTitlesSize)
1549427540833:cHeight <- getPlotHeight(nLoci, plotTitlesSize)
1549427540834:blank   <- getPlotHeight(rp-nLoci, 0)
1549427540836:heights <- matrix(c(cHeight/total, blank/total))
1549427540840:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549427540841:}
1549427540842:p
1549427540842:})
1549427540844:if (out.format == "pdf") {
1549427540845:out.filename <- paste(out.prefix, out.format, sep = ".")
1549427540846:ml <- marrangeGrob(plots, nrow=1, ncol=1, padding = unit(10, "mm"),
1549427540847:top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549427540848:ggsave(filename = out.filename, plot = ml,
1549427540849:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549427540851:}
1549427540852:else {
1549427540853:for (i in seq_along(plots)) {
1549427540854:out.filename <- paste(out.prefix, sprintf("%03d", i), out.format, sep = ".")
1549427540856:ggsave(filename = out.filename, plot = plots[[i]],
1549427540858:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549427540859:}
1549427540860:}
1549427540861:}
1549427701197:subToPlot
1549427740845:subToPlot %>% group_by(Locus, Allele, AlleleType) %>% summarise(n())
1549427797394:subToPlot %>% group_by(Locus, Allele) %>% summarise(n())
1549427805016:subToPlot %>% group_by(Locus) %>% summarise(n())
1549427854423:subToPlot %>% group_by(Locus, Allele, AlleleType) %>% summarise(n())
1549427928601:subToPlot %>% group_by(Locus, Allele, AlleleType) %>% summarise(n()) %>% group_by(Locus) %>% summarise(n())
1549428038524:subToPlot %>% group_by(Locus, Allele, AlleleType) %>% summarise(n()) %>% group_by(Locus) %>% summarise(alleles = n())
1549428056083:subToPlot %>% group_by(Locus, Allele, AlleleType) %>% summarise(n()) %>% group_by(Locus) %>% summarise(alleles = n()) %>% max(alleles)
1549428098037:subToPlot %>% group_by(Locus, Allele, AlleleType) %>% summarise(n()) %>% group_by(Locus) %>% summarise(alleles = n()) %>% select(alleles) %>% pull() %>% max()
1549428123395:maxAllelesPerLocus <- subToPlot %>% group_by(Locus, Allele, AlleleType) %>% summarise(n()) %>% group_by(Locus) %>% summarise(alleles = n()) %>% select(alleles) %>% pull() %>% max()
1549428139239:print(sam)
1549428139455:subset   <- data.to.plot %>% filter(Sample == sam)
1549428139633:subToPlot <- subset %>% filter(Locus %in% loci[c(1:8,37)])
1549428139799:loci     <- as.character(unique(subToPlot$Locus))
1549428139981:alleles  <- as.character(unique(subToPlot$Allele))
1549428140138:nLoci    <- length(loci)
1549428140300:nAlleles <- length(alleles)
1549428140478:# which(loci %in% c("NEIS1689"))
1549428140479:max.x    <- max(subToPlot$Position)
1549428140637:max.y    <- max(subToPlot$kmerDepth)
1549428140804:x.limits <- seq(0, max.x, 100)
1549428140948:y.limits <- seq(0, max.y, 20)
1549428141121:rowsPerPage   <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549428141315:colourCount   <- rowsPerPage
1549428141470:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549428141649:borderPalette <- darkColors(fillPalette, 0.6)
1549428141829:# Depth plot -------------------------------------------------------------
1549428141830:# lociPerPage    <- 3
1549428141830:wFactor        <- 4.8
1549428141987:plotTitlesSize <- 2.39
1549428142201:getPlotHeight <- function(rows, extras){
1549428142202:hFactor <- ifelse(rows == 1, 1.88, 1.6)
1549428142202:# loci + titles and foot note + strip + space between locus
1549428142203:(rows*hFactor) + extras + ((rows-1)*0.157*2) #in
1549428142203:}
1549428142370:maxAllelesPerLocus <- subToPlot %>% group_by(Locus, Allele, AlleleType) %>% summarise(n()) %>% group_by(Locus) %>% summarise(alleles = n()) %>% select(alleles) %>% pull() %>% max()
1549428143230:# rowsPerPage <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549428143230:height      <- getPlotHeight(rowsPerPage, plotTitlesSize)
1549428143595:width       <- maxAllelesPerLocus * wFactor
1549428143803:loci        <- as.character(unique(data.to.plot$Locus))
1549428143987:sets        <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549428144170:plots <- lapply(sets, function(set, dp=subToPlot, rp=rowsPerPage){
1549428144171:set=sets[[1]]; dp=subToPlot; rp=rowsPerPage
1549428144172:nLoci        <- length(set)
1549428144173:subsetToPlot <- dp %>% filter(Locus %in% set)
1549428144173:# subPalette   <-
1549428144174:ld           <- getLabelsData(subsetToPlot)
1549428144174:p            <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette, sample.name)
1549428144175:if(nLoci < rp){
1549428144176:hlay    <- matrix(c(1, NA))
1549428144177:total   <- getPlotHeight(rp, plotTitlesSize)
1549428144177:cHeight <- getPlotHeight(nLoci, plotTitlesSize)
1549428144178:blank   <- getPlotHeight(rp-nLoci, 0)
1549428144179:heights <- matrix(c(cHeight/total, blank/total))
1549428144179:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549428144180:}
1549428144181:p
1549428144181:})
1549428147675:if (out.format == "pdf") {
1549428147675:out.filename <- paste(out.prefix, out.format, sep = ".")
1549428147676:ml <- marrangeGrob(plots, nrow=1, ncol=1, padding = unit(10, "mm"),
1549428147676:top = NULL, bottom = quote(paste("Page", g, "of", npages)))
1549428147677:ggsave(filename = out.filename, plot = ml,
1549428147677:width  = width, height = height, dpi = 400, limitsize = FALSE)
1549428147677:}
1549428455748:loci[c(1:8,37)]
1549428555947:sets
1549428559459:plots <- lapply(sets, function(set, dp=subToPlot, rp=rowsPerPage){
1549428559459:# set=sets[[1]]; dp=subToPlot; rp=rowsPerPage
1549428559460:nLoci        <- length(set)
1549428559460:subsetToPlot <- dp %>% filter(Locus %in% set)
1549428559461:# subPalette   <-
1549428559461:ld           <- getLabelsData(subsetToPlot)
1549428559461:p            <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette, sample.name)
1549428559462:if(nLoci < rp){
1549428559462:hlay    <- matrix(c(1, NA))
1549428559462:total   <- getPlotHeight(rp, plotTitlesSize)
1549428559463:cHeight <- getPlotHeight(nLoci, plotTitlesSize)
1549428559463:blank   <- getPlotHeight(rp-nLoci, 0)
1549428559464:heights <- matrix(c(cHeight/total, blank/total))
1549428559464:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549428559464:}
1549428559465:p
1549428559465:})
1549428570584:subToPlot
1549428573546:rowsPerPage
1549428576624:plots <- lapply(sets, function(set, dp=subToPlot, rp=rowsPerPage){
1549428576624:# set=sets[[1]]; dp=subToPlot; rp=rowsPerPage
1549428576625:nLoci        <- length(set)
1549428576625:subsetToPlot <- dp %>% filter(Locus %in% set)
1549428576626:# subPalette   <-
1549428576626:ld           <- getLabelsData(subsetToPlot)
1549428576626:p            <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette, sample.name)
1549428576627:if(nLoci < rp){
1549428576627:hlay    <- matrix(c(1, NA))
1549428576627:total   <- getPlotHeight(rp, plotTitlesSize)
1549428576628:cHeight <- getPlotHeight(nLoci, plotTitlesSize)
1549428576628:blank   <- getPlotHeight(rp-nLoci, 0)
1549428576628:heights <- matrix(c(cHeight/total, blank/total))
1549428576629:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549428576629:}
1549428576630:p
1549428576630:})
1549428613637:plots <- lapply(sets, function(set, dp=subToPlot, rp=rowsPerPage){
1549428613638:# set=sets[[1]]; dp=subToPlot; rp=rowsPerPage
1549428613639:print(set)
1549428613639:nLoci        <- length(set)
1549428613640:subsetToPlot <- dp %>% filter(Locus %in% set)
1549428613640:# subPalette   <-
1549428613641:ld           <- getLabelsData(subsetToPlot)
1549428613642:p            <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette, sample.name)
1549428613643:if(nLoci < rp){
1549428613643:hlay    <- matrix(c(1, NA))
1549428613644:total   <- getPlotHeight(rp, plotTitlesSize)
1549428613644:cHeight <- getPlotHeight(nLoci, plotTitlesSize)
1549428613645:blank   <- getPlotHeight(rp-nLoci, 0)
1549428613646:heights <- matrix(c(cHeight/total, blank/total))
1549428613646:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549428613647:}
1549428613648:p
1549428613648:})
1549428625507:sets
1549428667831:set=sets[[3]]; dp=subToPlot; rp=rowsPerPage
1549428668820:print(set)
1549428670295:nLoci        <- length(set)
1549428670872:subsetToPlot <- dp %>% filter(Locus %in% set)
1549428671382:# subPalette   <-
1549428671382:ld           <- getLabelsData(subsetToPlot)
1549428676989:set=sets[[2]]; dp=subToPlot; rp=rowsPerPage
1549428677357:print(set)
1549428677640:nLoci        <- length(set)
1549428678008:subsetToPlot <- dp %>% filter(Locus %in% set)
1549428678410:# subPalette   <-
1549428678411:ld           <- getLabelsData(subsetToPlot)
1549428684650:set=sets[[3]]; dp=subToPlot; rp=rowsPerPage
1549428685301:print(set)
1549428686917:nLoci        <- length(set)
1549428687680:subsetToPlot <- dp %>% filter(Locus %in% set)
1549428688885:subsetToPlot
1549428726259:# subToPlot <- subset %>% filter(Locus %in% loci[c(1:8,37)])
1549428726259:subToPlot <- subset
1549428730366:loci     <- as.character(unique(subToPlot$Locus))
1549428730724:alleles  <- as.character(unique(subToPlot$Allele))
1549428731067:nLoci    <- length(loci)
1549428731404:nAlleles <- length(alleles)
1549428731823:# which(loci %in% c("NEIS1689"))
1549428731823:max.x    <- max(subToPlot$Position)
1549428732390:max.y    <- max(subToPlot$kmerDepth)
1549428732697:x.limits <- seq(0, max.x, 100)
1549428733010:y.limits <- seq(0, max.y, 20)
1549428733425:rowsPerPage   <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549428733717:colourCount   <- rowsPerPage
1549428733976:fillPalette   <- colorRampPalette(pal_nejm("default")(8))(colourCount)
1549428734236:borderPalette <- darkColors(fillPalette, 0.6)
1549428734794:# Depth plot -------------------------------------------------------------
1549428734795:# lociPerPage    <- 3
1549428734796:wFactor        <- 4.8
1549428735109:plotTitlesSize <- 2.39
1549428735396:getPlotHeight <- function(rows, extras){
1549428735397:hFactor <- ifelse(rows == 1, 1.88, 1.6)
1549428735397:# loci + titles and foot note + strip + space between locus
1549428735398:(rows*hFactor) + extras + ((rows-1)*0.157*2) #in
1549428735398:}
1549428736651:maxAllelesPerLocus <- subToPlot %>% group_by(Locus, Allele, AlleleType) %>% summarise(n()) %>% group_by(Locus) %>% summarise(alleles = n()) %>% select(alleles) %>% pull() %>% max()
1549428739712:maxAllelesPerLocus
1549428743027:# rowsPerPage <- ifelse(nLoci > max.loci.per.page, max.loci.per.page, nLoci)
1549428743027:height      <- getPlotHeight(rowsPerPage, plotTitlesSize)
1549428743577:width       <- maxAllelesPerLocus * wFactor
1549428743884:loci        <- as.character(unique(data.to.plot$Locus))
1549428744356:sets        <- split(loci, ceiling(seq_along(loci)/rowsPerPage))
1549428749466:plots <- lapply(sets, function(set, dp=subToPlot, rp=rowsPerPage){
1549428749467:# set=sets[[3]]; dp=subToPlot; rp=rowsPerPage
1549428749468:print(set)
1549428749469:nLoci        <- length(set)
1549428749470:subsetToPlot <- dp %>% filter(Locus %in% set)
1549428749470:# subPalette   <-
1549428749471:ld           <- getLabelsData(subsetToPlot)
1549428749472:p            <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette, sample.name)
1549428749473:if(nLoci < rp){
1549428749473:hlay    <- matrix(c(1, NA))
1549428749474:total   <- getPlotHeight(rp, plotTitlesSize)
1549428749475:cHeight <- getPlotHeight(nLoci, plotTitlesSize)
1549428749476:blank   <- getPlotHeight(rp-nLoci, 0)
1549428749476:heights <- matrix(c(cHeight/total, blank/total))
1549428749477:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549428749478:}
1549428749478:p
1549428749479:})
1549428793897:subToPlot
1549428797205:set=sets[[3]]; dp=subToPlot; rp=rowsPerPage
1549428798348:print(set)
1549428798732:nLoci        <- length(set)
1549428799476:subsetToPlot <- dp %>% filter(Locus %in% set)
1549428800719:# subPalette   <-
1549428800719:ld           <- getLabelsData(subsetToPlot)
1549428801451:p            <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette, sample.name)
1549428806534:set=sets[[6]]; dp=subToPlot; rp=rowsPerPage
1549428806816:print(set)
1549428807044:nLoci        <- length(set)
1549428807230:subsetToPlot <- dp %>% filter(Locus %in% set)
1549428807475:# subPalette   <-
1549428807475:ld           <- getLabelsData(subsetToPlot)
1549428807945:p            <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette, sample.name)
1549428812714:set=sets[[7]]; dp=subToPlot; rp=rowsPerPage
1549428812916:print(set)
1549428813100:nLoci        <- length(set)
1549428813279:subsetToPlot <- dp %>% filter(Locus %in% set)
1549428813489:# subPalette   <-
1549428813490:ld           <- getLabelsData(subsetToPlot)
1549428813712:p            <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette, sample.name)
1549428838110:plots <- lapply(sets, function(set, dp=subToPlot, rp=rowsPerPage){
1549428838111:# set=sets[[]]; dp=subToPlot; rp=rowsPerPage
1549428838112:print(names(set))
1549428838112:nLoci        <- length(set)
1549428838112:subsetToPlot <- dp %>% filter(Locus %in% set)
1549428838113:# subPalette   <-
1549428838113:ld           <- getLabelsData(subsetToPlot)
1549428838113:p            <- plotDepth(subsetToPlot, ld, fillPalette, borderPalette, sample.name)
1549428838114:if(nLoci < rp){
1549428838114:hlay    <- matrix(c(1, NA))
1549428838114:total   <- getPlotHeight(rp, plotTitlesSize)
1549428838115:cHeight <- getPlotHeight(nLoci, plotTitlesSize)
1549428838115:blank   <- getPlotHeight(rp-nLoci, 0)
1549428838116:heights <- matrix(c(cHeight/total, blank/total))
1549428838116:p       <- grid.arrange(p, layout_matrix = hlay, heights = heights)
1549428838116:}
1549428838117:p
1549428838117:})
1549428853102:set=sets[[9]]; dp=subToPlot; rp=rowsPerPage
1549428853464:print(names(set))
1549428853726:nLoci        <- length(set)
1549428854093:subsetToPlot <- dp %>% filter(Locus %in% set)
1549428854964:# subPalette   <-
1549428854965:ld           <- getLabelsData(subsetToPlot)
1549428860716:subsetToPlot
1549428864173:set
1549428883970:subToPlot
1549727290879:# Packages ----------------------------------------------------------------
1549727290924:# Function to install and load packages
1549727290924:installAndLoadPackages <- function(pkg){
1549727290924:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549727290925:if (length(new.pkg)) {
1549727290925:install.packages(new.pkg, repos="http://cran.rstudio.com/",
1549727290925:dependencies = TRUE, lib = personal.lib.path)
1549727290926:}
1549727290926:sapply(pkg, function(x){
1549727290926:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1549727290927:})
1549727290927:}
1549727293872:packages <- c("caret", "tydiverse")
1549727295476:installAndLoadPackages(packages)
1549727327568:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549727330072:if(!file.exists(personal.lib.path))
1549727350621:dir.create(personal.lib.path)
1549727357726:packages <- c("caret", "tydiverse")
1549727358625:installAndLoadPackages(packages)
1549727370241:packages <- c("caret", "tidyverse")
1549727370696:installAndLoadPackages(packages)
1549727390206:# Packages ----------------------------------------------------------------
1549727390207:# Function to install and load packages
1549727390209:installAndLoadPackages <- function(pkg){
1549727390209:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549727390210:if (length(new.pkg)) {
1549727390210:install.packages(new.pkg, repos="http://cran.rstudio.com/",
1549727390211:dependencies = TRUE, lib = personal.lib.path)
1549727390214:}
1549727390215:sapply(pkg, function(x){
1549727390215:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = F))
1549727390216:})
1549727390216:}
1549727390218:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549727390218:if(!file.exists(personal.lib.path))
1549727390219:dir.create(personal.lib.path)
1549727391772:packages <- c("caret", "tidyverse")
1549727392131:installAndLoadPackages(packages)
1549727422063:# Function to install and load packages
1549727422063:installAndLoadPackages <- function(pkg){
1549727422064:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549727422064:if (length(new.pkg)) {
1549727422064:install.packages(new.pkg, repos="http://cran.rstudio.com/",
1549727422065:dependencies = TRUE, lib = personal.lib.path)
1549727422065:}
1549727422065:sapply(pkg, function(x){
1549727422066:# suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = F))
1549727422066:require(x, character.only = TRUE, quietly = F)
1549727422066:})
1549727422067:}
1549727424062:packages <- c("caret", "tidyverse")
1549727424483:installAndLoadPackages(packages)
1549727455454:# Packages ----------------------------------------------------------------
1549727455455:# Function to install and load packages
1549727455455:installAndLoadPackages <- function(pkg){
1549727455456:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549727455457:if (length(new.pkg)) {
1549727455457:install.packages(new.pkg, repos="http://cran.rstudio.com/",
1549727455458:dependencies = TRUE, lib = personal.lib.path)
1549727455458:}
1549727455459:sapply(pkg, function(x){
1549727455463:# suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = F))
1549727455464:require(x, character.only = TRUE, quietly = F)
1549727455465:})
1549727455465:}
1549727455467:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1549727455468:if(!file.exists(personal.lib.path))
1549727455468:dir.create(personal.lib.path)
1549727455469:packages <- c("caret", "tidyverse")
1549727455470:installAndLoadPackages(packages)
1549727795198:# Packages ----------------------------------------------------------------
1549727795199:# Function to install and load packages
1549727795200:installAndLoadPackages <- function(pkg){
1549727795200:new_pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549727795201:if (length(new_pkg)) {
1549727795201:install.packages(new_pkg, repos="http://cran.rstudio.com/",
1549727795202:dependencies = TRUE, lib = personal_lib_path)
1549727795202:}
1549727795203:sapply(pkg, function(x){
1549727795203:# suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = F))
1549727795204:require(x, character.only = TRUE, quietly = FALSE)
1549727795204:})
1549727795205:}
1549727795206:personal_lib_path <- Sys.getenv("R_LIBS_USER")
1549727795207:if(!file.exists(personal_lib_path))
1549727795208:dir.create(personal_lib_path)
1549727795210:packages <- c("caret", "tidyverse")
1549727795210:installAndLoadPackages(packages)
1549727797694:# Load data ---------------------------------------------------------------
1549727797694:data_dir      <- "data"
1549727870213:metadata <- read_csv("data/AMLTraining.csv")
1549727903981:metadata
1549727922715:tail(metadata)
1549728269112:unique(metadata$SampleNumber)
1549728278156:n_samples <- length(unique(metadata$SampleNumber))
1549728280382:n_samples
1549728311989:length(unique(metadata$TubeNumber))
1549728324749:n_tubes_per_sample <- length(unique(metadata$TubeNumber))
1549728668755:all_tube_data <- lapply(metadata$SampleNumber, function(sn) {
1549728668755:metadata %>% filter(SampleNumber == sn) %>% select(TubeNumber)
1549728668756:})
1549728677707:all_tube_data
1549728953083:metadata
1549729261930:# all_tube_data <- lapply(1:n_samples, function(sn) {
1549729261930:all_tube_data <- lapply(1:2, function(sn) {
1549729261932:# lapply(1:n_tubes_per_sample, function (tn){
1549729261932:lapply(1:3, function (tn){
1549729261933:file_name <- metadata %>%
1549729261933:filter(SampleNumber == sn,
1549729261933:TubeNumber == tn) %>%
1549729261934:select(FCSFileName) %>% pull() %>% sprintf("%04d")
1549729261934:# read_csv()
1549729261934:})
1549729261934:})
1549729272322:# all_tube_data <- lapply(1:n_samples, function(sn) {
1549729272322:all_tube_data <- lapply(1:2, function(sn) {
1549729272323:# lapply(1:n_tubes_per_sample, function (tn){
1549729272323:lapply(1:3, function (tn){
1549729272324:file_name <- metadata %>%
1549729272324:filter(SampleNumber == sn,
1549729272324:TubeNumber == tn) %>%
1549729272324:select(FCSFileName) %>% pull() %>% sprintf("%04d")
1549729272325:})
1549729272325:})
1549729324366:# all_tube_data <- lapply(1:n_samples, function(sn) {
1549729324367:all_tube_data <- lapply(1:2, function(sn) {
1549729324368:# lapply(1:n_tubes_per_sample, function (tn){
1549729324368:lapply(1:3, function (tn){
1549729324369:file_name <- metadata %>%
1549729324369:filter(SampleNumber == sn,
1549729324370:TubeNumber == tn) %>%
1549729324371:select(FCSFileName) %>% pull()
1549729324372:sprintf("%04d.csv", filename)
1549729324372:})
1549729324373:})
1549729338477:# all_tube_data <- lapply(1:n_samples, function(sn) {
1549729338477:all_tube_data <- lapply(1:2, function(sn) {
1549729338478:# lapply(1:n_tubes_per_sample, function (tn){
1549729338478:lapply(1:3, function (tn){
1549729338479:filename <- metadata %>%
1549729338480:filter(SampleNumber == sn,
1549729338480:TubeNumber == tn) %>%
1549729338481:select(FCSFileName) %>% pull()
1549729338481:sprintf("%04d.csv", filename)
1549729338481:})
1549729338482:})
1549729341681:all_tube_data
1549729408683:# all_tube_data <- lapply(1:n_samples, function(sn) {
1549729408684:all_tube_data <- lapply(1:2, function(sn) {
1549729408684:# lapply(1:n_tubes_per_sample, function (tn){
1549729408685:lapply(1:3, function (tn){
1549729408685:filename <- metadata %>%
1549729408685:filter(SampleNumber == sn,
1549729408686:TubeNumber == tn) %>%
1549729408686:select(FCSFileName) %>% pull()
1549729408687:str_glue("{data_dir}/",sprintf("%04d.csv", filename))
1549729408687:})
1549729408687:})
1549729411548:all_tube_data
1549729482741:filename <- metadata %>%
1549729482742:filter(SampleNumber == sn,
1549729482743:TubeNumber == tn) %>%
1549729482743:select(FCSFileName) %>% pull() %>%
1549729482744:str_glue("{data_dir}/", sprintf("%04d.csv", .))
1549729485890:# lapply(1:n_tubes_per_sample, function (tn){
1549729485891:lapply(1:3, function (tn){
1549729485892:filename <- metadata %>%
1549729485892:filter(SampleNumber == sn,
1549729485893:TubeNumber == tn) %>%
1549729485894:select(FCSFileName) %>% pull() %>%
1549729485894:str_glue("{data_dir}/", sprintf("%04d.csv", .))
1549729485895:})
1549729493209:# all_tube_data <- lapply(1:n_samples, function(sn) {
1549729493209:all_tube_data <- lapply(1:2, function(sn) {
1549729493210:# lapply(1:n_tubes_per_sample, function (tn){
1549729493210:lapply(1:3, function (tn){
1549729493211:filename <- metadata %>%
1549729493211:filter(SampleNumber == sn,
1549729493212:TubeNumber == tn) %>%
1549729493212:select(FCSFileName) %>% pull() %>%
1549729493213:str_glue("{data_dir}/", sprintf("%04d.csv", .))
1549729493214:})
1549729493214:})
1549729496673:all_tube_data
1549729573287:# all_tube_data <- lapply(1:n_samples, function(sn) {
1549729573288:all_tube_data <- lapply(1:2, function(sn) {
1549729573289:# lapply(1:n_tubes_per_sample, function (tn){
1549729573289:lapply(1:3, function (tn){
1549729573290:filename <- metadata %>%
1549729573290:filter(SampleNumber == sn,
1549729573291:TubeNumber == tn) %>%
1549729573291:select(FCSFileName) %>% pull() %>%
1549729573292:filepath <- str_glue("{data_dir}/", sprintf("%04d.csv", filename))
1549729573292:})
1549729573293:})
1549729581674:# all_tube_data <- lapply(1:n_samples, function(sn) {
1549729581675:all_tube_data <- lapply(1:2, function(sn) {
1549729581675:# lapply(1:n_tubes_per_sample, function (tn){
1549729581676:lapply(1:3, function (tn){
1549729581676:filename <- metadata %>%
1549729581677:filter(SampleNumber == sn,
1549729581677:TubeNumber == tn) %>%
1549729581678:select(FCSFileName) %>% pull()
1549729581678:filepath <- str_glue("{data_dir}/", sprintf("%04d.csv", filename))
1549729581680:})
1549729581681:})
1549729584950:all_tube_data
1549729611210:# Load data ---------------------------------------------------------------
1549729611210:data_dir <- "data/CSV"
1549729614482:metadata <- read_csv("data/AMLTraining.csv")
1549729614732:n_samples          <- length(unique(metadata$SampleNumber))
1549729614733:n_tubes_per_sample <- length(unique(metadata$TubeNumber))
1549729614734:# all_tube_data <- lapply(1:n_samples, function(sn) {
1549729614734:all_tube_data <- lapply(1:2, function(sn) {
1549729614734:# lapply(1:n_tubes_per_sample, function (tn){
1549729614735:lapply(1:3, function (tn){
1549729614735:filename <- metadata %>%
1549729614735:filter(SampleNumber == sn,
1549729614736:TubeNumber == tn) %>%
1549729614737:select(FCSFileName) %>% pull()
1549729614737:filepath <- str_glue("{data_dir}/", sprintf("%04d.csv", filename))
1549729614737:})
1549729614738:})
1549729616823:all_tube_data
1549729689798:# Packages ----------------------------------------------------------------
1549729689799:# Function to install and load packages
1549729689800:installAndLoadPackages <- function(pkg){
1549729689800:new_pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549729689801:if (length(new_pkg)) {
1549729689801:install.packages(new_pkg, repos="http://cran.rstudio.com/",
1549729689802:dependencies = TRUE, lib = personal_lib_path)
1549729689802:}
1549729689802:sapply(pkg, function(x){
1549729689803:# suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = F))
1549729689803:require(x, character.only = TRUE, quietly = FALSE)
1549729689804:})
1549729689804:}
1549729689805:personal_lib_path <- Sys.getenv("R_LIBS_USER")
1549729689805:if(!file.exists(personal_lib_path))
1549729689806:dir.create(personal_lib_path)
1549729689807:packages <- c("caret", "tidyverse")
1549729689807:installAndLoadPackages(packages)
1549729705061:# all_tube_data <- lapply(1:n_samples, function(sn) {
1549729705061:all_tube_data <- lapply(1:2, function(sn) {
1549729705062:# lapply(1:n_tubes_per_sample, function (tn){
1549729705062:lapply(1:3, function (tn){
1549729705063:filename <- metadata %>% filter(SampleNumber == sn, TubeNumber == tn) %>%
1549729705064:select(FCSFileName) %>% pull()
1549729705065:filepath <- str_glue("{data_dir}/", sprintf("%04d.csv", filename))
1549729705065:csv_read(filepath)
1549729705066:})
1549729705067:})
1549729718069:# all_tube_data <- lapply(1:n_samples, function(sn) {
1549729718070:all_tube_data <- lapply(1:2, function(sn) {
1549729718070:# lapply(1:n_tubes_per_sample, function (tn){
1549729718071:lapply(1:3, function (tn){
1549729718072:filename <- metadata %>% filter(SampleNumber == sn, TubeNumber == tn) %>%
1549729718073:select(FCSFileName) %>% pull()
1549729718074:filepath <- str_glue("{data_dir}/", sprintf("%04d.csv", filename))
1549729718075:read_csv(filepath)
1549729718075:})
1549729718076:})
1549729760750:# all_tube_data <- lapply(1:n_samples, function(sn) {
1549729760750:all_tube_data <- lapply(1:2, function(sn) {
1549729760751:# lapply(1:n_tubes_per_sample, function (tn){
1549729760752:lapply(1:3, function (tn){
1549729760753:filename <- metadata %>% filter(SampleNumber == sn, TubeNumber == tn) %>%
1549729760754:select(FCSFileName) %>% pull()
1549729760755:filepath <- str_glue("{data_dir}/", sprintf("%04d.CSV", filename))
1549729760755:read_csv(filepath)
1549729760756:})
1549729760757:})
1549730036554:# all_tube_data <- lapply(1:n_samples, function(sn) {
1549730036554:all_tube_data <- lapply(1:2, function(sn) {
1549730036555:lapply(1:n_tubes_per_sample, function (tn){
1549730036555:# lapply(1:3, function (tn){
1549730036555:filename <- metadata %>% filter(SampleNumber == sn, TubeNumber == tn) %>%
1549730036556:select(FCSFileName) %>% pull()
1549730036556:filepath <- str_glue("{data_dir}/", sprintf("%04d.CSV", filename))
1549730036556:read_csv(filepath)
1549730036557:})
1549730036557:})
1549730050661:all_tube_data$1
1549730054120:all_tube_data$"1"
1549730064258:length(all_tube_data)
1549730080211:all_tube_data[["1"]]
1549730089774:all_tube_data[[1]]
1549730100627:all_tube_data[[1]][[1]]
1549730113177:all_tube_data[[1]][[1]]$`FS Lin`
1549730129221:all_tube_data <- lapply(1:n_samples, function(sn) {
1549730129221:# all_tube_data <- lapply(1:2, function(sn) {
1549730129222:lapply(1:n_tubes_per_sample, function (tn){
1549730129223:# lapply(1:3, function (tn){
1549730129223:filename <- metadata %>% filter(SampleNumber == sn, TubeNumber == tn) %>%
1549730129224:select(FCSFileName) %>% pull()
1549730129225:filepath <- str_glue("{data_dir}/", sprintf("%04d.CSV", filename))
1549730129226:read_csv(filepath)
1549730129226:})
1549730129227:})
1549731012239:sn
1549732669829:r_data_file <- "data/all_data.RData"
1549732685246:#!/usr/bin/env Rscript
1549732685247:# ##############################################################################
1549732685253:#  Author:   Hector Fabio Espitia-Navarro
1549732685253:#            Shashwat Deepali Nagar
1549732685254:#            Georgia Institute of Technology
1549732685254:#  Version:  0.1
1549732685255:#  Date:     02/09/2019
1549732685255:# ##############################################################################
1549732685256:# Packages ----------------------------------------------------------------
1549732685257:# Function to install and load packages
1549732685257:installAndLoadPackages <- function(pkg){
1549732685257:new_pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549732685258:if (length(new_pkg)) {
1549732685258:install.packages(new_pkg, repos="http://cran.rstudio.com/",
1549732685259:dependencies = TRUE, lib = personal_lib_path)
1549732685259:}
1549732685260:sapply(pkg, function(x){
1549732685260:# suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = F))
1549732685261:require(x, character.only = TRUE, quietly = FALSE)
1549732685261:})
1549732685261:}
1549732685262:personal_lib_path <- Sys.getenv("R_LIBS_USER")
1549732685263:if(!file.exists(personal_lib_path))
1549732685263:dir.create(personal_lib_path)
1549732685264:packages <- c("caret", "tidyverse") # All required packages in here!
1549732685265:installAndLoadPackages(packages)
1549732699467:# Load data ---------------------------------------------------------------
1549732699467:data_dir    <- "data/CSV"
1549732699468:metadata    <- read_csv("data/AMLTraining.csv")
1549732700233:r_data_file <- "data/all_data.RData"
1549732700234:testing_mode       <- TRUE # Turn off for working with the whole dataset
1549732700234:n_samples          <- ifelse(testing_mode, 2, length(unique(metadata$SampleNumber)))
1549732700235:n_tubes_per_sample <- ifelse(testing_mode, 3, length(unique(metadata$TubeNumber)))
1549732700235:# Load dataset
1549732700236:if (!file.exists(r_data_file)) {
1549732700236:# Read the dataset
1549732700236:all_tube_data <- lapply(1:n_samples, function(sn) {
1549732700237:lapply(1:n_tubes_per_sample, function (tn){
1549732700237:filename <- metadata %>% filter(SampleNumber == sn, TubeNumber == tn) %>%
1549732700237:select(FCSFileName) %>% pull()
1549732700238:read_csv(str_glue("{data_dir}/", sprintf("%04d.CSV", filename)))
1549732700238:})
1549732700238:})
1549732700239:} else {
1549732700239:load(file = r_data_file)
1549732700240:}
1549732735673:save(all_tube_data, file = r_data_file)
1549732785048:#!/usr/bin/env Rscript
1549732785049:# ##############################################################################
1549732785050:#  Author:   Hector Fabio Espitia-Navarro
1549732785050:#            Shashwat Deepali Nagar
1549732785050:#            Georgia Institute of Technology
1549732785051:#  Version:  0.1
1549732785051:#  Date:     02/09/2019
1549732785051:# ##############################################################################
1549732785052:# Packages ----------------------------------------------------------------
1549732785052:# Function to install and load packages
1549732785053:installAndLoadPackages <- function(pkg){
1549732785053:new_pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549732785054:if (length(new_pkg)) {
1549732785054:install.packages(new_pkg, repos="http://cran.rstudio.com/",
1549732785054:dependencies = TRUE, lib = personal_lib_path)
1549732785055:}
1549732785055:sapply(pkg, function(x){
1549732785055:# suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = F))
1549732785056:require(x, character.only = TRUE, quietly = FALSE)
1549732785056:})
1549732785056:}
1549732785057:personal_lib_path <- Sys.getenv("R_LIBS_USER")
1549732785058:if(!file.exists(personal_lib_path))
1549732785058:dir.create(personal_lib_path)
1549732785059:packages <- c("caret", "tidyverse") # All required packages in here!
1549732785059:installAndLoadPackages(packages)
1549732785067:# Load data ---------------------------------------------------------------
1549732785067:data_dir    <- "data/CSV"
1549732785067:metadata    <- read_csv("data/AMLTraining.csv")
1549732785074:r_data_file <- "data/all_data.RData"
1549732785076:testing_mode       <- TRUE # Turn off for working with the whole dataset
1549732785076:n_samples          <- ifelse(testing_mode, 2, length(unique(metadata$SampleNumber)))
1549732785077:n_tubes_per_sample <- ifelse(testing_mode, 3, length(unique(metadata$TubeNumber)))
1549732785078:# Load dataset
1549732785079:if (!file.exists(r_data_file)) {
1549732785079:# Read the dataset
1549732785080:all_tube_data <- lapply(1:n_samples, function(sn) {
1549732785080:lapply(1:n_tubes_per_sample, function (tn){
1549732785081:filename <- metadata %>% filter(SampleNumber == sn, TubeNumber == tn) %>%
1549732785081:select(FCSFileName) %>% pull()
1549732785082:read_csv(str_glue("{data_dir}/", sprintf("%04d.CSV", filename)))
1549732785082:})
1549732785083:})
1549732785083:save(all_tube_data, file = r_data_file)
1549732785084:} else {
1549732785085:load(file = r_data_file)
1549732785085:}
1549732908064:#!/usr/bin/env Rscript
1549732908065:# ##############################################################################
1549732908065:#  Author:   Shashwat Deepali Nagar
1549732908065:#            Hector Fabio Espitia-Navarro
1549732908066:#            Georgia Institute of Technology
1549732908066:#  Version:  0.1
1549732908066:#  Date:     02/09/2019
1549732908066:# ##############################################################################
1549732908067:# Packages ----------------------------------------------------------------
1549732908067:# Function to install and load packages
1549732908068:installAndLoadPackages <- function(pkg){
1549732908068:new_pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549732908068:if (length(new_pkg))
1549732908068:install.packages(new_pkg, repos="http://cran.rstudio.com/",
1549732908069:dependencies = TRUE, lib = personal_lib_path)
1549732908069:sapply(pkg, function(x){ require(x, character.only = TRUE, quietly = FALSE) })
1549732908069:# suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = F))
1549732908070:}
1549732908071:personal_lib_path <- Sys.getenv("R_LIBS_USER")
1549732908071:if(!file.exists(personal_lib_path))
1549732908071:dir.create(personal_lib_path)
1549732908072:packages <- c("caret", "tidyverse") # All required packages in here!
1549732908072:installAndLoadPackages(packages)
1549733145252:#!/usr/bin/env Rscript
1549733145253:# ##############################################################################
1549733145253:#  Author:   Shashwat Deepali Nagar
1549733145253:#            Hector Fabio Espitia-Navarro
1549733145254:#            Georgia Institute of Technology
1549733145254:#  Version:  0.1
1549733145254:#  Date:     02/09/2019
1549733145254:# ##############################################################################
1549733145255:# Packages ----------------------------------------------------------------
1549733145255:# Function to install and load packages
1549733145256:installAndLoadPackages <- function(pkg){
1549733145256:new_pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549733145256:if (length(new_pkg))
1549733145257:install.packages(new_pkg, repos="http://cran.rstudio.com/",
1549733145257:dependencies = TRUE, lib = personal_lib_path)
1549733145257:sapply(pkg, function(x){ require(x, character.only = TRUE, quietly = FALSE) })
1549733145258:# suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = F))
1549733145258:}
1549733145259:personal_lib_path <- Sys.getenv("R_LIBS_USER")
1549733145259:if(!file.exists(personal_lib_path))
1549733145259:dir.create(personal_lib_path)
1549733145260:packages <- c("caret", "tidyverse") # All required packages in here!
1549733145261:installAndLoadPackages(packages)
1549733145267:# Load data ---------------------------------------------------------------
1549733145268:data_dir    <- "data/CSV"
1549733145268:metadata    <- read_csv("data/AMLTraining.csv.zip")
1549733145304:r_data_file <- "data/all_data.RData"
1549733150970:metadata
1549733174320:# Load data ---------------------------------------------------------------
1549733174320:data_dir    <- "data/CSV"
1549733174669:metadata    <- read_csv("data/AMLTraining.csv.zip")
1549733221919:load(file = r_data_file, verbose = TRUE)
1549733361068:# Read the dataset
1549733361068:all_tube_data <- lapply(1:n_samples, function(sn) {
1549733361068:lapply(1:n_tubes_per_sample, function (tn){
1549733361069:filename <- metadata %>% filter(SampleNumber == sn, TubeNumber == tn) %>%
1549733361069:select(FCSFileName) %>% pull()
1549733361069:read_csv(sprintf("%s/%04d.CSV", data_dir, filename))
1549733361070:})
1549733361070:})
1549733364474:#!/usr/bin/env Rscript
1549733364475:# ##############################################################################
1549733364475:#  Author:   Shashwat Deepali Nagar
1549733364476:#            Hector Fabio Espitia-Navarro
1549733364476:#            Georgia Institute of Technology
1549733364476:#  Version:  0.1
1549733364477:#  Date:     02/09/2019
1549733364477:# ##############################################################################
1549733364478:# Packages ----------------------------------------------------------------
1549733364478:# Function to install and load packages
1549733364479:installAndLoadPackages <- function(pkg){
1549733364479:new_pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549733364480:if (length(new_pkg))
1549733364480:install.packages(new_pkg, repos="http://cran.rstudio.com/",
1549733364480:dependencies = TRUE, lib = personal_lib_path)
1549733364481:sapply(pkg, function(x){ require(x, character.only = TRUE, quietly = FALSE) })
1549733364481:# suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = F))
1549733364482:}
1549733364483:personal_lib_path <- Sys.getenv("R_LIBS_USER")
1549733364483:if(!file.exists(personal_lib_path))
1549733364484:dir.create(personal_lib_path)
1549733364484:packages <- c("caret", "tidyverse") # All required packages in here!
1549733364485:installAndLoadPackages(packages)
1549733364490:# Load data ---------------------------------------------------------------
1549733364490:data_dir    <- "data/CSV"
1549733364491:metadata    <- read_csv("data/AMLTraining.csv.zip")
1549733364616:r_data_file <- "data/all_data.RData"
1549733364617:testing_mode       <- TRUE # Turn off for working with the whole dataset
1549733364617:n_samples          <- ifelse(testing_mode, 2, length(unique(metadata$SampleNumber)))
1549733364618:n_tubes_per_sample <- ifelse(testing_mode, 3, length(unique(metadata$TubeNumber)))
1549733367844:# Read the dataset
1549733367845:all_tube_data <- lapply(1:n_samples, function(sn) {
1549733367845:lapply(1:n_tubes_per_sample, function (tn){
1549733367846:filename <- metadata %>% filter(SampleNumber == sn, TubeNumber == tn) %>%
1549733367847:select(FCSFileName) %>% pull()
1549733367848:read_csv(sprintf("%s/%04d.CSV", data_dir, filename))
1549733367849:})
1549733367849:})
1549733903086:isTRUE(!ascii)
1549759692530:# Format metadata
1549759692558:metadata %>%
1549759692559:mutate(lbl <- if_else(Label == "normal", 1, if_else(Label == "AML", 0, NA)))
1549759716593:rlang::last_error()
1549759805382:metadata
1549759816930:# Format metadata
1549759816931:metadata %>%
1549759816931:mutate(lbl = if_else(Label == "normal", 1, if_else(Label == "AML", 0, NA)))
1549759909424:unique(metadata$Label)
1549759915307:# Format metadata
1549759915308:metadata %>%
1549759915308:mutate(lbl = if_else(Label == "normal", 1, if_else(Label == "aml", 0, NA)))
1549760811345:# Format metadata
1549760811359:metadata %>%
1549760811360:# mutate(lbl = )
1549760811361:mutate_at(lbl = vars(lbl), function(x){if_else(Label == "normal", 1, if_else(Label == "aml", 0, NA))})
1549760861664:# Format metadata
1549760861664:metadata %>%
1549760861665:# mutate(lbl = )
1549760861665:mutate_at(lbl = .vars(lbl), function(x){if_else(Label == "normal", 1, if_else(Label == "aml", 0, NA))})
1549760873507:# Format metadata
1549760873507:metadata %>%
1549760873508:# mutate(lbl = )
1549760873509:mutate_at(.vars(lbl), function(x){if_else(Label == "normal", 1, if_else(Label == "aml", 0, NA))})
1549760880218:# Format metadata
1549760880219:metadata %>%
1549760880219:# mutate(lbl = )
1549760880219:mutate_at(vars(lbl), function(x){if_else(Label == "normal", 1, if_else(Label == "aml", 0, NA))})
1549760892608:# Format metadata
1549760892608:metadata %>%
1549760892609:# mutate(lbl = )
1549760892609:mutate_at(vars(Label), function(x){if_else(Label == "normal", 1, if_else(Label == "aml", 0, NA))})
1549760911286:# Format metadata
1549760911287:metadata %>%
1549760911288:# mutate(lbl = )
1549760911288:mutate_at(.vars = vars(Label), function(x){if_else(Label == "normal", 1, if_else(Label == "aml", 0, NA))})
1549760967131:# Format metadata
1549760967131:metadata %>%
1549760967132:# mutate(lbl = )
1549760967132:mutate_at(vars(Label), function(x){ if_else(Label == "normal", 1, 0)})
1549760976530:metadata
1549761083967:# Format metadata
1549761083968:metadata %>%
1549761083969:# mutate(lbl = )
1549761083969:mutate_at(vars(Label), function(x){ if_else(. == "normal", 1, 0)})
1549761181256:# Format metadata
1549761181257:metadata %>%
1549761181258:# mutate(lbl = )
1549761181258:mutate_at(vars(Label), function(x){ if_else(. == "normal", 1, if_else(. == "aml", 0, NA))})
1549761233906:# Format metadata
1549761233907:metadata %>%
1549761233907:# mutate(lbl = )
1549761233908:mutate(lbl, if_else(Label == "normal", 0, Label)})
1549761266446:# Format metadata
1549761266447:metadata %>%
1549761266448:mutate(lbl, if_else(Label == "normal", 0, Label)) %>%
1549761266448:mutate(lbl, if_else(Label == "aml", 1, Label))
1549761277261:# Format metadata
1549761277262:metadata %>%
1549761277262:mutate(lbl = if_else(Label == "normal", 0, Label)) %>%
1549761277263:mutate(lbl = if_else(Label == "aml", 1, Label))
1549761322305:# Format metadata
1549761322306:metadata %>%
1549761322306:mutate(lbl = ifelse(Label == "normal", 0, Label)) %>%
1549761322307:mutate(lbl = ifelse(Label == "aml", 1, Label))
1549761351757:# Format metadata
1549761351757:metadata %>%
1549761351758:mutate(lbl = ifelse(Label == "normal", 0, ifelse(Label == "aml", 1, Label))) #%>%
1549761362272:# Format metadata
1549761362272:metadata %<>%
1549761362273:mutate(lbl = ifelse(Label == "normal", 0, ifelse(Label == "aml", 1, Label))) #%>%
1549761379358:packages <- c("caret", "tidyverse", "magrittr") # All required packages in here!
1549761380045:installAndLoadPackages(packages)
1549761390309:# Format metadata
1549761390309:metadata %<>%
1549761390310:mutate(lbl = ifelse(Label == "normal", 0, ifelse(Label == "aml", 1, Label))) #%>%
1549761394878:metadata
1549761434316:#!/usr/bin/env Rscript
1549761434317:# ##############################################################################
1549761434317:#  Author:   Shashwat Deepali Nagar
1549761434318:#            Hector Fabio Espitia-Navarro
1549761434318:#            Georgia Institute of Technology
1549761434318:#  Version:  0.1
1549761434319:#  Date:     02/09/2019
1549761434319:# ##############################################################################
1549761434322:# Packages ----------------------------------------------------------------
1549761434322:# Function to install and load packages
1549761434322:installAndLoadPackages <- function(pkg){
1549761434323:new_pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549761434324:if (length(new_pkg))
1549761434324:install.packages(new_pkg, repos="http://cran.rstudio.com/",
1549761434324:dependencies = TRUE, lib = personal_lib_path)
1549761434325:sapply(pkg, function(x){ require(x, character.only = TRUE, quietly = FALSE) })
1549761434325:# suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = F))
1549761434326:}
1549761434327:personal_lib_path <- Sys.getenv("R_LIBS_USER")
1549761434327:if(!file.exists(personal_lib_path))
1549761434328:dir.create(personal_lib_path)
1549761434329:packages <- c("caret", "tidyverse", "magrittr") # All required packages in here!
1549761434331:installAndLoadPackages(packages)
1549761434342:# Load data ---------------------------------------------------------------
1549761434343:data_dir    <- "data/CSV"
1549761434343:metadata    <- read_csv("data/AMLTraining.csv.zip")
1549761434408:r_data_file <- "data/all_data.RData"
1549761434409:testing_mode       <- FALSE # Turn off for working with the whole dataset
1549761434409:n_samples          <- ifelse(testing_mode, 2, length(unique(metadata$SampleNumber)))
1549761434410:n_tubes_per_sample <- ifelse(testing_mode, 3, length(unique(metadata$TubeNumber)))
1549761434411:# Load dataset
1549761434411:if (!file.exists(r_data_file)) {
1549761434411:# Read the dataset
1549761434412:all_tube_data <- lapply(1:n_samples, function(sn) {
1549761434412:lapply(1:n_tubes_per_sample, function (tn){
1549761434412:filename <- metadata %>% filter(SampleNumber == sn, TubeNumber == tn) %>%
1549761434413:select(FCSFileName) %>% pull()
1549761434413:read_csv(sprintf("%s/%04d.CSV", data_dir, filename))
1549761434413:})
1549761434414:})
1549761434414:save(all_tube_data, file = r_data_file,
1549761434415:compress = "bzip2", compression_level = 9)
1549761434415:} else {
1549761434416:load(file = r_data_file, verbose = TRUE)
1549761434416:}
1549761440902:# Format metadata
1549761440903:metadata %<>%
1549761440903:mutate(class = ifelse(Label == "normal", 0, ifelse(Label == "aml", 1, Label))) #%>%
1549761467647:metadata %>% filter(Label == "normal")
1549761473307:metadata %>% filter(Label == "aml")
1549761479577:metadata %>% filter(Label == "NA")
1549761489969:metadata %>% filter(is.na(Label))
1549762354685:all_tube_data[[1]][[1]]
1549763217521:all_tube_data[[1]][[1]]
1549763255928:all_tube_data[[1]][[2]]
1549763263194:# Transform data ----------------------------------------------------------
1549763263195:data_col_names <- names(all_tube_data[[1]][[2]])
1549763265161:data_col_names
1549763302115:names(all_tube_data[[1]][[1])
1549763309371:namesall_tube_data[[1]][[1]])
1549763312018:namesall_tube_data[[1]][[1]])
1549763317057:names(all_tube_data[[1]][[1]])
1549763685310:for (sample in 1:n_samples) {
1549763685311:for (tube in 1:n_tubes) {
1549763685313:for (col in data_col_names) {
1549763685314:print(mean(all_tube_data[[sample]][[tube]][[col]]))
1549763685314:}
1549763685316:}
1549763685317:}
1549763701274:for (sample in 1:n_samples) {
1549763701275:for (tube in 1:n_tubes_per_sample) {
1549763701276:for (col in data_col_names) {
1549763701276:print(mean(all_tube_data[[sample]][[tube]][[col]]))
1549763701277:}
1549763701278:}
1549763701285:}
1549763749186:for (sample in 1:n_samples) {
1549763749187:for (tube in 1:n_tubes_per_sample) {
1549763749188:for (col in data_col_names) {
1549763749189:print(str_glue("{col}: ", mean(all_tube_data[[sample]][[tube]][[col]])))
1549763749189:}
1549763749190:}
1549763749190:}
1549764083584:data_col_names[-c("FS Lin", "SS Log")]
1549764091862:-c("FS Lin", "SS Log")
1549764107335:data_col_names[-c(1:2)]
1549764476168:variables = list()
1549764493008:variables = list()
1549764493663:for (sample in 1:n_samples) {
1549764493663:# fs <- c()
1549764493664:# ss <- c()
1549764493664:for (tube in 1:n_tubes_per_sample) {
1549764493665:# fs <- c(fs, all_tube_data[[sample]][[tube]][["FS Lin"]])
1549764493665:# ss <- c(ss, all_tube_data[[sample]][[tube]][["SS Log"]])
1549764493666:variables <- lapply(data_col_names[-c(1:2)], mean)
1549764493666:}
1549764493667:# fs <- mean(fs)
1549764493668:# ss <- mean(ss)
1549764493670:}
1549764502747:warnings()
1549764639884:variables = list()
1549764640412:for (sample in 1:n_samples) {
1549764640413:# fs <- c()
1549764640413:# ss <- c()
1549764640413:for (tube in 1:n_tubes_per_sample) {
1549764640414:# fs <- c(fs, all_tube_data[[sample]][[tube]][["FS Lin"]])
1549764640414:# ss <- c(ss, all_tube_data[[sample]][[tube]][["SS Log"]])
1549764640414:variables <- lapply(data_col_names[-c(1:2)], function(col){
1549764640415:mean(all_tube_data[[sample]][[tube]][[col]])
1549764640416:})
1549764640416:}
1549764640416:# fs <- mean(fs)
1549764640417:# ss <- mean(ss)
1549764640417:}
1549764665178:variables = list()
1549764665781:for (sample in 1:n_samples) {
1549764665781:# fs <- c()
1549764665781:# ss <- c()
1549764665782:for (tube in 1:n_tubes_per_sample) {
1549764665782:# fs <- c(fs, all_tube_data[[sample]][[tube]][["FS Lin"]])
1549764665783:# ss <- c(ss, all_tube_data[[sample]][[tube]][["SS Log"]])
1549764665783:variables <- lapply(data_col_names[-c(1:2)], function(col){
1549764665784:mean(all_tube_data[[sample]][[tube]][col])
1549764665784:})
1549764665786:}
1549764665787:# fs <- mean(fs)
1549764665787:# ss <- mean(ss)
1549764665788:}
1549764675612:sample
1549764677610:tube
1549764679923:col
1549764685680:all_tube_data[[sample]][[tube]][col]
1549764693770:all_tube_data[[sample]][[tube]]
1549764700713:all_tube_data[[sample]]
1549764707679:all_tube_data[[sample]][[tube]]
1549764721730:tube
1549764734812:#!/usr/bin/env Rscript
1549764734813:# ##############################################################################
1549764734814:#  Author:   Shashwat Deepali Nagar
1549764734814:#            Hector Fabio Espitia-Navarro
1549764734815:#            Georgia Institute of Technology
1549764734815:#  Version:  0.1
1549764734816:#  Date:     02/09/2019
1549764734816:# ##############################################################################
1549764734817:# Packages ----------------------------------------------------------------
1549764734818:# Function to install and load packages
1549764734818:installAndLoadPackages <- function(pkg){
1549764734819:new_pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549764734819:if (length(new_pkg))
1549764734820:install.packages(new_pkg, repos="http://cran.rstudio.com/",
1549764734821:dependencies = TRUE, lib = personal_lib_path)
1549764734821:sapply(pkg, function(x){ require(x, character.only = TRUE, quietly = FALSE) })
1549764734821:# suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = F))
1549764734822:}
1549764734822:personal_lib_path <- Sys.getenv("R_LIBS_USER")
1549764734825:if(!file.exists(personal_lib_path))
1549764734826:dir.create(personal_lib_path)
1549764734827:packages <- c("caret", "tidyverse", "magrittr") # All required packages in here!
1549764734828:installAndLoadPackages(packages)
1549764734836:# Load data ---------------------------------------------------------------
1549764734836:data_dir    <- "data/CSV"
1549764734837:metadata    <- read_csv("data/AMLTraining.csv.zip")
1549764734916:r_data_file <- "data/all_data.RData"
1549764734918:testing_mode       <- FALSE # Turn off for working with the whole dataset
1549764734920:n_samples          <- ifelse(testing_mode, 2, length(unique(metadata$SampleNumber)))
1549764734922:n_tubes_per_sample <- ifelse(testing_mode, 3, length(unique(metadata$TubeNumber)))
1549764734927:# Load dataset
1549764734928:if (!file.exists(r_data_file)) {
1549764734928:# Read the dataset
1549764734929:all_tube_data <- lapply(1:n_samples, function(sn) {
1549764734929:lapply(1:n_tubes_per_sample, function (tn){
1549764734930:filename <- metadata %>% filter(SampleNumber == sn, TubeNumber == tn) %>%
1549764734931:select(FCSFileName) %>% pull()
1549764734932:read_csv(sprintf("%s/%04d.CSV", data_dir, filename))
1549764734932:})
1549764734933:})
1549764734934:save(all_tube_data, file = r_data_file,
1549764734935:compress = "bzip2", compression_level = 9)
1549764734936:} else {
1549764734936:load(file = r_data_file, verbose = TRUE)
1549764734937:}
1549764735149:# Create class column
1549764735149:metadata %<>%
1549764735150:mutate(class = ifelse(Label == "normal", 0, ifelse(Label == "aml", 1, Label)))
1549764739249:n_tubes_per_sample
1549764754983:#!/usr/bin/env Rscript
1549764754984:# ##############################################################################
1549764754984:#  Author:   Shashwat Deepali Nagar
1549764754985:#            Hector Fabio Espitia-Navarro
1549764754985:#            Georgia Institute of Technology
1549764754985:#  Version:  0.1
1549764754986:#  Date:     02/09/2019
1549764754986:# ##############################################################################
1549764754987:# Packages ----------------------------------------------------------------
1549764754988:# Function to install and load packages
1549764754988:installAndLoadPackages <- function(pkg){
1549764754989:new_pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549764754990:if (length(new_pkg))
1549764754991:install.packages(new_pkg, repos="http://cran.rstudio.com/",
1549764754991:dependencies = TRUE, lib = personal_lib_path)
1549764754992:sapply(pkg, function(x){ require(x, character.only = TRUE, quietly = FALSE) })
1549764754993:# suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = F))
1549764754994:}
1549764754996:personal_lib_path <- Sys.getenv("R_LIBS_USER")
1549764754998:if(!file.exists(personal_lib_path))
1549764754998:dir.create(personal_lib_path)
1549764754999:packages <- c("caret", "tidyverse", "magrittr") # All required packages in here!
1549764754999:installAndLoadPackages(packages)
1549764755006:# Load data ---------------------------------------------------------------
1549764755006:data_dir    <- "data/CSV"
1549764755007:metadata    <- read_csv("data/AMLTraining.csv.zip")
1549764755017:r_data_file <- "data/all_data.RData"
1549764755018:testing_mode       <- TRUE # Turn off for working with the whole dataset
1549764755019:n_samples          <- ifelse(testing_mode, 2, length(unique(metadata$SampleNumber)))
1549764755020:n_tubes_per_sample <- ifelse(testing_mode, 3, length(unique(metadata$TubeNumber)))
1549764755023:# Load dataset
1549764755024:if (!file.exists(r_data_file)) {
1549764755025:# Read the dataset
1549764755026:all_tube_data <- lapply(1:n_samples, function(sn) {
1549764755027:lapply(1:n_tubes_per_sample, function (tn){
1549764755028:filename <- metadata %>% filter(SampleNumber == sn, TubeNumber == tn) %>%
1549764755029:select(FCSFileName) %>% pull()
1549764755030:read_csv(sprintf("%s/%04d.CSV", data_dir, filename))
1549764755031:})
1549764755033:})
1549764755034:save(all_tube_data, file = r_data_file,
1549764755035:compress = "bzip2", compression_level = 9)
1549764755035:} else {
1549764755037:load(file = r_data_file, verbose = TRUE)
1549764755038:}
1549764755550:# Create class column
1549764755550:metadata %<>%
1549764755550:mutate(class = ifelse(Label == "normal", 0, ifelse(Label == "aml", 1, Label)))
1549764755560:# Transform data ----------------------------------------------------------
1549764755561:data_col_names <- names(all_tube_data[[1]][[1]])
1549764755562:names(all_tube_data[[1]][[1]])
1549764757875:variables = list()
1549764758382:for (sample in 1:n_samples) {
1549764758383:# fs <- c()
1549764758383:# ss <- c()
1549764758384:for (tube in 1:n_tubes_per_sample) {
1549764758384:# fs <- c(fs, all_tube_data[[sample]][[tube]][["FS Lin"]])
1549764758385:# ss <- c(ss, all_tube_data[[sample]][[tube]][["SS Log"]])
1549764758386:variables <- lapply(data_col_names[-c(1:2)], function(col){
1549764758387:mean(all_tube_data[[sample]][[tube]][[col]])
1549764758388:})
1549764758389:}
1549764758389:# fs <- mean(fs)
1549764758390:# ss <- mean(ss)
1549764758390:}
1549764763712:variables
1549764829421:data_col_names[-c(1:2)]
1549764846473:lapply(data_col_names[-c(1:2)], function(col){
1549764846473:mean(all_tube_data[[sample]][[tube]][[col]])
1549764846475:})
1549764901038:data_col_names
1549764913616:names(data_col_names) <- data_col_names
1549764916074:data_col_names
1549764922279:names(all_tube_data[[1]][[1]])
1549764926732:variables = list()
1549764928314:for (sample in 1:n_samples) {
1549764928314:fs <- c()
1549764928315:ss <- c()
1549764928316:for (tube in 1:n_tubes_per_sample) {
1549764928316:fs <- c(fs, all_tube_data[[sample]][[tube]][["FS Lin"]])
1549764928317:ss <- c(ss, all_tube_data[[sample]][[tube]][["SS Log"]])
1549764928318:variables <- lapply(data_col_names[-c(1:2)], function(col){
1549764928319:mean(all_tube_data[[sample]][[tube]][[col]])
1549764928320:})
1549764928320:}
1549764928321:fs <- mean(fs)
1549764928322:ss <- mean(ss)
1549764928325:}
1549764934070:variables
1549765004412:variables = list()
1549765006305:for (sample in 1:n_samples) {
1549765006306:fs <- c()
1549765006307:ss <- c()
1549765006309:for (tube in 1:n_tubes_per_sample) {
1549765006310:fs <- c(fs, all_tube_data[[sample]][[tube]][["FS Lin"]])
1549765006312:ss <- c(ss, all_tube_data[[sample]][[tube]][["SS Log"]])
1549765006313:variables <- lapply(data_col_names[-c(1:2)], function(col){
1549765006314:mean(all_tube_data[[sample]][[tube]][[col]])
1549765006319:})
1549765006320:}
1549765006320:variables[["FS Lin"]] <- mean(fs)
1549765006321:variables[["SS Log"]] <- mean(ss)
1549765006321:}
1549765008054:variables
1549765083078:variables = list()
1549765084291:for (sample in 1:n_samples) {
1549765084291:fs <- c()
1549765084292:ss <- c()
1549765084293:for (tube in 1:n_tubes_per_sample) {
1549765084294:fs <- c(fs, all_tube_data[[sample]][[tube]][["FS Lin"]])
1549765084295:ss <- c(ss, all_tube_data[[sample]][[tube]][["SS Log"]])
1549765084296:# variables <- lapply(data_col_names[-c(1:2)], function(col){
1549765084297:variables <- lapply(data_col_names, function(col){
1549765084298:mean(all_tube_data[[sample]][[tube]][[col]])
1549765084298:})
1549765084299:}
1549765084299:variables[["FS Lin t"]] <- mean(fs)
1549765084300:variables[["SS Log t"]] <- mean(ss)
1549765084303:}
1549765085732:variables
1549765413229:# Transform data ----------------------------------------------------------
1549765413230:data_col_names <- names(all_tube_data[[1]][[1]])
1549771787530:variables = list()
1549771794023:for (sample in 1:n_samples) {
1549771794023:fs <- c()
1549771794024:ss <- c()
1549771794024:for (tube in 1:n_tubes_per_sample) {
1549771794025:fs <- c(fs, all_tube_data[[sample]][[tube]][["FS Lin"]])
1549771794025:ss <- c(ss, all_tube_data[[sample]][[tube]][["SS Log"]])
1549771794026:tmp_list <- lapply(data_col_names, function(col){
1549771794026:mean(all_tube_data[[sample]][[tube]][[col]])
1549771794027:})
1549771794028:variables <- c(variables, tmp_list)
1549771794028:}
1549771794029:variables[["FS Lin t"]] <- mean(fs)
1549771794030:variables[["SS Log t"]] <- mean(ss)
1549771794031:}
1549771795612:variables
1549771842805:variables = list()
1549771843529:for (sample in 1:n_samples) {
1549771843529:fs <- c()
1549771843530:ss <- c()
1549771843530:for (tube in 1:n_tubes_per_sample) {
1549771843531:fs <- c(fs, all_tube_data[[sample]][[tube]][["FS Lin"]])
1549771843532:ss <- c(ss, all_tube_data[[sample]][[tube]][["SS Log"]])
1549771843532:tmp_list <- lapply(data_col_names[-c(1:2)], function(col){
1549771843533:mean(all_tube_data[[sample]][[tube]][[col]])
1549771843534:})
1549771843535:variables <- c(variables, tmp_list)
1549771843537:}
1549771843537:variables[["FS Lin t"]] <- mean(fs)
1549771843538:variables[["SS Log t"]] <- mean(ss)
1549771843539:}
1549771844847:variables
1549771863573:8 * 5
1549771876367:(8 * 5) + 1 + 1
1549771886050:data_col_names
1549771894484:n_tubes_per_sample
1549771936710:for (sample in 1:n_samples) {
1549771936711:variables = list()
1549771936712:fs <- c()
1549771936712:ss <- c()
1549771936712:for (tube in 1:n_tubes_per_sample) {
1549771936713:fs <- c(fs, all_tube_data[[sample]][[tube]][["FS Lin"]])
1549771936713:ss <- c(ss, all_tube_data[[sample]][[tube]][["SS Log"]])
1549771936714:tmp_list <- lapply(data_col_names[-c(1:2)], function(col){
1549771936714:mean(all_tube_data[[sample]][[tube]][[col]])
1549771936715:})
1549771936715:variables <- c(variables, tmp_list)
1549771936716:}
1549771936716:variables[["FS Lin t"]] <- mean(fs)
1549771936716:variables[["SS Log t"]] <- mean(ss)
1549771936717:}
1549771938094:variables
1549772011366:for (sample in 1:n_samples) {
1549772011367:variables = list()
1549772011368:fs <- c()
1549772011368:ss <- c()
1549772011369:for (tube in 1:n_tubes_per_sample) {
1549772011370:fs <- c(fs, all_tube_data[[sample]][[tube]][["FS Lin"]])
1549772011370:ss <- c(ss, all_tube_data[[sample]][[tube]][["SS Log"]])
1549772011372:# tmp_list <- lapply(data_col_names[-c(1:2)], function(col){
1549772011372:tmp_list <- lapply(data_col_names, function(col){
1549772011373:mean(all_tube_data[[sample]][[tube]][[col]])
1549772011374:})
1549772011374:variables <- c(variables, tmp_list)
1549772011375:}
1549772011376:# variables[["FS Lin"]] <- mean(fs)
1549772011377:# variables[["SS Log"]] <- mean(ss)
1549772011389:}
1549772012581:variables
1549773242758:mean(all_tube_data[[1]][[1]])
1549773259695:mean(all_tube_data[[1]][[1]], na.rm = TRUE)
1549773268837:all_tube_data[[1]][[1]]
1549773423448:iris
1549773425914:iris %>%
1549773425915:group_by(Species) %>%
1549773425915:summarise_all(mean)
1549773430505:iris %>%
1549773430506:# group_by(Species) %>%
1549773430506:summarise_all(mean)
1549773476430:iris %>%
1549773476431:select(-Species) %>%
1549773476431:# group_by(Species) %>%
1549773476432:summarise_all(mean)
1549773564113:for (sample in 1:n_samples) {
1549773564114:variables = list()
1549773564114:fs <- c()
1549773564114:ss <- c()
1549773564115:for (tube in 1:n_tubes_per_sample) {
1549773564115:print(all_tube_data[[1]][[1]] %>%
1549773564115:summarise_all(mean))
1549773564116:}
1549773564116:# variables[["FS Lin"]] <- mean(fs)
1549773564116:# variables[["SS Log"]] <- mean(ss)
1549773564117:}
1549773731552:channels_metadata <- read_csv("data/channels_metadata.csv")
1549773795323:channels_metadata %>%
1549773795324:gather(Channel, Name, -Tube)
1549773822520:channels_metadata <- read_csv("data/channels_metadata.csv") %>%
1549773822521:gather(Channel, Name, -Tube)
1549773824597:channels_metadata
1549773851783:View(channels_metadata)
1549774133362:channels_metadata <- read_csv("data/channels_metadata.csv") %>%
1549774133362:gather(Channel, Name, -Tube)
1549774136126:channels_metadata
1549774259052:channels_metadata <- read_csv("data/channels_metadata.csv") %>%
1549774259053:gather(Channel, Name, -Tube)
1549774260701:channels_metadata
1549774273329:channels_metadata %>% filter(Tube == 1)
1549774416855:for (sample in 1:n_samples) {
1549774416856:variables = list()
1549774416857:fs <- c()
1549774416857:ss <- c()
1549774416858:for (tube in 1:n_tubes_per_sample) {
1549774416859:tib <- all_tube_data[[sample]][[tube]] %>%
1549774416859:summarise_all(mean) %>%
1549774416860:names(channels_metadata %>% filter(Tube == tube))
1549774416860:print(tib)
1549774416860:}
1549774416861:# variables[["FS Lin"]] <- mean(fs)
1549774416861:# variables[["SS Log"]] <- mean(ss)
1549774416861:}
1549774449131:for (sample in 1:n_samples) {
1549774449131:variables = list()
1549774449132:fs <- c()
1549774449133:ss <- c()
1549774449133:for (tube in 1:n_tubes_per_sample) {
1549774449134:tib <- all_tube_data[[sample]][[tube]] %>%
1549774449134:summarise_all(mean)
1549774449135:names(tib) <- channels_metadata %>% filter(Tube == tube)
1549774449136:print(tib)
1549774449136:}
1549774449137:# variables[["FS Lin"]] <- mean(fs)
1549774449137:# variables[["SS Log"]] <- mean(ss)
1549774449138:}
1549774460724:channels_metadata %>% filter(Tube == tube)
1549774472803:for (sample in 1:n_samples) {
1549774472803:variables = list()
1549774472804:fs <- c()
1549774472804:ss <- c()
1549774472805:for (tube in 1:n_tubes_per_sample) {
1549774472806:tib <- all_tube_data[[sample]][[tube]] %>%
1549774472807:summarise_all(mean)
1549774472807:names(tib) <- channels_metadata %>% filter(Tube == tube) %>% select(Name)
1549774472808:print(tib)
1549774472809:}
1549774472809:# variables[["FS Lin"]] <- mean(fs)
1549774472810:# variables[["SS Log"]] <- mean(ss)
1549774472810:}
1549774496198:for (sample in 1:n_samples) {
1549774496199:variables = list()
1549774496199:fs <- c()
1549774496200:ss <- c()
1549774496200:for (tube in 1:n_tubes_per_sample) {
1549774496201:tib <- all_tube_data[[sample]][[tube]] %>%
1549774496202:summarise_all(mean)
1549774496202:names(tib) <- channels_metadata %>%
1549774496203:filter(Tube == tube) %>% select(Name) %>% pull()
1549774496204:print(tib)
1549774496204:}
1549774496205:# variables[["FS Lin"]] <- mean(fs)
1549774496206:# variables[["SS Log"]] <- mean(ss)
1549774496206:}
1549774633135:for (sample in 1:n_samples) {
1549774633135:variables = list()
1549774633136:lapply(n_tubes_per_sample, function(tube) {
1549774633137:tib <- all_tube_data[[sample]][[tube]] %>%
1549774633138:summarise_all(mean)
1549774633139:names(tib) <- channels_metadata %>%
1549774633139:filter(Tube == tube) %>% select(Name) %>% pull()
1549774633141:print(tib)
1549774633141:tib
1549774633142:})
1549774633143:# variables[["FS Lin"]] <- mean(fs)
1549774633143:# variables[["SS Log"]] <- mean(ss)
1549774633144:}
1549774743561:samples
1549774762035:unique(metadata$SampleNumber)
1549774848873:lapply(1:n_samples, function(sample){
1549774848874:lapply(1:n_tubes_per_sample, function(tube, sam=sample) {
1549774848875:tib <- all_tube_data[[sam]][[tube]] %>%
1549774848876:summarise_all(mean)
1549774848877:names(tib) <- channels_metadata %>%
1549774848877:filter(Tube == tube) %>% select(Name) %>% pull()
1549774848878:print(tib)
1549774848879:tib
1549774848880:})
1549774848881:# variables[["FS Lin"]] <- mean(fs)
1549774848882:# variables[["SS Log"]] <- mean(ss)
1549774848886:})
1549775097423:lapply(1:n_samples, function(sample){
1549775097424:# lapply(1:n_tubes_per_sample, function(tube, sam=sample) {
1549775097424:features <- tibble()
1549775097425:for (tube in 1:n_tubes_per_sample) {
1549775097425:# tib <- all_tube_data[[sam]][[tube]] %>%
1549775097426:tib <- all_tube_data[[sample]][[tube]] %>%
1549775097426:summarise_all(mean)
1549775097427:names(tib) <- channels_metadata %>%
1549775097428:filter(Tube == tube) %>% select(Name) %>% pull()
1549775097428:print(tib)
1549775097429:features <- cbind(features, tib)
1549775097429:}#)
1549775097430:features
1549775097430:})
1549775129243:lapply(1:n_samples, function(sample){
1549775129244:# lapply(1:n_tubes_per_sample, function(tube, sam=sample) {
1549775129245:features <- tibble()
1549775129245:for (tube in 1:n_tubes_per_sample) {
1549775129246:# tib <- all_tube_data[[sam]][[tube]] %>%
1549775129246:tib <- all_tube_data[[sample]][[tube]] %>%
1549775129247:summarise_all(mean)
1549775129247:names(tib) <- channels_metadata %>%
1549775129248:filter(Tube == tube) %>% select(Name) %>% pull()
1549775129248:print(tib)
1549775129249:features <- cbind.data.frame(features, tib)
1549775129250:}#)
1549775129250:features
1549775129251:})
1549775144822:features
1549775153311:# lapply(1:n_tubes_per_sample, function(tube, sam=sample) {
1549775153312:features <- tibble()
1549775158771:tib
1549775161384:features
1549775164978:cbind.data.frame(features, tib)
1549775309952:lapply(1:n_samples, function(sample){
1549775309953:# lapply(1:n_tubes_per_sample, function(tube, sam=sample) {
1549775309953:features <- tibble()
1549775309954:for (tube in 1:n_tubes_per_sample) {
1549775309954:# tib <- all_tube_data[[sam]][[tube]] %>%
1549775309955:tib <- all_tube_data[[sample]][[tube]] %>%
1549775309956:summarise_all(mean)
1549775309956:names(tib) <- channels_metadata %>%
1549775309957:filter(Tube == tube) %>% select(Name) %>% pull()
1549775309958:print(tib %>% slice(1) %>% unlist(.))
1549775309958:# features <- cbind.data.frame(features, tib)
1549775309959:}#)
1549775309959:# features
1549775309959:})
1549775359290:lapply(1:n_samples, function(sample){
1549775359484:# lapply(1:n_tubes_per_sample, function(tube, sam=sample) {
1549775359485:features <- tibble()
1549775359485:values <- c()
1549775359486:for (tube in 1:n_tubes_per_sample) {
1549775359487:# tib <- all_tube_data[[sam]][[tube]] %>%
1549775359487:tib <- all_tube_data[[sample]][[tube]] %>%
1549775359488:summarise_all(mean)
1549775359488:names(tib) <- channels_metadata %>%
1549775359489:filter(Tube == tube) %>% select(Name) %>% pull()
1549775359490:values <- c(values, tib %>% slice(1) %>% unlist(.))
1549775359490:print(values)
1549775359492:# features <- cbind.data.frame(features, tib)
1549775359493:}#)
1549775359493:# features
1549775359495:})
1549775388825:lapply(1:n_samples, function(sample){
1549775388826:# lapply(1:n_tubes_per_sample, function(tube, sam=sample) {
1549775388827:features <- tibble()
1549775388827:values <- c()
1549775388828:for (tube in 1:n_tubes_per_sample) {
1549775388828:# tib <- all_tube_data[[sam]][[tube]] %>%
1549775388829:tib <- all_tube_data[[sample]][[tube]] %>%
1549775388829:summarise_all(mean)
1549775388829:names(tib) <- channels_metadata %>%
1549775388830:filter(Tube == tube) %>% select(Name) %>% pull()
1549775388830:values <- c(values, tib %>% slice(1) %>% unlist(.))
1549775388831:print(length(values))
1549775388831:print(values)
1549775388832:# features <- cbind.data.frame(features, tib)
1549775388833:}#)
1549775388833:# features
1549775388834:})
1549775572409:lapply(1:n_samples, function(sample){
1549775572410:# lapply(1:n_tubes_per_sample, function(tube, sam=sample) {
1549775572410:features <- tibble()
1549775572411:values <- c()
1549775572411:lapply(1:n_tubes_per_sample, function(tube, sam=sample){
1549775572412:# for (tube in 1:n_tubes_per_sample) {
1549775572413:tib <- all_tube_data[[sam]][[tube]] %>%
1549775572414:# tib <- all_tube_data[[sample]][[tube]] %>%
1549775572414:summarise_all(mean)
1549775572415:names(tib) <- channels_metadata %>%
1549775572415:filter(Tube == tube) %>% select(Name) %>% pull()
1549775572416:# values <- c(values, tib %>% slice(1) %>% unlist(.))
1549775572416:# print(length(values))
1549775572416:# print(values)
1549775572417:values <- tib %>% slice(1) %>% unlist(.)
1549775572417:# features <- cbind.data.frame(features, tib)
1549775572418:# }
1549775572418:})
1549775572419:# features
1549775572419:})
1549775600316:lapply(1:n_samples, function(sample){
1549775600316:# lapply(1:n_tubes_per_sample, function(tube, sam=sample) {
1549775600317:# features <- tibble()
1549775600317:# values <- c()
1549775600318:feat <- lapply(1:n_tubes_per_sample, function(tube, sam=sample){
1549775600318:# for (tube in 1:n_tubes_per_sample) {
1549775600319:tib <- all_tube_data[[sam]][[tube]] %>%
1549775600319:# tib <- all_tube_data[[sample]][[tube]] %>%
1549775600320:summarise_all(mean)
1549775600321:names(tib) <- channels_metadata %>%
1549775600321:filter(Tube == tube) %>% select(Name) %>% pull()
1549775600322:# values <- c(values, tib %>% slice(1) %>% unlist(.))
1549775600323:# print(length(values))
1549775600324:# print(values)
1549775600324:values <- tib %>% slice(1) %>% unlist(.)
1549775600325:# features <- cbind.data.frame(features, tib)
1549775600325:# }
1549775600325:})
1549775600326:unlist(feat)
1549775600326:})
1549775689083:samples_summ <- lapply(1:n_samples, function(sample){
1549775689083:feat <- lapply(1:n_tubes_per_sample, function(tube, sam=sample){
1549775689084:tib <- all_tube_data[[sam]][[tube]] %>%
1549775689084:summarise_all(mean)
1549775689085:names(tib) <- channels_metadata %>%
1549775689085:filter(Tube == tube) %>% select(Name) %>% pull()
1549775689085:values <- tib %>% slice(1) %>% unlist(.)
1549775689086:})
1549775689086:unlist(feat)
1549775689087:})
1549775699118:rbind(samples_summ)
1549775703108:samples_summ
1549775841624:samples_summ <- lapply(1:n_samples, function(sample){
1549775841625:feat <- lapply(1:n_tubes_per_sample, function(tube, sam=sample){
1549775841625:tib <- all_tube_data[[sam]][[tube]] %>%
1549775841626:summarise_all(mean)
1549775841626:names(tib) <- channels_metadata %>%
1549775841626:filter(Tube == tube) %>% select(Name) %>% pull()
1549775841627:values <- tib %>% slice(1) %>% unlist(.)
1549775841627:})
1549775841628:unlist(feat)
1549775841628:})
1549775844007:bind_rows(samples_summ)
1549775857361:samples_summ
1549775943213:(samples_summ <- lapply(1:n_samples, function(sample){
1549775943214:feat <- lapply(1:n_tubes_per_sample, function(tube, sam=sample){
1549775943215:tib <- all_tube_data[[sam]][[tube]] %>%
1549775943215:summarise_all(mean)
1549775943216:names(tib) <- channels_metadata %>%
1549775943216:filter(Tube == tube) %>% select(Name) %>% pull()
1549775943217:values <- tib %>% slice(1) %>% unlist(.)
1549775943217:})
1549775943218:# unlist(feat)
1549775943218:feat
1549775943219:})
1549775943220:)
1549775972564:(samples_summ <- lapply(1:n_samples, function(sample){
1549775972564:feat <- lapply(1:n_tubes_per_sample, function(tube, sam=sample){
1549775972565:tib <- all_tube_data[[sam]][[tube]] %>%
1549775972566:summarise_all(mean)
1549775972566:names(tib) <- channels_metadata %>%
1549775972567:filter(Tube == tube) %>% select(Name) %>% pull()
1549775972568:values <- tib %>% slice(1) %>% unlist(.)
1549775972568:})
1549775972569:# unlist(feat)
1549775972570:bind_cols(feat)
1549775972571:})
1549775972572:)
1549776047171:(samples_summ <- lapply(1:n_samples, function(sample){
1549776047172:feat <- lapply(1:n_tubes_per_sample, function(tube, sam=sample){
1549776047172:tib <- all_tube_data[[sam]][[tube]] %>%
1549776047173:summarise_all(mean)
1549776047174:names(tib) <- channels_metadata %>%
1549776047174:filter(Tube == tube) %>% select(Name) %>% pull()
1549776047175:# values <- tib %>% slice(1) %>% unlist(.)
1549776047176:tib
1549776047176:})
1549776047177:# unlist(feat)
1549776047177:bind_cols(feat)
1549776047178:})
1549776047178:)
1549776058273:bind_rows(samples_summ)
1549776122338:samples_summ <- bind_rows(
1549776122339:lapply(1:n_samples, function(sample){
1549776122340:feat <- lapply(1:n_tubes_per_sample, function(tube, sam=sample){
1549776122341:tib <- all_tube_data[[sam]][[tube]] %>%
1549776122341:summarise_all(mean)
1549776122342:names(tib) <- channels_metadata %>%
1549776122343:filter(Tube == tube) %>% select(Name) %>% pull()
1549776122344:tib
1549776122345:})
1549776122345:bind_cols(feat)
1549776122346:})
1549776122347:)
1549776125106:samples_summ
1549776498323:summarized_samples <- bind_rows(
1549776498324:lapply(1:n_samples, function(sample){
1549776498325:feature_collection <- lapply(1:n_tubes_per_sample, function(tube, sam=sample){
1549776498325:summarized_tube <- all_tube_data[[sam]][[tube]] %>%
1549776498326:summarise_all(mean)
1549776498326:names(summarized_tube) <- channels_metadata %>%
1549776498326:filter(Tube == tube) %>% select(Name) %>% pull()
1549776498327:summarized_tube
1549776498327:})
1549776498328:bind_cols(feature_collection)
1549776498328:})
1549776498328:)
1549776505651:summarized_samples
1549776656518:mean
1549776659058:fun <- mean
1549776660338:summarized_samples <- bind_rows(
1549776660339:lapply(1:n_samples, function(sample, fn=fun){
1549776660339:feature_collection <- lapply(1:n_tubes_per_sample, function(tube, sam=sample, fn=fun){
1549776660340:summarized_tube <- all_tube_data[[sam]][[tube]] %>%
1549776660341:# summarise_all(mean)
1549776660341:summarise_all(fun)
1549776660342:names(summarized_tube) <- channels_metadata %>%
1549776660342:filter(Tube == tube) %>% select(Name) %>% pull()
1549776660343:summarized_tube
1549776660344:})
1549776660344:bind_cols(feature_collection)
1549776660345:})
1549776660345:)
1549776662693:summarized_samples
1549776666880:fun <- sd
1549776667402:summarized_samples <- bind_rows(
1549776667403:lapply(1:n_samples, function(sample, fn=fun){
1549776667404:feature_collection <- lapply(1:n_tubes_per_sample, function(tube, sam=sample, fn=fun){
1549776667404:summarized_tube <- all_tube_data[[sam]][[tube]] %>%
1549776667405:# summarise_all(mean)
1549776667406:summarise_all(fun)
1549776667407:names(summarized_tube) <- channels_metadata %>%
1549776667408:filter(Tube == tube) %>% select(Name) %>% pull()
1549776667408:summarized_tube
1549776667409:})
1549776667410:bind_cols(feature_collection)
1549776667410:})
1549776667411:)
1549776669516:summarized_samples
1549776821539:channel_metadata <- read_csv("data/channels_metadata.csv") %>%
1549776821540:gather(Channel, Name, -Tube)
1549776823046:channel_metadata
1549776865954:# Create class column in metadata
1549776865955:metadata %<>%
1549776865955:mutate(class = ifelse(Label == "normal", 0, ifelse(Label == "aml", 1, Label)))
1549776871559:# Transform data ----------------------------------------------------------
1549776871559:data_col_names <- names(all_tube_data[[1]][[1]])
1549776873165:data_col_names
1549776988295:summarizeData <- function(data, fun, channel_metadata) {
1549776988296:# summarized_samples <- bind_rows(
1549776988296:bind_rows(
1549776988297:lapply(1:n_samples, function(sample, fn=fun){
1549776988297:feature_collection <- lapply(1:n_tubes_per_sample, function(tube, sam=sample, f=fn){
1549776988297:summarized_tube <- data[[sam]][[tube]] %>%
1549776988298:# summarise_all(mean)
1549776988298:summarise_all(f)
1549776988299:names(summarized_tube) <- channels_metadata %>%
1549776988299:filter(Tube == tube) %>% select(Name) %>% pull()
1549776988300:summarized_tube
1549776988300:})
1549776988301:bind_cols(feature_collection)
1549776988301:})
1549776988302:)
1549776988303:}
1549777022817:summarizeData(data = all_tube_data, fun = mean, channel_metadata = channel_metadata)
1549777031053:summarizeData(data = all_tube_data, fun = sd, channel_metadata = channel_metadata)
1549778098941:channel_metadata
1549778491006:#' summarize the values meassured for all cells in a channel, using a function
1549778491007:#' specified by \code{fun}.
1549778491008:#'
1549778491008:#' @param data A list of samples. Each element is a list of tubes. Each tube is
1549778491009:#' a tibble that represents the different features represented as channels
1549778491009:#' (columns) measured on the cells (rows).
1549778491010:#' @param ch_metadata Tibble with the name of each measured feature for
1549778491010:#' each channel on each tube.
1549778491011:#' @param fun Function to be applied for summarizing each feature (channel)
1549778491011:#'
1549778491012:summarizeData <- function(data, ch_metadata, fun) {
1549778491012:bind_rows(
1549778491013:lapply(1:n_samples, function(sample, fn=fun){
1549778491013:feature_collection <- lapply(1:n_tubes_per_sample,
1549778491014:function(tube, sam=sample, f=fn){
1549778491015:summarized_tube <- data[[sam]][[tube]] %>%
1549778491015:summarise_all(f)
1549778491016:names(summarized_tube) <- ch_metadata %>%
1549778491018:filter(Tube == tube) %>% select(Name) %>% pull()
1549778491019:summarized_tube
1549778491020:})
1549778491020:bind_cols(feature_collection)
1549778491021:})
1549778491021:)
1549778491022:}
1549778532338:final_data <- summarizeData(all_tube_data, channel_metadata, sd)
1549778536974:final_data
1549778724816:#' summarize the values meassured for all cells in a channel, using a function
1549778724817:#' specified by \code{fun}.
1549778724818:#'
1549778724818:#' @param data A list of samples. Each element is a list of tubes. Each tube is
1549778724819:#' a tibble that represents the different features represented as channels
1549778724820:#' (columns) measured on the cells (rows).
1549778724821:#' @param ch_metadata Tibble with the name of each measured feature for
1549778724821:#' each channel on each tube.
1549778724822:#' @param fun Function to be applied for summarizing each feature (channel)
1549778724823:#'
1549778724823:summarizeData <- function(data, ch_metadata, fun) {
1549778724824:bind_rows(
1549778724824:lapply(1:n_samples, function(sample, fn=fun){
1549778724825:features <- lapply(1:n_tubes_per_sample, function(tube, sam=sample, f=fn){
1549778724826:summarized_tube <- data[[sam]][[tube]] %>%
1549778724826:summarise_all(f)
1549778724827:names(summarized_tube) <- ch_metadata %>%
1549778724828:filter(Tube == tube) %>% select(Name) %>% pull()
1549778724828:summarized_tube
1549778724829:})
1549778724829:bind_cols(features)
1549778724830:})
1549778724831:)
1549778724831:}
1549778727865:# Transform data ----------------------------------------------------------
1549778727866:final_data <- summarizeData(all_tube_data, channel_metadata, sd)
1549778731108:final_data
1549779600756:#' specified by \code{fun}.
1549779600780:#'
1549779600781:#' @param data A list of samples. Each element is a list of tubes. Each tube is
1549779600782:#' a tibble that contains the different cell features measured on each
1549779600783:#' channel. Rows are cells, columns are features.
1549779600783:#' @param ch_metadata Tibble with the name of each measured feature for each
1549779600783:#' channel on each tube.
1549779600784:#' @param fun Function for summarizing each feature (channel)
1549779600784:#'
1549779600784:#'
1549779600785:lapply(all_tube_data, function(x){ print(names(x))})
1549779651842:summarizeData <- function(data, ch_metadata, fun) {
1549779651843:n_sam <- length(data)
1549779651843:n_tub <- length(data[[1]])
1549779651844:bind_rows(
1549779651844:lapply(1:n_sam, function(sample, fn=fun){
1549779651845:features <- lapply(1:n_tub, function(tube, sam=sample, f=fn){
1549779651845:summarized_tube <- data[[sam]][[tube]] %>%
1549779651845:summarise_all(f)
1549779651846:names(summarized_tube) <- ch_metadata %>%
1549779651846:filter(Tube == tube) %>% select(Name) %>% pull()
1549779651847:summarized_tube
1549779651847:})
1549779651848:bind_cols(features)
1549779651848:})
1549779651849:)
1549779651849:}
1549779654468:# Transform data ----------------------------------------------------------
1549779654468:final_data <- summarizeData(all_tube_data, channel_metadata, sd)
1549779657067:final_data
1549779663573:# Transform data ----------------------------------------------------------
1549779663573:(final_data <- summarizeData(all_tube_data, channel_metadata, sd))
1549779671008:View(final_data)
1549779749041:summarizeData <- function(data, ch_metadata, fun) {
1549779749041:n_sam <- length(data)
1549779749042:n_tub <- length(data[[1]])
1549779749043:bind_rows(
1549779749043:lapply(1:n_sam, function(sample, fn=fun){
1549779749044:features <- lapply(1:n_tub, function(tube, sam=sample, f=fn){
1549779749045:summarized_tube <- data[[sam]][[tube]] %>%
1549779749045:summarise_all(f)
1549779749046:names(summarized_tube) <- ch_metadata %>%
1549779749046:filter(Tube == tube) %>% select(Name) %>% pull()
1549779749047:summarized_tube
1549779749048:})
1549779749048:bind_cols(features)
1549779749049:})
1549779749052:)
1549779749053:}
1549779750313:# Transform data ----------------------------------------------------------
1549779750314:(final_data <- summarizeData(all_tube_data, channel_metadata, sd))
1549779803983:all_tube_data
1549779836945:names(all_tube_data)
1549779860634:1:n_tubes_per_sample
1549779868782:names(all_tube_data) <- 1:n_tubes_per_sample
1549779889936:all_tube_data
1549779897317:n_tubes_per_sample
1549779904566:#!/usr/bin/env Rscript
1549779904567:# ##############################################################################
1549779904567:#  Author:   Shashwat Deepali Nagar
1549779904568:#            Hector Fabio Espitia-Navarro
1549779904568:#            Georgia Institute of Technology
1549779904569:#  Version:  0.1
1549779904569:#  Date:     02/09/2019
1549779904570:# ##############################################################################
1549779904571:# Packages ----------------------------------------------------------------
1549779904571:# Function to install and load packages
1549779904572:installAndLoadPackages <- function(pkg){
1549779904573:new_pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549779904573:if (length(new_pkg))
1549779904590:install.packages(new_pkg, repos="http://cran.rstudio.com/",
1549779904591:dependencies = TRUE, lib = personal_lib_path)
1549779904591:sapply(pkg, function(x){ require(x, character.only = TRUE, quietly = FALSE) })
1549779904592:# suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = F))
1549779904592:}
1549779904594:personal_lib_path <- Sys.getenv("R_LIBS_USER")
1549779904595:if(!file.exists(personal_lib_path))
1549779904595:dir.create(personal_lib_path)
1549779904596:packages <- c("caret", "tidyverse", "magrittr") # All required packages in here!
1549779904598:installAndLoadPackages(packages)
1549779904663:# Load data ---------------------------------------------------------------
1549779904663:r_data_file      <- "data/all_data.RData"
1549779904664:data_dir         <- "data/CSV"
1549779904665:metadata         <- read_csv("data/AMLTraining.csv.zip")
1549779904712:channel_metadata <- read_csv("data/channels_metadata.csv") %>%
1549779904713:gather(Channel, Name, -Tube)
1549779904730:testing_mode       <- TRUE # Turn off for working with the whole dataset
1549779904731:n_samples          <- ifelse(testing_mode, 2, length(unique(metadata$SampleNumber)))
1549779904732:n_tubes_per_sample <- ifelse(testing_mode, 3, length(unique(metadata$TubeNumber)))
1549779911710:# Read the dataset
1549779911711:all_tube_data <- lapply(1:n_samples, function(sn) {
1549779911711:lapply(1:n_tubes_per_sample, function (tn){
1549779911711:filename <- metadata %>% filter(SampleNumber == sn, TubeNumber == tn) %>%
1549779911712:select(FCSFileName) %>% pull()
1549779911712:read_csv(sprintf("%s/%04d.CSV", data_dir, filename))
1549779911713:})
1549779911713:})
1549779912973:names(all_tube_data) <- 1:n_tubes_per_sample
1549779928304:names(all_tube_data) <- 1:n_samples
1549779932035:names(all_tube_data)
1549779949294:names(all_tube_data) <- as.character(1:n_samples)
1549779951654:names(all_tube_data)
1549779966092:summarizeData <- function(data, ch_metadata, fun) {
1549779966093:n_sam <- length(data)
1549779966093:n_tub <- length(data[[1]])
1549779966094:bind_rows(
1549779966094:lapply(1:n_sam, function(sample, fn=fun){
1549779966095:features <- lapply(1:n_tub, function(tube, sam=sample, f=fn){
1549779966096:summarized_tube <- data[[sam]][[tube]] %>%
1549779966096:summarise_all(f)
1549779966097:names(summarized_tube) <- ch_metadata %>%
1549779966097:filter(Tube == tube) %>% select(Name) %>% pull()
1549779966098:summarized_tube
1549779966099:})
1549779966100:bind_cols(features)
1549779966100:})
1549779966101:)
1549779966101:}
1549779967152:# Transform data ----------------------------------------------------------
1549779967153:(final_data <- summarizeData(all_tube_data, channel_metadata, sd))
1549780059457:metadata
1549780249263:summarizeData <- function(data, ch_metadata, fun) {
1549780249264:n_sam <- length(data)
1549780249265:n_tub <- length(data[[1]])
1549780249266:bind_rows(
1549780249266:lapply(1:n_sam, function(sample, fn=fun){
1549780249267:features <- lapply(1:n_tub, function(tube, sam=sample, f=fn){
1549780249267:summarized_tube <- data[[sam]][[tube]] %>%
1549780249268:summarise_all(f)
1549780249269:names(summarized_tube) <- ch_metadata %>%
1549780249270:filter(Tube == tube) %>% select(Name) %>% pull()
1549780249271:summarized_tube
1549780249271:})
1549780249272:bind_cols(features) %>%
1549780249273:mutate(SampleNumber = sample)
1549780249277:})
1549780249278:)
1549780249279:}
1549780250669:# Transform data ----------------------------------------------------------
1549780250670:(final_data <- summarizeData(all_tube_data, channel_metadata, sd))
1549780271731:summarizeData <- function(data, ch_metadata, fun) {
1549780271731:n_sam <- length(data)
1549780271732:n_tub <- length(data[[1]])
1549780271733:bind_rows(
1549780271733:lapply(1:n_sam, function(sample, fn=fun){
1549780271734:features <- lapply(1:n_tub, function(tube, sam=sample, f=fn){
1549780271734:summarized_tube <- data[[sam]][[tube]] %>%
1549780271735:summarise_all(f)
1549780271736:names(summarized_tube) <- ch_metadata %>%
1549780271736:filter(Tube == tube) %>% select(Name) %>% pull()
1549780271737:summarized_tube
1549780271737:})
1549780271738:bind_cols(features) %>%
1549780271739:mutate(SampleNumber = sample) %>%
1549780271739:select(SampleNumber, everything())
1549780271740:})
1549780271741:)
1549780271742:}
1549780272622:# Transform data ----------------------------------------------------------
1549780272623:(final_data <- summarizeData(all_tube_data, channel_metadata, sd))
1549780364054:# Load data ---------------------------------------------------------------
1549780364054:r_data_file      <- "data/all_data.RData"
1549780364559:data_dir         <- "data/CSV"
1549780365330:channel_metadata <- read_csv("data/channels_metadata.csv") %>%
1549780365331:gather(Channel, Name, -Tube)
1549780366581:metadata         <- read_csv("data/AMLTraining.csv.zip") %>%
1549780366582:mutate(class = ifelse(Label == "normal", 0, ifelse(Label == "aml", 1, Label)))
1549780368788:metadata
1549780376455:# Load data ---------------------------------------------------------------
1549780376456:r_data_file      <- "data/all_data.RData"
1549780376690:data_dir         <- "data/CSV"
1549780377152:channel_metadata <- read_csv("data/channels_metadata.csv") %>%
1549780377153:gather(Channel, Name, -Tube)
1549780377721:metadata         <- read_csv("data/AMLTraining.csv.zip") %>%
1549780377722:mutate(Class = ifelse(Label == "normal", 0, ifelse(Label == "aml", 1, Label)))
1549780379880:metadata
1549780471736:labels <- metadata %>% group_by(SampleNumber) %>% summarise(unique)
1549780479615:labels <- metadata %>% group_by(SampleNumber) %>% summarise(mean)
1549780497449:labels <- metadata %>% group_by(SampleNumber) %>% summarise(Class)
1549780540985:labels <- metadata %>% group_by(SampleNumber) %>% summarise(Cl = mean(Class))
1549780548021:warnings()
1549780587495:labels <- metadata %>% group_by(SampleNumber) %>% select(Class)
1549780589166:labels
1549780620600:labels <- metadata %>% group_by(SampleNumber, Class) %>% select(Class)
1549780623169:labels
1549780717519:labels <- metadata %>% select(SampleNumber, Class) %>% distinct()
1549780718858:labels
1549780763512:labels <- metadata %>% select(SampleNumber, Label) %>% distinct()
1549780765636:labels
1549780800587:labels <- metadata %>%
1549780800587:select(SampleNumber, Label) %>%
1549780800588:distinct() %>%
1549780800589:mutate(Label = ifelse(Label == "normal", 0, ifelse(Label == "aml", 1, Label)))
1549780802690:labels
1549780835653:labels <- metadata %>%
1549780835654:select(SampleNumber, Label) %>%
1549780835655:distinct() %>%
1549780835656:mutate(Label = ifelse(Label == "normal", 0, ifelse(Label == "aml", 1, Label)))
1549780838814:labels
1549780870335:c(1,2,3,NA)
1549780879623:class(c(1,2,3,NA))
1549780890987:metadata
1549780898645:tail(metadata)
1549781011922:labels <- metadata %>%
1549781011922:select(SampleNumber, Label) %>%
1549781011923:distinct() %>%
1549781011924:mutate(Label = ifelse(Label == "normal", 0,
1549781011924:ifelse(Label == "aml", 1, as.numeric(Label))))
1549781016526:labels
1549781051789:labels <- metadata %>%
1549781051790:select(SampleNumber, Label) %>%
1549781051790:distinct() %>%
1549781051791:mutate(Label = ifelse(Label == "normal", 0,
1549781051792:ifelse(Label == "aml", 1, Label))) %>%
1549781051792:mutate()
1549781069982:labels <- metadata %>%
1549781069983:select(SampleNumber, Label) %>%
1549781069983:distinct() %>%
1549781069984:mutate(Label = ifelse(Label == "normal", 0,
1549781069985:ifelse(Label == "aml", 1, Label))) %>%
1549781069985:mutate(Label = as.numeric(Label))
1549781072559:labels
1549781093582:labels <- metadata %>%
1549781093582:select(SampleNumber, Label) %>%
1549781093583:distinct() %>%
1549781093583:mutate(Label = as.numeric(ifelse(Label == "normal", 0,
1549781093584:ifelse(Label == "aml", 1, Label)))) #%>%
1549781096111:labels
1549781123830:labels <- metadata %>%
1549781123831:select(SampleNumber, Label) %>%
1549781123832:distinct() %>%
1549781123832:mutate(Label = as.numeric(ifelse(Label == "normal", 0,
1549781123837:ifelse(Label == "aml", 1, Label)))
1549781123840:)
1549781128981:labels
1549781136094:tail(labels  )
1549781232783:labels %>% filter(SampleNumber %in% final_data$SampleNumber)
1549781269875:classes <- labels %>%
1549781269875:filter(SampleNumber %in% final_data$SampleNumber) %>%
1549781292579:classes <- labels %>%
1549781292580:filter(SampleNumber %in% final_data$SampleNumber) %>%
1549781292580:select(Label) %>% pull()
1549781309993:labels %>%
1549781309993:filter(SampleNumber %in% final_data$SampleNumber)
1549781320584:classes <- labels %>%
1549781320585:filter(SampleNumber %in% final_data$SampleNumber) %>%
1549781320585:select(Label) %>% pull()
1549781322643:classes
1549781403635:lbls <- labels$Label
1549781419263:names(lbls) <- labels$SampleNumber
1549781422208:lbls
1549781455632:final_data$SampleNumber
1549781457966:classes <- lbls[final_data$SampleNumber]
1549781459259:classes
1549781551001:labels <- metadata %>%
1549781551002:select(SampleNumber, Label) %>%
1549781551002:distinct() %>%
1549781551003:mutate(Label = as.numeric(ifelse(Label == "normal", 0,
1549781551003:ifelse(Label == "aml", 1, Label)))
1549781551004:) %>%
1549781551004:select(Label)
1549781689470:final_data$SampleNumber
1549781696252:labels$Label[final_data$SampleNumber]
1549781748482:# Transform data ----------------------------------------------------------
1549781748482:(final_data <- summarizeData(all_tube_data, channel_metadata, sd))
1549781755052:# Transform data ----------------------------------------------------------
1549781755053:(final_data <- summarizeData(all_tube_data, channel_metadata, sd))
1549781755771:# short version
1549781755772:classes <- labels$Label[final_data$SampleNumber]
1549781766374:classes
1549782025499:(final_data <- summarizeData(all_tube_data, channel_metadata, sd))
1549782026708:(classes <- labels$Label[final_data$SampleNumber])
1549812413963:#!/usr/bin/env Rscript
1549812414001:# ##############################################################################
1549812414001:#  Author:   Shashwat Deepali Nagar
1549812414002:#            Hector Fabio Espitia-Navarro
1549812414002:#            Georgia Institute of Technology
1549812414003:#  Version:  0.1
1549812414003:#  Date:     02/09/2019
1549812414004:# ##############################################################################
1549812414004:# Packages ----------------------------------------------------------------
1549812414005:# Function to install and load packages
1549812414005:installAndLoadPackages <- function(pkg){
1549812414006:new_pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549812414006:if (length(new_pkg))
1549812414007:install.packages(new_pkg, repos="http://cran.rstudio.com/",
1549812414007:dependencies = TRUE, lib = personal_lib_path)
1549812414008:sapply(pkg, function(x){ require(x, character.only = TRUE, quietly = FALSE) })
1549812414009:# suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = F))
1549812414009:}
1549812414010:personal_lib_path <- Sys.getenv("R_LIBS_USER")
1549812414011:if(!file.exists(personal_lib_path))
1549812414012:dir.create(personal_lib_path)
1549812414014:packages <- c("caret", "tidyverse", "magrittr") # All required packages in here!
1549812414015:installAndLoadPackages(packages)
1549812428254:# Load data ---------------------------------------------------------------
1549812428255:r_data_file      <- "data/all_data.RData"
1549812428256:data_dir         <- "data/CSV"
1549812428257:metadata         <- read_csv("data/AMLTraining.csv.zip")
1549812428522:channel_metadata <- read_csv("data/channels_metadata.csv") %>%
1549812428523:gather(Channel, Name, -Tube)
1549812428764:labels <- metadata %>%
1549812428765:select(SampleNumber, Label) %>%
1549812428765:distinct() %>%
1549812428765:mutate(Label = as.numeric(ifelse(Label == "normal", 0,
1549812428766:ifelse(Label == "aml", 1, Label))))
1549812428839:testing_mode       <- TRUE # Turn off for working with the whole dataset
1549812428840:n_samples          <- ifelse(testing_mode, 3, length(unique(metadata$SampleNumber)))
1549812428840:n_tubes_per_sample <- ifelse(testing_mode, 8, length(unique(metadata$TubeNumber)))
1549812435509:#' summarize the values meassured for all cells in a channel, using a function
1549812435509:#' specified by \code{fun}.
1549812435510:#'
1549812435510:#' @param data A list of samples. Each element is a list of tubes. Each tube is
1549812435510:#' a tibble that contains the different cell features measured on each
1549812435511:#' channel. Rows are cells, columns are features.
1549812435511:#' @param ch_metadata Tibble with the name of each measured feature for each
1549812435511:#' channel on each tube.
1549812435512:#' @param fun Function for summarizing each feature (channel)
1549812435512:#'
1549812435513:summarizeData <- function(data, ch_metadata, fun) {
1549812435513:n_sam <- length(data)
1549812435514:n_tub <- length(data[[1]])
1549812435514:bind_rows(
1549812435514:lapply(1:n_sam, function(sample, fn=fun){
1549812435515:features <- lapply(1:n_tub, function(tube, sam=sample, f=fn){
1549812435516:summarized_tube <- data[[sam]][[tube]] %>%
1549812435516:summarise_all(f)
1549812435517:names(summarized_tube) <- ch_metadata %>%
1549812435517:filter(Tube == tube) %>% select(Name) %>% pull()
1549812435518:summarized_tube
1549812435519:})
1549812435519:bind_cols(features) %>%
1549812435520:mutate(SampleNumber = sample) %>%
1549812435521:select(SampleNumber, everything())
1549812435521:})
1549812435522:)
1549812435523:}
1549812449458:final_data <- bind_rows(lapply(1:n_samples, function(sn) {
1549812449458:lapply(1:n_tubes_per_sample, function (tn){
1549812449459:filename <- metadata %>% filter(SampleNumber == sn, TubeNumber == tn) %>%
1549812449459:select(FCSFileName) %>% pull()
1549812449460:summarizeData(read_csv(sprintf("%s/%04d.CSV", data_dir, filename)))
1549812449460:})
1549812449461:}))
1549812580979:final_data <- bind_rows(lapply(1:n_samples, function(sn) {
1549812580980:summarizeData(
1549812580980:list(
1549812580981:lapply(1:n_tubes_per_sample, function (tn){
1549812580981:filename <- metadata %>% filter(SampleNumber == sn, TubeNumber == tn) %>%
1549812580982:select(FCSFileName) %>% pull()
1549812580982:read_csv(sprintf("%s/%04d.CSV", data_dir, filename))
1549812580983:})
1549812580983:)
1549812580984:)
1549812580984:}))
1549812624168:final_data <- bind_rows(lapply(1:n_samples, function(sn) {
1549812624169:summarizeData(
1549812624169:list(
1549812624169:lapply(1:n_tubes_per_sample, function (tn){
1549812624170:filename <- metadata %>% filter(SampleNumber == sn, TubeNumber == tn) %>%
1549812624170:select(FCSFileName) %>% pull()
1549812624170:read_csv(sprintf("%s/%04d.CSV", data_dir, filename))
1549812624171:})
1549812624171:),
1549812624172:fun = sd, ch_metadata = channel_metadata
1549812624172:)
1549812624172:}))
1549812633983:final_data
1549812641428:View(final_data)
1549812733953:final_data <- bind_rows(lapply(1:n_samples, function(sn) {
1549812733953:current_sample <- list(
1549812733954:lapply(1:n_tubes_per_sample, function (tn){
1549812733954:filename <- metadata %>% filter(SampleNumber == sn, TubeNumber == tn) %>%
1549812733954:select(FCSFileName) %>% pull()
1549812733955:read_csv(sprintf("%s/%04d.CSV", data_dir, filename))
1549812733955:})
1549812733956:)
1549812733956:summarizeData(current_sample, fun = sd, ch_metadata = channel_metadata
1549812733956:)
1549812733957:}))
1549812739218:final_data
1549812811295:n_samples          <- ifelse(testing_mode, 10, length(unique(metadata$SampleNumber)))
1549812812340:n_tubes_per_sample <- ifelse(testing_mode, 8, length(unique(metadata$TubeNumber)))
1549812825612:final_data <- bind_rows(lapply(1:n_samples, function(sn) {
1549812825612:current_sample <- list(
1549812825612:lapply(1:n_tubes_per_sample, function (tn){
1549812825613:filename <- metadata %>% filter(SampleNumber == sn, TubeNumber == tn) %>%
1549812825613:select(FCSFileName) %>% pull()
1549812825614:read_csv(sprintf("%s/%04d.CSV", data_dir, filename))
1549812825614:})
1549812825615:)
1549812825615:current_sample
1549812825616:summarizeData(current_sample, fun = sd, ch_metadata = channel_metadata
1549812825616:)
1549812825616:}))
1549812839256:final_data
1549812926714:n_samples          <- ifelse(testing_mode, 50, length(unique(metadata$SampleNumber)))
1549812933956:final_data <- bind_rows(lapply(1:n_samples, function(sn) {
1549812933956:current_sample <- list(
1549812933957:lapply(1:n_tubes_per_sample, function (tn){
1549812933957:filename <- metadata %>% filter(SampleNumber == sn, TubeNumber == tn) %>%
1549812933958:select(FCSFileName) %>% pull()
1549812933959:read_csv(sprintf("%s/%04d.CSV", data_dir, filename))
1549812933959:})
1549812933960:)
1549812933960:current_sample
1549812933961:summarizeData(current_sample, fun = sd, ch_metadata = channel_metadata
1549812933961:)
1549812933962:}))
1549813016383:final_data$SampleNumber <- 1:n_samples
1549813022254:View(final_data)
1549813729553:# Load and transform each sample ----------------------------------------
1549813729554:# to avoid RAM overload
1549813729554:loadAndTransformData <- function(fn, metadata, n_samples, n_tubes, data_dir){
1549813729555:transformed_data <- bind_rows(
1549813729555:lapply(1:n_samples, function(sn) {
1549813729556:current_sample <- list(
1549813729556:lapply(1:n_tubes, function (tn){
1549813729557:filename <- metadata %>% filter(SampleNumber == sn, TubeNumber == tn) %>%
1549813729557:select(FCSFileName) %>% pull()
1549813729558:read_csv(sprintf("%s/%04d.CSV", data_dir, filename))
1549813729558:})
1549813729559:)
1549813729559:summarizeData(current_sample, fun = fn, ch_metadata = channel_metadata)
1549813729560:})
1549813729560:)
1549813729561:transformed_data$SampleNumber <- 1:n_samples
1549813729561:transformed_data
1549813729562:}
1549813780419:# Load and transform each sample ----------------------------------------
1549813780420:# to avoid RAM overload
1549813780420:loadAndTransformData <- function(metadata, n_samples, n_tubes, data_dir, fn){
1549813780421:transformed_data <- bind_rows(
1549813780421:lapply(1:n_samples, function(sn) {
1549813780422:current_sample <- list(
1549813780423:lapply(1:n_tubes, function (tn){
1549813780423:filename <- metadata %>% filter(SampleNumber == sn, TubeNumber == tn) %>%
1549813780424:select(FCSFileName) %>% pull()
1549813780424:read_csv(sprintf("%s/%04d.CSV", data_dir, filename))
1549813780425:})
1549813780425:)
1549813780426:summarizeData(current_sample, fun = fn, ch_metadata = channel_metadata)
1549813780427:})
1549813780428:)
1549813780431:transformed_data$SampleNumber <- 1:n_samples
1549813780433:transformed_data
1549813780434:}
1549813810753:loadAndTransformData(metadata, 2, 1, data_dir, mean)
1549814009730:#!/usr/bin/env Rscript
1549814009731:# ##############################################################################
1549814009731:#  Author:   Shashwat Deepali Nagar
1549814009732:#            Hector Fabio Espitia-Navarro
1549814009732:#            Georgia Institute of Technology
1549814009733:#  Version:  0.1
1549814009733:#  Date:     02/09/2019
1549814009733:# ##############################################################################
1549814009734:# Packages ----------------------------------------------------------------
1549814009735:# Function to install and load packages
1549814009735:installAndLoadPackages <- function(pkg){
1549814009736:new_pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549814009736:if (length(new_pkg))
1549814009737:install.packages(new_pkg, repos="http://cran.rstudio.com/",
1549814009737:dependencies = TRUE, lib = personal_lib_path)
1549814009738:sapply(pkg, function(x){ require(x, character.only = TRUE, quietly = FALSE) })
1549814009738:# suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = F))
1549814009739:}
1549814009739:personal_lib_path <- Sys.getenv("R_LIBS_USER")
1549814009740:if(!file.exists(personal_lib_path))
1549814009740:dir.create(personal_lib_path)
1549814009741:packages <- c("caret", "tidyverse", "magrittr") # All required packages in here!
1549814009742:installAndLoadPackages(packages)
1549814009747:# Functions for data transformation ---------------------------------------
1549814009747:#' Summarize the whole dataset.
1549814009748:#'
1549814009748:#' \code{summarizeData} summarize the data of all tubes from each sample and
1549814009748:#' returns tibble in which each row is a sample and each column is a value that
1549814009748:#' summarize the values meassured for all cells in a channel, using a function
1549814009749:#' specified by \code{fun}.
1549814009749:#'
1549814009749:#' @param data A list of samples. Each element is a list of tubes. Each tube is
1549814009749:#' a tibble that contains the different cell features measured on each
1549814009750:#' channel. Rows are cells, columns are features.
1549814009750:#' @param ch_metadata Tibble with the name of each measured feature for each
1549814009750:#' channel on each tube.
1549814009750:#' @param fun Function for summarizing each feature (channel)
1549814009751:#'
1549814009751:summarizeData <- function(data, ch_metadata, fun) {
1549814009751:n_sam <- length(data)
1549814009752:n_tub <- length(data[[1]])
1549814009752:bind_rows(
1549814009752:lapply(1:n_sam, function(sample, fn=fun){
1549814009752:features <- lapply(1:n_tub, function(tube, sam=sample, f=fn){
1549814009753:summarized_tube <- data[[sam]][[tube]] %>%
1549814009753:summarise_all(f)
1549814009753:names(summarized_tube) <- ch_metadata %>%
1549814009754:filter(Tube == tube) %>% select(Name) %>% pull()
1549814009755:summarized_tube
1549814009755:})
1549814009755:bind_cols(features) %>%
1549814009756:mutate(SampleNumber = sample) %>%
1549814009756:select(SampleNumber, everything())
1549814009757:})
1549814009757:)
1549814009757:}
1549814009758:# Function for loading and transforming one sample at a time to avoid RAM overload
1549814009759:loadAndTransformData <- function(metadata, n_samples, n_tubes, data_dir, fn){
1549814009759:transformed_data <- bind_rows(
1549814009759:lapply(1:n_samples, function(sn) {
1549814009760:current_sample <- list(
1549814009760:lapply(1:n_tubes, function (tn){
1549814009760:filename <- metadata %>% filter(SampleNumber == sn, TubeNumber == tn) %>%
1549814009761:select(FCSFileName) %>% pull()
1549814009761:read_csv(sprintf("%s/%04d.CSV", data_dir, filename))
1549814009761:})
1549814009762:)
1549814009762:summarizeData(current_sample, fun = fn, ch_metadata = channel_metadata)
1549814009762:})
1549814009763:)
1549814009763:transformed_data$SampleNumber <- 1:n_samples
1549814009764:transformed_data
1549814009764:}
1549814012555:# Load data ---------------------------------------------------------------
1549814012555:r_data_file      <- "data/all_data.RData"
1549814012893:data_dir         <- "data/CSV"
1549814013599:metadata         <- read_csv("data/AMLTraining.csv.zip")
1549814014211:channel_metadata <- read_csv("data/channels_metadata.csv") %>%
1549814014212:gather(Channel, Name, -Tube)
1549814018737:labels <- metadata %>%
1549814018738:select(SampleNumber, Label) %>%
1549814018738:distinct() %>%
1549814018739:mutate(Label = as.numeric(ifelse(Label == "normal", 0,
1549814018739:ifelse(Label == "aml", 1, Label))))
1549814025828:testing_mode       <- TRUE # Turn off for working with the whole dataset
1549814026226:n_samples          <- ifelse(testing_mode, 50, length(unique(metadata$SampleNumber)))
1549814026615:n_tubes_per_sample <- ifelse(testing_mode, 8, length(unique(metadata$TubeNumber)))
1549814072884:# Function for loading and transforming one sample at a time to avoid RAM overload
1549814072884:loadAndTransformData <- function(metadata, n_samples, n_tubes, data_dir,
1549814072885:channel_metadata, fn){
1549814072885:transformed_data <- bind_rows(
1549814072886:lapply(1:n_samples, function(sn) {
1549814072886:current_sample <- list(
1549814072886:lapply(1:n_tubes, function (tn){
1549814072887:filename <- metadata %>% filter(SampleNumber == sn, TubeNumber == tn) %>%
1549814072887:select(FCSFileName) %>% pull()
1549814072887:read_csv(sprintf("%s/%04d.CSV", data_dir, filename))
1549814072888:})
1549814072888:)
1549814072889:summarizeData(current_sample, fun = fn, ch_metadata = channel_metadata)
1549814072890:})
1549814072890:)
1549814072890:transformed_data$SampleNumber <- 1:n_samples
1549814072891:transformed_data
1549814072891:}
1549814103051:# Load data ---------------------------------------------------------------
1549814103051:r_data_file      <- "data/all_data.RData"
1549814103498:# data_dir         <- "data/CSV"
1549814103499:d_dir         <- "data/CSV"
1549814103997:# metadata         <- read_csv("data/AMLTraining.csv.zip")
1549814103998:met         <- read_csv("data/AMLTraining.csv.zip")
1549814104488:# channel_metadata <- read_csv("data/channels_metadata.csv") %>%
1549814104489:cha_metadata <- read_csv("data/channels_metadata.csv") %>%
1549814104489:gather(Channel, Name, -Tube)
1549814106637:#!/usr/bin/env Rscript
1549814106638:# ##############################################################################
1549814106638:#  Author:   Shashwat Deepali Nagar
1549814106639:#            Hector Fabio Espitia-Navarro
1549814106639:#            Georgia Institute of Technology
1549814106640:#  Version:  0.1
1549814106640:#  Date:     02/09/2019
1549814106641:# ##############################################################################
1549814106642:# Packages ----------------------------------------------------------------
1549814106642:# Function to install and load packages
1549814106643:installAndLoadPackages <- function(pkg){
1549814106643:new_pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549814106644:if (length(new_pkg))
1549814106644:install.packages(new_pkg, repos="http://cran.rstudio.com/",
1549814106645:dependencies = TRUE, lib = personal_lib_path)
1549814106645:sapply(pkg, function(x){ require(x, character.only = TRUE, quietly = FALSE) })
1549814106646:# suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = F))
1549814106646:}
1549814106647:personal_lib_path <- Sys.getenv("R_LIBS_USER")
1549814106648:if(!file.exists(personal_lib_path))
1549814106649:dir.create(personal_lib_path)
1549814106650:packages <- c("caret", "tidyverse", "magrittr") # All required packages in here!
1549814106650:installAndLoadPackages(packages)
1549814106656:# Functions for data transformation ---------------------------------------
1549814106657:#' Summarize the whole dataset.
1549814106657:#'
1549814106657:#' \code{summarizeData} summarize the data of all tubes from each sample and
1549814106657:#' returns tibble in which each row is a sample and each column is a value that
1549814106658:#' summarize the values meassured for all cells in a channel, using a function
1549814106658:#' specified by \code{fun}.
1549814106658:#'
1549814106659:#' @param data A list of samples. Each element is a list of tubes. Each tube is
1549814106659:#' a tibble that contains the different cell features measured on each
1549814106659:#' channel. Rows are cells, columns are features.
1549814106660:#' @param ch_metadata Tibble with the name of each measured feature for each
1549814106660:#' channel on each tube.
1549814106660:#' @param fun Function for summarizing each feature (channel)
1549814106660:#'
1549814106661:summarizeData <- function(data, ch_metadata, fun) {
1549814106661:n_sam <- length(data)
1549814106661:n_tub <- length(data[[1]])
1549814106661:bind_rows(
1549814106662:lapply(1:n_sam, function(sample, fn=fun){
1549814106662:features <- lapply(1:n_tub, function(tube, sam=sample, f=fn){
1549814106662:summarized_tube <- data[[sam]][[tube]] %>%
1549814106663:summarise_all(f)
1549814106663:names(summarized_tube) <- ch_metadata %>%
1549814106663:filter(Tube == tube) %>% select(Name) %>% pull()
1549814106664:summarized_tube
1549814106664:})
1549814106665:bind_cols(features) %>%
1549814106665:mutate(SampleNumber = sample) %>%
1549814106665:select(SampleNumber, everything())
1549814106666:})
1549814106666:)
1549814106667:}
1549814106667:# Function for loading and transforming one sample at a time to avoid RAM overload
1549814106668:loadAndTransformData <- function(metadata, n_samples, n_tubes, data_dir,
1549814106668:channel_metadata, fn){
1549814106669:transformed_data <- bind_rows(
1549814106669:lapply(1:n_samples, function(sn) {
1549814106669:current_sample <- list(
1549814106669:lapply(1:n_tubes, function (tn){
1549814106670:filename <- metadata %>% filter(SampleNumber == sn, TubeNumber == tn) %>%
1549814106670:select(FCSFileName) %>% pull()
1549814106671:read_csv(sprintf("%s/%04d.CSV", data_dir, filename))
1549814106671:})
1549814106671:)
1549814106672:summarizeData(current_sample, fun = fn, ch_metadata = channel_metadata)
1549814106672:})
1549814106672:)
1549814106673:transformed_data$SampleNumber <- 1:n_samples
1549814106673:transformed_data
1549814106674:}
1549814106675:# Load data ---------------------------------------------------------------
1549814106675:r_data_file      <- "data/all_data.RData"
1549814106676:# data_dir         <- "data/CSV"
1549814106676:d_dir         <- "data/CSV"
1549814106677:# metadata         <- read_csv("data/AMLTraining.csv.zip")
1549814106677:met         <- read_csv("data/AMLTraining.csv.zip")
1549814106686:# channel_metadata <- read_csv("data/channels_metadata.csv") %>%
1549814106686:cha_metadata <- read_csv("data/channels_metadata.csv") %>%
1549814106686:gather(Channel, Name, -Tube)
1549814109836:labels <- metadata %>%
1549814109837:select(SampleNumber, Label) %>%
1549814109838:distinct() %>%
1549814109838:mutate(Label = as.numeric(ifelse(Label == "normal", 0,
1549814109839:ifelse(Label == "aml", 1, Label))))
1549814118496:# labels <- metadata %>%
1549814118497:labels <- met %>%
1549814118498:select(SampleNumber, Label) %>%
1549814118499:distinct() %>%
1549814118500:mutate(Label = as.numeric(ifelse(Label == "normal", 0,
1549814118500:ifelse(Label == "aml", 1, Label))))
1549814123910:testing_mode       <- TRUE # Turn off for working with the whole dataset
1549814137248:n_samples          <- ifelse(testing_mode, 2, length(unique(metadata$SampleNumber)))
1549814137669:n_tubes_per_sample <- ifelse(testing_mode, 1, length(unique(metadata$TubeNumber)))
1549814175977:n_tubes_per_sample
1549814178901:n_samples
1549814202905:loadAndTransformData(metadata = met, n_samples = n_samples, n_tubes = n_tubes_per_sample,
1549814202906:data_dir = d_dir, fn = mean, channel_metadata = cha_metadata)
1549814267406:#!/usr/bin/env Rscript
1549814267407:# ##############################################################################
1549814267408:#  Author:   Shashwat Deepali Nagar
1549814267409:#            Hector Fabio Espitia-Navarro
1549814267409:#            Georgia Institute of Technology
1549814267410:#  Version:  0.1
1549814267411:#  Date:     02/09/2019
1549814267411:# ##############################################################################
1549814267412:# Packages ----------------------------------------------------------------
1549814267413:# Function to install and load packages
1549814267413:installAndLoadPackages <- function(pkg){
1549814267414:new_pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549814267414:if (length(new_pkg))
1549814267414:install.packages(new_pkg, repos="http://cran.rstudio.com/",
1549814267415:dependencies = TRUE, lib = personal_lib_path)
1549814267415:sapply(pkg, function(x){ require(x, character.only = TRUE, quietly = FALSE) })
1549814267415:# suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = F))
1549814267416:}
1549814267417:personal_lib_path <- Sys.getenv("R_LIBS_USER")
1549814267417:if(!file.exists(personal_lib_path))
1549814267418:dir.create(personal_lib_path)
1549814267418:packages <- c("caret", "tidyverse", "magrittr") # All required packages in here!
1549814267419:installAndLoadPackages(packages)
1549814267424:# Functions for data transformation ---------------------------------------
1549814267424:#' Summarize the whole dataset.
1549814267425:#'
1549814267425:#' \code{summarizeData} summarize the data of all tubes from each sample and
1549814267425:#' returns tibble in which each row is a sample and each column is a value that
1549814267426:#' summarize the values meassured for all cells in a channel, using a function
1549814267426:#' specified by \code{fun}.
1549814267426:#'
1549814267427:#' @param data A list of samples. Each element is a list of tubes. Each tube is
1549814267427:#' a tibble that contains the different cell features measured on each
1549814267427:#' channel. Rows are cells, columns are features.
1549814267427:#' @param ch_metadata Tibble with the name of each measured feature for each
1549814267428:#' channel on each tube.
1549814267428:#' @param fun Function for summarizing each feature (channel)
1549814267428:#'
1549814267429:summarizeData <- function(data, ch_metadata, fun) {
1549814267429:n_sam <- length(data)
1549814267429:n_tub <- length(data[[1]])
1549814267430:bind_rows(
1549814267430:lapply(1:n_sam, function(sample, fn=fun){
1549814267430:features <- lapply(1:n_tub, function(tube, sam=sample, f=fn){
1549814267431:summarized_tube <- data[[sam]][[tube]] %>%
1549814267431:summarise_all(f)
1549814267431:names(summarized_tube) <- ch_metadata %>%
1549814267432:filter(Tube == tube) %>% select(Name) %>% pull()
1549814267432:summarized_tube
1549814267433:})
1549814267433:bind_cols(features) %>%
1549814267433:mutate(SampleNumber = sample) %>%
1549814267434:select(SampleNumber, everything())
1549814267434:})
1549814267435:)
1549814267435:}
1549814267436:# Function for loading and transforming one sample at a time to avoid RAM overload
1549814267436:loadAndTransformData <- function(metadata, n_samples, n_tubes, data_dir,
1549814267437:channel_metadata, fn){
1549814267437:transformed_data <- bind_rows(
1549814267437:lapply(1:n_samples, function(sn) {
1549814267438:current_sample <- list(
1549814267438:lapply(1:n_tubes, function (tn){
1549814267438:filename <- metadata %>% filter(SampleNumber == sn, TubeNumber == tn) %>%
1549814267439:select(FCSFileName) %>% pull()
1549814267439:read_csv(sprintf("%s/%04d.CSV", data_dir, filename))
1549814267440:})
1549814267440:)
1549814267440:summarizeData(current_sample, fun = fn, ch_metadata = channel_metadata)
1549814267441:})
1549814267441:)
1549814267442:transformed_data$SampleNumber <- 1:n_samples
1549814267442:transformed_data
1549814267443:}
1549814267444:# Load data ---------------------------------------------------------------
1549814267444:r_data_file      <- "data/all_data.RData"
1549814267445:data_dir         <- "data/CSV"
1549814267445:metadata         <- read_csv("data/AMLTraining.csv.zip")
1549814267454:channel_metadata <- read_csv("data/channels_metadata.csv") %>%
1549814267454:gather(Channel, Name, -Tube)
1549814267464:labels <- metadata %>%
1549814267465:select(SampleNumber, Label) %>%
1549814267465:distinct() %>%
1549814267465:mutate(Label = as.numeric(ifelse(Label == "normal", 0,
1549814267466:ifelse(Label == "aml", 1, Label))))
1549814267470:testing_mode       <- TRUE # Turn off for working with the whole dataset
1549814267471:n_samples          <- ifelse(testing_mode, 2, length(unique(metadata$SampleNumber)))
1549814267471:n_tubes_per_sample <- ifelse(testing_mode, 1, length(unique(metadata$TubeNumber)))
1549814267472:# # Load the whole dataset (Warning: RAM overload!)
1549814267472:# if (!file.exists(r_data_file)) {
1549814267472:#   # Read the dataset
1549814267473:#   all_tube_data <- lapply(1:n_samples, function(sn) {
1549814267473:#     lapply(1:n_tubes_per_sample, function (tn){
1549814267473:#       filename <- metadata %>% filter(SampleNumber == sn, TubeNumber == tn) %>%
1549814267474:#         select(FCSFileName) %>% pull()
1549814267474:#       read_csv(sprintf("%s/%04d.CSV", data_dir, filename))
1549814267474:#     })
1549814267474:#   })
1549814267475:#   names(all_tube_data) <- as.character(1:n_samples)
1549814267475:#   save(all_tube_data, file = r_data_file,
1549814267475:#        compress = "bzip2", compression_level = 9)
1549814267475:# } else {
1549814267476:#   load(file = r_data_file, verbose = TRUE)
1549814267476:# }
1549814267477:# names(all_tube_data) <- as.character(1:n_samples)
1549814267477:# # Transform the whole data set
1549814267477:# (final_data <- summarizeData(all_tube_data, channel_metadata, sd))
1549814267478:# (classes    <- labels$Label[final_data$SampleNumber])
1549814439937:#!/usr/bin/env Rscript
1549814439938:# ##############################################################################
1549814439939:#  Author:   Shashwat Deepali Nagar
1549814439939:#            Hector Fabio Espitia-Navarro
1549814439940:#            Georgia Institute of Technology
1549814439940:#  Version:  0.1
1549814439941:#  Date:     02/09/2019
1549814439941:# ##############################################################################
1549814439942:# Packages ----------------------------------------------------------------
1549814439942:# Function to install and load packages
1549814439943:installAndLoadPackages <- function(pkg){
1549814439943:new_pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549814439944:if (length(new_pkg))
1549814439944:install.packages(new_pkg, repos="http://cran.rstudio.com/",
1549814439945:dependencies = TRUE, lib = personal_lib_path)
1549814439945:sapply(pkg, function(x){ require(x, character.only = TRUE, quietly = FALSE) })
1549814439946:# suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = F))
1549814439946:}
1549814439947:personal_lib_path <- Sys.getenv("R_LIBS_USER")
1549814439948:if(!file.exists(personal_lib_path))
1549814439948:dir.create(personal_lib_path)
1549814439949:packages <- c("caret", "tidyverse", "magrittr") # All required packages in here!
1549814439950:installAndLoadPackages(packages)
1549814442622:# Functions for data transformation ---------------------------------------
1549814442623:#' Summarize the whole dataset.
1549814442623:#'
1549814442623:#' \code{summarizeData} summarize the data of all tubes from each sample and
1549814442623:#' returns tibble in which each row is a sample and each column is a value that
1549814442624:#' summarize the values meassured for all cells in a channel, using a function
1549814442624:#' specified by \code{fun}.
1549814442624:#'
1549814442625:#' @param data A list of samples. Each element is a list of tubes. Each tube is
1549814442625:#' a tibble that contains the different cell features measured on each
1549814442625:#' channel. Rows are cells, columns are features.
1549814442625:#' @param ch_metadata Tibble with the name of each measured feature for each
1549814442626:#' channel on each tube.
1549814442626:#' @param fun Function for summarizing each feature (channel)
1549814442626:#'
1549814442626:summarizeData <- function(data, ch_metadata, fun) {
1549814442627:n_sam <- length(data)
1549814442627:n_tub <- length(data[[1]])
1549814442627:bind_rows(
1549814442628:lapply(1:n_sam, function(sample, fn=fun){
1549814442628:features <- lapply(1:n_tub, function(tube, sam=sample, f=fn){
1549814442628:summarized_tube <- data[[sam]][[tube]] %>%
1549814442629:summarise_all(f)
1549814442629:names(summarized_tube) <- ch_metadata %>%
1549814442629:filter(Tube == tube) %>% select(Name) %>% pull()
1549814442630:summarized_tube
1549814442630:})
1549814442630:bind_cols(features) %>%
1549814442631:mutate(SampleNumber = sample) %>%
1549814442631:select(SampleNumber, everything())
1549814442632:})
1549814442632:)
1549814442632:}
1549814442633:# Function for loading and transforming one sample at a time to avoid RAM overload
1549814442633:loadAndTransformData <- function(metadata, n_samples, n_tubes, data_dir,
1549814442634:channel_metadata, fn){
1549814442634:transformed_data <- bind_rows(
1549814442634:lapply(1:n_samples, function(sn) {
1549814442635:current_sample <- list(
1549814442635:lapply(1:n_tubes, function (tn){
1549814442635:filename <- metadata %>% filter(SampleNumber == sn, TubeNumber == tn) %>%
1549814442635:select(FCSFileName) %>% pull()
1549814442636:read_csv(sprintf("%s/%04d.CSV", data_dir, filename))
1549814442636:})
1549814442636:)
1549814442637:summarizeData(current_sample, fun = fn, ch_metadata = channel_metadata)
1549814442637:})
1549814442638:)
1549814442638:transformed_data$SampleNumber <- 1:n_samples
1549814442638:transformed_data
1549814442639:}
1549814442639:# Load data ---------------------------------------------------------------
1549814442640:r_data_file      <- "data/all_data.RData"
1549814442640:data_dir         <- "data/CSV"
1549814442641:metadata         <- read_csv("data/AMLTraining.csv.zip")
1549814442700:channel_metadata <- read_csv("data/channels_metadata.csv") %>%
1549814442700:gather(Channel, Name, -Tube)
1549814442882:labels <- metadata %>%
1549814442883:select(SampleNumber, Label) %>%
1549814442883:distinct() %>%
1549814442884:mutate(Label = as.numeric(ifelse(Label == "normal", 0,
1549814442884:ifelse(Label == "aml", 1, Label))))
1549814442911:testing_mode       <- TRUE # Turn off for working with the whole dataset
1549814442911:n_samples          <- ifelse(testing_mode, 2, length(unique(metadata$SampleNumber)))
1549814442912:n_tubes_per_sample <- ifelse(testing_mode, 1, length(unique(metadata$TubeNumber)))
1549814442913:# # Load the whole dataset (Warning: RAM overload!)
1549814442913:# if (!file.exists(r_data_file)) {
1549814442913:#   # Read the dataset
1549814442913:#   all_tube_data <- lapply(1:n_samples, function(sn) {
1549814442914:#     lapply(1:n_tubes_per_sample, function (tn){
1549814442914:#       filename <- metadata %>% filter(SampleNumber == sn, TubeNumber == tn) %>%
1549814442914:#         select(FCSFileName) %>% pull()
1549814442914:#       read_csv(sprintf("%s/%04d.CSV", data_dir, filename))
1549814442915:#     })
1549814442915:#   })
1549814442915:#   names(all_tube_data) <- as.character(1:n_samples)
1549814442916:#   save(all_tube_data, file = r_data_file,
1549814442916:#        compress = "bzip2", compression_level = 9)
1549814442916:# } else {
1549814442916:#   load(file = r_data_file, verbose = TRUE)
1549814442917:# }
1549814442917:# names(all_tube_data) <- as.character(1:n_samples)
1549814442918:# # Transform the whole data set
1549814442918:# (final_data <- summarizeData(all_tube_data, channel_metadata, sd))
1549814442918:# (classes    <- labels$Label[final_data$SampleNumber])
1549814445014:# Load and transform each sample ----------------------------------------
1549814445014:final_data_mean <- loadAndTransformData(metadata, n_samples, n_tubes_per_sample,
1549814445015:data_dir, fn = mean)
1549814465465:# Load and transform each sample ----------------------------------------
1549814465466:final_data_mean <- loadAndTransformData(metadata, n_samples, n_tubes_per_sample,
1549814465466:data_dir, channel_metadata, fn = mean)
1549814468747:final_data_mean
1549814474742:final_data_sd <- loadAndTransformData(metadata, n_samples, n_tubes_per_sample,
1549814474742:data_dir, channel_metadata, fn = sd)
1549814476859:final_data_sd
1549814503640:testing_mode       <- FALSE # Turn off for working with the whole dataset
1549814504035:n_samples          <- ifelse(testing_mode, 2, length(unique(metadata$SampleNumber)))
1549814504343:n_tubes_per_sample <- ifelse(testing_mode, 1, length(unique(metadata$TubeNumber)))
1549814505724:n_samples
1549814507643:n_tubes_per_sample
1549814509985:# Load and transform each sample ----------------------------------------
1549814509985:final_data_mean <- loadAndTransformData(metadata, n_samples, n_tubes_per_sample,
1549814509986:data_dir, channel_metadata, fn = mean)
1549815488984:final_data_mean
1549815532241:save(final_data_mean, file = "data/final_data.mean.RData")
1549815590097:# Load and transform each sample ----------------------------------------
1549815590097:mean_file <- "data/final_data.mean.RData"
1549815828919:# Load and transform each sample ----------------------------------------
1549815828920:mean_file <- "data/final_data.mean.RData"
1549815833105:!file.exists(mean_file)
1549815839130:save(final_data_mean, file = mean_file)
1549815843168:!file.exists(mean_file)
1549815848636:final_data_mean
1549815855186:file.exists(mean_file)
1549831920719:# Load and transform each sample ----------------------------------------
1549831920719:functions <- list(sd = sd, mean = mean)
1549832324424:#!/usr/bin/env Rscript
1549832324425:# ##############################################################################
1549832324426:#  Author:   Shashwat Deepali Nagar
1549832324426:#            Hector Fabio Espitia-Navarro
1549832324427:#            Georgia Institute of Technology
1549832324427:#  Version:  0.1
1549832324428:#  Date:     02/09/2019
1549832324428:# ##############################################################################
1549832324429:# Packages ----------------------------------------------------------------
1549832324430:# Function to install and load packages
1549832324430:installAndLoadPackages <- function(pkg){
1549832324431:new_pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549832324432:if (length(new_pkg))
1549832324432:install.packages(new_pkg, repos="http://cran.rstudio.com/",
1549832324433:dependencies = TRUE, lib = personal_lib_path)
1549832324434:sapply(pkg, function(x){ require(x, character.only = TRUE, quietly = FALSE) })
1549832324436:# suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = F))
1549832324437:}
1549832324438:personal_lib_path <- Sys.getenv("R_LIBS_USER")
1549832324438:if(!file.exists(personal_lib_path))
1549832324439:dir.create(personal_lib_path)
1549832324440:packages <- c("caret", "tidyverse", "magrittr") # All required packages in here!
1549832324441:installAndLoadPackages(packages)
1549832336929:# Functions for data transformation ---------------------------------------
1549832336930:#' Summarize the whole dataset.
1549832336931:#'
1549832336931:#' \code{summarizeData} summarize the data of all tubes from each sample and
1549832336934:#' returns tibble in which each row is a sample and each column is a value that
1549832336934:#' summarize the values meassured for all cells in a channel, using a function
1549832336935:#' specified by \code{fun}.
1549832336935:#'
1549832336936:#' @param data A list of samples. Each element is a list of tubes. Each tube is
1549832336936:#' a tibble that contains the different cell features measured on each
1549832336937:#' channel. Rows are cells, columns are features.
1549832336938:#' @param ch_metadata Tibble with the name of each measured feature for each
1549832336939:#' channel on each tube.
1549832336939:#' @param fun Function for summarizing each feature (channel)
1549832336940:#'
1549832336940:summarizeData <- function(data, ch_metadata, fun) {
1549832336941:n_sam <- length(data)
1549832336941:n_tub <- length(data[[1]])
1549832336942:bind_rows(
1549832336942:lapply(1:n_sam, function(sample, fn=fun){
1549832336943:features <- lapply(1:n_tub, function(tube, sam=sample, f=fn){
1549832336943:summarized_tube <- data[[sam]][[tube]] %>%
1549832336944:summarise_all(f)
1549832336945:names(summarized_tube) <- ch_metadata %>%
1549832336951:filter(Tube == tube) %>% select(Name) %>% pull()
1549832336952:summarized_tube
1549832336953:})
1549832336953:bind_cols(features) %>%
1549832336954:mutate(SampleNumber = sample) %>%
1549832336954:select(SampleNumber, everything())
1549832336955:})
1549832336956:)
1549832336957:}
1549832336958:# Function for loading and transforming one sample at a time to avoid RAM overload
1549832336959:loadAndTransformData <- function(metadata, n_samples, n_tubes, data_dir,
1549832336959:channel_metadata, fn){
1549832336960:transformed_data <- bind_rows(
1549832336960:lapply(1:n_samples, function(sn) {
1549832336961:current_sample <- list(
1549832336961:lapply(1:n_tubes, function (tn){
1549832336962:filename <- metadata %>% filter(SampleNumber == sn, TubeNumber == tn) %>%
1549832336962:select(FCSFileName) %>% pull()
1549832336963:read_csv(sprintf("%s/%04d.CSV", data_dir, filename))
1549832336972:})
1549832336973:)
1549832336973:summarizeData(current_sample, fun = fn, ch_metadata = channel_metadata)
1549832336974:})
1549832336975:)
1549832336975:transformed_data$SampleNumber <- 1:n_samples
1549832336976:transformed_data
1549832336977:}
1549832336978:# Load data ---------------------------------------------------------------
1549832336979:r_data_file      <- "data/all_data.RData"
1549832336980:data_dir         <- "data/CSV"
1549832336980:metadata         <- read_csv("data/AMLTraining.csv.zip")
1549832337684:channel_metadata <- read_csv("data/channels_metadata.csv") %>%
1549832337684:gather(Channel, Name, -Tube)
1549832337924:labels <- metadata %>%
1549832337924:select(SampleNumber, Label) %>%
1549832337924:distinct() %>%
1549832337925:mutate(Label = as.numeric(ifelse(Label == "normal", 0,
1549832337925:ifelse(Label == "aml", 1, Label))))
1549832337979:testing_mode       <- FALSE # Turn off for working with the whole dataset
1549832337979:n_samples          <- ifelse(testing_mode, 2, length(unique(metadata$SampleNumber)))
1549832337980:n_tubes_per_sample <- ifelse(testing_mode, 1, length(unique(metadata$TubeNumber)))
1549832337981:# # Load the whole dataset (Warning: RAM overload!)
1549832337981:# if (!file.exists(r_data_file)) {
1549832337981:#   # Read the dataset
1549832337982:#   all_tube_data <- lapply(1:n_samples, function(sn) {
1549832337982:#     lapply(1:n_tubes_per_sample, function (tn){
1549832337982:#       filename <- metadata %>% filter(SampleNumber == sn, TubeNumber == tn) %>%
1549832337983:#         select(FCSFileName) %>% pull()
1549832337983:#       read_csv(sprintf("%s/%04d.CSV", data_dir, filename))
1549832337983:#     })
1549832337983:#   })
1549832337984:#   names(all_tube_data) <- as.character(1:n_samples)
1549832337984:#   save(all_tube_data, file = r_data_file,
1549832337984:#        compress = "bzip2", compression_level = 9)
1549832337985:# } else {
1549832337985:#   load(file = r_data_file, verbose = TRUE)
1549832337985:# }
1549832337986:# names(all_tube_data) <- as.character(1:n_samples)
1549832337986:# # Transform the whole data set
1549832337987:# (final_data <- summarizeData(all_tube_data, channel_metadata, sd))
1549832337987:# (classes    <- labels$Label[final_data$SampleNumber])
1549832337988:# Load and transform each sample ----------------------------------------
1549832337988:functions <- list(sd = mean, mean = sd)
1549832337989:final_data_r_file  <- "data/final_data.RData"
1549832342961:n_tubes_per_sample
1549832345438:n_samples
1549832348668:data_dir
1549832351015:channel_metadata
1549832379763:if (!file.exists(final_data_r_file)) {
1549832379764:final_data <- lapply(functions, function(f, meta=metadata, ns=n_samples,
1549832379764:nt=n_tubes_per_sample, d_dir=data_dir,
1549832379764:ch_meta=channel_metadata){
1549832379765:loadAndTransformData(meta, ns, nt, d_dir, ch_meta, f)
1549832379765:})
1549832379766:save(final_data, file = final_data_r_file,
1549832379766:compress = "bzip2", compression_level = 9)
1549832379766:} else {
1549832379767:load(file = final_data_r_file, verbose = TRUE)
1549832379767:}
1549833423942:length(final_data)
1549833434324:final_data[[1]]
1549833449531:final_data[[2]]
1549833493637:if (!file.exists(final_data_r_file)) {
1549833493639:final_data <- lapply(functions, function(f, meta=metadata, ns=n_samples,
1549833493639:nt=n_tubes_per_sample, d_dir=data_dir,
1549833493640:ch_meta=channel_metadata){
1549833493641:loadAndTransformData(meta, ns, nt, d_dir, ch_meta, f)
1549833493642:})
1549833493643:save(final_data, file = final_data_r_file,
1549833493643:compress = "bzip2", compression_level = 9)
1549833493644:} else {
1549833493645:load(file = final_data_r_file, verbose = TRUE)
1549833493646:}
1549851717021:#!/usr/bin/env Rscript
1549851717044:# ##############################################################################
1549851717045:#  Author:   Shashwat Deepali Nagar
1549851717045:#            Hector Fabio Espitia-Navarro
1549851717045:#            Georgia Institute of Technology
1549851717045:#  Version:  0.1
1549851717046:#  Date:     02/09/2019
1549851717046:# ##############################################################################
1549851717046:# Packages ----------------------------------------------------------------
1549851717047:# Function to install and load packages
1549851717047:installAndLoadPackages <- function(pkg){
1549851717047:new_pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549851717048:if (length(new_pkg))
1549851717048:install.packages(new_pkg, repos="http://cran.rstudio.com/",
1549851717048:dependencies = TRUE, lib = personal_lib_path)
1549851717048:sapply(pkg, function(x){ require(x, character.only = TRUE, quietly = FALSE) })
1549851717049:# suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = F))
1549851717049:}
1549851717050:personal_lib_path <- Sys.getenv("R_LIBS_USER")
1549851717051:if(!file.exists(personal_lib_path))
1549851717051:dir.create(personal_lib_path)
1549851717053:packages <- c("caret", "tidyverse", "magrittr") # All required packages in here!
1549851717053:installAndLoadPackages(packages)
1549851731664:# Functions for data transformation ---------------------------------------
1549851731665:#' Summarize the whole dataset.
1549851731665:#'
1549851731666:#' \code{summarizeData} summarize the data of all tubes from each sample and
1549851731666:#' returns tibble in which each row is a sample and each column is a value that
1549851731667:#' summarize the values meassured for all cells in a channel, using a function
1549851731667:#' specified by \code{fun}.
1549851731668:#'
1549851731668:#' @param data A list of samples. Each element is a list of tubes. Each tube is
1549851731669:#' a tibble that contains the different cell features measured on each
1549851731669:#' channel. Rows are cells, columns are features.
1549851731669:#' @param ch_metadata Tibble with the name of each measured feature for each
1549851731670:#' channel on each tube.
1549851731670:#' @param fun Function for summarizing each feature (channel)
1549851731671:#'
1549851731671:summarizeData <- function(data, ch_metadata, fun) {
1549851731672:n_sam <- length(data)
1549851731675:n_tub <- length(data[[1]])
1549851731675:bind_rows(
1549851731676:lapply(1:n_sam, function(sample, fn=fun){
1549851731676:features <- lapply(1:n_tub, function(tube, sam=sample, f=fn){
1549851731677:summarized_tube <- data[[sam]][[tube]] %>%
1549851731677:summarise_all(f)
1549851731678:names(summarized_tube) <- ch_metadata %>%
1549851731679:filter(Tube == tube) %>% select(Name) %>% pull()
1549851731679:summarized_tube
1549851731680:})
1549851731680:bind_cols(features) %>%
1549851731681:mutate(SampleNumber = sample) %>%
1549851731682:select(SampleNumber, everything())
1549851731683:})
1549851731683:)
1549851731684:}
1549851731686:# Function for loading and transforming one sample at a time to avoid RAM overload
1549851731686:loadAndTransformData <- function(metadata, n_samples, n_tubes, data_dir,
1549851731687:channel_metadata, fn){
1549851731687:transformed_data <- bind_rows(
1549851731688:lapply(1:n_samples, function(sn) {
1549851731689:current_sample <- list(
1549851731689:lapply(1:n_tubes, function (tn){
1549851731690:filename <- metadata %>% filter(SampleNumber == sn, TubeNumber == tn) %>%
1549851731690:select(FCSFileName) %>% pull()
1549851731691:read_csv(sprintf("%s/%04d.CSV", data_dir, filename))
1549851731691:})
1549851731692:)
1549851731693:summarizeData(current_sample, fun = fn, ch_metadata = channel_metadata)
1549851731693:})
1549851731694:)
1549851731694:transformed_data$SampleNumber <- 1:n_samples
1549851731695:transformed_data
1549851731696:}
1549851731697:# Load data ---------------------------------------------------------------
1549851731698:r_data_file      <- "data/all_data.RData"
1549851731699:data_dir         <- "data/CSV"
1549851731699:metadata         <- read_csv("data/AMLTraining.csv.zip")
1549851731918:channel_metadata <- read_csv("data/channels_metadata.csv") %>%
1549851731918:gather(Channel, Name, -Tube)
1549851732163:labels <- metadata %>%
1549851732164:select(SampleNumber, Label) %>%
1549851732164:distinct() %>%
1549851732164:mutate(Label = as.numeric(ifelse(Label == "normal", 0,
1549851732165:ifelse(Label == "aml", 1, Label))))
1549851732235:testing_mode       <- FALSE # Turn off for working with the whole dataset
1549851732235:n_samples          <- ifelse(testing_mode, 2, length(unique(metadata$SampleNumber)))
1549851732236:n_tubes_per_sample <- ifelse(testing_mode, 1, length(unique(metadata$TubeNumber)))
1549851732236:# # Load the whole dataset (Warning: RAM overload!)
1549851732237:# if (!file.exists(r_data_file)) {
1549851732237:#   # Read the dataset
1549851732237:#   all_tube_data <- lapply(1:n_samples, function(sn) {
1549851732237:#     lapply(1:n_tubes_per_sample, function (tn){
1549851732238:#       filename <- metadata %>% filter(SampleNumber == sn, TubeNumber == tn) %>%
1549851732238:#         select(FCSFileName) %>% pull()
1549851732238:#       read_csv(sprintf("%s/%04d.CSV", data_dir, filename))
1549851732238:#     })
1549851732239:#   })
1549851732239:#   names(all_tube_data) <- as.character(1:n_samples)
1549851732239:#   save(all_tube_data, file = r_data_file,
1549851732240:#        compress = "bzip2", compression_level = 9)
1549851732240:# } else {
1549851732241:#   load(file = r_data_file, verbose = TRUE)
1549851732241:# }
1549851732242:# names(all_tube_data) <- as.character(1:n_samples)
1549851732242:# # Transform the whole data set
1549851732243:# (final_data <- summarizeData(all_tube_data, channel_metadata, sd))
1549851732243:# (classes    <- labels$Label[final_data$SampleNumber])
1549851732244:# Load and transform each sample ----------------------------------------
1549851732244:functions <- list(sd = mean, mean = sd)
1549851732244:final_data_r_file  <- "data/final_data.RData"
1549851732245:if (!file.exists(final_data_r_file)) {
1549851732245:final_data <- lapply(functions, function(f, meta=metadata, ns=n_samples,
1549851732246:nt=n_tubes_per_sample, d_dir=data_dir,
1549851732246:ch_meta=channel_metadata){
1549851732246:loadAndTransformData(meta, ns, nt, d_dir, ch_meta, f)
1549851732247:})
1549851732247:save(final_data, file = final_data_r_file,
1549851732247:compress = "bzip2", compression_level = 9)
1549851732248:} else {
1549851732248:load(file = final_data_r_file, verbose = TRUE)
1549851732248:}
1549851737093:library(corrplot)
1549851747838:packages <- c("caret", "tidyverse", "magrittr", "corrplot") # All required packages in here!
1549851748593:installAndLoadPackages(packages)
1549851782967:correlations = cor(final_data$sd)
1549851784019:corrplot(correlations, method="color")
1549851971848:correlations = cor(final_data$mean)
1549851972338:corrplot(correlations, method="color")
1549852091849:names(final_data$mean)
1549852155220:str_match(names(final_data$mean), "FS*|SS*")
1549852289399:str_match(names(final_data$mean), "FS*|SS*")
1549852301580:names(final_data$mean)
1549852317223:str_match(names(final_data$mean), "FS|SS")
1549852385807:!is.na(str_match(names(final_data$mean), "FS|SS"))
1549852426433:names(final_data$mean)[!is.na(str_match(names(final_data$mean), "FS|SS"))]
1549852435695:names(final_data$mean)[is.na(str_match(names(final_data$mean), "FS|SS"))]
1549852444101:columns <- names(final_data$mean)[is.na(str_match(names(final_data$mean), "FS|SS"))]
1549852450115:correlations = cor(final_data$mean %>% select_at(columns))
1549852452028:corrplot(correlations, method="color")
1549852540956:columns <- names(final_data$mean)[!is.na(str_match(names(final_data$mean), "FS|SS"))]
1549852548492:correlations = cor(final_data$mean %>% select_at(columns, everything()))
1549852562868:correlations = cor(final_data$mean %>% select(columns, everything()))
1549852564233:corrplot(correlations, method="color")
1549852713555:str_detect(names(final_data$mean), "FS")
1549852727074:columns <- names(final_data$mean)[str_detect(names(final_data$mean), "FS")]
1549852728463:columns
1549852746065:columns <- names(final_data$mean)[str_detect(names(final_data$mean), "FS")]
1549852746540:columns <- c(columns, names(final_data$mean)[str_match(names(final_data$mean), "SS")])
1549852747783:columns
1549852758431:columns <- names(final_data$mean)[str_detect(names(final_data$mean), "FS")]
1549852758824:columns <- c(columns, names(final_data$mean)[str_mdetect(names(final_data$mean), "SS")])
1549852759946:columns
1549852774517:columns <- names(final_data$mean)[str_detect(names(final_data$mean), "FS")]
1549852774815:columns <- c(columns, names(final_data$mean)[str_detect(names(final_data$mean), "SS")])
1549852776253:columns
1549852780766:correlations = cor(final_data$mean %>% select(columns, everything()))
1549852781153:corrplot(correlations, method="color")
1549852883704:columns <- names(final_data$mean)[str_detect(names(final_data$mean), "FS")]
1549852883975:columns <- c(columns, names(final_data$mean)[str_detect(names(final_data$mean), "SS")])
1549852884373:columns <- c(columns, names(final_data$mean)[str_detect(names(final_data$mean), "CD45")])
1549852885841:correlations = cor(final_data$mean %>% select(columns, everything()))
1549852886241:corrplot(correlations, method="color")
1549852942626:columns <- names(final_data$sd)[str_detect(names(final_data$sd), "FS")]
1549852943038:columns <- c(columns, names(final_data$sd)[str_detect(names(final_data$sd), "SS")])
1549852943351:columns <- c(columns, names(final_data$sd)[str_detect(names(final_data$sd), "CD45")])
1549852943749:correlations = cor(final_data$sd %>% select(columns, everything()))
1549852944326:corrplot(correlations, method="color")
1549904285474:#!/usr/bin/env Rscript
1549904285508:# ##############################################################################
1549904285508:#  Author:   Shashwat Deepali Nagar
1549904285509:#            Hector Fabio Espitia-Navarro
1549904285509:#            Georgia Institute of Technology
1549904285509:#  Version:  0.1
1549904285510:#  Date:     02/09/2019
1549904285511:# ##############################################################################
1549904285512:# Packages ----------------------------------------------------------------
1549904285512:# Function to install and load packages
1549904285513:installAndLoadPackages <- function(pkg){
1549904285513:new_pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1549904285514:if (length(new_pkg))
1549904285514:install.packages(new_pkg, repos="http://cran.rstudio.com/",
1549904285515:dependencies = TRUE, lib = personal_lib_path)
1549904285515:sapply(pkg, function(x){ require(x, character.only = TRUE, quietly = FALSE) })
1549904285516:# suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = F))
1549904285517:}
1549904285518:personal_lib_path <- Sys.getenv("R_LIBS_USER")
1549904285518:if(!file.exists(personal_lib_path))
1549904285519:dir.create(personal_lib_path)
1549904285520:packages <- c("caret", "tidyverse", "magrittr", "corrplot") # All required packages in here!
1549904285521:installAndLoadPackages(packages)
1549904300740:# Functions for data transformation ---------------------------------------
1549904300740:#' Summarize the whole dataset.
1549904300741:#'
1549904300741:#' \code{summarizeData} summarize the data of all tubes from each sample and
1549904300742:#' returns tibble in which each row is a sample and each column is a value that
1549904300742:#' summarize the values meassured for all cells in a channel, using a function
1549904300743:#' specified by \code{fun}.
1549904300743:#'
1549904300744:#' @param data A list of samples. Each element is a list of tubes. Each tube is
1549904300744:#' a tibble that contains the different cell features measured on each
1549904300745:#' channel. Rows are cells, columns are features.
1549904300745:#' @param ch_metadata Tibble with the name of each measured feature for each
1549904300746:#' channel on each tube.
1549904300746:#' @param fun Function for summarizing each feature (channel)
1549904300746:#'
1549904300747:summarizeData <- function(data, ch_metadata, fun) {
1549904300747:n_sam <- length(data)
1549904300748:n_tub <- length(data[[1]])
1549904300748:bind_rows(
1549904300749:lapply(1:n_sam, function(sample, fn=fun){
1549904300749:features <- lapply(1:n_tub, function(tube, sam=sample, f=fn){
1549904300750:summarized_tube <- data[[sam]][[tube]] %>%
1549904300751:summarise_all(f)
1549904300751:names(summarized_tube) <- ch_metadata %>%
1549904300752:filter(Tube == tube) %>% select(Name) %>% pull()
1549904300752:summarized_tube
1549904300753:})
1549904300754:bind_cols(features) %>%
1549904300754:mutate(SampleNumber = sample) %>%
1549904300755:select(SampleNumber, everything())
1549904300756:})
1549904300757:)
1549904300757:}
1549904300759:# Function for loading and transforming one sample at a time to avoid RAM overload
1549904300759:loadAndTransformData <- function(metadata, n_samples, n_tubes, data_dir,
1549904300760:channel_metadata, fn){
1549904300760:transformed_data <- bind_rows(
1549904300761:lapply(1:n_samples, function(sn) {
1549904300761:current_sample <- list(
1549904300762:lapply(1:n_tubes, function (tn){
1549904300762:filename <- metadata %>% filter(SampleNumber == sn, TubeNumber == tn) %>%
1549904300763:select(FCSFileName) %>% pull()
1549904300763:read_csv(sprintf("%s/%04d.CSV", data_dir, filename))
1549904300764:})
1549904300764:)
1549904300765:summarizeData(current_sample, fun = fn, ch_metadata = channel_metadata)
1549904300765:})
1549904300766:)
1549904300766:transformed_data$SampleNumber <- 1:n_samples
1549904300767:transformed_data
1549904300768:}
1549904300769:# Load data ---------------------------------------------------------------
1549904300770:r_data_file      <- "data/all_data.RData"
1549904300770:data_dir         <- "data/CSV"
1549904300771:metadata         <- read_csv("data/AMLTraining.csv.zip")
1549904301010:channel_metadata <- read_csv("data/channels_metadata.csv") %>%
1549904301010:gather(Channel, Name, -Tube)
1549904301282:labels <- metadata %>%
1549904301282:select(SampleNumber, Label) %>%
1549904301282:distinct() %>%
1549904301283:mutate(Label = as.numeric(ifelse(Label == "normal", 0,
1549904301283:ifelse(Label == "aml", 1, Label))))
1549904301354:testing_mode       <- FALSE # Turn off for working with the whole dataset
1549904301354:n_samples          <- ifelse(testing_mode, 2, length(unique(metadata$SampleNumber)))
1549904301355:n_tubes_per_sample <- ifelse(testing_mode, 1, length(unique(metadata$TubeNumber)))
1549904301356:# # Load the whole dataset (Warning: RAM overload!)
1549904301356:# if (!file.exists(r_data_file)) {
1549904301356:#   # Read the dataset
1549904301356:#   all_tube_data <- lapply(1:n_samples, function(sn) {
1549904301357:#     lapply(1:n_tubes_per_sample, function (tn){
1549904301357:#       filename <- metadata %>% filter(SampleNumber == sn, TubeNumber == tn) %>%
1549904301357:#         select(FCSFileName) %>% pull()
1549904301357:#       read_csv(sprintf("%s/%04d.CSV", data_dir, filename))
1549904301358:#     })
1549904301358:#   })
1549904301358:#   names(all_tube_data) <- as.character(1:n_samples)
1549904301358:#   save(all_tube_data, file = r_data_file,
1549904301359:#        compress = "bzip2", compression_level = 9)
1549904301359:# } else {
1549904301359:#   load(file = r_data_file, verbose = TRUE)
1549904301359:# }
1549904301360:# names(all_tube_data) <- as.character(1:n_samples)
1549904301360:# # Transform the whole data set
1549904301361:# (final_data <- summarizeData(all_tube_data, channel_metadata, sd))
1549904301361:# (classes    <- labels$Label[final_data$SampleNumber])
1549904301361:# Load and transform each sample ----------------------------------------
1549904301362:functions <- list(sd = mean, mean = sd)
1549904301362:final_data_r_file  <- "data/final_data.RData"
1549904301363:if (!file.exists(final_data_r_file)) {
1549904301363:final_data <- lapply(functions, function(f, meta=metadata, ns=n_samples,
1549904301363:nt=n_tubes_per_sample, d_dir=data_dir,
1549904301364:ch_meta=channel_metadata){
1549904301364:loadAndTransformData(meta, ns, nt, d_dir, ch_meta, f)
1549904301364:})
1549904301364:save(final_data, file = final_data_r_file,
1549904301365:compress = "bzip2", compression_level = 9)
1549904301365:} else {
1549904301365:load(file = final_data_r_file, verbose = TRUE)
1549904301366:}
1549904301451:# Exploration  ------------------------------------------------------------
1549904307411:columns <- names(final_data$mean)[str_detect(names(final_data$mean), "FS")]
1549904307773:columns <- c(columns, names(final_data$mean)[str_detect(names(final_data$mean), "SS")])
1549904308125:columns <- c(columns, names(final_data$mean)[str_detect(names(final_data$mean), "CD45")])
1549904308805:correlations = cor(final_data$mean %>% select(columns, everything()))
1549904309266:corrplot(correlations, method="color")
1549904328078:columns <- names(final_data$sd)[str_detect(names(final_data$sd), "FS")]
1549904328884:columns <- c(columns, names(final_data$sd)[str_detect(names(final_data$sd), "SS")])
1549904329324:columns <- c(columns, names(final_data$sd)[str_detect(names(final_data$sd), "CD45")])
1549904329986:correlations = cor(final_data$sd %>% select(columns, everything()))
1549904331081:corrplot(correlations, method="color")
1549904649709:training_samples <- 1:179
1549904650808:training_samples
1549904718654:training_data <- final_data$sd[training_samples, ]
1549904720576:training_data
1549904741542:training_data <- final_data$sd[training_samples,-1]
1549904817014:labels[training_samples]
1549904822845:labels
1549904838213:training_labels  <- labels$Label[training_samples]
1549904839508:training_labels
1549904895101:# Attempt to classify -----------------------------------------------------
1549904895101:n_training_samples <- 179
1549904895571:training_samples   <- 1:n_training_samples
1549904896229:training_data      <- final_data$sd[training_samples,-1]
1549904897067:training_labels    <- labels$Label[training_samples]
1550532725236:#!/usr/bin/env Rscript
1550532725256:# ##############################################################################
1550532725256:#  Author:   Shashwat Deepali Nagar
1550532725257:#            Hector Fabio Espitia-Navarro
1550532725257:#            Georgia Institute of Technology
1550532725258:#  Version:  0.1
1550532725258:#  Date:     02/09/2019
1550532725259:# ##############################################################################
1550532725259:# Packages ----------------------------------------------------------------
1550532725260:# Function to install and load packages
1550532725260:installAndLoadPackages <- function(pkg){
1550532725261:new_pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1550532725261:if (length(new_pkg))
1550532725262:install.packages(new_pkg, repos="http://cran.rstudio.com/",
1550532725262:dependencies = TRUE, lib = personal_lib_path)
1550532725263:sapply(pkg, function(x){ require(x, character.only = TRUE, quietly = FALSE) })
1550532725264:# suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = F))
1550532725265:}
1550532725266:personal_lib_path <- Sys.getenv("R_LIBS_USER")
1550532725267:if(!file.exists(personal_lib_path))
1550532725267:dir.create(personal_lib_path)
1550532725268:packages <- c("caret", "tidyverse", "magrittr", "corrplot") # All required packages in here!
1550532725269:installAndLoadPackages(packages)
1550532742487:# Functions for data transformation ---------------------------------------
1550532742488:#' Summarize the whole dataset.
1550532742489:#'
1550532742489:#' \code{summarizeData} summarize the data of all tubes from each sample and
1550532742489:#' returns tibble in which each row is a sample and each column is a value that
1550532742490:#' summarize the values meassured for all cells in a channel, using a function
1550532742490:#' specified by \code{fun}.
1550532742490:#'
1550532742491:#' @param data A list of samples. Each element is a list of tubes. Each tube is
1550532742491:#' a tibble that contains the different cell features measured on each
1550532742491:#' channel. Rows are cells, columns are features.
1550532742491:#' @param ch_metadata Tibble with the name of each measured feature for each
1550532742492:#' channel on each tube.
1550532742492:#' @param fun Function for summarizing each feature (channel)
1550532742493:#'
1550532742493:summarizeData <- function(data, ch_metadata, fun) {
1550532742493:n_sam <- length(data)
1550532742494:n_tub <- length(data[[1]])
1550532742494:bind_rows(
1550532742495:lapply(1:n_sam, function(sample, fn=fun){
1550532742495:features <- lapply(1:n_tub, function(tube, sam=sample, f=fn){
1550532742496:summarized_tube <- data[[sam]][[tube]] %>%
1550532742496:summarise_all(f)
1550532742496:names(summarized_tube) <- ch_metadata %>%
1550532742497:filter(Tube == tube) %>% select(Name) %>% pull()
1550532742497:summarized_tube
1550532742497:})
1550532742498:bind_cols(features) %>%
1550532742498:mutate(SampleNumber = sample) %>%
1550532742499:select(SampleNumber, everything())
1550532742500:})
1550532742500:)
1550532742501:}
1550532742502:# Function for loading and transforming one sample at a time to avoid RAM overload
1550532742502:loadAndTransformData <- function(metadata, n_samples, n_tubes, data_dir,
1550532742503:channel_metadata, fn){
1550532742503:transformed_data <- bind_rows(
1550532742504:lapply(1:n_samples, function(sn) {
1550532742504:current_sample <- list(
1550532742505:lapply(1:n_tubes, function (tn){
1550532742505:filename <- metadata %>% filter(SampleNumber == sn, TubeNumber == tn) %>%
1550532742506:select(FCSFileName) %>% pull()
1550532742506:read_csv(sprintf("%s/%04d.CSV", data_dir, filename))
1550532742506:})
1550532742507:)
1550532742507:summarizeData(current_sample, fun = fn, ch_metadata = channel_metadata)
1550532742507:})
1550532742508:)
1550532742508:transformed_data$SampleNumber <- 1:n_samples
1550532742509:transformed_data
1550532742510:}
1550532742511:# Load data ---------------------------------------------------------------
1550532742511:r_data_file      <- "data/all_data.RData"
1550532742512:data_dir         <- "data/CSV"
1550532742513:metadata         <- read_csv("data/AMLTraining.csv.zip")
1550532743068:channel_metadata <- read_csv("data/channels_metadata.csv") %>%
1550532743068:gather(Channel, Name, -Tube)
1550532743375:labels <- metadata %>%
1550532743375:select(SampleNumber, Label) %>%
1550532743376:distinct() %>%
1550532743376:mutate(Label = as.numeric(ifelse(Label == "normal", 0,
1550532743376:ifelse(Label == "aml", 1, Label))))
1550532743469:testing_mode       <- FALSE # Turn off for working with the whole dataset
1550532743469:n_samples          <- ifelse(testing_mode, 2, length(unique(metadata$SampleNumber)))
1550532743470:n_tubes_per_sample <- ifelse(testing_mode, 1, length(unique(metadata$TubeNumber)))
1550532743471:# # Load the whole dataset (Warning: RAM overload!)
1550532743472:# if (!file.exists(r_data_file)) {
1550532743472:#   # Read the dataset
1550532743473:#   all_tube_data <- lapply(1:n_samples, function(sn) {
1550532743473:#     lapply(1:n_tubes_per_sample, function (tn){
1550532743474:#       filename <- metadata %>% filter(SampleNumber == sn, TubeNumber == tn) %>%
1550532743474:#         select(FCSFileName) %>% pull()
1550532743474:#       read_csv(sprintf("%s/%04d.CSV", data_dir, filename))
1550532743475:#     })
1550532743475:#   })
1550532743475:#   names(all_tube_data) <- as.character(1:n_samples)
1550532743475:#   save(all_tube_data, file = r_data_file,
1550532743476:#        compress = "bzip2", compression_level = 9)
1550532743476:# } else {
1550532743476:#   load(file = r_data_file, verbose = TRUE)
1550532743477:# }
1550532743477:# names(all_tube_data) <- as.character(1:n_samples)
1550532743478:# # Transform the whole data set
1550532743478:# (final_data <- summarizeData(all_tube_data, channel_metadata, sd))
1550532743479:# (classes    <- labels$Label[final_data$SampleNumber])
1550532743479:# Load and transform each sample ----------------------------------------
1550532743480:functions <- list(sd = mean, mean = sd)
1550532743480:final_data_r_file  <- "data/final_data.RData"
1550532743481:if (!file.exists(final_data_r_file)) {
1550532743481:final_data <- lapply(functions, function(f, meta=metadata, ns=n_samples,
1550532743481:nt=n_tubes_per_sample, d_dir=data_dir,
1550532743482:ch_meta=channel_metadata){
1550532743482:loadAndTransformData(meta, ns, nt, d_dir, ch_meta, f)
1550532743483:})
1550532743483:save(final_data, file = final_data_r_file,
1550532743484:compress = "bzip2", compression_level = 9)
1550532743484:} else {
1550532743485:load(file = final_data_r_file, verbose = TRUE)
1550532743485:}
1550534650401:packages <- c("caret", "tidyverse", "magrittr", "corrplot", "optcluster") # All required packages in here!
1550534650942:installAndLoadPackages(packages)
1550534684042:#!/usr/bin/env Rscript
1550534684043:# ##############################################################################
1550534684043:#  Author:   Shashwat Deepali Nagar
1550534684043:#            Hector Fabio Espitia-Navarro
1550534684044:#            Georgia Institute of Technology
1550534684044:#  Version:  0.1
1550534684044:#  Date:     02/09/2019
1550534684045:# ##############################################################################
1550534684045:# Packages ----------------------------------------------------------------
1550534684046:# Function to install and load packages
1550534684046:installAndLoadPackages <- function(pkg){
1550534684046:new_pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1550534684047:if (length(new_pkg))
1550534684047:install.packages(new_pkg, repos="http://cran.rstudio.com/",
1550534684047:dependencies = TRUE, lib = personal_lib_path)
1550534684048:sapply(pkg, function(x){ require(x, character.only = TRUE, quietly = FALSE) })
1550534684048:# suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = F))
1550534684048:}
1550534684049:personal_lib_path <- Sys.getenv("R_LIBS_USER")
1550534684050:if(!file.exists(personal_lib_path))
1550534684050:dir.create(personal_lib_path)
1550534684051:packages <- c("caret", "tidyverse", "magrittr", "corrplot", "optcluster") # All required packages in here!
1550534684051:installAndLoadPackages(packages)
1550534760268:#!/usr/bin/env Rscript
1550534760268:# ##############################################################################
1550534760269:#  Author:   Shashwat Deepali Nagar
1550534760269:#            Hector Fabio Espitia-Navarro
1550534760270:#            Georgia Institute of Technology
1550534760270:#  Version:  0.1
1550534760271:#  Date:     02/09/2019
1550534760271:# ##############################################################################
1550534760272:# Packages ----------------------------------------------------------------
1550534760272:# Function to install and load packages
1550534760273:installAndLoadPackages <- function(pkg){
1550534760273:new_pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1550534760274:if (length(new_pkg))
1550534760274:install.packages(new_pkg, repos="http://cran.rstudio.com/",
1550534760275:dependencies = TRUE, lib = personal_lib_path)
1550534760275:sapply(pkg, function(x){ require(x, character.only = TRUE, quietly = FALSE) })
1550534760276:# suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = F))
1550534760276:}
1550534760277:personal_lib_path <- Sys.getenv("R_LIBS_USER")
1550534760278:if(!file.exists(personal_lib_path))
1550534760278:dir.create(personal_lib_path)
1550534763967:packages <- c("caret", "tidyverse", "magrittr", "corrplot", "optcluster") # All required packages in here!
1550534764589:installAndLoadPackages(packages)
1550534781869:installed.packages()
1550534817039:packages[!(packages %in% installed.packages()[, "Package"])
1550534825718:]
1550534848974:install.packages("optcluster")
1550534858929:packages <- c("caret", "tidyverse", "magrittr", "corrplot", "optCluster") # All required packages in here!
1550534861729:installAndLoadPackages(packages)
1550535253505:apply_scale <- FALSE
1550535371286:prescaled_final_data <- lapply(functions, function(f, meta=metadata, ns=n_samples,
1550535371286:nt=n_tubes_per_sample, d_dir=data_dir,
1550535371287:ch_meta=channel_metadata, sca=TRUE){
1550535371287:loadAndTransformData(meta, ns, nt, d_dir, ch_meta, f, sca)
1550535371288:})
1550535462350:#!/usr/bin/env Rscript
1550535462351:# ##############################################################################
1550535462351:#  Author:   Shashwat Deepali Nagar
1550535462352:#            Hector Fabio Espitia-Navarro
1550535462353:#            Georgia Institute of Technology
1550535462353:#  Version:  0.1
1550535462354:#  Date:     02/09/2019
1550535462354:# ##############################################################################
1550535462355:# Packages ----------------------------------------------------------------
1550535462355:# Function to install and load packages
1550535462356:installAndLoadPackages <- function(pkg){
1550535462356:new_pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1550535462357:if (length(new_pkg))
1550535462358:install.packages(new_pkg, repos="http://cran.rstudio.com/",
1550535462358:dependencies = TRUE, lib = personal_lib_path)
1550535462359:sapply(pkg, function(x){ require(x, character.only = TRUE, quietly = FALSE) })
1550535462359:# suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = F))
1550535462360:}
1550535462361:personal_lib_path <- Sys.getenv("R_LIBS_USER")
1550535462362:if(!file.exists(personal_lib_path))
1550535462362:dir.create(personal_lib_path)
1550535462364:packages <- c("caret", "tidyverse", "magrittr", "corrplot", "optCluster") # All required packages in here!
1550535462365:installAndLoadPackages(packages)
1550535462373:# Functions for data transformation ---------------------------------------
1550535462374:#' Summarize the whole dataset.
1550535462375:#'
1550535462375:#' \code{summarizeData} summarize the data of all tubes from each sample and
1550535462376:#' returns tibble in which each row is a sample and each column is a value that
1550535462376:#' summarize the values meassured for all cells in a channel, using a function
1550535462376:#' specified by \code{fun}.
1550535462377:#'
1550535462377:#' @param data A list of samples. Each element is a list of tubes. Each tube is
1550535462378:#' a tibble that contains the different cell features measured on each
1550535462378:#' channel. Rows are cells, columns are features.
1550535462379:#' @param ch_metadata Tibble with the name of each measured feature for each
1550535462379:#' channel on each tube.
1550535462380:#' @param fun Function for summarizing each feature (channel)
1550535462380:#'
1550535462381:summarizeData <- function(data, ch_metadata, fun, scale = TRUE) {
1550535462381:n_sam <- length(data)
1550535462382:n_tub <- length(data[[1]])
1550535462382:bind_rows(
1550535462383:lapply(1:n_sam, function(sample, fn=fun){
1550535462383:features <- lapply(1:n_tub, function(tube, sam=sample, f=fn){
1550535462384:if (scale){
1550535462384:summarized_tube <- data[[sam]][[tube]] %>%
1550535462385:scale() %>% as.tibble() %>%
1550535462385:summarise_all(f)
1550535462386:} else {
1550535462387:summarized_tube <- data[[sam]][[tube]] %>%
1550535462387:summarise_all(f)
1550535462388:}
1550535462388:names(summarized_tube) <- ch_metadata %>%
1550535462389:filter(Tube == tube) %>% select(Name) %>% pull()
1550535462390:summarized_tube
1550535462390:})
1550535462391:bind_cols(features) %>%
1550535462391:mutate(SampleNumber = sample) %>%
1550535462392:select(SampleNumber, everything())
1550535462393:})
1550535462393:)
1550535462394:}
1550535462396:# Function for loading and transforming one sample at a time to avoid RAM overload
1550535462396:loadAndTransformData <- function(metadata, n_samples, n_tubes, data_dir,
1550535462397:channel_metadata, fn, app_scale=FALSE){
1550535462397:transformed_data <- bind_rows(
1550535462398:lapply(1:n_samples, function(sn) {
1550535462398:current_sample <- list(
1550535462399:lapply(1:n_tubes, function (tn){
1550535462400:filename <- metadata %>% filter(SampleNumber == sn, TubeNumber == tn) %>%
1550535462400:select(FCSFileName) %>% pull()
1550535462401:read_csv(sprintf("%s/%04d.CSV", data_dir, filename))
1550535462401:})
1550535462402:)
1550535462403:summarizeData(current_sample, fun = fn, ch_metadata = channel_metadata, scale = app_scale)
1550535462403:})
1550535462404:)
1550535462404:transformed_data$SampleNumber <- 1:n_samples
1550535462405:transformed_data
1550535462406:}
1550535462407:# Load data ---------------------------------------------------------------
1550535462408:r_data_file      <- "data/all_data.RData"
1550535462408:data_dir         <- "data/CSV"
1550535462410:metadata         <- read_csv("data/AMLTraining.csv.zip")
1550535462506:channel_metadata <- read_csv("data/channels_metadata.csv") %>%
1550535462506:gather(Channel, Name, -Tube)
1550535462663:labels <- metadata %>%
1550535462663:select(SampleNumber, Label) %>%
1550535462663:distinct() %>%
1550535462664:mutate(Label = as.numeric(ifelse(Label == "normal", 0,
1550535462664:ifelse(Label == "aml", 1, Label))))
1550535462887:testing_mode       <- FALSE # Turn off for working with the whole dataset
1550535462888:n_samples          <- ifelse(testing_mode, 2, length(unique(metadata$SampleNumber)))
1550535462889:n_tubes_per_sample <- ifelse(testing_mode, 1, length(unique(metadata$TubeNumber)))
1550535462891:# # Load the whole dataset (Warning: RAM overload!)
1550535462891:# if (!file.exists(r_data_file)) {
1550535462891:#   # Read the dataset
1550535462892:#   all_tube_data <- lapply(1:n_samples, function(sn) {
1550535462892:#     lapply(1:n_tubes_per_sample, function (tn){
1550535462893:#       filename <- metadata %>% filter(SampleNumber == sn, TubeNumber == tn) %>%
1550535462893:#         select(FCSFileName) %>% pull()
1550535462894:#       read_csv(sprintf("%s/%04d.CSV", data_dir, filename))
1550535462894:#     })
1550535462895:#   })
1550535462895:#   names(all_tube_data) <- as.character(1:n_samples)
1550535462895:#   save(all_tube_data, file = r_data_file,
1550535462896:#        compress = "bzip2", compression_level = 9)
1550535462896:# } else {
1550535462897:#   load(file = r_data_file, verbose = TRUE)
1550535462897:# }
1550535462898:# names(all_tube_data) <- as.character(1:n_samples)
1550535462899:# # Transform the whole data set
1550535462899:# (final_data <- summarizeData(all_tube_data, channel_metadata, sd))
1550535462900:# (classes    <- labels$Label[final_data$SampleNumber])
1550535462901:# Load and transform each sample ----------------------------------------
1550535462901:functions <- list(sd = mean, mean = sd)
1550535462902:final_data_r_file  <- "data/final_data.RData"
1550535462903:apply_scale <- TRUE
1550535466479:prescaled_final_data <- lapply(functions, function(f, meta=metadata, ns=n_samples,
1550535466480:nt=n_tubes_per_sample, d_dir=data_dir,
1550535466481:ch_meta=channel_metadata, sca=TRUE){
1550535466482:loadAndTransformData(meta, ns, nt, d_dir, ch_meta, f, sca)
1550535466482:})
1550535762415:#!/usr/bin/env Rscript
1550535762442:# ##############################################################################
1550535762450:#  Author:   Shashwat Deepali Nagar
1550535762450:#            Hector Fabio Espitia-Navarro
1550535762450:#            Georgia Institute of Technology
1550535762450:#  Version:  0.1
1550535762451:#  Date:     02/09/2019
1550535762451:# ##############################################################################
1550535762451:# Packages ----------------------------------------------------------------
1550535762452:# Function to install and load packages
1550535762452:installAndLoadPackages <- function(pkg){
1550535762452:new_pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1550535762453:if (length(new_pkg))
1550535762453:install.packages(new_pkg, repos="http://cran.rstudio.com/",
1550535762453:dependencies = TRUE, lib = personal_lib_path)
1550535762454:sapply(pkg, function(x){ require(x, character.only = TRUE, quietly = FALSE) })
1550535762454:# suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = F))
1550535762454:}
1550535762455:personal_lib_path <- Sys.getenv("R_LIBS_USER")
1550535762455:if(!file.exists(personal_lib_path))
1550535762456:dir.create(personal_lib_path)
1550535762456:packages <- c("caret", "tidyverse", "magrittr", "corrplot", "optCluster") # All required packages in here!
1550535762457:installAndLoadPackages(packages)
1550535762505:# Functions for data transformation ---------------------------------------
1550535762506:#' Summarize the whole dataset.
1550535762506:#'
1550535762507:#' \code{summarizeData} summarize the data of all tubes from each sample and
1550535762508:#' returns tibble in which each row is a sample and each column is a value that
1550535762508:#' summarize the values meassured for all cells in a channel, using a function
1550535762509:#' specified by \code{fun}.
1550535762509:#'
1550535762510:#' @param data A list of samples. Each element is a list of tubes. Each tube is
1550535762510:#' a tibble that contains the different cell features measured on each
1550535762510:#' channel. Rows are cells, columns are features.
1550535762511:#' @param ch_metadata Tibble with the name of each measured feature for each
1550535762511:#' channel on each tube.
1550535762512:#' @param fun Function for summarizing each feature (channel)
1550535762512:#'
1550535762513:summarizeData <- function(data, ch_metadata, fun, scale = TRUE) {
1550535762513:n_sam <- length(data)
1550535762514:n_tub <- length(data[[1]])
1550535762514:bind_rows(
1550535762515:lapply(1:n_sam, function(sample, fn=fun){
1550535762515:features <- lapply(1:n_tub, function(tube, sam=sample, f=fn){
1550535762516:if (scale){
1550535762516:summarized_tube <- data[[sam]][[tube]] %>%
1550535762517:scale() %>% as.tibble() %>%
1550535762518:summarise_all(f)
1550535762518:} else {
1550535762519:summarized_tube <- data[[sam]][[tube]] %>%
1550535762519:summarise_all(f)
1550535762520:}
1550535762521:names(summarized_tube) <- ch_metadata %>%
1550535762521:filter(Tube == tube) %>% select(Name) %>% pull()
1550535762522:summarized_tube
1550535762522:})
1550535762523:bind_cols(features) %>%
1550535762524:mutate(SampleNumber = sample) %>%
1550535762524:select(SampleNumber, everything())
1550535762525:})
1550535762526:)
1550535762526:}
1550535762528:# Function for loading and transforming one sample at a time to avoid RAM overload
1550535762528:loadAndTransformData <- function(metadata, n_samples, n_tubes, data_dir,
1550535762529:channel_metadata, fn, app_scale=FALSE){
1550535762529:transformed_data <- bind_rows(
1550535762530:lapply(1:n_samples, function(sn) {
1550535762531:current_sample <- list(
1550535762531:lapply(1:n_tubes, function (tn){
1550535762532:filename <- metadata %>% filter(SampleNumber == sn, TubeNumber == tn) %>%
1550535762532:select(FCSFileName) %>% pull()
1550535762533:read_csv(sprintf("%s/%04d.CSV", data_dir, filename), col_types = cols(
1550535762533:`FS Lin` = col_double(),
1550535762534:`SS Log` = col_double(),
1550535762535:`FL1 Log` = col_double(),
1550535762535:`FL2 Log` = col_double(),
1550535762536:`FL3 Log` = col_double(),
1550535762536:`FL4 Log` = col_double(),
1550535762537:`FL5 Log` = col_double()
1550535762538:))
1550535762538:})
1550535762539:)
1550535762539:summarizeData(current_sample, fun = fn, ch_metadata = channel_metadata, scale = app_scale)
1550535762540:})
1550535762541:)
1550535762541:transformed_data$SampleNumber <- 1:n_samples
1550535762542:transformed_data
1550535762542:}
1550535762543:# Load data ---------------------------------------------------------------
1550535762544:r_data_file      <- "data/all_data.RData"
1550535762544:data_dir         <- "data/CSV"
1550535762545:metadata         <- read_csv("data/AMLTraining.csv.zip")
1550535762575:channel_metadata <- read_csv("data/channels_metadata.csv") %>%
1550535762575:gather(Channel, Name, -Tube)
1550535762589:labels <- metadata %>%
1550535762589:select(SampleNumber, Label) %>%
1550535762589:distinct() %>%
1550535762590:mutate(Label = as.numeric(ifelse(Label == "normal", 0,
1550535762591:ifelse(Label == "aml", 1, Label))))
1550535762596:testing_mode       <- FALSE # Turn off for working with the whole dataset
1550535762597:n_samples          <- ifelse(testing_mode, 2, length(unique(metadata$SampleNumber)))
1550535762597:n_tubes_per_sample <- ifelse(testing_mode, 1, length(unique(metadata$TubeNumber)))
1550535762598:# # Load the whole dataset (Warning: RAM overload!)
1550535762599:# if (!file.exists(r_data_file)) {
1550535762599:#   # Read the dataset
1550535762599:#   all_tube_data <- lapply(1:n_samples, function(sn) {
1550535762599:#     lapply(1:n_tubes_per_sample, function (tn){
1550535762600:#       filename <- metadata %>% filter(SampleNumber == sn, TubeNumber == tn) %>%
1550535762600:#         select(FCSFileName) %>% pull()
1550535762600:#       read_csv(sprintf("%s/%04d.CSV", data_dir, filename))
1550535762601:#     })
1550535762601:#   })
1550535762601:#   names(all_tube_data) <- as.character(1:n_samples)
1550535762601:#   save(all_tube_data, file = r_data_file,
1550535762602:#        compress = "bzip2", compression_level = 9)
1550535762602:# } else {
1550535762602:#   load(file = r_data_file, verbose = TRUE)
1550535762602:# }
1550535762603:# names(all_tube_data) <- as.character(1:n_samples)
1550535762604:# # Transform the whole data set
1550535762604:# (final_data <- summarizeData(all_tube_data, channel_metadata, sd))
1550535762604:# (classes    <- labels$Label[final_data$SampleNumber])
1550535762605:# Load and transform each sample ----------------------------------------
1550535762605:functions <- list(sd = mean, mean = sd)
1550535762606:final_data_r_file  <- "data/final_data.RData"
1550535762607:apply_scale <- TRUE
1550535762609:if (!file.exists(final_data_r_file)) {
1550535762609:final_data <- lapply(functions, function(f, meta=metadata, ns=n_samples,
1550535762610:nt=n_tubes_per_sample, d_dir=data_dir,
1550535762610:ch_meta=channel_metadata, sca=apply_scale){
1550535762611:loadAndTransformData(meta, ns, nt, d_dir, ch_meta, f, sca)
1550535762611:})
1550535762612:save(final_data, file = final_data_r_file,
1550535762613:compress = "bzip2", compression_level = 9)
1550535762613:} else {
1550535762614:load(file = final_data_r_file, verbose = TRUE)
1550535762614:}
1550535762697:prescaled_final_data <- lapply(functions, function(f, meta=metadata, ns=n_samples,
1550535762697:nt=n_tubes_per_sample, d_dir=data_dir,
1550535762698:ch_meta=channel_metadata, sca=TRUE){
1550535762698:loadAndTransformData(meta, ns, nt, d_dir, ch_meta, f, sca)
1550535762699:})
1550537244177:prescaled_final_data
1550538331561:# Load and transform each sample ----------------------------------------
1550538331562:functions <- list(sd = mean, mean = sd, median = median)
1550538620035:c = sample(1:100, 100)
1550538622105:c
1550538653898:sd(c)
1550538659024:mean(c)
1550538672974:sd(scale(c))
1550538674694:mean(scale(c))
1550538740189:prescaled_final_data <- lapply(list("prescaled_median" = median), function(f, meta=metadata, ns=n_samples,
1550538740190:nt=n_tubes_per_sample, d_dir=data_dir,
1550538740190:ch_meta=channel_metadata, sca=TRUE){
1550538740191:loadAndTransformData(meta, ns, nt, d_dir, ch_meta, f, sca)
1550538740192:})
1550539905775:prescaled_final_data
1550539930180:final_data <- c(final_data, prescaled_final_data)
1550539931655:final_data
1550539953527:# Load and transform each sample ----------------------------------------
1550539953528:functions <- list(sd = sd, mean = mean, median = median)
1550539953898:final_data_r_file  <- "data/final_data.RData"
1550539954344:apply_scale <- TRUE
1550539962117:final_data <- lapply(functions, function(f, meta=metadata, ns=n_samples,
1550539962117:nt=n_tubes_per_sample, d_dir=data_dir,
1550539962118:ch_meta=channel_metadata, sca=apply_scale){
1550539962118:loadAndTransformData(meta, ns, nt, d_dir, ch_meta, f, sca)
1550539962119:})
1550543635723:#!/usr/bin/env Rscript
1550543635750:# ##############################################################################
1550543635750:#  Author:   Shashwat Deepali Nagar
1550543635750:#            Hector Fabio Espitia-Navarro
1550543635751:#            Georgia Institute of Technology
1550543635751:#  Version:  0.1
1550543635751:#  Date:     02/09/2019
1550543635752:# ##############################################################################
1550543635752:# Packages ----------------------------------------------------------------
1550543635752:# Function to install and load packages
1550543635753:installAndLoadPackages <- function(pkg){
1550543635753:new_pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1550543635754:if (length(new_pkg))
1550543635754:install.packages(new_pkg, repos="http://cran.rstudio.com/",
1550543635755:dependencies = TRUE, lib = personal_lib_path)
1550543635755:sapply(pkg, function(x){ require(x, character.only = TRUE, quietly = FALSE) })
1550543635756:# suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = F))
1550543635757:}
1550543635758:personal_lib_path <- Sys.getenv("R_LIBS_USER")
1550543635759:if(!file.exists(personal_lib_path))
1550543635759:dir.create(personal_lib_path)
1550543635760:packages <- c("caret", "tidyverse", "magrittr", "corrplot", "optCluster") # All required packages in here!
1550543635761:installAndLoadPackages(packages)
1550543635800:# Functions for data transformation ---------------------------------------
1550543635801:#' Summarize the whole dataset.
1550543635801:#'
1550543635802:#' \code{summarizeData} summarize the data of all tubes from each sample and
1550543635802:#' returns tibble in which each row is a sample and each column is a value that
1550543635803:#' summarize the values meassured for all cells in a channel, using a function
1550543635803:#' specified by \code{fun}.
1550543635804:#'
1550543635804:#' @param data A list of samples. Each element is a list of tubes. Each tube is
1550543635805:#' a tibble that contains the different cell features measured on each
1550543635806:#' channel. Rows are cells, columns are features.
1550543635806:#' @param ch_metadata Tibble with the name of each measured feature for each
1550543635807:#' channel on each tube.
1550543635808:#' @param fun Function for summarizing each feature (channel)
1550543635808:#'
1550543635809:summarizeData <- function(data, ch_metadata, fun, scale = TRUE) {
1550543635810:n_sam <- length(data)
1550543635811:n_tub <- length(data[[1]])
1550543635811:bind_rows(
1550543635815:lapply(1:n_sam, function(sample, fn=fun){
1550543635816:features <- lapply(1:n_tub, function(tube, sam=sample, f=fn){
1550543635817:if (scale){
1550543635818:summarized_tube <- data[[sam]][[tube]] %>%
1550543635819:scale() %>% as.tibble() %>%
1550543635819:summarise_all(f)
1550543635820:} else {
1550543635821:summarized_tube <- data[[sam]][[tube]] %>%
1550543635821:summarise_all(f)
1550543635822:}
1550543635823:names(summarized_tube) <- ch_metadata %>%
1550543635825:filter(Tube == tube) %>% select(Name) %>% pull()
1550543635826:summarized_tube
1550543635827:})
1550543635828:bind_cols(features) %>%
1550543635836:mutate(SampleNumber = sample) %>%
1550543635837:select(SampleNumber, everything())
1550543635837:})
1550543635838:)
1550543635842:}
1550543635844:# Function for loading and transforming one sample at a time to avoid RAM overload
1550543635849:loadAndTransformData <- function(metadata, n_samples, n_tubes, data_dir,
1550543635850:channel_metadata, fn, app_scale=FALSE){
1550543635850:transformed_data <- bind_rows(
1550543635851:lapply(1:n_samples, function(sn) {
1550543635856:current_sample <- list(
1550543635857:lapply(1:n_tubes, function (tn){
1550543635858:filename <- metadata %>% filter(SampleNumber == sn, TubeNumber == tn) %>%
1550543635858:select(FCSFileName) %>% pull()
1550543635860:read_csv(sprintf("%s/%04d.CSV", data_dir, filename), col_types = cols(
1550543635861:`FS Lin` = col_double(),
1550543635862:`SS Log` = col_double(),
1550543635862:`FL1 Log` = col_double(),
1550543635863:`FL2 Log` = col_double(),
1550543635864:`FL3 Log` = col_double(),
1550543635865:`FL4 Log` = col_double(),
1550543635867:`FL5 Log` = col_double()
1550543635868:))
1550543635869:})
1550543635869:)
1550543635870:summarizeData(current_sample, fun = fn, ch_metadata = channel_metadata, scale = app_scale)
1550543635871:})
1550543635872:)
1550543635873:transformed_data$SampleNumber <- 1:n_samples
1550543635873:transformed_data
1550543635874:}
1550543635876:# Load data ---------------------------------------------------------------
1550543635878:r_data_file      <- "data/all_data.RData"
1550543635880:data_dir         <- "data/CSV"
1550543635882:metadata         <- read_csv("data/AMLTraining.csv.zip")
1550543635920:channel_metadata <- read_csv("data/channels_metadata.csv") %>%
1550543635920:gather(Channel, Name, -Tube)
1550543635942:labels <- metadata %>%
1550543635943:select(SampleNumber, Label) %>%
1550543635943:distinct() %>%
1550543635944:mutate(Label = as.numeric(ifelse(Label == "normal", 0,
1550543635944:ifelse(Label == "aml", 1, Label))))
1550543635952:testing_mode       <- FALSE # Turn off for working with the whole dataset
1550543635952:n_samples          <- ifelse(testing_mode, 2, length(unique(metadata$SampleNumber)))
1550543635953:n_tubes_per_sample <- ifelse(testing_mode, 1, length(unique(metadata$TubeNumber)))
1550543635954:# # Load the whole dataset (Warning: RAM overload!)
1550543635954:# if (!file.exists(r_data_file)) {
1550543635954:#   # Read the dataset
1550543635955:#   all_tube_data <- lapply(1:n_samples, function(sn) {
1550543635955:#     lapply(1:n_tubes_per_sample, function (tn){
1550543635955:#       filename <- metadata %>% filter(SampleNumber == sn, TubeNumber == tn) %>%
1550543635955:#         select(FCSFileName) %>% pull()
1550543635956:#       read_csv(sprintf("%s/%04d.CSV", data_dir, filename))
1550543635956:#     })
1550543635957:#   })
1550543635957:#   names(all_tube_data) <- as.character(1:n_samples)
1550543635957:#   save(all_tube_data, file = r_data_file,
1550543635957:#        compress = "bzip2", compression_level = 9)
1550543635958:# } else {
1550543635958:#   load(file = r_data_file, verbose = TRUE)
1550543635958:# }
1550543635959:# names(all_tube_data) <- as.character(1:n_samples)
1550543635959:# # Transform the whole data set
1550543635960:# (final_data <- summarizeData(all_tube_data, channel_metadata, sd))
1550543635960:# (classes    <- labels$Label[final_data$SampleNumber])
1550543641736:# Load and transform each sample ----------------------------------------
1550543641737:if (!file.exists(final_data_r_file)) {
1550543641737:final_data_r_file  <- "data/final_data.RData"
1550543641738:functions <- list("sd" = sd, "mean" = mean, "median" = median)
1550543641738:apply_scale <- FALSE
1550543641738:unscaled_data <- lapply(functions, function(f, meta=metadata, ns=n_samples,
1550543641739:nt=n_tubes_per_sample, d_dir=data_dir,
1550543641739:ch_meta=channel_metadata, sca=apply_scale){
1550543641739:loadAndTransformData(meta, ns, nt, d_dir, ch_meta, f, sca)
1550543641740:})
1550543641740:scaled_data <- lapply(list("prescaled_median" = median),
1550543641740:function(f, meta=metadata, ns=n_samples,
1550543641741:nt=n_tubes_per_sample, d_dir=data_dir,
1550543641741:ch_meta=channel_metadata, sca=TRUE){
1550543641742:loadAndTransformData(meta, ns, nt, d_dir, ch_meta, f, sca)
1550543641742:})
1550543641742:final_data <- c(unscaled_data, scaled_data)
1550543641743:save(final_data, file = final_data_r_file,
1550543641743:compress = "bzip2", compression_level = 9)
1550543641744:} else {
1550543641744:load(file = final_data_r_file, verbose = TRUE)
1550543641745:}
1550626104865:save(final_data, file = final_data_r_file,
1550626104910:compress = "bzip2", compression_level = 9)
1550626114808:# Load and transform each sample ----------------------------------------
1550626114809:# Load and transform each sample ----------------------------------------
1550626114809:final_data_r_file  <- "early_term_project/data/final_data.RData"
1550626115838:if (!file.exists(final_data_r_file)) {
1550626115839:functions     <- list("sd" = sd, "mean" = mean, "median" = median)
1550626115839:apply_scale   <- FALSE
1550626115840:unscaled_data <- lapply(functions,
1550626115840:function(f, meta=metadata, ns=n_samples,
1550626115841:nt=n_tubes_per_sample, d_dir=data_dir,
1550626115841:ch_meta=channel_metadata, sca=apply_scale){
1550626115842:loadAndTransformData(meta, ns, nt, d_dir, ch_meta, f, sca)
1550626115843:})
1550626115843:scaled_data <- lapply(list("prescaled_median" = median),
1550626115844:function(f, meta=metadata, ns=n_samples,
1550626115844:nt=n_tubes_per_sample, d_dir=data_dir,
1550626115845:ch_meta=channel_metadata, sca=TRUE){
1550626115847:loadAndTransformData(meta, ns, nt, d_dir, ch_meta, f, sca)
1550626115864:})
1550626115865:final_data <- c(unscaled_data, scaled_data)
1550626115866:final_data$sd_postscaled <- as.tibble(scale(final_data$sd[,-1])) %>%
1550626115867:mutate(SampleNumber = final_data$sd$SampleNumber) %>%
1550626115867:select(SampleNumber, everything())
1550626115870:final_data$mean_postscaled <- as.tibble(scale(final_data$mean[,-1])) %>%
1550626115872:mutate(SampleNumber = final_data$mean$SampleNumber) %>%
1550626115872:select(SampleNumber, everything())
1550626115874:final_data$median_postscaled <- as.tibble(scale(final_data$median[,-1])) %>%
1550626115880:mutate(SampleNumber = final_data$median$SampleNumber) %>%
1550626115880:select(SampleNumber, everything())
1550626115882:save(final_data, file = final_data_r_file,
1550626115882:compress = "bzip2", compression_level = 9)
1550626115883:} else {
1550626115884:load(file = final_data_r_file, verbose = TRUE)
1550626115885:}
1550626118195:# Exploration  ------------------------------------------------------------
1550626118195:length(final_data)
1550626118816:names(final_data)
1550626169449:final_data$sd_postscaled <- as.tibble(scale(final_data$sd[,-1])) %>%
1550626169450:mutate(SampleNumber = final_data$sd$SampleNumber) %>%
1550626169450:select(SampleNumber, everything())
1550626175075:#!/usr/bin/env Rscript
1550626175076:# ##############################################################################
1550626175076:#  Author:   Shashwat Deepali Nagar
1550626175077:#            Hector Fabio Espitia-Navarro
1550626175077:#            Georgia Institute of Technology
1550626175078:#  Version:  0.1
1550626175078:#  Date:     02/09/2019
1550626175079:# ##############################################################################
1550626175080:# Packages ----------------------------------------------------------------
1550626175080:# Function to install and load packages
1550626175081:installAndLoadPackages <- function(pkg){
1550626175081:new_pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1550626175082:if (length(new_pkg))
1550626175082:install.packages(new_pkg, repos="http://cran.rstudio.com/",
1550626175083:dependencies = TRUE, lib = personal_lib_path)
1550626175083:sapply(pkg, function(x){ require(x, character.only = TRUE, quietly = FALSE) })
1550626175084:# suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = F))
1550626175084:}
1550626175086:personal_lib_path <- Sys.getenv("R_LIBS_USER")
1550626175088:if(!file.exists(personal_lib_path))
1550626175089:dir.create(personal_lib_path)
1550626175090:packages <- c("caret", "tidyverse", "magrittr", "corrplot", "optCluster") # All required packages in here!
1550626175092:installAndLoadPackages(packages)
1550626192370:# Functions for data transformation ---------------------------------------
1550626192370:#' Summarize the whole dataset.
1550626192371:#'
1550626192371:#' \code{summarizeData} summarize the data of all tubes from each sample and
1550626192371:#' returns tibble in which each row is a sample and each column is a value that
1550626192372:#' summarize the values meassured for all cells in a channel, using a function
1550626192372:#' specified by \code{fun}.
1550626192373:#'
1550626192373:#' @param data A list of samples. Each element is a list of tubes. Each tube is
1550626192374:#' a tibble that contains the different cell features measured on each
1550626192374:#' channel. Rows are cells, columns are features.
1550626192374:#' @param ch_metadata Tibble with the name of each measured feature for each
1550626192375:#' channel on each tube.
1550626192375:#' @param fun Function for summarizing each feature (channel)
1550626192375:#'
1550626192376:summarizeData <- function(data, ch_metadata, fun, scale = TRUE) {
1550626192376:n_sam <- length(data)
1550626192376:n_tub <- length(data[[1]])
1550626192377:bind_rows(
1550626192377:lapply(1:n_sam, function(sample, fn=fun){
1550626192377:features <- lapply(1:n_tub, function(tube, sam=sample, f=fn){
1550626192378:if (scale){
1550626192378:summarized_tube <- data[[sam]][[tube]] %>%
1550626192378:scale() %>% as.tibble() %>%
1550626192379:summarise_all(f)
1550626192379:} else {
1550626192380:summarized_tube <- data[[sam]][[tube]] %>%
1550626192380:summarise_all(f)
1550626192381:}
1550626192381:names(summarized_tube) <- ch_metadata %>%
1550626192382:filter(Tube == tube) %>% select(Name) %>% pull()
1550626192383:summarized_tube
1550626192383:})
1550626192384:bind_cols(features) %>%
1550626192384:mutate(SampleNumber = sample) %>%
1550626192385:select(SampleNumber, everything())
1550626192385:})
1550626192386:)
1550626192387:}
1550626192388:# Function for loading and transforming one sample at a time to avoid RAM overload
1550626192388:loadAndTransformData <- function(metadata, n_samples, n_tubes, data_dir,
1550626192389:channel_metadata, fn, app_scale=FALSE){
1550626192389:transformed_data <- bind_rows(
1550626192390:lapply(1:n_samples, function(sn) {
1550626192390:current_sample <- list(
1550626192391:lapply(1:n_tubes, function (tn){
1550626192391:filename <- metadata %>% filter(SampleNumber == sn, TubeNumber == tn) %>%
1550626192392:select(FCSFileName) %>% pull()
1550626192392:read_csv(sprintf("%s/%04d.CSV", data_dir, filename), col_types = cols(
1550626192393:`FS Lin` = col_double(),
1550626192393:`SS Log` = col_double(),
1550626192394:`FL1 Log` = col_double(),
1550626192394:`FL2 Log` = col_double(),
1550626192395:`FL3 Log` = col_double(),
1550626192396:`FL4 Log` = col_double(),
1550626192396:`FL5 Log` = col_double()
1550626192397:))
1550626192397:})
1550626192398:)
1550626192399:summarizeData(current_sample, fun = fn, ch_metadata = channel_metadata, scale = app_scale)
1550626192399:})
1550626192400:)
1550626192401:transformed_data$SampleNumber <- 1:n_samples
1550626192402:transformed_data
1550626192402:}
1550626192404:# Load data ---------------------------------------------------------------
1550626192405:r_data_file      <- "data/all_data.RData"
1550626192405:data_dir         <- "data/CSV"
1550626192406:metadata         <- read_csv("data/AMLTraining.csv.zip")
1550626192409:channel_metadata <- read_csv("data/channels_metadata.csv") %>%
1550626192410:gather(Channel, Name, -Tube)
1550626192463:labels <- metadata %>%
1550626192464:select(SampleNumber, Label) %>%
1550626192464:distinct() %>%
1550626192464:mutate(Label = as.numeric(ifelse(Label == "normal", 0,
1550626192465:ifelse(Label == "aml", 1, Label))))
1550626192467:testing_mode       <- FALSE # Turn off for working with the whole dataset
1550626192467:n_samples          <- ifelse(testing_mode, 2, length(unique(metadata$SampleNumber)))
1550626192468:n_tubes_per_sample <- ifelse(testing_mode, 1, length(unique(metadata$TubeNumber)))
1550626192469:# # Load the whole dataset (Warning: RAM overload!)
1550626192470:# if (!file.exists(r_data_file)) {
1550626192470:#   # Read the dataset
1550626192470:#   all_tube_data <- lapply(1:n_samples, function(sn) {
1550626192471:#     lapply(1:n_tubes_per_sample, function (tn){
1550626192471:#       filename <- metadata %>% filter(SampleNumber == sn, TubeNumber == tn) %>%
1550626192472:#         select(FCSFileName) %>% pull()
1550626192472:#       read_csv(sprintf("%s/%04d.CSV", data_dir, filename))
1550626192473:#     })
1550626192473:#   })
1550626192474:#   names(all_tube_data) <- as.character(1:n_samples)
1550626192474:#   save(all_tube_data, file = r_data_file,
1550626192475:#        compress = "bzip2", compression_level = 9)
1550626192475:# } else {
1550626192475:#   load(file = r_data_file, verbose = TRUE)
1550626192476:# }
1550626192476:# names(all_tube_data) <- as.character(1:n_samples)
1550626192477:# # Transform the whole data set
1550626192477:# (final_data <- summarizeData(all_tube_data, channel_metadata, sd))
1550626192477:# (classes    <- labels$Label[final_data$SampleNumber])
1550626196043:final_data$sd_postscaled <- as.tibble(scale(final_data$sd[,-1])) %>%
1550626196043:mutate(SampleNumber = final_data$sd$SampleNumber) %>%
1550626196043:select(SampleNumber, everything())
1550626216691:final_data$sd_postscaled <- as_tibble(scale(final_data$sd[,-1])) %>%
1550626216691:mutate(SampleNumber = final_data$sd$SampleNumber) %>%
1550626216692:select(SampleNumber, everything())
1550626217712:final_data$mean_postscaled <- as_tibble(scale(final_data$mean[,-1])) %>%
1550626217713:mutate(SampleNumber = final_data$mean$SampleNumber) %>%
1550626217715:select(SampleNumber, everything())
1550626218355:final_data$median_postscaled <- as_tibble(scale(final_data$median[,-1])) %>%
1550626218355:mutate(SampleNumber = final_data$median$SampleNumber) %>%
1550626218356:select(SampleNumber, everything())
1550626219734:save(final_data, file = final_data_r_file,
1550626219735:compress = "bzip2", compression_level = 9)
1550626224807:# Exploration  ------------------------------------------------------------
1550626224808:length(final_data)
1550626225377:names(final_data)
1550626235567:# Attempt to classify -----------------------------------------------------
1550626235568:# (optClust_result <- optCluster(as.data.frame(final_data$mean),nClust = 2, countData = F,
1550626235569:#                                # validation = "internal",
1550626235570:#                                clVerbose = T))
1550626235570:# Attempt to classify -----------------------------------------------------
1550626235571:n_training_samples <- 179
1550626236492:training_samples   <- 1:n_training_samples
1550626237265:training_data      <- final_data$sd[training_samples,-1]
1550626238212:training_labels    <- labels$Label[training_samples]
1550626239427:training_labels
1550626247598:#!/usr/bin/env Rscript
1550626247599:# ##############################################################################
1550626247600:#  Author:   Shashwat Deepali Nagar
1550626247601:#            Hector Fabio Espitia-Navarro
1550626247601:#            Georgia Institute of Technology
1550626247602:#  Version:  0.1
1550626247603:#  Date:     02/09/2019
1550626247603:# ##############################################################################
1550626247604:# Packages ----------------------------------------------------------------
1550626247605:# Function to install and load packages
1550626247605:installAndLoadPackages <- function(pkg){
1550626247606:new_pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1550626247606:if (length(new_pkg))
1550626247607:install.packages(new_pkg, repos="http://cran.rstudio.com/",
1550626247607:dependencies = TRUE, lib = personal_lib_path)
1550626247607:sapply(pkg, function(x){ require(x, character.only = TRUE, quietly = FALSE) })
1550626247609:# suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = F))
1550626247610:}
1550626247611:personal_lib_path <- Sys.getenv("R_LIBS_USER")
1550626247612:if(!file.exists(personal_lib_path))
1550626247612:dir.create(personal_lib_path)
1550626247613:packages <- c("caret", "tidyverse", "magrittr", "corrplot", "optCluster") # All required packages in here!
1550626247614:installAndLoadPackages(packages)
1550626247621:# Functions for data transformation ---------------------------------------
1550626247622:#' Summarize the whole dataset.
1550626247622:#'
1550626247623:#' \code{summarizeData} summarize the data of all tubes from each sample and
1550626247623:#' returns tibble in which each row is a sample and each column is a value that
1550626247624:#' summarize the values meassured for all cells in a channel, using a function
1550626247624:#' specified by \code{fun}.
1550626247625:#'
1550626247625:#' @param data A list of samples. Each element is a list of tubes. Each tube is
1550626247626:#' a tibble that contains the different cell features measured on each
1550626247626:#' channel. Rows are cells, columns are features.
1550626247627:#' @param ch_metadata Tibble with the name of each measured feature for each
1550626247627:#' channel on each tube.
1550626247628:#' @param fun Function for summarizing each feature (channel)
1550626247628:#'
1550626247629:summarizeData <- function(data, ch_metadata, fun, scale = TRUE) {
1550626247629:n_sam <- length(data)
1550626247630:n_tub <- length(data[[1]])
1550626247630:bind_rows(
1550626247631:lapply(1:n_sam, function(sample, fn=fun){
1550626247631:features <- lapply(1:n_tub, function(tube, sam=sample, f=fn){
1550626247632:if (scale){
1550626247632:summarized_tube <- data[[sam]][[tube]] %>%
1550626247633:scale() %>% as.tibble() %>%
1550626247634:summarise_all(f)
1550626247634:} else {
1550626247635:summarized_tube <- data[[sam]][[tube]] %>%
1550626247635:summarise_all(f)
1550626247636:}
1550626247637:names(summarized_tube) <- ch_metadata %>%
1550626247637:filter(Tube == tube) %>% select(Name) %>% pull()
1550626247639:summarized_tube
1550626247641:})
1550626247642:bind_cols(features) %>%
1550626247644:mutate(SampleNumber = sample) %>%
1550626247645:select(SampleNumber, everything())
1550626247646:})
1550626247646:)
1550626247647:}
1550626247648:# Function for loading and transforming one sample at a time to avoid RAM overload
1550626247648:loadAndTransformData <- function(metadata, n_samples, n_tubes, data_dir,
