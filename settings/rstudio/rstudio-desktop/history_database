1572707983733:density.info=c("none"),
1572707984004:margins=c(10,8),
1572707984004:col=cols(length(b)-1),
1572707984005:xlab="Allelic Coverage",
1572707984005:ylab="K-mer Fraction",
1572707984005:breaks=b,
1572707984006:abRow=ylabvec,
1572707984006:labCol=xlabvec)
1572708036543:library(RColorBrewer)
1572708038543:library(gplots)
1572708041344:dev.off()
1572708042676:heatmap.2(t(dm), dendrogram = "none",
1572708042676:Rowv=F, Colv=F, symm=F,
1572708042677:main="Parameter Grid",
1572708042678:key=TRUE, keysize=1,
1572708042678:trace="none" ,
1572708042679:density.info=c("none"),
1572708042679:margins=c(10,8),
1572708042679:col=cols(length(b)-1),
1572708042680:xlab="Allelic Coverage",
1572708042680:ylab="K-mer Fraction",
1572708042681:breaks=b,
1572708042681:abRow=ylabvec,
1572708042682:labCol=xlabvec)
1572708099264:dev.off()
1572708099621:heatmap.2(t(dm), dendrogram = "none",
1572708099622:Rowv=F, Colv=F, symm=F,
1572708099623:main="Parameter Grid",
1572708099623:key=TRUE,
1572708099624:keysize=1,
1572708099627:trace="none" ,
1572708099627:density.info=c("none"),
1572708099628:margins=c(10,8),
1572708099628:# col=cols(length(b)-1),
1572708099629:col=cols(10),
1572708099629:xlab="Allelic Coverage",
1572708099631:ylab="K-mer Fraction",
1572708099632:breaks=b,
1572708099633:abRow=ylabvec,
1572708099633:labCol=xlabvec)
1572708123391:b
1572708174746:library(scales)
1572708218838:pal(cols(length(b)-1))
1572708434745:show_col(cols(length(b)-1))
1572708450481:cols=colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan","#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))
1572708452248:show_col(cols(length(b)-1))
1572708481646:# cols=colorRampPalette(c("#2166ac", "#f7f7f7", "#b2182b"))
1572708481647:cols2=colorRampPalette(rev(c('#d53e4f','#f46d43','#fdae61','#fee08b','#ffffbf','#e6f598','#abdda4','#66c2a5','#3288bd')))
1572708486408:show_col(cols2(length(b)-1))
1572708489060:show_col(cols(length(b)-1))
1572708491384:show_col(cols2(length(b)-1))
1572708494280:show_col(cols(length(b)-1))
1572708546397:cols3=colorRampPalette(rev(c('#d73027','#f46d43','#fdae61','#fee090','#ffffbf','#e0f3f8','#abd9e9','#74add1','#4575b4')))
1572708550834:show_col(cols3(length(b)-1))
1572708666160:# Function to dark a list of colors ---------------------------------------
1572708666161:darkColors <- function(palette, level){
1572708666162:rgbColors <- as.data.frame(t(as.data.frame(lapply(as.data.frame(t(col2rgb(palette))),
1572708666162:function(x) { round(x * level)}))))
1572708666163:unname(sapply(rgbColors, function(x){ rgb(x[1], x[2], x[3], maxColorValue=255) }))
1572708666164:}
1572708733688:darkPal3 <- darkColors(rev(c('#d73027','#f46d43','#fdae61','#fee090','#ffffbf','#e0f3f8','#abd9e9','#74add1','#4575b4')), 30)
1572708742153:darkPal3 <- darkColors(rev(c('#d73027','#f46d43','#fdae61','#fee090','#ffffbf','#e0f3f8','#abd9e9','#74add1','#4575b4')), 30)
1572708747653:darkPal3 <- darkColors(rev(c('#d73027','#f46d43','#fdae61','#fee090','#ffffbf','#e0f3f8','#abd9e9','#74add1','#4575b4')), 0.3)
1572708753632:cols3=colorRampPalette(darkPal3)
1572708756108:show_col(cols3(length(b)-1))
1572708764078:darkPal3 <- darkColors(rev(c('#d73027','#f46d43','#fdae61','#fee090','#ffffbf','#e0f3f8','#abd9e9','#74add1','#4575b4')), 0.1)
1572708765883:cols3=colorRampPalette(darkPal3)
1572708766811:show_col(cols3(length(b)-1))
1572708772374:darkPal3 <- darkColors(rev(c('#d73027','#f46d43','#fdae61','#fee090','#ffffbf','#e0f3f8','#abd9e9','#74add1','#4575b4')), 0.7)
1572708773033:cols3=colorRampPalette(darkPal3)
1572708774135:show_col(cols3(length(b)-1))
1572708787351:heatmap.2(t(dm), dendrogram = "none",
1572708787351:Rowv=F, Colv=F, symm=F,
1572708787352:main="Parameter Grid",
1572708787352:key=TRUE,
1572708787353:keysize=1,
1572708787353:trace="none" ,
1572708787354:density.info=c("none"),
1572708787355:margins=c(10,8),
1572708787355:col=cols3(length(b)-1),
1572708787356:xlab="Allelic Coverage",
1572708787356:ylab="K-mer Fraction",
1572708787357:breaks=b,
1572708787358:abRow=ylabvec,
1572708787359:labCol=xlabvec)
1572708990455:install.packages("viridis")
1572709006431:# install.packages("viridis")
1572709006432:library(gplots)
1572709007890:library(RColorBrewer)
1572709008949:library(viridis)
1572709071026:viridis(25)
1572709086938:show_col(viridis(25))
1572709100894:show_col(rev(viridis(25)))
1572709151394:pal <- rev(viridis(25))
1572709172752:pal <- rev(viridis(25))
1572709175954:dev.off()
1572709176902:heatmap.2(t(dm), dendrogram = "none",
1572709176902:Rowv=F, Colv=F, symm=F,
1572709176903:main="Parameter Grid",
1572709176903:key=TRUE,
1572709176904:keysize=1,
1572709176905:trace="none" ,
1572709176905:density.info=c("none"),
1572709176906:margins=c(10,8),
1572709176906:col=pal,
1572709176907:xlab="Allelic Coverage",
1572709176908:ylab="K-mer Fraction",
1572709176908:breaks=b,
1572709176909:abRow=ylabvec,
1572709176909:labCol=xlabvec)
1572709211136:pal <- rev(magma(25))
1572709221434:pal <- rev(magma(25))
1572709221501:dev.off()
1572709221571:heatmap.2(t(dm), dendrogram = "none",
1572709221572:Rowv=F, Colv=F, symm=F,
1572709221573:main="Parameter Grid",
1572709221573:key=TRUE,
1572709221574:keysize=1,
1572709221574:trace="none" ,
1572709221575:density.info=c("none"),
1572709221575:margins=c(10,8),
1572709221576:col=pal,
1572709221576:xlab="Allelic Coverage",
1572709221577:ylab="K-mer Fraction",
1572709221577:breaks=b,
1572709221578:abRow=ylabvec,
1572709221578:labCol=xlabvec)
1572709316481:pal <- rev(magma(25))
1572709316574:pal <- (viridis(25))
1572709316654:dev.off()
1572709316715:heatmap.2(t(dm), dendrogram = "none",
1572709316715:Rowv=F, Colv=F, symm=F,
1572709316716:main="Parameter Grid",
1572709316717:key=TRUE,
1572709316717:keysize=1,
1572709316718:trace="none" ,
1572709316718:density.info=c("none"),
1572709316719:margins=c(10,8),
1572709316720:col=pal,
1572709316720:xlab="Allelic Coverage",
1572709316721:ylab="K-mer Fraction",
1572709316722:breaks=b,
1572709316722:abRow=ylabvec,
1572709316725:labCol=xlabvec)
1572709356535:pal <- rev(magma(25))
1572709356571:pal <- (magma(25))
1572709356619:dev.off()
1572709356645:heatmap.2(t(dm), dendrogram = "none",
1572709356645:Rowv=F, Colv=F, symm=F,
1572709356646:main="Parameter Grid",
1572709356647:key=TRUE,
1572709356647:keysize=1,
1572709356651:trace="none" ,
1572709356652:density.info=c("none"),
1572709356652:margins=c(10,8),
1572709356654:col=pal,
1572709356656:xlab="Allelic Coverage",
1572709356656:ylab="K-mer Fraction",
1572709356657:breaks=b,
1572709356658:abRow=ylabvec,
1572709356659:labCol=xlabvec)
1572709412370:pal <- rev(magma(25))
1572709412501:pal <- (magma(25))
1572709412585:pal <- (inferno(25))
1572709412655:dev.off()
1572709412696:heatmap.2(t(dm), dendrogram = "none",
1572709412696:Rowv=F, Colv=F, symm=F,
1572709412697:main="Parameter Grid",
1572709412697:key=TRUE,
1572709412698:keysize=1,
1572709412698:trace="none" ,
1572709412699:density.info=c("none"),
1572709412703:margins=c(10,8),
1572709412705:col=pal,
1572709412705:xlab="Allelic Coverage",
1572709412706:ylab="K-mer Fraction",
1572709412707:breaks=b,
1572709412708:abRow=ylabvec,
1572709412708:labCol=xlabvec)
1572709440162:pal <- rev(magma(25))
1572709440217:pal <- (magma(25))
1572709440284:pal <- (inferno(25))
1572709440370:pal <- rev(viridis(25))
1572709440419:dev.off()
1572709440450:heatmap.2(t(dm), dendrogram = "none",
1572709440450:Rowv=F, Colv=F, symm=F,
1572709440451:main="Parameter Grid",
1572709440452:key=TRUE,
1572709440452:keysize=1,
1572709440453:trace="none" ,
1572709440454:density.info=c("none"),
1572709440454:margins=c(10,8),
1572709440455:col=pal,
1572709440456:xlab="Allelic Coverage",
1572709440457:ylab="K-mer Fraction",
1572709440458:breaks=b,
1572709440458:abRow=ylabvec,
1572709440459:labCol=xlabvec)
1572709467529:pal <- rev(magma(25))
1572709467565:pal <- (magma(25))
1572709467596:pal <- (inferno(25))
1572709467696:pal <- (viridis(25)
1572709467696:dev.off()
1572709467697:heatmap.2(t(dm), dendrogram = "none",
1572709467698:Rowv=F, Colv=F, symm=F,
1572709467698:main="Parameter Grid",
1572709467699:key=TRUE,
1572709467699:keysize=1,
1572709467700:trace="none" ,
1572709467701:density.info=c("none"),
1572709467701:margins=c(10,8),
1572709467702:col=pal,
1572709467702:xlab="Allelic Coverage",
1572709467703:ylab="K-mer Fraction",
1572709467705:breaks=b,
1572709467706:abRow=ylabvec,
1572709467706:labCol=xlabvec)
1572709486129:pal <- (viridis(25)
1572709486129:dev.off()
1572709486130:heatmap.2(t(dm), dendrogram = "none",
1572709486130:Rowv=F, Colv=F, symm=F,
1572709486131:main="Parameter Grid",
1572709486132:key=TRUE,
1572709486133:keysize=1,
1572709486133:trace="none" ,
1572709486134:density.info=c("none"),
1572709486135:margins=c(10,8),
1572709486136:col=pal,
1572709486136:xlab="Allelic Coverage",
1572709486137:ylab="K-mer Fraction",
1572709486138:breaks=b,
1572709486139:abRow=ylabvec,
1572709486139:labCol=xlabvec)
1572709504665:pal <- (viridis(25)
1572709505703:heatmap.2(t(dm), dendrogram = "none",
1572709505704:Rowv=F, Colv=F, symm=F,
1572709505704:main="Parameter Grid",
1572709505704:key=TRUE,
1572709505705:keysize=1,
1572709505706:trace="none" ,
1572709505706:density.info=c("none"),
1572709505707:margins=c(10,8),
1572709505708:col=pal,
1572709505709:xlab="Allelic Coverage",
1572709505710:ylab="K-mer Fraction",
1572709505710:breaks=b,
1572709505711:abRow=ylabvec,
1572709505713:labCol=xlabvec)
1572709511175:pal <- (viridis(25))
1572709513189:dev.off()
1572709513751:heatmap.2(t(dm), dendrogram = "none",
1572709513752:Rowv=F, Colv=F, symm=F,
1572709513752:main="Parameter Grid",
1572709513753:key=TRUE,
1572709513754:keysize=1,
1572709513754:trace="none" ,
1572709513755:density.info=c("none"),
1572709513755:margins=c(10,8),
1572709513756:col=pal,
1572709513756:xlab="Allelic Coverage",
1572709513757:ylab="K-mer Fraction",
1572709513758:breaks=b,
1572709513759:abRow=ylabvec,
1572709513761:labCol=xlabvec)
1572709670422:pal <- (magma(25), begin = 0.5); show_col(pal)
1572709679154:show_col(pal)
1572709689231:pal <- (magma(25), begin = 0);
1572709690032:show_col(pal)
1572709701052:pal <- (magma(25, begin = 0)
1572709708600:pal <- magma(25, begin = 0)
1572709710767:show_col(pal)
1572709720020:pal <- magma(25, begin = 0,5)
1572709720934:show_col(pal)
1572709727748:pal <- magma(25, begin = 0.5)
1572709728640:show_col(pal)
1572709748034:pal <- magma(25, begin = 0, end = 0.8)
1572709748835:show_col(pal)
1572709756083:pal <- magma(25, begin = 0, end = 0.6)
1572709756507:show_col(pal)
1572709763498:pal <- magma(25, begin = 0, end = 0.9)
1572709763897:show_col(pal)
1572709771819:pal <- magma(25, begin = 0, end = 0.9)
1572709771896:show_col(pal)
1572709771941:dev.off()
1572709771971:heatmap.2(t(dm), dendrogram = "none",
1572709771972:Rowv=F, Colv=F, symm=F,
1572709771972:main="Parameter Grid",
1572709771973:key=TRUE,
1572709771974:keysize=1,
1572709771975:trace="none" ,
1572709771976:density.info=c("none"),
1572709771976:margins=c(10,8),
1572709771977:col=pal,
1572709771978:xlab="Allelic Coverage",
1572709771978:ylab="K-mer Fraction",
1572709771979:breaks=b,
1572709771979:abRow=ylabvec,
1572709771980:labCol=xlabvec)
1572709811164:pal <- magma(25, begin = 0, end = 0.95)
1572709811220:show_col(pal)
1572709811276:dev.off()
1572709811316:heatmap.2(t(dm), dendrogram = "none",
1572709811317:Rowv=F, Colv=F, symm=F,
1572709811318:main="Parameter Grid",
1572709811318:key=TRUE,
1572709811319:keysize=1,
1572709811321:trace="none" ,
1572709811322:density.info=c("none"),
1572709811323:margins=c(10,8),
1572709811323:col=pal,
1572709811324:xlab="Allelic Coverage",
1572709811324:ylab="K-mer Fraction",
1572709811326:breaks=b,
1572709811327:abRow=ylabvec,
1572709811327:labCol=xlabvec)
1572709842700:pal <- magma(25, begin = 0.5, end = 0.95)
1572709843344:show_col(pal)
1572709851115:pal <- magma(25, begin = 0.2, end = 0.95)
1572709852560:show_col(pal)
1572709855772:dev.off()
1572709856540:heatmap.2(t(dm), dendrogram = "none",
1572709856541:Rowv=F, Colv=F, symm=F,
1572709856541:main="Parameter Grid",
1572709856542:key=TRUE,
1572709856543:keysize=1,
1572709856544:trace="none" ,
1572709856544:density.info=c("none"),
1572709856545:margins=c(10,8),
1572709856546:col=pal,
1572709856546:xlab="Allelic Coverage",
1572709856547:ylab="K-mer Fraction",
1572709856548:breaks=b,
1572709856548:abRow=ylabvec,
1572709856549:labCol=xlabvec)
1572709878027:pal <- magma(25, begin = 0, end = 0.95)
1572709880955:pal <- magma(25, begin = 0, end = 0.95)
1572709883011:show_col(pal)
1572709884417:dev.off()
1572709886097:heatmap.2(t(dm), dendrogram = "none",
1572709886097:Rowv=F, Colv=F, symm=F,
1572709886098:main="Parameter Grid",
1572709886098:key=TRUE,
1572709886099:keysize=1,
1572709886099:trace="none" ,
1572709886100:density.info=c("none"),
1572709886100:margins=c(10,8),
1572709886101:col=pal,
1572709886101:xlab="Allelic Coverage",
1572709886102:ylab="K-mer Fraction",
1572709886102:breaks=b,
1572709886103:abRow=ylabvec,
1572709886104:labCol=xlabvec)
1572709932177:pal <- viridis(25, begin = 0, end = 0.95)
1572709932719:show_col(pal)
1572709939990:heatmap.2(t(dm), dendrogram = "none",
1572709939991:Rowv=F, Colv=F, symm=F,
1572709939991:main="Parameter Grid",
1572709939991:key=TRUE,
1572709939992:keysize=1,
1572709939992:trace="none" ,
1572709939993:density.info=c("none"),
1572709939993:margins=c(10,8),
1572709939993:col=pal,
1572709939994:xlab="Allelic Coverage",
1572709939994:ylab="K-mer Fraction",
1572709939995:breaks=b,
1572709939995:abRow=ylabvec,
1572709939995:labCol=xlabvec)
1572710038943:pal <- inferno(25, begin = 0, end = 0.95)
1572710038996:show_col(pal)
1572710039082:dev.off()
1572710039176:heatmap.2(t(dm), dendrogram = "none",
1572710039200:Rowv=F, Colv=F, symm=F,
1572710039201:main="Parameter Grid",
1572710039202:key=TRUE,
1572710039202:keysize=1,
1572710039203:trace="none" ,
1572710039204:density.info=c("none"),
1572710039205:margins=c(10,8),
1572710039205:col=pal,
1572710039206:xlab="Allelic Coverage",
1572710039207:ylab="K-mer Fraction",
1572710039207:breaks=b,
1572710039208:abRow=ylabvec,
1572710039208:labCol=xlabvec)
1572710233059:pals <- c('magma'   = magma(25, begin = 0, end = 0.95),
1572710233059:'inferno' = inferno(25, begin = 0, end = 0.95))
1572710240228:warnings()
1572710244690:pals
1572710271850:pals <- list('magma'   = magma(25, begin = 0, end = 0.95),
1572710271850:'inferno' = inferno(25, begin = 0, end = 0.95))
1572710273758:pals
1572710407740:palName <- 'magma'
1572710407741:show_col(pals[palName])
1572710407795:pdf(paste0("param_grid.", palName, ".pdf"), useDingbats = F, width = 6, height = 7)
1572710408086:heatmap.2(t(dm), dendrogram = "none",
1572710408087:Rowv=F, Colv=F, symm=F,
1572710408088:main="Parameter Grid",
1572710408088:key=TRUE,
1572710408089:keysize=1,
1572710408090:trace="none" ,
1572710408090:density.info=c("none"),
1572710408091:margins=c(10,8),
1572710408092:col=pal,
1572710408092:xlab="Allelic Coverage",
1572710408093:ylab="K-mer Fraction",
1572710408094:breaks=b,
1572710408095:abRow=ylabvec,
1572710408096:labCol=xlabvec)
1572710419513:dev.off()
1572710464751:palName <- 'magma'
1572710464753:show_col(pals[palName])
1572710464817:pdf(paste0("param_grid.", palName, ".pdf"), useDingbats = F, width = 6, height = 6)
1572710464834:heatmap.2(t(dm), dendrogram = "none",
1572710464834:Rowv=F, Colv=F, symm=F,
1572710464835:main="Parameter Grid",
1572710464835:key=TRUE,
1572710464836:keysize=1,
1572710464837:trace="none" ,
1572710464853:density.info=c("none"),
1572710464854:margins=c(10,8),
1572710464854:col=pal,
1572710464855:xlab="Allelic Coverage",
1572710464855:ylab="K-mer Fraction",
1572710464856:breaks=b,
1572710464856:abRow=ylabvec,
1572710464860:labCol=xlabvec)
1572710477168:dev.off()
1572710535015:palName <- 'inferno'
1572710535017:show_col(pals[palName])
1572710535063:pdf(paste0("param_grid.", palName, ".pdf"), useDingbats = F, width = 6, height = 6)
1572710535065:heatmap.2(t(dm), dendrogram = "none",
1572710535065:Rowv=F, Colv=F, symm=F,
1572710535066:main="Parameter Grid",
1572710535067:key=TRUE,
1572710535067:keysize=1,
1572710535068:trace="none" ,
1572710535069:density.info=c("none"),
1572710535097:margins=c(10,8),
1572710535098:col=pal,
1572710535099:xlab="Allelic Coverage",
1572710535106:ylab="K-mer Fraction",
1572710535108:breaks=b,
1572710535109:abRow=ylabvec,
1572710535109:labCol=xlabvec)
1572710547103:dev.off()
1572711161233:pals <- list('magma'   = magma(25, begin = 0, end = 0.95),
1572711161365:'inferno' = inferno(25, begin = 0, end = 0.95))
1572711161652:palName <- 'inferno'
1572711162813:pal <- pals[palName]
1572711167471:show_col(pal)
1572711177662:dev.off()
1572711180689:palName <- 'inferno'
1572711181150:pal <- pals[palName]
1572711181644:show_col(pal)
1572711208524:palName <- 'inferno'
1572711208526:pal <- pals[palName]
1572711208527:show_col(pal)
1572711208564:pdf(paste0("param_grid.", palName, ".pdf"), useDingbats = F, width = 6, height = 6)
1572711208572:heatmap.2(t(dm), dendrogram = "none",
1572711208574:Rowv=F, Colv=F, symm=F,
1572711208574:main="Parameter Grid",
1572711208575:key=TRUE,
1572711208576:keysize=1,
1572711208576:trace="none" ,
1572711208577:density.info=c("none"),
1572711208578:margins=c(10,8),
1572711208579:col=pal,
1572711208579:xlab="Allelic Coverage",
1572711208581:ylab="K-mer Fraction",
1572711208582:breaks=b,
1572711208582:abRow=ylabvec,
1572711208583:labCol=xlabvec)
1572711218530:dev.off()
1572711223134:palName <- 'magma'
1572711223135:pal <- pals[palName]
1572711223137:show_col(pal)
1572711223168:pdf(paste0("param_grid.", palName, ".pdf"), useDingbats = F, width = 6, height = 6)
1572711223175:heatmap.2(t(dm), dendrogram = "none",
1572711223175:Rowv=F, Colv=F, symm=F,
1572711223178:main="Parameter Grid",
1572711223180:key=TRUE,
1572711223181:keysize=1,
1572711223181:trace="none" ,
1572711223182:density.info=c("none"),
1572711223183:margins=c(10,8),
1572711223183:col=pal,
1572711223184:xlab="Allelic Coverage",
1572711223185:ylab="K-mer Fraction",
1572711223186:breaks=b,
1572711223186:abRow=ylabvec,
1572711223187:labCol=xlabvec)
1572711235517:dev.off()
1572711272835:palName <- 'magma'
1572711272837:pal <- pals[palName]
1572711272838:show_col(pal)
1572711272879:pdf(paste0("param_grid.", palName, ".pdf"), useDingbats = F, width = 6, height = 6)
1572711272888:heatmap.2(t(dm), dendrogram = "none",
1572711272892:Rowv=F, Colv=F, symm=F,
1572711272893:main="Parameter Grid",
1572711272895:key=TRUE,
1572711272896:keysize=1,
1572711272896:trace="none" ,
1572711272898:density.info=c("none"),
1572711272899:margins=c(10,8),
1572711272907:col=pal,
1572711272908:xlab="Allelic Coverage",
1572711272928:ylab="K-mer Fraction",
1572711272929:breaks=b,
1572711272930:abRow=ylabvec,
1572711272931:labCol=xlabvec)
1572711284084:dev.off()
1572711286356:palName <- 'inferno'
1572711286358:pal <- pals[palName]
1572711286360:show_col(pal)
1572711286385:pdf(paste0("param_grid.", palName, ".pdf"), useDingbats = F, width = 6, height = 6)
1572711286387:heatmap.2(t(dm), dendrogram = "none",
1572711286388:Rowv=F, Colv=F, symm=F,
1572711286389:main="Parameter Grid",
1572711286389:key=TRUE,
1572711286390:keysize=1,
1572711286390:trace="none" ,
1572711286391:density.info=c("none"),
1572711286392:margins=c(10,8),
1572711286393:col=pal,
1572711286394:xlab="Allelic Coverage",
1572711286394:ylab="K-mer Fraction",
1572711286395:breaks=b,
1572711286395:abRow=ylabvec,
1572711286396:labCol=xlabvec)
1572711297166:dev.off()
1572711326467:# install.packages("viridis")
1572711326468:library(gplots)
1572711326600:library(RColorBrewer)
1572711326669:library(viridis)
1572711329078:library(scales)
1572711329094:# library(tidyverse)
1572711329096:f = 'data/update_gridsearch_fyeah.txt'
1572711329097:df <- read.table(f, sep='\t', skip=1)
1572711345651:dm <- matrix(df[,60], nrow=1000, ncol=100, byrow=TRUE) # "P.STX1.MCC"
1572711345653:b = seq(from=0.75, to=1, by=0.01)
1572711345655:# Function to dark a list of colors ---------------------------------------
1572711345655:darkColors <- function(palette, level){
1572711345656:rgbColors <- as.data.frame(t(as.data.frame(lapply(as.data.frame(t(col2rgb(palette))),
1572711345656:function(x) { round(x * level)}))))
1572711345657:unname(sapply(rgbColors, function(x){ rgb(x[1], x[2], x[3], maxColorValue=255) }))
1572711345657:}
1572711345659:cols=colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan","#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))
1572711345662:# cols=colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan","#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))
1572711345662:# cols=colorRampPalette(c("#2166ac", "#f7f7f7", "#b2182b"))
1572711345663:cols2=colorRampPalette(rev(c('#d53e4f','#f46d43','#fdae61','#fee08b','#ffffbf','#e6f598','#abdda4','#66c2a5','#3288bd')))
1572711345664:darkPal3 <- darkColors(rev(c('#d73027','#f46d43','#fdae61','#fee090','#ffffbf','#e0f3f8','#abd9e9','#74add1','#4575b4')), 0.7)
1572711345667:cols3=colorRampPalette(darkPal3)
1572711345669:show_col(cols(length(b)-1))
1572711345763:show_col(cols2(length(b)-1))
1572711345841:show_col(cols3(length(b)-1))
1572711345850:show_col(rev(viridis(25)))
1572711345920:xlabvec <- c(rep(NA, 1000))
1572711345922:xlabvec[c(1, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000)] <- c(1, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100)
1572711345923:ylabvec <- c(rep(NA, 100))
1572711345923:ylabvec[c(1, 10, 20, 30, 40, 50, 60, 70, 80, 90)] <- c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)
1572711345924:pals <- list('magma'   = magma(25, begin = 0, end = 0.95),
1572711345925:'inferno' = inferno(25, begin = 0, end = 0.95))
1572711356786:palName <- 'inferno'
1572711356787:pal <- pals[palName]
1572711356788:show_col(pal)
1572711356829:pdf(paste0("param_grid.", palName, ".pdf"), useDingbats = F, width = 6, height = 6)
1572711357151:heatmap.2(t(dm), dendrogram = "none",
1572711357152:Rowv=F, Colv=F, symm=F,
1572711357152:main="Parameter Grid",
1572711357154:key=TRUE,
1572711357154:keysize=1,
1572711357155:trace="none" ,
1572711357155:density.info=c("none"),
1572711357156:margins=c(10,8),
1572711357157:col=pal,
1572711357161:xlab="Allelic Coverage",
1572711357161:ylab="K-mer Fraction",
1572711357162:breaks=b,
1572711357162:abRow=ylabvec,
1572711357163:labCol=xlabvec)
1572711368146:dev.off()
1572711387154:palName <- 'magma'
1572711387155:pal <- pals[palName]
1572711387156:show_col(pal)
1572711387205:pdf(paste0("param_grid.", palName, ".pdf"), useDingbats = F, width = 6, height = 6)
1572711387207:heatmap.2(t(dm), dendrogram = "none",
1572711387208:Rowv=F, Colv=F, symm=F,
1572711387209:main="Parameter Grid",
1572711387210:key=TRUE,
1572711387211:keysize=1,
1572711387211:trace="none" ,
1572711387212:density.info=c("none"),
1572711387213:margins=c(10,8),
1572711387213:col=pal,
1572711387214:xlab="Allelic Coverage",
1572711387215:ylab="K-mer Fraction",
1572711387215:breaks=b,
1572711387216:abRow=ylabvec,
1572711387216:labCol=xlabvec)
1572711397290:dev.off()
1572711415653:pals[[palName]]
1572711421029:palName <- 'magma'
1572711421029:pal <- pals[[palName]]
1572711421030:show_col(pal)
1572711421102:pdf(paste0("param_grid.", palName, ".pdf"), useDingbats = F, width = 6, height = 6)
1572711421109:heatmap.2(t(dm), dendrogram = "none",
1572711421110:Rowv=F, Colv=F, symm=F,
1572711421111:main="Parameter Grid",
1572711421117:key=TRUE,
1572711421118:keysize=1,
1572711421119:trace="none" ,
1572711421120:density.info=c("none"),
1572711421121:margins=c(10,8),
1572711421128:col=pal,
1572711421128:xlab="Allelic Coverage",
1572711421131:ylab="K-mer Fraction",
1572711421134:breaks=b,
1572711421134:abRow=ylabvec,
1572711421156:labCol=xlabvec)
1572711433368:dev.off()
1572711435625:palName <- 'inferno'
1572711435626:pal <- pals[[palName]]
1572711435627:show_col(pal)
1572711435677:pdf(paste0("param_grid.", palName, ".pdf"), useDingbats = F, width = 6, height = 6)
1572711435690:heatmap.2(t(dm), dendrogram = "none",
1572711435690:Rowv=F, Colv=F, symm=F,
1572711435693:main="Parameter Grid",
1572711435694:key=TRUE,
1572711435695:keysize=1,
1572711435696:trace="none" ,
1572711435696:density.info=c("none"),
1572711435696:margins=c(10,8),
1572711435697:col=pal,
1572711435697:xlab="Allelic Coverage",
1572711435698:ylab="K-mer Fraction",
1572711435698:breaks=b,
1572711435699:abRow=ylabvec,
1572711435699:labCol=xlabvec)
1572711445416:dev.off()
1572914075384:library(tidyverse)
1572914495569:dataDir    <- "results/test_01"
1572914749519:#!/usr/bin/env Rscript
1572914749520:# ##############################################################################
1572914749520:#  Author:   Hector Fabio Espitia-Navarro
1572914749521:#            Georgia Institute of Technology
1572914749521:#  Version:  1.0
1572914749522:#  Date:     11/04/2019
1572914749522:# ##############################################################################
1572914749523:# Install required packages -----------------------------------------------
1572914749524:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1572914749525:if(!file.exists(personal.lib.path))
1572914749525:dir.create(personal.lib.path)
1572914749526:printMessage <- function(message, verbose){
1572914749527:if(verbose)
1572914749527:cat(message)
1572914749528:}
1572914749529:# crayon::bold("Hola")
1572914749529:installAndLoadPackages <- function(pkg, verbose){
1572914749530:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1572914749530:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1572914749531:printMessage("Done!\n", verbose)
1572914749531:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1572914749532:if (length(new.pkg)) {
1572914749532:printMessage("Installing new packages... ", verbose)
1572914749532:install.packages(new.pkg, dependencies = TRUE,
1572914749533:repos="http://cran.rstudio.com/",
1572914749534:lib = personal.lib.path)
1572914749534:printMessage("Done!\n", verbose)
1572914749535:}
1572914749535:printMessage("Loading required packages... ", verbose)
1572914749536:sapply(pkg, function(x){
1572914749536:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1572914749537:})
1572914749537:printMessage("Done!\n", verbose)
1572914749538:}
1572914749538:# packages <- c("ggpubr", "RColorBrewer", "gridExtra",
1572914749539:# "extrafont", "grid", "tidyverse", "xlsx")
1572914749539:packages <- c("tidyverse")
1572914749539:installAndLoadPackages(c("argparser", "stringr"), verbose = FALSE)
1572914756411:# Command line arguments processing ---------------------------------------
1572914756411:# Get script name
1572914756412:initial.options <- commandArgs(trailingOnly = FALSE)
1572914756413:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1572914756414:# Process command line arguments
1572914756414:# Create a parser
1572914756414:p <- arg_parser("This script is intended to assess STing classifier results.",
1572914756415:name = script.name)
1572914756491:# Add Positional arguments (required)
1572914756491:p <- add_argument(p, "pred_file", help = "STing predictions file. BIOM table: accn, read counts, taxonomy")
1572914756493:p <- add_argument(p, "ref_file", help = "Reference file. Tab separated file BIOM like: accn, read counts")
1572914756494:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1572914756495:default = "summary_results")
1572914756497:# Initialization of variables ---------------------------------------------
1572914756497:dataDir    <- "results/test_01"
1572914756498:predFile   <- str_glue("{dataDir}/classifier.v0.24.2.nifh.read_counts.tsv")
1572914756500:refFile    <- str_glue("data/samples/read_counts.no_zeros.tsv")
1572914756502:prefix     <- str_glue("{dataDir}/test_01.summary_results")
1572914756504:# Parse command line arguments --------------------------------------------
1572914756504:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1572914756505:argv <- list()
1572914756508:if(command.line) {
1572914756509:argv <- parse_args(p)
1572914756509:} else {
1572914756510:argv <- parse_args(p, list(predFile,
1572914756510:refFile,
1572914756511:"--prefix", prefix))
1572914756511:}
1572914756517:# Get argument values from the command line
1572914756517:predFile   <- argv$pred_file
1572914756518:refFile    <- argv$ref_file
1572914756519:prefix     <- argv$prefix
1572914756520:# Function to check if file exists ----------------------------------------
1572914756520:CheckFileExists <- function(fileList) {
1572914756521:non.exist.files <- !file.exists(fileList)
1572914756521:if(any(non.exist.files)) {
1572914756522:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1572914756522:}
1572914756523:}
1572914756524:# Check for input files ---------------------------------------------------
1572914756524:filesToCheck <- c(predFile, refFile)
1572914756525:errorMessage  <- CheckFileExists(filesToCheck)
1572914756526:if(!is.null(errorMessage)){
1572914756526:stop(errorMessage)
1572914756527:} else {
1572914756527:# Code core - Begin -------------------------------------------------------
1572914756537:installAndLoadPackages(packages, verbose = TRUE)
1572914756538:options(stringsAsFactors = F)
1572914756538:# FUNCTIONS ---------------------------------------------------------------
1572914756539:# Function to assess predictions ------------------------------------------
1572914756540:# LOAD DATA ---------------------------------------------------------------
1572914756541:(obsData  <- read_tsv(refFile))
1572914756541:(predData <- read_tsv(predFile))
1572914756543:# # Write results to files --------------------------------------------------
1572914756543:# # write tables to an Excel workbook
1572914756544:# outFilename <- str_glue("{prefix}.summary.xlsx")
1572914756544:# write.xlsx(as.data.frame(totalSummary),
1572914756545:#            sheetName = str_glue("Summary"),
1572914756545:#            row.names = FALSE,
1572914756545:#            append = FALSE, file = outFilename)
1572914756546:# write.xlsx(as.data.frame(summaryPerSample),
1572914756546:#            sheetName = str_glue("SummaryPerSample"),
1572914756547:#            row.names = FALSE, append = TRUE, file = outFilename)
1572914756547:# if (nrow(failedAlleles) > 0){
1572914756548:#   write.xlsx(as.data.frame(failedAlleles),
1572914756548:#              sheetName = str_glue("FailedAlleles"),
1572914756569:#              row.names = FALSE, append = TRUE, file = outFilename)
1572914756570:# }
1572914756570:# cat(str_glue("\n\nResults file saved at \"{outFilename}\"\n\n"))
1572914756571:# Code core - End ---------------------------------------------------------
1572914756571:}
1572914775383:# LOAD DATA ---------------------------------------------------------------
1572914775383:(obsData  <- read_tsv(refFile))
1572914778095:(predData <- read_tsv(predFile))
1572915043564:# LOAD DATA ---------------------------------------------------------------
1572915043564:(obsData  <- read_tsv(refFile))
1572915045858:(predData <- read_tsv(predFile))
1572915049344:# LOAD DATA ---------------------------------------------------------------
1572915049345:(obsData  <- read_tsv(refFile))
1572915054966:(predData <- read_tsv(predFile))
1572915159508:names(obsData)[-1]
1572915164405:samples <- names(obsData)[-1]
1572915275244:obsData <- summarise_all(sum)
1572915386827:obsData <- summarise_at(samples, sum)
1572915418947:samples
1572915423974:samples
1572915439711:obsData <- summarise_at(samples, sum)
1572915452933:# LOAD DATA ---------------------------------------------------------------
1572915452933:(obsData  <- read_tsv(refFile))
1572915460168:samples
1572915512807:obsData %>% summarise_at(samples, sum)
1572915607379:predData %>% summarise_at(samples, sum)
1572916006028:0.114025085518814 *
1572916006029:6715 /4
1572916043464:0.114025085518814 *
1572916043466:137840 / 4
1572916152713:0.114025085518814 * 137840
1572916204667:0.0114025085518814 * 137840
1572916248377:0.0114025085518814 * 17230
1572916253064:0.00114025085518814 * 17230
1572917326080:e
1572917328492:# LOAD DATA ---------------------------------------------------------------
1572917328493:(obsData  <- read_tsv(refFile))
1572917339304:(predData <- read_tsv(predFile))
1572917350453:samples <- names(obsData)[-1]
1572917351700:samples
1572917356210:obsData %>% summarise_at(samples, sum)
1572917358551:predData %>% summarise_at(samples, sum)
1572917410079:# LOAD DATA ---------------------------------------------------------------
1572917410080:(inObsData  <- read_tsv(refFile))
1572917632023:obsData <- inObsData %>%
1572917632023:mutate_at(vars(-accn), function(x){x*2})
1572917634897:obsData
1572920332771:# FUNCTIONS ---------------------------------------------------------------
1572920332803:# Function to assess predictions ------------------------------------------
1572920332803:137840 / 4
1572920346931:# FUNCTIONS ---------------------------------------------------------------
1572920346931:# Function to assess predictions ------------------------------------------
1572920346932:137840 / 4 / 2
1572920352665:obsData %>% summarise_at(samples, sum)
1572920363414:# LOAD DATA ---------------------------------------------------------------
1572920363416:(inObsData  <- read_tsv(refFile))
1572920363711:(predData <- read_tsv(predFile))
1572920369485:obsData <- inObsData
1572920371721:obsData %>% summarise_at(samples, sum)
1572920423051:# FUNCTIONS ---------------------------------------------------------------
1572920423051:# Function to assess predictions ------------------------------------------
1572920423051:137840 / 4
1572920432544:predData %>% summarise_at(samples, sum)
1572920479432:66379 - 34460
1572925738939:# LOAD DATA ---------------------------------------------------------------
1572925738978:(inObsData  <- read_tsv(refFile))
1572925740317:(predData <- read_tsv(predFile))
1572925742587:samples <- names(inObsData)[-1]
1572925746959:obsData <- inObsData
1572925753159:# LOAD DATA ---------------------------------------------------------------
1572925753159:(obsData  <- read_tsv(refFile))
1572925753565:(predData <- read_tsv(predFile))
1572925754645:samples <- names(inObsData)[-1]
1572925760860:obsData %>% summarise_at(samples, sum)
1572925761694:predData %>% summarise_at(samples, sum)
1572925797314:#!/usr/bin/env Rscript
1572925797316:# ##############################################################################
1572925797316:#  Author:   Hector Fabio Espitia-Navarro
1572925797317:#            Georgia Institute of Technology
1572925797318:#  Version:  1.0
1572925797319:#  Date:     11/04/2019
1572925797319:# ##############################################################################
1572925797320:# Install required packages -----------------------------------------------
1572925797320:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1572925797321:if(!file.exists(personal.lib.path))
1572925797322:dir.create(personal.lib.path)
1572925797323:printMessage <- function(message, verbose){
1572925797324:if(verbose)
1572925797324:cat(message)
1572925797325:}
1572925797326:# crayon::bold("Hola")
1572925797327:installAndLoadPackages <- function(pkg, verbose){
1572925797327:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1572925797328:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1572925797328:printMessage("Done!\n", verbose)
1572925797329:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1572925797329:if (length(new.pkg)) {
1572925797329:printMessage("Installing new packages... ", verbose)
1572925797330:install.packages(new.pkg, dependencies = TRUE,
1572925797330:repos="http://cran.rstudio.com/",
1572925797331:lib = personal.lib.path)
1572925797331:printMessage("Done!\n", verbose)
1572925797331:}
1572925797332:printMessage("Loading required packages... ", verbose)
1572925797332:sapply(pkg, function(x){
1572925797333:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1572925797333:})
1572925797334:printMessage("Done!\n", verbose)
1572925797334:}
1572925797336:# packages <- c("ggpubr", "RColorBrewer", "gridExtra",
1572925797336:# "extrafont", "grid", "tidyverse", "xlsx")
1572925797337:packages <- c("tidyverse")
1572925797338:installAndLoadPackages(c("argparser", "stringr"), verbose = FALSE)
1572925797506:# Command line arguments processing ---------------------------------------
1572925797506:# Get script name
1572925797506:initial.options <- commandArgs(trailingOnly = FALSE)
1572925797507:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1572925797508:# Process command line arguments
1572925797508:# Create a parser
1572925797508:p <- arg_parser("This script is intended to assess STing classifier results.",
1572925797508:name = script.name)
1572925797517:# Add Positional arguments (required)
1572925797518:p <- add_argument(p, "pred_file", help = "STing predictions file. BIOM table: accn, read counts, taxonomy")
1572925797518:p <- add_argument(p, "ref_file", help = "Reference file. Tab separated file BIOM like: accn, read counts")
1572925797519:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1572925797520:default = "summary_results")
1572925797521:# Initialization of variables ---------------------------------------------
1572925797521:dataDir    <- "results/test_01"
1572925797521:predFile   <- str_glue("{dataDir}/classifier.v0.24.2.nifh.read_counts.tsv")
1572925797522:refFile    <- str_glue("data/samples/read_counts.no_zeros.tsv")
1572925797523:prefix     <- str_glue("{dataDir}/test_01.summary_results")
1572925797524:# Parse command line arguments --------------------------------------------
1572925797524:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1572925797525:argv <- list()
1572925797525:if(command.line) {
1572925797525:argv <- parse_args(p)
1572925797526:} else {
1572925797526:argv <- parse_args(p, list(predFile,
1572925797526:refFile,
1572925797527:"--prefix", prefix))
1572925797527:}
1572925797659:# Get argument values from the command line
1572925797660:predFile   <- argv$pred_file
1572925797660:refFile    <- argv$ref_file
1572925797661:prefix     <- argv$prefix
1572925797662:# Function to check if file exists ----------------------------------------
1572925797662:CheckFileExists <- function(fileList) {
1572925797662:non.exist.files <- !file.exists(fileList)
1572925797663:if(any(non.exist.files)) {
1572925797663:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1572925797663:}
1572925797664:}
1572925797664:# Check for input files ---------------------------------------------------
1572925797665:filesToCheck <- c(predFile, refFile)
1572925797665:errorMessage  <- CheckFileExists(filesToCheck)
1572925797666:if(!is.null(errorMessage)){
1572925797666:stop(errorMessage)
1572925797667:} else {
1572925797667:# Code core - Begin -------------------------------------------------------
1572925797667:installAndLoadPackages(packages, verbose = TRUE)
1572925797668:options(stringsAsFactors = F)
1572925797668:# FUNCTIONS ---------------------------------------------------------------
1572925797669:# Function to assess predictions ------------------------------------------
1572925797669:# LOAD DATA ---------------------------------------------------------------
1572925797670:(obsData  <- read_tsv(refFile))
1572925797670:(predData <- read_tsv(predFile))
1572925797671:samples <- names(inObsData)[-1]
1572925797672:obsData %>% summarise_at(samples, sum)
1572925797672:predData %>% summarise_at(samples, sum)
1572925797673:# # Write results to files --------------------------------------------------
1572925797673:# # write tables to an Excel workbook
1572925797674:# outFilename <- str_glue("{prefix}.summary.xlsx")
1572925797674:# write.xlsx(as.data.frame(totalSummary),
1572925797674:#            sheetName = str_glue("Summary"),
1572925797675:#            row.names = FALSE,
1572925797675:#            append = FALSE, file = outFilename)
1572925797676:# write.xlsx(as.data.frame(summaryPerSample),
1572925797676:#            sheetName = str_glue("SummaryPerSample"),
1572925797676:#            row.names = FALSE, append = TRUE, file = outFilename)
1572925797677:# if (nrow(failedAlleles) > 0){
1572925797677:#   write.xlsx(as.data.frame(failedAlleles),
1572925797678:#              sheetName = str_glue("FailedAlleles"),
1572925797678:#              row.names = FALSE, append = TRUE, file = outFilename)
1572925797679:# }
1572925797679:# cat(str_glue("\n\nResults file saved at \"{outFilename}\"\n\n"))
1572925797680:# Code core - End ---------------------------------------------------------
1572925797680:}
1572926070488:# Initialization of variables ---------------------------------------------
1572926070488:dataDir    <- "results/test_01"
1572926070789:predFile   <- str_glue("{dataDir}/classifier.v0.24.2.nifh.read_counts.tsv")
1572926071083:refFile    <- str_glue("data/samples/read_counts.no_zeros.tsv")
1572926071478:prefix     <- str_glue("{dataDir}/test_01.summary_results")
1572926076773:# Get argument values from the command line
1572926076774:predFile   <- argv$pred_file
1572926076994:refFile    <- argv$ref_file
1572926077248:prefix     <- argv$prefix
1572926077485:# Function to check if file exists ----------------------------------------
1572926077485:CheckFileExists <- function(fileList) {
1572926077486:non.exist.files <- !file.exists(fileList)
1572926077486:if(any(non.exist.files)) {
1572926077487:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1572926077488:}
1572926077488:}
1572926077743:# Check for input files ---------------------------------------------------
1572926077744:filesToCheck <- c(predFile, refFile)
1572926078199:errorMessage  <- CheckFileExists(filesToCheck)
1572926082480:# Code core - Begin -------------------------------------------------------
1572926082480:installAndLoadPackages(packages, verbose = TRUE)
1572926083941:options(stringsAsFactors = F)
1572926085138:# LOAD DATA ---------------------------------------------------------------
1572926085138:(obsData  <- read_tsv(refFile))
1572926086626:(predData <- read_tsv(predFile))
1572926104355:samples <- names(inObsData)[-1]
1572926105272:obsData %>% summarise_at(samples, sum)
1572926106535:predData %>% summarise_at(samples, sum)
1572926117893:obsData %>% summarise_at(samples, sum)
1572926118811:predData %>% summarise_at(samples, sum)
1572934608500:refFile    <- str_glue("data/samples/from_sting_nifh_db/read_counts.no_zeros.tsv")
1572934616260:# LOAD DATA ---------------------------------------------------------------
1572934616260:(obsData  <- read_tsv(refFile))
1572934619933:(predData <- read_tsv(predFile))
1572934623890:samples <- names(inObsData)[-1]
1572934624727:obsData %>% summarise_at(samples, sum)
1572934625962:predData %>% summarise_at(samples, sum)
1572935436929:# Initialization of variables ---------------------------------------------
1572935436930:dataDir    <- "results/test_02"
1572935437227:predFile   <- str_glue("{dataDir}/classifier.v0.24.2.nifh.read_counts.tsv")
1572935437792:refFile    <- str_glue("data/samples/from_sting_nifh_db/read_counts.no_zeros.tsv")
1572935438254:prefix     <- str_glue("{dataDir}/test_01.summary_results")
1572935442433:# LOAD DATA ---------------------------------------------------------------
1572935442433:(obsData  <- read_tsv(refFile))
1572935443569:(predData <- read_tsv(predFile))
1572935504152:# LOAD DATA ---------------------------------------------------------------
1572935504153:(obsData  <- read_tsv(refFile))
1572935505505:(predData <- read_tsv(predFile))
1572935535709:#!/usr/bin/env Rscript
1572935535709:# ##############################################################################
1572935535710:#  Author:   Hector Fabio Espitia-Navarro
1572935535710:#            Georgia Institute of Technology
1572935535711:#  Version:  1.0
1572935535712:#  Date:     11/04/2019
1572935535713:# ##############################################################################
1572935535714:# Install required packages -----------------------------------------------
1572935535715:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1572935535716:if(!file.exists(personal.lib.path))
1572935535716:dir.create(personal.lib.path)
1572935535717:printMessage <- function(message, verbose){
1572935535718:if(verbose)
1572935535718:cat(message)
1572935535719:}
1572935535720:# crayon::bold("Hola")
1572935535720:installAndLoadPackages <- function(pkg, verbose){
1572935535721:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1572935535721:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1572935535722:printMessage("Done!\n", verbose)
1572935535722:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1572935535723:if (length(new.pkg)) {
1572935535723:printMessage("Installing new packages... ", verbose)
1572935535724:install.packages(new.pkg, dependencies = TRUE,
1572935535724:repos="http://cran.rstudio.com/",
1572935535725:lib = personal.lib.path)
1572935535726:printMessage("Done!\n", verbose)
1572935535726:}
1572935535727:printMessage("Loading required packages... ", verbose)
1572935535727:sapply(pkg, function(x){
1572935535728:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1572935535729:})
1572935535730:printMessage("Done!\n", verbose)
1572935535731:}
1572935535732:# packages <- c("ggpubr", "RColorBrewer", "gridExtra",
1572935535732:# "extrafont", "grid", "tidyverse", "xlsx")
1572935535733:packages <- c("tidyverse")
1572935535734:installAndLoadPackages(c("argparser", "stringr"), verbose = FALSE)
1572935535809:# Command line arguments processing ---------------------------------------
1572935535810:# Get script name
1572935535810:initial.options <- commandArgs(trailingOnly = FALSE)
1572935535811:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1572935535812:# Process command line arguments
1572935535813:# Create a parser
1572935535814:p <- arg_parser("This script is intended to assess STing classifier results.",
1572935535814:name = script.name)
1572935535818:# Add Positional arguments (required)
1572935535819:p <- add_argument(p, "pred_file", help = "STing predictions file. BIOM table: accn, read counts, taxonomy")
1572935535823:p <- add_argument(p, "ref_file", help = "Reference file. Tab separated file BIOM like: accn, read counts")
1572935535829:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1572935535831:default = "summary_results")
1572935535835:# Initialization of variables ---------------------------------------------
1572935535836:dataDir    <- "results/test_02"
1572935535839:predFile   <- str_glue("{dataDir}/classifier.v0.24.2.nifh.read_counts.tsv")
1572935535842:refFile    <- str_glue("data/samples/from_sting_nifh_db/read_counts.no_zeros.tsv")
1572935535843:prefix     <- str_glue("{dataDir}/test_01.summary_results")
1572935535844:# Parse command line arguments --------------------------------------------
1572935535845:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1572935535846:argv <- list()
1572935535846:if(command.line) {
1572935535847:argv <- parse_args(p)
1572935535847:} else {
1572935535848:argv <- parse_args(p, list(predFile,
1572935535848:refFile,
1572935535851:"--prefix", prefix))
1572935535851:}
1572935535853:# Get argument values from the command line
1572935535854:predFile   <- argv$pred_file
1572935535855:refFile    <- argv$ref_file
1572935535856:prefix     <- argv$prefix
1572935535858:# Function to check if file exists ----------------------------------------
1572935535858:CheckFileExists <- function(fileList) {
1572935535859:non.exist.files <- !file.exists(fileList)
1572935535859:if(any(non.exist.files)) {
1572935535860:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1572935535861:}
1572935535861:}
1572935535862:# Check for input files ---------------------------------------------------
1572935535863:filesToCheck <- c(predFile, refFile)
1572935535864:errorMessage  <- CheckFileExists(filesToCheck)
1572935535865:if(!is.null(errorMessage)){
1572935535865:stop(errorMessage)
1572935535866:} else {
1572935535866:# Code core - Begin -------------------------------------------------------
1572935535867:installAndLoadPackages(packages, verbose = TRUE)
1572935535867:options(stringsAsFactors = F)
1572935535868:# FUNCTIONS ---------------------------------------------------------------
1572935535869:# Function to assess predictions ------------------------------------------
1572935535870:# LOAD DATA ---------------------------------------------------------------
1572935535870:(obsData  <- read_tsv(refFile))
1572935535871:(predData <- read_tsv(predFile))
1572935535872:samples <- names(inObsData)[-1]
1572935535873:obsData %>% summarise_at(samples, sum)
1572935535874:predData %>% summarise_at(samples, sum)
1572935535875:# # Write results to files --------------------------------------------------
1572935535875:# # write tables to an Excel workbook
1572935535876:# outFilename <- str_glue("{prefix}.summary.xlsx")
1572935535876:# write.xlsx(as.data.frame(totalSummary),
1572935535877:#            sheetName = str_glue("Summary"),
1572935535878:#            row.names = FALSE,
1572935535878:#            append = FALSE, file = outFilename)
1572935535879:# write.xlsx(as.data.frame(summaryPerSample),
1572935535880:#            sheetName = str_glue("SummaryPerSample"),
1572935535880:#            row.names = FALSE, append = TRUE, file = outFilename)
1572935535881:# if (nrow(failedAlleles) > 0){
1572935535881:#   write.xlsx(as.data.frame(failedAlleles),
1572935535882:#              sheetName = str_glue("FailedAlleles"),
1572935535883:#              row.names = FALSE, append = TRUE, file = outFilename)
1572935535883:# }
1572935535884:# cat(str_glue("\n\nResults file saved at \"{outFilename}\"\n\n"))
1572935535885:# Code core - End ---------------------------------------------------------
1572935535885:}
1572935550547:#!/usr/bin/env Rscript
1572935550548:# ##############################################################################
1572935550549:#  Author:   Hector Fabio Espitia-Navarro
1572935550549:#            Georgia Institute of Technology
1572935550550:#  Version:  1.0
1572935550550:#  Date:     11/04/2019
1572935550551:# ##############################################################################
1572935550551:# Install required packages -----------------------------------------------
1572935550552:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1572935550553:if(!file.exists(personal.lib.path))
1572935550553:dir.create(personal.lib.path)
1572935550554:printMessage <- function(message, verbose){
1572935550554:if(verbose)
1572935550555:cat(message)
1572935550555:}
1572935550556:# crayon::bold("Hola")
1572935550557:installAndLoadPackages <- function(pkg, verbose){
1572935550557:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1572935550563:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1572935550564:printMessage("Done!\n", verbose)
1572935550564:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1572935550565:if (length(new.pkg)) {
1572935550565:printMessage("Installing new packages... ", verbose)
1572935550566:install.packages(new.pkg, dependencies = TRUE,
1572935550566:repos="http://cran.rstudio.com/",
1572935550567:lib = personal.lib.path)
1572935550567:printMessage("Done!\n", verbose)
1572935550568:}
1572935550568:printMessage("Loading required packages... ", verbose)
1572935550569:sapply(pkg, function(x){
1572935550570:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1572935550570:})
1572935550571:printMessage("Done!\n", verbose)
1572935550571:}
1572935550572:# packages <- c("ggpubr", "RColorBrewer", "gridExtra",
1572935550573:# "extrafont", "grid", "tidyverse", "xlsx")
1572935550573:packages <- c("tidyverse")
1572935550574:installAndLoadPackages(c("argparser", "stringr"), verbose = FALSE)
1572935550616:# Command line arguments processing ---------------------------------------
1572935550617:# Get script name
1572935550618:initial.options <- commandArgs(trailingOnly = FALSE)
1572935550618:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1572935550619:# Process command line arguments
1572935550620:# Create a parser
1572935550620:p <- arg_parser("This script is intended to assess STing classifier results.",
1572935550621:name = script.name)
1572935550623:# Add Positional arguments (required)
1572935550624:p <- add_argument(p, "pred_file", help = "STing predictions file. BIOM table: accn, read counts, taxonomy")
1572935550626:p <- add_argument(p, "ref_file", help = "Reference file. Tab separated file BIOM like: accn, read counts")
1572935550627:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1572935550628:default = "summary_results")
1572935550630:# Initialization of variables ---------------------------------------------
1572935550631:dataDir    <- "results/test_02"
1572935550631:predFile   <- str_glue("{dataDir}/classifier.v0.24.2.nifh.read_counts.tsv")
1572935550632:refFile    <- str_glue("data/samples/from_sting_nifh_db/read_counts.no_zeros.tsv")
1572935550634:prefix     <- str_glue("{dataDir}/test_01.summary_results")
1572935550635:# Parse command line arguments --------------------------------------------
1572935550636:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1572935550637:argv <- list()
1572935550638:if(command.line) {
1572935550638:argv <- parse_args(p)
1572935550639:} else {
1572935550639:argv <- parse_args(p, list(predFile,
1572935550640:refFile,
1572935550640:"--prefix", prefix))
1572935550641:}
1572935550643:# Get argument values from the command line
1572935550643:predFile   <- argv$pred_file
1572935550644:refFile    <- argv$ref_file
1572935550645:prefix     <- argv$prefix
1572935550646:# Function to check if file exists ----------------------------------------
1572935550647:CheckFileExists <- function(fileList) {
1572935550647:non.exist.files <- !file.exists(fileList)
1572935550648:if(any(non.exist.files)) {
1572935550648:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1572935550649:}
1572935550649:}
1572935550651:# Check for input files ---------------------------------------------------
1572935550651:filesToCheck <- c(predFile, refFile)
1572935550652:errorMessage  <- CheckFileExists(filesToCheck)
1572935550653:if(!is.null(errorMessage)){
1572935550654:stop(errorMessage)
1572935550654:} else {
1572935550655:# Code core - Begin -------------------------------------------------------
1572935550655:installAndLoadPackages(packages, verbose = TRUE)
1572935550656:options(stringsAsFactors = F)
1572935550656:# FUNCTIONS ---------------------------------------------------------------
1572935550657:# Function to assess predictions ------------------------------------------
1572935550658:# LOAD DATA ---------------------------------------------------------------
1572935550658:(obsData  <- read_tsv(refFile))
1572935550659:(predData <- read_tsv(predFile))
1572935550660:samples <- names(inObsData)[-1]
1572935550661:(obsData %>% summarise_at(samples, sum))
1572935550662:(predData %>% summarise_at(samples, sum))
1572935550663:# # Write results to files --------------------------------------------------
1572935550663:# # write tables to an Excel workbook
1572935550664:# outFilename <- str_glue("{prefix}.summary.xlsx")
1572935550664:# write.xlsx(as.data.frame(totalSummary),
1572935550665:#            sheetName = str_glue("Summary"),
1572935550665:#            row.names = FALSE,
1572935550666:#            append = FALSE, file = outFilename)
1572935550666:# write.xlsx(as.data.frame(summaryPerSample),
1572935550667:#            sheetName = str_glue("SummaryPerSample"),
1572935550667:#            row.names = FALSE, append = TRUE, file = outFilename)
1572935550668:# if (nrow(failedAlleles) > 0){
1572935550668:#   write.xlsx(as.data.frame(failedAlleles),
1572935550669:#              sheetName = str_glue("FailedAlleles"),
1572935550669:#              row.names = FALSE, append = TRUE, file = outFilename)
1572935550681:# }
1572935550682:# cat(str_glue("\n\nResults file saved at \"{outFilename}\"\n\n"))
1572935550682:# Code core - End ---------------------------------------------------------
1572935550683:}
1572935556084:(obsData %>% summarise_at(samples, sum))
1572935556990:(predData %>% summarise_at(samples, sum))
1572965258681:resTable <- tibble
1572965263448:resTable <- tibble()
1572965272659:#!/usr/bin/env Rscript
1572965272660:# ##############################################################################
1572965272660:#  Author:   Hector Fabio Espitia-Navarro
1572965272660:#            Georgia Institute of Technology
1572965272661:#  Version:  1.0
1572965272661:#  Date:     11/04/2019
1572965272661:# ##############################################################################
1572965272662:# Install required packages -----------------------------------------------
1572965272663:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1572965272663:if(!file.exists(personal.lib.path))
1572965272664:dir.create(personal.lib.path)
1572965272664:printMessage <- function(message, verbose){
1572965272665:if(verbose)
1572965272665:cat(message)
1572965272665:}
1572965272666:# crayon::bold("Hola")
1572965272667:installAndLoadPackages <- function(pkg, verbose){
1572965272667:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1572965272667:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1572965272668:printMessage("Done!\n", verbose)
1572965272668:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1572965272668:if (length(new.pkg)) {
1572965272669:printMessage("Installing new packages... ", verbose)
1572965272669:install.packages(new.pkg, dependencies = TRUE,
1572965272670:repos="http://cran.rstudio.com/",
1572965272670:lib = personal.lib.path)
1572965272670:printMessage("Done!\n", verbose)
1572965272671:}
1572965272671:printMessage("Loading required packages... ", verbose)
1572965272671:sapply(pkg, function(x){
1572965272672:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1572965272672:})
1572965272673:printMessage("Done!\n", verbose)
1572965272673:}
1572965272674:# packages <- c("ggpubr", "RColorBrewer", "gridExtra",
1572965272674:# "extrafont", "grid", "tidyverse", "xlsx")
1572965272675:packages <- c("tidyverse")
1572965272675:installAndLoadPackages(c("argparser", "stringr"), verbose = FALSE)
1572965281292:# Command line arguments processing ---------------------------------------
1572965281293:# Get script name
1572965281293:initial.options <- commandArgs(trailingOnly = FALSE)
1572965281294:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1572965281295:# Process command line arguments
1572965281296:# Create a parser
1572965281296:p <- arg_parser("This script is intended to assess STing classifier results.",
1572965281297:name = script.name)
1572965281383:# Add Positional arguments (required)
1572965281383:p <- add_argument(p, "pred_file", help = "STing predictions file. BIOM table: accn, read counts, taxonomy")
1572965281385:p <- add_argument(p, "ref_file", help = "Reference file. Tab separated file BIOM like: accn, read counts")
1572965281386:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1572965281387:default = "summary_results")
1572965281389:# Initialization of variables ---------------------------------------------
1572965281389:dataDir    <- "results/test_02"
1572965281390:predFile   <- str_glue("{dataDir}/classifier.v0.24.2.nifh.read_counts.tsv")
1572965281511:refFile    <- str_glue("data/samples/from_sting_nifh_db/read_counts.no_zeros.tsv")
1572965281513:prefix     <- str_glue("{dataDir}/test_01.summary_results")
1572965281515:# Parse command line arguments --------------------------------------------
1572965281515:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1572965281516:argv <- list()
1572965281517:if(command.line) {
1572965281517:argv <- parse_args(p)
1572965281518:} else {
1572965281518:argv <- parse_args(p, list(predFile,
1572965281519:refFile,
1572965281519:"--prefix", prefix))
1572965281520:}
1572965281525:# Get argument values from the command line
1572965281525:predFile   <- argv$pred_file
1572965281526:refFile    <- argv$ref_file
1572965281527:prefix     <- argv$prefix
1572965281528:# Function to check if file exists ----------------------------------------
1572965281528:CheckFileExists <- function(fileList) {
1572965281529:non.exist.files <- !file.exists(fileList)
1572965281529:if(any(non.exist.files)) {
1572965281530:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1572965281530:}
1572965281531:}
1572965281532:# Check for input files ---------------------------------------------------
1572965281532:filesToCheck <- c(predFile, refFile)
1572965281533:errorMessage  <- CheckFileExists(filesToCheck)
1572965281534:if(!is.null(errorMessage)){
1572965281535:stop(errorMessage)
1572965281535:} else {
1572965281536:# Code core - Begin -------------------------------------------------------
1572965281536:installAndLoadPackages(packages, verbose = TRUE)
1572965281537:options(stringsAsFactors = F)
1572965281537:# FUNCTIONS ---------------------------------------------------------------
1572965281538:# Function to assess predictions ------------------------------------------
1572965281539:# LOAD DATA ---------------------------------------------------------------
1572965281539:(obsData  <- read_tsv(refFile))
1572965281540:(predData <- read_tsv(predFile))
1572965281541:samples <- names(inObsData)[-1]
1572965281542:(obsData %>% summarise_at(samples, sum))
1572965281542:(predData %>% summarise_at(samples, sum))
1572965281543:# resTable <- tibble()
1572965281544:# # Write results to files --------------------------------------------------
1572965281545:# # write tables to an Excel workbook
1572965281546:# outFilename <- str_glue("{prefix}.summary.xlsx")
1572965281546:# write.xlsx(as.data.frame(totalSummary),
1572965281547:#            sheetName = str_glue("Summary"),
1572965281547:#            row.names = FALSE,
1572965281548:#            append = FALSE, file = outFilename)
1572965281549:# write.xlsx(as.data.frame(summaryPerSample),
1572965281549:#            sheetName = str_glue("SummaryPerSample"),
1572965281549:#            row.names = FALSE, append = TRUE, file = outFilename)
1572965281550:# if (nrow(failedAlleles) > 0){
1572965281550:#   write.xlsx(as.data.frame(failedAlleles),
1572965281551:#              sheetName = str_glue("FailedAlleles"),
1572965281551:#              row.names = FALSE, append = TRUE, file = outFilename)
1572965281551:# }
1572965281552:# cat(str_glue("\n\nResults file saved at \"{outFilename}\"\n\n"))
1572965281552:# Code core - End ---------------------------------------------------------
1572965281552:}
1573522196822:# MLST comparative test
1573522196951:# Install an load packages ------------------------------------------------
1573522196952:installAndLoadPackages <- function(pkg){
1573522196952:cat("Please wait a moment! Checking for required packages... ")
1573522196953:cat("Done!\n")
1573522196953:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1573522196953:if (length(new.pkg)) {
1573522196954:cat("Installing new packages... ")
1573522196954:install.packages(new.pkg, dependencies = TRUE,
1573522196955:repos="http://cran.rstudio.com/")
1573522196955:cat("Done!\n")
1573522196955:}
1573522196956:cat("Loading packages... \n")
1573522196956:sapply(pkg, require, character.only = TRUE)
1573522196957:cat("Done!\n")
1573522196957:}
1573522196958:requiredPackages <- c("cowplot", "gridExtra", "extrafont", "grid", "readxl",
1573522196959:"tidyverse", "magrittr", "ggsci", "RColorBrewer", "scales")
1573522196961:installAndLoadPackages(requiredPackages)
1573522226284:# Format bar annotation text ----------------------------------------------
1573522226285:getAnnotationText <- function(value){
1573522226285:lapply(value, function(x) {
1573522226286:result = ""
1573522226286:if (x != 1) {
1573522226287:# result = paste0("bolditalic('",format(round(x, 1), nsmall = 1),"x')")
1573522226287:result = paste0("italic('",format(round(x, 1), nsmall = 1),"x')")
1573522226288:}
1573522226288:result
1573522226289:})
1573522226289:}
1573522226291:# Sources -----------------------------------------------------------------
1573522226292:source(file = "scripts/ggplot_theme.R")
1573522226352:# Loading Data ------------------------------------------------------------
1573522226352:inFile      <- "data/stxing_detection_performance.xlsx"
1573522226353:excel_sheets(inFile)
1573522226465:(compData    <- read_excel(inFile, sheet = "performance"))
1573522227934:# General configuration ---------------------------------------------------
1573522227935:saveFigures <- TRUE
1573522227935:# customPalette <- c("#0a4f75","#91bbe4","#d7e4f5")
1573522227936:# customPalette <- (brewer.pal(n = 7, name = "Paired"))
1573522227936:# generalPalette <- c('#edc374','#e8702a','#d7e4f5','#91bbe4','#0a4f75')
1573522227936:generalPalette <- c("Other"   = '#d7e4f5',
1573522227937:"Other2"  = '#FFD592',
1573522227937:"STing - Before optimization" = '#91bbe4',
1573522227937:"PCR"     = '#FFB238',
1573522227938:"STing - After optimization"   = '#0a4f75'
1573522227938:)
1573522227939:show_col(generalPalette)
1573522228153:annotTextColors       <- c(axisColor, "#ffffff", axisColor)
1573522228154:baseVariantFontFamily <- baseFontFamily
1573522228155:# Preparing data ----------------------------------------------------------
1573522228156:(dataToPlot <- compData %>%
1573522228156:filter(Metric == "MCC",
1573522228156:MethodType == "STing - Before optimization")
1573522228157:)
1573522228758:(methodLevels <- unique(dataToPlot$Method))
1573522228847:(methodTypeLevels <- rev(unique(dataToPlot$MethodType)))
1573522228848:customPalette <- generalPalette[methodTypeLevels]
1573522228849:show_col(customPalette)
1573522228912:(genes <- (unique(compData$Gene)))
1573522228914:(dataToPlot <- dataToPlot %>%
1573522228915:mutate(MethodType = factor(MethodType, methodTypeLevels),
1573522228915:Gene = factor(Gene, genes),
1573522228916:ColorGroup = if_else(MethodType == "STing - After optimization", "light", "dark")) %>%
1573522228917:mutate(ColorGroup = factor(ColorGroup))
1573522228917:)
1573522229314:vecFontFace <- if_else(str_detect(levels(dataToPlot$Method), "STing"), "bold", "plain")
1573522229419:# Before improvement ------------------------------------------------
1573522229420:(beforePlot <- ggplot(dataToPlot, aes(x = Gene, y = Performance,
1573522229420:fill = MethodType, color = ColorGroup)) +
1573522229546:geom_bar(color = axisColor, size = barBorderSize,
1573522229546:# width=barWidth,
1573522229547:stat = "identity",
1573522229547:position = position_dodge(width=0.9)
1573522229547:# , show.legend = F
1573522229548:) +
1573522229548:geom_text(stat = "identity",
1573522229548:position = position_dodge(width = 0.9),
1573522229549:hjust = 1,
1573522229549:# vjust = 0.5,
1573522229549:# size = barAnnotTextSize,
1573522229550:show.legend = FALSE,
1573522229550:# parse = TRUE,
1573522229550:aes(x = Gene, y = Performance * 0.98,
1573522229551:# aes(x = Gene, y = Performance,# * 0.93,
1573522229552:label = format(round(Performance, 2), nsmall = 2)#,
1573522229552:# , color = (ColorGroup)
1573522229552:# , fontface = 'bold'
1573522229553:, family = boldFontFamily
1573522229553:# , family = baseFontFamily
1573522229554:)) +
1573522229554:# facet_grid(~ Type) +
1573522229555:scale_y_continuous(expand = c(0, 0), limits = c(0,1), position = "right") +
1573522229555:scale_x_discrete(expand = c(0.2, 0)) +
1573522229555:scale_color_manual(values = annotTextColors) +
1573522229556:scale_fill_manual(values = customPalette,
1573522229557:# labels = methodTypeLevels,
1573522229557:# guide=guide_legend(reverse=T),
1573522229558:name = "Method"
1573522229558:) +
1573522229559:labs(x = "Virulence gene",
1573522229559:y = "MCC\n") +
1573522229560:publicationTheme() +
1573522229560:barPlotCustoms +
1573522229560:theme (axis.text.y = element_text(family = baseFontFamily, face = 'italic'),
1573522229561:axis.line.y  = element_blank(),
1573522229561:axis.ticks.y = element_blank()
1573522229562:# , legend.direction = 'vertical',
1573522229562:, legend.position = "none"
1573522229563:)
1573522229563:# theme (axis.text.y = element_text(family = baseFontFamily, face = vecFontFace))
1573522229564:+ coord_flip()
1573522229564:# axis.title.y = element_text(margin=margin(1, 10, 1, 1, "mm")),) +
1573522229564:)
1573522339081:ggsave("mcc_sting_vs_pcr.before_improvement.pdf", beforePlot, width = 6, height = 4
1573522339081:,useDingbats = F
1573522339081:)
1573522557966:ggsave("mcc_sting_vs_pcr.before_improvement.pdf", beforePlot, width = 5, height = 4
1573522557966:,useDingbats = F
1573522557967:)
1573522566353:ggsave("mcc_sting_vs_pcr.before_improvement.pdf", beforePlot, width = 5, height = 3.5
1573522566353:,useDingbats = F
1573522566354:)
1573522605043:(genes <- rev(unique(compData$Gene)))
1573522607638:(dataToPlot <- dataToPlot %>%
1573522607638:mutate(MethodType = factor(MethodType, methodTypeLevels),
1573522607639:Gene = factor(Gene, genes),
1573522607639:ColorGroup = if_else(MethodType == "STing - After optimization", "light", "dark")) %>%
1573522607640:mutate(ColorGroup = factor(ColorGroup))
1573522607641:)
1573522608109:vecFontFace <- if_else(str_detect(levels(dataToPlot$Method), "STing"), "bold", "plain")
1573522608634:# Before improvement ------------------------------------------------
1573522608635:(beforePlot <- ggplot(dataToPlot, aes(x = Gene, y = Performance,
1573522608636:fill = MethodType, color = ColorGroup)) +
1573522608636:geom_bar(color = axisColor, size = barBorderSize,
1573522608637:# width=barWidth,
1573522608637:stat = "identity",
1573522608638:position = position_dodge(width=0.9)
1573522608638:# , show.legend = F
1573522608638:) +
1573522608639:geom_text(stat = "identity",
1573522608639:position = position_dodge(width = 0.9),
1573522608641:hjust = 1,
1573522608641:# vjust = 0.5,
1573522608642:# size = barAnnotTextSize,
1573522608643:show.legend = FALSE,
1573522608643:# parse = TRUE,
1573522608644:aes(x = Gene, y = Performance * 0.98,
1573522608645:# aes(x = Gene, y = Performance,# * 0.93,
1573522608645:label = format(round(Performance, 2), nsmall = 2)#,
1573522608646:# , color = (ColorGroup)
1573522608647:# , fontface = 'bold'
1573522608647:, family = boldFontFamily
1573522608648:# , family = baseFontFamily
1573522608648:)) +
1573522608649:# facet_grid(~ Type) +
1573522608650:scale_y_continuous(expand = c(0, 0), limits = c(0,1), position = "right") +
1573522608650:scale_x_discrete(expand = c(0.2, 0)) +
1573522608651:scale_color_manual(values = annotTextColors) +
1573522608651:scale_fill_manual(values = customPalette,
1573522608652:# labels = methodTypeLevels,
1573522608653:# guide=guide_legend(reverse=T),
1573522608653:name = "Method"
1573522608654:) +
1573522608655:labs(x = "Virulence gene",
1573522608655:y = "MCC\n") +
1573522608656:publicationTheme() +
1573522608657:barPlotCustoms +
1573522608657:theme (axis.text.y = element_text(family = baseFontFamily, face = 'italic'),
1573522608658:axis.line.y  = element_blank(),
1573522608658:axis.ticks.y = element_blank()
1573522608658:# , legend.direction = 'vertical',
1573522608659:, legend.position = "none"
1573522608659:)
1573522608660:# theme (axis.text.y = element_text(family = baseFontFamily, face = vecFontFace))
1573522608660:+ coord_flip()
1573522608661:# axis.title.y = element_text(margin=margin(1, 10, 1, 1, "mm")),) +
1573522608661:)
1573522611790:if(saveFigures){
1573522611791:ggsave("mcc_sting_vs_pcr.before_improvement.pdf", beforePlot, width = 5, height = 3.5
1573522611791:,useDingbats = F
1573522611792:)
1573522611792:# embed_fonts("manuscript_material/fig_01.pdf")
1573522611793:}
1573522634148:(dataToPlot <- compData %>%
1573522634148:filter(Metric == "MCC") %>%
1573522634149:mutate(MethodType = factor(MethodType, methodTypeLevels),
1573522634150:Gene = factor(Gene, genes))
1573522634150:)
1573522637144:(dataToPlot %<>%
1573522637145:mutate(ColorGroup = if_else(MethodType == "STing - After optimization", "light", "dark")) %>%
1573522637145:mutate(ColorGroup = factor(ColorGroup))
1573522637146:)
1573522678169:(dataToPlot <- compData %>%
1573522678169:filter(Metric == "MCC", MethodType != "STing - Before optimization") %>%
1573522678170:mutate(MethodType = factor(MethodType, methodTypeLevels),
1573522678171:Gene = factor(Gene, genes))
1573522678171:)
1573522680919:(dataToPlot %<>%
1573522680920:mutate(ColorGroup = if_else(MethodType == "STing - After optimization", "light", "dark")) %>%
1573522680921:mutate(ColorGroup = factor(ColorGroup))
1573522680921:)
1573522682471:(predPlot <- ggplot(dataToPlot, aes(x = Gene, y = Performance,
1573522682472:fill = MethodType, color = ColorGroup)) +
1573522682472:geom_bar(color = axisColor, size = barBorderSize,
1573522682473:# width=barWidth,
1573522682473:stat = "identity",
1573522682474:position = position_dodge(width=0.9)
1573522682475:# , show.legend = F
1573522682476:) +
1573522682476:geom_text(stat = "identity",
1573522682477:position = position_dodge(width = 0.9),
1573522682478:hjust = 1,
1573522682479:# vjust = 0.5,
1573522682479:# size = barAnnotTextSize,
1573522682482:show.legend = FALSE,
1573522682491:# parse = TRUE,
1573522682492:aes(x = Gene, y = Performance * 0.98,
1573522682493:# aes(x = Gene, y = Performance,# * 0.93,
1573522682493:label = format(round(Performance, 2), nsmall = 2)#,
1573522682494:# , color = (ColorGroup)
1573522682495:# , fontface = 'bold'
1573522682495:, family = boldFontFamily
1573522682496:# , family = baseFontFamily
1573522682497:)) +
1573522682497:# facet_grid(~ Type) +
1573522682498:scale_y_continuous(expand = c(0, 0), limits = c(0,1), position = "right") +
1573522682499:scale_x_discrete(expand = c(0.2, 0)) +
1573522682500:scale_color_manual(values = annotTextColors) +
1573522682500:scale_fill_manual(values = customPalette,
1573522682501:# labels = methodTypeLevels,
1573522682502:# guide=guide_legend(reverse=T),
1573522682503:name = "Method"
1573522682516:) +
1573522682516:labs(x = "Virulence gene",
1573522682517:y = "MCC\n") +
1573522682518:publicationTheme() +
1573522682519:barPlotCustoms +
1573522682519:theme (axis.text.y = element_text(family = baseFontFamily, face = 'italic'),
1573522682520:axis.line.y  = element_blank(),
1573522682521:axis.ticks.y = element_blank()
1573522682522:# , legend.direction = 'vertical',
1573522682530:, legend.position = "none"
1573522682535:)
1573522682536:# theme (axis.text.y = element_text(family = baseFontFamily, face = vecFontFace))
1573522682537:+ coord_flip()
1573522682538:# axis.title.y = element_text(margin=margin(1, 10, 1, 1, "mm")),) +
1573522682539:)
1573522702329:dataToPlot
1573522708523:dataToPlot
1573522725859:compData
1573522731491:# MLST comparative test
1573522731493:# Install an load packages ------------------------------------------------
1573522731493:installAndLoadPackages <- function(pkg){
1573522731493:cat("Please wait a moment! Checking for required packages... ")
1573522731494:cat("Done!\n")
1573522731494:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1573522731494:if (length(new.pkg)) {
1573522731495:cat("Installing new packages... ")
1573522731495:install.packages(new.pkg, dependencies = TRUE,
1573522731496:repos="http://cran.rstudio.com/")
1573522731496:cat("Done!\n")
1573522731496:}
1573522731497:cat("Loading packages... \n")
1573522731497:sapply(pkg, require, character.only = TRUE)
1573522731497:cat("Done!\n")
1573522731498:}
1573522731499:requiredPackages <- c("cowplot", "gridExtra", "extrafont", "grid", "readxl",
1573522731499:"tidyverse", "magrittr", "ggsci", "RColorBrewer", "scales")
1573522731500:installAndLoadPackages(requiredPackages)
1573522731507:# Format bar annotation text ----------------------------------------------
1573522731507:getAnnotationText <- function(value){
1573522731507:lapply(value, function(x) {
1573522731508:result = ""
1573522731508:if (x != 1) {
1573522731509:# result = paste0("bolditalic('",format(round(x, 1), nsmall = 1),"x')")
1573522731509:result = paste0("italic('",format(round(x, 1), nsmall = 1),"x')")
1573522731510:}
1573522731510:result
1573522731511:})
1573522731511:}
1573522731512:# Sources -----------------------------------------------------------------
1573522731512:source(file = "scripts/ggplot_theme.R")
1573522731556:# Loading Data ------------------------------------------------------------
1573522731556:inFile      <- "data/stxing_detection_performance.xlsx"
1573522731557:excel_sheets(inFile)
1573522731565:(compData    <- read_excel(inFile, sheet = "performance"))
1573522731831:# General configuration ---------------------------------------------------
1573522731832:saveFigures <- TRUE
1573522731833:# customPalette <- c("#0a4f75","#91bbe4","#d7e4f5")
1573522731833:# customPalette <- (brewer.pal(n = 7, name = "Paired"))
1573522731834:# generalPalette <- c('#edc374','#e8702a','#d7e4f5','#91bbe4','#0a4f75')
1573522731834:generalPalette <- c("Other"   = '#d7e4f5',
1573522731835:"Other2"  = '#FFD592',
1573522731835:"STing - Before optimization" = '#91bbe4',
1573522731836:"PCR"     = '#FFB238',
1573522731836:"STing - After optimization"   = '#0a4f75'
1573522731837:)
1573522731838:show_col(generalPalette)
1573522731860:annotTextColors       <- c(axisColor, "#ffffff", axisColor)
1573522731861:baseVariantFontFamily <- baseFontFamily
1573522731861:# Preparing data ----------------------------------------------------------
1573522731862:(dataToPlot <- compData %>%
1573522731863:filter(Metric == "MCC",
1573522731863:MethodType == "STing - Before optimization")
1573522731863:)
1573522731922:(methodLevels <- unique(dataToPlot$Method))
1573522731923:(methodTypeLevels <- rev(unique(dataToPlot$MethodType)))
1573522731924:customPalette <- generalPalette[methodTypeLevels]
1573522731925:show_col(customPalette)
1573522732310:(genes <- rev(unique(compData$Gene)))
1573522732312:(dataToPlot <- dataToPlot %>%
1573522732312:mutate(MethodType = factor(MethodType, methodTypeLevels),
1573522732313:Gene = factor(Gene, genes),
1573522732313:ColorGroup = if_else(MethodType == "STing - After optimization", "light", "dark")) %>%
1573522732313:mutate(ColorGroup = factor(ColorGroup))
1573522732314:)
1573522732666:vecFontFace <- if_else(str_detect(levels(dataToPlot$Method), "STing"), "bold", "plain")
1573522732667:# Before improvement ------------------------------------------------
1573522732667:(beforePlot <- ggplot(dataToPlot, aes(x = Gene, y = Performance,
1573522732667:fill = MethodType, color = ColorGroup)) +
1573522732668:geom_bar(color = axisColor, size = barBorderSize,
1573522732668:# width=barWidth,
1573522732668:stat = "identity",
1573522732669:position = position_dodge(width=0.9)
1573522732669:# , show.legend = F
1573522732670:) +
1573522732670:geom_text(stat = "identity",
1573522732670:position = position_dodge(width = 0.9),
1573522732671:hjust = 1,
1573522732671:# vjust = 0.5,
1573522732672:# size = barAnnotTextSize,
1573522732672:show.legend = FALSE,
1573522732673:# parse = TRUE,
1573522732673:aes(x = Gene, y = Performance * 0.98,
1573522732674:# aes(x = Gene, y = Performance,# * 0.93,
1573522732674:label = format(round(Performance, 2), nsmall = 2)#,
1573522732676:# , color = (ColorGroup)
1573522732677:# , fontface = 'bold'
1573522732677:, family = boldFontFamily
1573522732678:# , family = baseFontFamily
1573522732678:)) +
1573522732679:# facet_grid(~ Type) +
1573522732679:scale_y_continuous(expand = c(0, 0), limits = c(0,1), position = "right") +
1573522732679:scale_x_discrete(expand = c(0.2, 0)) +
1573522732680:scale_color_manual(values = annotTextColors) +
1573522732680:scale_fill_manual(values = customPalette,
1573522732680:# labels = methodTypeLevels,
1573522732681:# guide=guide_legend(reverse=T),
1573522732681:name = "Method"
1573522732681:) +
1573522732682:labs(x = "Virulence gene",
1573522732682:y = "MCC\n") +
1573522732683:publicationTheme() +
1573522732683:barPlotCustoms +
1573522732684:theme (axis.text.y = element_text(family = baseFontFamily, face = 'italic'),
1573522732684:axis.line.y  = element_blank(),
1573522732684:axis.ticks.y = element_blank()
1573522732685:# , legend.direction = 'vertical',
1573522732685:, legend.position = "none"
1573522732686:)
1573522732686:# theme (axis.text.y = element_text(family = baseFontFamily, face = vecFontFace))
1573522732687:+ coord_flip()
1573522732688:# axis.title.y = element_text(margin=margin(1, 10, 1, 1, "mm")),) +
1573522732688:)
1573522733327:if(saveFigures){
1573522733327:ggsave("mcc_sting_vs_pcr.before_improvement.pdf", beforePlot, width = 5, height = 3.5
1573522733328:,useDingbats = F
1573522733328:)
1573522733328:# embed_fonts("manuscript_material/fig_01.pdf")
1573522733329:}
1573522733753:# Improved results ------------------------------------------------
1573522737378:compData
1573522752028:compData
1573522754431:# MLST comparative test
1573522754433:# Install an load packages ------------------------------------------------
1573522754433:installAndLoadPackages <- function(pkg){
1573522754434:cat("Please wait a moment! Checking for required packages... ")
1573522754435:cat("Done!\n")
1573522754435:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1573522754436:if (length(new.pkg)) {
1573522754437:cat("Installing new packages... ")
1573522754438:install.packages(new.pkg, dependencies = TRUE,
1573522754439:repos="http://cran.rstudio.com/")
1573522754439:cat("Done!\n")
1573522754440:}
1573522754440:cat("Loading packages... \n")
1573522754441:sapply(pkg, require, character.only = TRUE)
1573522754441:cat("Done!\n")
1573522754442:}
1573522754443:requiredPackages <- c("cowplot", "gridExtra", "extrafont", "grid", "readxl",
1573522754444:"tidyverse", "magrittr", "ggsci", "RColorBrewer", "scales")
1573522754445:installAndLoadPackages(requiredPackages)
1573522754451:# Format bar annotation text ----------------------------------------------
1573522754452:getAnnotationText <- function(value){
1573522754452:lapply(value, function(x) {
1573522754452:result = ""
1573522754453:if (x != 1) {
1573522754453:# result = paste0("bolditalic('",format(round(x, 1), nsmall = 1),"x')")
1573522754453:result = paste0("italic('",format(round(x, 1), nsmall = 1),"x')")
1573522754454:}
1573522754454:result
1573522754454:})
1573522754455:}
1573522754456:# Sources -----------------------------------------------------------------
1573522754456:source(file = "scripts/ggplot_theme.R")
1573522754501:# Loading Data ------------------------------------------------------------
1573522754502:inFile      <- "data/stxing_detection_performance.xlsx"
1573522754502:excel_sheets(inFile)
1573522754512:(compData    <- read_excel(inFile, sheet = "performance"))
1573522754626:# General configuration ---------------------------------------------------
1573522754626:saveFigures <- TRUE
1573522754627:# customPalette <- c("#0a4f75","#91bbe4","#d7e4f5")
1573522754628:# customPalette <- (brewer.pal(n = 7, name = "Paired"))
1573522754628:# generalPalette <- c('#edc374','#e8702a','#d7e4f5','#91bbe4','#0a4f75')
1573522754629:generalPalette <- c("Other"   = '#d7e4f5',
1573522754629:"Other2"  = '#FFD592',
1573522754630:"STing - Before optimization" = '#91bbe4',
1573522754630:"PCR"     = '#FFB238',
1573522754631:"STing - After optimization"   = '#0a4f75'
1573522754632:)
1573522754634:show_col(generalPalette)
1573522754670:annotTextColors       <- c(axisColor, "#ffffff", axisColor)
1573522754671:baseVariantFontFamily <- baseFontFamily
1573522754672:# Preparing data ----------------------------------------------------------
1573522758100:compData
1573522772228:View(compData)
1573522783734:View(dataToPlot)
1573522803205:# MLST comparative test
1573522803207:# Install an load packages ------------------------------------------------
1573522803208:installAndLoadPackages <- function(pkg){
1573522803209:cat("Please wait a moment! Checking for required packages... ")
1573522803209:cat("Done!\n")
1573522803210:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1573522803210:if (length(new.pkg)) {
1573522803211:cat("Installing new packages... ")
1573522803212:install.packages(new.pkg, dependencies = TRUE,
1573522803213:repos="http://cran.rstudio.com/")
1573522803214:cat("Done!\n")
1573522803215:}
1573522803215:cat("Loading packages... \n")
1573522803218:sapply(pkg, require, character.only = TRUE)
1573522803219:cat("Done!\n")
1573522803220:}
1573522803221:requiredPackages <- c("cowplot", "gridExtra", "extrafont", "grid", "readxl",
1573522803222:"tidyverse", "magrittr", "ggsci", "RColorBrewer", "scales")
1573522803224:installAndLoadPackages(requiredPackages)
1573522803234:# Format bar annotation text ----------------------------------------------
1573522803235:getAnnotationText <- function(value){
1573522803235:lapply(value, function(x) {
1573522803236:result = ""
1573522803237:if (x != 1) {
1573522803237:# result = paste0("bolditalic('",format(round(x, 1), nsmall = 1),"x')")
1573522803238:result = paste0("italic('",format(round(x, 1), nsmall = 1),"x')")
1573522803238:}
1573522803239:result
1573522803240:})
1573522803241:}
1573522803242:# Sources -----------------------------------------------------------------
1573522803243:source(file = "scripts/ggplot_theme.R")
1573522803311:# Loading Data ------------------------------------------------------------
1573522803312:inFile      <- "data/stxing_detection_performance.xlsx"
1573522803313:excel_sheets(inFile)
1573522803328:(compData    <- read_excel(inFile, sheet = "performance"))
1573522803536:# General configuration ---------------------------------------------------
1573522803536:saveFigures <- TRUE
1573522803537:# customPalette <- c("#0a4f75","#91bbe4","#d7e4f5")
1573522803538:# customPalette <- (brewer.pal(n = 7, name = "Paired"))
1573522803538:# generalPalette <- c('#edc374','#e8702a','#d7e4f5','#91bbe4','#0a4f75')
1573522803539:generalPalette <- c("Other"   = '#d7e4f5',
1573522803540:"Other2"  = '#FFD592',
1573522803540:"STing - Before optimization" = '#91bbe4',
1573522803541:"PCR"     = '#FFB238',
1573522803542:"STing - After optimization"   = '#0a4f75'
1573522803542:)
1573522803543:show_col(generalPalette)
1573522803583:annotTextColors       <- c(axisColor, "#ffffff", axisColor)
1573522803584:baseVariantFontFamily <- baseFontFamily
1573522803585:# Preparing data ----------------------------------------------------------
1573522803587:(dataToPlot <- compData %>%
1573522803587:filter(Metric == "MCC",
1573522803588:MethodType == "STing - Before optimization")
1573522803588:)
1573522804201:(methodLevels <- unique(dataToPlot$Method))
1573522804208:(methodTypeLevels <- rev(unique(dataToPlot$MethodType)))
1573522804209:customPalette <- generalPalette[methodTypeLevels]
1573522804210:show_col(customPalette)
1573522804242:(genes <- rev(unique(compData$Gene)))
1573522804243:(dataToPlot <- dataToPlot %>%
1573522804244:mutate(MethodType = factor(MethodType, methodTypeLevels),
1573522804244:Gene = factor(Gene, genes),
1573522804244:ColorGroup = if_else(MethodType == "STing - After optimization", "light", "dark")) %>%
1573522804245:mutate(ColorGroup = factor(ColorGroup))
1573522804246:)
1573522804924:vecFontFace <- if_else(str_detect(levels(dataToPlot$Method), "STing"), "bold", "plain")
1573522804926:# Before improvement ------------------------------------------------
1573522804926:(beforePlot <- ggplot(dataToPlot, aes(x = Gene, y = Performance,
1573522804927:fill = MethodType, color = ColorGroup)) +
1573522804927:geom_bar(color = axisColor, size = barBorderSize,
1573522804928:# width=barWidth,
1573522804928:stat = "identity",
1573522804934:position = position_dodge(width=0.9)
1573522804935:# , show.legend = F
1573522804936:) +
1573522804936:geom_text(stat = "identity",
1573522804937:position = position_dodge(width = 0.9),
1573522804938:hjust = 1,
1573522804938:# vjust = 0.5,
1573522804939:# size = barAnnotTextSize,
1573522804939:show.legend = FALSE,
1573522804940:# parse = TRUE,
1573522804940:aes(x = Gene, y = Performance * 0.98,
1573522804955:# aes(x = Gene, y = Performance,# * 0.93,
1573522804956:label = format(round(Performance, 2), nsmall = 2)#,
1573522804956:# , color = (ColorGroup)
1573522804957:# , fontface = 'bold'
1573522804958:, family = boldFontFamily
1573522804959:# , family = baseFontFamily
1573522804959:)) +
1573522804960:# facet_grid(~ Type) +
1573522804961:scale_y_continuous(expand = c(0, 0), limits = c(0,1), position = "right") +
1573522804962:scale_x_discrete(expand = c(0.2, 0)) +
1573522804963:scale_color_manual(values = annotTextColors) +
1573522804966:scale_fill_manual(values = customPalette,
1573522804967:# labels = methodTypeLevels,
1573522804968:# guide=guide_legend(reverse=T),
1573522804968:name = "Method"
1573522804969:) +
1573522804970:labs(x = "Virulence gene",
1573522804971:y = "MCC\n") +
1573522804971:publicationTheme() +
1573522804972:barPlotCustoms +
1573522804973:theme (axis.text.y = element_text(family = baseFontFamily, face = 'italic'),
1573522804974:axis.line.y  = element_blank(),
1573522804986:axis.ticks.y = element_blank()
1573522804987:# , legend.direction = 'vertical',
1573522804988:, legend.position = "none"
1573522804989:)
1573522804990:# theme (axis.text.y = element_text(family = baseFontFamily, face = vecFontFace))
1573522804991:+ coord_flip()
1573522804992:# axis.title.y = element_text(margin=margin(1, 10, 1, 1, "mm")),) +
1573522804993:)
1573522805745:if(saveFigures){
1573522805745:ggsave("mcc_sting_vs_pcr.before_improvement.pdf", beforePlot, width = 5, height = 3.5
1573522805746:,useDingbats = F
1573522805747:)
1573522805747:# embed_fonts("manuscript_material/fig_01.pdf")
1573522805748:}
1573522806122:# Improved results ------------------------------------------------
1573522818686:(dataToPlot <- compData %>%
1573522818687:filter(Metric == "MCC",
1573522818687:MethodType != "STing - Before optimization") %>%
1573522818688:mutate(MethodType = factor(MethodType, methodTypeLevels),
1573522818688:Gene = factor(Gene, genes))
1573522818688:)
1573522828571:(dataToPlot %<>%
1573522828571:mutate(ColorGroup = if_else(MethodType == "STing - After optimization", "light", "dark")) %>%
1573522828572:mutate(ColorGroup = factor(ColorGroup))
1573522828572:)
1573522845839:# MLST comparative test
1573522845840:# Install an load packages ------------------------------------------------
1573522845841:installAndLoadPackages <- function(pkg){
1573522845841:cat("Please wait a moment! Checking for required packages... ")
1573522845842:cat("Done!\n")
1573522845842:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1573522845843:if (length(new.pkg)) {
1573522845843:cat("Installing new packages... ")
1573522845844:install.packages(new.pkg, dependencies = TRUE,
1573522845844:repos="http://cran.rstudio.com/")
1573522845845:cat("Done!\n")
1573522845845:}
1573522845846:cat("Loading packages... \n")
1573522845846:sapply(pkg, require, character.only = TRUE)
1573522845847:cat("Done!\n")
1573522845848:}
1573522845849:requiredPackages <- c("cowplot", "gridExtra", "extrafont", "grid", "readxl",
1573522845850:"tidyverse", "magrittr", "ggsci", "RColorBrewer", "scales")
1573522845851:installAndLoadPackages(requiredPackages)
1573522845857:# Format bar annotation text ----------------------------------------------
1573522845857:getAnnotationText <- function(value){
1573522845858:lapply(value, function(x) {
1573522845858:result = ""
1573522845859:if (x != 1) {
1573522845859:# result = paste0("bolditalic('",format(round(x, 1), nsmall = 1),"x')")
1573522845859:result = paste0("italic('",format(round(x, 1), nsmall = 1),"x')")
1573522845860:}
1573522845860:result
1573522845860:})
1573522845862:}
1573522845863:# Sources -----------------------------------------------------------------
1573522845864:source(file = "scripts/ggplot_theme.R")
1573522845930:# Loading Data ------------------------------------------------------------
1573522845930:inFile      <- "data/stxing_detection_performance.xlsx"
1573522845931:excel_sheets(inFile)
1573522845955:(compData    <- read_excel(inFile, sheet = "performance"))
1573522846146:# General configuration ---------------------------------------------------
1573522846147:saveFigures <- TRUE
1573522846147:# customPalette <- c("#0a4f75","#91bbe4","#d7e4f5")
1573522846148:# customPalette <- (brewer.pal(n = 7, name = "Paired"))
1573522846148:# generalPalette <- c('#edc374','#e8702a','#d7e4f5','#91bbe4','#0a4f75')
1573522846148:generalPalette <- c("Other"   = '#d7e4f5',
1573522846149:"Other2"  = '#FFD592',
1573522846149:"STing - Before optimization" = '#91bbe4',
1573522846149:"PCR"     = '#FFB238',
1573522846150:"STing - After optimization"   = '#0a4f75'
1573522846150:)
1573522846151:show_col(generalPalette)
1573522846176:annotTextColors       <- c(axisColor, "#ffffff", axisColor)
1573522846177:baseVariantFontFamily <- baseFontFamily
1573522846178:# Preparing data ----------------------------------------------------------
1573522846179:(dataToPlot <- compData %>%
1573522846179:filter(Metric == "MCC",
1573522846179:MethodType == "STing - Before optimization")
1573522846180:)
1573522846738:(methodLevels <- unique(dataToPlot$Method))
1573522846739:(methodTypeLevels <- rev(unique(dataToPlot$MethodType)))
1573522846739:customPalette <- generalPalette[methodTypeLevels]
1573522846740:show_col(customPalette)
1573522846773:(genes <- rev(unique(compData$Gene)))
1573522846775:(dataToPlot <- dataToPlot %>%
1573522846775:mutate(MethodType = factor(MethodType, methodTypeLevels),
1573522846776:Gene = factor(Gene, genes),
1573522846776:ColorGroup = if_else(MethodType == "STing - After optimization", "light", "dark")) %>%
1573522846776:mutate(ColorGroup = factor(ColorGroup))
1573522846777:)
1573522847154:vecFontFace <- if_else(str_detect(levels(dataToPlot$Method), "STing"), "bold", "plain")
1573522847156:# Before improvement ------------------------------------------------
1573522847156:(beforePlot <- ggplot(dataToPlot, aes(x = Gene, y = Performance,
1573522847157:fill = MethodType, color = ColorGroup)) +
1573522847157:geom_bar(color = axisColor, size = barBorderSize,
1573522847158:# width=barWidth,
1573522847158:stat = "identity",
1573522847159:position = position_dodge(width=0.9)
1573522847160:# , show.legend = F
1573522847160:) +
1573522847161:geom_text(stat = "identity",
1573522847161:position = position_dodge(width = 0.9),
1573522847161:hjust = 1,
1573522847162:# vjust = 0.5,
1573522847162:# size = barAnnotTextSize,
1573522847163:show.legend = FALSE,
1573522847163:# parse = TRUE,
1573522847164:aes(x = Gene, y = Performance * 0.98,
1573522847164:# aes(x = Gene, y = Performance,# * 0.93,
1573522847164:label = format(round(Performance, 2), nsmall = 2)#,
1573522847165:# , color = (ColorGroup)
1573522847165:# , fontface = 'bold'
1573522847166:, family = boldFontFamily
1573522847166:# , family = baseFontFamily
1573522847166:)) +
1573522847167:# facet_grid(~ Type) +
1573522847167:scale_y_continuous(expand = c(0, 0), limits = c(0,1), position = "right") +
1573522847168:scale_x_discrete(expand = c(0.2, 0)) +
1573522847168:scale_color_manual(values = annotTextColors) +
1573522847169:scale_fill_manual(values = customPalette,
1573522847169:# labels = methodTypeLevels,
1573522847170:# guide=guide_legend(reverse=T),
1573522847170:name = "Method"
1573522847171:) +
1573522847171:labs(x = "Virulence gene",
1573522847172:y = "MCC\n") +
1573522847172:publicationTheme() +
1573522847173:barPlotCustoms +
1573522847173:theme (axis.text.y = element_text(family = baseFontFamily, face = 'italic'),
1573522847174:axis.line.y  = element_blank(),
1573522847174:axis.ticks.y = element_blank()
1573522847175:# , legend.direction = 'vertical',
1573522847176:, legend.position = "none"
1573522847176:)
1573522847177:# theme (axis.text.y = element_text(family = baseFontFamily, face = vecFontFace))
1573522847177:+ coord_flip()
1573522847178:# axis.title.y = element_text(margin=margin(1, 10, 1, 1, "mm")),) +
1573522847178:)
1573522848260:if(saveFigures){
1573522848261:ggsave("mcc_sting_vs_pcr.before_improvement.pdf", beforePlot, width = 5, height = 3.5
1573522848262:,useDingbats = F
1573522848262:)
1573522848263:# embed_fonts("manuscript_material/fig_01.pdf")
1573522848263:}
1573522849027:# Improved results ------------------------------------------------
1573522852867:methodTypeLevels
1573522887381:(dataToPlot <- compData %>%
1573522887381:filter(Metric == "MCC",
1573522887382:MethodType != "STing - Before optimization") %>%
1573522887383:mutate(MethodType = factor(MethodType, methodTypeLevels),
1573522887383:Gene = factor(Gene, genes))
1573522887384:)
1573522888822:(methodLevels <- unique(dataToPlot$Method))
1573522889602:(methodTypeLevels <- rev(unique(dataToPlot$MethodType)))
1573522890714:customPalette <- generalPalette[methodTypeLevels]
1573522892676:show_col(customPalette)
1573522898881:methodTypeLevels
1573523160501:# MLST comparative test
1573523160503:# Install an load packages ------------------------------------------------
1573523160503:installAndLoadPackages <- function(pkg){
1573523160504:cat("Please wait a moment! Checking for required packages... ")
1573523160505:cat("Done!\n")
1573523160505:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1573523160506:if (length(new.pkg)) {
1573523160506:cat("Installing new packages... ")
1573523160508:install.packages(new.pkg, dependencies = TRUE,
1573523160509:repos="http://cran.rstudio.com/")
1573523160509:cat("Done!\n")
1573523160510:}
1573523160511:cat("Loading packages... \n")
1573523160511:sapply(pkg, require, character.only = TRUE)
1573523160512:cat("Done!\n")
1573523160512:}
1573523160514:requiredPackages <- c("cowplot", "gridExtra", "extrafont", "grid", "readxl",
1573523160514:"tidyverse", "magrittr", "ggsci", "RColorBrewer", "scales")
1573523160536:installAndLoadPackages(requiredPackages)
1573523160551:# Format bar annotation text ----------------------------------------------
1573523160552:getAnnotationText <- function(value){
1573523160552:lapply(value, function(x) {
1573523160561:result = ""
1573523160562:if (x != 1) {
1573523160562:# result = paste0("bolditalic('",format(round(x, 1), nsmall = 1),"x')")
1573523160563:result = paste0("italic('",format(round(x, 1), nsmall = 1),"x')")
1573523160564:}
1573523160564:result
1573523160565:})
1573523160566:}
1573523160567:# Sources -----------------------------------------------------------------
1573523160568:source(file = "scripts/ggplot_theme.R")
1573523160754:# Loading Data ------------------------------------------------------------
1573523160760:inFile      <- "data/stxing_detection_performance.xlsx"
1573523160761:excel_sheets(inFile)
1573523160798:(compData    <- read_excel(inFile, sheet = "performance"))
1573523161025:# General configuration ---------------------------------------------------
1573523161025:saveFigures <- TRUE
1573523161030:# customPalette <- c("#0a4f75","#91bbe4","#d7e4f5")
1573523161030:# customPalette <- (brewer.pal(n = 7, name = "Paired"))
1573523161031:# generalPalette <- c('#edc374','#e8702a','#d7e4f5','#91bbe4','#0a4f75')
1573523161031:generalPalette <- c("Other"   = '#d7e4f5',
1573523161032:"Other2"  = '#FFD592',
1573523161032:"STing - Before optimization" = '#91bbe4',
1573523161033:"PCR"     = '#FFB238',
1573523161033:"STing - After optimization"   = '#0a4f75'
1573523161034:)
1573523161035:show_col(generalPalette)
1573523161055:annotTextColors       <- c(axisColor, "#ffffff", axisColor)
1573523161056:baseVariantFontFamily <- baseFontFamily
1573523161057:# Preparing data ----------------------------------------------------------
1573523161058:(dataToPlot <- compData %>%
1573523161058:filter(Metric == "MCC",
1573523161059:MethodType == "STing - Before optimization")
1573523161059:)
1573523161688:(methodLevels <- unique(dataToPlot$Method))
1573523161691:(methodTypeLevels <- rev(unique(dataToPlot$MethodType)))
1573523161692:customPalette <- generalPalette[methodTypeLevels]
1573523161693:show_col(customPalette)
1573523161764:(genes <- rev(unique(compData$Gene)))
1573523161766:(dataToPlot <- dataToPlot %>%
1573523161766:mutate(MethodType = factor(MethodType, methodTypeLevels),
1573523161767:Gene = factor(Gene, genes),
1573523161768:ColorGroup = if_else(MethodType == "STing - After optimization", "light", "dark")) %>%
1573523161768:mutate(ColorGroup = factor(ColorGroup))
1573523161769:)
1573523162323:vecFontFace <- if_else(str_detect(levels(dataToPlot$Method), "STing"), "bold", "plain")
1573523162324:# Before improvement ------------------------------------------------
1573523162325:(beforePlot <- ggplot(dataToPlot, aes(x = Gene, y = Performance,
1573523162326:fill = MethodType, color = ColorGroup)) +
1573523162326:geom_bar(color = axisColor, size = barBorderSize,
1573523162327:# width=barWidth,
1573523162328:stat = "identity",
1573523162329:position = position_dodge(width=0.9)
1573523162329:# , show.legend = F
1573523162330:) +
1573523162331:geom_text(stat = "identity",
1573523162332:position = position_dodge(width = 0.9),
1573523162334:hjust = 1,
1573523162334:# vjust = 0.5,
1573523162335:# size = barAnnotTextSize,
1573523162336:show.legend = FALSE,
1573523162336:# parse = TRUE,
1573523162337:aes(x = Gene, y = Performance * 0.98,
1573523162338:# aes(x = Gene, y = Performance,# * 0.93,
1573523162339:label = format(round(Performance, 2), nsmall = 2)#,
1573523162339:# , color = (ColorGroup)
1573523162340:# , fontface = 'bold'
1573523162341:, family = boldFontFamily
1573523162341:# , family = baseFontFamily
1573523162342:)) +
1573523162343:# facet_grid(~ Type) +
1573523162344:scale_y_continuous(expand = c(0, 0), limits = c(0,1), position = "right") +
1573523162345:scale_x_discrete(expand = c(0.2, 0)) +
1573523162346:scale_color_manual(values = annotTextColors) +
1573523162347:scale_fill_manual(values = customPalette,
1573523162348:# labels = methodTypeLevels,
1573523162349:# guide=guide_legend(reverse=T),
1573523162350:name = "Method"
1573523162351:) +
1573523162352:labs(x = "Virulence gene",
1573523162352:y = "MCC\n") +
1573523162353:publicationTheme() +
1573523162354:barPlotCustoms +
1573523162355:theme (axis.text.y = element_text(family = baseFontFamily, face = 'italic'),
1573523162355:axis.line.y  = element_blank(),
1573523162356:axis.ticks.y = element_blank()
1573523162357:# , legend.direction = 'vertical',
1573523162358:, legend.position = "none"
1573523162359:)
1573523162359:# theme (axis.text.y = element_text(family = baseFontFamily, face = vecFontFace))
1573523162360:+ coord_flip()
1573523162361:# axis.title.y = element_text(margin=margin(1, 10, 1, 1, "mm")),) +
1573523162362:)
1573523163222:if(saveFigures){
1573523163224:ggsave("mcc_sting_vs_pcr.before_improvement.pdf", beforePlot, width = 5, height = 3.5
1573523163225:,useDingbats = F
1573523163225:)
1573523163226:# embed_fonts("manuscript_material/fig_01.pdf")
1573523163226:}
1573523163983:# Improved results ------------------------------------------------
1573523167927:(dataToPlot <- compData %>%
1573523167927:filter(Metric == "MCC",
1573523167928:MethodType != "STing - Before optimization") %>%
1573523167928:mutate(MethodType = factor(MethodType, methodTypeLevels),
1573523167929:Gene = factor(Gene, genes))
1573523167930:)
1573523170757:(methodLevels <- unique(dataToPlot$Method))
1573523175451:(methodTypeLevels <- rev(unique(dataToPlot$MethodType)))
1573523184663:compData
1573523218863:(dataToPlot <- compData %>%
1573523218863:filter(#Metric == "MCC",
1573523218864:MethodType != "STing - Before optimization")
1573523218864:)
1573523226203:(dataToPlot <- compData %>%
1573523226204:filter(Metric == "MCC",
1573523226204:MethodType != "STing - Before optimization")
1573523226205:)
1573523228638:(methodLevels <- unique(dataToPlot$Method))
1573523230248:(methodTypeLevels <- rev(unique(dataToPlot$MethodType)))
1573523236971:customPalette <- generalPalette[methodTypeLevels]
1573523238484:show_col(customPalette)
1573523240342:(genes <- rev(unique(compData$Gene)))
1573523247896:(dataToPlot <- dataToPlot %>%
1573523247896:mutate(MethodType = factor(MethodType, methodTypeLevels),
1573523247897:Gene = factor(Gene, genes),
1573523247898:ColorGroup = if_else(MethodType == "STing - After optimization", "light", "dark")) %>%
1573523247898:mutate(ColorGroup = factor(ColorGroup))
1573523247899:)
1573523250396:vecFontFace <- if_else(str_detect(levels(dataToPlot$Method), "STing"), "bold", "plain")
1573523274517:(improvedPlot <- ggplot(dataToPlot, aes(x = Gene, y = Performance,
1573523274518:fill = MethodType, color = ColorGroup)) +
1573523274519:geom_bar(color = axisColor, size = barBorderSize,
1573523274519:# width=barWidth,
1573523274520:stat = "identity",
1573523274522:position = position_dodge(width=0.9)
1573523274523:# , show.legend = F
1573523274523:) +
1573523274524:geom_text(stat = "identity",
1573523274525:position = position_dodge(width = 0.9),
1573523274525:hjust = 1,
1573523274526:# vjust = 0.5,
1573523274528:# size = barAnnotTextSize,
1573523274529:show.legend = FALSE,
1573523274530:# parse = TRUE,
1573523274531:aes(x = Gene, y = Performance * 0.98,
1573523274537:# aes(x = Gene, y = Performance,# * 0.93,
1573523274538:label = format(round(Performance, 2), nsmall = 2)#,
1573523274538:# , color = (ColorGroup)
1573523274539:# , fontface = 'bold'
1573523274539:, family = boldFontFamily
1573523274540:# , family = baseFontFamily
1573523274540:)) +
1573523274540:# facet_grid(~ Type) +
1573523274541:scale_y_continuous(expand = c(0, 0), limits = c(0,1), position = "right") +
1573523274541:scale_x_discrete(expand = c(0.2, 0)) +
1573523274542:scale_color_manual(values = annotTextColors) +
1573523274542:scale_fill_manual(values = customPalette,
1573523274543:# labels = methodTypeLevels,
1573523274543:# guide=guide_legend(reverse=T),
1573523274551:name = "Method"
1573523274552:) +
1573523274553:labs(x = "Virulence gene",
1573523274554:y = "MCC\n") +
1573523274555:publicationTheme() +
1573523274555:barPlotCustoms +
1573523274556:theme (axis.text.y = element_text(family = baseFontFamily, face = 'italic'),
1573523274557:axis.line.y  = element_blank(),
1573523274558:axis.ticks.y = element_blank()
1573523274558:# , legend.direction = 'vertical',
1573523274559:, legend.position = "none"
1573523274560:)
1573523274561:# theme (axis.text.y = element_text(family = baseFontFamily, face = vecFontFace))
1573523274561:+ coord_flip()
1573523274562:# axis.title.y = element_text(margin=margin(1, 10, 1, 1, "mm")),) +
1573523274563:)
1573523297606:(methodTypeLevels <- rev(unique(dataToPlot$MethodType)))
1573523306052:(methodTypeLevels <- (unique(dataToPlot$MethodType)))
1573523306753:customPalette <- generalPalette[methodTypeLevels]
1573523307102:show_col(customPalette)
1573523307473:(genes <- rev(unique(compData$Gene)))
1573523307993:(dataToPlot <- dataToPlot %>%
1573523307994:mutate(MethodType = factor(MethodType, methodTypeLevels),
1573523307994:Gene = factor(Gene, genes),
1573523307995:ColorGroup = if_else(MethodType == "STing - After optimization", "light", "dark")) %>%
1573523307996:mutate(ColorGroup = factor(ColorGroup))
1573523307999:)
1573523308634:vecFontFace <- if_else(str_detect(levels(dataToPlot$Method), "STing"), "bold", "plain")
1573523309320:(improvedPlot <- ggplot(dataToPlot, aes(x = Gene, y = Performance,
1573523309320:fill = MethodType, color = ColorGroup)) +
1573523309321:geom_bar(color = axisColor, size = barBorderSize,
1573523309321:# width=barWidth,
1573523309322:stat = "identity",
1573523309322:position = position_dodge(width=0.9)
1573523309322:# , show.legend = F
1573523309323:) +
1573523309323:geom_text(stat = "identity",
1573523309323:position = position_dodge(width = 0.9),
1573523309324:hjust = 1,
1573523309324:# vjust = 0.5,
1573523309324:# size = barAnnotTextSize,
1573523309325:show.legend = FALSE,
1573523309325:# parse = TRUE,
1573523309326:aes(x = Gene, y = Performance * 0.98,
1573523309326:# aes(x = Gene, y = Performance,# * 0.93,
1573523309326:label = format(round(Performance, 2), nsmall = 2)#,
1573523309327:# , color = (ColorGroup)
1573523309327:# , fontface = 'bold'
1573523309328:, family = boldFontFamily
1573523309328:# , family = baseFontFamily
1573523309330:)) +
1573523309332:# facet_grid(~ Type) +
1573523309333:scale_y_continuous(expand = c(0, 0), limits = c(0,1), position = "right") +
1573523309333:scale_x_discrete(expand = c(0.2, 0)) +
1573523309334:scale_color_manual(values = annotTextColors) +
1573523309335:scale_fill_manual(values = customPalette,
1573523309335:# labels = methodTypeLevels,
1573523309336:# guide=guide_legend(reverse=T),
1573523309337:name = "Method"
1573523309338:) +
1573523309339:labs(x = "Virulence gene",
1573523309339:y = "MCC\n") +
1573523309340:publicationTheme() +
1573523309341:barPlotCustoms +
1573523309341:theme (axis.text.y = element_text(family = baseFontFamily, face = 'italic'),
1573523309342:axis.line.y  = element_blank(),
1573523309343:axis.ticks.y = element_blank()
1573523309344:# , legend.direction = 'vertical',
1573523309344:, legend.position = "none"
1573523309345:)
1573523309348:# theme (axis.text.y = element_text(family = baseFontFamily, face = vecFontFace))
1573523309350:+ coord_flip()
1573523309351:# axis.title.y = element_text(margin=margin(1, 10, 1, 1, "mm")),) +
1573523309352:)
1573523313933:# MLST comparative test
1573523313934:# Install an load packages ------------------------------------------------
1573523313934:installAndLoadPackages <- function(pkg){
1573523313935:cat("Please wait a moment! Checking for required packages... ")
1573523313935:cat("Done!\n")
1573523313936:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1573523313937:if (length(new.pkg)) {
1573523313937:cat("Installing new packages... ")
1573523313938:install.packages(new.pkg, dependencies = TRUE,
1573523313939:repos="http://cran.rstudio.com/")
1573523313939:cat("Done!\n")
1573523313939:}
1573523313940:cat("Loading packages... \n")
1573523313940:sapply(pkg, require, character.only = TRUE)
1573523313941:cat("Done!\n")
1573523313941:}
1573523313942:requiredPackages <- c("cowplot", "gridExtra", "extrafont", "grid", "readxl",
1573523313943:"tidyverse", "magrittr", "ggsci", "RColorBrewer", "scales")
1573523313944:installAndLoadPackages(requiredPackages)
1573523313956:# Format bar annotation text ----------------------------------------------
1573523313956:getAnnotationText <- function(value){
1573523313957:lapply(value, function(x) {
1573523313957:result = ""
1573523313958:if (x != 1) {
1573523313958:# result = paste0("bolditalic('",format(round(x, 1), nsmall = 1),"x')")
1573523313959:result = paste0("italic('",format(round(x, 1), nsmall = 1),"x')")
1573523313960:}
1573523313960:result
1573523313961:})
1573523313962:}
1573523313964:# Sources -----------------------------------------------------------------
1573523313965:source(file = "scripts/ggplot_theme.R")
1573523314030:# Loading Data ------------------------------------------------------------
1573523314030:inFile      <- "data/stxing_detection_performance.xlsx"
1573523314031:excel_sheets(inFile)
1573523314044:(compData    <- read_excel(inFile, sheet = "performance"))
1573523314274:# General configuration ---------------------------------------------------
1573523314275:saveFigures <- TRUE
1573523314276:# customPalette <- c("#0a4f75","#91bbe4","#d7e4f5")
1573523314276:# customPalette <- (brewer.pal(n = 7, name = "Paired"))
1573523314277:# generalPalette <- c('#edc374','#e8702a','#d7e4f5','#91bbe4','#0a4f75')
1573523314278:generalPalette <- c("Other"   = '#d7e4f5',
1573523314278:"Other2"  = '#FFD592',
1573523314279:"STing - Before optimization" = '#91bbe4',
1573523314279:"PCR"     = '#FFB238',
1573523314280:"STing - After optimization"   = '#0a4f75'
1573523314280:)
1573523314281:show_col(generalPalette)
1573523314309:annotTextColors       <- c(axisColor, "#ffffff", axisColor)
1573523314310:baseVariantFontFamily <- baseFontFamily
1573523314311:# Preparing data ----------------------------------------------------------
1573523314312:(dataToPlot <- compData %>%
1573523314313:filter(Metric == "MCC",
1573523314313:MethodType == "STing - Before optimization")
1573523314314:)
1573523314384:(methodLevels <- unique(dataToPlot$Method))
1573523314385:(methodTypeLevels <- rev(unique(dataToPlot$MethodType)))
1573523314386:customPalette <- generalPalette[methodTypeLevels]
1573523314387:show_col(customPalette)
1573523314932:(genes <- rev(unique(compData$Gene)))
1573523314933:(dataToPlot <- dataToPlot %>%
1573523314934:mutate(MethodType = factor(MethodType, methodTypeLevels),
1573523314934:Gene = factor(Gene, genes),
1573523314935:ColorGroup = if_else(MethodType == "STing - After optimization", "light", "dark")) %>%
1573523314936:mutate(ColorGroup = factor(ColorGroup))
1573523314936:)
1573523315206:vecFontFace <- if_else(str_detect(levels(dataToPlot$Method), "STing"), "bold", "plain")
1573523315207:# Before improvement ------------------------------------------------
1573523315208:(beforePlot <- ggplot(dataToPlot, aes(x = Gene, y = Performance,
1573523315208:fill = MethodType, color = ColorGroup)) +
1573523315209:geom_bar(color = axisColor, size = barBorderSize,
1573523315209:# width=barWidth,
1573523315210:stat = "identity",
1573523315210:position = position_dodge(width=0.9)
1573523315211:# , show.legend = F
1573523315211:) +
1573523315212:geom_text(stat = "identity",
1573523315212:position = position_dodge(width = 0.9),
1573523315213:hjust = 1,
1573523315213:# vjust = 0.5,
1573523315214:# size = barAnnotTextSize,
1573523315214:show.legend = FALSE,
1573523315215:# parse = TRUE,
1573523315216:aes(x = Gene, y = Performance * 0.98,
1573523315217:# aes(x = Gene, y = Performance,# * 0.93,
1573523315218:label = format(round(Performance, 2), nsmall = 2)#,
1573523315218:# , color = (ColorGroup)
1573523315219:# , fontface = 'bold'
1573523315219:, family = boldFontFamily
1573523315220:# , family = baseFontFamily
1573523315221:)) +
1573523315221:# facet_grid(~ Type) +
1573523315222:scale_y_continuous(expand = c(0, 0), limits = c(0,1), position = "right") +
1573523315223:scale_x_discrete(expand = c(0.2, 0)) +
1573523315223:scale_color_manual(values = annotTextColors) +
1573523315224:scale_fill_manual(values = customPalette,
1573523315224:# labels = methodTypeLevels,
1573523315225:# guide=guide_legend(reverse=T),
1573523315225:name = "Method"
1573523315226:) +
1573523315226:labs(x = "Virulence gene",
1573523315227:y = "MCC\n") +
1573523315228:publicationTheme() +
1573523315228:barPlotCustoms +
1573523315229:theme (axis.text.y = element_text(family = baseFontFamily, face = 'italic'),
1573523315229:axis.line.y  = element_blank(),
1573523315230:axis.ticks.y = element_blank()
1573523315230:# , legend.direction = 'vertical',
1573523315231:, legend.position = "none"
1573523315232:)
1573523315232:# theme (axis.text.y = element_text(family = baseFontFamily, face = vecFontFace))
1573523315233:+ coord_flip()
1573523315234:# axis.title.y = element_text(margin=margin(1, 10, 1, 1, "mm")),) +
1573523315235:)
1573523315909:if(saveFigures){
1573523315910:ggsave("mcc_sting_vs_pcr.before_improvement.pdf", beforePlot, width = 5, height = 3.5
1573523315910:,useDingbats = F
1573523315911:)
1573523315911:# embed_fonts("manuscript_material/fig_01.pdf")
1573523315911:}
1573523316292:# Improved results ------------------------------------------------
1573523316294:(dataToPlot <- compData %>%
1573523316294:filter(Metric == "MCC",
1573523316295:MethodType != "STing - Before optimization")
1573523316295:)
1573523317088:(methodLevels <- unique(dataToPlot$Method))
1573523317089:(methodTypeLevels <- (unique(dataToPlot$MethodType)))
1573523317089:customPalette <- generalPalette[methodTypeLevels]
1573523317090:show_col(customPalette)
1573523317117:(genes <- rev(unique(compData$Gene)))
1573523317118:(dataToPlot <- dataToPlot %>%
1573523317131:mutate(MethodType = factor(MethodType, methodTypeLevels),
1573523317132:Gene = factor(Gene, genes),
1573523317132:ColorGroup = if_else(MethodType == "STing - After optimization", "light", "dark")) %>%
1573523317133:mutate(ColorGroup = factor(ColorGroup))
1573523317134:)
1573523317620:vecFontFace <- if_else(str_detect(levels(dataToPlot$Method), "STing"), "bold", "plain")
1573523317622:(improvedPlot <- ggplot(dataToPlot, aes(x = Gene, y = Performance,
1573523317622:fill = MethodType, color = ColorGroup)) +
1573523317622:geom_bar(color = axisColor, size = barBorderSize,
1573523317623:# width=barWidth,
1573523317623:stat = "identity",
1573523317623:position = position_dodge(width=0.9)
1573523317624:# , show.legend = F
1573523317624:) +
1573523317625:geom_text(stat = "identity",
1573523317625:position = position_dodge(width = 0.9),
1573523317625:hjust = 1,
1573523317626:# vjust = 0.5,
1573523317626:# size = barAnnotTextSize,
1573523317627:show.legend = FALSE,
1573523317628:# parse = TRUE,
1573523317628:aes(x = Gene, y = Performance * 0.98,
1573523317629:# aes(x = Gene, y = Performance,# * 0.93,
1573523317629:label = format(round(Performance, 2), nsmall = 2)#,
1573523317630:# , color = (ColorGroup)
1573523317631:# , fontface = 'bold'
1573523317631:, family = boldFontFamily
1573523317632:# , family = baseFontFamily
1573523317633:)) +
1573523317633:# facet_grid(~ Type) +
1573523317634:scale_y_continuous(expand = c(0, 0), limits = c(0,1), position = "right") +
1573523317634:scale_x_discrete(expand = c(0.2, 0)) +
1573523317636:scale_color_manual(values = annotTextColors) +
1573523317637:scale_fill_manual(values = customPalette,
1573523317638:# labels = methodTypeLevels,
1573523317639:# guide=guide_legend(reverse=T),
1573523317640:name = "Method"
1573523317641:) +
1573523317641:labs(x = "Virulence gene",
1573523317642:y = "MCC\n") +
1573523317642:publicationTheme() +
1573523317643:barPlotCustoms +
1573523317643:theme (axis.text.y = element_text(family = baseFontFamily, face = 'italic'),
1573523317644:axis.line.y  = element_blank(),
1573523317644:axis.ticks.y = element_blank()
1573523317645:# , legend.direction = 'vertical',
1573523317645:, legend.position = "none"
1573523317646:)
1573523317646:# theme (axis.text.y = element_text(family = baseFontFamily, face = vecFontFace))
1573523317647:+ coord_flip()
1573523317647:# axis.title.y = element_text(margin=margin(1, 10, 1, 1, "mm")),) +
1573523317648:)
1573523336746:(improvedPlot <- ggplot(dataToPlot, aes(x = Gene, y = Performance,
1573523336747:fill = MethodType, color = ColorGroup)) +
1573523336747:geom_bar(color = axisColor, size = barBorderSize,
1573523336748:# width=barWidth,
1573523336749:stat = "identity",
1573523336749:position = position_dodge(width=0.9)
1573523336750:# , show.legend = F
1573523336750:) +
1573523336751:geom_text(stat = "identity",
1573523336752:position = position_dodge(width = 0.9),
1573523336753:hjust = 1,
1573523336754:# vjust = 0.5,
1573523336754:# size = barAnnotTextSize,
1573523336759:show.legend = FALSE,
1573523336788:# parse = TRUE,
1573523336788:aes(x = Gene, y = Performance * 0.98,
1573523336789:# aes(x = Gene, y = Performance,# * 0.93,
1573523336789:label = format(round(Performance, 2), nsmall = 2)#,
1573523336790:# , color = (ColorGroup)
1573523336790:# , fontface = 'bold'
1573523336791:, family = boldFontFamily
1573523336791:# , family = baseFontFamily
1573523336792:)) +
1573523336792:# facet_grid(~ Type) +
1573523336793:scale_y_continuous(expand = c(0, 0), limits = c(0,1), position = "right") +
1573523336793:scale_x_discrete(expand = c(0.2, 0)) +
1573523336794:scale_color_manual(values = annotTextColors) +
1573523336794:scale_fill_manual(values = customPalette,
1573523336796:# labels = methodTypeLevels,
1573523336797:# guide=guide_legend(reverse=T),
1573523336797:name = "Method"
1573523336798:) +
1573523336798:labs(x = "Virulence gene",
1573523336799:y = "MCC\n") +
1573523336800:publicationTheme() +
1573523336800:barPlotCustoms +
1573523336800:theme (axis.text.y = element_text(family = baseFontFamily, face = 'italic'),
1573523336801:axis.line.y  = element_blank(),
1573523336802:axis.ticks.y = element_blank()
1573523336802:# , legend.direction = 'vertical',
1573523336803:# , legend.position = "none"
1573523336803:)
1573523336804:# theme (axis.text.y = element_text(family = baseFontFamily, face = vecFontFace))
1573523336804:+ coord_flip()
1573523336805:# axis.title.y = element_text(margin=margin(1, 10, 1, 1, "mm")),) +
1573523336805:)
1573523413736:(improvedPlot <- ggplot(dataToPlot, aes(x = Gene, y = Performance,
1573523413737:fill = MethodType, color = ColorGroup)) +
1573523413737:geom_bar(color = axisColor, size = barBorderSize,
1573523413737:# width=barWidth,
1573523413738:stat = "identity",
1573523413738:position = position_dodge(width=0.9)
1573523413739:# , show.legend = F
1573523413739:) +
1573523413739:geom_text(stat = "identity",
1573523413740:position = position_dodge(width = 0.9),
1573523413740:hjust = 1,
1573523413740:# vjust = 0.5,
1573523413741:# size = barAnnotTextSize,
1573523413741:show.legend = FALSE,
1573523413742:# parse = TRUE,
1573523413742:aes(x = Gene, y = Performance * 0.98,
1573523413742:# aes(x = Gene, y = Performance,# * 0.93,
1573523413743:label = format(round(Performance, 2), nsmall = 2)#,
1573523413743:# , color = (ColorGroup)
1573523413743:# , fontface = 'bold'
1573523413744:, family = boldFontFamily
1573523413744:# , family = baseFontFamily
1573523413745:)) +
1573523413745:# facet_grid(~ Type) +
1573523413745:scale_y_continuous(expand = c(0, 0), limits = c(0,1), position = "right") +
1573523413746:scale_x_discrete(expand = c(0.2, 0)) +
1573523413747:scale_color_manual(values = annotTextColors) +
1573523413747:scale_fill_manual(values = customPalette,
1573523413748:# labels = methodTypeLevels,
1573523413748:# guide=guide_legend(reverse=T),
1573523413749:name = "Method"
1573523413749:) +
1573523413750:labs(x = "Virulence gene",
1573523413750:y = "MCC\n") +
1573523413751:publicationTheme() +
1573523413752:barPlotCustoms +
1573523413752:theme (axis.text.y = element_text(family = baseFontFamily, face = 'italic'),
1573523413753:axis.line.y  = element_blank(),
1573523413753:axis.ticks.y = element_blank()
1573523413754:# , legend.direction = 'vertical',
1573523413754:# , legend.position = "none"
1573523413754:)
1573523413755:# theme (axis.text.y = element_text(family = baseFontFamily, face = vecFontFace))
1573523413755:+ coord_flip()
1573523413756:# axis.title.y = element_text(margin=margin(1, 10, 1, 1, "mm")),) +
1573523413756:)
1573523415204:if(saveFigures){
1573523415205:ggsave("mcc_sting_vs_pcr.improved.pdf", predPlot, width = 8.5, height = 5
1573523415205:,useDingbats = F
1573523415206:)
1573523415207:# embed_fonts("manuscript_material/fig_01.pdf")
1573523415207:}
1573523426021:ggsave("mcc_sting_vs_pcr.improved.pdf", predPlot, width = 6, height = 4
1573523426021:,useDingbats = F
1573523426022:)
1573523458065:ggsave("mcc_sting_vs_pcr.improved.pdf", improvedPlot, width = 6, height = 4
1573523458066:,useDingbats = F
1573523458067:)
1573523467331:ggsave("mcc_sting_vs_pcr.improved.pdf", improvedPlot, width = 6, height = 4.5
1573523467332:,useDingbats = F
1573523467332:)
1573523476622:ggsave("mcc_sting_vs_pcr.improved.pdf", improvedPlot, width = 6, height = 5
1573523476623:,useDingbats = F
1573523476624:)
1573523489660:(improvedPlot <- ggplot(dataToPlot, aes(x = Gene, y = Performance,
1573523489661:fill = MethodType, color = ColorGroup)) +
1573523489661:geom_bar(color = axisColor, size = barBorderSize,
1573523489662:# width=barWidth,
1573523489662:stat = "identity",
1573523489663:position = position_dodge(width=0.9)
1573523489664:# , show.legend = F
1573523489665:) +
1573523489666:geom_text(stat = "identity",
1573523489666:position = position_dodge(width = 0.9),
1573523489667:hjust = 1,
1573523489667:# vjust = 0.5,
1573523489668:# size = barAnnotTextSize,
1573523489669:show.legend = FALSE,
1573523489670:# parse = TRUE,
1573523489671:aes(x = Gene, y = Performance * 0.98,
1573523489672:# aes(x = Gene, y = Performance,# * 0.93,
1573523489673:label = format(round(Performance, 2), nsmall = 2)#,
1573523489673:# , color = (ColorGroup)
1573523489674:# , fontface = 'bold'
1573523489675:, family = boldFontFamily
1573523489675:# , family = baseFontFamily
1573523489676:)) +
1573523489676:# facet_grid(~ Type) +
1573523489677:scale_y_continuous(expand = c(0, 0), limits = c(0,1), position = "right") +
1573523489678:scale_x_discrete(expand = c(0.2, 0)) +
1573523489678:scale_color_manual(values = annotTextColors) +
1573523489679:scale_fill_manual(values = customPalette,
1573523489680:# labels = methodTypeLevels,
1573523489681:guide=guide_legend(reverse=T),
1573523489681:name = "Method"
1573523489682:) +
1573523489683:labs(x = "Virulence gene",
1573523489684:y = "MCC\n") +
1573523489684:publicationTheme() +
1573523489685:barPlotCustoms +
1573523489686:theme (axis.text.y = element_text(family = baseFontFamily, face = 'italic'),
1573523489687:axis.line.y  = element_blank(),
1573523489688:axis.ticks.y = element_blank()
1573523489689:# , legend.direction = 'vertical',
1573523489689:# , legend.position = "none"
1573523489690:)
1573523489691:# theme (axis.text.y = element_text(family = baseFontFamily, face = vecFontFace))
1573523489692:+ coord_flip()
1573523489693:# axis.title.y = element_text(margin=margin(1, 10, 1, 1, "mm")),) +
1573523489694:)
1573523495478:if(saveFigures){
1573523495478:ggsave("mcc_sting_vs_pcr.improved.pdf", improvedPlot, width = 6, height = 5
1573523495479:,useDingbats = F
1573523495480:)
1573523495480:# embed_fonts("manuscript_material/fig_01.pdf")
1573523495481:}
1574095806140:library(tidyverse)
1574258653414:#!/usr/bin/env Rscript
1574258653517:# ##############################################################################
1574258653517:#  Author:   Hector Fabio Espitia-Navarro
1574258653518:#            Georgia Institute of Technology
1574258653518:#  Version:  1.0
1574258653518:#  Date:     11/04/2019
1574258653519:# ##############################################################################
1574258653520:# Install required packages -----------------------------------------------
1574258653521:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1574258653521:if(!file.exists(personal.lib.path))
1574258653522:dir.create(personal.lib.path)
1574258653523:printMessage <- function(message, verbose){
1574258653523:if(verbose)
1574258653524:cat(message)
1574258653524:}
1574258653526:# crayon::bold("Hola")
1574258653526:installAndLoadPackages <- function(pkg, verbose){
1574258653527:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1574258653527:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1574258653528:printMessage("Done!\n", verbose)
1574258653528:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1574258653529:if (length(new.pkg)) {
1574258653529:printMessage("Installing new packages... ", verbose)
1574258653530:install.packages(new.pkg, dependencies = TRUE,
1574258653530:repos="http://cran.rstudio.com/",
1574258653531:lib = personal.lib.path)
1574258653531:printMessage("Done!\n", verbose)
1574258653532:}
1574258653532:printMessage("Loading required packages... ", verbose)
1574258653533:sapply(pkg, function(x){
1574258653533:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1574258653534:})
1574258653534:printMessage("Done!\n", verbose)
1574258653535:}
1574258653536:# packages <- c("ggpubr", "RColorBrewer", "gridExtra",
1574258653536:# "extrafont", "grid", "tidyverse", "xlsx")
1574258653537:packages <- c("tidyverse")
1574258653538:installAndLoadPackages(c("argparser", "stringr"), verbose = FALSE)
1574258684086:# Command line arguments processing ---------------------------------------
1574258684086:# Get script name
1574258684087:initial.options <- commandArgs(trailingOnly = FALSE)
1574258684087:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1574258684088:# Process command line arguments
1574258684088:# Create a parser
1574258684088:p <- arg_parser("This script is intended to assess STing classifier results.",
1574258684089:name = script.name)
1574258684207:# Add Positional arguments (required)
1574258684207:p <- add_argument(p, "pred_file", help = "STing predictions file. BIOM table: accn, read counts, taxonomy")
1574258684209:p <- add_argument(p, "ref_file", help = "Reference file. Tab separated file BIOM like: accn, read counts")
1574258684210:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1574258684210:default = "summary_results")
1574258684213:# Initialization of variables ---------------------------------------------
1574258684214:ksize      <- 30
1574258684215:test       <- "test_06"
1574258684215:dataDir    <- str_glue("results/{test}")
1574258684746:predFile   <- str_glue("{dataDir}/results_taxonomy_cols/classifier.{ksize}.res.tsv")
1574258684747:refFile    <- str_glue("data/samples/art_sting_nifh_full_db/observed.nifh.full.counts_taxonomy.tsv")
1574258684749:prefix     <- str_glue("{dataDir}/test_01.summary_results")
1574258684751:# Get argument values from the command line
1574258684751:predFile   <- argv$pred_file
1574258684752:refFile    <- argv$ref_file
1574258684859:prefix     <- argv$prefix
1574258684859:# Function to check if file exists ----------------------------------------
1574258684860:CheckFileExists <- function(fileList) {
1574258684860:non.exist.files <- !file.exists(fileList)
1574258684860:if(any(non.exist.files)) {
1574258684861:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1574258684861:}
1574258684861:}
1574258684862:# Check for input files ---------------------------------------------------
1574258684862:filesToCheck <- c(predFile, refFile)
1574258684862:errorMessage  <- CheckFileExists(filesToCheck)
1574258688373:#!/usr/bin/env Rscript
1574258688374:# ##############################################################################
1574258688375:#  Author:   Hector Fabio Espitia-Navarro
1574258688376:#            Georgia Institute of Technology
1574258688377:#  Version:  1.0
1574258688377:#  Date:     11/04/2019
1574258688377:# ##############################################################################
1574258688378:# Install required packages -----------------------------------------------
1574258688379:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1574258688380:if(!file.exists(personal.lib.path))
1574258688380:dir.create(personal.lib.path)
1574258688383:printMessage <- function(message, verbose){
1574258688396:if(verbose)
1574258688397:cat(message)
1574258688397:}
1574258688399:# crayon::bold("Hola")
1574258688400:installAndLoadPackages <- function(pkg, verbose){
1574258688401:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1574258688402:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1574258688402:printMessage("Done!\n", verbose)
1574258688403:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1574258688403:if (length(new.pkg)) {
1574258688404:printMessage("Installing new packages... ", verbose)
1574258688404:install.packages(new.pkg, dependencies = TRUE,
1574258688408:repos="http://cran.rstudio.com/",
1574258688409:lib = personal.lib.path)
1574258688409:printMessage("Done!\n", verbose)
1574258688410:}
1574258688410:printMessage("Loading required packages... ", verbose)
1574258688411:sapply(pkg, function(x){
1574258688412:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1574258688412:})
1574258688413:printMessage("Done!\n", verbose)
1574258688414:}
1574258688417:# packages <- c("ggpubr", "RColorBrewer", "gridExtra",
1574258688417:# "extrafont", "grid", "tidyverse", "xlsx")
1574258688418:packages <- c("tidyverse")
1574258688419:installAndLoadPackages(c("argparser", "stringr"), verbose = FALSE)
1574258688486:# Command line arguments processing ---------------------------------------
1574258688500:# Get script name
1574258688501:initial.options <- commandArgs(trailingOnly = FALSE)
1574258688501:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1574258688502:# Process command line arguments
1574258688502:# Create a parser
1574258688502:p <- arg_parser("This script is intended to assess STing classifier results.",
1574258688503:name = script.name)
1574258688515:# Add Positional arguments (required)
1574258688515:p <- add_argument(p, "pred_file", help = "STing predictions file. BIOM table: accn, read counts, taxonomy")
1574258688517:p <- add_argument(p, "ref_file", help = "Reference file. Tab separated file BIOM like: accn, read counts")
1574258688518:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1574258688518:default = "summary_results")
1574258688522:# Initialization of variables ---------------------------------------------
1574258688523:ksize      <- 30
1574258688523:test       <- "test_06"
1574258688524:dataDir    <- str_glue("results/{test}")
1574258688525:predFile   <- str_glue("{dataDir}/results_taxonomy_cols/classifier.{ksize}.res.tsv")
1574258688527:refFile    <- str_glue("data/samples/art_sting_nifh_full_db/observed.nifh.full.counts_taxonomy.tsv")
1574258688527:prefix     <- str_glue("{dataDir}/test_01.summary_results")
1574258688529:# Parse command line arguments --------------------------------------------
1574258688529:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1574258688529:argv <- list()
1574258688530:if(command.line) {
1574258688530:argv <- parse_args(p)
1574258688531:} else {
1574258688531:argv <- parse_args(p, list(predFile,
1574258688531:refFile,
1574258688531:"--prefix", prefix))
1574258688532:}
1574258688544:# Get argument values from the command line
1574258688544:predFile   <- argv$pred_file
1574258688545:refFile    <- argv$ref_file
1574258688546:prefix     <- argv$prefix
1574258688547:# Function to check if file exists ----------------------------------------
1574258688547:CheckFileExists <- function(fileList) {
1574258688548:non.exist.files <- !file.exists(fileList)
1574258688548:if(any(non.exist.files)) {
1574258688549:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1574258688549:}
1574258688549:}
1574258688550:# Check for input files ---------------------------------------------------
1574258688550:filesToCheck <- c(predFile, refFile)
1574258688551:errorMessage  <- CheckFileExists(filesToCheck)
1574258693676:# Code core - Begin -------------------------------------------------------
1574258693677:installAndLoadPackages(packages, verbose = TRUE)
1574258704143:options(stringsAsFactors = F)
1574258704144:# LOAD DATA ---------------------------------------------------------------
1574258704145:(obsData  <- read_tsv(refFile))
1574258705839:(predData <- read_tsv(predFile))
1574258731905:samples <- names(inObsData)[-1]
1574258735100:# LOAD DATA ---------------------------------------------------------------
1574258735100:(obsData  <- read_tsv(refFile))
1574258773035:samples <- names(obsData)[2:8]
1574258774743:samples
1574258779656:(samples <- names(obsData)[2:8])
1574258894075:nasmes <- names(obsData)
1574258896595:names <- names(obsData)
1574258897890:names
1574258920205:names <- c(Seq_Id, names(obsData)[-1])
1574258920983:names
1574258925029:names <- c("Seq_Id", names(obsData)[-1])
1574258926545:names
1574258944622:names <- c("Seq_Id", names(predData)[-1])
1574258945768:names
1574258971684:names(obsData) <- names
1574258972068:names(predData) <- names
1574258973523:(samples <- names(obsData)[2:8])
1574258981980:(obsData %>% summarise_at(samples, sum))
1574258984811:(predData %>% summarise_at(samples, sum))
1574259028972:predData$nifh.full.3
1574259058030:# LOAD DATA ---------------------------------------------------------------
1574259058031:(obsData  <- read_tsv(refFile, na = 0))
1574259075603:# LOAD DATA ---------------------------------------------------------------
1574259075603:(obsData  <- read_tsv(refFile, na = '0'))
1574259086347:(predData <- read_tsv(predFile, na = '0'))
1574259089298:names <- c("Seq_Id", names(obsData)[-1])
1574259089693:names(obsData) <- names
1574259089981:names(predData) <- names
1574259090574:(samples <- names(obsData)[2:8])
1574259091478:(obsData %>% summarise_at(samples, sum))
1574259092396:(predData %>% summarise_at(samples, sum))
1574259102391:(predData <- read_tsv(predFile, na = 0))
1574259224361:predData %<>% replace_na(0)
1574259265150:# packages <- c("ggpubr", "RColorBrewer", "gridExtra",
1574259265151:# "extrafont", "grid", "tidyverse", "xlsx")
1574259265152:packages <- c("tidyverse", "magrittr")
1574259267527:installAndLoadPackages(c("argparser", "stringr"), verbose = FALSE)
1574259283667:# Code core - Begin -------------------------------------------------------
1574259283667:installAndLoadPackages(packages, verbose = TRUE)
1574259289417:predData %<>% replace_na(0)
1574259447104:predData %>% replace_na(samples, 0)
1574259459245:predData %>% replace_na(list(samples), 0)
1574259466444:predData %<>% replace_na(list(samples), 0)
1574259468119:(predData %>% summarise_at(samples, sum))
1574259514510:(predData %>% summarise_at(samples, sum(na.rm = TRUE)))
1574259658592:(predData %>%
1574259658592:mutate_at(samples, replace_na(0))
1574259658593:)
1574259673484:(predData %>%
1574259673484:mutate_at(samples, replace_na(samples, 0))
1574259673485:)
1574259741803:samples
1574259812449:lapply(saples, function(x){x=0})
1574259818020:lapply(samples, function(x){x=0})
1574259836571:list(x=0, y=0)
1574259873335:naValuesToReplace <- lapply(samples, function(x){x=0})
1574259886882:names(naValuesToReplace) <- samples
1574259888958:naValuesToReplace
1574259921155:(predData %>%
1574259921156:mutate_at(samples, replace_na(naValuesToReplace))
1574259921157:)
1574259938952:replace_na(predData, naValuesToReplace)
1574260258149:(predData %>%
1574260258150:replace_na(naValuesToReplace)
1574260258150:)
1574260264281:(predData %<>%
1574260264281:replace_na(naValuesToReplace)
1574260264282:)
1574260278113:predData$nifh.full.3
1574260299610:(obsData %>% summarise_at(samples, sum(na.rm = TRUE)))
1574260308486:(obsData %>% summarise_at(samples, sum))
1574260318096:(predData %>% summarise_at(samples, sum))
1574260526891:(predData %>% group_by(genus) %>%
1574260526892:summarise_at(samples, sum)
1574260526893:)
1574260550342:(obsData %>% group_by(genus) %>%
1574260550343:summarise_at(samples, sum)
1574260550343:)
1574260575208:View(predData)
1574261193508:(obsData %>% summarise_at(samples, sum))
1574261194621:(predData %>% summarise_at(samples, sum))
1574268470475:(obsData %>% group_by(genus) %>%
1574268470519:summarise_at(samples, sum)
1574268470519:)
1574268474332:(predData %>% group_by(genus) %>%
1574268474332:summarise_at(samples, sum)
1574268474333:)
1574268498046:(obsData %>% group_by(genus) %>%
1574268498047:summarise_at(samples, sum)
1574268498048:)
1574268498402:(predData %>% group_by(genus) %>%
1574268498402:summarise_at(samples, sum)
1574268498403:)
1574560975489:#!/usr/bin/env Rscript
1574560975516:# ##############################################################################
1574560975517:#  Author:   Hector Fabio Espitia-Navarro
1574560975517:#            Georgia Institute of Technology
1574560975518:#  Version:  1.0
1574560975518:#  Date:     11/04/2019
1574560975519:# ##############################################################################
1574560975519:# Install required packages -----------------------------------------------
1574560975520:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1574560975521:if(!file.exists(personal.lib.path))
1574560975523:dir.create(personal.lib.path)
1574560975524:printMessage <- function(message, verbose){
1574560975525:if(verbose)
1574560975526:cat(message)
1574560975526:}
1574560975527:# crayon::bold("Hola")
1574560975528:installAndLoadPackages <- function(pkg, verbose){
1574560975528:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1574560975529:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1574560975529:printMessage("Done!\n", verbose)
1574560975530:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1574560975530:if (length(new.pkg)) {
1574560975531:printMessage("Installing new packages... ", verbose)
1574560975531:install.packages(new.pkg, dependencies = TRUE,
1574560975531:repos="http://cran.rstudio.com/",
1574560975532:lib = personal.lib.path)
1574560975533:printMessage("Done!\n", verbose)
1574560975533:}
1574560975544:printMessage("Loading required packages... ", verbose)
1574560975545:sapply(pkg, function(x){
1574560975545:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1574560975546:})
1574560975547:printMessage("Done!\n", verbose)
1574560975547:}
1574560975548:packages <- c("ggpubr", "RColorBrewer", "gridExtra",
1574560975549:"extrafont", "grid", "tidyverse", "xlsx", "magrittr")
1574560975550:# packages <- c("tidyverse", "magrittr")
1574560975550:installAndLoadPackages(c("argparser", "stringr"), verbose = FALSE)
1574560976075:# Command line arguments processing ---------------------------------------
1574560976076:# Get script name
1574560976076:initial.options <- commandArgs(trailingOnly = FALSE)
1574560976077:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1574560976077:# Process command line arguments
1574560976078:# Create a parser
1574560976078:p <- arg_parser("This script is intended to assess STing classifier results.",
1574560976078:name = script.name)
1574560976128:# Add Positional arguments (required)
1574560976186:p <- add_argument(p, "pred_file", help = "STing predictions file. BIOM table: accn, read counts, taxonomy")
1574560976188:p <- add_argument(p, "ref_file", help = "Reference file. Tab separated file BIOM like: accn, read counts")
1574560976189:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1574560976190:default = "summary_results")
1574560976192:# Initialization of variables ---------------------------------------------
1574560976192:# "results/predicted.no_dup.summary.tsv"
1574560976193:dataDir    <- str_glue("results")
1574560976319:predFile   <- str_glue("{dataDir}/predicted.no_dup.summary.tsv")
1574560976322:refFile    <- str_glue("data/samples/full_taxonomy/communities/observed.read_counts.tsv")
1574560976323:prefix     <- str_glue("{dataDir}/summary_results")
1574560976324:# Parse command line arguments --------------------------------------------
1574560976324:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1574560976325:argv <- list()
1574560976325:if(command.line) {
1574560976326:argv <- parse_args(p)
1574560976326:} else {
1574560976326:argv <- parse_args(p, list(predFile,
1574560976327:refFile,
1574560976327:"--prefix", prefix))
1574560976327:}
1574560976336:# Get argument values from the command line
1574560976336:predFile   <- argv$pred_file
1574560976336:refFile    <- argv$ref_file
1574560976337:prefix     <- argv$prefix
1574560976338:# Function to check if file exists ----------------------------------------
1574560976338:CheckFileExists <- function(fileList) {
1574560976338:non.exist.files <- !file.exists(fileList)
1574560976339:if(any(non.exist.files)) {
1574560976339:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1574560976339:}
1574560976339:}
1574560976341:# Check for input files ---------------------------------------------------
1574560976341:filesToCheck <- c(predFile, refFile)
1574560976342:errorMessage  <- CheckFileExists(filesToCheck)
1574560976343:#
1574560976343:# if(!is.null(errorMessage)){
1574560976344:#   stop(errorMessage)
1574560976344:# } else {
1574560976345:# Code core - Begin -------------------------------------------------------
1574560976345:installAndLoadPackages(packages, verbose = TRUE)
1574560988642:options(stringsAsFactors = F)
1574560988644:# FUNCTIONS ------------------------------------------------------------------
1574560988644:# Calculates relative abundance level of a grouped table -------------------
1574560988645:calculateRelativeAbundance <- function(readCountsTable, depths) {
1574560988645:# totalReads <- unlist(readCountsTable %>% summarise_at(sampleCols, sum))
1574560988646:outTable <- readCountsTable
1574560988646:totalReads <- lapply(readCountsTable[-1], sum)
1574560988646:for(sample in depths) {
1574560988647:outTable[[sample]] <- outTable[[sample]] / totalReads[[sample]] * 100
1574560988647:}
1574560988648:return(outTable)
1574560988648:}
1574560988650:# Clacultes relative abundance at a given rank level -----------------------
1574560988650:getRelativeAbundance <- function(countsTable, group_rank, depths) {
1574560988650:# print(group_rank)
1574560988651:# group_rank <- enquo(group_rank)
1574560988651:groupedData <- countsTable %>% group_by(!! group_rank) %>%
1574560988652:summarise_at(depths, sum)
1574560988652:calculateRelativeAbundance(groupedData, depths)
1574560988667:}
1574560988668:# Clacultes relative abundance at a given rank level -----------------------
1574560988669:getAbundance <- function(countsTable, group_rank, depths) {
1574560988669:# print(group_rank)
1574560988670:# group_rank <- enquo(group_rank)
1574560988670:countsTable %>% group_by(!! group_rank) %>%
1574560988671:summarise_at(depths, sum)
1574560988671:}
1574560988682:# Calculate Shannon index at the level of a grouped table -------------------
1574560988682:calculateShannonIndex <- function(countsTable, depths) {
1574560988683:# totalReads <- unlist(readCountsTable %>% summarise_at(sampleCols, sum))
1574560988683:totalReads <- lapply(countsTable[-1], sum)
1574560988684:lapply(countsTable[-1], function(sample){
1574560988684:sum(sample * log(sample))
1574560988685:})
1574560988685:}
1574560988686:# LOAD DATA ---------------------------------------------------------------
1574560988687:(obsData  <- read_tsv(refFile))
1574560990191:(predData <- read_tsv(predFile))
1574560991110:(samples <- unique(obsData$sample))
1574560991111:(depths <- names(obsData)[2:8])
1574560991112:(kList <- unique(predData$k))
1574560991114:(samplesByType <- data.frame("Full" = c("FA", "FB"),
1574560991114:"Partial" = c("PA", "PB")))
1574560991119:# Process samples ---------------------------------------------------------
1574560991119:(ksize <- kList[2])
1574560991120:# for(type in names(samplesByType)) {
1574560991121:# (type <- "Full") # test value
1574560991121:# (samples <- samplesByType[,type])
1574560991122:(sam <- "FA")    # test value
1574560991123:# Subset data
1574560991123:(obsSubset <- obsData %>%
1574560991124:filter(sample == sam))
1574560991596:(predSubset <- predData %>%
1574560991597:filter(sample == sam,
1574560991597:k == ksize))
1574561025102:# Check total number of reads on input data
1574561025102:(obsSubset%>% summarise_at(depths, sum))
1574561026157:(predSubset %>% summarise_at(depths, sum))
1574561077696:# Read counts to long format
1574561077697:(readCounts.long <- left_join(x = getAbundance(obsSubset, as.symbol(rank), depths) %>%
1574561077697:gather(key = "depth", value = "Observed", -1),
1574561077698:y = getAbundance(predSubset, as.symbol(rank), depths) %>%
1574561077698:gather(key = "depth", value = "Predicted", -1)
1574561077699:# , by = c(rank, "depth")
1574561077699:) %>%
1574561077700:mutate(depth = factor(depth)) %>%
1574561077700:replace_na(list("Observed" = 0, "Predicted" = 0))
1574561077701:)
1574561101803:# Process samples ---------------------------------------------------------
1574561101804:rank <- "species"
1574561104903:# Read counts to long format
1574561104904:(readCounts.long <- left_join(x = getAbundance(obsSubset, as.symbol(rank), depths) %>%
1574561104904:gather(key = "depth", value = "Observed", -1),
1574561104905:y = getAbundance(predSubset, as.symbol(rank), depths) %>%
1574561104905:gather(key = "depth", value = "Predicted", -1)
1574561104906:# , by = c(rank, "depth")
1574561104907:) %>%
1574561104907:mutate(depth = factor(depth)) %>%
1574561104908:replace_na(list("Observed" = 0, "Predicted" = 0))
1574561104908:)
1574561117184:# Process samples ---------------------------------------------------------
1574561117185:rank <- "genus"
1574561120547:# Read counts to long format
1574561120548:(readCounts.long <- left_join(x = getAbundance(obsSubset, as.symbol(rank), depths) %>%
1574561120548:gather(key = "depth", value = "Observed", -1),
1574561120549:y = getAbundance(predSubset, as.symbol(rank), depths) %>%
1574561120550:gather(key = "depth", value = "Predicted", -1)
1574561120550:# , by = c(rank, "depth")
1574561120551:) %>%
1574561120551:mutate(depth = factor(depth)) %>%
1574561120552:replace_na(list("Observed" = 0, "Predicted" = 0))
1574561120554:)
1574561147663:# Calcultae relative abundance
1574561147664:(pred.relAbun <- getRelativeAbundance(predData, as.symbol(rank), depths))
1574561151459:(obs.relAbun  <- getRelativeAbundance(obsData, as.symbol(rank), depths))
1574561205288:#!/usr/bin/env Rscript
1574561205288:# ##############################################################################
1574561205289:#  Author:   Hector Fabio Espitia-Navarro
1574561205289:#            Georgia Institute of Technology
1574561205290:#  Version:  1.0
1574561205290:#  Date:     11/04/2019
1574561205291:# ##############################################################################
1574561205291:# Install required packages -----------------------------------------------
1574561205292:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1574561205293:if(!file.exists(personal.lib.path))
1574561205293:dir.create(personal.lib.path)
1574561205294:printMessage <- function(message, verbose){
1574561205294:if(verbose)
1574561205295:cat(message)
1574561205295:}
1574561205296:# crayon::bold("Hola")
1574561205296:installAndLoadPackages <- function(pkg, verbose){
1574561205297:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1574561205297:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1574561205298:printMessage("Done!\n", verbose)
1574561205298:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1574561205299:if (length(new.pkg)) {
1574561205299:printMessage("Installing new packages... ", verbose)
1574561205300:install.packages(new.pkg, dependencies = TRUE,
1574561205300:repos="http://cran.rstudio.com/",
1574561205300:lib = personal.lib.path)
1574561205301:printMessage("Done!\n", verbose)
1574561205301:}
1574561205302:printMessage("Loading required packages... ", verbose)
1574561205302:sapply(pkg, function(x){
1574561205303:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1574561205303:})
1574561205303:printMessage("Done!\n", verbose)
1574561205304:}
1574561205305:packages <- c("ggpubr", "RColorBrewer", "gridExtra",
1574561205305:"extrafont", "grid", "tidyverse", "xlsx", "magrittr")
1574561205306:# packages <- c("tidyverse", "magrittr")
1574561205306:installAndLoadPackages(c("argparser", "stringr"), verbose = FALSE)
1574561205341:# Command line arguments processing ---------------------------------------
1574561205342:# Get script name
1574561205342:initial.options <- commandArgs(trailingOnly = FALSE)
1574561205343:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1574561205344:# Process command line arguments
1574561205345:# Create a parser
1574561205345:p <- arg_parser("This script is intended to assess STing classifier results.",
1574561205346:name = script.name)
1574561205361:# Add Positional arguments (required)
1574561205362:p <- add_argument(p, "pred_file", help = "STing predictions file. BIOM table: accn, read counts, taxonomy")
1574561205363:p <- add_argument(p, "ref_file", help = "Reference file. Tab separated file BIOM like: accn, read counts")
1574561205365:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1574561205365:default = "summary_results")
1574561205367:# Initialization of variables ---------------------------------------------
1574561205368:# "results/predicted.no_dup.summary.tsv"
1574561205368:dataDir    <- str_glue("results")
1574561205369:predFile   <- str_glue("{dataDir}/predicted.no_dup.summary.tsv")
1574561205371:refFile    <- str_glue("data/samples/full_taxonomy/communities/observed.read_counts.tsv")
1574561205372:prefix     <- str_glue("{dataDir}/summary_results")
1574561205374:# Parse command line arguments --------------------------------------------
1574561205374:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1574561205375:argv <- list()
1574561205376:if(command.line) {
1574561205376:argv <- parse_args(p)
1574561205377:} else {
1574561205377:argv <- parse_args(p, list(predFile,
1574561205377:refFile,
1574561205378:"--prefix", prefix))
1574561205378:}
1574561205508:# Get argument values from the command line
1574561205508:predFile   <- argv$pred_file
1574561205509:refFile    <- argv$ref_file
1574561205509:prefix     <- argv$prefix
1574561205510:# Function to check if file exists ----------------------------------------
1574561205510:CheckFileExists <- function(fileList) {
1574561205511:non.exist.files <- !file.exists(fileList)
1574561205511:if(any(non.exist.files)) {
1574561205511:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1574561205512:}
1574561205512:}
1574561205513:# Check for input files ---------------------------------------------------
1574561205514:filesToCheck <- c(predFile, refFile)
1574561205515:errorMessage  <- CheckFileExists(filesToCheck)
1574561205515:#
1574561205516:# if(!is.null(errorMessage)){
1574561205516:#   stop(errorMessage)
1574561205517:# } else {
1574561205517:# Code core - Begin -------------------------------------------------------
1574561205518:installAndLoadPackages(packages, verbose = TRUE)
1574561205526:options(stringsAsFactors = F)
1574561205527:# FUNCTIONS ------------------------------------------------------------------
1574561205527:# Calculates relative abundance level of a grouped table -------------------
1574561205528:calculateRelativeAbundance <- function(readCountsTable, depths) {
1574561205528:# totalReads <- unlist(readCountsTable %>% summarise_at(sampleCols, sum))
1574561205529:outTable <- readCountsTable
1574561205529:totalReads <- lapply(readCountsTable[-1], sum)
1574561205530:for(sample in depths) {
1574561205530:outTable[[sample]] <- outTable[[sample]] / totalReads[[sample]] * 100
1574561205531:}
1574561205541:return(outTable)
1574561205542:}
1574561205543:# Clacultes relative abundance at a given rank level -----------------------
1574561205544:getRelativeAbundance <- function(countsTable, group_rank, depths) {
1574561205544:# print(group_rank)
1574561205545:# group_rank <- enquo(group_rank)
1574561205545:groupedData <- countsTable %>% group_by(!! group_rank) %>%
1574561205546:summarise_at(depths, sum)
1574561205546:calculateRelativeAbundance(groupedData, depths)
1574561205546:}
1574561205548:# Clacultes relative abundance at a given rank level -----------------------
1574561205548:getAbundance <- function(countsTable, group_rank, depths) {
1574561205548:# print(group_rank)
1574561205549:# group_rank <- enquo(group_rank)
1574561205549:countsTable %>% group_by(!! group_rank) %>%
1574561205550:summarise_at(depths, sum)
1574561205550:}
1574561205551:# Calculate Shannon index at the level of a grouped table -------------------
1574561205552:calculateShannonIndex <- function(countsTable, depths) {
1574561205552:# totalReads <- unlist(readCountsTable %>% summarise_at(sampleCols, sum))
1574561205553:totalReads <- lapply(countsTable[-1], sum)
1574561205565:lapply(countsTable[-1], function(sample){
1574561205566:sum(sample * log(sample))
1574561205566:})
1574561205567:}
1574561205568:# LOAD DATA ---------------------------------------------------------------
1574561205569:(obsData  <- read_tsv(refFile))
1574561205909:(predData <- read_tsv(predFile))
1574561206257:(samples <- unique(obsData$sample))
1574561206258:(depths <- names(obsData)[2:8])
1574561206260:(kList <- unique(predData$k))
1574561206261:(samplesByType <- data.frame("Full" = c("FA", "FB"),
1574561206262:"Partial" = c("PA", "PB")))
1574561206264:# Process samples ---------------------------------------------------------
1574561206265:rank <- "genus"
1574561206265:(ksize <- kList[2])
1574561206266:# for(type in names(samplesByType)) {
1574561206266:# (type <- "Full") # test value
1574561206267:# (samples <- samplesByType[,type])
1574561291360:(sam <- "FA")    # test value
1574561291820:# Subset data
1574561291820:(obsSubset <- obsData %>%
1574561291821:filter(sample == sam))
1574561292270:(predSubset <- predData %>%
1574561292270:filter(sample == sam,
1574561292271:k == ksize))
1574561293707:# Check total number of reads on input data
1574561293707:(obsSubset%>% summarise_at(depths, sum))
1574561294470:(predSubset %>% summarise_at(depths, sum))
1574561295647:# Read counts to long format
1574561295648:(readCounts.long <- left_join(x = getAbundance(obsSubset, as.symbol(rank), depths) %>%
1574561295649:gather(key = "depth", value = "Observed", -1),
1574561295649:y = getAbundance(predSubset, as.symbol(rank), depths) %>%
1574561295650:gather(key = "depth", value = "Predicted", -1)
1574561295650:# , by = c(rank, "depth")
1574561295651:) %>%
1574561295651:mutate(depth = factor(depth)) %>%
1574561295652:replace_na(list("Observed" = 0, "Predicted" = 0))
1574561295652:)
1574561298433:# Calcultae relative abundance
1574561298434:(pred.relAbun <- getRelativeAbundance(predData, as.symbol(rank), depths))
1574561322210:(obs.relAbun  <- getRelativeAbundance(obsData, as.symbol(rank), depths))
1574561411196:# Remove unlcassified row from predicted data
1574561411197:(pred.relAbun <- pred.relAbun %>% filter(!!as.symbol(rank) != "Unclassified"))
1574561459614:# Relative abundances tables to long format
1574561459615:pred.relAbun.long <- pred.relAbun %>%
1574561459615:gather(key = "depth", value = "Predicted", -1)
1574561461008:obs.relAbun.long <- obs.relAbun %>%
1574561461009:gather(key = "depth", value = "Observed", -1)
1574561462580:(relAbun.long <- right_join(x = obs.relAbun.long,
1574561462581:y = pred.relAbun.long) %>%
1574561462581:mutate(depth = factor(depth)) %>%
1574561462582:replace_na(list("Observed" = 0, "Predicted" = 0))
1574561462582:)
1574561690443:# Read counts to long format
1574561690443:(readCounts.long <- left_join(x = getAbundance(obsSubset, as.symbol(rank), depths) %>%
1574561690444:gather(key = "depth", value = "Observed", -1),
1574561690444:y = getAbundance(predSubset, as.symbol(rank), depths) %>%
1574561690444:gather(key = "depth", value = "Predicted", -1)
1574561690445:# , by = c(rank, "depth")
1574561690445:) %>%
1574561690446:mutate(depth = factor(depth)) %>%
1574561690446:replace_na(list("Observed" = 0, "Predicted" = 0))
1574561690446:)
1574561691441:# Calcultae relative abundance
1574561691442:(pred.relAbun <- getRelativeAbundance(obsSubset, as.symbol(rank), depths))
1574561692466:(obs.relAbun  <- getRelativeAbundance(predSubset, as.symbol(rank), depths))
1574561701473:# Remove unlcassified row from predicted data
1574561701474:(pred.relAbun <- pred.relAbun %>% filter(!!as.symbol(rank) != "Unclassified"))
1574561703187:# Relative abundances tables to long format
1574561703187:pred.relAbun.long <- pred.relAbun %>%
1574561703188:gather(key = "depth", value = "Predicted", -1)
1574561705329:obs.relAbun.long <- obs.relAbun %>%
1574561705329:gather(key = "depth", value = "Observed", -1)
1574561707426:(relAbun.long <- right_join(x = obs.relAbun.long,
1574561707426:y = pred.relAbun.long) %>%
1574561707427:mutate(depth = factor(depth)) %>%
1574561707427:replace_na(list("Observed" = 0, "Predicted" = 0))
1574561707428:)
1574561727354:# Calcultae relative abundance
1574561727354:(pred.relAbun <- getRelativeAbundance(obsSubset, as.symbol(rank), depths))
1574561727761:(obs.relAbun  <- getRelativeAbundance(predSubset, as.symbol(rank), depths))
1574561728332:# Remove unlcassified row from predicted data
1574561728333:(pred.relAbun <- pred.relAbun %>% filter(!!as.symbol(rank) != "Unclassified"))
1574561732497:# Relative abundances tables to long format
1574561732498:pred.relAbun.long <- pred.relAbun %>%
1574561732498:gather(key = "depth", value = "Predicted", -1)
1574561734497:obs.relAbun.long <- obs.relAbun %>%
1574561734498:gather(key = "depth", value = "Observed", -1)
1574561741344:(relAbun.long <- right_join(x = obs.relAbun.long,
1574561741345:y = pred.relAbun.long) %>%
1574561741345:mutate(depth = factor(depth)) %>%
1574561741346:replace_na(list("Observed" = 0, "Predicted" = 0))
1574561741346:)
1574561765597:# Calcultae relative abundance
1574561765598:(pred.relAbun <- getRelativeAbundance(obsSubset, as.symbol(rank), depths))
1574561766590:(obs.relAbun  <- getRelativeAbundance(predSubset, as.symbol(rank), depths))
1574561770186:(obs.relAbun  <- getRelativeAbundance(predSubset, as.symbol(rank), depths))
1574561781991:# Calcultae relative abundance
1574561781992:(pred.relAbun <- getRelativeAbundance(predSubset, as.symbol(rank), depths))
1574561782827:(obs.relAbun  <- getRelativeAbundance(obsSubset, as.symbol(rank), depths))
1574561787641:# Remove unlcassified row from predicted data
1574561787642:(pred.relAbun <- pred.relAbun %>% filter(!!as.symbol(rank) != "Unclassified"))
1574561794853:# Relative abundances tables to long format
1574561794854:pred.relAbun.long <- pred.relAbun %>%
1574561794854:gather(key = "depth", value = "Predicted", -1)
1574561795793:obs.relAbun.long <- obs.relAbun %>%
1574561795793:gather(key = "depth", value = "Observed", -1)
1574561797086:(relAbun.long <- right_join(x = obs.relAbun.long,
1574561797087:y = pred.relAbun.long) %>%
1574561797087:mutate(depth = factor(depth)) %>%
1574561797088:replace_na(list("Observed" = 0, "Predicted" = 0))
1574561797088:)
1574561805468:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574561805469:+ geom_smooth(level=0.95)
1574561805469:+ geom_point(aes(color = !!as.symbol(rank)), size = 2)
1574561805470:+ stat_cor(label.x = 3, label.y = 34)
1574561805470:+ stat_regline_equation(label.x = 3, label.y = 32)
1574561805471:# + geom_text_repel(aes(label = genus), size = 3)
1574561805471:# + scale_x_continuous(trans='log10')
1574561805472:# + scale_y_continuous(trans='log10')
1574561805472:+ facet_wrap(~depth)
1574561805473:# + theme(legend.position = 'none')
1574561805473:)
1574561894583:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574561894584:+ geom_smooth(level=0.95)
1574561894584:+ geom_point(aes(color = !!as.symbol(rank)), size = 2)
1574561894585:+ stat_cor(label.x = 3, label.y = 15)
1574561894586:+ stat_regline_equation(label.x = 3, label.y = 13)
1574561894587:# + geom_text_repel(aes(label = genus), size = 3)
1574561894587:# + scale_x_continuous(trans='log10')
1574561894588:# + scale_y_continuous(trans='log10')
1574561894589:+ facet_wrap(~depth)
1574561894589:# + theme(legend.position = 'none')
1574561894590:)
1574561915898:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574561915899:+ geom_smooth(level=0.95)
1574561915899:+ geom_point(aes(color = !!as.symbol(rank)), size = 2)
1574561915899:+ stat_cor(label.x = 3, label.y = 18)
1574561915900:+ stat_regline_equation(label.x = 3, label.y = 16)
1574561915900:# + geom_text_repel(aes(label = genus), size = 3)
1574561915900:# + scale_x_continuous(trans='log10')
1574561915901:# + scale_y_continuous(trans='log10')
1574561915901:+ facet_wrap(~depth)
1574561915902:# + theme(legend.position = 'none')
1574561915902:)
1574562009724:depths
1574562040723:predData
1574562069634:(relAbun.long <- right_join(x = obs.relAbun.long,
1574562069635:y = pred.relAbun.long) %>%
1574562069635:mutate(depth = factor(depth, levels = depths)) %>%
1574562069636:replace_na(list("Observed" = 0, "Predicted" = 0))
1574562069636:)
1574562071262:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574562071263:+ geom_smooth(level=0.95)
1574562071263:+ geom_point(aes(color = !!as.symbol(rank)), size = 2)
1574562071264:+ stat_cor(label.x = 3, label.y = 18)
1574562071264:+ stat_regline_equation(label.x = 3, label.y = 16)
1574562071265:# + geom_text_repel(aes(label = genus), size = 3)
1574562071265:# + scale_x_continuous(trans='log10')
1574562071266:# + scale_y_continuous(trans='log10')
1574562071266:+ facet_wrap(~depth)
1574562071267:# + theme(legend.position = 'none')
1574562071267:)
1574562196220:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574562196221:+ geom_smooth(level=0.95)
1574562196222:+ geom_point(aes(color = !!as.symbol(rank)), shape = 23, size = 2)
1574562196222:+ stat_cor(label.x = 3, label.y = 18)
1574562196223:+ stat_regline_equation(label.x = 3, label.y = 16)
1574562196223:# + geom_text_repel(aes(label = genus), size = 3)
1574562196224:# + scale_x_continuous(trans='log10')
1574562196224:# + scale_y_continuous(trans='log10')
1574562196225:+ facet_wrap(~depth)
1574562196226:# + theme(legend.position = 'none')
1574562196227:)
1574562216851:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574562216852:+ geom_smooth(level=0.95)
1574562216853:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 16, size = 2)
1574562216853:+ stat_cor(label.x = 3, label.y = 18)
1574562216854:+ stat_regline_equation(label.x = 3, label.y = 16)
1574562216855:# + geom_text_repel(aes(label = genus), size = 3)
1574562216855:# + scale_x_continuous(trans='log10')
1574562216856:# + scale_y_continuous(trans='log10')
1574562216856:+ facet_wrap(~depth)
1574562216857:# + theme(legend.position = 'none')
1574562216858:)
1574562226150:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574562226151:+ geom_smooth(level=0.95)
1574562226152:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 18, size = 2)
1574562226152:+ stat_cor(label.x = 3, label.y = 18)
1574562226153:+ stat_regline_equation(label.x = 3, label.y = 16)
1574562226153:# + geom_text_repel(aes(label = genus), size = 3)
1574562226154:# + scale_x_continuous(trans='log10')
1574562226154:# + scale_y_continuous(trans='log10')
1574562226155:+ facet_wrap(~depth)
1574562226155:# + theme(legend.position = 'none')
1574562226156:)
1574562273166:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574562273167:+ geom_smooth(level=0.95)
1574562273168:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21, size = 2)
1574562273168:+ stat_cor(label.x = 3, label.y = 18)
1574562273169:+ stat_regline_equation(label.x = 3, label.y = 16)
1574562273169:# + geom_text_repel(aes(label = genus), size = 3)
1574562273169:# + scale_x_continuous(trans='log10')
1574562273170:# + scale_y_continuous(trans='log10')
1574562273170:+ facet_wrap(~depth)
1574562273171:# + theme(legend.position = 'none')
1574562273171:)
1574562426884:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574562426884:+ geom_smooth(level=0.95)
1574562426885:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21, size = 2.5)
1574562426885:+ stat_cor(label.x = 3, label.y = 18)
1574562426885:+ stat_regline_equation(label.x = 3, label.y = 16)
1574562426886:# + geom_text_repel(aes(label = genus), size = 3)
1574562426886:# + scale_x_continuous(trans='log10')
1574562426887:# + scale_y_continuous(trans='log10')
1574562426887:+ facet_wrap(~depth)
1574562426887:+ theme(panel.background = element_blank())
1574562426888:)
1574562440534:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574562440535:+ geom_smooth(level=0.95)
1574562440535:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21, size = 2.5)
1574562440536:+ stat_cor(label.x = 3, label.y = 18)
1574562440537:+ stat_regline_equation(label.x = 3, label.y = 16)
1574562440537:# + geom_text_repel(aes(label = genus), size = 3)
1574562440538:# + scale_x_continuous(trans='log10')
1574562440538:# + scale_y_continuous(trans='log10')
1574562440539:+ facet_wrap(~depth)
1574562440540:+ theme_bw()
1574562440540:+ theme(panel.background = element_blank())
1574562440541:)
1574562452981:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574562452982:+ geom_smooth(level=0.95)
1574562452983:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21, size = 2.5)
1574562452983:+ stat_cor(label.x = 3, label.y = 18)
1574562452984:+ stat_regline_equation(label.x = 3, label.y = 16)
1574562452985:# + geom_text_repel(aes(label = genus), size = 3)
1574562452985:# + scale_x_continuous(trans='log10')
1574562452986:# + scale_y_continuous(trans='log10')
1574562452987:+ facet_wrap(~depth)
1574562452987:+ theme_bw()
1574562452988:# + theme(panel.background = element_blank())
1574562452989:)
1574562502774:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574562502775:+ geom_smooth(level=0.95)
1574562502775:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21, size = 2.5)
1574562502776:+ stat_cor(label.x = 3, label.y = 18)
1574562502777:+ stat_regline_equation(label.x = 3, label.y = 16)
1574562502777:# + geom_text_repel(aes(label = genus), size = 3)
1574562502778:# + scale_x_continuous(trans='log10')
1574562502779:# + scale_y_continuous(trans='log10')
1574562502779:+ facet_wrap(~depth)
1574562502780:+ theme_bw()
1574562502781:+ theme(panel.background = element_blank(),
1574562502783:strip.background = element_blank())
1574562502785:)
1574562559765:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574562559766:+ geom_smooth(level=0.95)
1574562559766:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21, size = 2.5, alpha = 0.6)
1574562559766:+ stat_cor(label.x = 3, label.y = 18)
1574562559767:+ stat_regline_equation(label.x = 3, label.y = 16)
1574562559767:# + geom_text_repel(aes(label = genus), size = 3)
1574562559768:# + scale_x_continuous(trans='log10')
1574562559768:# + scale_y_continuous(trans='log10')
1574562559769:+ facet_wrap(~depth)
1574562559769:+ theme_bw()
1574562559770:+ theme(panel.background = element_blank(),
1574562559770:strip.background = element_blank())
1574562559770:)
1574562605309:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574562605310:+ geom_smooth(level=0.95)
1574562605310:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21, size = 3, alpha = 0.8)
1574562605311:+ stat_cor(label.x = 3, label.y = 18)
1574562605311:+ stat_regline_equation(label.x = 3, label.y = 16)
1574562605312:# + geom_text_repel(aes(label = genus), size = 3)
1574562605312:# + scale_x_continuous(trans='log10')
1574562605313:# + scale_y_continuous(trans='log10')
1574562605313:+ facet_wrap(~depth)
1574562605314:+ theme_bw()
1574562605314:+ theme(panel.background = element_blank(),
1574562605315:strip.background = element_blank())
1574562605315:)
1574562639239:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574562639240:+ geom_smooth(level=0.95)
1574562639240:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21, size = 3, alpha = 0.8)
1574562639241:+ stat_cor(label.x = 3, label.y = 18)
1574562639241:+ stat_regline_equation(label.x = 3, label.y = 16)
1574562639242:# + geom_text_repel(aes(label = genus), size = 3)
1574562639242:# + scale_x_continuous(trans='log10')
1574562639243:# + scale_y_continuous(trans='log10')
1574562639243:+ facet_wrap(~depth)
1574562639244:+ theme_classic()
1574562639244:+ theme(panel.background = element_blank(),
1574562639245:strip.background = element_blank())
1574562639245:)
1574562665730:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574562665730:+ geom_smooth(level=0.95)
1574562665731:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21, size = 3, alpha = 0.8)
1574562665732:+ stat_cor(label.x = 3, label.y = 18)
1574562665732:+ stat_regline_equation(label.x = 3, label.y = 16)
1574562665733:# + geom_text_repel(aes(label = genus), size = 3)
1574562665734:# + scale_x_continuous(trans='log10')
1574562665734:# + scale_y_continuous(trans='log10')
1574562665735:+ facet_wrap(~depth)
1574562665735:+ theme_classic2()
1574562665736:+ theme(panel.background = element_blank(),
1574562665737:strip.background = element_blank())
1574562665737:)
1574562771028:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574562771028:+ geom_smooth(level=0.95)
1574562771029:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21, size = 3, alpha = 0.8)
1574562771029:+ stat_cor(label.x = 3, label.y = 18)
1574562771030:+ stat_regline_equation(label.x = 3, label.y = 16)
1574562771031:# + geom_text_repel(aes(label = genus), size = 3)
1574562771031:# + scale_x_continuous(trans='log10')
1574562771032:# + scale_y_continuous(trans='log10')
1574562771032:+ facet_wrap(~depth, labeller = "label_both")
1574562771033:+ theme_classic2()
1574562771034:+ theme(panel.background = element_blank(),
1574562771034:strip.background = element_blank())
1574562771036:)
1574562847661:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574562847662:+ geom_smooth(level=0.95)
1574562847662:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21, size = 3, alpha = 0.8)
1574562847663:+ stat_cor(label.x = 3, label.y = 18)
1574562847664:+ stat_regline_equation(label.x = 3, label.y = 16)
1574562847664:# + geom_text_repel(aes(label = genus), size = 3)
1574562847665:# + scale_x_continuous(trans='log10')
1574562847666:# + scale_y_continuous(trans='log10')
1574562847667:+ facet_wrap(~depth, scales='free', labeller = "label_both")
1574562847667:+ theme_classic2()
1574562847668:+ theme(panel.background = element_blank(),
1574562847669:strip.background = element_blank())
1574562847669:)
1574562943397:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574562943397:+ geom_smooth(level=0.95)
1574562943398:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21, size = 3, alpha = 0.8)
1574562943399:+ stat_cor(label.x = 3, label.y = 18)
1574562943399:+ scale_fill_hue(l=40, c=35)
1574562943400:# + stat_regline_equation(label.x = 3, label.y = 16)
1574562943400:# + geom_text_repel(aes(label = genus), size = 3)
1574562943406:# + scale_x_continuous(trans='log10')
1574562943407:# + scale_y_continuous(trans='log10')
1574562943408:+ facet_wrap(~depth, scales='free', labeller = "label_both")
1574562943409:+ theme_classic2()
1574562943409:+ theme(panel.background = element_blank(),
1574562943410:strip.background = element_blank())
1574562943411:)
1574562955461:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574562955462:+ geom_smooth(level=0.95)
1574562955462:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21, size = 3, alpha = 0.8)
1574562955463:+ stat_cor(label.x = 3, label.y = 18)
1574562955463:+ scale_fill_hue(l=40)
1574562955463:# + stat_regline_equation(label.x = 3, label.y = 16)
1574562955464:# + geom_text_repel(aes(label = genus), size = 3)
1574562955464:# + scale_x_continuous(trans='log10')
1574562955464:# + scale_y_continuous(trans='log10')
1574562955465:+ facet_wrap(~depth, scales='free', labeller = "label_both")
1574562955465:+ theme_classic2()
1574562955465:+ theme(panel.background = element_blank(),
1574562955466:strip.background = element_blank())
1574562955466:)
1574562973026:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574562973027:+ geom_smooth(level=0.95)
1574562973027:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21, size = 3, alpha = 0.8)
1574562973028:+ stat_cor(label.x = 3, label.y = 18)
1574562973028:+ scale_fill_hue(c=40)
1574562973028:# + stat_regline_equation(label.x = 3, label.y = 16)
1574562973029:# + geom_text_repel(aes(label = genus), size = 3)
1574562973029:# + scale_x_continuous(trans='log10')
1574562973030:# + scale_y_continuous(trans='log10')
1574562973030:+ facet_wrap(~depth, scales='free', labeller = "label_both")
1574562973030:+ theme_classic2()
1574562973031:+ theme(panel.background = element_blank(),
1574562973031:strip.background = element_blank())
1574562973032:)
1574562987289:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574562987290:+ geom_smooth(level=0.95)
1574562987291:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21, size = 3, alpha = 0.8)
1574562987291:+ stat_cor(label.x = 3, label.y = 18)
1574562987292:+ scale_fill_hue(l=35)
1574562987292:# + stat_regline_equation(label.x = 3, label.y = 16)
1574562987293:# + geom_text_repel(aes(label = genus), size = 3)
1574562987294:# + scale_x_continuous(trans='log10')
1574562987294:# + scale_y_continuous(trans='log10')
1574562987295:+ facet_wrap(~depth, scales='free', labeller = "label_both")
1574562987295:+ theme_classic2()
1574562987296:+ theme(panel.background = element_blank(),
1574562987296:strip.background = element_blank())
1574562987297:)
1574563137560:depthLabels <- paste0(depths, "x")
1574563143487:(depthLabels <- paste0(depths, "x"))
1574563161263:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574563161264:+ geom_smooth(level=0.95)
1574563161264:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21, size = 3, alpha = 0.8)
1574563161265:+ stat_cor(label.x = 3, label.y = 18)
1574563161266:+ scale_fill_hue(l=35)
1574563161266:# + stat_regline_equation(label.x = 3, label.y = 16)
1574563161267:# + geom_text_repel(aes(label = genus), size = 3)
1574563161268:# + scale_x_continuous(trans='log10')
1574563161268:# + scale_y_continuous(trans='log10')
1574563161269:+ facet_wrap(~depth, scales='free', labeller = depthLabels)
1574563161270:+ theme_classic2()
1574563161270:+ theme(panel.background = element_blank(),
1574563161271:strip.background = element_blank())
1574563161271:)
1574563245892:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574563245892:+ geom_smooth(level=0.95)
1574563245892:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21, size = 3, alpha = 0.8)
1574563245893:+ stat_cor(label.x = 3, label.y = 18)
1574563245893:+ scale_fill_hue(l=35)
1574563245894:# + stat_regline_equation(label.x = 3, label.y = 16)
1574563245894:# + geom_text_repel(aes(label = genus), size = 3)
1574563245894:# + scale_x_continuous(trans='log10')
1574563245895:# + scale_y_continuous(trans='log10')
1574563245895:+ facet_wrap(~depth, scales='free', labeller(depth = depthLabels))
1574563245896:+ theme_classic2()
1574563245896:+ theme(panel.background = element_blank(),
1574563245896:strip.background = element_blank())
1574563245897:)
1574563285607:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574563285608:+ geom_smooth(level=0.95)
1574563285608:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21, size = 3, alpha = 0.8)
1574563285609:+ stat_cor(label.x = 3, label.y = 18)
1574563285610:+ scale_fill_hue(l=35)
1574563285610:# + stat_regline_equation(label.x = 3, label.y = 16)
1574563285611:# + geom_text_repel(aes(label = genus), size = 3)
1574563285611:# + scale_x_continuous(trans='log10')
1574563285612:# + scale_y_continuous(trans='log10')
1574563285612:+ facet_wrap(~depth, scales='free', labeller = labeller(depth = depthLabels))
1574563285613:+ theme_classic2()
1574563285615:+ theme(panel.background = element_blank(),
1574563285616:strip.background = element_blank())
1574563285617:)
1574563301907:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574563301908:+ geom_smooth(level=0.95)
1574563301909:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21, size = 3, alpha = 0.8)
1574563301909:+ stat_cor(label.x = 3, label.y = 18)
1574563301910:+ scale_fill_hue(l=35)
1574563301910:# + stat_regline_equation(label.x = 3, label.y = 16)
1574563301911:# + geom_text_repel(aes(label = genus), size = 3)
1574563301911:# + scale_x_continuous(trans='log10')
1574563301912:# + scale_y_continuous(trans='log10')
1574563301912:+ facet_wrap(~depth, scales='free', labeller = depthLabels)
1574563301913:+ theme_classic2()
1574563301913:+ theme(panel.background = element_blank(),
1574563301914:strip.background = element_blank())
1574563301914:)
1574563313766:depthLabels
1574563508037:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574563508037:+ geom_smooth(level=0.95)
1574563508038:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21, size = 3, alpha = 0.8)
1574563508038:+ stat_cor(label.x = 3, label.y = 18)
1574563508039:+ scale_fill_hue(l=35)
1574563508039:# + stat_regline_equation(label.x = 3, label.y = 16)
1574563508040:# + geom_text_repel(aes(label = genus), size = 3)
1574563508040:# + scale_x_continuous(trans='log10')
1574563508041:# + scale_y_continuous(trans='log10')
1574563508041:+ facet_wrap(~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574563508042:+ theme_classic2()
1574563508042:+ theme(panel.background = element_blank(),
1574563508043:strip.background = element_blank())
1574563508043:)
1574563518214:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574563518215:+ geom_smooth(level=0.95)
1574563518215:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21, size = 3, alpha = 0.8)
1574563518215:+ stat_cor(label.x = 3, label.y = 18)
1574563518216:+ scale_fill_hue(l=35)
1574563518216:# + stat_regline_equation(label.x = 3, label.y = 16)
1574563518217:# + geom_text_repel(aes(label = genus), size = 3)
1574563518217:# + scale_x_continuous(trans='log10')
1574563518218:# + scale_y_continuous(trans='log10')
1574563518218:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574563518219:+ theme_classic2()
1574563518220:+ theme(panel.background = element_blank(),
1574563518221:strip.background = element_blank())
1574563518221:)
1574563530777:depthLabels
1574563535726:depthLabels
1574563542002:labeller(depth = depthLabels)
1574563590702:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574563590703:+ geom_smooth(level=0.95)
1574563590703:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21, size = 3, alpha = 0.8)
1574563590704:+ stat_cor(label.x = 3, label.y = 18)
1574563590705:+ scale_fill_hue(l=35)
1574563590705:# + stat_regline_equation(label.x = 3, label.y = 16)
1574563590706:# + geom_text_repel(aes(label = genus), size = 3)
1574563590707:# + scale_x_continuous(trans='log10')
1574563590707:# + scale_y_continuous(trans='log10')
1574563590708:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574563590708:+ theme_classic2()
1574563590709:+ theme(panel.background = element_blank(),
1574563590709:strip.background = element_blank())
1574563590710:)
1574563704084:(nasmes(depthLabels) <- depths)
1574563706933:(names(depthLabels) <- depths)
1574563710664:depthLabels
1574563716495:(depthLabels <- paste0(depths, "x"))
1574563716895:(names(depthLabels) <- depths)
1574563720706:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574563720706:+ geom_smooth(level=0.95)
1574563720707:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21, size = 3, alpha = 0.8)
1574563720707:+ stat_cor(label.x = 3, label.y = 18)
1574563720708:+ scale_fill_hue(l=35)
1574563720709:# + stat_regline_equation(label.x = 3, label.y = 16)
1574563720709:# + geom_text_repel(aes(label = genus), size = 3)
1574563720710:# + scale_x_continuous(trans='log10')
1574563720710:# + scale_y_continuous(trans='log10')
1574563720711:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574563720711:+ theme_classic2()
1574563720711:+ theme(panel.background = element_blank(),
1574563720712:strip.background = element_blank())
1574563720712:)
1574563782140:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574563782140:+ geom_smooth(level=0.95)
1574563782141:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21, size = 3, alpha = 0.8)
1574563782141:+ stat_cor(label.x = 3, label.y = 18)
1574563782142:+ scale_fill_hue(l=35)
1574563782142:# + stat_regline_equation(label.x = 3, label.y = 16)
1574563782142:# + geom_text_repel(aes(label = genus), size = 3)
1574563782143:+ scale_x_continuous(trans='log10')
1574563782143:+ scale_y_continuous(trans='log10')
1574563782144:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574563782144:+ theme_classic2()
1574563782145:+ theme(panel.background = element_blank(),
1574563782145:strip.background = element_blank())
1574563782146:)
1574563815984:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574563815985:+ geom_smooth(level=0.95)
1574563815985:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21, size = 3, alpha = 0.8)
1574563815986:+ stat_cor(label.x = 3, label.y = 18)
1574563815987:+ scale_fill_hue(l=35)
1574563815987:# + stat_regline_equation(label.x = 3, label.y = 16)
1574563815988:# + geom_text_repel(aes(label = genus), size = 3)
1574563815988:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574563815989:+ theme_classic2()
1574563815990:+ theme(panel.background = element_blank(),
1574563815990:strip.background = element_blank())
1574563815991:)
1574564083138:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574564083138:+ geom_smooth(level=0.95)
1574564083139:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21, size = 3, alpha = 0.8)
1574564083140:+ stat_cor(label.x = 3, label.y = 18)
1574564083140:+ scale_fill_hue(l=35)
1574564083141:# + stat_regline_equation(label.x = 3, label.y = 16)
1574564083142:# + geom_text_repel(aes(label = genus), size = 3)
1574564083144:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574564083145:+ theme_classic2()
1574564083145:+ theme(panel.background = element_blank(),
1574564083146:strip.background = element_blank(),
1574564083147:strip.text.x     = element_text(face = "italic",
1574564083148:size = baseTextSize,
1574564083149:margin = margin(0,0,6,0, "mm"))
1574564083149:)
1574564083151:}
1574564083152:# }
1574564083153:# ---------------------------------------------------------------------------
1574564083154:library(ggrepel)
1574564083449:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574564083450:+ geom_smooth(level=0.95)
1574564083450:+ geom_point(aes(color = !!as.symbol(rank)), size = 2)
1574564083451:+ stat_cor(label.x = 3, label.y = 34)
1574564083451:+ stat_regline_equation(label.x = 3, label.y = 32)
1574564083451:# + geom_text_repel(aes(label = genus), size = 3)
1574564083452:# + scale_x_continuous(trans='log10')
1574564083452:# + scale_y_continuous(trans='log10')
1574564083453:+ facet_wrap(~depth)
1574564083453:# + theme(legend.position = 'none')
1574564083454:)
1574564085743:(n <- ggscatter(dataToPlot,
1574564085743:#filter(dataToPlot, depth == 20),
1574564085744:x = "Observed", y = "Predicted",
1574564085744:# color = "genus", palette = "jco",
1574564085744:add = "reg.line", conf.int = TRUE)
1574564085745:# + scale_x_continuous(trans='log10')
1574564085745:# + scale_y_continuous(trans='log10')
1574564085745:+ stat_cor(label.x = 0.01)
1574564085746:+ facet_wrap(~depth)
1574564085746:)
1574564085752:(pred.shannon <- as_tibble(calculateShannonIndex(pred.relAbun, depths)))
1574564088130:(obs.shannon <- as_tibble(calculateShannonIndex(filter(obs.relAbun, !!as.symbol(rank)) != 'Unclassified'), depths)))
1574564141092:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574564141092:+ geom_smooth(level=0.95)
1574564141093:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21, size = 3, alpha = 0.8)
1574564141094:+ stat_cor(label.x = 3, label.y = 18)
1574564141094:+ scale_fill_hue(l=35)
1574564141095:# + stat_regline_equation(label.x = 3, label.y = 16)
1574564141095:# + geom_text_repel(aes(label = genus), size = 3)
1574564141096:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574564141097:+ theme_classic2()
1574564141097:+ theme(panel.background = element_blank(),
1574564141098:strip.background = element_blank(),
1574564141099:strip.text.x      = element_text(face = "italic",
1574564141099:size = baseTextSize,
1574564141100:margin = margin(0,0,6,0, "mm"))
1574564141101:)
1574564141103:)
1574564210218:import("scripts/ggplot_theme.R")
1574564246606:source(file = "scripts/ggplot_theme.R")
1574564252624:source('~/projects/classifier/scripts/ggplot_theme.R')
1574564275527:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574564275527:+ geom_smooth(level=0.95)
1574564275528:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21, size = 3, alpha = 0.8)
1574564275528:+ stat_cor(label.x = 3, label.y = 18)
1574564275529:+ scale_fill_hue(l=35)
1574564275530:# + stat_regline_equation(label.x = 3, label.y = 16)
1574564275530:# + geom_text_repel(aes(label = genus), size = 3)
1574564275531:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574564275531:+ theme_classic2()
1574564275532:+ theme(panel.background = element_blank(),
1574564275533:strip.background = element_blank(),
1574564275533:strip.text.x      = element_text(face = "italic",
1574564275534:size = baseTextSize,
1574564275535:margin = margin(0,0,6,0, "mm"))
1574564275535:)
1574564275536:)
1574564345097:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574564345098:+ geom_smooth(level=0.95)
1574564345099:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21, size = 3, alpha = 0.8)
1574564345099:+ stat_cor(label.x = 3, label.y = 18)
1574564345100:+ scale_fill_hue(l=35)
1574564345100:# + stat_regline_equation(label.x = 3, label.y = 16)
1574564345101:# + geom_text_repel(aes(label = genus), size = 3)
1574564345102:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574564345102:+ theme_classic2()
1574564345103:+ theme(panel.background = element_blank(),
1574564345104:strip.background = element_blank(),
1574564345104:strip.text.x      = element_text(size = baseTextSize,
1574564345105:margin = margin(4,0,2,0, "mm"))
1574564345106:)
1574564345106:)
1574564398496:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574564398497:+ geom_smooth(level=0.95)
1574564398497:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21, size = 3, alpha = 0.8)
1574564398499:+ stat_cor(label.x = 3, label.y = 18)
1574564398499:+ scale_fill_hue(l=35)
1574564398500:# + stat_regline_equation(label.x = 3, label.y = 16)
1574564398500:# + geom_text_repel(aes(label = genus), size = 3)
1574564398501:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574564398502:+ theme_classic2()
1574564398502:+ publicationTheme()
1574564398503:+ theme(panel.background = element_blank(),
1574564398503:strip.background = element_blank(),
1574564398504:strip.text.x      = element_text(size = baseTextSize,
1574564398505:margin = margin(4,0,2,0, "mm"))
1574564398505:)
1574564398506:)
1574564490199:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574564490200:+ geom_smooth(level=0.95)
1574564490203:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21, size = 3, alpha = 0.8)
1574564490204:+ stat_cor(label.x = 3, label.y = 18)
1574564490204:+ scale_fill_hue(l=35)
1574564490205:# + stat_regline_equation(label.x = 3, label.y = 16)
1574564490205:# + geom_text_repel(aes(label = genus), size = 3)
1574564490205:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574564490206:+ theme_classic2()
1574564490206:+ publicationTheme()
1574564490207:+ theme(panel.background = element_blank(),
1574564490207:panel.grid.major = element_blank(),
1574564490208:panel.grid.minor = element_blank(),
1574564490208:strip.background = element_blank(),
1574564490208:strip.text.x     = element_text(size = baseTextSize,
1574564490209:margin = margin(4,0,2,0, "mm"))
1574564490209:)
1574564490210:)
1574564527559:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574564527559:+ geom_smooth(level=0.95, color = "#666666")
1574564527560:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21, size = 3, alpha = 0.8)
1574564527560:+ stat_cor(label.x = 3, label.y = 18)
1574564527561:+ scale_fill_hue(l=35)
1574564527561:# + stat_regline_equation(label.x = 3, label.y = 16)
1574564527561:# + geom_text_repel(aes(label = genus), size = 3)
1574564527562:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574564527562:+ theme_classic2()
1574564527563:+ publicationTheme()
1574564527563:+ theme(panel.background = element_blank(),
1574564527564:panel.grid.major = element_blank(),
1574564527564:panel.grid.minor = element_blank(),
1574564527564:strip.background = element_blank(),
1574564527565:strip.text.x     = element_text(size = baseTextSize,
1574564527565:margin = margin(4,0,2,0, "mm"))
1574564527566:)
1574564527566:)
1574564627734:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574564627735:+ geom_smooth(level=0.95, color = "#666666")
1574564627736:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21, size = 3, alpha = 0.8)
1574564627736:+ stat_cor(label.x = 3, label.y = 18)
1574564627737:+ scale_fill_hue(l=35)
1574564627737:# + stat_regline_equation(label.x = 3, label.y = 16)
1574564627738:# + geom_text_repel(aes(label = genus), size = 3)
1574564627738:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574564627739:+ theme_classic2()
1574564627740:+ publicationTheme()
1574564627740:+ theme(panel.background = element_blank()
1574564627741:, panel.grid.major = element_blank()
1574564627741:, panel.grid.minor = element_blank()
1574564627742:, panel.spacing    = unit(4, "mm")
1574564627743:, strip.background = element_blank()
1574564627746:, strip.text.x     = element_text(size = baseTextSize,
1574564627747:margin = margin(4,0,2,0, "mm"))
1574564627747:)
1574564627748:)
1574564717838:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574564717839:+ geom_smooth(level=0.95, color = "#666666")
1574564717839:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574564717840:, size = 3, stroke = 1
1574564717840:# , alpha = 0.8
1574564717840:)
1574564717841:+ stat_cor(label.x = 3, label.y = 18)
1574564717841:+ scale_fill_hue(l=35)
1574564717842:# + stat_regline_equation(label.x = 3, label.y = 16)
1574564717842:# + geom_text_repel(aes(label = genus), size = 3)
1574564717842:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574564717843:+ theme_classic2()
1574564717843:+ publicationTheme()
1574564717843:+ theme(panel.background = element_blank()
1574564717844:, panel.grid.major = element_blank()
1574564717844:, panel.grid.minor = element_blank()
1574564717845:, panel.spacing    = unit(4, "mm")
1574564717845:, strip.background = element_blank()
1574564717845:, strip.text.x     = element_text(size = baseTextSize,
1574564717846:margin = margin(4,0,2,0, "mm"))
1574564717846:)
1574564717847:)
1574564733377:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574564733378:+ geom_smooth(level=0.95, color = "#666666")
1574564733379:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574564733379:, size = 3, stroke = 0.6
1574564733380:# , alpha = 0.8
1574564733380:)
1574564733381:+ stat_cor(label.x = 3, label.y = 18)
1574564733381:+ scale_fill_hue(l=35)
1574564733382:# + stat_regline_equation(label.x = 3, label.y = 16)
1574564733382:# + geom_text_repel(aes(label = genus), size = 3)
1574564733383:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574564733383:+ theme_classic2()
1574564733383:+ publicationTheme()
1574564733384:+ theme(panel.background = element_blank()
1574564733384:, panel.grid.major = element_blank()
1574564733384:, panel.grid.minor = element_blank()
1574564733385:, panel.spacing    = unit(4, "mm")
1574564733386:, strip.background = element_blank()
1574564733387:, strip.text.x     = element_text(size = baseTextSize,
1574564733387:margin = margin(4,0,2,0, "mm"))
1574564733388:)
1574564733389:)
1574564933215:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574564933216:+ geom_smooth(level=0.95, color = "#666666")
1574564933217:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574564933217:, size = 3, stroke = 0.6
1574564933218:# , alpha = 0.8
1574564933218:)
1574564933219:# + stat_cor(label.x = 3, label.y = 18)
1574564933220:+ stat_cor(
1574564933220:aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574564933221:label.x = 3
1574564933221:)
1574564933222:+ scale_fill_hue(l=35)
1574564933223:# + stat_regline_equation(label.x = 3, label.y = 16)
1574564933223:# + geom_text_repel(aes(label = genus), size = 3)
1574564933224:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574564933227:+ theme_classic2()
1574564933228:+ publicationTheme()
1574564933228:+ theme(panel.background = element_blank()
1574564933229:, panel.grid.major = element_blank()
1574564933230:, panel.grid.minor = element_blank()
1574564933230:, panel.spacing    = unit(4, "mm")
1574564933231:, strip.background = element_blank()
1574564933231:, strip.text.x     = element_text(size = baseTextSize,
1574564933232:margin = margin(4,0,2,0, "mm"))
1574564933232:)
1574564933233:)
1574564952825:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574564952825:+ geom_smooth(level=0.95, color = "#666666")
1574564952826:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574564952827:, size = 3, stroke = 0.6
1574564952827:# , alpha = 0.8
1574564952828:)
1574564952828:# + stat_cor(label.x = 3, label.y = 18)
1574564952829:+ stat_cor(
1574564952830:aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574564952830:label.x = 3
1574564952831:)
1574564952831:+ scale_fill_hue(l=35)
1574564952832:# + stat_regline_equation(label.x = 3, label.y = 16)
1574564952833:# + geom_text_repel(aes(label = genus), size = 3)
1574564952833:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574564952834:+ theme_classic2()
1574564952834:+ publicationTheme()
1574564952835:+ theme(panel.background = element_blank()
1574564952836:, panel.grid.major = element_blank()
1574564952837:, panel.grid.minor = element_blank()
1574564952838:, panel.spacing    = unit(8, "mm")
1574564952838:, strip.background = element_blank()
1574564952839:, strip.text.x     = element_text(size = baseTextSize,
1574564952840:margin = margin(4,0,2,0, "mm"))
1574564952840:)
1574564952840:)
1574565077844:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574565077847:+ geom_smooth(level=0.95, color = "#666666")
1574565077847:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574565077848:, size = 3, stroke = 0.6
1574565077849:# , alpha = 0.8
1574565077849:)
1574565077850:# + stat_cor(label.x = 3, label.y = 18)
1574565077850:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"),
1574565077851:size = 3),
1574565077851:label.x = 3
1574565077852:)
1574565077853:+ scale_fill_hue(l=35)
1574565077853:# + stat_regline_equation(label.x = 3, label.y = 16)
1574565077854:# + geom_text_repel(aes(label = genus), size = 3)
1574565077855:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574565077855:+ theme_classic2()
1574565077856:+ publicationTheme()
1574565077856:+ theme(panel.background = element_blank()
1574565077857:, panel.grid.major = element_blank()
1574565077857:, panel.grid.minor = element_blank()
1574565077858:, panel.spacing    = unit(8, "mm")
1574565077859:, strip.background = element_blank()
1574565077859:, strip.text.x     = element_text(size = baseTextSize,
1574565077860:margin = margin(4,0,2,0, "mm"))
1574565077860:)
1574565077861:)
1574565106332:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574565106333:+ geom_smooth(level=0.95, color = "#666666")
1574565106334:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574565106335:, size = 3, stroke = 0.6
1574565106335:# , alpha = 0.8
1574565106336:)
1574565106336:# + stat_cor(label.x = 3, label.y = 18)
1574565106337:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"),
1574565106338:size = 6),
1574565106338:label.x = 2
1574565106341:)
1574565106342:+ scale_fill_hue(l=35)
1574565106343:# + stat_regline_equation(label.x = 3, label.y = 16)
1574565106344:# + geom_text_repel(aes(label = genus), size = 3)
1574565106344:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574565106347:+ theme_classic2()
1574565106348:+ publicationTheme()
1574565106349:+ theme(panel.background = element_blank()
1574565106349:, panel.grid.major = element_blank()
1574565106350:, panel.grid.minor = element_blank()
1574565106351:, panel.spacing    = unit(8, "mm")
1574565106351:, strip.background = element_blank()
1574565106352:, strip.text.x     = element_text(size = baseTextSize,
1574565106353:margin = margin(4,0,2,0, "mm"))
1574565106354:)
1574565106354:)
1574565147685:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574565147685:+ geom_smooth(level=0.95, color = "#666666")
1574565147686:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574565147687:, size = 3, stroke = 0.6
1574565147687:# , alpha = 0.8
1574565147688:)
1574565147689:# + stat_cor(label.x = 3, label.y = 18)
1574565147690:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"),
1574565147690:size = 6),
1574565147691:label.x = 2
1574565147691:)
1574565147692:+ scale_fill_hue(l=45)
1574565147692:# + stat_regline_equation(label.x = 3, label.y = 16)
1574565147693:# + geom_text_repel(aes(label = genus), size = 3)
1574565147693:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574565147694:+ theme_classic2()
1574565147695:+ publicationTheme()
1574565147696:+ theme(panel.background = element_blank()
1574565147696:, panel.grid.major = element_blank()
1574565147697:, panel.grid.minor = element_blank()
1574565147698:, panel.spacing    = unit(8, "mm")
1574565147698:, strip.background = element_blank()
1574565147699:, strip.text.x     = element_text(size = baseTextSize,
1574565147699:margin = margin(4,0,2,0, "mm"))
1574565147700:)
1574565147701:)
1574565389830:packages <- c("ggpubr", "RColorBrewer", "gridExtra", "ggsci",
1574565389830:"extrafont", "grid", "tidyverse", "xlsx", "magrittr")
1574565399709:#
1574565399709:# if(!is.null(errorMessage)){
1574565399710:#   stop(errorMessage)
1574565399710:# } else {
1574565399711:# Code core - Begin -------------------------------------------------------
1574565399711:installAndLoadPackages(packages, verbose = TRUE)
1574565405589:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574565405590:+ geom_smooth(level=0.95, color = "#666666")
1574565405590:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574565405591:, size = 3, stroke = 0.6
1574565405591:# , alpha = 0.8
1574565405592:)
1574565405592:# + stat_cor(label.x = 3, label.y = 18)
1574565405593:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574565405593:label.x = 2
1574565405594:)
1574565405594:# + scale_fill_hue(l=45)
1574565405595:+ scale_fill_jco()
1574565405595:# + stat_regline_equation(label.x = 3, label.y = 16)
1574565405596:# + geom_text_repel(aes(label = genus), size = 3)
1574565405596:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574565405597:+ theme_classic2()
1574565405598:+ publicationTheme()
1574565405608:+ theme(panel.background = element_blank()
1574565405608:, panel.grid.major = element_blank()
1574565405609:, panel.grid.minor = element_blank()
1574565405610:, panel.spacing    = unit(8, "mm")
1574565405610:, strip.background = element_blank()
1574565405611:, strip.text.x     = element_text(size = baseTextSize,
1574565405611:margin = margin(4,0,2,0, "mm"))
1574565405612:)
1574565405613:)
1574565510455:length(relAbun.long$genus)
1574565527732:length(unique(relAbun.long$genus)))
1574565533163:length(unique(relAbun.long$genus))
1574565537042:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574565537043:+ geom_smooth(level=0.95, color = "#666666")
1574565537043:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574565537044:, size = 3, stroke = 0.6
1574565537045:# , alpha = 0.8
1574565537046:)
1574565537046:# + stat_cor(label.x = 3, label.y = 18)
1574565537046:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574565537047:label.x = 2
1574565537047:)
1574565537047:# + scale_fill_hue(l=45)
1574565537048:# + scale_fill_jco()
1574565537048:+ scale_fill_manual(values = pal_jco(alpha = 0.7)(length(unique(relAbun.long$genus))))
1574565537049:# + stat_regline_equation(label.x = 3, label.y = 16)
1574565537049:# + geom_text_repel(aes(label = genus), size = 3)
1574565537049:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574565537050:+ theme_classic2()
1574565537050:+ publicationTheme()
1574565537050:+ theme(panel.background = element_blank()
1574565537051:, panel.grid.major = element_blank()
1574565537051:, panel.grid.minor = element_blank()
1574565537052:, panel.spacing    = unit(8, "mm")
1574565537052:, strip.background = element_blank()
1574565537053:, strip.text.x     = element_text(size = baseTextSize,
1574565537053:margin = margin(4,0,2,0, "mm"))
1574565537054:)
1574565537054:)
1574565944914:relAbun.long[,as.symbol(rank)]
1574565951468:relAbun.long
1574565961528:relAbun.long
1574565966080:relAbun.long[,!!as.symbol(rank)]
1574565978167:nTaxa   <- length(unique(relAbun.long$!!as.symbol(rank)))
1574566006610:!!as.symbol(rank)
1574566015727:pull(relAbun.long, !!as.symbol(rank)
1574566017688:pull(relAbun.long, !!as.symbol(rank))
1574566023778:pull(relAbun.long, !!as.symbol(rank))
1574566026593:nTaxa   <- length(unique(pull(relAbun.long, !!as.symbol(rank))))
1574566028014:nTaxa
1574566049493:customPal <- palette(nTaxa)
1574566068500:packages <- c("ggpubr", "RColorBrewer", "gridExtra", "ggsci", "scales",
1574566068500:"extrafont", "grid", "tidyverse", "xlsx", "magrittr")
1574566072606:#
1574566072606:# if(!is.null(errorMessage)){
1574566072607:#   stop(errorMessage)
1574566072607:# } else {
1574566072608:# Code core - Begin -------------------------------------------------------
1574566072609:installAndLoadPackages(packages, verbose = TRUE)
1574566082049:pal(customPal)
1574566096183:show_col(customPal)
1574566099639:customPal <- palette(nTaxa)
1574566104787:palette   <- colorRampPalette(pal_jco())
1574566110632:pal_jco()
1574566117097:pal_jco(9)
1574566148493:pal_jco()(9)
1574566151318:palette   <- colorRampPalette(pal_jco()(9))
1574566152177:nTaxa     <- length(unique(pull(relAbun.long, !!as.symbol(rank))))
1574566152825:customPal <- palette(nTaxa)
1574566153503:show_col(customPal)
1574566173872:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574566173873:+ geom_smooth(level=0.95, color = "#666666")
1574566173874:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574566173874:, size = 3, stroke = 0.6
1574566173875:# , alpha = 0.8
1574566173876:)
1574566173877:# + stat_cor(label.x = 3, label.y = 18)
1574566173878:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574566173878:label.x = 2
1574566173879:)
1574566173880:# + scale_fill_hue(l=45)
1574566173880:# + scale_fill_jco()
1574566173881:+ scale_fill_manual(values = customPal))
1574566191970:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574566191970:+ geom_smooth(level=0.95, color = "#666666")
1574566191970:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574566191971:, size = 3, stroke = 0.6
1574566191971:# , alpha = 0.8
1574566191972:)
1574566191972:# + stat_cor(label.x = 3, label.y = 18)
1574566191973:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574566191973:label.x = 2
1574566191973:)
1574566191974:# + scale_fill_hue(l=45)
1574566191974:# + scale_fill_jco()
1574566191975:+ scale_fill_manual(values = customPal))
1574566203637:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574566203638:+ geom_smooth(level=0.95, color = "#666666")
1574566203639:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574566203640:, size = 3, stroke = 0.6
1574566203640:# , alpha = 0.8
1574566203641:)
1574566203641:# + stat_cor(label.x = 3, label.y = 18)
1574566203642:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574566203643:label.x = 2
1574566203643:)
1574566203644:# + scale_fill_hue(l=45)
1574566203644:# + scale_fill_jco()
1574566203645:+ scale_fill_manual(values = customPal)
1574566203651:# + stat_regline_equation(label.x = 3, label.y = 16)
1574566203652:# + geom_text_repel(aes(label = genus), size = 3)
1574566203653:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574566203654:+ theme_classic2()
1574566203654:+ publicationTheme()
1574566203655:+ theme(panel.background = element_blank()
1574566203655:, panel.grid.major = element_blank()
1574566203657:, panel.grid.minor = element_blank()
1574566203658:, panel.spacing    = unit(8, "mm")
1574566203658:, strip.background = element_blank()
1574566203659:, strip.text.x     = element_text(size = baseTextSize,
1574566203660:margin = margin(4,0,2,0, "mm"))
1574566203660:)
1574566203661:)
1574566422351:customPal <- pal_d3(palette = "category20c")(9)
1574566424444:show_col(customPal)
1574566434241:customPal <- pal_d3(palette = "category20c")
1574566435706:show_col(customPal)
1574566447265:customPal <- pal_d3(palette = "category20c")(nTaxa)
1574566452507:customPal <- pal_d3(palette = "category20c")(nTaxa)
1574566454181:show_col(customPal)
1574566460776:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574566460776:+ geom_smooth(level=0.95, color = "#666666")
1574566460777:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574566460778:, size = 3, stroke = 0.6
1574566460778:# , alpha = 0.8
1574566460779:)
1574566460780:# + stat_cor(label.x = 3, label.y = 18)
1574566460781:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574566460782:label.x = 2
1574566460783:)
1574566460784:# + scale_fill_hue(l=45)
1574566460784:# + scale_fill_jco()
1574566460785:+ scale_fill_manual(values = customPal)
1574566460786:# + stat_regline_equation(label.x = 3, label.y = 16)
1574566460788:# + geom_text_repel(aes(label = genus), size = 3)
1574566460789:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574566460790:+ theme_classic2()
1574566460790:+ publicationTheme()
1574566460791:+ theme(panel.background = element_blank()
1574566460792:, panel.grid.major = element_blank()
1574566460793:, panel.grid.minor = element_blank()
1574566460794:, panel.spacing    = unit(8, "mm")
1574566460794:, strip.background = element_blank()
1574566460795:, strip.text.x     = element_text(size = baseTextSize,
1574566460796:margin = margin(4,0,2,0, "mm"))
1574566460797:)
1574566460798:)
1574566546595:pal_d3(palette = "category20")
1574566552664:pal_d3(palette = "category20")()
1574566560988:pal_d3(palette = "category20")(nTaxa)
1574566563357:customPal <- pal_d3(palette = "category20")(nTaxa)
1574566564213:show_col(customPal)
1574566569316:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574566569317:+ geom_smooth(level=0.95, color = "#666666")
1574566569318:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574566569319:, size = 3, stroke = 0.6
1574566569319:# , alpha = 0.8
1574566569324:)
1574566569325:# + stat_cor(label.x = 3, label.y = 18)
1574566569325:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574566569327:label.x = 2
1574566569328:)
1574566569329:# + scale_fill_hue(l=45)
1574566569332:# + scale_fill_jco()
1574566569333:+ scale_fill_manual(values = customPal)
1574566569333:# + stat_regline_equation(label.x = 3, label.y = 16)
1574566569334:# + geom_text_repel(aes(label = genus), size = 3)
1574566569338:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574566569339:+ theme_classic2()
1574566569344:+ publicationTheme()
1574566569345:+ theme(panel.background = element_blank()
1574566569345:, panel.grid.major = element_blank()
1574566569346:, panel.grid.minor = element_blank()
1574566569347:, panel.spacing    = unit(8, "mm")
1574566569348:, strip.background = element_blank()
1574566569349:, strip.text.x     = element_text(size = baseTextSize,
1574566569349:margin = margin(4,0,2,0, "mm"))
1574566569350:)
1574566569351:)
1574566613534:customPal <- pal_d3(palette = "category20")(nTaxa)
1574566613995:show_col(customPal)
1574566625602:show_col(rev(customPal))
1574566629310:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574566629310:+ geom_smooth(level=0.95, color = "#666666")
1574566629311:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574566629312:, size = 3, stroke = 0.6
1574566629313:# , alpha = 0.8
1574566629314:)
1574566629315:# + stat_cor(label.x = 3, label.y = 18)
1574566629316:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574566629316:label.x = 2
1574566629317:)
1574566629318:# + scale_fill_hue(l=45)
1574566629318:# + scale_fill_jco()
1574566629319:+ scale_fill_manual(values = customPal)
1574566629321:# + stat_regline_equation(label.x = 3, label.y = 16)
1574566629322:# + geom_text_repel(aes(label = genus), size = 3)
1574566629322:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574566629323:+ theme_classic2()
1574566629324:+ publicationTheme()
1574566629324:+ theme(panel.background = element_blank()
1574566629325:, panel.grid.major = element_blank()
1574566629326:, panel.grid.minor = element_blank()
1574566629327:, panel.spacing    = unit(8, "mm")
1574566629327:, strip.background = element_blank()
1574566629328:, strip.text.x     = element_text(size = baseTextSize,
1574566629329:margin = margin(4,0,2,0, "mm"))
1574566629330:)
1574566629331:)
1574566705721:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574566705722:+ geom_smooth(level=0.95, color = "#666666")
1574566705723:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574566705724:, size = 3, stroke = 0.6
1574566705725:, position = jitter
1574566705726:# , alpha = 0.8
1574566705727:)
1574566705728:# + stat_cor(label.x = 3, label.y = 18)
1574566705728:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574566705729:label.x = 2
1574566705729:)
1574566705730:# + scale_fill_hue(l=45)
1574566705730:# + scale_fill_jco()
1574566705731:+ scale_fill_manual(values = customPal)
1574566705731:# + stat_regline_equation(label.x = 3, label.y = 16)
1574566705732:# + geom_text_repel(aes(label = genus), size = 3)
1574566705732:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574566705733:+ theme_classic2()
1574566705734:+ publicationTheme()
1574566705735:+ theme(panel.background = element_blank()
1574566705735:, panel.grid.major = element_blank()
1574566705736:, panel.grid.minor = element_blank()
1574566705736:, panel.spacing    = unit(8, "mm")
1574566705737:, strip.background = element_blank()
1574566705738:, strip.text.x     = element_text(size = baseTextSize,
1574566705738:margin = margin(4,0,2,0, "mm"))
1574566705739:)
1574566705740:)
1574566772838:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574566772839:+ geom_smooth(level=0.95, color = "#666666")
1574566772839:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574566772840:, size = 3, stroke = 0.6
1574566772841:# , position = jitter
1574566772841:# , alpha = 0.8
1574566772842:)
1574566772843:# + stat_cor(label.x = 3, label.y = 18)
1574566772843:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574566772848:label.x = 2
1574566772849:)
1574566772850:# + scale_fill_hue(l=45)
1574566772851:# + scale_fill_jco()
1574566772851:+ scale_fill_manual(values = customPal)
1574566772852:# + stat_regline_equation(label.x = 3, label.y = 16)
1574566772853:# + geom_text_repel(aes(label = genus), size = 3)
1574566772853:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574566772854:+ theme_classic2()
1574566772855:+ publicationTheme()
1574566772855:+ theme(panel.background = element_blank()
1574566772856:, panel.grid.major = element_blank()
1574566772857:, panel.grid.minor = element_blank()
1574566772857:, panel.spacing    = unit(8, "mm")
1574566772859:, strip.background = element_blank()
1574566772860:, strip.text.x     = element_text(size = baseTextSize,
1574566772861:margin = margin(4,0,2,0, "mm"))
1574566772861:)
1574566772862:)
1574566826122:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574566826122:+ geom_smooth(level=0.95, color = "#666666")
1574566826123:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574566826123:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574566826124:, size = 2, stroke = 0.6
1574566826124:# , position = jitter
1574566826125:# , alpha = 0.8
1574566826125:)
1574566826126:# + stat_cor(label.x = 3, label.y = 18)
1574566826127:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574566826128:label.x = 2
1574566826128:)
1574566826129:# + scale_fill_hue(l=45)
1574566826130:# + scale_fill_jco()
1574566826130:+ scale_fill_manual(values = customPal)
1574566826131:# + stat_regline_equation(label.x = 3, label.y = 16)
1574566826132:# + geom_text_repel(aes(label = genus), size = 3)
1574566826132:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574566826134:+ theme_classic2()
1574566826135:+ publicationTheme()
1574566826136:+ theme(panel.background = element_blank()
1574566826137:, panel.grid.major = element_blank()
1574566826137:, panel.grid.minor = element_blank()
1574566826138:, panel.spacing    = unit(8, "mm")
1574566826139:, strip.background = element_blank()
1574566826139:, strip.text.x     = element_text(size = baseTextSize,
1574566826140:margin = margin(4,0,2,0, "mm"))
1574566826141:)
1574566826142:)
1574566849314:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574566849315:+ geom_smooth(level=0.95, color = "#666666")
1574566849315:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574566849316:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574566849317:, size = 2,5, stroke = 0.6
1574566849318:# , position = jitter
1574566849318:# , alpha = 0.8
1574566849319:)
1574566849320:# + stat_cor(label.x = 3, label.y = 18)
1574566849320:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574566849321:label.x = 2
1574566849334:)
1574566849335:# + scale_fill_hue(l=45)
1574566849335:# + scale_fill_jco()
1574566849336:+ scale_fill_manual(values = customPal)
1574566849337:# + stat_regline_equation(label.x = 3, label.y = 16)
1574566849337:# + geom_text_repel(aes(label = genus), size = 3)
1574566849338:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574566849339:+ theme_classic2()
1574566849342:+ publicationTheme()
1574566849342:+ theme(panel.background = element_blank()
1574566849343:, panel.grid.major = element_blank()
1574566849344:, panel.grid.minor = element_blank()
1574566849345:, panel.spacing    = unit(8, "mm")
1574566849345:, strip.background = element_blank()
1574566849346:, strip.text.x     = element_text(size = baseTextSize,
1574566849347:margin = margin(4,0,2,0, "mm"))
1574566849348:)
1574566849348:)
1574566855212:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574566855213:+ geom_smooth(level=0.95, color = "#666666")
1574566855214:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574566855215:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574566855216:, size = 2.5, stroke = 0.6
1574566855217:# , position = jitter
1574566855218:# , alpha = 0.8
1574566855218:)
1574566855219:# + stat_cor(label.x = 3, label.y = 18)
1574566855220:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574566855221:label.x = 2
1574566855222:)
1574566855224:# + scale_fill_hue(l=45)
1574566855224:# + scale_fill_jco()
1574566855225:+ scale_fill_manual(values = customPal)
1574566855226:# + stat_regline_equation(label.x = 3, label.y = 16)
1574566855227:# + geom_text_repel(aes(label = genus), size = 3)
1574566855227:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574566855228:+ theme_classic2()
1574566855229:+ publicationTheme()
1574566855229:+ theme(panel.background = element_blank()
1574566855230:, panel.grid.major = element_blank()
1574566855231:, panel.grid.minor = element_blank()
1574566855231:, panel.spacing    = unit(8, "mm")
1574566855232:, strip.background = element_blank()
1574566855233:, strip.text.x     = element_text(size = baseTextSize,
1574566855234:margin = margin(4,0,2,0, "mm"))
1574566855234:)
1574566855235:)
1574566888978:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574566888979:+ geom_smooth(level=0.95, color = "#666666")
1574566888980:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574566888980:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574566888981:, size = 3, stroke = 0.6
1574566888981:# , position = jitter
1574566888982:, alpha = 0.8
1574566888983:)
1574566888983:# + stat_cor(label.x = 3, label.y = 18)
1574566888984:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574566888984:label.x = 2
1574566888995:)
1574566888996:# + scale_fill_hue(l=45)
1574566888997:# + scale_fill_jco()
1574566888997:+ scale_fill_manual(values = customPal)
1574566888998:# + stat_regline_equation(label.x = 3, label.y = 16)
1574566888999:# + geom_text_repel(aes(label = genus), size = 3)
1574566889017:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574566889018:+ theme_classic2()
1574566889021:+ publicationTheme()
1574566889022:+ theme(panel.background = element_blank()
1574566889023:, panel.grid.major = element_blank()
1574566889024:, panel.grid.minor = element_blank()
1574566889024:, panel.spacing    = unit(8, "mm")
1574566889025:, strip.background = element_blank()
1574566889026:, strip.text.x     = element_text(size = baseTextSize,
1574566889027:margin = margin(4,0,2,0, "mm"))
1574566889027:)
1574566889028:)
1574566996408:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574566996410:+ geom_smooth(level=0.95, color = "#666666")
1574566996410:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574566996411:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574566996412:#              , position = jitter
1574566996413:, size = 3, stroke = 0.6
1574566996414:# , alpha = 0.8
1574566996414:)
1574566996415:# + stat_cor(label.x = 3, label.y = 18)
1574566996415:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574566996416:label.x = 2
1574566996417:)
1574566996417:# + scale_fill_hue(l=45)
1574566996418:# + scale_fill_jco()
1574566996420:+ scale_fill_manual(values = customPal)
1574566996421:# + stat_regline_equation(label.x = 3, label.y = 16)
1574566996422:# + geom_text_repel(aes(label = genus), size = 3)
1574566996423:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574566996424:+ theme_classic2()
1574566996425:+ publicationTheme()
1574566996425:+ theme(panel.background = element_blank()
1574566996426:, panel.grid.major = element_blank()
1574566996427:, panel.grid.minor = element_blank()
1574566996428:, panel.spacing    = unit(8, "mm")
1574566996429:, strip.background = element_blank()
1574566996429:, strip.text.x     = element_text(size = baseTextSize,
1574566996430:margin = margin(4,0,2,0, "mm"))
1574566996431:)
1574566996432:)
1574567066199:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574567066200:+ geom_smooth(level=0.95, color = "#666666")
1574567066201:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574567066202:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574567066214:#              , position = jitter
1574567066215:, size = 3, stroke = 0.6
1574567066215:# , alpha = 0.8
1574567066216:)
1574567066217:# + stat_cor(label.x = 3, label.y = 18)
1574567066217:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574567066218:label.x = 2
1574567066219:)
1574567066220:# + scale_fill_hue(l=45)
1574567066221:# + scale_fill_jco()
1574567066221:+ scale_fill_manual(values = customPal)
1574567066222:# + stat_regline_equation(label.x = 3, label.y = 16)
1574567066223:# + geom_text_repel(aes(label = genus), size = 3)
1574567066224:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574567066225:+ theme_classic2()
1574567066238:+ publicationTheme()
1574567066239:+ theme(panel.background = element_blank()
1574567066239:, panel.grid.major = element_blank()
1574567066240:, panel.grid.minor = element_blank()
1574567066241:, panel.spacing    = unit(8, "mm")
1574567066242:, strip.background = element_blank()
1574567066243:, strip.text.x     = element_text(size = baseTextSize,
1574567066244:margin = margin(6,0,2,0, "mm"))
1574567066245:)
1574567066246:)
1574567097132:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574567097133:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574567097134:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574567097135:#              , position = jitter
1574567097135:, size = 3, stroke = 0.6
1574567097136:# , alpha = 0.8
1574567097138:)
1574567097139:+ geom_smooth(level=0.95, color = "#666666")
1574567097140:# + stat_cor(label.x = 3, label.y = 18)
1574567097140:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574567097141:label.x = 2
1574567097142:)
1574567097142:# + scale_fill_hue(l=45)
1574567097143:# + scale_fill_jco()
1574567097144:+ scale_fill_manual(values = customPal)
1574567097144:# + stat_regline_equation(label.x = 3, label.y = 16)
1574567097145:# + geom_text_repel(aes(label = genus), size = 3)
1574567097146:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574567097146:+ theme_classic2()
1574567097147:+ publicationTheme()
1574567097148:+ theme(panel.background = element_blank()
1574567097148:, panel.grid.major = element_blank()
1574567097149:, panel.grid.minor = element_blank()
1574567097149:, panel.spacing    = unit(8, "mm")
1574567097150:, strip.background = element_blank()
1574567097151:, strip.text.x     = element_text(size = baseTextSize,
1574567097152:margin = margin(6,0,2,0, "mm"))
1574567097152:)
1574567097153:)
1574567116885:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574567116885:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574567116886:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574567116887:#              , position = jitter
1574567116887:, size = 3, stroke = 0.6
1574567116888:# , alpha = 0.8
1574567116889:)
1574567116889:+ geom_smooth(level=0.95, color = "#333333")
1574567116890:# + stat_cor(label.x = 3, label.y = 18)
1574567116891:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574567116891:label.x = 2
1574567116892:)
1574567116893:# + scale_fill_hue(l=45)
1574567116893:# + scale_fill_jco()
1574567116894:+ scale_fill_manual(values = customPal)
1574567116895:# + stat_regline_equation(label.x = 3, label.y = 16)
1574567116895:# + geom_text_repel(aes(label = genus), size = 3)
1574567116896:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574567116897:+ theme_classic2()
1574567116897:+ publicationTheme()
1574567116898:+ theme(panel.background = element_blank()
1574567116899:, panel.grid.major = element_blank()
1574567116900:, panel.grid.minor = element_blank()
1574567116901:, panel.spacing    = unit(8, "mm")
1574567116902:, strip.background = element_blank()
1574567116903:, strip.text.x     = element_text(size = baseTextSize,
1574567116904:margin = margin(6,0,2,0, "mm"))
1574567116904:)
1574567116905:)
1574567231471:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574567231472:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574567231473:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574567231474:#              , position = jitter
1574567231474:, size = 3, stroke = 0.6
1574567231475:# , alpha = 0.8
1574567231476:)
1574567231477:+ geom_smooth(level=0.95, color = "#333333", size = 2)
1574567231477:# + stat_cor(label.x = 3, label.y = 18)
1574567231478:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574567231479:label.x = 2
1574567231479:)
1574567231480:# + scale_fill_hue(l=45)
1574567231481:# + scale_fill_jco()
1574567231481:+ scale_fill_manual(values = customPal)
1574567231482:# + stat_regline_equation(label.x = 3, label.y = 16)
1574567231483:# + geom_text_repel(aes(label = genus), size = 3)
1574567231483:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574567231484:+ theme_classic2()
1574567231484:+ publicationTheme()
1574567231485:+ theme(panel.background = element_blank()
1574567231486:, panel.grid.major = element_blank()
1574567231487:, panel.grid.minor = element_blank()
1574567231487:, panel.spacing    = unit(8, "mm")
1574567231488:, strip.background = element_blank()
1574567231489:, strip.text.x     = element_text(size = baseTextSize,
1574567231489:margin = margin(6,0,2,0, "mm"))
1574567231490:)
1574567231491:)
1574567255736:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574567255737:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574567255738:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574567255739:#              , position = jitter
1574567255739:, size = 3, stroke = 0.6
1574567255740:# , alpha = 0.8
1574567255741:)
1574567255745:+ geom_smooth(level=0.95, color = "#333333", size = 0.5)
1574567255746:# + stat_cor(label.x = 3, label.y = 18)
1574567255747:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574567255748:label.x = 2
1574567255857:)
1574567255857:# + scale_fill_hue(l=45)
1574567255858:# + scale_fill_jco()
1574567255858:+ scale_fill_manual(values = customPal)
1574567255859:# + stat_regline_equation(label.x = 3, label.y = 16)
1574567255859:# + geom_text_repel(aes(label = genus), size = 3)
1574567255860:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574567255860:+ theme_classic2()
1574567255861:+ publicationTheme()
1574567255861:+ theme(panel.background = element_blank()
1574567255862:, panel.grid.major = element_blank()
1574567255862:, panel.grid.minor = element_blank()
1574567255863:, panel.spacing    = unit(8, "mm")
1574567255863:, strip.background = element_blank()
1574567255864:, strip.text.x     = element_text(size = baseTextSize,
1574567255864:margin = margin(6,0,2,0, "mm"))
1574567255865:)
1574567255865:)
1574567273323:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574567273323:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574567273324:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574567273325:#              , position = jitter
1574567273325:, size = 3, stroke = 0.6
1574567273326:# , alpha = 0.8
1574567273326:)
1574567273327:+ geom_smooth(level=0.95, color = "#333333", size = 0.8)
1574567273328:# + stat_cor(label.x = 3, label.y = 18)
1574567273328:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574567273329:label.x = 2
1574567273330:)
1574567273331:# + scale_fill_hue(l=45)
1574567273332:# + scale_fill_jco()
1574567273334:+ scale_fill_manual(values = customPal)
1574567273335:# + stat_regline_equation(label.x = 3, label.y = 16)
1574567273336:# + geom_text_repel(aes(label = genus), size = 3)
1574567273336:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574567273337:+ theme_classic2()
1574567273338:+ publicationTheme()
1574567273339:+ theme(panel.background = element_blank()
1574567273339:, panel.grid.major = element_blank()
1574567273340:, panel.grid.minor = element_blank()
1574567273340:, panel.spacing    = unit(8, "mm")
1574567273341:, strip.background = element_blank()
1574567273341:, strip.text.x     = element_text(size = baseTextSize,
1574567273342:margin = margin(6,0,2,0, "mm"))
1574567273342:)
1574567273343:)
1574567341714:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574567341715:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574567341715:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574567341716:#              , position = jitter
1574567341717:, size = 3, stroke = 0.6
1574567341718:# , alpha = 0.8
1574567341718:)
1574567341719:+ geom_smooth(level=0.95, color = "#333333", size = 0.8)
1574567341720:# + stat_cor(label.x = 3, label.y = 18)
1574567341721:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574567341721:label.x = 2
1574567341722:)
1574567341723:+ scale_x_continuous(trans='log2')
1574567341723:# + scale_fill_hue(l=45)
1574567341724:# + scale_fill_jco()
1574567341725:+ scale_fill_manual(values = customPal)
1574567341726:# + stat_regline_equation(label.x = 3, label.y = 16)
1574567341727:# + geom_text_repel(aes(label = genus), size = 3)
1574567341738:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574567341738:+ theme_classic2()
1574567341739:+ publicationTheme()
1574567341740:+ theme(panel.background = element_blank()
1574567341741:, panel.grid.major = element_blank()
1574567341742:, panel.grid.minor = element_blank()
1574567341743:, panel.spacing    = unit(8, "mm")
1574567341743:, strip.background = element_blank()
1574567341744:, strip.text.x     = element_text(size = baseTextSize,
1574567341745:margin = margin(6,0,2,0, "mm"))
1574567341746:)
1574567341762:)
1574567374183:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574567374183:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574567374184:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574567374185:#              , position = jitter
1574567374185:, size = 3, stroke = 0.6
1574567374186:# , alpha = 0.8
1574567374187:)
1574567374187:+ geom_smooth(level=0.95, color = "#333333", size = 0.8)
1574567374188:# + stat_cor(label.x = 3, label.y = 18)
1574567374189:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574567374189:label.x = 2
1574567374190:)
1574567374191:+ scale_x_continuous(trans='log2')
1574567374191:+ scale_y_continuous(trans='log2')
1574567374192:# + scale_fill_hue(l=45)
1574567374193:# + scale_fill_jco()
1574567374194:+ scale_fill_manual(values = customPal)
1574567374194:# + stat_regline_equation(label.x = 3, label.y = 16)
1574567374195:# + geom_text_repel(aes(label = genus), size = 3)
1574567374196:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574567374197:+ theme_classic2()
1574567374198:+ publicationTheme()
1574567374198:+ theme(panel.background = element_blank()
1574567374199:, panel.grid.major = element_blank()
1574567374200:, panel.grid.minor = element_blank()
1574567374201:, panel.spacing    = unit(8, "mm")
1574567374202:, strip.background = element_blank()
1574567374202:, strip.text.x     = element_text(size = baseTextSize,
1574567374203:margin = margin(6,0,2,0, "mm"))
1574567374204:)
1574567374205:)
1574567554892:titleLabel = paste("Sample", sam)
1574567555633:titleLabel
1574567611347:titleLabel = paste("Sample", sam)
1574567611911:subtitleLabel = paste("nifH - Full lenght (>=750 bp)", sam)
1574567667326:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574567667327:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574567667328:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574567667328:#              , position = jitter
1574567667329:, size = 3, stroke = 0.6
1574567667330:# , alpha = 0.8
1574567667330:)
1574567667331:+ geom_smooth(level=0.95, color = "#333333", size = 0.8)
1574567667332:# + stat_cor(label.x = 3, label.y = 18)
1574567667332:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574567667333:label.x = 2
1574567667334:)
1574567667334:# + scale_x_continuous(trans='log2')
1574567667335:# + scale_y_continuous(trans='log2')
1574567667336:# + scale_fill_hue(l=45)
1574567667336:+ scale_fill_manual(values = customPal)
1574567667337:# + stat_regline_equation(label.x = 3, label.y = 16)
1574567667338:# + geom_text_repel(aes(label = genus), size = 3)
1574567667339:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574567667339:+ theme_classic2()
1574567667340:+ publicationTheme()
1574567667341:+ labs(title = titleLabel,
1574567667342:subtitle = subtitleLabel)
1574567667343:+ theme(panel.background = element_blank()
1574567667343:, panel.grid.major = element_blank()
1574567667344:, panel.grid.minor = element_blank()
1574567667345:, panel.spacing    = unit(8, "mm")
1574567667346:, title = element_text(hjust = 0.5)
1574567667346:, strip.background = element_blank()
1574567667347:, strip.text.x     = element_text(size = baseTextSize,
1574567667348:margin = margin(6,0,2,0, "mm"))
1574567667349:)
1574567667350:)
1574567996179:subtitleLabel = paste(expression("nif",italic(H)," - Full lenght (",>=,"750 bp)"))
1574568297865:subtitleLabel = bquote(italic("nifH") ~ "full length (">= ~ "bp)")
1574568303655:# expression(Value~is~sigma~R^{2}==0.6)
1574568303656:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574568303657:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574568303657:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574568303658:#              , position = jitter
1574568303659:, size = 3, stroke = 0.6
1574568303660:# , alpha = 0.8
1574568303660:)
1574568303661:+ geom_smooth(level=0.95, color = "#333333", size = 0.8)
1574568303662:# + stat_cor(label.x = 3, label.y = 18)
1574568303662:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574568303663:label.x = 2
1574568303664:)
1574568303664:# + scale_x_continuous(trans='log2')
1574568303665:# + scale_y_continuous(trans='log2')
1574568303666:# + scale_fill_hue(l=45)
1574568303666:+ scale_fill_manual(values = customPal)
1574568303669:# + stat_regline_equation(label.x = 3, label.y = 16)
1574568303669:# + geom_text_repel(aes(label = genus), size = 3)
1574568303670:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574568303671:+ theme_classic2()
1574568303671:+ publicationTheme()
1574568303672:+ labs(title = titleLabel,
1574568303673:subtitle = subtitleLabel)
1574568303674:+ theme(panel.background = element_blank()
1574568303675:, panel.grid.major = element_blank()
1574568303675:, panel.grid.minor = element_blank()
1574568303676:, panel.spacing    = unit(8, "mm")
1574568303677:, title = element_text(hjust = 0.5)
1574568303678:, strip.background = element_blank()
1574568303678:, strip.text.x     = element_text(size = baseTextSize,
1574568303679:margin = margin(6,0,2,0, "mm"))
1574568303680:)
1574568303681:)
1574568351902:subtitleLabel = bquote(italic("nifH") ~ "full length (">=750 ~ "bp)")
1574568353381:# expression(Value~is~sigma~R^{2}==0.6)
1574568353382:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574568353383:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574568353383:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574568353384:#              , position = jitter
1574568353384:, size = 3, stroke = 0.6
1574568353387:# , alpha = 0.8
1574568353388:)
1574568353389:+ geom_smooth(level=0.95, color = "#333333", size = 0.8)
1574568353390:# + stat_cor(label.x = 3, label.y = 18)
1574568353392:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574568353393:label.x = 2
1574568353396:)
1574568353396:# + scale_x_continuous(trans='log2')
1574568353397:# + scale_y_continuous(trans='log2')
1574568353398:# + scale_fill_hue(l=45)
1574568353399:+ scale_fill_manual(values = customPal)
1574568353399:# + stat_regline_equation(label.x = 3, label.y = 16)
1574568353400:# + geom_text_repel(aes(label = genus), size = 3)
1574568353400:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574568353408:+ theme_classic2()
1574568353409:+ publicationTheme()
1574568353409:+ labs(title = titleLabel,
1574568353410:subtitle = subtitleLabel)
1574568353425:+ theme(panel.background = element_blank()
1574568353431:, panel.grid.major = element_blank()
1574568353510:, panel.grid.minor = element_blank()
1574568353511:, panel.spacing    = unit(8, "mm")
1574568353512:, title = element_text(hjust = 0.5)
1574568353512:, strip.background = element_blank()
1574568353513:, strip.text.x     = element_text(size = baseTextSize,
1574568353514:margin = margin(6,0,2,0, "mm"))
1574568353515:)
1574568353516:)
1574568434814:# expression(Value~is~sigma~R^{2}==0.6)
1574568434815:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574568434815:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574568434816:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574568434816:#              , position = jitter
1574568434817:, size = 3, stroke = 0.6
1574568434821:# , alpha = 0.8
1574568434822:)
1574568434823:+ geom_smooth(level=0.95, color = "#333333", size = 0.8)
1574568434823:# + stat_cor(label.x = 3, label.y = 18)
1574568434824:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574568434824:label.x = 2
1574568434825:)
1574568434826:# + scale_x_continuous(trans='log2')
1574568434826:# + scale_y_continuous(trans='log2')
1574568434827:# + scale_fill_hue(l=45)
1574568434828:+ scale_fill_manual(values = customPal, name = "Genus")
1574568434828:# + stat_regline_equation(label.x = 3, label.y = 16)
1574568434829:# + geom_text_repel(aes(label = genus), size = 3)
1574568434830:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574568434830:+ theme_classic2()
1574568434831:+ publicationTheme()
1574568434832:+ labs(title = titleLabel,
1574568434832:subtitle = subtitleLabel)
1574568434833:+ theme(panel.background = element_blank()
1574568434835:, panel.grid.major = element_blank()
1574568434836:, panel.grid.minor = element_blank()
1574568434837:, panel.spacing    = unit(8, "mm")
1574568434838:, title = element_text(hjust = 0.5)
1574568434839:, strip.background = element_blank()
1574568434840:, strip.text.x     = element_text(size = baseTextSize,
1574568434840:margin = margin(6,0,2,0, "mm"))
1574568434841:)
1574568434842:)
1574568592552:# expression(Value~is~sigma~R^{2}==0.6)
1574568592553:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574568592553:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574568592554:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574568592555:#              , position = jitter
1574568592555:, size = 3, stroke = 0.6
1574568592556:# , alpha = 0.8
1574568592557:)
1574568592558:+ geom_smooth(level=0.95, color = "#333333", size = 0.8)
1574568592558:# + stat_cor(label.x = 3, label.y = 18)
1574568592559:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574568592560:label.x = 2
1574568592560:)
1574568592561:# + scale_x_continuous(trans='log2')
1574568592562:# + scale_y_continuous(trans='log2')
1574568592562:# + scale_fill_hue(l=45)
1574568592563:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574568592564:# + stat_regline_equation(label.x = 3, label.y = 16)
1574568592564:# + geom_text_repel(aes(label = genus), size = 3)
1574568592565:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574568592576:+ theme_classic2()
1574568592577:+ publicationTheme()
1574568592578:+ labs(title = titleLabel,
1574568592579:subtitle = subtitleLabel)
1574568592579:+ theme(panel.background = element_blank()
1574568592580:, panel.grid.major = element_blank()
1574568592581:, panel.grid.minor = element_blank()
1574568592582:, panel.spacing    = unit(8, "mm")
1574568592582:, title = element_text(hjust = 0.5)
1574568592583:, strip.background = element_blank()
1574568592584:, strip.text.x     = element_text(size = baseTextSize,
1574568592585:margin = margin(6,0,2,0, "mm"))
1574568592593:)
1574568592594:)
1574568610747:packages <- c("ggpubr", "RColorBrewer", "gridExtra", "ggsci", "scales", "stringr",
1574568610748:"extrafont", "grid", "tidyverse", "xlsx", "magrittr")
1574568617370:#
1574568617371:# if(!is.null(errorMessage)){
1574568617371:#   stop(errorMessage)
1574568617371:# } else {
1574568617372:# Code core - Begin -------------------------------------------------------
1574568617372:installAndLoadPackages(packages, verbose = TRUE)
1574568623871:# expression(Value~is~sigma~R^{2}==0.6)
1574568623871:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574568623872:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574568623873:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574568623873:#              , position = jitter
1574568623874:, size = 3, stroke = 0.6
1574568623874:# , alpha = 0.8
1574568623875:)
1574568623876:+ geom_smooth(level=0.95, color = "#333333", size = 0.8)
1574568623876:# + stat_cor(label.x = 3, label.y = 18)
1574568623877:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574568623877:label.x = 2
1574568623878:)
1574568623879:# + scale_x_continuous(trans='log2')
1574568623879:# + scale_y_continuous(trans='log2')
1574568623880:# + scale_fill_hue(l=45)
1574568623880:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574568623881:# + stat_regline_equation(label.x = 3, label.y = 16)
1574568623882:# + geom_text_repel(aes(label = genus), size = 3)
1574568623882:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574568623883:+ theme_classic2()
1574568623886:+ publicationTheme()
1574568623887:+ labs(title = titleLabel,
1574568623888:subtitle = subtitleLabel)
1574568623889:+ theme(panel.background = element_blank()
1574568623890:, panel.grid.major = element_blank()
1574568623890:, panel.grid.minor = element_blank()
1574568623891:, panel.spacing    = unit(8, "mm")
1574568623892:, title = element_text(hjust = 0.5)
1574568623892:, strip.background = element_blank()
1574568623893:, strip.text.x     = element_text(size = baseTextSize,
1574568623894:margin = margin(6,0,2,0, "mm"))
1574568623895:)
1574568623896:)
1574568647482:# expression(Value~is~sigma~R^{2}==0.6)
1574568647483:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574568647483:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574568647484:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574568647484:#              , position = jitter
1574568647484:, size = 3, stroke = 0.6
1574568647485:# , alpha = 0.8
1574568647485:)
1574568647485:+ geom_smooth(level=0.95, color = "#333333", size = 0.8)
1574568647486:# + stat_cor(label.x = 3, label.y = 18)
1574568647486:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574568647487:label.x = 2
1574568647487:)
1574568647487:str_to_sentence()
1574568647488:# + scale_x_continuous(trans='log2')
1574568647488:# + scale_y_continuous(trans='log2')
1574568647488:# + scale_fill_hue(l=45)
1574568647489:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574568647491:# + stat_regline_equation(label.x = 3, label.y = 16)
1574568647492:# + geom_text_repel(aes(label = genus), size = 3)
1574568647492:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574568647501:+ theme_classic2()
1574568647513:+ publicationTheme()
1574568647527:+ labs(title = titleLabel,
1574568647528:subtitle = subtitleLabel)
1574568647529:+ theme(panel.background = element_blank()
1574568647529:, panel.grid.major = element_blank()
1574568647530:, panel.grid.minor = element_blank()
1574568647530:, panel.spacing    = unit(8, "mm")
1574568647530:, title = element_text(hjust = 0.5)
1574568647531:, strip.background = element_blank()
1574568647531:, strip.text.x     = element_text(size = baseTextSize,
1574568647531:margin = margin(6,0,2,0, "mm"))
1574568647532:)
1574568647534:)
1574568765882:install.packages(c("ggplot2", "stringr", "tidyr", "tidyverse"))
1574568774225:install.packages(c("ggplot2", "stringr", "tidyr", "tidyverse"))
1574569640996:#!/usr/bin/env Rscript
1574569641027:# ##############################################################################
1574569641027:#  Author:   Hector Fabio Espitia-Navarro
1574569641028:#            Georgia Institute of Technology
1574569641028:#  Version:  1.0
1574569641029:#  Date:     11/04/2019
1574569641029:# ##############################################################################
1574569641030:# Install required packages -----------------------------------------------
1574569641031:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1574569641032:if(!file.exists(personal.lib.path))
1574569641032:dir.create(personal.lib.path)
1574569641033:printMessage <- function(message, verbose){
1574569641034:if(verbose)
1574569641034:cat(message)
1574569641035:}
1574569641038:# crayon::bold("Hola")
1574569641039:installAndLoadPackages <- function(pkg, verbose){
1574569641039:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1574569641041:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1574569641042:printMessage("Done!\n", verbose)
1574569641043:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1574569641044:if (length(new.pkg)) {
1574569641044:printMessage("Installing new packages... ", verbose)
1574569641045:install.packages(new.pkg, dependencies = TRUE,
1574569641045:repos="http://cran.rstudio.com/",
1574569641046:lib = personal.lib.path)
1574569641046:printMessage("Done!\n", verbose)
1574569641047:}
1574569641047:printMessage("Loading required packages... ", verbose)
1574569641048:sapply(pkg, function(x){
1574569641049:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1574569641049:})
1574569641050:printMessage("Done!\n", verbose)
1574569641050:}
1574569641051:packages <- c("ggpubr", "RColorBrewer", "gridExtra", "ggsci", "scales", "stringr",
1574569641052:"extrafont", "grid", "tidyverse", "xlsx", "magrittr")
1574569641056:# packages <- c("tidyverse", "magrittr")
1574569641056:installAndLoadPackages(c("argparser", "stringr"), verbose = FALSE)
1574569641329:# Command line arguments processing ---------------------------------------
1574569641330:# Get script name
1574569641331:initial.options <- commandArgs(trailingOnly = FALSE)
1574569641343:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1574569641344:# Process command line arguments
1574569641344:# Create a parser
1574569641345:p <- arg_parser("This script is intended to assess STing classifier results.",
1574569641345:name = script.name)
1574569641435:# Add Positional arguments (required)
1574569641436:p <- add_argument(p, "pred_file", help = "STing predictions file. BIOM table: accn, read counts, taxonomy")
1574569641438:p <- add_argument(p, "ref_file", help = "Reference file. Tab separated file BIOM like: accn, read counts")
1574569641440:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1574569641441:default = "summary_results")
1574569641445:# Initialization of variables ---------------------------------------------
1574569641446:# "results/predicted.no_dup.summary.tsv"
1574569641447:dataDir    <- str_glue("results")
1574569641492:predFile   <- str_glue("{dataDir}/predicted.no_dup.summary.tsv")
1574569641494:refFile    <- str_glue("data/samples/full_taxonomy/communities/observed.read_counts.tsv")
1574569641496:prefix     <- str_glue("{dataDir}/summary_results")
1574569641498:# Parse command line arguments --------------------------------------------
1574569641499:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1574569641499:argv <- list()
1574569641500:if(command.line) {
1574569641501:argv <- parse_args(p)
1574569641502:} else {
1574569641504:argv <- parse_args(p, list(predFile,
1574569641505:refFile,
1574569641506:"--prefix", prefix))
1574569641506:}
1574569641512:# Get argument values from the command line
1574569641513:predFile   <- argv$pred_file
1574569641513:refFile    <- argv$ref_file
1574569641515:prefix     <- argv$prefix
1574569641518:# Function to check if file exists ----------------------------------------
1574569641519:CheckFileExists <- function(fileList) {
1574569641519:non.exist.files <- !file.exists(fileList)
1574569641520:if(any(non.exist.files)) {
1574569641522:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1574569641523:}
1574569641523:}
1574569641524:# Check for input files ---------------------------------------------------
1574569641525:filesToCheck <- c(predFile, refFile)
1574569641526:errorMessage  <- CheckFileExists(filesToCheck)
1574569641527:#
1574569641528:# if(!is.null(errorMessage)){
1574569641528:#   stop(errorMessage)
1574569641528:# } else {
1574569641529:# Code core - Begin -------------------------------------------------------
1574569641529:installAndLoadPackages(packages, verbose = TRUE)
1574569650980:options(stringsAsFactors = F)
1574569650983:source(file = "scripts/ggplot_theme.R")
1574569651135:# FUNCTIONS ------------------------------------------------------------------
1574569651137:# Calculates relative abundance level of a grouped table -------------------
1574569651144:calculateRelativeAbundance <- function(readCountsTable, depths) {
1574569651145:# totalReads <- unlist(readCountsTable %>% summarise_at(sampleCols, sum))
1574569651146:outTable <- readCountsTable
1574569651146:totalReads <- lapply(readCountsTable[-1], sum)
1574569651147:for(sample in depths) {
1574569651147:outTable[[sample]] <- outTable[[sample]] / totalReads[[sample]] * 100
1574569651148:}
1574569651148:return(outTable)
1574569651149:}
1574569651151:# Clacultes relative abundance at a given rank level -----------------------
1574569651151:getRelativeAbundance <- function(countsTable, group_rank, depths) {
1574569651152:# print(group_rank)
1574569651152:# group_rank <- enquo(group_rank)
1574569651158:groupedData <- countsTable %>% group_by(!! group_rank) %>%
1574569651158:summarise_at(depths, sum)
1574569651159:calculateRelativeAbundance(groupedData, depths)
1574569651160:}
1574569651161:# Clacultes relative abundance at a given rank level -----------------------
1574569651162:getAbundance <- function(countsTable, group_rank, depths) {
1574569651162:# print(group_rank)
1574569651163:# group_rank <- enquo(group_rank)
1574569651163:countsTable %>% group_by(!! group_rank) %>%
1574569651164:summarise_at(depths, sum)
1574569651164:}
1574569651166:# Calculate Shannon index at the level of a grouped table -------------------
1574569651166:calculateShannonIndex <- function(countsTable, depths) {
1574569651167:# totalReads <- unlist(readCountsTable %>% summarise_at(sampleCols, sum))
1574569651167:totalReads <- lapply(countsTable[-1], sum)
1574569651168:lapply(countsTable[-1], function(sample){
1574569651169:sum(sample * log(sample))
1574569651169:})
1574569651171:}
1574569651173:# LOAD DATA ---------------------------------------------------------------
1574569651173:(obsData  <- read_tsv(refFile))
1574569651265:(predData <- read_tsv(predFile))
1574569651266:(samples <- unique(obsData$sample))
1574569651268:(depths  <- names(obsData)[2:8])
1574569651269:(kList   <- unique(predData$k))
1574569651273:(samplesByType <- data.frame("Full" = c("FA", "FB"),
1574569651273:"Partial" = c("PA", "PB")))
1574569651279:# Process samples ---------------------------------------------------------
1574569651279:rank <- "genus"
1574569651280:(ksize <- kList[2])
1574569651281:# for(type in names(samplesByType)) {
1574569651281:# (type <- "Full") # test value
1574569651282:# (samples <- samplesByType[,type])
1574569659068:(sam <- "FA")    # test value
1574569659069:# Subset data
1574569659070:(obsSubset <- obsData %>%
1574569659071:filter(sample == sam))
1574569659079:(predSubset <- predData %>%
1574569659079:filter(sample == sam,
1574569659080:k == ksize))
1574569659083:# Check total number of reads on input data
1574569659083:(obsSubset%>% summarise_at(depths, sum))
1574569659087:(predSubset %>% summarise_at(depths, sum))
1574569659093:# Read counts to long format
1574569659093:(readCounts.long <- left_join(x = getAbundance(obsSubset, as.symbol(rank), depths) %>%
1574569659094:gather(key = "depth", value = "Observed", -1),
1574569659094:y = getAbundance(predSubset, as.symbol(rank), depths) %>%
1574569659095:gather(key = "depth", value = "Predicted", -1)
1574569659096:# , by = c(rank, "depth")
1574569659096:) %>%
1574569659097:mutate(depth = factor(depth)) %>%
1574569659097:replace_na(list("Observed" = 0, "Predicted" = 0))
1574569659098:)
1574569659101:# Calcultae relative abundance
1574569659102:(pred.relAbun <- getRelativeAbundance(predSubset, as.symbol(rank), depths))
1574569659106:(obs.relAbun  <- getRelativeAbundance(obsSubset, as.symbol(rank), depths))
1574569659125:# Remove unlcassified row from predicted data
1574569659126:(pred.relAbun <- pred.relAbun %>% filter(!!as.symbol(rank) != "Unclassified"))
1574569659135:# Relative abundances tables to long format
1574569659136:pred.relAbun.long <- pred.relAbun %>%
1574569659138:gather(key = "depth", value = "Predicted", -1)
1574569659145:obs.relAbun.long <- obs.relAbun %>%
1574569659145:gather(key = "depth", value = "Observed", -1)
1574569659150:(relAbun.long <- right_join(x = obs.relAbun.long,
1574569659150:y = pred.relAbun.long) %>%
1574569659151:mutate(depth = factor(depth, levels = depths)) %>%
1574569659151:replace_na(list("Observed" = 0, "Predicted" = 0))
1574569659152:)
1574569659155:(depthLabels <- paste0(depths, "x"))
1574569659156:(names(depthLabels) <- depths)
1574569659158:palette   <- colorRampPalette(pal_jco()(9))
1574569659424:palette   <- colorRampPalette(pal_d3()(9))
1574569659427:nTaxa     <- length(unique(pull(relAbun.long, !!as.symbol(rank))))
1574569659428:customPal <- palette(nTaxa)
1574569659429:customPal <- pal_d3(palette = "category20")(nTaxa)
1574569659430:show_col(rev(customPal))
1574569661068:titleLabel = paste("Sample", sam)
1574569661068:subtitleLabel = paste("nifH - Full lenght (>=750 bp)")
1574569661069:subtitleLabel = bquote(italic("nifH") ~ "full length (">=750 ~ "bp)")
1574569661071:# expression(Value~is~sigma~R^{2}==0.6)
1574569668039:# expression(Value~is~sigma~R^{2}==0.6)
1574569668040:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574569668040:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574569668041:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574569668041:#              , position = jitter
1574569668042:, size = 3, stroke = 0.6
1574569668042:# , alpha = 0.8
1574569668043:)
1574569668043:+ geom_smooth(level=0.95, color = "#333333", size = 0.8)
1574569668044:# + stat_cor(label.x = 3, label.y = 18)
1574569668045:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574569668045:label.x = 2
1574569668046:)
1574569668046:str_to_sentence()
1574569668047:# + scale_x_continuous(trans='log2')
1574569668048:# + scale_y_continuous(trans='log2')
1574569668048:# + scale_fill_hue(l=45)
1574569668049:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574569668054:# + stat_regline_equation(label.x = 3, label.y = 16)
1574569668054:# + geom_text_repel(aes(label = genus), size = 3)
1574569668055:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574569668056:+ theme_classic2()
1574569668057:+ publicationTheme()
1574569668108:+ labs(title = titleLabel,
1574569668108:subtitle = subtitleLabel)
1574569668109:+ theme(panel.background = element_blank()
1574569668110:, panel.grid.major = element_blank()
1574569668111:, panel.grid.minor = element_blank()
1574569668111:, panel.spacing    = unit(8, "mm")
1574569668112:, title = element_text(hjust = 0.5)
1574569668112:, strip.background = element_blank()
1574569668113:, strip.text.x     = element_text(size = baseTextSize,
1574569668113:margin = margin(6,0,2,0, "mm"))
1574569668114:)
1574569668115:)
1574569715849:# expression(Value~is~sigma~R^{2}==0.6)
1574569715850:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574569715850:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574569715851:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574569715852:#              , position = jitter
1574569715852:, size = 3, stroke = 0.6
1574569715853:# , alpha = 0.8
1574569715854:)
1574569715854:+ geom_smooth(level=0.95, color = "#333333", size = 0.8)
1574569715855:# + stat_cor(label.x = 3, label.y = 18)
1574569715855:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574569715857:label.x = 2
1574569715858:)
1574569715861:# + scale_x_continuous(trans='log2')
1574569715863:# + scale_y_continuous(trans='log2')
1574569715863:# + scale_fill_hue(l=45)
1574569715864:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574569715865:# + stat_regline_equation(label.x = 3, label.y = 16)
1574569715865:# + geom_text_repel(aes(label = genus), size = 3)
1574569715866:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574569715866:+ theme_classic2()
1574569715867:+ publicationTheme()
1574569715868:+ labs(title = titleLabel,
1574569715869:subtitle = subtitleLabel)
1574569715870:+ theme(panel.background = element_blank()
1574569715870:, panel.grid.major = element_blank()
1574569715872:, panel.grid.minor = element_blank()
1574569715872:, panel.spacing    = unit(8, "mm")
1574569715873:, title = element_text(hjust = 0.5)
1574569715874:, strip.background = element_blank()
1574569715877:, strip.text.x     = element_text(size = baseTextSize,
1574569715877:margin = margin(6,0,2,0, "mm"))
1574569715878:)
1574569715879:)
1574569723652:#!/usr/bin/env Rscript
1574569723653:# ##############################################################################
1574569723653:#  Author:   Hector Fabio Espitia-Navarro
1574569723653:#            Georgia Institute of Technology
1574569723654:#  Version:  1.0
1574569723654:#  Date:     11/04/2019
1574569723654:# ##############################################################################
1574569723655:# Install required packages -----------------------------------------------
1574569723656:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1574569723657:if(!file.exists(personal.lib.path))
1574569723657:dir.create(personal.lib.path)
1574569723658:printMessage <- function(message, verbose){
1574569723659:if(verbose)
1574569723659:cat(message)
1574569723660:}
1574569723660:# crayon::bold("Hola")
1574569723661:installAndLoadPackages <- function(pkg, verbose){
1574569723661:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1574569723662:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1574569723662:printMessage("Done!\n", verbose)
1574569723663:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1574569723663:if (length(new.pkg)) {
1574569723664:printMessage("Installing new packages... ", verbose)
1574569723664:install.packages(new.pkg, dependencies = TRUE,
1574569723664:repos="http://cran.rstudio.com/",
1574569723665:lib = personal.lib.path)
1574569723665:printMessage("Done!\n", verbose)
1574569723666:}
1574569723666:printMessage("Loading required packages... ", verbose)
1574569723667:sapply(pkg, function(x){
1574569723667:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1574569723667:})
1574569723668:printMessage("Done!\n", verbose)
1574569723668:}
1574569723669:packages <- c("ggpubr", "RColorBrewer", "gridExtra", "ggsci", "scales", "stringr",
1574569723670:"extrafont", "grid", "tidyverse", "xlsx", "magrittr")
1574569723671:# packages <- c("tidyverse", "magrittr")
1574569723671:installAndLoadPackages(c("argparser", "stringr"), verbose = FALSE)
1574569723726:# Command line arguments processing ---------------------------------------
1574569723728:# Get script name
1574569723728:initial.options <- commandArgs(trailingOnly = FALSE)
1574569723729:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1574569723731:# Process command line arguments
1574569723731:# Create a parser
1574569723732:p <- arg_parser("This script is intended to assess STing classifier results.",
1574569723732:name = script.name)
1574569723753:# Add Positional arguments (required)
1574569723754:p <- add_argument(p, "pred_file", help = "STing predictions file. BIOM table: accn, read counts, taxonomy")
1574569723755:p <- add_argument(p, "ref_file", help = "Reference file. Tab separated file BIOM like: accn, read counts")
1574569723761:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1574569723761:default = "summary_results")
1574569723764:# Initialization of variables ---------------------------------------------
1574569723765:# "results/predicted.no_dup.summary.tsv"
1574569723765:dataDir    <- str_glue("results")
1574569723766:predFile   <- str_glue("{dataDir}/predicted.no_dup.summary.tsv")
1574569723768:refFile    <- str_glue("data/samples/full_taxonomy/communities/observed.read_counts.tsv")
1574569723769:prefix     <- str_glue("{dataDir}/summary_results")
1574569723772:# Parse command line arguments --------------------------------------------
1574569723772:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1574569723773:argv <- list()
1574569723773:if(command.line) {
1574569723774:argv <- parse_args(p)
1574569723774:} else {
1574569723774:argv <- parse_args(p, list(predFile,
1574569723776:refFile,
1574569723777:"--prefix", prefix))
1574569723777:}
1574569724008:# Get argument values from the command line
1574569724010:predFile   <- argv$pred_file
1574569724011:refFile    <- argv$ref_file
1574569724011:prefix     <- argv$prefix
1574569724013:# Function to check if file exists ----------------------------------------
1574569724013:CheckFileExists <- function(fileList) {
1574569724014:non.exist.files <- !file.exists(fileList)
1574569724015:if(any(non.exist.files)) {
1574569724016:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1574569724016:}
1574569724017:}
1574569724018:# Check for input files ---------------------------------------------------
1574569724019:filesToCheck <- c(predFile, refFile)
1574569724020:errorMessage  <- CheckFileExists(filesToCheck)
1574569724021:#
1574569724022:# if(!is.null(errorMessage)){
1574569724022:#   stop(errorMessage)
1574569724022:# } else {
1574569724023:# Code core - Begin -------------------------------------------------------
1574569724023:installAndLoadPackages(packages, verbose = TRUE)
1574569724118:options(stringsAsFactors = F)
1574569724119:source(file = "scripts/ggplot_theme.R")
1574569724244:# FUNCTIONS ------------------------------------------------------------------
1574569724245:# Calculates relative abundance level of a grouped table -------------------
1574569724245:calculateRelativeAbundance <- function(readCountsTable, depths) {
1574569724246:# totalReads <- unlist(readCountsTable %>% summarise_at(sampleCols, sum))
1574569724246:outTable <- readCountsTable
1574569724247:totalReads <- lapply(readCountsTable[-1], sum)
1574569724247:for(sample in depths) {
1574569724248:outTable[[sample]] <- outTable[[sample]] / totalReads[[sample]] * 100
1574569724248:}
1574569724250:return(outTable)
1574569724250:}
1574569724251:# Clacultes relative abundance at a given rank level -----------------------
1574569724252:getRelativeAbundance <- function(countsTable, group_rank, depths) {
1574569724252:# print(group_rank)
1574569724253:# group_rank <- enquo(group_rank)
1574569724254:groupedData <- countsTable %>% group_by(!! group_rank) %>%
1574569724254:summarise_at(depths, sum)
1574569724254:calculateRelativeAbundance(groupedData, depths)
1574569724255:}
1574569724255:# Clacultes relative abundance at a given rank level -----------------------
1574569724256:getAbundance <- function(countsTable, group_rank, depths) {
1574569724256:# print(group_rank)
1574569724256:# group_rank <- enquo(group_rank)
1574569724257:countsTable %>% group_by(!! group_rank) %>%
1574569724257:summarise_at(depths, sum)
1574569724257:}
1574569724258:# Calculate Shannon index at the level of a grouped table -------------------
1574569724261:calculateShannonIndex <- function(countsTable, depths) {
1574569724262:# totalReads <- unlist(readCountsTable %>% summarise_at(sampleCols, sum))
1574569724263:totalReads <- lapply(countsTable[-1], sum)
1574569724264:lapply(countsTable[-1], function(sample){
1574569724265:sum(sample * log(sample))
1574569724265:})
1574569724266:}
1574569724266:# LOAD DATA ---------------------------------------------------------------
1574569724267:(obsData  <- read_tsv(refFile))
1574569724267:(predData <- read_tsv(predFile))
1574569724269:(samples <- unique(obsData$sample))
1574569724270:(depths  <- names(obsData)[2:8])
1574569724271:(kList   <- unique(predData$k))
1574569724272:(samplesByType <- data.frame("Full" = c("FA", "FB"),
1574569724273:"Partial" = c("PA", "PB")))
1574569724277:# Process samples ---------------------------------------------------------
1574569724277:rank <- "genus"
1574569724278:(ksize <- kList[2])
1574569724279:# for(type in names(samplesByType)) {
1574569724280:# (type <- "Full") # test value
1574569724280:# (samples <- samplesByType[,type])
1574569734321:#!/usr/bin/env Rscript
1574569734322:# ##############################################################################
1574569734323:#  Author:   Hector Fabio Espitia-Navarro
1574569734323:#            Georgia Institute of Technology
1574569734324:#  Version:  1.0
1574569734324:#  Date:     11/04/2019
1574569734325:# ##############################################################################
1574569734326:# Install required packages -----------------------------------------------
1574569734327:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1574569734328:if(!file.exists(personal.lib.path))
1574569734328:dir.create(personal.lib.path)
1574569734330:printMessage <- function(message, verbose){
1574569734331:if(verbose)
1574569734331:cat(message)
1574569734332:}
1574569734333:# crayon::bold("Hola")
1574569734334:installAndLoadPackages <- function(pkg, verbose){
1574569734334:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1574569734335:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1574569734335:printMessage("Done!\n", verbose)
1574569734336:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1574569734337:if (length(new.pkg)) {
1574569734337:printMessage("Installing new packages... ", verbose)
1574569734338:install.packages(new.pkg, dependencies = TRUE,
1574569734338:repos="http://cran.rstudio.com/",
1574569734339:lib = personal.lib.path)
1574569734339:printMessage("Done!\n", verbose)
1574569734340:}
1574569734341:printMessage("Loading required packages... ", verbose)
1574569734341:sapply(pkg, function(x){
1574569734342:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1574569734343:})
1574569734343:printMessage("Done!\n", verbose)
1574569734344:}
1574569734345:packages <- c("ggpubr", "RColorBrewer", "gridExtra", "ggsci", "scales", "stringr",
1574569734346:"extrafont", "grid", "tidyverse", "xlsx", "magrittr")
1574569734347:# packages <- c("tidyverse", "magrittr")
1574569734348:installAndLoadPackages(c("argparser", "stringr"), verbose = FALSE)
1574569734438:# Command line arguments processing ---------------------------------------
1574569734439:# Get script name
1574569734439:initial.options <- commandArgs(trailingOnly = FALSE)
1574569734440:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1574569734445:# Process command line arguments
1574569734446:# Create a parser
1574569734446:p <- arg_parser("This script is intended to assess STing classifier results.",
1574569734447:name = script.name)
1574569734454:# Add Positional arguments (required)
1574569734455:p <- add_argument(p, "pred_file", help = "STing predictions file. BIOM table: accn, read counts, taxonomy")
1574569734464:p <- add_argument(p, "ref_file", help = "Reference file. Tab separated file BIOM like: accn, read counts")
1574569734465:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1574569734466:default = "summary_results")
1574569757387:#!/usr/bin/env Rscript
1574569757387:# ##############################################################################
1574569757388:#  Author:   Hector Fabio Espitia-Navarro
1574569757389:#            Georgia Institute of Technology
1574569757389:#  Version:  1.0
1574569757390:#  Date:     11/04/2019
1574569757390:# ##############################################################################
1574569757391:# Install required packages -----------------------------------------------
1574569757392:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1574569757393:if(!file.exists(personal.lib.path))
1574569757394:dir.create(personal.lib.path)
1574569757395:printMessage <- function(message, verbose){
1574569757396:if(verbose)
1574569757397:cat(message)
1574569757398:}
1574569757399:# crayon::bold("Hola")
1574569757400:installAndLoadPackages <- function(pkg, verbose){
1574569757400:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1574569757401:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1574569757401:printMessage("Done!\n", verbose)
1574569757402:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1574569757402:if (length(new.pkg)) {
1574569757403:printMessage("Installing new packages... ", verbose)
1574569757403:install.packages(new.pkg, dependencies = TRUE,
1574569757404:repos="http://cran.rstudio.com/",
1574569757405:lib = personal.lib.path)
1574569757405:printMessage("Done!\n", verbose)
1574569757406:}
1574569757406:printMessage("Loading required packages... ", verbose)
1574569757407:sapply(pkg, function(x){
1574569757407:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1574569757408:})
1574569757409:printMessage("Done!\n", verbose)
1574569757409:}
1574569757410:packages <- c("ggpubr", "RColorBrewer", "gridExtra", "ggsci", "scales", "stringr",
1574569757427:"extrafont", "grid", "tidyverse", "xlsx", "magrittr")
1574569757428:# packages <- c("tidyverse", "magrittr")
1574569757429:installAndLoadPackages(c("argparser", "stringr"), verbose = FALSE)
1574569757471:# Command line arguments processing ---------------------------------------
1574569757472:# Get script name
1574569757472:initial.options <- commandArgs(trailingOnly = FALSE)
1574569757472:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1574569757473:# Process command line arguments
1574569757473:# Create a parser
1574569757474:p <- arg_parser("This script is intended to assess STing classifier results.",
1574569757474:name = script.name)
1574569757476:# Add Positional arguments (required)
1574569757476:p <- add_argument(p, "pred_file", help = "STing predictions file. BIOM table: accn, read counts, taxonomy")
1574569757477:p <- add_argument(p, "ref_file", help = "Reference file. Tab separated file BIOM like: accn, read counts")
1574569757479:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1574569757480:default = "summary_results")
1574569757483:# Initialization of variables ---------------------------------------------
1574569757484:# "results/predicted.no_dup.summary.tsv"
1574569757484:dataDir    <- str_glue("results")
1574569757485:predFile   <- str_glue("{dataDir}/predicted.no_dup.summary.tsv")
1574569757487:refFile    <- str_glue("data/samples/full_taxonomy/communities/observed.read_counts.tsv")
1574569757489:prefix     <- str_glue("{dataDir}/summary_results")
1574569757491:# Parse command line arguments --------------------------------------------
1574569757492:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1574569757493:argv <- list()
1574569757494:if(command.line) {
1574569757494:argv <- parse_args(p)
1574569757495:} else {
1574569757497:argv <- parse_args(p, list(predFile,
1574569757497:refFile,
1574569757499:"--prefix", prefix))
1574569757499:}
1574569757502:# Get argument values from the command line
1574569757502:predFile   <- argv$pred_file
1574569757503:refFile    <- argv$ref_file
1574569757504:prefix     <- argv$prefix
1574569757505:# Function to check if file exists ----------------------------------------
1574569757505:CheckFileExists <- function(fileList) {
1574569757506:non.exist.files <- !file.exists(fileList)
1574569757506:if(any(non.exist.files)) {
1574569757507:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1574569757507:}
1574569757507:}
1574569757509:# Check for input files ---------------------------------------------------
1574569757509:filesToCheck <- c(predFile, refFile)
1574569757510:errorMessage  <- CheckFileExists(filesToCheck)
1574569757511:#
1574569757512:# if(!is.null(errorMessage)){
1574569757513:#   stop(errorMessage)
1574569757513:# } else {
1574569757514:# Code core - Begin -------------------------------------------------------
1574569757514:installAndLoadPackages(packages, verbose = TRUE)
1574569757585:options(stringsAsFactors = F)
1574569757586:source(file = "scripts/ggplot_theme.R")
1574569757651:# FUNCTIONS ------------------------------------------------------------------
1574569757651:# Calculates relative abundance level of a grouped table -------------------
1574569757652:calculateRelativeAbundance <- function(readCountsTable, depths) {
1574569757652:# totalReads <- unlist(readCountsTable %>% summarise_at(sampleCols, sum))
1574569757653:outTable <- readCountsTable
1574569757653:totalReads <- lapply(readCountsTable[-1], sum)
1574569757654:for(sample in depths) {
1574569757654:outTable[[sample]] <- outTable[[sample]] / totalReads[[sample]] * 100
1574569757655:}
1574569757656:return(outTable)
1574569757657:}
1574569757658:# Clacultes relative abundance at a given rank level -----------------------
1574569757659:getRelativeAbundance <- function(countsTable, group_rank, depths) {
1574569757659:# print(group_rank)
1574569757660:# group_rank <- enquo(group_rank)
1574569757660:groupedData <- countsTable %>% group_by(!! group_rank) %>%
1574569757664:summarise_at(depths, sum)
1574569757665:calculateRelativeAbundance(groupedData, depths)
1574569757665:}
1574569757667:# Clacultes relative abundance at a given rank level -----------------------
1574569757667:getAbundance <- function(countsTable, group_rank, depths) {
1574569757668:# print(group_rank)
1574569757668:# group_rank <- enquo(group_rank)
1574569757669:countsTable %>% group_by(!! group_rank) %>%
1574569757669:summarise_at(depths, sum)
1574569757670:}
1574569757671:# Calculate Shannon index at the level of a grouped table -------------------
1574569757671:calculateShannonIndex <- function(countsTable, depths) {
1574569757672:# totalReads <- unlist(readCountsTable %>% summarise_at(sampleCols, sum))
1574569757672:totalReads <- lapply(countsTable[-1], sum)
1574569757673:lapply(countsTable[-1], function(sample){
1574569757673:sum(sample * log(sample))
1574569757674:})
1574569757674:}
1574569757676:# LOAD DATA ---------------------------------------------------------------
1574569757676:(obsData  <- read_tsv(refFile))
1574569757681:(predData <- read_tsv(predFile))
1574569757682:(samples <- unique(obsData$sample))
1574569757683:(depths  <- names(obsData)[2:8])
1574569757685:(kList   <- unique(predData$k))
1574569757686:(samplesByType <- data.frame("Full" = c("FA", "FB"),
1574569757787:"Partial" = c("PA", "PB")))
1574569757791:# Process samples ---------------------------------------------------------
1574569757791:rank <- "genus"
1574569757792:(ksize <- kList[2])
1574569757793:# for(type in names(samplesByType)) {
1574569757793:# (type <- "Full") # test value
1574569757794:# (samples <- samplesByType[,type])
1574569761904:(sam <- "FA")    # test value
1574569772207:(obsSubset <- obsData %>%
1574569772208:filter(sample == sam))
1574569772217:(predSubset <- predData %>%
1574569772217:filter(sample == sam,
1574569772218:k == ksize))
1574569772221:# Check total number of reads on input data
1574569772222:(obsSubset%>% summarise_at(depths, sum))
1574569772225:(predSubset %>% summarise_at(depths, sum))
1574569772228:# Read counts to long format
1574569772229:(readCounts.long <- left_join(x = getAbundance(obsSubset, as.symbol(rank), depths) %>%
1574569772230:gather(key = "depth", value = "Observed", -1),
1574569772230:y = getAbundance(predSubset, as.symbol(rank), depths) %>%
1574569772231:gather(key = "depth", value = "Predicted", -1)
1574569772232:# , by = c(rank, "depth")
1574569772233:) %>%
1574569772233:mutate(depth = factor(depth)) %>%
1574569772234:replace_na(list("Observed" = 0, "Predicted" = 0))
1574569772234:)
1574569772237:# Calcultae relative abundance
1574569772238:(pred.relAbun <- getRelativeAbundance(predSubset, as.symbol(rank), depths))
1574569772242:(obs.relAbun  <- getRelativeAbundance(obsSubset, as.symbol(rank), depths))
1574569772256:# Remove unlcassified row from predicted data
1574569772256:(pred.relAbun <- pred.relAbun %>% filter(!!as.symbol(rank) != "Unclassified"))
1574569772263:# Relative abundances tables to long format
1574569772264:pred.relAbun.long <- pred.relAbun %>%
1574569772265:gather(key = "depth", value = "Predicted", -1)
1574569772270:obs.relAbun.long <- obs.relAbun %>%
1574569772271:gather(key = "depth", value = "Observed", -1)
1574569772274:(relAbun.long <- right_join(x = obs.relAbun.long,
1574569772275:y = pred.relAbun.long) %>%
1574569772275:mutate(depth = factor(depth, levels = depths)) %>%
1574569772276:replace_na(list("Observed" = 0, "Predicted" = 0))
1574569772276:)
1574569772279:(depthLabels <- paste0(depths, "x"))
1574569772280:(names(depthLabels) <- depths)
1574569772282:palette   <- colorRampPalette(pal_jco()(9))
1574569772284:palette   <- colorRampPalette(pal_d3()(9))
1574569772285:nTaxa     <- length(unique(pull(relAbun.long, !!as.symbol(rank))))
1574569772286:customPal <- palette(nTaxa)
1574569772288:customPal <- pal_d3(palette = "category20")(nTaxa)
1574569772289:show_col(rev(customPal))
1574569772361:titleLabel = paste("Sample", sam)
1574569772433:subtitleLabel = paste("nifH - Full lenght (>=750 bp)")
1574569772434:subtitleLabel = bquote(italic("nifH") ~ "full length (">=750 ~ "bp)")
1574569792855:packages <- c("ggpubr", "RColorBrewer", "gridExtra", "ggsci", "scales", "stringr",
1574569792856:"extrafont", "grid", "tidyverse", "xlsx", "magrittr")
1574569811066:installAndLoadPackages(c("argparser", "stringr"), verbose = FALSE)
1574569811076:# Command line arguments processing ---------------------------------------
1574569811076:# Get script name
1574569811077:initial.options <- commandArgs(trailingOnly = FALSE)
1574569811078:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1574569811078:# Process command line arguments
1574569811079:# Create a parser
1574569811079:p <- arg_parser("This script is intended to assess STing classifier results.",
1574569811080:name = script.name)
1574569811082:# Add Positional arguments (required)
1574569811083:p <- add_argument(p, "pred_file", help = "STing predictions file. BIOM table: accn, read counts, taxonomy")
1574569811085:p <- add_argument(p, "ref_file", help = "Reference file. Tab separated file BIOM like: accn, read counts")
1574569811087:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1574569811088:default = "summary_results")
1574569811090:# Initialization of variables ---------------------------------------------
1574569811090:# "results/predicted.no_dup.summary.tsv"
1574569811090:dataDir    <- str_glue("results")
1574569811093:predFile   <- str_glue("{dataDir}/predicted.no_dup.summary.tsv")
1574569811095:refFile    <- str_glue("data/samples/full_taxonomy/communities/observed.read_counts.tsv")
1574569811096:prefix     <- str_glue("{dataDir}/summary_results")
1574569811100:# Parse command line arguments --------------------------------------------
1574569811100:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1574569811101:argv <- list()
1574569811102:if(command.line) {
1574569811102:argv <- parse_args(p)
1574569811103:} else {
1574569811103:argv <- parse_args(p, list(predFile,
1574569811104:refFile,
1574569811104:"--prefix", prefix))
1574569811105:}
1574569811107:# Get argument values from the command line
1574569811107:predFile   <- argv$pred_file
1574569811108:refFile    <- argv$ref_file
1574569811109:prefix     <- argv$prefix
1574569811110:# Function to check if file exists ----------------------------------------
1574569811110:CheckFileExists <- function(fileList) {
1574569811111:non.exist.files <- !file.exists(fileList)
1574569811112:if(any(non.exist.files)) {
1574569811112:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1574569811113:}
1574569811116:}
1574569811120:# Check for input files ---------------------------------------------------
1574569811121:filesToCheck <- c(predFile, refFile)
1574569811122:errorMessage  <- CheckFileExists(filesToCheck)
1574569811130:#
1574569811130:# if(!is.null(errorMessage)){
1574569811131:#   stop(errorMessage)
1574569811131:# } else {
1574569811133:# Code core - Begin -------------------------------------------------------
1574569811134:installAndLoadPackages(packages, verbose = TRUE)
1574569811248:options(stringsAsFactors = F)
1574569811248:source(file = "scripts/ggplot_theme.R")
1574569831934:#!/usr/bin/env Rscript
1574569831935:# ##############################################################################
1574569831935:#  Author:   Hector Fabio Espitia-Navarro
1574569831936:#            Georgia Institute of Technology
1574569831936:#  Version:  1.0
1574569831937:#  Date:     11/04/2019
1574569831937:# ##############################################################################
1574569831938:# Install required packages -----------------------------------------------
1574569831939:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1574569831941:if(!file.exists(personal.lib.path))
1574569831942:dir.create(personal.lib.path)
1574569831943:printMessage <- function(message, verbose){
1574569831944:if(verbose)
1574569831944:cat(message)
1574569831945:}
1574569831946:# crayon::bold("Hola")
1574569831947:installAndLoadPackages <- function(pkg, verbose){
1574569831947:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1574569831948:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1574569831948:printMessage("Done!\n", verbose)
1574569831949:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1574569831950:if (length(new.pkg)) {
1574569831950:printMessage("Installing new packages... ", verbose)
1574569831951:install.packages(new.pkg, dependencies = TRUE,
1574569831962:repos="http://cran.rstudio.com/",
1574569831963:lib = personal.lib.path)
1574569831963:printMessage("Done!\n", verbose)
1574569831964:}
1574569831965:printMessage("Loading required packages... ", verbose)
1574569831965:sapply(pkg, function(x){
1574569831966:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1574569831966:})
1574569831967:printMessage("Done!\n", verbose)
1574569831968:}
1574569831969:packages <- c("ggpubr", "RColorBrewer", "gridExtra", "ggsci", "scales", "stringr",
1574569831970:"extrafont", "grid", "tidyverse", "xlsx", "magrittr")
1574569831971:# packages <- c("tidyverse", "magrittr")
1574569831981:installAndLoadPackages(c("argparser", "stringr"), verbose = FALSE)
1574569833739:# Command line arguments processing ---------------------------------------
1574569833740:# Get script name
1574569833746:initial.options <- commandArgs(trailingOnly = FALSE)
1574569833747:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1574569833748:# Process command line arguments
1574569833748:# Create a parser
1574569833749:p <- arg_parser("This script is intended to assess STing classifier results.",
1574569833750:name = script.name)
1574569833935:# Add Positional arguments (required)
1574569833936:p <- add_argument(p, "pred_file", help = "STing predictions file. BIOM table: accn, read counts, taxonomy")
1574569833937:p <- add_argument(p, "ref_file", help = "Reference file. Tab separated file BIOM like: accn, read counts")
1574569833939:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1574569833940:default = "summary_results")
1574569833945:# Initialization of variables ---------------------------------------------
1574569833946:# "results/predicted.no_dup.summary.tsv"
1574569833946:dataDir    <- str_glue("results")
1574569834276:predFile   <- str_glue("{dataDir}/predicted.no_dup.summary.tsv")
1574569834283:refFile    <- str_glue("data/samples/full_taxonomy/communities/observed.read_counts.tsv")
1574569834285:prefix     <- str_glue("{dataDir}/summary_results")
1574569834290:# Parse command line arguments --------------------------------------------
1574569834291:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1574569834292:argv <- list()
1574569834293:if(command.line) {
1574569834293:argv <- parse_args(p)
1574569834294:} else {
1574569834294:argv <- parse_args(p, list(predFile,
1574569834295:refFile,
1574569834295:"--prefix", prefix))
1574569834296:}
1574569834347:# Get argument values from the command line
1574569834348:predFile   <- argv$pred_file
1574569834363:refFile    <- argv$ref_file
1574569834364:prefix     <- argv$prefix
1574569834365:# Function to check if file exists ----------------------------------------
1574569834366:CheckFileExists <- function(fileList) {
1574569834366:non.exist.files <- !file.exists(fileList)
1574569834369:if(any(non.exist.files)) {
1574569834370:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1574569834376:}
1574569834377:}
1574569843103:# Check for input files ---------------------------------------------------
1574569843103:filesToCheck <- c(predFile, refFile)
1574569843104:errorMessage  <- CheckFileExists(filesToCheck)
1574569843105:#
1574569843106:# if(!is.null(errorMessage)){
1574569843106:#   stop(errorMessage)
1574569843107:# } else {
1574569843108:# Code core - Begin -------------------------------------------------------
1574569843108:installAndLoadPackages(packages, verbose = TRUE)
1574569849752:options(stringsAsFactors = F)
1574569849754:source(file = "scripts/ggplot_theme.R")
1574569854848:# FUNCTIONS ------------------------------------------------------------------
1574569854848:# Calculates relative abundance level of a grouped table -------------------
1574569854848:calculateRelativeAbundance <- function(readCountsTable, depths) {
1574569854849:# totalReads <- unlist(readCountsTable %>% summarise_at(sampleCols, sum))
1574569854849:outTable <- readCountsTable
1574569854850:totalReads <- lapply(readCountsTable[-1], sum)
1574569854850:for(sample in depths) {
1574569854851:outTable[[sample]] <- outTable[[sample]] / totalReads[[sample]] * 100
1574569854851:}
1574569854851:return(outTable)
1574569854852:}
1574569854854:# Clacultes relative abundance at a given rank level -----------------------
1574569854855:getRelativeAbundance <- function(countsTable, group_rank, depths) {
1574569854856:# print(group_rank)
1574569854857:# group_rank <- enquo(group_rank)
1574569854862:groupedData <- countsTable %>% group_by(!! group_rank) %>%
1574569854863:summarise_at(depths, sum)
1574569854864:calculateRelativeAbundance(groupedData, depths)
1574569854864:}
1574569854870:# Clacultes relative abundance at a given rank level -----------------------
1574569854871:getAbundance <- function(countsTable, group_rank, depths) {
1574569854871:# print(group_rank)
1574569854877:# group_rank <- enquo(group_rank)
1574569854882:countsTable %>% group_by(!! group_rank) %>%
1574569854884:summarise_at(depths, sum)
1574569854884:}
1574569854886:# Calculate Shannon index at the level of a grouped table -------------------
1574569854886:calculateShannonIndex <- function(countsTable, depths) {
1574569854893:# totalReads <- unlist(readCountsTable %>% summarise_at(sampleCols, sum))
1574569854894:totalReads <- lapply(countsTable[-1], sum)
1574569854895:lapply(countsTable[-1], function(sample){
1574569854896:sum(sample * log(sample))
1574569854897:})
1574569854900:}
1574569854904:# LOAD DATA ---------------------------------------------------------------
1574569854905:(obsData  <- read_tsv(refFile))
1574569856781:(predData <- read_tsv(predFile))
1574569857427:(samples <- unique(obsData$sample))
1574569857428:(depths  <- names(obsData)[2:8])
1574569857429:(kList   <- unique(predData$k))
1574569857430:(samplesByType <- data.frame("Full" = c("FA", "FB"),
1574569857431:"Partial" = c("PA", "PB")))
1574569857435:# Process samples ---------------------------------------------------------
1574569857435:rank <- "genus"
1574569857436:(ksize <- kList[2])
1574569857437:# for(type in names(samplesByType)) {
1574569857438:# (type <- "Full") # test value
1574569857438:# (samples <- samplesByType[,type])
1574569858670:(sam <- "FA")    # test value
1574569870932:# Subset data
1574569870933:(obsSubset <- obsData %>%
1574569870933:filter(sample == sam))
1574569871066:(predSubset <- predData %>%
1574569871067:filter(sample == sam,
1574569871067:k == ksize))
1574569871277:# Check total number of reads on input data
1574569871278:(obsSubset%>% summarise_at(depths, sum))
1574569871365:(predSubset %>% summarise_at(depths, sum))
1574569871543:# Read counts to long format
1574569871543:(readCounts.long <- left_join(x = getAbundance(obsSubset, as.symbol(rank), depths) %>%
1574569871544:gather(key = "depth", value = "Observed", -1),
1574569871545:y = getAbundance(predSubset, as.symbol(rank), depths) %>%
1574569871545:gather(key = "depth", value = "Predicted", -1)
1574569871546:# , by = c(rank, "depth")
1574569871547:) %>%
1574569871547:mutate(depth = factor(depth)) %>%
1574569871548:replace_na(list("Observed" = 0, "Predicted" = 0))
1574569871549:)
1574569872105:# Calcultae relative abundance
1574569872106:(pred.relAbun <- getRelativeAbundance(predSubset, as.symbol(rank), depths))
1574569872261:(obs.relAbun  <- getRelativeAbundance(obsSubset, as.symbol(rank), depths))
1574569872399:# Remove unlcassified row from predicted data
1574569872399:(pred.relAbun <- pred.relAbun %>% filter(!!as.symbol(rank) != "Unclassified"))
1574569872524:# Relative abundances tables to long format
1574569872525:pred.relAbun.long <- pred.relAbun %>%
1574569872525:gather(key = "depth", value = "Predicted", -1)
1574569872531:obs.relAbun.long <- obs.relAbun %>%
1574569872531:gather(key = "depth", value = "Observed", -1)
1574569872539:(relAbun.long <- right_join(x = obs.relAbun.long,
1574569872540:y = pred.relAbun.long) %>%
1574569872541:mutate(depth = factor(depth, levels = depths)) %>%
1574569872541:replace_na(list("Observed" = 0, "Predicted" = 0))
1574569872542:)
1574569872641:(depthLabels <- paste0(depths, "x"))
1574569872642:(names(depthLabels) <- depths)
1574569872644:palette   <- colorRampPalette(pal_jco()(9))
1574569872649:palette   <- colorRampPalette(pal_d3()(9))
1574569872651:nTaxa     <- length(unique(pull(relAbun.long, !!as.symbol(rank))))
1574569872655:customPal <- palette(nTaxa)
1574569872656:customPal <- pal_d3(palette = "category20")(nTaxa)
1574569872658:show_col(rev(customPal))
1574569873292:titleLabel = paste("Sample", sam)
1574569873293:subtitleLabel = paste("nifH - Full lenght (>=750 bp)")
1574569873294:subtitleLabel = bquote(italic("nifH") ~ "full length (">=750 ~ "bp)")
1574569873295:# expression(Value~is~sigma~R^{2}==0.6)
1574569875502:# expression(Value~is~sigma~R^{2}==0.6)
1574569875502:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574569875503:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574569875504:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574569875505:#              , position = jitter
1574569875508:, size = 3, stroke = 0.6
1574569875509:# , alpha = 0.8
1574569875512:)
1574569875513:+ geom_smooth(level=0.95, color = "#333333", size = 0.8)
1574569875514:# + stat_cor(label.x = 3, label.y = 18)
1574569875514:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574569875519:label.x = 2
1574569875525:)
1574569875525:# + scale_x_continuous(trans='log2')
1574569875526:# + scale_y_continuous(trans='log2')
1574569875527:# + scale_fill_hue(l=45)
1574569875527:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574569875539:# + stat_regline_equation(label.x = 3, label.y = 16)
1574569875541:# + geom_text_repel(aes(label = genus), size = 3)
1574569875542:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574569875543:+ theme_classic2()
1574569875544:+ publicationTheme()
1574569875544:+ labs(title = titleLabel,
1574569875548:subtitle = subtitleLabel)
1574569875549:+ theme(panel.background = element_blank()
1574569875550:, panel.grid.major = element_blank()
1574569875551:, panel.grid.minor = element_blank()
1574569875556:, panel.spacing    = unit(8, "mm")
1574569875557:, title = element_text(hjust = 0.5)
1574569875557:, strip.background = element_blank()
1574569875566:, strip.text.x     = element_text(size = baseTextSize,
1574569875567:margin = margin(6,0,2,0, "mm"))
1574569875568:)
1574569875575:)
1574570579563:paste0(rank, ".", sam, ".rel_abundance.pdf")
1574570584429:ggsave(filename = paste0(rank, ".", sam, ".rel_abundance.pdf"), plot = p,
1574570584430:width = 8, height = 7)
1574570658210:ggsave(filename = paste0(rank, ".", sam, ".rel_abundance.pdf"), plot = p,
1574570658211:width = 15, height = 12)
1574570689757:ggsave(filename = paste0(rank, ".", sam, ".rel_abundance.pdf"), plot = p,
1574570689758:width = 12, height = 10)
1574570795707:# expression(Value~is~sigma~R^{2}==0.6)
1574570795707:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574570795707:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574570795708:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574570795708:#              , position = jitter
1574570795709:, size = 3, stroke = 0.6
1574570795709:# , alpha = 0.8
1574570795709:)
1574570795710:+ geom_smooth(level=0.95, color = "#333333", size = 0.8)
1574570795710:# + stat_cor(label.x = 3, label.y = 18)
1574570795711:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574570795711:label.x = 2
1574570795712:)
1574570795712:# + scale_fill_hue(l=45)
1574570795712:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574570795713:# + stat_regline_equation(label.x = 3, label.y = 16)
1574570795714:# + geom_text_repel(aes(label = genus), size = 3)
1574570795715:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574570795715:+ theme_classic2()
1574570795716:+ publicationTheme()
1574570795717:+ labs(title = titleLabel,
1574570795719:subtitle = subtitleLabel)
1574570795719:+ theme(legend.background = element_rect(size = 0.5)
1574570795737:, panel.background = element_blank()
1574570795739:, panel.grid.major = element_blank()
1574570795739:, panel.grid.minor = element_blank()
1574570795740:, panel.spacing    = unit(8, "mm")
1574570795741:, title = element_text(hjust = 0.5)
1574570795742:, strip.background = element_blank()
1574570795742:, strip.text.x     = element_text(size = baseTextSize,
1574570795748:margin = margin(6,0,2,0, "mm"))
1574570795749:)
1574570795750:)
1574570890677:# expression(Value~is~sigma~R^{2}==0.6)
1574570890678:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574570890678:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574570890679:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574570890679:#              , position = jitter
1574570890680:, size = 3, stroke = 0.6
1574570890681:# , alpha = 0.8
1574570890681:)
1574570890681:+ geom_smooth(level=0.95, color = "#333333", size = 0.8)
1574570890682:# + stat_cor(label.x = 3, label.y = 18)
1574570890683:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574570890683:label.x = 2
1574570890684:)
1574570890685:# + scale_fill_hue(l=45)
1574570890686:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574570890686:# + stat_regline_equation(label.x = 3, label.y = 16)
1574570890687:# + geom_text_repel(aes(label = genus), size = 3)
1574570890687:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574570890688:+ theme_classic2()
1574570890689:+ publicationTheme()
1574570890690:+ labs(title = titleLabel,
1574570890690:subtitle = subtitleLabel)
1574570890691:+ theme(legend.box.background = element_rect(colour = axisColor)
1574570890692:, panel.background = element_blank()
1574570890693:, panel.grid.major = element_blank()
1574570890694:, panel.grid.minor = element_blank()
1574570890695:, panel.spacing    = unit(8, "mm")
1574570890696:, title = element_text(hjust = 0.5)
1574570890696:, strip.background = element_blank()
1574570890697:, strip.text.x     = element_text(size = baseTextSize,
1574570890697:margin = margin(6,0,2,0, "mm"))
1574570890697:)
1574570890698:)
1574570929491:# expression(Value~is~sigma~R^{2}==0.6)
1574570929492:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574570929492:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574570929493:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574570929493:#              , position = jitter
1574570929493:, size = 3, stroke = 0.6
1574570929494:# , alpha = 0.8
1574570929494:)
1574570929495:+ geom_smooth(level=0.95, color = "#333333", size = 0.8)
1574570929497:# + stat_cor(label.x = 3, label.y = 18)
1574570929499:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574570929499:label.x = 2
1574570929500:)
1574570929500:# + scale_fill_hue(l=45)
1574570929500:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574570929501:# + stat_regline_equation(label.x = 3, label.y = 16)
1574570929501:# + geom_text_repel(aes(label = genus), size = 3)
1574570929502:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574570929502:+ theme_classic2()
1574570929502:+ publicationTheme()
1574570929503:+ labs(title = titleLabel,
1574570929503:subtitle = subtitleLabel)
1574570929504:+ theme(legend.background = element_blank()
1574570929504:, legend.box.background = element_rect(colour = axisColor)
1574570929505:, panel.background = element_blank()
1574570929505:, panel.grid.major = element_blank()
1574570929505:, panel.grid.minor = element_blank()
1574570929507:, panel.spacing    = unit(8, "mm")
1574570929508:, title = element_text(hjust = 0.5)
1574570929508:, strip.background = element_blank()
1574570929509:, strip.text.x     = element_text(size = baseTextSize,
1574570929510:margin = margin(6,0,2,0, "mm"))
1574570929511:)
1574570929511:)
1574570980082:# expression(Value~is~sigma~R^{2}==0.6)
1574570980082:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574570980083:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574570980084:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574570980084:#              , position = jitter
1574570980085:, size = 3, stroke = 0.6
1574570980086:# , alpha = 0.8
1574570980086:)
1574570980088:+ geom_smooth(level=0.95, color = "#333333", size = 0.8)
1574570980089:# + stat_cor(label.x = 3, label.y = 18)
1574570980090:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574570980090:label.x = 2
1574570980091:)
1574570980094:# + scale_fill_hue(l=45)
1574570980095:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574570980096:# + stat_regline_equation(label.x = 3, label.y = 16)
1574570980097:# + geom_text_repel(aes(label = genus), size = 3)
1574570980104:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574570980105:+ theme_classic2()
1574570980105:+ publicationTheme()
1574570980106:+ labs(title = titleLabel,
1574570980106:subtitle = subtitleLabel)
1574570980107:+ theme(legend.background = element_blank()
1574570980108:, legend.box.background = element_rect(colour = axisColor, margin = margin(0,0,0,6, "mm"))
1574570980109:, panel.background = element_blank()
1574570980109:, panel.grid.major = element_blank()
1574570980110:, panel.grid.minor = element_blank()
1574570980111:, panel.spacing    = unit(8, "mm")
1574570980112:, title = element_text(hjust = 0.5)
1574570980113:, strip.background = element_blank()
1574570980113:, strip.text.x     = element_text(size = baseTextSize,
1574570980114:margin = margin(6,0,2,0, "mm"))
1574570980115:)
1574570980118:)
1574571036443:# expression(Value~is~sigma~R^{2}==0.6)
1574571036444:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574571036445:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574571036446:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574571036446:#              , position = jitter
1574571036447:, size = 3, stroke = 0.6
1574571036447:# , alpha = 0.8
1574571036448:)
1574571036448:+ geom_smooth(level=0.95, color = "#333333", size = 0.8)
1574571036449:# + stat_cor(label.x = 3, label.y = 18)
1574571036452:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574571036453:label.x = 2
1574571036457:)
1574571036458:# + scale_fill_hue(l=45)
1574571036460:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574571036461:# + stat_regline_equation(label.x = 3, label.y = 16)
1574571036468:# + geom_text_repel(aes(label = genus), size = 3)
1574571036469:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574571036481:+ theme_classic2()
1574571036483:+ publicationTheme()
1574571036484:+ labs(title = titleLabel,
1574571036485:subtitle = subtitleLabel)
1574571036485:+ theme(legend.background = element_blank()
1574571036486:, legend.box.background = element_rect(colour = axisColor)
1574571036489:, panel.background = element_blank()
1574571036492:, panel.grid.major = element_blank()
1574571036500:, panel.grid.minor = element_blank()
1574571036501:, panel.spacing    = unit(8, "mm")
1574571036502:, title = element_text(hjust = 0.5)
1574571036505:, strip.background = element_blank()
1574571036506:, strip.text.x     = element_text(size = baseTextSize,
1574571036507:margin = margin(6,0,2,0, "mm"))
1574571036508:)
1574571036508:)
1574571181401:# expression(Value~is~sigma~R^{2}==0.6)
1574571181402:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574571181403:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574571181404:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574571181405:#              , position = jitter
1574571181407:, size = 3, stroke = 0.6
1574571181407:# , alpha = 0.8
1574571181408:)
1574571181409:+ geom_smooth(level=0.95, color = "#333333", size = 0.8)
1574571181409:# + stat_cor(label.x = 3, label.y = 18)
1574571181410:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574571181411:label.x = 2
1574571181411:)
1574571181412:# + scale_fill_hue(l=45)
1574571181413:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574571181413:# + stat_regline_equation(label.x = 3, label.y = 16)
1574571181414:# + geom_text_repel(aes(label = genus), size = 3)
1574571181415:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574571181416:+ theme_classic2()
1574571181416:+ publicationTheme()
1574571181417:+ labs(title = titleLabel,
1574571181418:subtitle = subtitleLabel)
1574571181418:+ theme(legend.background = element_blank()
1574571181419:, legend.box.background = element_rect(colour = axisColor)
1574571181420:, legend.margin=margin(0,0,0,6)
1574571181421:# , legend.box.margin=margin(-10,-10,-10,-10)
1574571181423:, panel.background = element_blank()
1574571181424:, panel.grid.major = element_blank()
1574571181425:, panel.grid.minor = element_blank()
1574571181428:, panel.spacing    = unit(8, "mm")
1574571181429:, title = element_text(hjust = 0.5)
1574571181430:, strip.background = element_blank()
1574571181431:, strip.text.x     = element_text(size = baseTextSize,
1574571181431:margin = margin(6,0,2,0, "mm"))
1574571181436:)
1574571181437:)
1574571225454:# expression(Value~is~sigma~R^{2}==0.6)
1574571225455:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574571225456:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574571225456:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574571225457:#              , position = jitter
1574571225457:, size = 3, stroke = 0.6
1574571225458:# , alpha = 0.8
1574571225459:)
1574571225459:+ geom_smooth(level=0.95, color = "#333333", size = 0.8)
1574571225460:# + stat_cor(label.x = 3, label.y = 18)
1574571225461:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574571225461:label.x = 2
1574571225462:)
1574571225463:# + scale_fill_hue(l=45)
1574571225463:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574571225464:# + stat_regline_equation(label.x = 3, label.y = 16)
1574571225466:# + geom_text_repel(aes(label = genus), size = 3)
1574571225467:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574571225468:+ theme_classic2()
1574571225469:+ publicationTheme()
1574571225470:+ labs(title = titleLabel,
1574571225476:subtitle = subtitleLabel)
1574571225476:+ theme(legend.background = element_blank()
1574571225477:, legend.box.background = element_rect(colour = axisColor)
1574571225477:# , legend.margin=margin(0,0,0,6)
1574571225478:, legend.box.margin=margin(0,0,0,6)
1574571225478:, panel.background = element_blank()
1574571225479:, panel.grid.major = element_blank()
1574571225479:, panel.grid.minor = element_blank()
1574571225480:, panel.spacing    = unit(8, "mm")
1574571225480:, title = element_text(hjust = 0.5)
1574571225480:, strip.background = element_blank()
1574571225481:, strip.text.x     = element_text(size = baseTextSize,
1574571225482:margin = margin(6,0,2,0, "mm"))
1574571225483:)
1574571225484:)
1574571233764:# expression(Value~is~sigma~R^{2}==0.6)
1574571233764:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574571233765:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574571233766:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574571233766:#              , position = jitter
1574571233767:, size = 3, stroke = 0.6
1574571233769:# , alpha = 0.8
1574571233769:)
1574571233770:+ geom_smooth(level=0.95, color = "#333333", size = 0.8)
1574571233770:# + stat_cor(label.x = 3, label.y = 18)
1574571233771:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574571233771:label.x = 2
1574571233771:)
1574571233772:# + scale_fill_hue(l=45)
1574571233772:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574571233773:# + stat_regline_equation(label.x = 3, label.y = 16)
1574571233773:# + geom_text_repel(aes(label = genus), size = 3)
1574571233774:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574571233774:+ theme_classic2()
1574571233775:+ publicationTheme()
1574571233775:+ labs(title = titleLabel,
1574571233775:subtitle = subtitleLabel)
1574571233776:+ theme(legend.background = element_blank()
1574571233776:, legend.box.background = element_rect(colour = axisColor)
1574571233777:# , legend.margin=margin(0,0,0,6)
1574571233777:, legend.box.margin=margin(0,0,0,6, "mm")
1574571233778:, panel.background = element_blank()
1574571233778:, panel.grid.major = element_blank()
1574571233778:, panel.grid.minor = element_blank()
1574571233779:, panel.spacing    = unit(8, "mm")
1574571233779:, title = element_text(hjust = 0.5)
1574571233780:, strip.background = element_blank()
1574571233780:, strip.text.x     = element_text(size = baseTextSize,
1574571233780:margin = margin(6,0,2,0, "mm"))
1574571233781:)
1574571233781:)
1574571280512:# expression(Value~is~sigma~R^{2}==0.6)
1574571280513:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574571280513:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574571280514:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574571280514:#              , position = jitter
1574571280515:, size = 3, stroke = 0.6
1574571280516:# , alpha = 0.8
1574571280516:)
1574571280516:+ geom_smooth(level=0.95, color = "#333333", size = 0.8)
1574571280517:# + stat_cor(label.x = 3, label.y = 18)
1574571280517:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574571280518:label.x = 2
1574571280518:)
1574571280519:# + scale_fill_hue(l=45)
1574571280519:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574571280520:# + stat_regline_equation(label.x = 3, label.y = 16)
1574571280520:# + geom_text_repel(aes(label = genus), size = 3)
1574571280521:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574571280526:+ theme_classic2()
1574571280527:+ publicationTheme()
1574571280527:+ labs(title = titleLabel,
1574571280529:subtitle = subtitleLabel)
1574571280530:+ theme(legend.background = element_blank()
1574571280531:, legend.box.background = element_rect(colour = axisColor)
1574571280532:, legend.margin=margin(4,4,4,8, "mm")
1574571280533:# , legend.box.margin=margin(0,0,0,6, "mm")
1574571280533:, panel.background = element_blank()
1574571280534:, panel.grid.major = element_blank()
1574571280535:, panel.grid.minor = element_blank()
1574571280535:, panel.spacing    = unit(8, "mm")
1574571280537:, title = element_text(hjust = 0.5)
1574571280538:, strip.background = element_blank()
1574571280539:, strip.text.x     = element_text(size = baseTextSize,
1574571280540:margin = margin(6,0,2,0, "mm"))
1574571280541:)
1574571280542:)
1574571323181:# expression(Value~is~sigma~R^{2}==0.6)
1574571323181:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574571323183:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574571323184:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574571323185:#              , position = jitter
1574571323185:, size = 3, stroke = 0.6
1574571323185:# , alpha = 0.8
1574571323186:)
1574571323186:+ geom_smooth(level=0.95, color = "#333333", size = 0.8)
1574571323187:# + stat_cor(label.x = 3, label.y = 18)
1574571323187:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574571323187:label.x = 2
1574571323188:)
1574571323189:# + scale_fill_hue(l=45)
1574571323189:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574571323196:# + stat_regline_equation(label.x = 3, label.y = 16)
1574571323197:# + geom_text_repel(aes(label = genus), size = 3)
1574571323198:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574571323198:+ theme_classic2()
1574571323208:+ publicationTheme()
1574571323209:+ labs(title = titleLabel,
1574571323209:subtitle = subtitleLabel)
1574571323210:+ theme(legend.background = element_blank()
1574571323211:, legend.box.background = element_rect(colour = axisColor)
1574571323213:# , legend.margin=margin(4,4,4,8, "mm")
1574571323214:# , legend.box.margin=margin(0,0,0,6, "mm")
1574571323229:, panel.background = element_blank()
1574571323232:, panel.grid.major = element_blank()
1574571323233:, panel.grid.minor = element_blank()
1574571323234:, panel.spacing    = unit(8, "mm")
1574571323234:, title = element_text(hjust = 0.5)
1574571323235:, strip.background = element_blank()
1574571323236:, strip.text.x     = element_text(size = baseTextSize,
1574571323236:margin = margin(6,0,2,0, "mm"))
1574571323237:)
1574571323238:)
1574571396543:# expression(Value~is~sigma~R^{2}==0.6)
1574571396543:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574571396544:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574571396544:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574571396545:#              , position = jitter
1574571396546:, size = 3, stroke = 0.6
1574571396546:# , alpha = 0.8
1574571396547:)
1574571396547:+ geom_smooth(level=0.95, color = "#333333", size = 0.8)
1574571396548:# + stat_cor(label.x = 3, label.y = 18)
1574571396552:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574571396554:label.x = 2
1574571396554:)
1574571396555:# + scale_fill_hue(l=45)
1574571396555:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574571396556:# + stat_regline_equation(label.x = 3, label.y = 16)
1574571396557:# + geom_text_repel(aes(label = genus), size = 3)
1574571396557:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574571396558:+ theme_classic2()
1574571396559:+ publicationTheme()
1574571396559:+ labs(title = titleLabel,
1574571396560:subtitle = subtitleLabel)
1574571396560:+ theme(legend.background = element_blank()
1574571396561:, legend.box.background = element_rect(colour = axisColor)
1574571396570:# , legend.margin=margin(4,4,4,8, "mm")
1574571396572:, legend.box.margin=margin(4,4,4,8, "mm")
1574571396578:, panel.background = element_blank()
1574571396584:, panel.grid.major = element_blank()
1574571396585:, panel.grid.minor = element_blank()
1574571396586:, panel.spacing    = unit(8, "mm")
1574571396586:, title = element_text(hjust = 0.5)
1574571396587:, strip.background = element_blank()
1574571396588:, strip.text.x     = element_text(size = baseTextSize,
1574571396598:margin = margin(6,0,2,0, "mm"))
1574571396599:)
1574571396601:)
1574571428766:# expression(Value~is~sigma~R^{2}==0.6)
1574571428766:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574571428767:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574571428767:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574571428781:#              , position = jitter
1574571428782:, size = 3, stroke = 0.6
1574571428783:# , alpha = 0.8
1574571428783:)
1574571428784:+ geom_smooth(level=0.95, color = "#333333", size = 0.8)
1574571428785:# + stat_cor(label.x = 3, label.y = 18)
1574571428785:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574571428786:label.x = 2
1574571428787:)
1574571428787:# + scale_fill_hue(l=45)
1574571428788:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574571428789:# + stat_regline_equation(label.x = 3, label.y = 16)
1574571428805:# + geom_text_repel(aes(label = genus), size = 3)
1574571428806:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574571428806:+ theme_classic2()
1574571428807:+ publicationTheme()
1574571428808:+ labs(title = titleLabel,
1574571428808:subtitle = subtitleLabel)
1574571428809:+ theme(legend.background = element_blank()
1574571428810:, legend.box.background = element_rect(colour = axisColor)
1574571428810:, legend.margin=margin(4,4,4,12, "mm")
1574571428811:, legend.box.margin=margin(4,4,4,8, "mm")
1574571428812:, panel.background = element_blank()
1574571428812:, panel.grid.major = element_blank()
1574571428813:, panel.grid.minor = element_blank()
1574571428814:, panel.spacing    = unit(8, "mm")
1574571428815:, title = element_text(hjust = 0.5)
1574571428815:, strip.background = element_blank()
1574571428816:, strip.text.x     = element_text(size = baseTextSize,
1574571428821:margin = margin(6,0,2,0, "mm"))
1574571428822:)
1574571428833:)
1574571520799:# expression(Value~is~sigma~R^{2}==0.6)
1574571520799:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574571520800:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574571520801:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574571520801:#              , position = jitter
1574571520802:, size = 3, stroke = 0.6
1574571520802:# , alpha = 0.8
1574571520803:)
1574571520803:+ geom_smooth(level=0.95, color = "#333333", size = 0.8)
1574571520805:# + stat_cor(label.x = 3, label.y = 18)
1574571520806:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574571520811:label.x = 2
1574571520812:)
1574571520812:# + scale_fill_hue(l=45)
1574571520813:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574571520814:# + stat_regline_equation(label.x = 3, label.y = 16)
1574571520814:# + geom_text_repel(aes(label = genus), size = 3)
1574571520815:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574571520816:+ theme_classic2()
1574571520816:+ publicationTheme()
1574571520817:+ labs(title = titleLabel,
1574571520817:subtitle = subtitleLabel)
1574571520818:+ theme(legend.background = element_blank()
1574571520819:, legend.box.background = element_rect(colour = axisColor)
1574571520819:, legend.box.spacing = unit(8, "mm")
1574571520820:, panel.background = element_blank()
1574571520824:, panel.grid.major = element_blank()
1574571520825:, panel.grid.minor = element_blank()
1574571520827:, panel.spacing    = unit(8, "mm")
1574571520828:, title = element_text(hjust = 0.5)
1574571520829:, strip.background = element_blank()
1574571520830:, strip.text.x     = element_text(size = baseTextSize,
1574571520830:margin = margin(6,0,2,0, "mm"))
1574571520831:)
1574571520832:)
1574571542753:# expression(Value~is~sigma~R^{2}==0.6)
1574571542754:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574571542755:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574571542756:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574571542757:#              , position = jitter
1574571542758:, size = 3, stroke = 0.6
1574571542758:# , alpha = 0.8
1574571542759:)
1574571542760:+ geom_smooth(level=0.95, color = "#333333", size = 0.8)
1574571542760:# + stat_cor(label.x = 3, label.y = 18)
1574571542761:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574571542762:label.x = 2
1574571542762:)
1574571542764:# + scale_fill_hue(l=45)
1574571542765:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574571542766:# + stat_regline_equation(label.x = 3, label.y = 16)
1574571542768:# + geom_text_repel(aes(label = genus), size = 3)
1574571542769:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574571542770:+ theme_classic2()
1574571542770:+ publicationTheme()
1574571542771:+ labs(title = titleLabel,
1574571542771:subtitle = subtitleLabel)
1574571542772:+ theme(legend.background = element_blank()
1574571542772:, legend.box.background = element_rect(colour = axisColor)
1574571542773:, legend.box.spacing = unit(20, "mm")
1574571542774:, panel.background = element_blank()
1574571542776:, panel.grid.major = element_blank()
1574571542777:, panel.grid.minor = element_blank()
1574571542778:, panel.spacing    = unit(8, "mm")
1574571542779:, title = element_text(hjust = 0.5)
1574571542780:, strip.background = element_blank()
1574571542781:, strip.text.x     = element_text(size = baseTextSize,
1574571542782:margin = margin(6,0,2,0, "mm"))
1574571542783:)
1574571542784:)
1574571590338:ggsave(filename = paste0(rank, ".", sam, ".rel_abundance.pdf"), plot = p,
1574571590339:width = 12, height = 10)
1574571713142:(pred.shannon <- as_tibble(calculateShannonIndex(pred.relAbun, depths)))
1574571715495:(obs.shannon  <- as_tibble(calculateShannonIndex(
1574571715496:filter(obs.relAbun, !!as.symbol(rank)) != 'Unclassified'), depths))
1574571760920:(obs.shannon  <- as_tibble(calculateShannonIndex(obs.relAbun, depths)))
1574572078630:pred.shannon %>%
1574572078631:gather(depth, shannon) %>%
1574572078631:spread(rows, valname)
1574572084268:pred.shannon %>%
1574572084269:gather(depth, shannon)
1574572161347:pred.shannon %>%
1574572161349:gather(depth, shannon) %>%
1574572161350:mutate(sample = sam,
1574572161351:k = ksize)
1574572234574:pred.shannon %>%
1574572234574:gather(depth, shannon) %>%
1574572234575:mutate(Sample = sam,
1574572234575:k = ksize,
1574572234576:Type = "Predicted")
1574572269782:obs.shannon %>%
1574572269783:gather(depth, shannon) %>%
1574572269784:mutate(Sample = sam,
1574572269784:k = ksize,
1574572269785:Type = "Observed")
1574572289034:pred.shannon %>%
1574572289035:gather(Depth, Shannon) %>%
1574572289036:mutate(Sample = sam,
1574572289036:k = ksize,
1574572289037:Type = "Predicted")
1574572290500:obs.shannon %>%
1574572290501:gather(Depth, Shannon) %>%
1574572290501:mutate(Sample = sam,
1574572290502:k = ksize,
1574572290502:Type = "Observed")
1574572393596:shannonTable <- tibble()
1574572424112:ame(
1574572424113:pred.shannon %>%
1574572424114:gather(Depth, Shannon) %>%
1574572424114:mutate(Sample = sam,
1574572424115:k = ksize,
1574572424115:Type = "Predicted"),
1574572424116:obs.shannon %>%
1574572424117:gather(Depth, Shannon) %>%
1574572424118:mutate(Sample = sam,
1574572424118:k = ksize,
1574572424119:Type = "Observed"))
1574572432305:shannonTable <- rbind.data.frame(
1574572432306:pred.shannon %>%
1574572432306:gather(Depth, Shannon) %>%
1574572432307:mutate(Sample = sam,
1574572432522:k = ksize,
1574572432522:Type = "Predicted"),
1574572432523:obs.shannon %>%
1574572432524:gather(Depth, Shannon) %>%
1574572432524:mutate(Sample = sam,
1574572432525:k = ksize,
1574572432526:Type = "Observed"))
1574572447925:(shannonTable <- rbind.data.frame(
1574572447925:pred.shannon %>%
1574572447926:gather(Depth, Shannon) %>%
1574572447927:mutate(Sample = sam,
1574572447927:k = ksize,
1574572447928:Type = "Predicted"),
1574572447928:obs.shannon %>%
1574572447929:gather(Depth, Shannon) %>%
1574572447930:mutate(Sample = sam,
1574572447931:k = ksize,
1574572447932:Type = "Observed"))
1574572447933:)
1574572472233:(shannonTable <- rbind.data.frame(
1574572472234:shannonTable,
1574572472234:pred.shannon %>%
1574572472235:gather(Depth, Shannon) %>%
1574572472237:mutate(Sample = sam,
1574572472238:k = ksize,
1574572472240:Type = "Predicted"),
1574572472242:obs.shannon %>%
1574572472245:gather(Depth, Shannon) %>%
1574572472247:mutate(Sample = sam,
1574572472247:k = ksize,
1574572472248:Type = "Observed"))
1574572472249:)
1574572481073:shannonTable <- tibble()
1574572493802:(shannonTable <- rbind.data.frame(
1574572493803:shannonTable,
1574572493803:pred.shannon %>%
1574572493804:gather(Depth, Shannon) %>%
1574572493804:mutate(Sample = sam,
1574572493805:k = ksize,
1574572493805:Type = "Predicted"),
1574572493806:obs.shannon %>%
1574572493806:gather(Depth, Shannon) %>%
1574572493807:mutate(Sample = sam,
1574572493808:k = ksize,
1574572493809:Type = "Observed"))
1574572493809:)
1574572595165:shannonTable <- tibble()
1574572596074:(ksize <- kList[2])
1574572598693:for (sam in samples){
1574572598693:# (sam <- "FA")    # test value
1574572598694:# Subset data
1574572598695:(obsSubset <- obsData %>%
1574572598695:filter(sample == sam))
1574572598696:(predSubset <- predData %>%
1574572598696:filter(sample == sam,
1574572598697:k == ksize))
1574572598698:# Check total number of reads on input data
1574572598699:(obsSubset%>% summarise_at(depths, sum))
1574572598699:(predSubset %>% summarise_at(depths, sum))
1574572598700:# Read counts to long format
1574572598701:(readCounts.long <- left_join(x = getAbundance(obsSubset, as.symbol(rank), depths) %>%
1574572598701:gather(key = "depth", value = "Observed", -1),
1574572598702:y = getAbundance(predSubset, as.symbol(rank), depths) %>%
1574572598703:gather(key = "depth", value = "Predicted", -1)
1574572598704:# , by = c(rank, "depth")
1574572598705:) %>%
1574572598706:mutate(depth = factor(depth)) %>%
1574572598706:replace_na(list("Observed" = 0, "Predicted" = 0))
1574572598707:)
1574572598708:# Calcultae relative abundance
1574572598709:(pred.relAbun <- getRelativeAbundance(predSubset, as.symbol(rank), depths))
1574572598709:(obs.relAbun  <- getRelativeAbundance(obsSubset, as.symbol(rank), depths))
1574572598710:# Remove unlcassified row from predicted data
1574572598711:(pred.relAbun <- pred.relAbun %>% filter(!!as.symbol(rank) != "Unclassified"))
1574572598713:# Relative abundances tables to long format
1574572598714:pred.relAbun.long <- pred.relAbun %>%
1574572598715:gather(key = "depth", value = "Predicted", -1)
1574572598716:obs.relAbun.long <- obs.relAbun %>%
1574572598717:gather(key = "depth", value = "Observed", -1)
1574572598719:(relAbun.long <- right_join(x = obs.relAbun.long,
1574572598720:y = pred.relAbun.long) %>%
1574572598720:mutate(depth = factor(depth, levels = depths)) %>%
1574572598721:replace_na(list("Observed" = 0, "Predicted" = 0))
1574572598722:)
1574572598724:(depthLabels <- paste0(depths, "x"))
1574572598725:(names(depthLabels) <- depths)
1574572598727:palette   <- colorRampPalette(pal_jco()(9))
1574572598728:palette   <- colorRampPalette(pal_d3()(9))
1574572598729:nTaxa     <- length(unique(pull(relAbun.long, !!as.symbol(rank))))
1574572598730:customPal <- palette(nTaxa)
1574572598732:customPal <- pal_d3(palette = "category20")(nTaxa)
1574572598733:show_col(rev(customPal))
1574572598735:titleLabel = paste("Sample", sam)
1574572598736:subtitleLabel = paste("nifH - Full lenght (>=750 bp)")
1574572598737:subtitleLabel = bquote(italic("nifH") ~ "full length (">=750 ~ "bp)")
1574572598738:# expression(Value~is~sigma~R^{2}==0.6)
1574572598739:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574572598740:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574572598741:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574572598742:#              , position = jitter
1574572598744:, size = 3, stroke = 0.6
1574572598763:# , alpha = 0.8
1574572598765:)
1574572598768:+ geom_smooth(level=0.95, color = "#333333", size = 0.8)
1574572598770:# + stat_cor(label.x = 3, label.y = 18)
1574572598774:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574572598775:label.x = 2
1574572598776:)
1574572598777:# + scale_fill_hue(l=45)
1574572598778:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574572598779:# + stat_regline_equation(label.x = 3, label.y = 16)
1574572598781:# + geom_text_repel(aes(label = genus), size = 3)
1574572598794:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574572598795:+ theme_classic2()
1574572598796:+ publicationTheme()
1574572598797:+ labs(title = titleLabel,
1574572598799:subtitle = subtitleLabel)
1574572598805:+ theme(legend.background = element_blank()
1574572598806:, legend.box.background = element_rect(colour = axisColor)
1574572598808:, legend.box.spacing = unit(20, "mm")
1574572598809:, panel.background = element_blank()
1574572598810:, panel.grid.major = element_blank()
1574572598812:, panel.grid.minor = element_blank()
1574572598822:, panel.spacing    = unit(8, "mm")
1574572598823:, title = element_text(hjust = 0.5)
1574572598824:, strip.background = element_blank()
1574572598826:, strip.text.x     = element_text(size = baseTextSize,
1574572598827:margin = margin(6,0,2,0, "mm"))
1574572598828:)
1574572598830:)
1574572598833:ggsave(filename = paste0(rank, ".", sam, ".rel_abundance.pdf"), plot = p,
1574572598835:width = 12, height = 10)
1574572598839:(pred.shannon <- as_tibble(calculateShannonIndex(pred.relAbun, depths)))
1574572598840:(obs.shannon  <- as_tibble(calculateShannonIndex(obs.relAbun, depths)))
1574572598843:(shannonTable <- rbind.data.frame(
1574572598844:shannonTable,
1574572598845:pred.shannon %>%
1574572598904:gather(Depth, Shannon) %>%
1574572598905:mutate(Sample = sam,
1574572598907:k = ksize,
1574572598908:Type = "Predicted"),
1574572598910:obs.shannon %>%
1574572598911:gather(Depth, Shannon) %>%
1574572598915:mutate(Sample = sam,
1574572598923:k = ksize,
1574572598925:Type = "Observed"))
1574572598926:)
1574572598936:}
1574572897114:# expression(Value~is~sigma~R^{2}==0.6)
1574572897163:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574572897164:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574572897165:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574572897166:#              , position = jitter
1574572897166:, size = 3, stroke = 0.6
1574572897167:# , alpha = 0.8
1574572897168:)
1574572897170:+ geom_smooth(method = lm
1574572897171:, level = 0.95, color = "#333333", size = 0.8
1574572897172:# , se=FALSE
1574572897172:)
1574572897173:# + stat_cor(label.x = 3, label.y = 18)
1574572897175:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
1574572897176:label.x = 2
1574572897177:)
1574572897181:# + scale_fill_hue(l=45)
1574572897182:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574572897182:# + stat_regline_equation(label.x = 3, label.y = 16)
1574572897183:# + geom_text_repel(aes(label = genus), size = 3)
1574572897189:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574572897190:+ theme_classic2()
1574572897191:+ publicationTheme()
1574572897192:+ labs(title = titleLabel,
1574572897197:subtitle = subtitleLabel)
1574572897197:+ theme(legend.background = element_blank()
1574572897198:, legend.box.background = element_rect(colour = axisColor)
1574572897199:, legend.box.spacing = unit(20, "mm")
1574572897199:, panel.background = element_blank()
1574572897200:, panel.grid.major = element_blank()
1574572897201:, panel.grid.minor = element_blank()
1574572897202:, panel.spacing    = unit(8, "mm")
1574572897202:, title = element_text(hjust = 0.5)
1574572897203:, strip.background = element_blank()
1574572897216:, strip.text.x     = element_text(size = baseTextSize,
1574572897218:margin = margin(6,0,2,0, "mm"))
1574572897219:)
1574572897220:)
1574573041797:# expression(Value~is~sigma~R^{2}==0.6)
1574573041798:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574573041799:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574573041799:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574573041800:#              , position = jitter
1574573041801:, size = 3, stroke = 0.6
1574573041801:# , alpha = 0.8
1574573041802:)
1574573041803:+ geom_smooth(method = lm
1574573041804:, level = 0.95, color = "#333333", size = 0.8
1574573041805:# , se=FALSE
1574573041805:)
1574573041809:# + stat_cor(label.x = 3, label.y = 18)
1574573041810:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574573041811:, label.x = 1
1574573041812:, label.y = max(relAbun.long$Predicted) * 0.9
1574573041812:)
1574573041813:# + scale_fill_hue(l=45)
1574573041816:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574573041825:# + stat_regline_equation(label.x = 3, label.y = 16)
1574573041826:# + geom_text_repel(aes(label = genus), size = 3)
1574573041827:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574573041827:+ theme_classic2()
1574573041828:+ publicationTheme()
1574573041829:+ labs(title = titleLabel,
1574573041830:subtitle = subtitleLabel)
1574573041831:+ theme(legend.background = element_blank()
1574573041832:, legend.box.background = element_rect(colour = axisColor)
1574573041833:, legend.box.spacing = unit(20, "mm")
1574573041836:, panel.background = element_blank()
1574573041837:, panel.grid.major = element_blank()
1574573041838:, panel.grid.minor = element_blank()
1574573041839:, panel.spacing    = unit(8, "mm")
1574573041840:, title = element_text(hjust = 0.5)
1574573041841:, strip.background = element_blank()
1574573041849:, strip.text.x     = element_text(size = baseTextSize,
1574573041850:margin = margin(6,0,2,0, "mm"))
1574573041851:)
1574573041852:)
1574573061236:max(relAbun.long$Predicted)
1574573144388:# expression(Value~is~sigma~R^{2}==0.6)
1574573144389:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574573144390:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574573144390:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574573144391:#              , position = jitter
1574573144391:, size = 3, stroke = 0.6
1574573144392:# , alpha = 0.8
1574573144393:)
1574573144393:+ geom_smooth(method = lm
1574573144394:, level = 0.95, color = "#333333", size = 0.8
1574573144395:# , se=FALSE
1574573144395:)
1574573144396:# + stat_cor(label.x = 3, label.y = 18)
1574573144397:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574573144397:, label.x = 1
1574573144398:, label.y = 24
1574573144399:# , label.y = max(relAbun.long$Predicted) * 0.9
1574573144400:)
1574573144401:# + scale_fill_hue(l=45)
1574573144403:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574573144404:# + stat_regline_equation(label.x = 3, label.y = 16)
1574573144405:# + geom_text_repel(aes(label = genus), size = 3)
1574573144405:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574573144406:+ theme_classic2()
1574573144407:+ publicationTheme()
1574573144408:+ labs(title = titleLabel,
1574573144408:subtitle = subtitleLabel)
1574573144409:+ theme(legend.background = element_blank()
1574573144410:, legend.box.background = element_rect(colour = axisColor)
1574573144410:, legend.box.spacing = unit(20, "mm")
1574573144411:, panel.background = element_blank()
1574573144412:, panel.grid.major = element_blank()
1574573144412:, panel.grid.minor = element_blank()
1574573144413:, panel.spacing    = unit(8, "mm")
1574573144414:, title = element_text(hjust = 0.5)
1574573144415:, strip.background = element_blank()
1574573144415:, strip.text.x     = element_text(size = baseTextSize,
1574573144416:margin = margin(6,0,2,0, "mm"))
1574573144417:)
1574573144418:)
1574573300750:(typeBySample <- c("FA" = "full", "FB" = "full", "PA" = "partial", "PB" = "partial"))
1574573341479:(typeBySample <- c("FA" = "Full", "FB" = "Full", "PA" = "Partial", "PB" = "Partial"))
1574573383714:typeBySample[sam]
1574573598503:(lengthBySample <- c("FA" = bquote(italic("nifH") ~ "full length (">=750 ~ "bp)"),
1574573598504:"FB" = bquote(italic("nifH") ~ "full length (">=750 ~ "bp)"),
1574573598504:"PA" = bquote(italic("nifH") ~ "full length ("<750 ~ "bp)"),
1574573598505:"PB" = bquote(italic("nifH") ~ "full length ("<750 ~ "bp)")))
1574573643696:# subtitleLabel = paste("nifH - Full lenght (>=750 bp)")
1574573643697:# subtitleLabel = paste("nifH - ", typeBySample[sam], " lenght (>=750 bp)")
1574573643697:# subtitleLabel = bquote(italic("nifH") ~ typeBySample[sam] ~ " length (">=750 ~ "bp)")
1574573643698:subtitleLabel = lengthBySample[sam]
1574573652405:# expression(Value~is~sigma~R^{2}==0.6)
1574573652405:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574573652406:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574573652407:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574573652407:#              , position = jitter
1574573652408:, size = 3, stroke = 0.6
1574573652409:# , alpha = 0.8
1574573652409:)
1574573652420:+ geom_smooth(method = lm
1574573652421:, level = 0.95, color = "#333333", size = 0.8
1574573652421:# , se=FALSE
1574573652422:)
1574573652423:# + stat_cor(label.x = 3, label.y = 18)
1574573652423:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574573652424:, label.x = 1
1574573652424:, label.y = 24
1574573652425:# , label.y = max(relAbun.long$Predicted) * 0.9
1574573652426:)
1574573652426:# + scale_fill_hue(l=45)
1574573652427:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574573652427:# + stat_regline_equation(label.x = 3, label.y = 16)
1574573652428:# + geom_text_repel(aes(label = genus), size = 3)
1574573652429:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574573652429:+ theme_classic2()
1574573652430:+ publicationTheme()
1574573652430:+ labs(title = titleLabel,
1574573652431:subtitle = subtitleLabel)
1574573652431:+ theme(legend.background = element_blank()
1574573652432:, legend.box.background = element_rect(colour = axisColor)
1574573652432:, legend.box.spacing = unit(20, "mm")
1574573652433:, panel.background = element_blank()
1574573652434:, panel.grid.major = element_blank()
1574573652435:, panel.grid.minor = element_blank()
1574573652443:, panel.spacing    = unit(8, "mm")
1574573652444:, title = element_text(hjust = 0.5)
1574573652445:, strip.background = element_blank()
1574573652446:, strip.text.x     = element_text(size = baseTextSize,
1574573652447:margin = margin(6,0,2,0, "mm"))
1574573652461:)
1574573652462:)
1574573853732:titleLabel = paste("Sample", sam)
1574573855738:# subtitleLabel = paste("nifH - Full lenght (>=750 bp)")
1574573855738:# subtitleLabel = paste("nifH -", typeBySample[sam])
1574573855739:# subtitleLabel = paste("nifH - ", typeBySample[sam], " lenght (>=750 bp)")
1574573855739:subtitleLabel = bquote(italic("nifH") ~ typeBySample[sam] ~ " length")
1574573857362:# subtitleLabel = lengthBySample[sam]
1574573857363:# expression(Value~is~sigma~R^{2}==0.6)
1574573857364:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574573857364:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574573857365:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574573857366:#              , position = jitter
1574573857366:, size = 3, stroke = 0.6
1574573857367:# , alpha = 0.8
1574573857367:)
1574573857368:+ geom_smooth(method = lm
1574573857368:, level = 0.95, color = "#333333", size = 0.8
1574573857368:# , se=FALSE
1574573857369:)
1574573857371:# + stat_cor(label.x = 3, label.y = 18)
1574573857371:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574573857372:, label.x = 1
1574573857372:, label.y = 24
1574573857377:# , label.y = max(relAbun.long$Predicted) * 0.9
1574573857378:)
1574573857381:# + scale_fill_hue(l=45)
1574573857382:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574573857383:# + stat_regline_equation(label.x = 3, label.y = 16)
1574573857383:# + geom_text_repel(aes(label = genus), size = 3)
1574573857384:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574573857384:+ theme_classic2()
1574573857385:+ publicationTheme()
1574573857386:+ labs(title = titleLabel,
1574573857386:subtitle = subtitleLabel)
1574573857387:+ theme(legend.background = element_blank()
1574573857388:, legend.box.background = element_rect(colour = axisColor)
1574573857388:, legend.box.spacing = unit(20, "mm")
1574573857389:, panel.background = element_blank()
1574573857390:, panel.grid.major = element_blank()
1574573857391:, panel.grid.minor = element_blank()
1574573857392:, panel.spacing    = unit(8, "mm")
1574573857393:, title = element_text(hjust = 0.5)
1574573857394:, strip.background = element_blank()
1574573857395:, strip.text.x     = element_text(size = baseTextSize,
1574573857396:margin = margin(6,0,2,0, "mm"))
1574573857397:)
1574573857398:)
1574573967323:# subtitleLabel = paste("nifH - Full lenght (>=750 bp)")
1574573967324:# subtitleLabel = paste("nifH -", typeBySample[sam])
1574573967324:# subtitleLabel = paste("nifH - ", typeBySample[sam], " lenght (>=750 bp)")
1574573967325:subtitleLabel = bquote(italic("nifH") ~ .(typeBySample[sam]) ~ " length (">=750 ~ "bp)")
1574573968347:# subtitleLabel = lengthBySample[sam]
1574573968347:# expression(Value~is~sigma~R^{2}==0.6)
1574573968348:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574573968349:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574573968349:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574573968350:#              , position = jitter
1574573968351:, size = 3, stroke = 0.6
1574573968351:# , alpha = 0.8
1574573968352:)
1574573968353:+ geom_smooth(method = lm
1574573968353:, level = 0.95, color = "#333333", size = 0.8
1574573968354:# , se=FALSE
1574573968355:)
1574573968355:# + stat_cor(label.x = 3, label.y = 18)
1574573968357:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574573968362:, label.x = 1
1574573968363:, label.y = 24
1574573968363:# , label.y = max(relAbun.long$Predicted) * 0.9
1574573968364:)
1574573968364:# + scale_fill_hue(l=45)
1574573968368:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574573968369:# + stat_regline_equation(label.x = 3, label.y = 16)
1574573968369:# + geom_text_repel(aes(label = genus), size = 3)
1574573968370:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574573968371:+ theme_classic2()
1574573968371:+ publicationTheme()
1574573968372:+ labs(title = titleLabel,
1574573968372:subtitle = subtitleLabel)
1574573968376:+ theme(legend.background = element_blank()
1574573968377:, legend.box.background = element_rect(colour = axisColor)
1574573968378:, legend.box.spacing = unit(20, "mm")
1574573968379:, panel.background = element_blank()
1574573968380:, panel.grid.major = element_blank()
1574573968380:, panel.grid.minor = element_blank()
1574573968381:, panel.spacing    = unit(8, "mm")
1574573968382:, title = element_text(hjust = 0.5)
1574573968383:, strip.background = element_blank()
1574573968385:, strip.text.x     = element_text(size = baseTextSize,
1574573968387:margin = margin(6,0,2,0, "mm"))
1574573968389:)
1574573968390:)
1574574036021:# subtitleLabel = paste("nifH - Full lenght (>=750 bp)")
1574574036022:# subtitleLabel = paste("nifH -", typeBySample[sam])
1574574036023:# subtitleLabel = paste("nifH - ", typeBySample[sam], " lenght (>=750 bp)")
1574574036023:subtitleLabel = bquote(italic("nifH") ~ .(typeBySample[sam]))
1574574037126:# subtitleLabel = lengthBySample[sam]
1574574037127:# expression(Value~is~sigma~R^{2}==0.6)
1574574037128:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574574037129:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574574037130:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574574037131:#              , position = jitter
1574574037131:, size = 3, stroke = 0.6
1574574037132:# , alpha = 0.8
1574574037132:)
1574574037133:+ geom_smooth(method = lm
1574574037134:, level = 0.95, color = "#333333", size = 0.8
1574574037138:# , se=FALSE
1574574037142:)
1574574037146:# + stat_cor(label.x = 3, label.y = 18)
1574574037148:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574574037149:, label.x = 1
1574574037150:, label.y = 24
1574574037150:# , label.y = max(relAbun.long$Predicted) * 0.9
1574574037151:)
1574574037155:# + scale_fill_hue(l=45)
1574574037155:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574574037156:# + stat_regline_equation(label.x = 3, label.y = 16)
1574574037156:# + geom_text_repel(aes(label = genus), size = 3)
1574574037157:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574574037157:+ theme_classic2()
1574574037158:+ publicationTheme()
1574574037159:+ labs(title = titleLabel,
1574574037159:subtitle = subtitleLabel)
1574574037160:+ theme(legend.background = element_blank()
1574574037160:, legend.box.background = element_rect(colour = axisColor)
1574574037161:, legend.box.spacing = unit(20, "mm")
1574574037162:, panel.background = element_blank()
1574574037162:, panel.grid.major = element_blank()
1574574037163:, panel.grid.minor = element_blank()
1574574037164:, panel.spacing    = unit(8, "mm")
1574574037165:, title = element_text(hjust = 0.5)
1574574037166:, strip.background = element_blank()
1574574037167:, strip.text.x     = element_text(size = baseTextSize,
1574574037169:margin = margin(6,0,2,0, "mm"))
1574574037170:)
1574574037173:)
1574574119174:# subtitleLabel = lengthBySample[sam]
1574574119174:# expression(Value~is~sigma~R^{2}==0.6)
1574574119175:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574574119176:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574574119177:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574574119177:#              , position = jitter
1574574119177:, size = 3, stroke = 0.6
1574574119178:# , alpha = 0.8
1574574119178:)
1574574119179:+ geom_smooth(method = lm
1574574119179:, level = 0.95, color = "#333333", size = 0.8
1574574119180:, se=FALSE
1574574119180:)
1574574119181:# + stat_cor(label.x = 3, label.y = 18)
1574574119181:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574574119182:, label.x = 1
1574574119191:, label.y = 24
1574574119191:# , label.y = max(relAbun.long$Predicted) * 0.9
1574574119192:)
1574574119193:# + scale_fill_hue(l=45)
1574574119194:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574574119194:# + stat_regline_equation(label.x = 3, label.y = 16)
1574574119195:# + geom_text_repel(aes(label = genus), size = 3)
1574574119196:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574574119197:+ theme_classic2()
1574574119197:+ publicationTheme()
1574574119198:+ labs(title = titleLabel,
1574574119199:subtitle = subtitleLabel)
1574574119199:+ theme(legend.background = element_blank()
1574574119201:, legend.box.background = element_rect(colour = axisColor)
1574574119202:, legend.box.spacing = unit(20, "mm")
1574574119203:, panel.background = element_blank()
1574574119204:, panel.grid.major = element_blank()
1574574119205:, panel.grid.minor = element_blank()
1574574119206:, panel.spacing    = unit(8, "mm")
1574574119207:, title = element_text(hjust = 0.5)
1574574119208:, strip.background = element_blank()
1574574119209:, strip.text.x     = element_text(size = baseTextSize,
1574574119210:margin = margin(6,0,2,0, "mm"))
1574574119211:)
1574574119211:)
1574574164039:shannonTable
1574574187567:# Process samples ---------------------------------------------------------
1574574187567:rank <- "genus"
1574574188034:shannonTable <- tibble()
1574574188731:(ksize <- kList[2])
1574574194424:for (sam in samples){
1574574194425:# (sam <- "FA")    # test value
1574574194425:# Subset data
1574574194426:(obsSubset <- obsData %>%
1574574194426:filter(sample == sam))
1574574194427:(predSubset <- predData %>%
1574574194428:filter(sample == sam,
1574574194428:k == ksize))
1574574194429:# Check total number of reads on input data
1574574194430:(obsSubset%>% summarise_at(depths, sum))
1574574194431:(predSubset %>% summarise_at(depths, sum))
1574574194433:# Read counts to long format
1574574194443:(readCounts.long <- left_join(x = getAbundance(obsSubset, as.symbol(rank), depths) %>%
1574574194446:gather(key = "depth", value = "Observed", -1),
1574574194447:y = getAbundance(predSubset, as.symbol(rank), depths) %>%
1574574194448:gather(key = "depth", value = "Predicted", -1)
1574574194449:# , by = c(rank, "depth")
1574574194450:) %>%
1574574194450:mutate(depth = factor(depth)) %>%
1574574194451:replace_na(list("Observed" = 0, "Predicted" = 0))
1574574194452:)
1574574194453:# Calcultae relative abundance
1574574194455:(pred.relAbun <- getRelativeAbundance(predSubset, as.symbol(rank), depths))
1574574194455:(obs.relAbun  <- getRelativeAbundance(obsSubset, as.symbol(rank), depths))
1574574194457:# Remove unlcassified row from predicted data
1574574194457:(pred.relAbun <- pred.relAbun %>% filter(!!as.symbol(rank) != "Unclassified"))
1574574194459:# Relative abundances tables to long format
1574574194460:pred.relAbun.long <- pred.relAbun %>%
1574574194461:gather(key = "depth", value = "Predicted", -1)
1574574194462:obs.relAbun.long <- obs.relAbun %>%
1574574194463:gather(key = "depth", value = "Observed", -1)
1574574194482:(relAbun.long <- right_join(x = obs.relAbun.long,
1574574194483:y = pred.relAbun.long) %>%
1574574194484:mutate(depth = factor(depth, levels = depths)) %>%
1574574194484:replace_na(list("Observed" = 0, "Predicted" = 0))
1574574194485:)
1574574194487:(depthLabels <- paste0(depths, "x"))
1574574194488:(names(depthLabels) <- depths)
1574574194489:palette   <- colorRampPalette(pal_jco()(9))
1574574194494:palette   <- colorRampPalette(pal_d3()(9))
1574574194495:nTaxa     <- length(unique(pull(relAbun.long, !!as.symbol(rank))))
1574574194496:customPal <- palette(nTaxa)
1574574194501:customPal <- pal_d3(palette = "category20")(nTaxa)
1574574194504:show_col(rev(customPal))
1574574194506:titleLabel = paste("Sample", sam)
1574574194507:# subtitleLabel = paste("nifH - Full lenght (>=750 bp)")
1574574194508:# subtitleLabel = paste("nifH -", typeBySample[sam])
1574574194510:# subtitleLabel = paste("nifH - ", typeBySample[sam], " lenght (>=750 bp)")
1574574194511:subtitleLabel = bquote(italic("nifH") ~ .(typeBySample[sam]))
1574574194515:# subtitleLabel = lengthBySample[sam]
1574574194517:# expression(Value~is~sigma~R^{2}==0.6)
1574574194518:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574574194519:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574574194520:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574574194521:#              , position = jitter
1574574194522:, size = 3, stroke = 0.6
1574574194523:# , alpha = 0.8
1574574194524:)
1574574194526:+ geom_smooth(method = lm
1574574194527:, level = 0.95, color = "#333333", size = 0.8
1574574194531:, se=FALSE
1574574194532:)
1574574194533:# + stat_cor(label.x = 3, label.y = 18)
1574574194534:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574574194536:, label.x = 1
1574574194537:, label.y = 24
1574574194538:# , label.y = max(relAbun.long$Predicted) * 0.9
1574574194539:)
1574574194542:# + scale_fill_hue(l=45)
1574574194544:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574574194545:# + stat_regline_equation(label.x = 3, label.y = 16)
1574574194549:# + geom_text_repel(aes(label = genus), size = 3)
1574574194551:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574574194552:+ theme_classic2()
1574574194554:+ publicationTheme()
1574574194555:+ labs(title = titleLabel,
1574574194556:subtitle = subtitleLabel)
1574574194557:+ theme(legend.background = element_blank()
1574574194559:, legend.box.background = element_rect(colour = axisColor)
1574574194560:, legend.box.spacing = unit(20, "mm")
1574574194562:, panel.background = element_blank()
1574574194565:, panel.grid.major = element_blank()
1574574194567:, panel.grid.minor = element_blank()
1574574194568:, panel.spacing    = unit(8, "mm")
1574574194570:, title = element_text(hjust = 0.5)
1574574194571:, strip.background = element_blank()
1574574194572:, strip.text.x     = element_text(size = baseTextSize,
1574574194574:margin = margin(6,0,2,0, "mm"))
1574574194575:)
1574574194577:)
1574574194581:ggsave(filename = paste0(rank, ".", sam, ".rel_abundance.pdf"), plot = p,
1574574194582:width = 12, height = 10)
1574574194586:(pred.shannon <- as_tibble(calculateShannonIndex(pred.relAbun, depths)))
1574574194588:(obs.shannon  <- as_tibble(calculateShannonIndex(obs.relAbun, depths)))
1574574194590:(shannonTable <- rbind.data.frame(
1574574194592:shannonTable,
1574574194593:pred.shannon %>%
1574574194595:gather(Depth, Shannon) %>%
1574574194597:mutate(Sample = sam,
1574574194598:k = ksize,
1574574194600:Type = "Predicted"),
1574574194601:obs.shannon %>%
1574574194602:gather(Depth, Shannon) %>%
1574574194603:mutate(Sample = sam,
1574574194605:k = ksize,
1574574194606:Type = "Observed"))
1574574194607:)
1574574194612:}
1574574232687:shannonTable <- tibble()
1574574233254:(ksize <- kList[2])
1574574234159:for (sam in samples){
1574574234159:# (sam <- "FA")    # test value
1574574234160:# Subset data
1574574234160:(obsSubset <- obsData %>%
1574574234161:filter(sample == sam))
1574574234161:(predSubset <- predData %>%
1574574234162:filter(sample == sam,
1574574234167:k == ksize))
1574574234168:# Check total number of reads on input data
1574574234169:(obsSubset%>% summarise_at(depths, sum))
1574574234169:(predSubset %>% summarise_at(depths, sum))
1574574234170:# Read counts to long format
1574574234173:(readCounts.long <- left_join(x = getAbundance(obsSubset, as.symbol(rank), depths) %>%
1574574234177:gather(key = "depth", value = "Observed", -1),
1574574234178:y = getAbundance(predSubset, as.symbol(rank), depths) %>%
1574574234184:gather(key = "depth", value = "Predicted", -1)
1574574234186:# , by = c(rank, "depth")
1574574234187:) %>%
1574574234188:mutate(depth = factor(depth)) %>%
1574574234188:replace_na(list("Observed" = 0, "Predicted" = 0))
1574574234189:)
1574574234190:# Calcultae relative abundance
1574574234191:(pred.relAbun <- getRelativeAbundance(predSubset, as.symbol(rank), depths))
1574574234192:(obs.relAbun  <- getRelativeAbundance(obsSubset, as.symbol(rank), depths))
1574574234193:# Remove unlcassified row from predicted data
1574574234193:(pred.relAbun <- pred.relAbun %>% filter(!!as.symbol(rank) != "Unclassified"))
1574574234201:# Relative abundances tables to long format
1574574234202:pred.relAbun.long <- pred.relAbun %>%
1574574234203:gather(key = "depth", value = "Predicted", -1)
1574574234204:obs.relAbun.long <- obs.relAbun %>%
1574574234205:gather(key = "depth", value = "Observed", -1)
1574574234207:(relAbun.long <- right_join(x = obs.relAbun.long,
1574574234208:y = pred.relAbun.long) %>%
1574574234208:mutate(depth = factor(depth, levels = depths)) %>%
1574574234209:replace_na(list("Observed" = 0, "Predicted" = 0))
1574574234210:)
1574574234215:(depthLabels <- paste0(depths, "x"))
1574574234216:(names(depthLabels) <- depths)
1574574234218:palette   <- colorRampPalette(pal_jco()(9))
1574574234219:palette   <- colorRampPalette(pal_d3()(9))
1574574234220:nTaxa     <- length(unique(pull(relAbun.long, !!as.symbol(rank))))
1574574234220:customPal <- palette(nTaxa)
1574574234244:customPal <- pal_d3(palette = "category20")(nTaxa)
1574574234254:show_col(rev(customPal))
1574574234256:titleLabel = paste("Sample", sam)
1574574234257:# subtitleLabel = paste("nifH - Full lenght (>=750 bp)")
1574574234258:# subtitleLabel = paste("nifH -", typeBySample[sam])
1574574234259:# subtitleLabel = paste("nifH - ", typeBySample[sam], " lenght (>=750 bp)")
1574574234260:subtitleLabel = bquote(italic("nifH") ~ .(typeBySample[sam]))
1574574234268:# subtitleLabel = lengthBySample[sam]
1574574234269:# expression(Value~is~sigma~R^{2}==0.6)
1574574234270:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574574234271:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574574234272:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574574234273:#              , position = jitter
1574574234274:, size = 3, stroke = 0.6
1574574234287:# , alpha = 0.8
1574574234296:)
1574574234299:+ geom_smooth(method = lm
1574574234301:, level = 0.95, color = "#333333", size = 0.8
1574574234302:, se=FALSE
1574574234303:)
1574574234304:# + stat_cor(label.x = 3, label.y = 18)
1574574234305:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574574234307:, label.x = 1
1574574234308:, label.y = 23
1574574234318:# , label.y = max(relAbun.long$Predicted) * 0.9
1574574234319:)
1574574234320:# + scale_fill_hue(l=45)
1574574234321:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574574234322:# + stat_regline_equation(label.x = 3, label.y = 16)
1574574234323:# + geom_text_repel(aes(label = genus), size = 3)
1574574234324:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574574234326:+ theme_classic2()
1574574234327:+ publicationTheme()
1574574234328:+ labs(title = titleLabel,
1574574234331:subtitle = subtitleLabel)
1574574234333:+ theme(legend.background = element_blank()
1574574234334:, legend.box.background = element_rect(colour = axisColor)
1574574234336:, legend.box.spacing = unit(20, "mm")
1574574234337:, panel.background = element_blank()
1574574234338:, panel.grid.major = element_blank()
1574574234340:, panel.grid.minor = element_blank()
1574574234341:, panel.spacing    = unit(8, "mm")
1574574234343:, title = element_text(hjust = 0.5)
1574574234344:, strip.background = element_blank()
1574574234346:, strip.text.x     = element_text(size = baseTextSize,
1574574234347:margin = margin(6,0,2,0, "mm"))
1574574234349:)
1574574234350:)
1574574234353:ggsave(filename = paste0(rank, ".", sam, ".rel_abundance.pdf"), plot = p,
1574574234355:width = 12, height = 10)
1574574234358:(pred.shannon <- as_tibble(calculateShannonIndex(pred.relAbun, depths)))
1574574234359:(obs.shannon  <- as_tibble(calculateShannonIndex(obs.relAbun, depths)))
1574574234361:(shannonTable <- rbind.data.frame(
1574574234363:shannonTable,
1574574234364:pred.shannon %>%
1574574234367:gather(Depth, Shannon) %>%
1574574234370:mutate(Sample = sam,
1574574234371:k = ksize,
1574574234373:Type = "Predicted"),
1574574234374:obs.shannon %>%
1574574234375:gather(Depth, Shannon) %>%
1574574234376:mutate(Sample = sam,
1574574234377:k = ksize,
1574574234379:Type = "Observed"))
1574574234380:)
1574574234384:}
1574574363329:for (ksize in kList){
1574574363330:for (sam in samples){
1574574363331:# (sam <- "FA")    # test value
1574574363332:# Subset data
1574574363332:(obsSubset <- obsData %>%
1574574363333:filter(sample == sam))
1574574363333:(predSubset <- predData %>%
1574574363334:filter(sample == sam,
1574574363334:k == ksize))
1574574363335:# Check total number of reads on input data
1574574363335:(obsSubset%>% summarise_at(depths, sum))
1574574363338:(predSubset %>% summarise_at(depths, sum))
1574574363340:# Read counts to long format
1574574363341:(readCounts.long <- left_join(x = getAbundance(obsSubset, as.symbol(rank), depths) %>%
1574574363342:gather(key = "depth", value = "Observed", -1),
1574574363342:y = getAbundance(predSubset, as.symbol(rank), depths) %>%
1574574363342:gather(key = "depth", value = "Predicted", -1)
1574574363343:# , by = c(rank, "depth")
1574574363343:) %>%
1574574363344:mutate(depth = factor(depth)) %>%
1574574363344:replace_na(list("Observed" = 0, "Predicted" = 0))
1574574363345:)
1574574363346:# Calcultae relative abundance
1574574363346:(pred.relAbun <- getRelativeAbundance(predSubset, as.symbol(rank), depths))
1574574363346:(obs.relAbun  <- getRelativeAbundance(obsSubset, as.symbol(rank), depths))
1574574363347:# Remove unlcassified row from predicted data
1574574363348:(pred.relAbun <- pred.relAbun %>% filter(!!as.symbol(rank) != "Unclassified"))
1574574363348:# Relative abundances tables to long format
1574574363349:pred.relAbun.long <- pred.relAbun %>%
1574574363349:gather(key = "depth", value = "Predicted", -1)
1574574363350:obs.relAbun.long <- obs.relAbun %>%
1574574363351:gather(key = "depth", value = "Observed", -1)
1574574363351:(relAbun.long <- right_join(x = obs.relAbun.long,
1574574363352:y = pred.relAbun.long) %>%
1574574363353:mutate(depth = factor(depth, levels = depths)) %>%
1574574363354:replace_na(list("Observed" = 0, "Predicted" = 0))
1574574363356:)
1574574363359:(depthLabels <- paste0(depths, "x"))
1574574363361:(names(depthLabels) <- depths)
1574574363363:palette   <- colorRampPalette(pal_jco()(9))
1574574363363:palette   <- colorRampPalette(pal_d3()(9))
1574574363364:nTaxa     <- length(unique(pull(relAbun.long, !!as.symbol(rank))))
1574574363364:customPal <- palette(nTaxa)
1574574363366:customPal <- pal_d3(palette = "category20")(nTaxa)
1574574363366:show_col(rev(customPal))
1574574363367:titleLabel = paste("Sample", sam)
1574574363368:# subtitleLabel = paste("nifH - Full lenght (>=750 bp)")
1574574363369:# subtitleLabel = paste("nifH -", typeBySample[sam])
1574574363371:# subtitleLabel = paste("nifH - ", typeBySample[sam], " lenght (>=750 bp)")
1574574363374:subtitleLabel = bquote(italic("nifH") ~ .(typeBySample[sam]))
1574574363376:# subtitleLabel = lengthBySample[sam]
1574574363379:# expression(Value~is~sigma~R^{2}==0.6)
1574574363380:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574574363382:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574574363383:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574574363384:#              , position = jitter
1574574363384:, size = 3, stroke = 0.6
1574574363385:# , alpha = 0.8
1574574363386:)
1574574363388:+ geom_smooth(method = lm
1574574363390:, level = 0.95, color = "#333333", size = 0.8
1574574363392:, se=FALSE
1574574363394:)
1574574363395:# + stat_cor(label.x = 3, label.y = 18)
1574574363396:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574574363397:, label.x = 1
1574574363397:, label.y = 23
1574574363398:# , label.y = max(relAbun.long$Predicted) * 0.9
1574574363399:)
1574574363399:# + scale_fill_hue(l=45)
1574574363400:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574574363401:# + stat_regline_equation(label.x = 3, label.y = 16)
1574574363401:# + geom_text_repel(aes(label = genus), size = 3)
1574574363403:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574574363406:+ theme_classic2()
1574574363409:+ publicationTheme()
1574574363410:+ labs(title = titleLabel,
1574574363411:subtitle = subtitleLabel)
1574574363412:+ theme(legend.background = element_blank()
1574574363413:, legend.box.background = element_rect(colour = axisColor)
1574574363413:, legend.box.spacing = unit(20, "mm")
1574574363414:, panel.background = element_blank()
1574574363415:, panel.grid.major = element_blank()
1574574363416:, panel.grid.minor = element_blank()
1574574363416:, panel.spacing    = unit(8, "mm")
1574574363417:, title = element_text(hjust = 0.5)
1574574363418:, strip.background = element_blank()
1574574363419:, strip.text.x     = element_text(size = baseTextSize,
1574574363420:margin = margin(6,0,2,0, "mm"))
1574574363422:)
1574574363423:)
1574574363425:ggsave(filename = paste0(rank, ".", sam, ".rel_abundance.pdf"), plot = p,
1574574363427:width = 12, height = 10)
1574574363430:(pred.shannon <- as_tibble(calculateShannonIndex(pred.relAbun, depths)))
1574574363432:(obs.shannon  <- as_tibble(calculateShannonIndex(obs.relAbun, depths)))
1574574363435:(shannonTable <- rbind.data.frame(
1574574363439:shannonTable,
1574574363441:pred.shannon %>%
1574574363443:gather(Depth, Shannon) %>%
1574574363445:mutate(Sample = sam,
1574574363446:k = ksize,
1574574363448:Type = "Predicted"),
1574574363449:obs.shannon %>%
1574574363450:gather(Depth, Shannon) %>%
1574574363452:mutate(Sample = sam,
1574574363453:k = ksize,
1574574363455:Type = "Observed"))
1574574363457:)
1574574363461:}
1574574363462:}
1574574502177:# Process samples ---------------------------------------------------------
1574574502178:rank <- "genus"
1574574502179:shannonTable <- tibble()
1574574502181:(ksize <- kList[2])
1574574673595:# subtitleLabel = paste("nifH - Full lenght (>=750 bp)")
1574574673596:# subtitleLabel = paste("nifH -", typeBySample[sam])
1574574673596:# subtitleLabel = paste("nifH - ", typeBySample[sam], " lenght (>=750 bp)")
1574574673597:subtitleLabel = bquote(italic("nifH") ~ .(typeBySample[sam]) ~ "-" ~ italic("k")=.(ksize))
1574574676217:# subtitleLabel = lengthBySample[sam]
1574574676218:# expression(Value~is~sigma~R^{2}==0.6)
1574574676218:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574574676219:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574574676220:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574574676221:#              , position = jitter
1574574676222:, size = 3, stroke = 0.6
1574574676223:# , alpha = 0.8
1574574676224:)
1574574676225:+ geom_smooth(method = lm
1574574676226:, level = 0.95, color = "#333333", size = 0.8
1574574676228:, se=FALSE
1574574676229:)
1574574676231:# + stat_cor(label.x = 3, label.y = 18)
1574574676232:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574574676234:, label.x = 1
1574574676235:, label.y = 23
1574574676236:# , label.y = max(relAbun.long$Predicted) * 0.9
1574574676237:)
1574574676238:# + scale_fill_hue(l=45)
1574574676239:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574574676240:# + stat_regline_equation(label.x = 3, label.y = 16)
1574574676241:# + geom_text_repel(aes(label = genus), size = 3)
1574574676242:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574574676243:+ theme_classic2()
1574574676243:+ publicationTheme()
1574574676244:+ labs(title = titleLabel,
1574574676245:subtitle = subtitleLabel)
1574574676246:+ theme(legend.background = element_blank()
1574574676246:, legend.box.background = element_rect(colour = axisColor)
1574574676247:, legend.box.spacing = unit(20, "mm")
1574574676248:, panel.background = element_blank()
1574574676249:, panel.grid.major = element_blank()
1574574676250:, panel.grid.minor = element_blank()
1574574676250:, panel.spacing    = unit(8, "mm")
1574574676251:, title = element_text(hjust = 0.5)
1574574676252:, strip.background = element_blank()
1574574676253:, strip.text.x     = element_text(size = baseTextSize,
1574574676254:margin = margin(6,0,2,0, "mm"))
1574574676255:)
1574574676256:)
1574574691543:# subtitleLabel = paste("nifH - Full lenght (>=750 bp)")
1574574691544:# subtitleLabel = paste("nifH -", typeBySample[sam])
1574574691544:# subtitleLabel = paste("nifH - ", typeBySample[sam], " lenght (>=750 bp)")
1574574691545:subtitleLabel = bquote(italic("nifH") ~ .(typeBySample[sam]) ~ "-" ~ italic("k")=.(ksize))
1574574709344:# subtitleLabel = paste("nifH - Full lenght (>=750 bp)")
1574574709345:# subtitleLabel = paste("nifH -", typeBySample[sam])
1574574709345:# subtitleLabel = paste("nifH - ", typeBySample[sam], " lenght (>=750 bp)")
1574574709345:subtitleLabel = bquote(italic("nifH") ~ .(typeBySample[sam]) ~ "-" ~ italic("k")"=".(ksize))
1574574746267:# subtitleLabel = paste("nifH - Full lenght (>=750 bp)")
1574574746268:# subtitleLabel = paste("nifH -", typeBySample[sam])
1574574746268:# subtitleLabel = paste("nifH - ", typeBySample[sam], " lenght (>=750 bp)")
1574574746269:subtitleLabel = bquote(italic("nifH") ~ .(typeBySample[sam]) ~ "-" ~ italic("k")~"="~.(ksize))
1574574749328:# subtitleLabel = lengthBySample[sam]
1574574749328:# expression(Value~is~sigma~R^{2}==0.6)
1574574749329:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574574749329:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574574749330:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574574749331:#              , position = jitter
1574574749332:, size = 3, stroke = 0.6
1574574749333:# , alpha = 0.8
1574574749333:)
1574574749334:+ geom_smooth(method = lm
1574574749335:, level = 0.95, color = "#333333", size = 0.8
1574574749336:, se=FALSE
1574574749337:)
1574574749338:# + stat_cor(label.x = 3, label.y = 18)
1574574749338:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574574749339:, label.x = 1
1574574749340:, label.y = 23
1574574749340:# , label.y = max(relAbun.long$Predicted) * 0.9
1574574749341:)
1574574749342:# + scale_fill_hue(l=45)
1574574749343:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574574749343:# + stat_regline_equation(label.x = 3, label.y = 16)
1574574749344:# + geom_text_repel(aes(label = genus), size = 3)
1574574749345:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574574749350:+ theme_classic2()
1574574749350:+ publicationTheme()
1574574749351:+ labs(title = titleLabel,
1574574749352:subtitle = subtitleLabel)
1574574749353:+ theme(legend.background = element_blank()
1574574749354:, legend.box.background = element_rect(colour = axisColor)
1574574749355:, legend.box.spacing = unit(20, "mm")
1574574749356:, panel.background = element_blank()
1574574749358:, panel.grid.major = element_blank()
1574574749360:, panel.grid.minor = element_blank()
1574574749363:, panel.spacing    = unit(8, "mm")
1574574749364:, title = element_text(hjust = 0.5)
1574574749364:, strip.background = element_blank()
1574574749365:, strip.text.x     = element_text(size = baseTextSize,
1574574749369:margin = margin(6,0,2,0, "mm"))
1574574749370:)
1574574749371:)
1574574782786:kList[2]
1574574784702:kList
1574574788901:# Process samples ---------------------------------------------------------
1574574788902:rank <- "genus"
1574574789681:shannonTable <- tibble()
1574574804217:for (ksize in kList){
1574574804218:for (sam in samples){
1574574804219:# (sam <- "FA")    # test value
1574574804220:# Subset data
1574574804220:(obsSubset <- obsData %>%
1574574804221:filter(sample == sam))
1574574804222:(predSubset <- predData %>%
1574574804222:filter(sample == sam,
1574574804223:k == ksize))
1574574804224:# Check total number of reads on input data
1574574804225:(obsSubset%>% summarise_at(depths, sum))
1574574804226:(predSubset %>% summarise_at(depths, sum))
1574574804228:# Read counts to long format
1574574804230:(readCounts.long <- left_join(x = getAbundance(obsSubset, as.symbol(rank), depths) %>%
1574574804232:gather(key = "depth", value = "Observed", -1),
1574574804233:y = getAbundance(predSubset, as.symbol(rank), depths) %>%
1574574804234:gather(key = "depth", value = "Predicted", -1)
1574574804235:# , by = c(rank, "depth")
1574574804236:) %>%
1574574804236:mutate(depth = factor(depth)) %>%
1574574804237:replace_na(list("Observed" = 0, "Predicted" = 0))
1574574804238:)
1574574804239:# Calcultae relative abundance
1574574804240:(pred.relAbun <- getRelativeAbundance(predSubset, as.symbol(rank), depths))
1574574804241:(obs.relAbun  <- getRelativeAbundance(obsSubset, as.symbol(rank), depths))
1574574804242:# Remove unlcassified row from predicted data
1574574804243:(pred.relAbun <- pred.relAbun %>% filter(!!as.symbol(rank) != "Unclassified"))
1574574804250:# Relative abundances tables to long format
1574574804252:pred.relAbun.long <- pred.relAbun %>%
1574574804256:gather(key = "depth", value = "Predicted", -1)
1574574804261:obs.relAbun.long <- obs.relAbun %>%
1574574804263:gather(key = "depth", value = "Observed", -1)
1574574804265:(relAbun.long <- right_join(x = obs.relAbun.long,
1574574804268:y = pred.relAbun.long) %>%
1574574804270:mutate(depth = factor(depth, levels = depths)) %>%
1574574804271:replace_na(list("Observed" = 0, "Predicted" = 0))
1574574804272:)
1574574804274:(depthLabels <- paste0(depths, "x"))
1574574804275:(names(depthLabels) <- depths)
1574574804278:palette   <- colorRampPalette(pal_jco()(9))
1574574804279:palette   <- colorRampPalette(pal_d3()(9))
1574574804280:nTaxa     <- length(unique(pull(relAbun.long, !!as.symbol(rank))))
1574574804282:customPal <- palette(nTaxa)
1574574804284:customPal <- pal_d3(palette = "category20")(nTaxa)
1574574804286:show_col(rev(customPal))
1574574804289:titleLabel = paste("Sample", sam)
1574574804290:# subtitleLabel = paste("nifH - Full lenght (>=750 bp)")
1574574804291:# subtitleLabel = paste("nifH -", typeBySample[sam])
1574574804292:# subtitleLabel = paste("nifH - ", typeBySample[sam], " lenght (>=750 bp)")
1574574804293:subtitleLabel = bquote(italic("nifH") ~ .(typeBySample[sam]) ~ "-" ~ italic("k")~"="~.(ksize))
1574574804294:# subtitleLabel = lengthBySample[sam]
1574574804295:# expression(Value~is~sigma~R^{2}==0.6)
1574574804299:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574574804300:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574574804301:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574574804302:#              , position = jitter
1574574804303:, size = 3, stroke = 0.6
1574574804304:# , alpha = 0.8
1574574804305:)
1574574804306:+ geom_smooth(method = lm
1574574804307:, level = 0.95, color = "#333333", size = 0.8
1574574804308:, se=FALSE
1574574804309:)
1574574804312:# + stat_cor(label.x = 3, label.y = 18)
1574574804313:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574574804316:, label.x = 1
1574574804319:, label.y = 23
1574574804321:# , label.y = max(relAbun.long$Predicted) * 0.9
1574574804322:)
1574574804323:# + scale_fill_hue(l=45)
1574574804324:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574574804326:# + stat_regline_equation(label.x = 3, label.y = 16)
1574574804327:# + geom_text_repel(aes(label = genus), size = 3)
1574574804330:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574574804331:+ theme_classic2()
1574574804333:+ publicationTheme()
1574574804334:+ labs(title = titleLabel,
1574574804335:subtitle = subtitleLabel)
1574574804336:+ theme(legend.background = element_blank()
1574574804338:, legend.box.background = element_rect(colour = axisColor)
1574574804339:, legend.box.spacing = unit(20, "mm")
1574574804340:, panel.background = element_blank()
1574574804341:, panel.grid.major = element_blank()
1574574804343:, panel.grid.minor = element_blank()
1574574804345:, panel.spacing    = unit(8, "mm")
1574574804346:, title = element_text(hjust = 0.5)
1574574804348:, strip.background = element_blank()
1574574804349:, strip.text.x     = element_text(size = baseTextSize,
1574574804351:margin = margin(6,0,2,0, "mm"))
1574574804352:)
1574574804353:)
1574574804357:ggsave(filename = paste0(rank, ".", sam, ".", ksize, ".rel_abundance.pdf"), plot = p,
1574574804359:width = 12, height = 10)
1574574804365:(pred.shannon <- as_tibble(calculateShannonIndex(pred.relAbun, depths)))
1574574804366:(obs.shannon  <- as_tibble(calculateShannonIndex(obs.relAbun, depths)))
1574574804369:(shannonTable <- rbind.data.frame(
1574574804370:shannonTable,
1574574804372:pred.shannon %>%
1574574804373:gather(Depth, Shannon) %>%
1574574804374:mutate(Sample = sam,
1574574804376:k = ksize,
1574574804377:Type = "Predicted"),
1574574804379:obs.shannon %>%
1574574804381:gather(Depth, Shannon) %>%
1574574804382:mutate(Sample = sam,
1574574804383:k = ksize,
1574574804385:Type = "Observed"))
1574574804386:)
1574574804390:}
1574574804392:}
1574575035778:shannonTable
1574575044483:View(shannonTable)
1574575045706:View(shannonTable)
1574575198861:save(shannonTable, file = "shannon_table.RData")
1574575453414:shannonTable <- tibble()
1574575467112:for (rank in c("species", "genus", "family", "order", "class")){
1574575467113:for (ksize in kList){
1574575467114:for (sam in samples){
1574575467114:# (sam <- "FA")    # test value
1574575467115:# Subset data
1574575467115:(obsSubset <- obsData %>%
1574575467116:filter(sample == sam))
1574575467116:(predSubset <- predData %>%
1574575467117:filter(sample == sam,
1574575467118:k == ksize))
1574575467119:# Check total number of reads on input data
1574575467119:(obsSubset%>% summarise_at(depths, sum))
1574575467120:(predSubset %>% summarise_at(depths, sum))
1574575467121:# Read counts to long format
1574575467125:(readCounts.long <- left_join(x = getAbundance(obsSubset, as.symbol(rank), depths) %>%
1574575467126:gather(key = "depth", value = "Observed", -1),
1574575467129:y = getAbundance(predSubset, as.symbol(rank), depths) %>%
1574575467130:gather(key = "depth", value = "Predicted", -1)
1574575467134:# , by = c(rank, "depth")
1574575467135:) %>%
1574575467136:mutate(depth = factor(depth)) %>%
1574575467147:replace_na(list("Observed" = 0, "Predicted" = 0))
1574575467148:)
1574575467150:# Calcultae relative abundance
1574575467152:(pred.relAbun <- getRelativeAbundance(predSubset, as.symbol(rank), depths))
1574575467155:(obs.relAbun  <- getRelativeAbundance(obsSubset, as.symbol(rank), depths))
1574575467157:# Remove unlcassified row from predicted data
1574575467157:(pred.relAbun <- pred.relAbun %>% filter(!!as.symbol(rank) != "Unclassified"))
1574575467159:# Relative abundances tables to long format
1574575467163:pred.relAbun.long <- pred.relAbun %>%
1574575467164:gather(key = "depth", value = "Predicted", -1)
1574575467165:obs.relAbun.long <- obs.relAbun %>%
1574575467166:gather(key = "depth", value = "Observed", -1)
1574575467168:(relAbun.long <- right_join(x = obs.relAbun.long,
1574575467169:y = pred.relAbun.long) %>%
1574575467169:mutate(depth = factor(depth, levels = depths)) %>%
1574575467173:replace_na(list("Observed" = 0, "Predicted" = 0))
1574575467174:)
1574575467176:(depthLabels <- paste0(depths, "x"))
1574575467177:(names(depthLabels) <- depths)
1574575467179:palette   <- colorRampPalette(pal_jco()(9))
1574575467180:palette   <- colorRampPalette(pal_d3()(9))
1574575467181:nTaxa     <- length(unique(pull(relAbun.long, !!as.symbol(rank))))
1574575467182:customPal <- palette(nTaxa)
1574575467183:customPal <- pal_d3(palette = "category20")(nTaxa)
1574575467183:show_col(rev(customPal))
1574575467188:titleLabel = paste("Sample", sam)
1574575467190:# subtitleLabel = paste("nifH - Full lenght (>=750 bp)")
1574575467191:# subtitleLabel = paste("nifH -", typeBySample[sam])
1574575467192:# subtitleLabel = paste("nifH - ", typeBySample[sam], " lenght (>=750 bp)")
1574575467193:subtitleLabel = bquote(italic("nifH") ~ .(typeBySample[sam]) ~ "-" ~ italic("k")~"="~.(ksize))
1574575467194:# subtitleLabel = lengthBySample[sam]
1574575467195:# expression(Value~is~sigma~R^{2}==0.6)
1574575467196:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574575467197:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574575467198:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574575467199:#              , position = jitter
1574575467200:, size = 3, stroke = 0.6
1574575467202:# , alpha = 0.8
1574575467203:)
1574575467205:+ geom_smooth(method = lm
1574575467206:, level = 0.95, color = "#333333", size = 0.8
1574575467208:, se=FALSE
1574575467209:)
1574575467210:# + stat_cor(label.x = 3, label.y = 18)
1574575467211:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574575467212:, label.x = 1
1574575467213:, label.y = 23
1574575467214:# , label.y = max(relAbun.long$Predicted) * 0.9
1574575467216:)
1574575467217:# + scale_fill_hue(l=45)
1574575467219:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574575467222:# + stat_regline_equation(label.x = 3, label.y = 16)
1574575467228:# + geom_text_repel(aes(label = genus), size = 3)
1574575467229:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574575467231:+ theme_classic2()
1574575467232:+ publicationTheme()
1574575467233:+ labs(title = titleLabel,
1574575467234:subtitle = subtitleLabel)
1574575467236:+ theme(legend.background = element_blank()
1574575467244:, legend.box.background = element_rect(colour = axisColor)
1574575467245:, legend.box.spacing = unit(20, "mm")
1574575467246:, panel.background = element_blank()
1574575467248:, panel.grid.major = element_blank()
1574575467249:, panel.grid.minor = element_blank()
1574575467252:, panel.spacing    = unit(8, "mm")
1574575467255:, title = element_text(hjust = 0.5)
1574575467256:, strip.background = element_blank()
1574575467258:, strip.text.x     = element_text(size = baseTextSize,
1574575467267:margin = margin(6,0,2,0, "mm"))
1574575467273:)
1574575467275:)
1574575467278:ggsave(filename = paste0(rank, ".", sam, ".", ksize, ".rel_abundance.pdf"), plot = p,
1574575467280:width = 12, height = 10)
1574575467295:(pred.shannon <- as_tibble(calculateShannonIndex(pred.relAbun, depths)))
1574575467302:(obs.shannon  <- as_tibble(calculateShannonIndex(obs.relAbun, depths)))
1574575467318:(shannonTable <- rbind.data.frame(
1574575467320:shannonTable,
1574575467322:pred.shannon %>%
1574575467324:gather(Depth, Shannon) %>%
1574575467325:mutate(Rank = rank,
1574575467327:Sample = sam,
1574575467329:k = ksize,
1574575467346:Type = "Predicted"),
1574575467347:obs.shannon %>%
1574575467349:gather(Depth, Shannon) %>%
1574575467351:mutate(Rank = rank,
1574575467353:Sample = sam,
1574575467389:k = ksize,
1574575467415:Type = "Observed"))
1574575467431:)
1574575467440:}
1574575467461:}
1574575467463:}
1574576113276:save(shannonTable, file = "shannon_table.RData")
1574608900342:l <- c(9,8,7,8,7,0,0,78,8,70,0,0)
1574608907904:l == 0
1574608925887:l[l == 0]
1574608930695:l[l != 0]
1574608983195:# Calculate Shannon index at the level of a grouped table -------------------
1574608983195:calculateShannonIndex <- function(countsTable, depths) {
1574608983195:# totalReads <- unlist(readCountsTable %>% summarise_at(sampleCols, sum))
1574608983196:totalReads <- lapply(countsTable[-1], sum)
1574608983196:lapply(countsTable[-1], function(sample){
1574608983197:nonZero <- sample[sample != 0]
1574608983197:sum(nonZero * log(nonZero))
1574608983198:})
1574608983198:}
1574608993964:#!/usr/bin/env Rscript
1574608993965:# ##############################################################################
1574608993965:#  Author:   Hector Fabio Espitia-Navarro
1574608993966:#            Georgia Institute of Technology
1574608993967:#  Version:  1.0
1574608993967:#  Date:     11/04/2019
1574608993968:# ##############################################################################
1574608993970:# Install required packages -----------------------------------------------
1574608993971:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1574608993972:if(!file.exists(personal.lib.path))
1574608993973:dir.create(personal.lib.path)
1574608993974:printMessage <- function(message, verbose){
1574608993975:if(verbose)
1574608993975:cat(message)
1574608993976:}
1574608993977:# crayon::bold("Hola")
1574608993977:installAndLoadPackages <- function(pkg, verbose){
1574608993979:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1574608993979:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1574608993979:printMessage("Done!\n", verbose)
1574608993980:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1574608993980:if (length(new.pkg)) {
1574608993980:printMessage("Installing new packages... ", verbose)
1574608993981:install.packages(new.pkg, dependencies = TRUE,
1574608993981:repos="http://cran.rstudio.com/",
1574608993981:lib = personal.lib.path)
1574608993982:printMessage("Done!\n", verbose)
1574608993982:}
1574608993983:printMessage("Loading required packages... ", verbose)
1574608993983:sapply(pkg, function(x){
1574608993983:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1574608993984:})
1574608993984:printMessage("Done!\n", verbose)
1574608993985:}
1574608993988:packages <- c("ggpubr", "RColorBrewer", "gridExtra", "ggsci", "scales", "stringr",
1574608993989:"extrafont", "grid", "tidyverse", "xlsx", "magrittr")
1574608993990:# packages <- c("tidyverse", "magrittr")
1574608993990:installAndLoadPackages(c("argparser", "stringr"), verbose = FALSE)
1574609010158:# Command line arguments processing ---------------------------------------
1574609010158:# Get script name
1574609010159:initial.options <- commandArgs(trailingOnly = FALSE)
1574609010159:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1574609010160:# Process command line arguments
1574609010161:# Create a parser
1574609010161:p <- arg_parser("This script is intended to assess STing classifier results.",
1574609010161:name = script.name)
1574609010233:# Add Positional arguments (required)
1574609010234:p <- add_argument(p, "pred_file", help = "STing predictions file. BIOM table: accn, read counts, taxonomy")
1574609010235:p <- add_argument(p, "ref_file", help = "Reference file. Tab separated file BIOM like: accn, read counts")
1574609010236:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1574609010237:default = "summary_results")
1574609010239:# Initialization of variables ---------------------------------------------
1574609010240:# "results/predicted.no_dup.summary.tsv"
1574609010240:dataDir    <- str_glue("results")
1574609010324:predFile   <- str_glue("{dataDir}/predicted.no_dup.summary.tsv")
1574609010325:refFile    <- str_glue("data/samples/full_taxonomy/communities/observed.read_counts.tsv")
1574609010326:prefix     <- str_glue("{dataDir}/summary_results")
1574609010327:# Parse command line arguments --------------------------------------------
1574609010327:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1574609010328:argv <- list()
1574609010328:if(command.line) {
1574609010328:argv <- parse_args(p)
1574609010329:} else {
1574609010329:argv <- parse_args(p, list(predFile,
1574609010329:refFile,
1574609010330:"--prefix", prefix))
1574609010330:}
1574609010345:# Get argument values from the command line
1574609010345:predFile   <- argv$pred_file
1574609010346:refFile    <- argv$ref_file
1574609010347:prefix     <- argv$prefix
1574609010348:# Function to check if file exists ----------------------------------------
1574609010348:CheckFileExists <- function(fileList) {
1574609010349:non.exist.files <- !file.exists(fileList)
1574609010349:if(any(non.exist.files)) {
1574609010350:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1574609010350:}
1574609010351:}
1574609010352:# Check for input files ---------------------------------------------------
1574609010353:filesToCheck <- c(predFile, refFile)
1574609010355:errorMessage  <- CheckFileExists(filesToCheck)
1574609010356:#
1574609010357:# if(!is.null(errorMessage)){
1574609010358:#   stop(errorMessage)
1574609010358:# } else {
1574609010358:# Code core - Begin -------------------------------------------------------
1574609010359:installAndLoadPackages(packages, verbose = TRUE)
1574609029042:options(stringsAsFactors = F)
1574609029043:source(file = "scripts/ggplot_theme.R")
1574609029136:# FUNCTIONS ------------------------------------------------------------------
1574609029136:# Calculates relative abundance level of a grouped table -------------------
1574609029136:calculateRelativeAbundance <- function(readCountsTable, depths) {
1574609029137:# totalReads <- unlist(readCountsTable %>% summarise_at(sampleCols, sum))
1574609029137:outTable <- readCountsTable
1574609029138:totalReads <- lapply(readCountsTable[-1], sum)
1574609029139:for(sample in depths) {
1574609029139:outTable[[sample]] <- outTable[[sample]] / totalReads[[sample]] * 100
1574609029140:}
1574609029140:return(outTable)
1574609029140:}
1574609029141:# Clacultes relative abundance at a given rank level -----------------------
1574609029142:getRelativeAbundance <- function(countsTable, group_rank, depths) {
1574609029142:# print(group_rank)
1574609029143:# group_rank <- enquo(group_rank)
1574609029143:groupedData <- countsTable %>% group_by(!! group_rank) %>%
1574609029143:summarise_at(depths, sum)
1574609029144:calculateRelativeAbundance(groupedData, depths)
1574609029144:}
1574609029145:# Clacultes relative abundance at a given rank level -----------------------
1574609029145:getAbundance <- function(countsTable, group_rank, depths) {
1574609029145:# print(group_rank)
1574609029146:# group_rank <- enquo(group_rank)
1574609029147:countsTable %>% group_by(!! group_rank) %>%
1574609029147:summarise_at(depths, sum)
1574609029148:}
1574609029151:# Calculate Shannon index at the level of a grouped table -------------------
1574609029151:calculateShannonIndex <- function(countsTable, depths) {
1574609029152:# totalReads <- unlist(readCountsTable %>% summarise_at(sampleCols, sum))
1574609029152:totalReads <- lapply(countsTable[-1], sum)
1574609029153:lapply(countsTable[-1], function(sample){
1574609029153:nonZero <- sample[sample != 0]
1574609029154:sum(nonZero * log(nonZero))
1574609029154:})
1574609029156:}
1574609060987:# LOAD DATA ---------------------------------------------------------------
1574609060988:(obsData  <- read_tsv(refFile))
1574609062351:(predData <- read_tsv(predFile))
1574609062901:(samples <- unique(obsData$sample))
1574609062903:(depths  <- names(obsData)[2:8])
1574609062904:(kList   <- unique(predData$k))
1574609062905:(samplesByType <- data.frame("Full" = c("FA", "FB"),
1574609062906:"Partial" = c("PA", "PB")))
1574609062914:(typeBySample <- c("FA" = "full", "FB" = "full", "PA" = "partial", "PB" = "partial"))
1574609062915:# (lengthBySample <- c("FA" = bquote(italic("nifH") ~ "full length (">=750 ~ "bp)"),
1574609062915:#                      "FB" = bquote(italic("nifH") ~ "full length (">=750 ~ "bp)"),
1574609062916:#                      "PA" = bquote(italic("nifH") ~ "full length ("<750 ~ "bp)"),
1574609062916:#                      "PB" = bquote(italic("nifH") ~ "full length ("<750 ~ "bp)")))
1574609062917:# Process samples ---------------------------------------------------------
1574609062918:rank <- "genus"
1574609062919:shannonTable <- tibble()
1574609079672:(ksize <- 30)    # test value
1574609080751:(sam <- "FA")    # test value
1574609106882:# Subset data
1574609106882:(obsSubset <- obsData %>%
1574609106883:filter(sample == sam))
1574609107197:(predSubset <- predData %>%
1574609107197:filter(sample == sam,
1574609107198:k == ksize))
1574609107342:# Check total number of reads on input data
1574609107343:(obsSubset%>% summarise_at(depths, sum))
1574609107534:(predSubset %>% summarise_at(depths, sum))
1574609107837:# Read counts to long format
1574609107838:(readCounts.long <- left_join(x = getAbundance(obsSubset, as.symbol(rank), depths) %>%
1574609107838:gather(key = "depth", value = "Observed", -1),
1574609107838:y = getAbundance(predSubset, as.symbol(rank), depths) %>%
1574609107839:gather(key = "depth", value = "Predicted", -1)
1574609107839:# , by = c(rank, "depth")
1574609107840:) %>%
1574609107840:mutate(depth = factor(depth)) %>%
1574609107840:replace_na(list("Observed" = 0, "Predicted" = 0))
1574609107841:)
1574609108151:# Calcultae relative abundance
1574609108151:(pred.relAbun <- getRelativeAbundance(predSubset, as.symbol(rank), depths))
1574609108246:(obs.relAbun  <- getRelativeAbundance(obsSubset, as.symbol(rank), depths))
1574609108414:# Remove unlcassified row from predicted data
1574609108414:(pred.relAbun <- pred.relAbun %>% filter(!!as.symbol(rank) != "Unclassified"))
1574609108543:# Relative abundances tables to long format
1574609108543:pred.relAbun.long <- pred.relAbun %>%
1574609108544:gather(key = "depth", value = "Predicted", -1)
1574609108552:obs.relAbun.long <- obs.relAbun %>%
1574609108552:gather(key = "depth", value = "Observed", -1)
1574609108559:(relAbun.long <- right_join(x = obs.relAbun.long,
1574609108559:y = pred.relAbun.long) %>%
1574609108560:mutate(depth = factor(depth, levels = depths)) %>%
1574609108561:replace_na(list("Observed" = 0, "Predicted" = 0))
1574609108564:)
1574609115076:(depthLabels <- paste0(depths, "x"))
1574609115077:(names(depthLabels) <- depths)
1574609115078:palette   <- colorRampPalette(pal_jco()(9))
1574609115219:palette   <- colorRampPalette(pal_d3()(9))
1574609115221:nTaxa     <- length(unique(pull(relAbun.long, !!as.symbol(rank))))
1574609115223:customPal <- palette(nTaxa)
1574609115224:customPal <- pal_d3(palette = "category20")(nTaxa)
1574609115224:show_col(rev(customPal))
1574609115338:titleLabel = paste("Sample", sam)
1574609115339:# subtitleLabel = paste("nifH - Full lenght (>=750 bp)")
1574609115340:# subtitleLabel = paste("nifH -", typeBySample[sam])
1574609115340:# subtitleLabel = paste("nifH - ", typeBySample[sam], " lenght (>=750 bp)")
1574609115341:subtitleLabel = bquote(italic("nifH") ~ .(typeBySample[sam]) ~ "-" ~ italic("k")~"="~.(ksize))
1574609115342:# subtitleLabel = lengthBySample[sam]
1574609115342:# expression(Value~is~sigma~R^{2}==0.6)
1574609121108:# subtitleLabel = lengthBySample[sam]
1574609121108:# expression(Value~is~sigma~R^{2}==0.6)
1574609121109:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574609121110:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574609121111:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574609121112:#              , position = jitter
1574609121112:, size = 3, stroke = 0.6
1574609121113:# , alpha = 0.8
1574609121113:)
1574609121114:+ geom_smooth(method = lm
1574609121117:, level = 0.95, color = "#333333", size = 0.8
1574609121118:, se=FALSE
1574609121118:)
1574609121119:# + stat_cor(label.x = 3, label.y = 18)
1574609121119:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574609121121:, label.x = 1
1574609121123:, label.y = 23
1574609121124:# , label.y = max(relAbun.long$Predicted) * 0.9
1574609121124:)
1574609121125:# + scale_fill_hue(l=45)
1574609121125:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574609121126:# + stat_regline_equation(label.x = 3, label.y = 16)
1574609121126:# + geom_text_repel(aes(label = genus), size = 3)
1574609121127:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574609121134:+ theme_classic2()
1574609121135:+ publicationTheme()
1574609121136:+ labs(title = titleLabel,
1574609121136:subtitle = subtitleLabel)
1574609121137:+ theme(legend.background = element_blank()
1574609121137:, legend.box.background = element_rect(colour = axisColor)
1574609121138:, legend.box.spacing = unit(20, "mm")
1574609121143:, panel.background = element_blank()
1574609121147:, panel.grid.major = element_blank()
1574609121148:, panel.grid.minor = element_blank()
1574609121149:, panel.spacing    = unit(8, "mm")
1574609121149:, title = element_text(hjust = 0.5)
1574609121150:, strip.background = element_blank()
1574609121151:, strip.text.x     = element_text(size = baseTextSize,
1574609121152:margin = margin(6,0,2,0, "mm"))
1574609121152:)
1574609121155:)
1574609163958:# subtitleLabel = lengthBySample[sam]
1574609163959:# expression(Value~is~sigma~R^{2}==0.6)
1574609163959:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574609163960:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574609163960:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574609163961:#              , position = jitter
1574609163961:, size = 3, stroke = 0.6
1574609163962:# , alpha = 0.8
1574609163962:)
1574609163963:+ geom_smooth(method = lm
1574609163963:, level = 0.95, color = "#333333", size = 0.8
1574609163964:, se=FALSE
1574609163964:)
1574609163965:# + stat_cor(label.x = 3, label.y = 18)
1574609163966:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574609163966:, label.x = 1
1574609163967:, label.y = 21
1574609163968:# , label.y = max(relAbun.long$Predicted) * 0.9
1574609163968:)
1574609163969:# + scale_fill_hue(l=45)
1574609163970:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574609163971:# + stat_regline_equation(label.x = 3, label.y = 16)
1574609163971:# + geom_text_repel(aes(label = genus), size = 3)
1574609163972:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574609163972:+ theme_classic2()
1574609163973:+ publicationTheme()
1574609163973:+ labs(title = titleLabel,
1574609163974:subtitle = subtitleLabel)
1574609163974:+ theme(legend.background = element_blank()
1574609163975:, legend.box.background = element_rect(colour = axisColor)
1574609163976:, legend.box.spacing = unit(20, "mm")
1574609163976:, panel.background = element_blank()
1574609163977:, panel.grid.major = element_blank()
1574609163977:, panel.grid.minor = element_blank()
1574609163978:, panel.spacing    = unit(8, "mm")
1574609163978:, title = element_text(hjust = 0.5)
1574609163979:, strip.background = element_blank()
1574609163980:, strip.text.x     = element_text(size = baseTextSize,
1574609163980:margin = margin(6,0,2,0, "mm"))
1574609163981:)
1574609163982:)
1574609195424:max(relAbun.long$Predicted)
1574609223991:# subtitleLabel = lengthBySample[sam]
1574609223992:# expression(Value~is~sigma~R^{2}==0.6)
1574609223992:(p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574609223993:+ geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574609223994:# + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574609223994:#              , position = jitter
1574609223995:, size = 3, stroke = 0.6
1574609223996:# , alpha = 0.8
1574609223996:)
1574609223998:+ geom_smooth(method = lm
1574609223999:, level = 0.95, color = "#333333", size = 0.8
1574609224000:, se=FALSE
1574609224001:)
1574609224007:# + stat_cor(label.x = 3, label.y = 18)
1574609224008:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574609224012:, label.x = 1
1574609224013:# , label.y = 21
1574609224013:, label.y = max(relAbun.long$Predicted) -1
1574609224014:)
1574609224015:# + scale_fill_hue(l=45)
1574609224015:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574609224024:# + stat_regline_equation(label.x = 3, label.y = 16)
1574609224025:# + geom_text_repel(aes(label = genus), size = 3)
1574609224044:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574609224045:+ theme_classic2()
1574609224045:+ publicationTheme()
1574609224046:+ labs(title = titleLabel,
1574609224047:subtitle = subtitleLabel)
1574609224047:+ theme(legend.background = element_blank()
1574609224048:, legend.box.background = element_rect(colour = axisColor)
1574609224049:, legend.box.spacing = unit(20, "mm")
1574609224049:, panel.background = element_blank()
1574609224059:, panel.grid.major = element_blank()
1574609224061:, panel.grid.minor = element_blank()
1574609224066:, panel.spacing    = unit(8, "mm")
1574609224067:, title = element_text(hjust = 0.5)
1574609224073:, strip.background = element_blank()
1574609224077:, strip.text.x     = element_text(size = baseTextSize,
1574609224078:margin = margin(6,0,2,0, "mm"))
1574609224079:)
1574609224085:)
1574609267167:(pred.shannon <- as_tibble(calculateShannonIndex(pred.relAbun, depths)))
1574609269403:(obs.shannon  <- as_tibble(calculateShannonIndex(obs.relAbun, depths)))
1574609274024:(shannonTable <- rbind.data.frame(
1574609274025:shannonTable,
1574609274025:pred.shannon %>%
1574609274025:gather(Depth, Shannon) %>%
1574609274026:mutate(Rank = rank,
1574609274026:Sample = sam,
1574609274026:k = ksize,
1574609274027:Type = "Predicted"),
1574609274027:obs.shannon %>%
1574609274028:gather(Depth, Shannon) %>%
1574609274028:mutate(Rank = rank,
1574609274028:Sample = sam,
1574609274029:k = ksize,
1574609274030:Type = "Observed"))
1574609274031:)
1574609344415:for (rank in c("species", "genus", "family", "order", "class")){
1574609344416:for (ksize in kList){
1574609344416:for (sam in samples){
1574609344417:# (ksize <- 30)    # test value
1574609344417:# (sam <- "FA")    # test value
1574609344418:# Subset data
1574609344419:(obsSubset <- obsData %>%
1574609344421:filter(sample == sam))
1574609344422:(predSubset <- predData %>%
1574609344422:filter(sample == sam,
1574609344423:k == ksize))
1574609344424:# Check total number of reads on input data
1574609344424:(obsSubset%>% summarise_at(depths, sum))
1574609344425:(predSubset %>% summarise_at(depths, sum))
1574609344427:# Read counts to long format
1574609344428:(readCounts.long <- left_join(x = getAbundance(obsSubset, as.symbol(rank), depths) %>%
1574609344429:gather(key = "depth", value = "Observed", -1),
1574609344430:y = getAbundance(predSubset, as.symbol(rank), depths) %>%
1574609344430:gather(key = "depth", value = "Predicted", -1)
1574609344431:# , by = c(rank, "depth")
1574609344432:) %>%
1574609344441:mutate(depth = factor(depth)) %>%
1574609344441:replace_na(list("Observed" = 0, "Predicted" = 0))
1574609344442:)
1574609344443:# Calcultae relative abundance
1574609344444:(pred.relAbun <- getRelativeAbundance(predSubset, as.symbol(rank), depths))
1574609344444:(obs.relAbun  <- getRelativeAbundance(obsSubset, as.symbol(rank), depths))
1574609344446:# Remove unlcassified row from predicted data
1574609344447:(pred.relAbun <- pred.relAbun %>% filter(!!as.symbol(rank) != "Unclassified"))
1574609344449:# Relative abundances tables to long format
1574609344450:pred.relAbun.long <- pred.relAbun %>%
1574609344451:gather(key = "depth", value = "Predicted", -1)
1574609344452:obs.relAbun.long <- obs.relAbun %>%
1574609344453:gather(key = "depth", value = "Observed", -1)
1574609344455:(relAbun.long <- right_join(x = obs.relAbun.long,
1574609344456:y = pred.relAbun.long) %>%
1574609344457:mutate(depth = factor(depth, levels = depths)) %>%
1574609344458:replace_na(list("Observed" = 0, "Predicted" = 0))
1574609344459:)
1574609344461:(depthLabels <- paste0(depths, "x"))
1574609344462:(names(depthLabels) <- depths)
1574609344464:palette   <- colorRampPalette(pal_jco()(9))
1574609344465:palette   <- colorRampPalette(pal_d3()(9))
1574609344466:nTaxa     <- length(unique(pull(relAbun.long, !!as.symbol(rank))))
1574609344467:customPal <- palette(nTaxa)
1574609344468:customPal <- pal_d3(palette = "category20")(nTaxa)
1574609344469:show_col(rev(customPal))
1574609344473:titleLabel = paste("Sample", sam)
1574609344474:subtitleLabel = bquote(italic("nifH") ~ .(typeBySample[sam]) ~ "-" ~ italic("k")~"="~.(ksize))
1574609344476:# (p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574609344477:#   + geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574609344478:#   # + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574609344480:#   #              , position = jitter
1574609344481:#                , size = 3, stroke = 0.6
1574609344483:#                # , alpha = 0.8
1574609344484:#   )
1574609344485:#   + geom_smooth(method = lm
1574609344488:#                 , level = 0.95, color = "#333333", size = 0.8
1574609344489:#                 , se=FALSE
1574609344490:#                 )
1574609344491:#   # + stat_cor(label.x = 3, label.y = 18)
1574609344493:#   + stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574609344494:#              , label.x = 1
1574609344495:#              # , label.y = 21
1574609344496:#              , label.y = max(relAbun.long$Predicted) -1
1574609344497:#   )
1574609344499:#   # + scale_fill_hue(l=45)
1574609344504:#   + scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574609344505:#   # + stat_regline_equation(label.x = 3, label.y = 16)
1574609344506:#   # + geom_text_repel(aes(label = genus), size = 3)
1574609344507:#   + facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574609344509:#   + theme_classic2()
1574609344513:#   + publicationTheme()
1574609344514:#   + labs(title = titleLabel,
1574609344515:#          subtitle = subtitleLabel)
1574609344516:#   + theme(legend.background = element_blank()
1574609344517:#           , legend.box.background = element_rect(colour = axisColor)
1574609344518:#           , legend.box.spacing = unit(20, "mm")
1574609344519:#           , panel.background = element_blank()
1574609344520:#           , panel.grid.major = element_blank()
1574609344523:#           , panel.grid.minor = element_blank()
1574609344524:#           , panel.spacing    = unit(8, "mm")
1574609344525:#           , title = element_text(hjust = 0.5)
1574609344527:#           , strip.background = element_blank()
1574609344528:#           , strip.text.x     = element_text(size = baseTextSize,
1574609344529:#                                             margin = margin(6,0,2,0, "mm"))
1574609344530:#   )
1574609344531:# )
1574609344532:#
1574609344533:# ggsave(filename = paste0(rank, ".", sam, ".", ksize, ".rel_abundance.pdf"), plot = p,
1574609344533:#        width = 12, height = 10)
1574609344534:#
1574609344538:(pred.shannon <- as_tibble(calculateShannonIndex(pred.relAbun, depths)))
1574609344540:(obs.shannon  <- as_tibble(calculateShannonIndex(obs.relAbun, depths)))
1574609344542:(shannonTable <- rbind.data.frame(
1574609344543:shannonTable,
1574609344545:pred.shannon %>%
1574609344545:gather(Depth, Shannon) %>%
1574609344546:mutate(Rank = rank,
1574609344547:Sample = sam,
1574609344548:k = ksize,
1574609344551:Type = "Predicted"),
1574609344552:obs.shannon %>%
1574609344553:gather(Depth, Shannon) %>%
1574609344554:mutate(Rank = rank,
1574609344556:Sample = sam,
1574609344557:k = ksize,
1574609344559:Type = "Observed"))
1574609344560:)
1574609344565:}
1574609344566:}
1574609344567:}
1574609650567:warnings()
1574609663552:View(shannonTable)
1574609743582:save(shannonTable, file = "shannon_table.RData")
1574610387693:depths
1574610395597:depths
1574610473520:samples
1574610625952:selK <- 30
1574610628492:dataToPlot <- shannonTable %>%
1574610628493:filter(k == selK)
1574610632685:(dataToPlot <- shannonTable %>%
1574610632685:filter(k == selK))
1574610658453:rank
1574610672719:rank <- "genus"
1574610673477:(dataToPlot <- shannonTable %>%
1574610673478:filter(k == selK,
1574610673478:Rank = rank))
1574610681173:(dataToPlot <- shannonTable %>%
1574610681173:filter(k == selK,
1574610681174:Rank == rank))
1574610810747:ggplot(shannonTable, aes(x = Observed, y = Predicted))
1574610811001:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574610811002:, size = 3, stroke = 0.6
1574610811002:)
1574610838535:ggplot(shannonTable, aes(x = Observed, y = Predicted))
1574610838582:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574610838583:, size = 3, stroke = 0.6
1574610838583:)
1574610851833:(sp <- ggplot(shannonTable, aes(x = Observed, y = Predicted))
1574610851834:+ geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574610851834:, size = 3, stroke = 0.6
1574610851835:))
1574610865136:rank
1574610869281:shannonTable
1574610898596:(sp <- ggplot(shannonTable, aes(x = Observed, y = Predicted))
1574610898597:+ geom_point(aes(fill = Rank, shape = 21
1574610898598:, size = 3, stroke = 0.6
1574610898598:))
1574610898599:+ geom_smooth(method = lm
1574610898599:, level = 0.95, color = "#333333", size = 0.8
1574610898600:, se=FALSE
1574610898600:)
1574610898601:# + stat_cor(label.x = 3, label.y = 18)
1574610898601:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574610898602:, label.x = 1
1574610898603:# , label.y = 21
1574610898603:, label.y = max(relAbun.long$Predicted) -1
1574610898604:)
1574610898605:# + scale_fill_hue(l=45)
1574610898605:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574610898606:# + stat_regline_equation(label.x = 3, label.y = 16)
1574610898606:# + geom_text_repel(aes(label = genus), size = 3)
1574610898609:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574610898609:+ theme_classic2()
1574610898610:+ publicationTheme()
1574610898611:+ labs(title = titleLabel,
1574610898611:subtitle = subtitleLabel)
1574610898612:+ theme(legend.background = element_blank()
1574610898613:, legend.box.background = element_rect(colour = axisColor)
1574610898614:, legend.box.spacing = unit(20, "mm")
1574610898614:, panel.background = element_blank()
1574610898615:, panel.grid.major = element_blank()
1574610898616:, panel.grid.minor = element_blank()
1574610898616:, panel.spacing    = unit(8, "mm")
1574610898618:, title = element_text(hjust = 0.5)
1574610898619:, strip.background = element_blank()
1574610898620:, strip.text.x     = element_text(size = baseTextSize,
1574610898620:margin = margin(6,0,2,0, "mm"))
1574610898621:)
1574610898622:)
1574610925006:ggplot(shannonTable, aes(x = Observed, y = Predicted))
1574610925050:+ geom_point(aes(fill = Rank, shape = 21
1574610925051:, size = 3, stroke = 0.6
1574610925053:)
1574610932734:)
1574610940401:(sp <- ggplot(shannonTable, aes(x = Observed, y = Predicted))
1574610940402:+ geom_point(aes(fill = Rank, shape = 21
1574610940403:, size = 3, stroke = 0.6
1574610940403:))
1574610940404:+ geom_smooth(method = lm
1574610940405:, level = 0.95, color = "#333333", size = 0.8
1574610940405:, se=FALSE
1574610940406:)
1574610940409:# + stat_cor(label.x = 3, label.y = 18)
1574610940410:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574610940411:, label.x = 1
1574610940413:# , label.y = 21
1574610940413:, label.y = max(relAbun.long$Predicted) -1
1574610940414:)
1574610940415:# + scale_fill_hue(l=45)
1574610940415:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574610940416:# + stat_regline_equation(label.x = 3, label.y = 16)
1574610940417:# + geom_text_repel(aes(label = genus), size = 3)
1574610940417:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574610940418:+ theme_classic2()
1574610940419:+ publicationTheme()
1574610940419:+ labs(title = titleLabel,
1574610940432:subtitle = subtitleLabel)
1574610940433:+ theme(legend.background = element_blank()
1574610940436:, legend.box.background = element_rect(colour = axisColor)
1574610940437:, legend.box.spacing = unit(20, "mm")
1574610940438:, panel.background = element_blank()
1574610940439:, panel.grid.major = element_blank()
1574610940439:, panel.grid.minor = element_blank()
1574610940440:, panel.spacing    = unit(8, "mm")
1574610940441:, title = element_text(hjust = 0.5)
1574610940442:, strip.background = element_blank()
1574610940446:, strip.text.x     = element_text(size = baseTextSize,
1574610940447:margin = margin(6,0,2,0, "mm"))
1574610940448:)
1574610940449:)
1574610957280:(sp <- ggplot(shannonTable, aes(x = Observed, y = Predicted))
1574610957281:+ geom_point(aes(fill = Rank), shape = 21
1574610957282:, size = 3, stroke = 0.6
1574610957282:))
1574610964876:View(shannonTable)
1574610970179:dataToPlot
1574611056622:(dataToPlot <- shannonTable %>%
1574611056623:filter(k == selK,
1574611056623:Rank == rank) %>%
1574611056624:spread(key = Type, value = Shannon)
1574611056625:)
1574611209079:(dataToPlot <- shannonTable %>%
1574611209080:filter(k == selK,
1574611209080:Rank == rank) %>%
1574611209081:pivot_wider(names_from = Type, values_from = Shannon)
1574611209081:)
1574611238185:(dataToPlot <- shannonTable %>%
1574611238186:filter(k == selK,
1574611238187:Rank == rank) %>%
1574611238187:pivot_wider(names_from = Type, values_from = Shannon, -c(k, Rank))
1574611238188:)
1574611435258:dataToPlot <- shannonTable %>%
1574611435258:filter(k == selK,
1574611435259:Rank == rank)
1574611437897:dataToPlot
1574611505587:(dataToPlot <- shannonTable %>%
1574611505588:filter(k == selK,
1574611505588:Rank == rank) %>%
1574611505589:select(Depth, Shannon, Type) %>%
1574611505589:pivot_wider(names_from = Type, values_from = Shannon, -c(k, Rank))
1574611505590:)
1574611512742:(dataToPlot <- shannonTable %>%
1574611512743:filter(k == selK,
1574611512743:Rank == rank) %>%
1574611512744:select(Depth, Shannon, Type) %>%
1574611512744:pivot_wider(names_from = Type, values_from = Shannon)
1574611512744:)
1574612044931:shannonTable
1574612093161:(dataToPlot <- shannonTable %>%
1574612093162:filter(k == selK,
1574612093162:Rank == rank) %>%
1574612093163:select(Depth, Shannon, Type))
1574612096258:View(dataToPlot)
1574612127036:(dataToPlot <- shannonTable %>%
1574612127037:filter(k == selK,
1574612127037:Rank == rank) #%>%
1574612127038:# select(Depth, Shannon, Type)
1574612127038:)
1574612156551:(dataToPlot <- shannonTable %>%
1574612156552:filter(k == selK,
1574612156553:Rank == rank) #%>%
1574612156553:# select(Depth, Shannon, Type)
1574612156554:)
1574612158242:(dataToPlot %>%
1574612158242:pivot_wider(-Sample, names_from = Type, values_from = Shannon)
1574612158243:)
1574612175559:(dataToPlot <- shannonTable %>%
1574612175560:filter(k == selK,
1574612175560:Rank == rank) #%>%
1574612175560:select(Sample, Depth, Shannon, Type)
1574612175561:)
1574612186064:(dataToPlot <- shannonTable %>%
1574612186064:filter(k == selK,
1574612186065:Rank == rank) %>%
1574612186065:select(Sample, Depth, Shannon, Type)
1574612186066:)
1574612189054:(dataToPlot %>%
1574612189055:pivot_wider(-Sample, names_from = Type, values_from = Shannon)
1574612189056:)
1574612196148:(dataToPlot %>%
1574612196148:pivot_wider(-Sample, names_from = Type, values_from = Shannon)
1574612196149:)
1574612203348:(dataToPlot %>%
1574612203349:pivot_wider(names_from = Type, values_from = Shannon)
1574612203350:)
1574612232075:(dataToPlot <- shannonTable %>%
1574612232076:filter(k == selK,
1574612232076:Rank == rank) #%>%
1574612232077:# select(Sample, Depth, Shannon, Type)
1574612232077:)
1574612236373:(dataToPlot %>%
1574612236374:pivot_wider(names_from = Type, values_from = Shannon)
1574612236375:)
1574612340527:shannonTable
1574612736147:rank
1574612750505:View(shannonTable)
1574612803372:View(shannonTable)
1574612806002:View(shannonTable)
1574612817701:shannonTable <- tibble()
1574612824268:for (rank in c("species", "genus", "family", "order", "class")){
1574612824268:for (ksize in kList){
1574612824269:for (sam in samples){
1574612824270:# (ksize <- 30)    # test value
1574612824270:# (sam <- "FA")    # test value
1574612824271:# Subset data
1574612824272:(obsSubset <- obsData %>%
1574612824272:filter(sample == sam))
1574612824273:(predSubset <- predData %>%
1574612824273:filter(sample == sam,
1574612824274:k == ksize))
1574612824276:# Check total number of reads on input data
1574612824276:(obsSubset%>% summarise_at(depths, sum))
1574612824277:(predSubset %>% summarise_at(depths, sum))
1574612824283:# Read counts to long format
1574612824284:(readCounts.long <- left_join(x = getAbundance(obsSubset, as.symbol(rank), depths) %>%
1574612824284:gather(key = "depth", value = "Observed", -1),
1574612824285:y = getAbundance(predSubset, as.symbol(rank), depths) %>%
1574612824286:gather(key = "depth", value = "Predicted", -1)
1574612824286:# , by = c(rank, "depth")
1574612824287:) %>%
1574612824288:mutate(depth = factor(depth)) %>%
1574612824288:replace_na(list("Observed" = 0, "Predicted" = 0))
1574612824289:)
1574612824290:# Calcultae relative abundance
1574612824291:(pred.relAbun <- getRelativeAbundance(predSubset, as.symbol(rank), depths))
1574612824292:(obs.relAbun  <- getRelativeAbundance(obsSubset, as.symbol(rank), depths))
1574612824293:# Remove unlcassified row from predicted data
1574612824294:(pred.relAbun <- pred.relAbun %>% filter(!!as.symbol(rank) != "Unclassified"))
1574612824295:# Relative abundances tables to long format
1574612824296:pred.relAbun.long <- pred.relAbun %>%
1574612824297:gather(key = "depth", value = "Predicted", -1)
1574612824298:obs.relAbun.long <- obs.relAbun %>%
1574612824299:gather(key = "depth", value = "Observed", -1)
1574612824300:(relAbun.long <- right_join(x = obs.relAbun.long,
1574612824301:y = pred.relAbun.long) %>%
1574612824302:mutate(depth = factor(depth, levels = depths)) %>%
1574612824303:replace_na(list("Observed" = 0, "Predicted" = 0))
1574612824336:)
1574612824338:(depthLabels <- paste0(depths, "x"))
1574612824339:(names(depthLabels) <- depths)
1574612824340:palette   <- colorRampPalette(pal_jco()(9))
1574612824341:palette   <- colorRampPalette(pal_d3()(9))
1574612824342:nTaxa     <- length(unique(pull(relAbun.long, !!as.symbol(rank))))
1574612824344:customPal <- palette(nTaxa)
1574612824345:customPal <- pal_d3(palette = "category20")(nTaxa)
1574612824346:show_col(rev(customPal))
1574612824348:titleLabel = paste("Sample", sam)
1574612824349:subtitleLabel = bquote(italic("nifH") ~ .(typeBySample[sam]) ~ "-" ~ italic("k")~"="~.(ksize))
1574612824351:# (p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574612824352:#   + geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574612824353:#   # + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574612824354:#   #              , position = jitter
1574612824355:#                , size = 3, stroke = 0.6
1574612824356:#                # , alpha = 0.8
1574612824357:#   )
1574612824358:#   + geom_smooth(method = lm
1574612824359:#                 , level = 0.95, color = "#333333", size = 0.8
1574612824360:#                 , se=FALSE
1574612824361:#                 )
1574612824362:#   # + stat_cor(label.x = 3, label.y = 18)
1574612824363:#   + stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574612824363:#              , label.x = 1
1574612824364:#              # , label.y = 21
1574612824365:#              , label.y = max(relAbun.long$Predicted) -1
1574612824366:#   )
1574612824367:#   # + scale_fill_hue(l=45)
1574612824369:#   + scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574612824370:#   # + stat_regline_equation(label.x = 3, label.y = 16)
1574612824372:#   # + geom_text_repel(aes(label = genus), size = 3)
1574612824374:#   + facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574612824375:#   + theme_classic2()
1574612824376:#   + publicationTheme()
1574612824377:#   + labs(title = titleLabel,
1574612824378:#          subtitle = subtitleLabel)
1574612824379:#   + theme(legend.background = element_blank()
1574612824380:#           , legend.box.background = element_rect(colour = axisColor)
1574612824382:#           , legend.box.spacing = unit(20, "mm")
1574612824383:#           , panel.background = element_blank()
1574612824384:#           , panel.grid.major = element_blank()
1574612824385:#           , panel.grid.minor = element_blank()
1574612824386:#           , panel.spacing    = unit(8, "mm")
1574612824386:#           , title = element_text(hjust = 0.5)
1574612824387:#           , strip.background = element_blank()
1574612824388:#           , strip.text.x     = element_text(size = baseTextSize,
1574612824388:#                                             margin = margin(6,0,2,0, "mm"))
1574612824389:#   )
1574612824390:# )
1574612824390:#
1574612824391:# ggsave(filename = paste0(rank, ".", sam, ".", ksize, ".rel_abundance.pdf"), plot = p,
1574612824392:#        width = 12, height = 10)
1574612824392:#
1574612824394:(pred.shannon <- as_tibble(calculateShannonIndex(pred.relAbun, depths)))
1574612824395:(obs.shannon  <- as_tibble(calculateShannonIndex(obs.relAbun, depths)))
1574612824396:(shannonTable <- rbind.data.frame(
1574612824397:shannonTable,
1574612824398:pred.shannon %>%
1574612824399:gather(Depth, Shannon) %>%
1574612824400:mutate(Rank = rank,
1574612824401:Sample = sam,
1574612824402:k = ksize,
1574612824403:Type = "Predicted"),
1574612824404:obs.shannon %>%
1574612824405:gather(Depth, Shannon) %>%
1574612824407:mutate(Rank = rank,
1574612824409:Sample = sam,
1574612824410:k = ksize,
1574612824411:Type = "Observed"))
1574612824412:)
1574612824415:}
1574612824416:}
1574612824417:}
1574612940545:shannonTable <- tibble()
1574612944084:for (rank in c("species", "genus", "family", "order", "class")){
1574612944084:for (ksize in kList){
1574612944085:for (sam in samples){
1574612944085:# (ksize <- 30)    # test value
1574612944086:# (sam <- "FA")    # test value
1574612944087:# Subset data
1574612944087:(obsSubset <- obsData %>%
1574612944088:filter(sample == sam))
1574612944088:(predSubset <- predData %>%
1574612944089:filter(sample == sam,
1574612944091:k == ksize))
1574612944093:# Check total number of reads on input data
1574612944094:(obsSubset%>% summarise_at(depths, sum))
1574612944095:(predSubset %>% summarise_at(depths, sum))
1574612944096:# Read counts to long format
1574612944097:(readCounts.long <- left_join(x = getAbundance(obsSubset, as.symbol(rank), depths) %>%
1574612944098:gather(key = "depth", value = "Observed", -1),
1574612944099:y = getAbundance(predSubset, as.symbol(rank), depths) %>%
1574612944099:gather(key = "depth", value = "Predicted", -1)
1574612944100:# , by = c(rank, "depth")
1574612944100:) %>%
1574612944101:mutate(depth = factor(depth)) %>%
1574612944102:replace_na(list("Observed" = 0, "Predicted" = 0))
1574612944102:)
1574612944103:# Calcultae relative abundance
1574612944104:(pred.relAbun <- getRelativeAbundance(predSubset, as.symbol(rank), depths))
1574612944104:(obs.relAbun  <- getRelativeAbundance(obsSubset, as.symbol(rank), depths))
1574612944105:## Remove unlcassified row from predicted data
1574612944106:# (pred.relAbun <- pred.relAbun %>% filter(!!as.symbol(rank) != "Unclassified"))
1574612944108:# Relative abundances tables to long format
1574612944110:pred.relAbun.long <- pred.relAbun %>%
1574612944111:filter(!!as.symbol(rank) != "Unclassified") %>%
1574612944112:gather(key = "depth", value = "Predicted", -1)
1574612944114:obs.relAbun.long <- obs.relAbun %>%
1574612944115:gather(key = "depth", value = "Observed", -1)
1574612944116:(relAbun.long <- right_join(x = obs.relAbun.long,
1574612944117:y = pred.relAbun.long) %>%
1574612944118:mutate(depth = factor(depth, levels = depths)) %>%
1574612944119:replace_na(list("Observed" = 0, "Predicted" = 0))
1574612944120:)
1574612944121:(depthLabels <- paste0(depths, "x"))
1574612944122:(names(depthLabels) <- depths)
1574612944123:palette   <- colorRampPalette(pal_jco()(9))
1574612944124:palette   <- colorRampPalette(pal_d3()(9))
1574612944125:nTaxa     <- length(unique(pull(relAbun.long, !!as.symbol(rank))))
1574612944126:customPal <- palette(nTaxa)
1574612944126:customPal <- pal_d3(palette = "category20")(nTaxa)
1574612944127:show_col(rev(customPal))
1574612944129:titleLabel = paste("Sample", sam)
1574612944129:subtitleLabel = bquote(italic("nifH") ~ .(typeBySample[sam]) ~ "-" ~ italic("k")~"="~.(ksize))
1574612944131:# (p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574612944132:#   + geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574612944133:#   # + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574612944133:#   #              , position = jitter
1574612944134:#                , size = 3, stroke = 0.6
1574612944135:#                # , alpha = 0.8
1574612944136:#   )
1574612944137:#   + geom_smooth(method = lm
1574612944137:#                 , level = 0.95, color = "#333333", size = 0.8
1574612944138:#                 , se=FALSE
1574612944139:#                 )
1574612944140:#   # + stat_cor(label.x = 3, label.y = 18)
1574612944141:#   + stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574612944142:#              , label.x = 1
1574612944143:#              # , label.y = 21
1574612944144:#              , label.y = max(relAbun.long$Predicted) -1
1574612944144:#   )
1574612944145:#   # + scale_fill_hue(l=45)
1574612944146:#   + scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574612944147:#   # + stat_regline_equation(label.x = 3, label.y = 16)
1574612944148:#   # + geom_text_repel(aes(label = genus), size = 3)
1574612944148:#   + facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574612944149:#   + theme_classic2()
1574612944150:#   + publicationTheme()
1574612944151:#   + labs(title = titleLabel,
1574612944152:#          subtitle = subtitleLabel)
1574612944153:#   + theme(legend.background = element_blank()
1574612944153:#           , legend.box.background = element_rect(colour = axisColor)
1574612944154:#           , legend.box.spacing = unit(20, "mm")
1574612944155:#           , panel.background = element_blank()
1574612944156:#           , panel.grid.major = element_blank()
1574612944157:#           , panel.grid.minor = element_blank()
1574612944158:#           , panel.spacing    = unit(8, "mm")
1574612944158:#           , title = element_text(hjust = 0.5)
1574612944159:#           , strip.background = element_blank()
1574612944160:#           , strip.text.x     = element_text(size = baseTextSize,
1574612944161:#                                             margin = margin(6,0,2,0, "mm"))
1574612944162:#   )
1574612944163:# )
1574612944163:#
1574612944164:# ggsave(filename = paste0(rank, ".", sam, ".", ksize, ".rel_abundance.pdf"), plot = p,
1574612944165:#        width = 12, height = 10)
1574612944166:#
1574612944168:(pred.shannon <- as_tibble(calculateShannonIndex(pred.relAbun, depths)))
1574612944169:(obs.shannon  <- as_tibble(calculateShannonIndex(obs.relAbun, depths)))
1574612944170:(shannonTable <- rbind.data.frame(
1574612944171:shannonTable,
1574612944172:pred.shannon %>%
1574612944173:gather(Depth, Shannon) %>%
1574612944174:mutate(Rank = rank,
1574612944175:Sample = sam,
1574612944177:k = ksize,
1574612944178:Type = "Predicted"),
1574612944179:obs.shannon %>%
1574612944180:gather(Depth, Shannon) %>%
1574612944192:mutate(Rank = rank,
1574612944194:Sample = sam,
1574612944195:k = ksize,
1574612944196:Type = "Observed"))
1574612944197:)
1574612944200:}
1574612944201:}
1574612944212:}
1574612979112:save(shannonTable, file = "shannon_table.RData")
1574612988771:View(shannonTable)
1574612999420:selK <- 30
1574612999857:rank <- "genus"
1574613001068:(dataToPlot <- shannonTable %>%
1574613001069:filter(k == selK,
1574613001069:Rank == rank) #%>%
1574613001070:# select(Sample, Depth, Shannon, Type)
1574613001070:)
1574613002057:(dataToPlot %>%
1574613002058:pivot_wider(names_from = Type, values_from = Shannon)
1574613002058:)
1574613027184:(sp <- ggplot(dataToPlot, aes(x = Observed, y = Predicted))
1574613027184:+ geom_point(aes(fill = Rank), shape = 21
1574613027185:, size = 3, stroke = 0.6
1574613027185:))
1574613032716:dataToPlot
1574613047167:dataToPlot
1574613053015:(dataToPlot %>%
1574613053016:pivot_wider(names_from = Type, values_from = Shannon)
1574613053016:)
1574613057248:(sp <- ggplot(dataToPlot, aes(x = Observed, y = Predicted))
1574613057248:+ geom_point(aes(fill = Rank), shape = 21
1574613057248:, size = 3, stroke = 0.6
1574613057249:))
1574613090176:(dataToPlot <- shannonTable %>%
1574613090177:filter(k == selK,
1574613090178:Rank == rank) %>%
1574613090181:# select(Sample, Depth, Shannon, Type)
1574613090182:pivot_wider(names_from = Type, values_from = Shannon)
1574613090183:)
1574613095955:(sp <- ggplot(dataToPlot, aes(x = Observed, y = Predicted))
1574613095955:+ geom_point(aes(fill = Rank), shape = 21
1574613095956:, size = 3, stroke = 0.6
1574613095956:))
1574613154387:(sp <- ggplot(dataToPlot, aes(x = Observed, y = Predicted))
1574613154387:+ geom_point(#aes(fill = Rank),
1574613154388:shape = 21
1574613154388:, size = 3, stroke = 0.6
1574613154389:))
1574613180199:ggplot(dataToPlot, aes(x = Observed, y = Predicted))
1574613180560:+ geom_point(#aes(fill = Rank),
1574613180560:shape = 21
1574613180561:, size = 3, stroke = 0.6
1574613180563:)
1574613180567:+ geom_smooth(method = lm
1574613180568:, level = 0.95, color = "#333333", size = 0.8
1574613180568:, se=FALSE
1574613180569:)
1574613180572:# + stat_cor(label.x = 3, label.y = 18)
1574613180573:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574613180573:, label.x = 1
1574613180574:# , label.y = 21
1574613180574:, label.y = max(relAbun.long$Predicted) -1
1574613180575:)
1574613180579:# + scale_fill_hue(l=45)
1574613180580:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574613180581:# + stat_regline_equation(label.x = 3, label.y = 16)
1574613180584:# + geom_text_repel(aes(label = genus), size = 3)
1574613180584:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574613180587:+ theme_classic2()
1574613199601:ggplot(dataToPlot, aes(x = Observed, y = Predicted))
1574613200038:+ geom_point(#aes(fill = Rank),
1574613200038:shape = 21
1574613200039:, size = 3, stroke = 0.6)
1574613200046:+ geom_smooth(method = lm
1574613200046:, level = 0.95, color = "#333333", size = 0.8
1574613200047:, se=FALSE
1574613200047:)
1574613214776:(sp <- ggplot(dataToPlot, aes(x = Observed, y = Predicted))
1574613214777:+ geom_point(#aes(fill = Rank),
1574613214778:shape = 21
1574613214779:, size = 3, stroke = 0.6)
1574613214779:+ geom_smooth(method = lm
1574613214780:, level = 0.95, color = "#333333", size = 0.8
1574613214781:, se=FALSE
1574613214781:)
1574613214782:# + stat_cor(label.x = 3, label.y = 18)
1574613214782:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574613214783:, label.x = 1
1574613214783:# , label.y = 21
1574613214784:, label.y = max(relAbun.long$Predicted) -1
1574613214785:)
1574613214786:# + scale_fill_hue(l=45)
1574613214788:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574613214788:# + stat_regline_equation(label.x = 3, label.y = 16)
1574613214789:# + geom_text_repel(aes(label = genus), size = 3)
1574613214790:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574613214790:+ theme_classic2()
1574613214791:+ publicationTheme()
1574613214792:+ labs(title = titleLabel,
1574613214794:subtitle = subtitleLabel)
1574613214795:+ theme(legend.background = element_blank()
1574613214796:, legend.box.background = element_rect(colour = axisColor)
1574613214796:, legend.box.spacing = unit(20, "mm")
1574613214797:, panel.background = element_blank()
1574613214798:, panel.grid.major = element_blank()
1574613214799:, panel.grid.minor = element_blank()
1574613214799:, panel.spacing    = unit(8, "mm")
1574613214800:, title = element_text(hjust = 0.5)
1574613214801:, strip.background = element_blank()
1574613214802:, strip.text.x     = element_text(size = baseTextSize,
1574613214803:margin = margin(6,0,2,0, "mm"))
1574613214803:)
1574613214804:)
1574613221282:(sp <- ggplot(dataToPlot, aes(x = Observed, y = Predicted))
1574613221283:+ geom_point(#aes(fill = Rank),
1574613221283:shape = 21
1574613221284:, size = 3, stroke = 0.6)
1574613221284:+ geom_smooth(method = lm
1574613221285:, level = 0.95, color = "#333333", size = 0.8
1574613221285:, se=FALSE
1574613221286:)
1574613221286:# + stat_cor(label.x = 3, label.y = 18)
1574613221287:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574613221288:, label.x = 1
1574613221288:# , label.y = 21
1574613221289:, label.y = max(relAbun.long$Predicted) -1
1574613221289:)
1574613221290:# + scale_fill_hue(l=45)
1574613221291:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574613221291:# + stat_regline_equation(label.x = 3, label.y = 16)
1574613221292:# + geom_text_repel(aes(label = genus), size = 3)
1574613221293:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574613221293:+ theme_classic2())
1574613230224:(sp <- ggplot(dataToPlot, aes(x = Observed, y = Predicted))
1574613230224:+ geom_point(#aes(fill = Rank),
1574613230225:shape = 21
1574613230225:, size = 3, stroke = 0.6)
1574613230225:+ geom_smooth(method = lm
1574613230226:, level = 0.95, color = "#333333", size = 0.8
1574613230226:, se=FALSE
1574613230226:)
1574613230227:# + stat_cor(label.x = 3, label.y = 18)
1574613230227:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574613230228:, label.x = 1
1574613230228:# , label.y = 21
1574613230229:, label.y = max(relAbun.long$Predicted) -1
1574613230229:)
1574613230230:# + scale_fill_hue(l=45)
1574613230231:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574613230232:# + stat_regline_equation(label.x = 3, label.y = 16)
1574613230232:# + geom_text_repel(aes(label = genus), size = 3)
1574613230233:+ facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574613230233:)
1574613234458:(sp <- ggplot(dataToPlot, aes(x = Observed, y = Predicted))
1574613234459:+ geom_point(#aes(fill = Rank),
1574613234459:shape = 21
1574613234460:, size = 3, stroke = 0.6)
1574613234461:+ geom_smooth(method = lm
1574613234461:, level = 0.95, color = "#333333", size = 0.8
1574613234463:, se=FALSE
1574613234463:)
1574613234464:# + stat_cor(label.x = 3, label.y = 18)
1574613234464:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574613234465:, label.x = 1
1574613234465:# , label.y = 21
1574613234466:, label.y = max(relAbun.long$Predicted) -1
1574613234467:)
1574613234467:# + scale_fill_hue(l=45)
1574613234468:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574613234468:# + stat_regline_equation(label.x = 3, label.y = 16)
1574613234469:# + geom_text_repel(aes(label = genus), size = 3)
1574613234470:)
1574613250061:dataToPlot
1574613491985:(sp <- ggplot(dataToPlot, aes(x = Observed, y = Predicted))
1574613491986:+ geom_point(#aes(fill = Rank),
1574613491987:shape = 21
1574613491987:, size = 3, stroke = 0.6)
1574613491988:+ geom_smooth(method = lm
1574613491988:, level = 0.95, color = "#333333", size = 0.8
1574613491989:, se=FALSE
1574613491990:)
1574613491990:# + stat_cor(label.x = 3, label.y = 18)
1574613491991:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574613491992:, label.x = 1
1574613491992:# , label.y = 21
1574613491993:, label.y = max(relAbun.long$Predicted) -1
1574613491994:)
1574613491994:# + scale_fill_hue(l=45)
1574613491995:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574613491996:# + stat_regline_equation(label.x = 3, label.y = 16)
1574613491996:# + geom_text_repel(aes(label = genus), size = 3)
1574613491997:+ facet_wrap(. ~ depth)#, scales='free', labeller = labeller(depth = depthLabels))
1574613491998:)
1574613500317:(sp <- ggplot(dataToPlot, aes(x = Observed, y = Predicted))
1574613500318:+ geom_point(#aes(fill = Rank),
1574613500319:shape = 21
1574613500320:, size = 3, stroke = 0.6)
1574613500321:+ geom_smooth(method = lm
1574613500321:, level = 0.95, color = "#333333", size = 0.8
1574613500322:, se=FALSE
1574613500323:)
1574613500323:# + stat_cor(label.x = 3, label.y = 18)
1574613500324:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574613500325:, label.x = 1
1574613500326:# , label.y = 21
1574613500326:, label.y = max(relAbun.long$Predicted) -1
1574613500327:)
1574613500328:# + scale_fill_hue(l=45)
1574613500329:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574613500330:# + stat_regline_equation(label.x = 3, label.y = 16)
1574613500330:# + geom_text_repel(aes(label = genus), size = 3)
1574613500331:+ facet_wrap(. ~ Depth)#, scales='free', labeller = labeller(depth = depthLabels))
1574613500332:)
1574613525506:(sp <- ggplot(dataToPlot, aes(x = Observed, y = Predicted))
1574613525507:+ geom_point(#aes(fill = Rank),
1574613525508:shape = 21
1574613525508:, size = 3, stroke = 0.6)
1574613525516:+ geom_smooth(method = lm
1574613525517:, level = 0.95, color = "#333333", size = 0.8
1574613525517:, se=FALSE
1574613525518:)
1574613525519:# + stat_cor(label.x = 3, label.y = 18)
1574613525519:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574613525520:, label.x = 1
1574613525521:# , label.y = 21
1574613525521:, label.y = max(relAbun.long$Predicted) -1
1574613525522:)
1574613525527:# + scale_fill_hue(l=45)
1574613525530:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574613525531:# + stat_regline_equation(label.x = 3, label.y = 16)
1574613525531:# + geom_text_repel(aes(label = genus), size = 3)
1574613525531:+ facet_wrap(. ~ Depth, scales='free', labeller = labeller(depth = depthLabels))
1574613525533:+ theme_classic2()
1574613525535:+ publicationTheme()
1574613525537:+ labs(title = titleLabel,
1574613525537:subtitle = subtitleLabel)
1574613525538:+ theme(legend.background = element_blank()
1574613525540:, legend.box.background = element_rect(colour = axisColor)
1574613525541:, legend.box.spacing = unit(20, "mm")
1574613525542:, panel.background = element_blank()
1574613525543:, panel.grid.major = element_blank()
1574613525544:, panel.grid.minor = element_blank()
1574613525548:, panel.spacing    = unit(8, "mm")
1574613525549:, title = element_text(hjust = 0.5)
1574613525551:, strip.background = element_blank()
1574613525552:, strip.text.x     = element_text(size = baseTextSize,
1574613525553:margin = margin(6,0,2,0, "mm"))
1574613525555:)
1574613525556:)
1574613567203:(sp <- ggplot(dataToPlot, aes(x = Observed, y = Predicted))
1574613567204:+ geom_point(#aes(fill = Rank),
1574613567205:shape = 21
1574613567205:, size = 3, stroke = 0.6)
1574613567206:+ geom_smooth(method = lm
1574613567207:, level = 0.95, color = "#333333", size = 0.8
1574613567207:, se=FALSE
1574613567208:)
1574613567209:# + stat_cor(label.x = 3, label.y = 18)
1574613567210:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574613567211:, label.x = 1
1574613567211:# , label.y = 21
1574613567212:# , label.y = max(dataToPlot$) -1
1574613567213:)
1574613567216:# + scale_fill_hue(l=45)
1574613567217:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574613567218:# + stat_regline_equation(label.x = 3, label.y = 16)
1574613567218:# + geom_text_repel(aes(label = genus), size = 3)
1574613567219:+ facet_wrap(. ~ Depth, scales='free', labeller = labeller(depth = depthLabels))
1574613567220:+ theme_classic2()
1574613567220:+ publicationTheme()
1574613567223:+ labs(title = titleLabel,
1574613567224:subtitle = subtitleLabel)
1574613567225:+ theme(legend.background = element_blank()
1574613567226:, legend.box.background = element_rect(colour = axisColor)
1574613567259:, legend.box.spacing = unit(20, "mm")
1574613567260:, panel.background = element_blank()
1574613567260:, panel.grid.major = element_blank()
1574613567261:, panel.grid.minor = element_blank()
1574613567262:, panel.spacing    = unit(8, "mm")
1574613567263:, title = element_text(hjust = 0.5)
1574613567264:, strip.background = element_blank()
1574613567265:, strip.text.x     = element_text(size = baseTextSize,
1574613567268:margin = margin(6,0,2,0, "mm"))
1574613567269:)
1574613567270:)
1574613587794:(sp <- ggplot(dataToPlot, aes(x = Observed, y = Predicted))
1574613587796:+ geom_point(#aes(fill = Rank),
1574613587797:shape = 21
1574613587800:, size = 3, stroke = 0.6)
1574613587805:+ geom_smooth(method = lm
1574613587806:, level = 0.95, color = "#333333", size = 0.8
1574613587807:, se=FALSE
1574613587807:)
1574613587808:# + stat_cor(label.x = 3, label.y = 18)
1574613587809:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574613587811:# , label.x = 1
1574613587811:# , label.y = 21
1574613587812:# , label.y = max(dataToPlot$) -1
1574613587812:)
1574613587813:# + scale_fill_hue(l=45)
1574613587820:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574613587822:# + stat_regline_equation(label.x = 3, label.y = 16)
1574613587823:# + geom_text_repel(aes(label = genus), size = 3)
1574613587824:+ facet_wrap(. ~ Depth, scales='free', labeller = labeller(depth = depthLabels))
1574613587826:+ theme_classic2()
1574613587827:+ publicationTheme()
1574613587828:+ labs(title = titleLabel,
1574613587829:subtitle = subtitleLabel)
1574613587831:+ theme(legend.background = element_blank()
1574613587832:, legend.box.background = element_rect(colour = axisColor)
1574613587835:, legend.box.spacing = unit(20, "mm")
1574613587856:, panel.background = element_blank()
1574613587857:, panel.grid.major = element_blank()
1574613587858:, panel.grid.minor = element_blank()
1574613587860:, panel.spacing    = unit(8, "mm")
1574613587861:, title = element_text(hjust = 0.5)
1574613587863:, strip.background = element_blank()
1574613587864:, strip.text.x     = element_text(size = baseTextSize,
1574613587865:margin = margin(6,0,2,0, "mm"))
1574613587866:)
1574613587868:)
1574613610067:depthLabels
1574613627444:(sp <- ggplot(dataToPlot, aes(x = Observed, y = Predicted))
1574613627445:+ geom_point(#aes(fill = Rank),
1574613627446:shape = 21
1574613627447:, size = 3, stroke = 0.6)
1574613627447:+ geom_smooth(method = lm
1574613627448:, level = 0.95, color = "#333333", size = 0.8
1574613627448:, se=FALSE
1574613627449:)
1574613627449:# + stat_cor(label.x = 3, label.y = 18)
1574613627450:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574613627451:# , label.x = 1
1574613627452:# , label.y = 21
1574613627453:# , label.y = max(dataToPlot$) -1
1574613627453:)
1574613627457:# + scale_fill_hue(l=45)
1574613627458:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574613627462:# + stat_regline_equation(label.x = 3, label.y = 16)
1574613627463:# + geom_text_repel(aes(label = genus), size = 3)
1574613627464:+ facet_wrap(. ~ Depth, scales='free', labeller = labeller(Depth = depthLabels))
1574613627465:+ theme_classic2()
1574613627465:+ publicationTheme()
1574613627466:+ labs(title = titleLabel,
1574613627467:subtitle = subtitleLabel)
1574613627467:+ theme(legend.background = element_blank()
1574613627468:, legend.box.background = element_rect(colour = axisColor)
1574613627468:, legend.box.spacing = unit(20, "mm")
1574613627469:, panel.background = element_blank()
1574613627470:, panel.grid.major = element_blank()
1574613627482:, panel.grid.minor = element_blank()
1574613627483:, panel.spacing    = unit(8, "mm")
1574613627485:, title = element_text(hjust = 0.5)
1574613627486:, strip.background = element_blank()
1574613627487:, strip.text.x     = element_text(size = baseTextSize,
1574613627488:margin = margin(6,0,2,0, "mm"))
1574613627489:)
1574613627490:)
1574613714202:sSamples  <- length(samples)
1574613714752:sSamples
1574613725543:customPal <- palette(nSamples)
1574613731132:nSamples  <- length(samples)
1574613731180:customPal <- palette(nSamples)
1574613732041:customPal <- pal_d3(palette = "category20")(nTaxa)
1574613733345:show_col(rev(customPal))
1574613754235:samples
1574613768608:samples
1574613771860:length(samples)
1574613773522:nSamples  <- length(samples)
1574613787126:nSamples  <- length(samples)
1574613787796:customPal <- palette(nSamples)
1574613789279:customPal <- pal_d3(palette = "category20")(nSamples)
1574613790195:show_col(rev(customPal))
1574613794061:(sp <- ggplot(dataToPlot, aes(x = Observed, y = Predicted))
1574613794062:+ geom_point(aes(fill = Sample),
1574613794067:shape = 21
1574613794068:, size = 3, stroke = 0.6)
1574613794069:+ geom_smooth(method = lm
1574613794070:, level = 0.95, color = "#333333", size = 0.8
1574613794071:, se=FALSE
1574613794071:)
1574613794072:# + stat_cor(label.x = 3, label.y = 18)
1574613794072:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574613794073:# , label.x = 1
1574613794074:# , label.y = 21
1574613794076:# , label.y = max(dataToPlot$) -1
1574613794078:)
1574613794078:# + scale_fill_hue(l=45)
1574613794079:+ scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574613794080:# + stat_regline_equation(label.x = 3, label.y = 16)
1574613794082:# + geom_text_repel(aes(label = genus), size = 3)
1574613794083:+ facet_wrap(. ~ Depth, scales='free', labeller = labeller(Depth = depthLabels))
1574613794084:+ theme_classic2()
1574613794085:+ publicationTheme()
1574613794085:+ labs(title = titleLabel,
1574613794086:subtitle = subtitleLabel)
1574613794087:+ theme(legend.background = element_blank()
1574613794088:, legend.box.background = element_rect(colour = axisColor)
1574613794088:, legend.box.spacing = unit(20, "mm")
1574613794090:, panel.background = element_blank()
1574613794091:, panel.grid.major = element_blank()
1574613794091:, panel.grid.minor = element_blank()
1574613794093:, panel.spacing    = unit(8, "mm")
1574613794096:, title = element_text(hjust = 0.5)
1574613794099:, strip.background = element_blank()
1574613794100:, strip.text.x     = element_text(size = baseTextSize,
1574613794101:margin = margin(6,0,2,0, "mm"))
1574613794102:)
1574613794103:)
1574613873421:(sp <- ggplot(dataToPlot, aes(x = Observed, y = Predicted))
1574613873422:+ geom_point(aes(fill = Sample),
1574613873422:shape = 21
1574613873423:, size = 3, stroke = 0.6)
1574613873423:+ geom_smooth(method = lm
1574613873424:, level = 0.95, color = "#333333", size = 0.8
1574613873425:, se=FALSE
1574613873425:)
1574613873426:# + stat_cor(label.x = 3, label.y = 18)
1574613873426:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574613873427:# , label.x = 1
1574613873428:# , label.y = 21
1574613873428:# , label.y = max(dataToPlot$) -1
1574613873431:)
1574613873432:# + scale_fill_hue(l=45)
1574613873433:+ scale_fill_manual(values = customPal)#, name = "")
1574613873433:# + stat_regline_equation(label.x = 3, label.y = 16)
1574613873434:# + geom_text_repel(aes(label = genus), size = 3)
1574613873436:+ facet_wrap(. ~ Depth, scales='free', labeller = labeller(Depth = depthLabels))
1574613873437:+ theme_classic2()
1574613873437:+ publicationTheme()
1574613873438:+ labs(title = "Shannon Index",
1574613873439:subtitle = "")
1574613873440:+ theme(legend.background = element_blank()
1574613873441:, legend.box.background = element_rect(colour = axisColor)
1574613873442:, legend.box.spacing = unit(20, "mm")
1574613873443:, panel.background = element_blank()
1574613873444:, panel.grid.major = element_blank()
1574613873446:, panel.grid.minor = element_blank()
1574613873447:, panel.spacing    = unit(8, "mm")
1574613873447:, title = element_text(hjust = 0.5)
1574613873448:, strip.background = element_blank()
1574613873449:, strip.text.x     = element_text(size = baseTextSize,
1574613873450:margin = margin(6,0,2,0, "mm"))
1574613873450:)
1574613873451:)
1574613943897:depths
1574613954433:(dataToPlot <- shannonTable %>%
1574613954433:filter(k == selK,
1574613954434:Rank == rank) %>%
1574613954434:# select(Sample, Depth, Shannon, Type)
1574613954434:pivot_wider(names_from = Type, values_from = Shannon) %>%
1574613954435:mutate(Depth = factor(Depth, levels = depths))
1574613954435:)
1574613955821:palette   <- colorRampPalette(pal_d3()(9))
1574613956018:nSamples  <- length(samples)
1574613956308:customPal <- palette(nSamples)
1574613956792:customPal <- pal_d3(palette = "category20")(nSamples)
1574613957578:show_col(rev(customPal))
1574613959662:(sp <- ggplot(dataToPlot, aes(x = Observed, y = Predicted))
1574613959663:+ geom_point(aes(fill = Sample),
1574613959664:shape = 21
1574613959665:, size = 3, stroke = 0.6)
1574613959670:+ geom_smooth(method = lm
1574613959673:, level = 0.95, color = "#333333", size = 0.8
1574613959674:, se=FALSE
1574613959675:)
1574613959676:# + stat_cor(label.x = 3, label.y = 18)
1574613959677:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574613959678:# , label.x = 1
1574613959679:# , label.y = 21
1574613959681:# , label.y = max(dataToPlot$) -1
1574613959682:)
1574613959684:# + scale_fill_hue(l=45)
1574613959685:+ scale_fill_manual(values = customPal)#, name = "")
1574613959685:# + stat_regline_equation(label.x = 3, label.y = 16)
1574613959686:# + geom_text_repel(aes(label = genus), size = 3)
1574613959687:+ facet_wrap(. ~ Depth, scales='free', labeller = labeller(Depth = depthLabels))
1574613959688:+ theme_classic2()
1574613959689:+ publicationTheme()
1574613959690:+ labs(title = "Shannon Index",
1574613959691:subtitle = "")
1574613959692:+ theme(legend.background = element_blank()
1574613959693:, legend.box.background = element_rect(colour = axisColor)
1574613959694:, legend.box.spacing = unit(20, "mm")
1574613959696:, panel.background = element_blank()
1574613959696:, panel.grid.major = element_blank()
1574613959697:, panel.grid.minor = element_blank()
1574613959698:, panel.spacing    = unit(8, "mm")
1574613959699:, title = element_text(hjust = 0.5)
1574613959700:, strip.background = element_blank()
1574613959701:, strip.text.x     = element_text(size = baseTextSize,
1574613959702:margin = margin(6,0,2,0, "mm"))
1574613959703:)
1574613959705:)
1574614018632:(sp <- ggplot(dataToPlot, aes(x = Observed, y = Predicted))
1574614018633:+ geom_point(aes(fill = Sample),
1574614018633:shape = 21
1574614018634:, size = 3, stroke = 0.6)
1574614018634:+ geom_smooth(method = lm
1574614018635:, level = 0.95, color = "#333333", size = 0.8
1574614018636:# , se=FALSE
1574614018636:)
1574614018637:# + stat_cor(label.x = 3, label.y = 18)
1574614018637:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574614018638:# , label.x = 1
1574614018639:# , label.y = 21
1574614018640:# , label.y = max(dataToPlot$) -1
1574614018641:)
1574614018642:# + scale_fill_hue(l=45)
1574614018644:+ scale_fill_manual(values = customPal)#, name = "")
1574614018645:# + stat_regline_equation(label.x = 3, label.y = 16)
1574614018646:# + geom_text_repel(aes(label = genus), size = 3)
1574614018650:+ facet_wrap(. ~ Depth, scales='free', labeller = labeller(Depth = depthLabels))
1574614018651:+ theme_classic2()
1574614018653:+ publicationTheme()
1574614018653:+ labs(title = "Shannon Index",
1574614018654:subtitle = "")
1574614018655:+ theme(legend.background = element_blank()
1574614018659:, legend.box.background = element_rect(colour = axisColor)
1574614018659:, legend.box.spacing = unit(20, "mm")
1574614018660:, panel.background = element_blank()
1574614018661:, panel.grid.major = element_blank()
1574614018661:, panel.grid.minor = element_blank()
1574614018662:, panel.spacing    = unit(8, "mm")
1574614018663:, title = element_text(hjust = 0.5)
1574614018665:, strip.background = element_blank()
1574614018666:, strip.text.x     = element_text(size = baseTextSize,
1574614018668:margin = margin(6,0,2,0, "mm"))
1574614018669:)
1574614018669:)
1574614052382:(sp <- ggplot(dataToPlot, aes(x = Observed, y = Predicted))
1574614052383:+ geom_point(aes(fill = Sample),
1574614052384:shape = 21
1574614052384:, size = 3, stroke = 0.6)
1574614052387:+ geom_smooth(method = lm
1574614052388:, level = 0.95, color = "#333333", size = 0.8
1574614052388:, se=FALSE
1574614052389:)
1574614052390:# + stat_cor(label.x = 3, label.y = 18)
1574614052390:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574614052391:# , label.x = 1
1574614052391:# , label.y = 21
1574614052392:# , label.y = max(dataToPlot$) -1
1574614052392:)
1574614052392:# + scale_fill_hue(l=45)
1574614052393:+ scale_fill_manual(values = customPal)#, name = "")
1574614052393:# + stat_regline_equation(label.x = 3, label.y = 16)
1574614052394:# + geom_text_repel(aes(label = genus), size = 3)
1574614052394:+ facet_wrap(. ~ Depth, scales='free', labeller = labeller(Depth = depthLabels))
1574614052395:+ theme_classic2()
1574614052395:+ publicationTheme()
1574614052396:+ labs(title = "Shannon Index",
1574614052397:subtitle = "")
1574614052398:+ theme(legend.background = element_blank()
1574614052398:, legend.box.background = element_rect(colour = axisColor)
1574614052400:, legend.box.spacing = unit(20, "mm")
1574614052401:, panel.background = element_blank()
1574614052402:, panel.grid.major = element_blank()
1574614052403:, panel.grid.minor = element_blank()
1574614052404:, panel.spacing    = unit(8, "mm")
1574614052404:, title = element_text(hjust = 0.5)
1574614052405:, strip.background = element_blank()
1574614052406:, strip.text.x     = element_text(size = baseTextSize,
1574614052407:margin = margin(6,0,2,0, "mm"))
1574614052408:)
1574614052408:)
1574614129881:(sp <- ggplot(dataToPlot, aes(x = Observed, y = Predicted))
1574614129883:+ geom_point(aes(fill = Sample),
1574614129884:shape = 21
1574614129885:, size = 3, stroke = 0.6)
1574614129886:+ geom_smooth(method = lm
1574614129887:, level = 0.95, color = "#333333", size = 0.8
1574614129888:, se=FALSE
1574614129892:)
1574614129894:# + stat_cor(label.x = 3, label.y = 18)
1574614129895:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574614129898:# , label.x = 1
1574614129899:# , label.y = 21
1574614129899:# , label.y = max(dataToPlot$) -1
1574614129900:)
1574614129900:# + scale_fill_hue(l=45)
1574614129903:+ scale_fill_manual(values = customPal)#, name = "")
1574614129904:# + stat_regline_equation(label.x = 3, label.y = 16)
1574614129905:# + geom_text_repel(aes(label = genus), size = 3)
1574614129905:+ facet_wrap(. ~ Depth, scales='free', labeller = labeller(Depth = depthLabels))
1574614129906:+ theme_classic2()
1574614129907:+ publicationTheme()
1574614129907:+ labs(title = "Shannon Index",
1574614129909:subtitle = str_to_sentence(rank))
1574614129910:+ theme(legend.background = element_blank()
1574614129911:, legend.box.background = element_rect(colour = axisColor)
1574614129912:, legend.box.spacing = unit(20, "mm")
1574614129913:, panel.background = element_blank()
1574614129914:, panel.grid.major = element_blank()
1574614129915:, panel.grid.minor = element_blank()
1574614129916:, panel.spacing    = unit(8, "mm")
1574614129917:, title = element_text(hjust = 0.5)
1574614129918:, strip.background = element_blank()
1574614129919:, strip.text.x     = element_text(size = baseTextSize,
1574614129920:margin = margin(6,0,2,0, "mm"))
1574614129923:)
1574614129924:)
1574614308775:titleLabel = paste("Shannon Index")
1574614309238:subtitleLabel = bquote(.(str_to_sentence(rank)) ~ "-" ~ italic("k")~"="~.(ksize))
1574614312126:(sp <- ggplot(dataToPlot, aes(x = Observed, y = Predicted))
1574614312127:+ geom_point(aes(fill = Sample),
1574614312128:shape = 21
1574614312128:, size = 3, stroke = 0.6)
1574614312129:+ geom_smooth(method = lm
1574614312129:, level = 0.95, color = "#333333", size = 0.8
1574614312131:, se=FALSE
1574614312132:)
1574614312132:# + stat_cor(label.x = 3, label.y = 18)
1574614312134:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574614312134:# , label.x = 1
1574614312135:# , label.y = 21
1574614312136:# , label.y = max(dataToPlot$) -1
1574614312137:)
1574614312138:# + scale_fill_hue(l=45)
1574614312139:+ scale_fill_manual(values = customPal)#, name = "")
1574614312155:# + stat_regline_equation(label.x = 3, label.y = 16)
1574614312156:# + geom_text_repel(aes(label = genus), size = 3)
1574614312157:+ facet_wrap(. ~ Depth, scales='free', labeller = labeller(Depth = depthLabels))
1574614312159:+ theme_classic2()
1574614312164:+ publicationTheme()
1574614312168:+ labs(title = titleLabel,
1574614312170:subtitle = subtitleLabel)
1574614312171:+ theme(legend.background = element_blank()
1574614312178:, legend.box.background = element_rect(colour = axisColor)
1574614312179:, legend.box.spacing = unit(20, "mm")
1574614312182:, panel.background = element_blank()
1574614312187:, panel.grid.major = element_blank()
1574614312188:, panel.grid.minor = element_blank()
1574614312189:, panel.spacing    = unit(8, "mm")
1574614312190:, title = element_text(hjust = 0.5)
1574614312201:, strip.background = element_blank()
1574614312202:, strip.text.x     = element_text(size = baseTextSize,
1574614312203:margin = margin(6,0,2,0, "mm"))
1574614312222:)
1574614312223:)
1574614372499:# Process samples ---------------------------------------------------------
1574614372500:# rank <- "genus"
1574614372500:ranks <- c("species", "genus", "family", "order", "class")
1574614508306:for (rank in ranks){
1574614508307:for (ksize in kList){
1574614508307:# selK <- 30
1574614508308:# rank <- "genus"
1574614508310:(dataToPlot <- shannonTable %>%
1574614508311:filter(k == ksize,
1574614508312:Rank == rank) %>%
1574614508319:pivot_wider(names_from = Type, values_from = Shannon) %>%
1574614508320:mutate(Depth = factor(Depth, levels = depths))
1574614508321:)
1574614508322:palette   <- colorRampPalette(pal_d3()(9))
1574614508326:nSamples  <- length(samples)
1574614508327:customPal <- palette(nSamples)
1574614508338:customPal <- pal_d3(palette = "category20")(nSamples)
1574614508339:show_col(rev(customPal))
1574614508346:titleLabel = paste("Shannon Index")
1574614508464:subtitleLabel = bquote(.(str_to_sentence(rank)) ~ "-" ~ italic("k")~"="~.(ksize))
1574614508466:(sp <- ggplot(dataToPlot, aes(x = Observed, y = Predicted))
1574614508467:+ geom_point(aes(fill = Sample),
1574614508468:shape = 21
1574614508469:, size = 3, stroke = 0.6)
1574614508470:+ geom_smooth(method = lm
1574614508471:, level = 0.95, color = "#333333", size = 0.8
1574614508472:, se=FALSE
1574614508473:)
1574614508474:# + stat_cor(label.x = 3, label.y = 18)
1574614508478:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574614508479:# , label.x = 1
1574614508493:# , label.y = 21
1574614508494:# , label.y = max(dataToPlot$) -1
1574614508500:)
1574614508502:# + scale_fill_hue(l=45)
1574614508503:+ scale_fill_manual(values = customPal)#, name = "")
1574614508504:# + stat_regline_equation(label.x = 3, label.y = 16)
1574614508505:# + geom_text_repel(aes(label = genus), size = 3)
1574614508506:+ facet_wrap(. ~ Depth, scales='free', labeller = labeller(Depth = depthLabels))
1574614508507:+ theme_classic2()
1574614508508:+ publicationTheme()
1574614508510:+ labs(title = titleLabel,
1574614508511:subtitle = subtitleLabel)
1574614508512:+ theme(legend.background = element_blank()
1574614508513:, legend.box.background = element_rect(colour = axisColor)
1574614508515:, legend.box.spacing = unit(20, "mm")
1574614508516:, panel.background = element_blank()
1574614508525:, panel.grid.major = element_blank()
1574614508530:, panel.grid.minor = element_blank()
1574614508532:, panel.spacing    = unit(8, "mm")
1574614508533:, title = element_text(hjust = 0.5)
1574614508535:, strip.background = element_blank()
1574614508536:, strip.text.x     = element_text(size = baseTextSize,
1574614508537:margin = margin(6,0,2,0, "mm"))
1574614508538:)
1574614508544:)
1574614508546:ggsave(filename = paste0(rank, ".", ksize, ".sahnnon_index.pdf"), plot = sp,
1574614508547:width = 12, height = 10)
1574614508558:}
1574614508559:}
1574614675346:ksize
1574614806726:(sp <- ggplot(dataToPlot, aes(x = Observed, y = Predicted))
1574614806727:+ geom_point(aes(fill = Sample),
1574614806728:shape = 21
1574614806728:, size = 3, stroke = 0.6)
1574614806728:+ geom_smooth(method = lm
1574614806729:, level = 0.95, color = "#333333", size = 0.8
1574614806730:, se=FALSE
1574614806731:)
1574614806733:# + stat_cor(label.x = 3, label.y = 18)
1574614806734:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574614806735:# , label.x = 1
1574614806735:# , label.y = 21
1574614806736:# , label.y = max(dataToPlot$) -1
1574614806737:)
1574614806737:# + scale_fill_hue(l=45)
1574614806743:+ scale_fill_manual(values = customPal)#, name = "")
1574614806746:# + stat_regline_equation(label.x = 3, label.y = 16)
1574614806748:# + geom_text_repel(aes(label = genus), size = 3)
1574614806756:+ facet_wrap(. ~ Depth, scales='free', labeller = labeller(Depth = depthLabels))
1574614806757:+ theme_classic2()
1574614806760:+ publicationTheme()
1574614806762:+ labs(title = titleLabel,
1574614806764:subtitle = subtitleLabel)
1574614806765:+ theme(legend.background = element_blank()
1574614806766:, legend.box.background = element_rect(colour = axisColor)
1574614806767:, legend.box.spacing = unit(20, "mm")
1574614806769:, panel.background = element_blank()
1574614806770:, panel.grid.major = element_blank()
1574614806772:, panel.grid.minor = element_blank()
1574614806772:, panel.spacing    = unit(8, "mm")
1574614806773:, title = element_text(hjust = 0.5)
1574614806774:, strip.background = element_blank()
1574614806774:, strip.text.x     = element_text(size = baseTextSize,
1574614806775:margin = margin(6,0,2,0, "mm"))
1574614806775:)
1574614806776:)
1574614890805:titleLabel = paste("Shannon Index")
1574614891496:subtitleLabel = bquote(.(str_to_sentence(rank)) ~ "," ~ italic("k")~"="~.(ksize))
1574614892914:(sp <- ggplot(dataToPlot, aes(x = Observed, y = Predicted))
1574614892915:+ geom_point(aes(fill = Sample),
1574614892916:shape = 21
1574614892916:, size = 3, stroke = 0.6)
1574614892917:+ geom_smooth(method = lm
1574614892918:, level = 0.95, color = "#333333", size = 0.8
1574614892919:, se=FALSE
1574614892920:)
1574614892921:# + stat_cor(label.x = 3, label.y = 18)
1574614892922:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574614892923:# , label.x = 1
1574614892923:# , label.y = 21
1574614892924:# , label.y = max(dataToPlot$) -1
1574614892925:)
1574614892925:# + scale_fill_hue(l=45)
1574614892935:+ scale_fill_manual(values = customPal)#, name = "")
1574614892937:# + stat_regline_equation(label.x = 3, label.y = 16)
1574614892942:# + geom_text_repel(aes(label = genus), size = 3)
1574614892943:+ facet_wrap(. ~ Depth, scales='free', labeller = labeller(Depth = depthLabels))
1574614892943:+ theme_classic2()
1574614892943:+ publicationTheme()
1574614892944:+ labs(title = titleLabel,
1574614892944:subtitle = subtitleLabel)
1574614892945:+ theme(legend.background = element_blank()
1574614892946:, legend.box.background = element_rect(colour = axisColor)
1574614892946:, legend.box.spacing = unit(20, "mm")
1574614892947:, panel.background = element_blank()
1574614892948:, panel.grid.major = element_blank()
1574614892949:, panel.grid.minor = element_blank()
1574614892950:, panel.spacing    = unit(8, "mm")
1574614892950:, title = element_text(hjust = 0.5)
1574614892952:, strip.background = element_blank()
1574614892952:, strip.text.x     = element_text(size = baseTextSize,
1574614892967:margin = margin(6,0,2,0, "mm"))
1574614892969:)
1574614892970:)
1574614922516:subtitleLabel = bquote(.(str_to_sentence(rank)) "," ~ italic("k")~"="~.(ksize))
1574614923013:(sp <- ggplot(dataToPlot, aes(x = Observed, y = Predicted))
1574614923014:+ geom_point(aes(fill = Sample),
1574614923014:shape = 21
1574614923015:, size = 3, stroke = 0.6)
1574614923016:+ geom_smooth(method = lm
1574614923016:, level = 0.95, color = "#333333", size = 0.8
1574614923022:, se=FALSE
1574614923023:)
1574614923024:# + stat_cor(label.x = 3, label.y = 18)
1574614923025:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574614923026:# , label.x = 1
1574614923026:# , label.y = 21
1574614923027:# , label.y = max(dataToPlot$) -1
1574614923028:)
1574614923029:# + scale_fill_hue(l=45)
1574614923030:+ scale_fill_manual(values = customPal)#, name = "")
1574614923031:# + stat_regline_equation(label.x = 3, label.y = 16)
1574614923032:# + geom_text_repel(aes(label = genus), size = 3)
1574614923032:+ facet_wrap(. ~ Depth, scales='free', labeller = labeller(Depth = depthLabels))
1574614923033:+ theme_classic2()
1574614923034:+ publicationTheme()
1574614923034:+ labs(title = titleLabel,
1574614923035:subtitle = subtitleLabel)
1574614923035:+ theme(legend.background = element_blank()
1574614923036:, legend.box.background = element_rect(colour = axisColor)
1574614923037:, legend.box.spacing = unit(20, "mm")
1574614923039:, panel.background = element_blank()
1574614923046:, panel.grid.major = element_blank()
1574614923047:, panel.grid.minor = element_blank()
1574614923050:, panel.spacing    = unit(8, "mm")
1574614923053:, title = element_text(hjust = 0.5)
1574614923071:, strip.background = element_blank()
1574614923074:, strip.text.x     = element_text(size = baseTextSize,
1574614923075:margin = margin(6,0,2,0, "mm"))
1574614923077:)
1574614923078:)
1574615202086:subtitleLabel = bquote(.(str_to_sentence(rank))~"|" ~ italic("k")~"="~.(ksize))
1574615202551:(sp <- ggplot(dataToPlot, aes(x = Observed, y = Predicted))
1574615202552:+ geom_point(aes(fill = Sample),
1574615202553:shape = 21
1574615202553:, size = 3, stroke = 0.6)
1574615202554:+ geom_smooth(method = lm
1574615202554:, level = 0.95, color = "#333333", size = 0.8
1574615202556:, se=FALSE
1574615202556:)
1574615202557:# + stat_cor(label.x = 3, label.y = 18)
1574615202558:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574615202559:# , label.x = 1
1574615202560:# , label.y = 21
1574615202561:# , label.y = max(dataToPlot$) -1
1574615202565:)
1574615202565:# + scale_fill_hue(l=45)
1574615202566:+ scale_fill_manual(values = customPal)#, name = "")
1574615202567:# + stat_regline_equation(label.x = 3, label.y = 16)
1574615202568:# + geom_text_repel(aes(label = genus), size = 3)
1574615202568:+ facet_wrap(. ~ Depth, scales='free', labeller = labeller(Depth = depthLabels))
1574615202570:+ theme_classic2()
1574615202571:+ publicationTheme()
1574615202571:+ labs(title = titleLabel,
1574615202572:subtitle = subtitleLabel,
1574615202573:x = "Observed (Shannon index)",
1574615202574:y = "Predicted (Shannon index)"
1574615202575:)
1574615202576:+ theme(legend.background = element_blank()
1574615202576:, legend.box.background = element_rect(colour = axisColor)
1574615202577:, legend.box.spacing = unit(20, "mm")
1574615202578:, panel.background = element_blank()
1574615202579:, panel.grid.major = element_blank()
1574615202580:, panel.grid.minor = element_blank()
1574615202581:, panel.spacing    = unit(8, "mm")
1574615202581:, title = element_text(hjust = 0.5)
1574615202582:, strip.background = element_blank()
1574615202583:, strip.text.x     = element_text(size = baseTextSize,
1574615202584:margin = margin(6,0,2,0, "mm"))
1574615202585:)
1574615202586:)
1574629090349:#!/usr/bin/env Rscript
1574629090439:# ##############################################################################
1574629090439:#  Author:   Hector Fabio Espitia-Navarro
1574629090439:#            Georgia Institute of Technology
1574629090440:#  Version:  1.0
1574629090440:#  Date:     11/04/2019
1574629090440:# ##############################################################################
1574629090441:# Install required packages -----------------------------------------------
1574629090442:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1574629090442:if(!file.exists(personal.lib.path))
1574629090443:dir.create(personal.lib.path)
1574629090492:printMessage <- function(message, verbose){
1574629090493:if(verbose)
1574629090493:cat(message)
1574629090494:}
1574629090495:# crayon::bold("Hola")
1574629090496:installAndLoadPackages <- function(pkg, verbose){
1574629090497:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1574629090497:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1574629090498:printMessage("Done!\n", verbose)
1574629090498:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1574629090499:if (length(new.pkg)) {
1574629090500:printMessage("Installing new packages... ", verbose)
1574629090500:install.packages(new.pkg, dependencies = TRUE,
1574629090501:repos="http://cran.rstudio.com/",
1574629090501:lib = personal.lib.path)
1574629090502:printMessage("Done!\n", verbose)
1574629090503:}
1574629090504:printMessage("Loading required packages... ", verbose)
1574629090504:sapply(pkg, function(x){
1574629090505:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1574629090506:})
1574629090506:printMessage("Done!\n", verbose)
1574629090507:}
1574629090509:packages <- c("ggpubr", "RColorBrewer", "gridExtra", "ggsci", "scales", "stringr",
1574629090509:"extrafont", "grid", "tidyverse", "xlsx", "magrittr")
1574629090510:# packages <- c("tidyverse", "magrittr")
1574629090511:installAndLoadPackages(c("argparser", "stringr"), verbose = FALSE)
1574629091009:# Command line arguments processing ---------------------------------------
1574629091009:# Get script name
1574629091010:initial.options <- commandArgs(trailingOnly = FALSE)
1574629091010:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1574629091013:# Process command line arguments
1574629091014:# Create a parser
1574629091014:p <- arg_parser("This script is intended to assess STing classifier results.",
1574629091015:name = script.name)
1574629091036:# Add Positional arguments (required)
1574629091037:p <- add_argument(p, "pred_file", help = "STing predictions file. Summary table: accn, read counts, kingdom, phylum, order, class, family, genus, species")
1574629091038:p <- add_argument(p, "ref_file", help = "Reference file. Tab separated file BIOM like: accn, read counts, taxonomy ranks")
1574629091040:p <- add_argument(p, "--prefix", help = "Filename prefix for output files.",
1574629091040:default = "summary_results")
1574629091042:# Initialization of variables ---------------------------------------------
1574629091043:# "results/predicted.no_dup.summary.tsv"
1574629091043:dataDir    <- str_glue("results")
1574629091130:predFile   <- str_glue("{dataDir}/predicted.no_dup.summary.tsv")
1574629091133:refFile    <- str_glue("data/samples/full_taxonomy/communities/observed.read_counts.tsv")
1574629091134:prefix     <- str_glue("{dataDir}/classifier")
1574629091138:# Parse command line arguments --------------------------------------------
1574629091139:command.line = FALSE  # Turn to FALSE to test the script inside RStudio
1574629091139:argv <- list()
1574629091140:if(command.line) {
1574629091141:argv <- parse_args(p)
1574629091145:} else {
1574629091146:argv <- parse_args(p, list(predFile,
1574629091146:refFile,
1574629091147:"--prefix", prefix))
1574629091147:}
1574629091348:# Get argument values from the command line
1574629091348:predFile   <- argv$pred_file
1574629091349:refFile    <- argv$ref_file
1574629091350:prefix     <- argv$prefix
1574629091351:# Function to check if file exists ----------------------------------------
1574629091351:CheckFileExists <- function(fileList) {
1574629091352:non.exist.files <- !file.exists(fileList)
1574629091352:if(any(non.exist.files)) {
1574629091353:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1574629091353:}
1574629091354:}
1574629091355:# Check for input files ---------------------------------------------------
1574629091356:filesToCheck <- c(predFile, refFile)
1574629091356:errorMessage  <- CheckFileExists(filesToCheck)
1574629091357:#
1574629091357:if(!is.null(errorMessage)){
1574629091358:stop(errorMessage)
1574629091358:} else {
1574629091359:# Code core - Begin -------------------------------------------------------
1574629091359:installAndLoadPackages(packages, verbose = TRUE)
1574629091360:options(stringsAsFactors = F)
1574629091360:source(file = "scripts/ggplot_theme.R")
1574629091361:# FUNCTIONS ------------------------------------------------------------------
1574629091362:# Calculates relative abundance level of a grouped table -------------------
1574629091362:calculateRelativeAbundance <- function(readCountsTable, depths) {
1574629091363:# totalReads <- unlist(readCountsTable %>% summarise_at(sampleCols, sum))
1574629091363:outTable <- readCountsTable
1574629091364:totalReads <- lapply(readCountsTable[-1], sum)
1574629091364:for(sample in depths) {
1574629091365:outTable[[sample]] <- outTable[[sample]] / totalReads[[sample]] * 100
1574629091365:}
1574629091366:return(outTable)
1574629091366:}
1574629091367:# Clacultes relative abundance at a given rank level -----------------------
1574629091368:getRelativeAbundance <- function(countsTable, group_rank, depths) {
1574629091369:# print(group_rank)
1574629091369:# group_rank <- enquo(group_rank)
1574629091370:groupedData <- countsTable %>% group_by(!! group_rank) %>%
1574629091370:summarise_at(depths, sum)
1574629091371:calculateRelativeAbundance(groupedData, depths)
1574629091371:}
1574629091373:# Clacultes relative abundance at a given rank level -----------------------
1574629091373:getAbundance <- function(countsTable, group_rank, depths) {
1574629091374:# print(group_rank)
1574629091374:# group_rank <- enquo(group_rank)
1574629091375:countsTable %>% group_by(!! group_rank) %>%
1574629091376:summarise_at(depths, sum)
1574629091376:}
1574629091377:# Calculate Shannon index at the level of a grouped table -------------------
1574629091378:calculateShannonIndex <- function(countsTable, depths) {
1574629091379:# totalReads <- unlist(readCountsTable %>% summarise_at(sampleCols, sum))
1574629091380:totalReads <- lapply(countsTable[-1], sum)
1574629091380:lapply(countsTable[-1], function(sample){
1574629091381:nonZero <- sample[sample != 0]
1574629091382:sum(nonZero * log(nonZero))
1574629091382:})
1574629091383:}
1574629091384:# LOAD DATA ---------------------------------------------------------------
1574629091385:(obsData  <- read_tsv(refFile))
1574629091386:(predData <- read_tsv(predFile))
1574629091387:(samples <- unique(obsData$sample))
1574629091388:(depths  <- names(obsData)[2:8])
1574629091389:(kList   <- unique(predData$k))
1574629091390:(samplesByType <- data.frame("Full" = c("FA", "FB"),
1574629091391:"Partial" = c("PA", "PB")))
1574629091393:(typeBySample <- c("FA" = "full", "FB" = "full", "PA" = "partial", "PB" = "partial"))
1574629091394:# (lengthBySample <- c("FA" = bquote(italic("nifH") ~ "full length (">=750 ~ "bp)"),
1574629091394:#                      "FB" = bquote(italic("nifH") ~ "full length (">=750 ~ "bp)"),
1574629091395:#                      "PA" = bquote(italic("nifH") ~ "full length ("<750 ~ "bp)"),
1574629091396:#                      "PB" = bquote(italic("nifH") ~ "full length ("<750 ~ "bp)")))
1574629091398:# Process samples ---------------------------------------------------------
1574629091398:# rank <- "genus"
1574629091399:ranks <- c("species", "genus", "family", "order", "class")
1574629091400:shannonTable <- tibble()
1574629091402:# (ksize <- kList[2])
1574629091402:# for(type in names(samplesByType)) {
1574629091403:# (type <- "Full") # test value
1574629091404:# (samples <- samplesByType[,type])
1574629091406:for (rank in ranks){
1574629091407:for (ksize in kList){
1574629091408:for (sam in samples){
1574629091409:# (ksize <- 30)    # test value
1574629091410:# (sam <- "FA")    # test value
1574629091411:# Subset data
1574629091412:(obsSubset <- obsData %>%
1574629091413:filter(sample == sam))
1574629091414:(predSubset <- predData %>%
1574629091415:filter(sample == sam,
1574629091416:k == ksize))
1574629091417:# Check total number of reads on input data
1574629091418:(obsSubset%>% summarise_at(depths, sum))
1574629091419:(predSubset %>% summarise_at(depths, sum))
1574629091420:# Read counts to long format
1574629091421:(readCounts.long <- left_join(x = getAbundance(obsSubset, as.symbol(rank), depths) %>%
1574629091422:gather(key = "depth", value = "Observed", -1),
1574629091423:y = getAbundance(predSubset, as.symbol(rank), depths) %>%
1574629091425:gather(key = "depth", value = "Predicted", -1)
1574629091425:# , by = c(rank, "depth")
1574629091426:) %>%
1574629091427:mutate(depth = factor(depth)) %>%
1574629091428:replace_na(list("Observed" = 0, "Predicted" = 0))
1574629091429:)
1574629091430:# Calcultae relative abundance
1574629091431:(pred.relAbun <- getRelativeAbundance(predSubset, as.symbol(rank), depths))
1574629091432:(obs.relAbun  <- getRelativeAbundance(obsSubset, as.symbol(rank), depths))
1574629091434:## Remove unlcassified row from predicted data
1574629091436:# (pred.relAbun <- pred.relAbun %>% filter(!!as.symbol(rank) != "Unclassified"))
1574629091438:# Relative abundances tables to long format
1574629091439:pred.relAbun.long <- pred.relAbun %>%
1574629091440:filter(!!as.symbol(rank) != "Unclassified") %>%
1574629091440:gather(key = "depth", value = "Predicted", -1)
1574629091444:obs.relAbun.long <- obs.relAbun %>%
1574629091446:gather(key = "depth", value = "Observed", -1)
1574629091449:(relAbun.long <- right_join(x = obs.relAbun.long,
1574629091471:y = pred.relAbun.long) %>%
1574629091472:mutate(depth = factor(depth, levels = depths)) %>%
1574629091473:replace_na(list("Observed" = 0, "Predicted" = 0))
1574629091475:)
1574629091477:(depthLabels <- paste0(depths, "x"))
1574629091479:(names(depthLabels) <- depths)
1574629091481:# palette   <- colorRampPalette(pal_jco()(9))
1574629091485:palette   <- colorRampPalette(pal_d3()(9))
1574629091486:nTaxa     <- length(unique(pull(relAbun.long, !!as.symbol(rank))))
1574629091488:customPal <- palette(nTaxa)
1574629091489:customPal <- pal_d3(palette = "category20")(nTaxa)
1574629091490:show_col(rev(customPal))
1574629091493:titleLabel = paste("Sample", sam)
1574629091494:subtitleLabel = bquote(italic("nifH") ~ .(typeBySample[sam]) ~ "lenght" ~ " |" ~ italic("k")~"="~.(ksize))
1574629091497:# (p <- ggplot(relAbun.long, aes(x = Observed, y = Predicted))
1574629091498:#   + geom_jitter(aes(fill = !!as.symbol(rank)), shape = 21
1574629091500:#   # + geom_point(aes(fill = !!as.symbol(rank)), shape = 21
1574629091502:#   #              , position = jitter
1574629091503:#                , size = 3, stroke = 0.6
1574629091504:#                # , alpha = 0.8
1574629091506:#   )
1574629091507:#   + geom_smooth(method = lm
1574629091509:#                 , level = 0.95, color = "#333333", size = 0.8
1574629091510:#                 , se=FALSE
1574629091511:#                 )
1574629091513:#   # + stat_cor(label.x = 3, label.y = 18)
1574629091514:#   + stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574629091516:#              , label.x = 1
1574629091517:#              # , label.y = 21
1574629091518:#              , label.y = max(relAbun.long$Predicted) -1
1574629091520:#   )
1574629091521:#   # + scale_fill_hue(l=45)
1574629091523:#   + scale_fill_manual(values = customPal, name = str_to_sentence(rank))
1574629091524:#   # + stat_regline_equation(label.x = 3, label.y = 16)
1574629091526:#   # + geom_text_repel(aes(label = genus), size = 3)
1574629091527:#   + facet_wrap(. ~ depth, scales='free', labeller = labeller(depth = depthLabels))
1574629091528:#   + theme_classic2()
1574629091530:#   + publicationTheme()
1574629091531:#   + labs(title = titleLabel,
1574629091533:#          subtitle = subtitleLabel,
1574629091534:#          x = "Observed (Rel. abudance)",
1574629091536:#          y = "Predicted (Rel. abudance)")
1574629091537:#   + theme(legend.background = element_blank()
1574629091538:#           , legend.box.background = element_rect(colour = axisColor)
1574629091540:#           , legend.box.spacing = unit(20, "mm")
1574629091541:#           , panel.background = element_blank()
1574629091543:#           , panel.grid.major = element_blank()
1574629091544:#           , panel.grid.minor = element_blank()
1574629091546:#           , panel.spacing    = unit(8, "mm")
1574629091547:#           , title = element_text(hjust = 0.5)
1574629091548:#           , strip.background = element_blank()
1574629091550:#           , strip.text.x     = element_text(size = baseTextSize,
1574629091551:#                                             margin = margin(6,0,2,0, "mm"))
1574629091552:#   )
1574629091553:# )
1574629091555:#
1574629091556:# outFilename <- paste(prefix, rank, sam, ksize, "rel_abundance.pdf", sep = ".")
1574629091557:# ggsave(filename = outFilename, plot = p, width = 12, height = 10)
1574629091561:(pred.shannon <- as_tibble(calculateShannonIndex(pred.relAbun, depths)))
1574629091562:(obs.shannon  <- as_tibble(calculateShannonIndex(obs.relAbun, depths)))
1574629091565:(shannonTable <- rbind.data.frame(
1574629091566:shannonTable,
1574629091567:pred.shannon %>%
1574629091569:gather(Depth, Shannon) %>%
1574629091575:mutate(Rank = rank,
1574629091577:Sample = sam,
1574629091578:k = ksize,
1574629091580:Type = "Predicted"),
1574629091581:obs.shannon %>%
1574629091583:gather(Depth, Shannon) %>%
1574629091585:mutate(Rank = rank,
1574629091587:Sample = sam,
1574629091588:k = ksize,
1574629091590:Type = "Observed"))
1574629091591:)
1574629091596:}
1574629091598:}
1574629091600:}
1574629091603:outFilename <- paste(prefix, "shannon_table.RData", sep = ".")
1574629091604:save(shannonTable, file = outFilename)
1574629091608:for (rank in ranks){
1574629091609:for (ksize in kList){
1574629091612:# selK <- 30
1574629091616:# rank <- "genus"
1574629091620:(dataToPlot <- shannonTable %>%
1574629091622:filter(k == ksize,
1574629091624:Rank == rank) %>%
1574629091626:pivot_wider(names_from = Type, values_from = Shannon) %>%
1574629091628:mutate(Depth = factor(Depth, levels = depths))
1574629091629:)
1574629091633:palette   <- colorRampPalette(pal_d3()(9))
1574629091634:nSamples  <- length(samples)
1574629091636:customPal <- palette(nSamples)
1574629091638:customPal <- pal_d3(palette = "category20")(nSamples)
1574629091640:show_col(rev(customPal))
1574629091644:titleLabel = paste("Shannon Index")
1574629091645:subtitleLabel = bquote(.(str_to_sentence(rank))~"|" ~ italic("k")~"="~.(ksize))
1574629091649:(sp <- ggplot(dataToPlot, aes(x = Observed, y = Predicted))
1574629091651:+ geom_point(aes(fill = Sample),
1574629091653:shape = 21
1574629091655:, size = 3, stroke = 0.6)
1574629091657:+ geom_smooth(method = lm
1574629091659:, level = 0.95, color = "#333333", size = 0.8
1574629091661:, se=FALSE
1574629091663:)
1574629091665:# + stat_cor(label.x = 3, label.y = 18)
1574629091667:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574629091669:# , label.x = 1
1574629091671:# , label.y = 21
1574629091673:# , label.y = max(dataToPlot$) -1
1574629091675:)
1574629091677:# + scale_fill_hue(l=45)
1574629091679:+ scale_fill_manual(values = customPal)#, name = "")
1574629091680:# + stat_regline_equation(label.x = 3, label.y = 16)
1574629091682:# + geom_text_repel(aes(label = genus), size = 3)
1574629091684:+ facet_wrap(. ~ Depth, scales='free', labeller = labeller(Depth = depthLabels))
1574629091686:+ theme_classic2()
1574629091688:+ publicationTheme()
1574629091690:+ labs(title = titleLabel,
1574629091692:subtitle = subtitleLabel,
1574629091694:x = "Observed (Shannon index)",
1574629091696:y = "Predicted (Shannon index)"
1574629091698:)
1574629091700:+ theme(legend.background = element_blank()
1574629091702:, legend.box.background = element_rect(colour = axisColor)
1574629091704:, legend.box.spacing = unit(20, "mm")
1574629091707:, panel.background = element_blank()
1574629091709:, panel.grid.major = element_blank()
1574629091711:, panel.grid.minor = element_blank()
1574629091713:, panel.spacing    = unit(8, "mm")
1574629091715:, title = element_text(hjust = 0.5)
1574629091717:, strip.background = element_blank()
1574629091719:, strip.text.x     = element_text(size = baseTextSize,
1574629091722:margin = margin(6,0,2,0, "mm"))
1574629091724:)
1574629091726:)
1574629091728:outFilename <- paste(prefix, rank, ksize, "shannon_index.pdf", sep = ".")
1574629091743:ggsave(filename = outFilename, plot = p, width = 12, height = 10)
1574629091748:}
1574629091757:}
1574629091760:# Code core - End ---------------------------------------------------------
1574629091762:}
1574630246611:prefix
1574630253374:for (rank in ranks){
1574630253505:for (ksize in kList){
1574630253506:# selK <- 30
1574630253507:# rank <- "genus"
1574630253507:(dataToPlot <- shannonTable %>%
1574630253508:filter(k == ksize,
1574630253508:Rank == rank) %>%
1574630253509:pivot_wider(names_from = Type, values_from = Shannon) %>%
1574630253509:mutate(Depth = factor(Depth, levels = depths))
1574630253510:)
1574630253511:palette   <- colorRampPalette(pal_d3()(9))
1574630253511:nSamples  <- length(samples)
1574630253512:customPal <- palette(nSamples)
1574630253512:customPal <- pal_d3(palette = "category20")(nSamples)
1574630253513:show_col(rev(customPal))
1574630253516:titleLabel = paste("Shannon Index")
1574630253517:subtitleLabel = bquote(.(str_to_sentence(rank))~"|" ~ italic("k")~"="~.(ksize))
1574630253518:(sp <- ggplot(dataToPlot, aes(x = Observed, y = Predicted))
1574630253519:+ geom_point(aes(fill = Sample),
1574630253519:shape = 21
1574630253520:, size = 3, stroke = 0.6)
1574630253521:+ geom_smooth(method = lm
1574630253522:, level = 0.95, color = "#333333", size = 0.8
1574630253523:, se=FALSE
1574630253524:)
1574630253525:# + stat_cor(label.x = 3, label.y = 18)
1574630253526:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574630253527:# , label.x = 1
1574630253528:# , label.y = 21
1574630253529:# , label.y = max(dataToPlot$) -1
1574630253529:)
1574630253530:# + scale_fill_hue(l=45)
1574630253531:+ scale_fill_manual(values = customPal)#, name = "")
1574630253531:# + stat_regline_equation(label.x = 3, label.y = 16)
1574630253533:# + geom_text_repel(aes(label = genus), size = 3)
1574630253534:+ facet_wrap(. ~ Depth, scales='free', labeller = labeller(Depth = depthLabels))
1574630253535:+ theme_classic2()
1574630253536:+ publicationTheme()
1574630253536:+ labs(title = titleLabel,
1574630253537:subtitle = subtitleLabel,
1574630253538:x = "Observed (Shannon index)",
1574630253539:y = "Predicted (Shannon index)"
1574630253539:)
1574630253540:+ theme(legend.background = element_blank()
1574630253550:, legend.box.background = element_rect(colour = axisColor)
1574630253551:, legend.box.spacing = unit(20, "mm")
1574630253555:, panel.background = element_blank()
1574630253556:, panel.grid.major = element_blank()
1574630253559:, panel.grid.minor = element_blank()
1574630253560:, panel.spacing    = unit(8, "mm")
1574630253563:, title = element_text(hjust = 0.5)
1574630253565:, strip.background = element_blank()
1574630253567:, strip.text.x     = element_text(size = baseTextSize,
1574630253570:margin = margin(6,0,2,0, "mm"))
1574630253571:)
1574630253575:)
1574630253576:outFilename <- paste(prefix, rank, ksize, "shannon_index.pdf", sep = ".")
1574630253577:ggsave(filename = outFilename, plot = p, width = 12, height = 10)
1574630253580:}
1574630253582:}
1574630263936:(sp <- ggplot(dataToPlot, aes(x = Observed, y = Predicted))
1574630263938:+ geom_point(aes(fill = Sample),
1574630263939:shape = 21
1574630263939:, size = 3, stroke = 0.6)
1574630263940:+ geom_smooth(method = lm
1574630263940:, level = 0.95, color = "#333333", size = 0.8
1574630263941:, se=FALSE
1574630263942:)
1574630263942:# + stat_cor(label.x = 3, label.y = 18)
1574630263943:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574630263943:# , label.x = 1
1574630263944:# , label.y = 21
1574630263945:# , label.y = max(dataToPlot$) -1
1574630263945:)
1574630263946:# + scale_fill_hue(l=45)
1574630263951:+ scale_fill_manual(values = customPal)#, name = "")
1574630263952:# + stat_regline_equation(label.x = 3, label.y = 16)
1574630263953:# + geom_text_repel(aes(label = genus), size = 3)
1574630263953:+ facet_wrap(. ~ Depth, scales='free', labeller = labeller(Depth = depthLabels))
1574630263954:+ theme_classic2()
1574630263955:+ publicationTheme()
1574630263955:+ labs(title = titleLabel,
1574630263956:subtitle = subtitleLabel,
1574630263970:x = "Observed (Shannon index)",
1574630263971:y = "Predicted (Shannon index)"
1574630263971:)
1574630263972:+ theme(legend.background = element_blank()
1574630263973:, legend.box.background = element_rect(colour = axisColor)
1574630263974:, legend.box.spacing = unit(20, "mm")
1574630263974:, panel.background = element_blank()
1574630263975:, panel.grid.major = element_blank()
1574630263976:, panel.grid.minor = element_blank()
1574630263977:, panel.spacing    = unit(8, "mm")
1574630263977:, title = element_text(hjust = 0.5)
1574630263978:, strip.background = element_blank()
1574630263979:, strip.text.x     = element_text(size = baseTextSize,
1574630263980:margin = margin(6,0,2,0, "mm"))
1574630263981:)
1574630263987:)
1574630285675:prefix
1574630290903:outFilename
1574630303429:for (rank in ranks){
1574630303430:for (ksize in kList){
1574630303430:# selK <- 30
1574630303431:# rank <- "genus"
1574630303432:(dataToPlot <- shannonTable %>%
1574630303432:filter(k == ksize,
1574630303433:Rank == rank) %>%
1574630303433:pivot_wider(names_from = Type, values_from = Shannon) %>%
1574630303434:mutate(Depth = factor(Depth, levels = depths))
1574630303434:)
1574630303435:palette   <- colorRampPalette(pal_d3()(9))
1574630303436:nSamples  <- length(samples)
1574630303437:customPal <- palette(nSamples)
1574630303439:customPal <- pal_d3(palette = "category20")(nSamples)
1574630303446:show_col(rev(customPal))
1574630303448:titleLabel = paste("Shannon Index")
1574630303449:subtitleLabel = bquote(.(str_to_sentence(rank))~"|" ~ italic("k")~"="~.(ksize))
1574630303450:(sp <- ggplot(dataToPlot, aes(x = Observed, y = Predicted))
1574630303451:+ geom_point(aes(fill = Sample),
1574630303451:shape = 21
1574630303452:, size = 3, stroke = 0.6)
1574630303453:+ geom_smooth(method = lm
1574630303453:, level = 0.95, color = "#333333", size = 0.8
1574630303454:, se=FALSE
1574630303455:)
1574630303455:# + stat_cor(label.x = 3, label.y = 18)
1574630303459:+ stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))
1574630303461:# , label.x = 1
1574630303461:# , label.y = 21
1574630303462:# , label.y = max(dataToPlot$) -1
1574630303463:)
1574630303464:# + scale_fill_hue(l=45)
1574630303465:+ scale_fill_manual(values = customPal)#, name = "")
1574630303466:# + stat_regline_equation(label.x = 3, label.y = 16)
1574630303466:# + geom_text_repel(aes(label = genus), size = 3)
1574630303467:+ facet_wrap(. ~ Depth, scales='free', labeller = labeller(Depth = depthLabels))
1574630303468:+ theme_classic2()
1574630303469:+ publicationTheme()
1574630303469:+ labs(title = titleLabel,
1574630303470:subtitle = subtitleLabel,
1574630303471:x = "Observed (Shannon index)",
1574630303472:y = "Predicted (Shannon index)"
1574630303472:)
1574630303475:+ theme(legend.background = element_blank()
1574630303476:, legend.box.background = element_rect(colour = axisColor)
1574630303477:, legend.box.spacing = unit(20, "mm")
1574630303478:, panel.background = element_blank()
1574630303478:, panel.grid.major = element_blank()
1574630303479:, panel.grid.minor = element_blank()
1574630303480:, panel.spacing    = unit(8, "mm")
1574630303481:, title = element_text(hjust = 0.5)
1574630303482:, strip.background = element_blank()
1574630303483:, strip.text.x     = element_text(size = baseTextSize,
1574630303484:margin = margin(6,0,2,0, "mm"))
1574630303488:)
1574630303489:)
1574630303490:outFilename <- paste(prefix, rank, ksize, "shannon_index.pdf", sep = ".")
1574630303492:ggsave(filename = outFilename, plot = sp, width = 12, height = 10)
1574630303493:}
1574630303494:}
1577672916878:personal.lib.path <- Sys.getenv("R_LIBS_USER")
1577672916944:if(!file.exists(personal.lib.path))
1577672916970:dir.create(personal.lib.path)
1577672916998:printMessage <- function(message, verbose){
1577672916998:if(verbose)
1577672916998:cat(message)
1577672916999:}
1577672916999:# crayon::bold("Hola")
1577672917000:installAndLoadPackages <- function(pkg, verbose){
1577672917000:printMessage("Please wait a moment! Checking for the following required packages:\n", verbose)
1577672917001:lapply(pkg, function(x){printMessage(paste0(" ", x,"\n"), verbose)})
1577672917001:printMessage("Done!\n", verbose)
1577672917001:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1577672917002:if (length(new.pkg)) {
1577672917002:printMessage("Installing new packages... ", verbose)
1577672917002:install.packages(new.pkg, dependencies = TRUE,
1577672917002:repos="http://cran.rstudio.com/",
1577672917003:lib = personal.lib.path)
1577672917003:printMessage("Done!\n", verbose)
1577672917003:}
1577672917004:printMessage("Loading required packages... ", verbose)
1577672917004:sapply(pkg, function(x){
1577672917004:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1577672917005:})
1577672917005:printMessage("Done!\n", verbose)
1577672917005:}
1577672917006:# github.related.packages <- c("devtools", "Rcpp")
1577672917006:# packages <- c("argparser", "tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite")
1577672917007:packages <- c("tidyverse", "RColorBrewer", "ggsci", "stringr", "svglite", "gridExtra")
1577672917007:# installAndLoadPackages(packages, verbose = TRUE)
1577672917007:installAndLoadPackages("argparser", verbose = FALSE)
1579819181211:load("/home/hspitia/projects/classifier/results/classifier.shannon_table.RData")
1579819185052:View(shannonTable)
1579819231909:load("/home/hspitia/projects/classifier/temporal/classifier.shannon_table.RData")
1579819234653:View(shannonTable)
1579819234918:View(shannonTable)
1579819251113:load("/home/hspitia/projects/classifier/shannon_table.RData")
1579819253829:View(shannonTable)
1579819254017:View(shannonTable)
1590344124641:library(tidyverse)
1590344140072:install.packages("tidyverse")
1590419011675:nFailed <- nrow(inData)
1590419012029:percToRemove <- 93
1590419015034:floor(nFailed*percToRemove/100)
1590419018005:nFailed <- nrow(inData)
1590419018209:percToRemove <- 93
1590419021348:floor(nFailed*percToRemove/100)
1590419026463:nFailed <- nrow(inData)
1590419030376:inData <- read.delim(inFile)
1590419046199:inData <- read.delim('failed.st.20.20.tsv')
1590419046278:nonNa <- inData[!is.na(inData$predicted), ]
1590419047571:seed(31415)
1590419071529:set.seed(31415)
1590419071530:nFailed <- nrow(inData)
1590419072642:percToRemove <- 93
1590419075604:nonNa <- inData[!is.na(inData$predicted), ]
1590419076006:set.seed(31415)
1590419076384:nFailed <- nrow(inData)
1590419076949:percToRemove <- 93
1590419081957:floor(nFailed*percToRemove/100)
1590419083890:sample(1:nFailed, size = floor(nFailed*percToRemove/100), replace = FALSE)
1590419137851:idxToRemove <- sample(1:nFailed, size = floor(nFailed*percToRemove/100), replace = FALSE)
1590419140528:idxToRemove
1590419176338:removed <- inData[idxToRemove, ]
1590419176351:removed
1590620418356:inData <- read.delim('failed.st.20.20.tsv')
1590620420659:nonNa <- inData[!is.na(inData$predicted), ]
1590620421544:set.seed(31415)
1590620434018:nFailed <- nrow(inData)
1590620452772:percToRemove <- 1
1590620546877:nToRemove <- 260
1590620549016:nFailed <- nrow(inData)
1590620551223:nToRemove <- 260
1590620579800:nToRemove <- 260
1590620589627:# idxToRemove <- sample(1:nFailed, size = floor(nFailed*percToRemove/100), replace = FALSE)
1590620589627:idxToRemove <- sample(1:nFailed, size = nToRemove, replace = FALSE)
1590620592666:removed <- inData[idxToRemove, ]
1590620595393:removed
1590620619571:nrow(removed)
1590620637781:unique(removed$accn)
1590620678143:cat(removed)
1590620685506:cat(removed$accn)
1590620759542:seq_along(c(4,6,2,8,5,213))
1590620770283:seq_along(c())
1590620819607:for (i in seq_along(nrow(removed))) {
1590620819607:cat(paste0(removed$accn[i], "\n"))
1590620819607:}
1590620823735:for (i in seq_along(nrow(removed))) {
1590620823736:cat(paste0(removed$accn[i], "\n"))
1590620823736:}
1590620839134:seq_along(nrow(removed))
1590620845369:removed <- inData[idxToRemove, ]
1590620851080:seq_along(nrow(removed))
1590620857126:nrow(removed)
1590620872952:seq_along(removed)
1590620945022:for (i in 0:nrow(removed)-1) {
1590620945023:cat(paste0(removed$accn[i+1], "\n"))
1590620945023:}
1590620959247:for (i in 0:0) {
1590620959247:cat(paste0(removed$accn[i+1], "\n"))
1590620959247:}
1590621308571:apply(removed, 1, function(x){
1590621308571:# cat(paste0(removed$accn[i+1], "\n"))
1590621308572:cat(paste0(x[1], "\n"))
1590621308572:})
1590621339873:print(removed$accn)
1590621428998:cat(removed$accn, sep = "\n")
1590621580148:# nToRemove <- 260
1590621580148:# idxToRemove <- sample(1:nFailed, size = floor(nFailed*percToRemove/100), replace = FALSE)
1590621580148:idxToRemove <- sample(1:nFailed, size = nToRemove, replace = FALSE)
1590621581241:removed <- inData[idxToRemove, ]
1590621582111:cat(removed[[1]], sep = "\n")
1590621983136:removed <- inData[idxToRemove, 1]
1590621989411:cat(removed, sep = "\n")
1590622019536:removed <- inData[idxToRemove, 1]
1590622027583:class(removed)
