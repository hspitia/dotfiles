1550626247678:channel_metadata, fn, app_scale=FALSE){
1550626247680:transformed_data <- bind_rows(
1550626247681:lapply(1:n_samples, function(sn) {
1550626247682:current_sample <- list(
1550626247683:lapply(1:n_tubes, function (tn){
1550626247683:filename <- metadata %>% filter(SampleNumber == sn, TubeNumber == tn) %>%
1550626247684:select(FCSFileName) %>% pull()
1550626247684:read_csv(sprintf("%s/%04d.CSV", data_dir, filename), col_types = cols(
1550626247685:`FS Lin` = col_double(),
1550626247691:`SS Log` = col_double(),
1550626247696:`FL1 Log` = col_double(),
1550626247697:`FL2 Log` = col_double(),
1550626247698:`FL3 Log` = col_double(),
1550626247700:`FL4 Log` = col_double(),
1550626247700:`FL5 Log` = col_double()
1550626247701:))
1550626247703:})
1550626247704:)
1550626247704:summarizeData(current_sample, fun = fn, ch_metadata = channel_metadata, scale = app_scale)
1550626247707:})
1550626247707:)
1550626247708:transformed_data$SampleNumber <- 1:n_samples
1550626247709:transformed_data
1550626247709:}
1550626247711:# Load data ---------------------------------------------------------------
1550626247712:r_data_file      <- "data/all_data.RData"
1550626247712:data_dir         <- "data/CSV"
1550626247713:metadata         <- read_csv("data/AMLTraining.csv.zip")
1550626247716:channel_metadata <- read_csv("data/channels_metadata.csv") %>%
1550626247717:gather(Channel, Name, -Tube)
1550626247723:labels <- metadata %>%
1550626247724:select(SampleNumber, Label) %>%
1550626247727:distinct() %>%
1550626247728:mutate(Label = as.numeric(ifelse(Label == "normal", 0,
1550626247728:ifelse(Label == "aml", 1, Label))))
1550626247732:testing_mode       <- FALSE # Turn off for working with the whole dataset
1550626247733:n_samples          <- ifelse(testing_mode, 2, length(unique(metadata$SampleNumber)))
1550626247734:n_tubes_per_sample <- ifelse(testing_mode, 1, length(unique(metadata$TubeNumber)))
1550626247735:# # Load the whole dataset (Warning: RAM overload!)
1550626247735:# if (!file.exists(r_data_file)) {
1550626247736:#   # Read the dataset
1550626247736:#   all_tube_data <- lapply(1:n_samples, function(sn) {
1550626247737:#     lapply(1:n_tubes_per_sample, function (tn){
1550626247737:#       filename <- metadata %>% filter(SampleNumber == sn, TubeNumber == tn) %>%
1550626247737:#         select(FCSFileName) %>% pull()
1550626247738:#       read_csv(sprintf("%s/%04d.CSV", data_dir, filename))
1550626247739:#     })
1550626247739:#   })
1550626247740:#   names(all_tube_data) <- as.character(1:n_samples)
1550626247740:#   save(all_tube_data, file = r_data_file,
1550626247740:#        compress = "bzip2", compression_level = 9)
1550626247740:# } else {
1550626247741:#   load(file = r_data_file, verbose = TRUE)
1550626247741:# }
1550626247742:# names(all_tube_data) <- as.character(1:n_samples)
1550626247743:# # Transform the whole data set
1550626247743:# (final_data <- summarizeData(all_tube_data, channel_metadata, sd))
1550626247745:# (classes    <- labels$Label[final_data$SampleNumber])
1550626247746:# Load and transform each sample ----------------------------------------
1550626247746:# Load and transform each sample ----------------------------------------
1550626247747:final_data_r_file  <- "early_term_project/data/final_data.RData"
1550626247748:if (!file.exists(final_data_r_file)) {
1550626247748:functions     <- list("sd" = sd, "mean" = mean, "median" = median)
1550626247748:apply_scale   <- FALSE
1550626247749:unscaled_data <- lapply(functions,
1550626247749:function(f, meta=metadata, ns=n_samples,
1550626247750:nt=n_tubes_per_sample, d_dir=data_dir,
1550626247750:ch_meta=channel_metadata, sca=apply_scale){
1550626247751:loadAndTransformData(meta, ns, nt, d_dir, ch_meta, f, sca)
1550626247752:})
1550626247752:scaled_data <- lapply(list("prescaled_median" = median),
1550626247753:function(f, meta=metadata, ns=n_samples,
1550626247754:nt=n_tubes_per_sample, d_dir=data_dir,
1550626247754:ch_meta=channel_metadata, sca=TRUE){
1550626247755:loadAndTransformData(meta, ns, nt, d_dir, ch_meta, f, sca)
1550626247756:})
1550626247757:final_data <- c(unscaled_data, scaled_data)
1550626247758:final_data$sd_postscaled <- as_tibble(scale(final_data$sd[,-1])) %>%
1550626247759:mutate(SampleNumber = final_data$sd$SampleNumber) %>%
1550626247760:select(SampleNumber, everything())
1550626247763:final_data$mean_postscaled <- as_tibble(scale(final_data$mean[,-1])) %>%
1550626247764:mutate(SampleNumber = final_data$mean$SampleNumber) %>%
1550626247766:select(SampleNumber, everything())
1550626247767:final_data$median_postscaled <- as_tibble(scale(final_data$median[,-1])) %>%
1550626247768:mutate(SampleNumber = final_data$median$SampleNumber) %>%
1550626247769:select(SampleNumber, everything())
1550626247770:save(final_data, file = final_data_r_file,
1550626247771:compress = "bzip2", compression_level = 9)
1550626247773:} else {
1550626247774:load(file = final_data_r_file, verbose = TRUE)
1550626247774:}
1550626251931:# Attempt to classify -----------------------------------------------------
1550626251932:# (optClust_result <- optCluster(as.data.frame(final_data$mean),nClust = 2, countData = F,
1550626251932:#                                # validation = "internal",
1550626251933:#                                clVerbose = T))
1550626251933:# Attempt to classify -----------------------------------------------------
1550626251934:n_training_samples <- 179
1550626252419:training_samples   <- 1:n_training_samples
1550626253402:training_data      <- final_data$sd[training_samples,-1]
1550626254110:training_labels    <- labels$Label[training_samples]
1550626268810:labels
1550626273441:#!/usr/bin/env Rscript
1550626273441:# ##############################################################################
1550626273441:#  Author:   Shashwat Deepali Nagar
1550626273442:#            Hector Fabio Espitia-Navarro
1550626273442:#            Georgia Institute of Technology
1550626273443:#  Version:  0.1
1550626273443:#  Date:     02/09/2019
1550626273443:# ##############################################################################
1550626273444:# Packages ----------------------------------------------------------------
1550626273444:# Function to install and load packages
1550626273445:installAndLoadPackages <- function(pkg){
1550626273445:new_pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1550626273446:if (length(new_pkg))
1550626273446:install.packages(new_pkg, repos="http://cran.rstudio.com/",
1550626273446:dependencies = TRUE, lib = personal_lib_path)
1550626273447:sapply(pkg, function(x){ require(x, character.only = TRUE, quietly = FALSE) })
1550626273447:# suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = F))
1550626273448:}
1550626273448:personal_lib_path <- Sys.getenv("R_LIBS_USER")
1550626273449:if(!file.exists(personal_lib_path))
1550626273449:dir.create(personal_lib_path)
1550626273450:packages <- c("caret", "tidyverse", "magrittr", "corrplot", "optCluster") # All required packages in here!
1550626273451:installAndLoadPackages(packages)
1550626273456:# Functions for data transformation ---------------------------------------
1550626273457:#' Summarize the whole dataset.
1550626273457:#'
1550626273457:#' \code{summarizeData} summarize the data of all tubes from each sample and
1550626273457:#' returns tibble in which each row is a sample and each column is a value that
1550626273458:#' summarize the values meassured for all cells in a channel, using a function
1550626273458:#' specified by \code{fun}.
1550626273458:#'
1550626273459:#' @param data A list of samples. Each element is a list of tubes. Each tube is
1550626273459:#' a tibble that contains the different cell features measured on each
1550626273459:#' channel. Rows are cells, columns are features.
1550626273459:#' @param ch_metadata Tibble with the name of each measured feature for each
1550626273460:#' channel on each tube.
1550626273460:#' @param fun Function for summarizing each feature (channel)
1550626273460:#'
1550626273460:summarizeData <- function(data, ch_metadata, fun, scale = TRUE) {
1550626273461:n_sam <- length(data)
1550626273461:n_tub <- length(data[[1]])
1550626273461:bind_rows(
1550626273462:lapply(1:n_sam, function(sample, fn=fun){
1550626273462:features <- lapply(1:n_tub, function(tube, sam=sample, f=fn){
1550626273462:if (scale){
1550626273462:summarized_tube <- data[[sam]][[tube]] %>%
1550626273463:scale() %>% as.tibble() %>%
1550626273463:summarise_all(f)
1550626273463:} else {
1550626273464:summarized_tube <- data[[sam]][[tube]] %>%
1550626273464:summarise_all(f)
1550626273464:}
1550626273465:names(summarized_tube) <- ch_metadata %>%
1550626273465:filter(Tube == tube) %>% select(Name) %>% pull()
1550626273466:summarized_tube
1550626273466:})
1550626273466:bind_cols(features) %>%
1550626273467:mutate(SampleNumber = sample) %>%
1550626273467:select(SampleNumber, everything())
1550626273468:})
1550626273468:)
1550626273469:}
1550626273470:# Function for loading and transforming one sample at a time to avoid RAM overload
1550626273470:loadAndTransformData <- function(metadata, n_samples, n_tubes, data_dir,
1550626273471:channel_metadata, fn, app_scale=FALSE){
1550626273471:transformed_data <- bind_rows(
1550626273471:lapply(1:n_samples, function(sn) {
1550626273472:current_sample <- list(
1550626273472:lapply(1:n_tubes, function (tn){
1550626273472:filename <- metadata %>% filter(SampleNumber == sn, TubeNumber == tn) %>%
1550626273473:select(FCSFileName) %>% pull()
1550626273473:read_csv(sprintf("%s/%04d.CSV", data_dir, filename), col_types = cols(
1550626273473:`FS Lin` = col_double(),
1550626273474:`SS Log` = col_double(),
1550626273474:`FL1 Log` = col_double(),
1550626273474:`FL2 Log` = col_double(),
1550626273475:`FL3 Log` = col_double(),
1550626273476:`FL4 Log` = col_double(),
1550626273477:`FL5 Log` = col_double()
1550626273478:))
1550626273479:})
1550626273479:)
1550626273480:summarizeData(current_sample, fun = fn, ch_metadata = channel_metadata, scale = app_scale)
1550626273481:})
1550626273481:)
1550626273482:transformed_data$SampleNumber <- 1:n_samples
1550626273483:transformed_data
1550626273484:}
1550626273485:# Load data ---------------------------------------------------------------
1550626273486:r_data_file      <- "data/all_data.RData"
1550626273487:data_dir         <- "data/CSV"
1550626273487:metadata         <- read_csv("data/AMLTraining.csv.zip")
1550626273491:channel_metadata <- read_csv("data/channels_metadata.csv") %>%
1550626273491:gather(Channel, Name, -Tube)
1550626288921:#!/usr/bin/env Rscript
1550626288922:# ##############################################################################
1550626288922:#  Author:   Shashwat Deepali Nagar
1550626288923:#            Hector Fabio Espitia-Navarro
1550626288923:#            Georgia Institute of Technology
1550626288924:#  Version:  0.1
1550626288924:#  Date:     02/09/2019
1550626288924:# ##############################################################################
1550626288925:# Packages ----------------------------------------------------------------
1550626288926:# Function to install and load packages
1550626288927:installAndLoadPackages <- function(pkg){
1550626288927:new_pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1550626288928:if (length(new_pkg))
1550626288928:install.packages(new_pkg, repos="http://cran.rstudio.com/",
1550626288929:dependencies = TRUE, lib = personal_lib_path)
1550626288929:sapply(pkg, function(x){ require(x, character.only = TRUE, quietly = FALSE) })
1550626288930:# suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = F))
1550626288930:}
1550626288932:personal_lib_path <- Sys.getenv("R_LIBS_USER")
1550626288933:if(!file.exists(personal_lib_path))
1550626288934:dir.create(personal_lib_path)
1550626288936:packages <- c("caret", "tidyverse", "magrittr", "corrplot", "optCluster") # All required packages in here!
1550626288937:installAndLoadPackages(packages)
1550626288944:# Functions for data transformation ---------------------------------------
1550626288945:#' Summarize the whole dataset.
1550626288946:#'
1550626288946:#' \code{summarizeData} summarize the data of all tubes from each sample and
1550626288947:#' returns tibble in which each row is a sample and each column is a value that
1550626288947:#' summarize the values meassured for all cells in a channel, using a function
1550626288948:#' specified by \code{fun}.
1550626288948:#'
1550626288948:#' @param data A list of samples. Each element is a list of tubes. Each tube is
1550626288949:#' a tibble that contains the different cell features measured on each
1550626288949:#' channel. Rows are cells, columns are features.
1550626288950:#' @param ch_metadata Tibble with the name of each measured feature for each
1550626288950:#' channel on each tube.
1550626288951:#' @param fun Function for summarizing each feature (channel)
1550626288951:#'
1550626288952:summarizeData <- function(data, ch_metadata, fun, scale = TRUE) {
1550626288952:n_sam <- length(data)
1550626288953:n_tub <- length(data[[1]])
1550626288953:bind_rows(
1550626288954:lapply(1:n_sam, function(sample, fn=fun){
1550626288954:features <- lapply(1:n_tub, function(tube, sam=sample, f=fn){
1550626288955:if (scale){
1550626288955:summarized_tube <- data[[sam]][[tube]] %>%
1550626288975:scale() %>% as.tibble() %>%
1550626288975:summarise_all(f)
1550626288976:} else {
1550626288977:summarized_tube <- data[[sam]][[tube]] %>%
1550626288978:summarise_all(f)
1550626288978:}
1550626288979:names(summarized_tube) <- ch_metadata %>%
1550626288980:filter(Tube == tube) %>% select(Name) %>% pull()
1550626288980:summarized_tube
1550626288981:})
1550626288982:bind_cols(features) %>%
1550626288982:mutate(SampleNumber = sample) %>%
1550626288983:select(SampleNumber, everything())
1550626288984:})
1550626288984:)
1550626288985:}
1550626288996:# Function for loading and transforming one sample at a time to avoid RAM overload
1550626288997:loadAndTransformData <- function(metadata, n_samples, n_tubes, data_dir,
1550626288998:channel_metadata, fn, app_scale=FALSE){
1550626288998:transformed_data <- bind_rows(
1550626288999:lapply(1:n_samples, function(sn) {
1550626289000:current_sample <- list(
1550626289000:lapply(1:n_tubes, function (tn){
1550626289001:filename <- metadata %>% filter(SampleNumber == sn, TubeNumber == tn) %>%
1550626289002:select(FCSFileName) %>% pull()
1550626289002:read_csv(sprintf("%s/%04d.CSV", data_dir, filename), col_types = cols(
1550626289003:`FS Lin` = col_double(),
1550626289004:`SS Log` = col_double(),
1550626289004:`FL1 Log` = col_double(),
1550626289005:`FL2 Log` = col_double(),
1550626289017:`FL3 Log` = col_double(),
1550626289018:`FL4 Log` = col_double(),
1550626289020:`FL5 Log` = col_double()
1550626289021:))
1550626289021:})
1550626289022:)
1550626289023:summarizeData(current_sample, fun = fn, ch_metadata = channel_metadata, scale = app_scale)
1550626289023:})
1550626289024:)
1550626289025:transformed_data$SampleNumber <- 1:n_samples
1550626289026:transformed_data
1550626289026:}
1550626289029:# Load data ---------------------------------------------------------------
1550626289039:r_data_file      <- "early_term_project/data/all_data.RData"
1550626289042:data_dir         <- "early_term_project/data/CSV"
1550626289043:metadata         <- read_csv("early_term_project/data/AMLTraining.csv.zip")
1550626289559:channel_metadata <- read_csv("early_term_project/data/channels_metadata.csv") %>%
1550626289559:gather(Channel, Name, -Tube)
1550626289795:labels <- metadata %>%
1550626289796:select(SampleNumber, Label) %>%
1550626289797:distinct() %>%
1550626289797:mutate(Label = as.numeric(ifelse(Label == "normal", 0,
1550626289798:ifelse(Label == "aml", 1, Label))))
1550626289809:testing_mode       <- FALSE # Turn off for working with the whole dataset
1550626289810:n_samples          <- ifelse(testing_mode, 2, length(unique(metadata$SampleNumber)))
1550626289811:n_tubes_per_sample <- ifelse(testing_mode, 1, length(unique(metadata$TubeNumber)))
1550626294939:# Attempt to classify -----------------------------------------------------
1550626294939:# (optClust_result <- optCluster(as.data.frame(final_data$mean),nClust = 2, countData = F,
1550626294941:#                                # validation = "internal",
1550626294941:#                                clVerbose = T))
1550626294941:# Attempt to classify -----------------------------------------------------
1550626294942:n_training_samples <- 179
1550626295107:training_samples   <- 1:n_training_samples
1550626295386:training_data      <- final_data$sd[training_samples,-1]
1550626295806:training_labels    <- labels$Label[training_samples]
1550626298230:training_labels
1550626300969:training_data
1550626310071:training_samples
1550626397282:createDataPartition(y = training_labels, p = 0.6, list = FALSE)
1550626442211:training_labels
1550626444329:split <- createDataPartition(y = training_labels, p = 0.6, list = FALSE)
1550626446180:split
1550626507674:source('~/projects/mlbiosci/early_term_project/scripts/01.analysis.R')
1550626517461:training_set <- training_data[split,-`Sample Number`]
1550626523145:training_data
1550626541276:training_set <- training_data[split, ]
1550626542971:training_set
1550626576933:validation_set <- training_data[-split, ]
1550626578094:validation_set
1550626644170:training_data$Class <- training_labels
1550626645995:training_data
1550626656681:training_set   <- training_data[split, ]
1550626657147:validation_set <- training_data[-split, ]
1550626680531:split <- createDataPartition(y = training_data$Class, p = 0.6, list = FALSE)
1550626681279:training_set   <- training_data[split, ]
1550626682886:validation_set <- training_data[-split, ]
1550626683984:lmFit <- train(Class~., data = training_set, method = “lm”)
1550626696181:lmFit <- train(Class~., data = training_set, method = "lm")
