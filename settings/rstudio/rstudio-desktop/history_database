1530236684437:# select(Id, Accn, GeneTag, Organism, GeneName, BlastPresence, DetectorPresence, GeneCov, SeqDepth)#, pident, qcovhsp, GeneCov, SeqDepth)
1530236684439:)
1530236720389:res20xTmp %>%
1530236720390:filter(BlastPresence == 1, DetectorPresence == 1) %>%
1530236720390:group_by(SeqDepth) %>%
1530236720391:summarise(TP = n())
1530236772825:resTmp %>%
1530236772826:filter(BlastPresence == 1, DetectorPresence == 1) %>% # TP
1530236772827:group_by(SeqDepth) %>%
1530236772827:summarise(TP = n())
1530236777557:# ===========================================================================
1530236777558:(resTmp <- resultsData %>%
1530236777558:filter(SampleType == "positive") %>% #,
1530236777558:# SeqDepth == 20) %>%
1530236777559:left_join(blastData, by = c("Accn" = "sseqid", "GeneTag" = "qseqid")) %>%
1530236777559:mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1, 0)) %>%
1530236777559:select(Accn, GeneTag, Organism, GeneName, BlastPresence,
1530236777560:DetectorPresence, BlastIdentity = pident,
1530236777560:BlastQCov = qcovhsp, GeneCov, SeqDepth)
1530236777561:# select(Id, Accn, GeneTag, Organism, GeneName, BlastPresence, DetectorPresence, GeneCov, SeqDepth)#, pident, qcovhsp, GeneCov, SeqDepth)
1530236777561:)
1530236779334:resTmp %>%
1530236779334:filter(BlastPresence == 1, DetectorPresence == 1) %>% # TP
1530236779335:group_by(SeqDepth) %>%
1530236779335:summarise(TP = n())
1530236780694:resTmp %>%
1530236780695:filter(BlastPresence == 0, DetectorPresence == 1) %>% # FP
1530236780695:group_by(SeqDepth) %>%
1530236780695:summarise(FP = n())
1530236869532:resTmp %>%
1530236869533:filter(BlastPresence == 0, DetectorPresence == 0) %>% # TN
1530236869533:group_by(SeqDepth) %>%
1530236869534:summarise(TN = n())
1530236914451:resTmp %>%
1530236914451:filter(BlastPresence == 1, DetectorPresence == 0) %>% # FN
1530236914452:group_by(SeqDepth) %>%
1530236914453:summarise(FN = n())
1530236930121:library(caret)
1530236930895:confusionMatrix(factor(resTmp %>% filter(SeqDepth == 20) %>% pull(DetectorPresence)),
1530236930896:factor(resTmp %>% filter(SeqDepth == 20) %>% pull(BlastPresence)),
1530236930897:positive = "1")
1530237141979:confusionMatrix(factor(resTmp %>% filter(SeqDepth == 40) %>% pull(DetectorPresence)),
1530237141980:factor(resTmp %>% filter(SeqDepth == 40) %>% pull(BlastPresence)),
1530237141981:positive = "1")
1530238080122:# ===========================================================================
1530238080122:(resTmp <- resultsData %>%
1530238080123:filter(SampleType == "positive") %>% #,
1530238080123:SeqDepth == 20) %>%
1530238080124:left_join(blastData, by = c("Accn" = "sseqid", "GeneTag" = "qseqid")) %>%
1530238080125:mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1, 0)) %>%
1530238080125:select(Accn, GeneTag, Organism, GeneName, BlastPresence,
1530238080126:DetectorPresence, BlastIdentity = pident,
1530238080126:BlastQCov = qcovhsp, GeneCov, SeqDepth)
1530238097448:# ===========================================================================
1530238097448:(resTmp <- resultsData %>%
1530238097449:filter(SampleType == "positive",#) %>%
1530238097449:SeqDepth == 20) %>%
1530238097449:left_join(blastData, by = c("Accn" = "sseqid", "GeneTag" = "qseqid")) %>%
1530238097450:mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1, 0)) %>%
1530238097450:select(Accn, GeneTag, Organism, GeneName, BlastPresence,
1530238097450:DetectorPresence, BlastIdentity = pident,
1530238097451:BlastQCov = qcovhsp, GeneCov, SeqDepth)
1530238097451:# select(Id, Accn, GeneTag, Organism, GeneName, BlastPresence, DetectorPresence, GeneCov, SeqDepth)#, pident, qcovhsp, GeneCov, SeqDepth)
1530238097452:)
1530238104594:confusionMatrix(factor(resTmp %>% filter(SeqDepth == 20) %>% pull(DetectorPresence)),
1530238104594:factor(resTmp %>% filter(SeqDepth == 20) %>% pull(BlastPresence)),
1530238104595:positive = "1")
1530238110475:resTmp
1530238114814:# ===========================================================================
1530238114815:(resTmp <- resultsData %>%
1530238114816:filter(SampleType == "positive",#) %>%
1530238114816:SeqDepth == 40) %>%
1530238114817:left_join(blastData, by = c("Accn" = "sseqid", "GeneTag" = "qseqid")) %>%
1530238114817:mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1, 0)) %>%
1530238114818:select(Accn, GeneTag, Organism, GeneName, BlastPresence,
1530238114819:DetectorPresence, BlastIdentity = pident,
1530238114819:BlastQCov = qcovhsp, GeneCov, SeqDepth)
1530238114820:# select(Id, Accn, GeneTag, Organism, GeneName, BlastPresence, DetectorPresence, GeneCov, SeqDepth)#, pident, qcovhsp, GeneCov, SeqDepth)
1530238114821:)
1530462836437:#!/usr/bin/env Rscript
1530462836483:################################################################################
1530462836483:# Author:      Hector Fabio Espitia Navarro
1530462836483:#              Georgia Institute of Technology
1530462836484:# Version:     1.0
1530462836484:# Date:
1530462836484:# Description:
1530462836485:################################################################################
1530462836485:# Install required packages
1530462836485:# personal.lib.path <- Sys.getenv("R_LIBS_USER")
1530462836486:# if(!file.exists(personal.lib.path))
1530462836486:#   dir.create(personal.lib.path)
1530462836486:installAndLoadPackages <- function(pkg){
1530462836487:cat("Please wait a moment! Checking for required packages... ")
1530462836487:cat("Done!\n")
1530462836488:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1530462836488:if (length(new.pkg)) {
1530462836488:cat("Installing new packages... ")
1530462836489:install.packages(new.pkg, dependencies = TRUE,
1530462836489:repos="http://cran.rstudio.com/") #,
1530462836489:# lib = personal.lib.path)
1530462836490:cat("Done!\n")
1530462836490:}
1530462836491:cat("Loading required packages... ")
1530462836491:sapply(pkg, function(x){
1530462836491:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1530462836492:})
1530462836492:cat("Done!\n")
1530462836492:}
1530462836493:# github.packages <- c("tibble")
1530462836494:# packages <- c("argparser", "tidyverse", "RColorBrewer")#, "ggplot2",  "tidyr")
1530462836495:packages <- c("argparser", "dplyr", "ggplot2", "RColorBrewer", "readr", "tidyr", "caret")#, "ggplot2",  "tidyr")
1530462836495:installAndLoadPackages(packages)
1530462845561:################################################################################
1530462845561:# Get script name
1530462845561:initial.options <- commandArgs(trailingOnly = FALSE)
1530462845562:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1530462845563:# Process command line arguments
1530462845563:# Create a parser
1530462845563:p <- arg_parser("This script process results from STing detector",
1530462845564:name = script.name)
1530462845620:# Add Positional arguments (required inputs)
1530462845620:p <- add_argument(p, "blast_file", help = "BLAST results file")
1530462845621:p <- add_argument(p, "results_file", help = "Detector results file (tidy format)")
1530462845622:p <- add_argument(p, "genes_ref_file", help = "Genes ref file (short: tag and name)")
1530462845623:p <- add_argument(p, "genes_full_ref_file", help = "Genes full ref file (short: tag, name adn others)")
1530462845624:p <- add_argument(p, "genomes_ref_file", help = "Genomes ref file (short: Accn and Orgnism name)")
1530462845625:# Add options
1530462845626:p <- add_argument(p, "--cutoff", help = "dentity and Coverage cutoff value",
1530462845626:default = 80)
1530462845627:# # Parse command line arguments
1530462845628:# argv <- parse_args(p)
1530462845628:# Initialization of variables
1530462845629:# Values to test the script using RStudio
1530462845629:# testDir          <- "test_07_card"
1530462845629:# testDir          <- "test_08_card"
1530462845629:# testDir           <- "test_09_card"
1530462845630:testDir           <- "test_10_card"
1530462845630:blastFile         <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/card_vs_positive.blast.presence.tsv")
1530462845631:resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/detector.tsv")
1530462845631:# resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/results.tsv")
1530462845632:genesRefFile      <- "detector/card/prioritary_who_set/final_set/tags_names_xRef.tsv"
1530462845632:genesFullRefFile  <- "detector/card/prioritary_who_set/final_set/card_tags_xRef.tsv"
1530462845633:genomesRefFile    <- "detector/card/prioritary_who_set/final_set/genomesTableRef.tsv"
1530462845634:cutoff            <- 100
1530462845634:# Parse command line arguments
1530462845635:command.line = FALSE   # Turn to FALSE to test the script inside RStudio
1530462845635:argv <- list()
1530462845636:if(command.line) {
1530462845636:argv <- parse_args(p)
1530462845636:} else {
1530462845637:argv <- parse_args(p, list(blastFile, resultsFile, genesRefFile, genesFullRefFile, genomesRefFile,
1530462845637:"--cutoff", cutoff))
1530462845637:}
1530462845641:# Get argument values from command line
1530462845642:blastFile         <- argv$blast_file
1530462845643:resultsFile       <- argv$results_file
1530462845643:genesRefFile      <- argv$genes_ref_file
1530462845644:genesFullRefFile  <- argv$genes_full_ref_file
1530462845644:genomesRefFile    <- argv$genomes_ref_file
1530462845645:cutoff            <- argv$cutoff
1530462845646:# Function for checking input files ###########################################
1530462845646:CheckFileExists <- function(file.list) {
1530462845647:non.exist.files <- !file.exists(file.list)
1530462845647:if(any(non.exist.files)) {
1530462845648:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1530462845648:}
1530462845648:}
1530462845649:# Check for input files #######################################################
1530462845649:files.to.check <- c(blastFile, resultsFile, genesRefFile, genesFullRefFile, genomesRefFile)
1530462845650:error.message  <- CheckFileExists(files.to.check)
1530462845651:# if(!is.null(error.message)){
1530462845651:# stop(error.message)
1530462845652:# } else {
1530462845653:# Data --------------------------------------------------------------------
1530462845653:# Load data files
1530462845654:blastData    <- read_tsv(blastFile)
1530462846349:resultsData  <- read_tsv(resultsFile)
1530462846730:genesRef     <- read_tsv(genesRefFile, col_names = c("GeneTag", "GeneName"))
1530462846765:genesFullRef <- read_tsv(genesFullRefFile, col_names = c("GeneTag", "CARD_description"))
1530462846783:genomesRef   <- read_tsv(genomesRefFile)
1530462846788:# Process results ---------------------------------------------------------
1530462846788:cat(paste("Test directory:            ", testDir))
1530462846789:cat(paste("Identity & Coverage cutoff:", cutoff))
1530462846790:# Get the AMR genes present in the genome set
1530462846790:(blastFilteredResults <- blastData %>%
1530462846791:filter(pident >= cutoff, qcovhsp >= cutoff, presence == 1) %>% # test_07
1530462846791:# filter(pident >= 80, qcovhsp >= 80, presence == 1) %>% # test_08
1530462846791:left_join(genomesRef, by = c("sseqid" = "Accn")) %>%
1530462846791:left_join(genesRef, by = c("qseqid" = "GeneTag")) %>%
1530462846792:select(Accn = sseqid, Organism = ScientificName,
1530462846792:GeneTag = qseqid, GeneName, BlastPresence = presence))
1530462847791:(amrGenes <- blastFilteredResults %>%
1530462847791:select(GeneTag, GeneName) %>%
1530462847791:unique())
1530462847924:(genomes <- blastFilteredResults %>%
1530462847924:select(Accn, Organism) %>%
1530462847925:unique())
1530462847951:# Save genes and genomes for tables - Begin --------------------------------
1530462847951:# (genomesTable <- blastFilteredResults %>%
1530462847951:#    select(Accn, Organism) %>%
1530462847952:#    unique() %>%
1530462847952:#    left_join(genomesRef, by = c("Accn" = "Accn")) %>%
1530462847952:#    select(Accn, Organism = Organism.x, Description = SeqTitle) %>%
1530462847953:#    arrange(Organism)
1530462847953:# )
1530462847953:# write_tsv(genomesTable, paste0("detector/card/prioritary_who_set/final_set/",testDir,"/genomes.tsv"))
1530462847954:#
1530462847954:# (genesTable <- blastFilteredResults %>%
1530462847954:#     select(GeneTag, GeneName) %>%
1530462847955:#     unique() %>%
1530462847955:#     left_join(genesRef) %>%
1530462847955:#     left_join(genesFullRef) %>%
1530462847955:#     arrange(GeneName)
1530462847956:# )
1530462847956:# write_tsv(genesTable, paste0("detector/card/prioritary_who_set/final_set/",testDir,"/genes.tsv"))
1530462847956:# Save genes and genomes for tables - End ----------------------------------
1530462847957:depths <- c(20,40)
1530462847957:sampletypes <- c("positive", "negative")
1530462847958:(resultsTable20x <- blastFilteredResults %>%
1530462847958:mutate(SeqDepth = 20L,
1530462847959:Id = paste(Accn, GeneTag, sep = "-")) %>%
1530462847959:select(Id,
1530462847959:Accn,
1530462847959:Organism,
1530462847960:GeneTag,
1530462847960:GeneName,
1530462847960:SeqDepth,
1530462847961:BlastPresence) #%>%
1530462847961:# unique()
1530462847961:)
1530462848070:# ===========================================================================
1530462848070:(resTmp <- resultsData %>%
1530462848071:filter(SampleType == "positive") %>%
1530462848071:# SeqDepth == 20) %>%
1530462848071:left_join(blastData, by = c("Accn" = "sseqid", "GeneTag" = "qseqid")) %>%
1530462848072:mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1, 0)) %>%
1530462848072:select(Accn, GeneTag, Organism, GeneName, BlastPresence,
1530462848072:DetectorPresence, BlastIdentity = pident,
1530462848073:BlastQCov = qcovhsp, GeneCov, SeqDepth)
1530462848073:# select(Id, Accn, GeneTag, Organism, GeneName, BlastPresence, DetectorPresence, GeneCov, SeqDepth)#, pident, qcovhsp, GeneCov, SeqDepth)
1530462848074:)
1530462848182:FP <- resTmp %>%
1530462848183:filter(BlastPresence == 0, DetectorPresence == 1, SeqDepth == 20) %>% # TP
1530462848183:group_by(SeqDepth) %>%
1530462848184:resTmp %>%
1530462848184:filter(BlastPresence == 1, DetectorPresence == 1) %>% # TP
1530462848184:group_by(SeqDepth) %>%
1530462848185:summarise(TP = n())
1530462848279:resTmp %>%
1530462848279:filter(BlastPresence == 0, DetectorPresence == 1) %>% # FP
1530462848280:group_by(SeqDepth) %>%
1530462848280:summarise(FP = n())
1530462848382:resTmp %>%
1530462848383:filter(BlastPresence == 0, DetectorPresence == 0) %>% # TN
1530462848383:group_by(SeqDepth) %>%
1530462848383:summarise(TN = n())
1530462848422:resTmp %>%
1530462848423:filter(BlastPresence == 1, DetectorPresence == 0) %>% # FN
1530462848423:group_by(SeqDepth) %>%
1530462848423:summarise(FN = n())
1530462848465:# library(caret)
1530462848465:#
1530462848465:# confusionMatrix(factor(resTmp %>% filter(SeqDepth == 20) %>% pull(DetectorPresence)),
1530462848466:#                 factor(resTmp %>% filter(SeqDepth == 20) %>% pull(BlastPresence)),
1530462848466:#                 positive = "1")
1530462848466:#
1530462848467:# confusionMatrix(factor(resTmp %>% filter(SeqDepth == 40) %>% pull(DetectorPresence)),
1530462848467:#                 factor(resTmp %>% filter(SeqDepth == 40) %>% pull(BlastPresence)),
1530462848467:#                 positive = "1")
1530462848468:# posResults <- data.frame()
1530462848468:#
1530462848468:# for (i in 1:nrow(blastFilteredResults)) {
1530462848468:#   gene   <- blastFilteredResults$GeneTag[i]
1530462848469:#   genome <- blastFilteredResults$Accn[i]
1530462848469:#   # queryRes <- resultsData %>%
1530462848469:#   row <- resultsData %>%
1530462848470:#     filter(SampleType == "positive",
1530462848470:#            GeneTag == gene,
1530462848470:#            Accn == genome,
1530462848470:#            SeqDepth == 20) #%>%
1530462848471:#   print(paste(genome, gene, nrow(row)))
1530462848471:#   # print(row)
1530462848471:#   # select(GeneTag, Accn, DetectorPresence)
1530462848472:#   posResults <- rbind(posResults, row)
1530462848472:# }
1530462848472:# posResults
1530462848473:# (tmp <- resultsTable20x %>%
1530462848473:#     left_join(resultsData %>%
1530462848473:#                 filter(SampleType == "positive",
1530462848474:#                        SeqDepth == 20L)))
1530462848474:# ===========================================================================
1530462848474:(res20x <- resultsTable20x %>%
1530462848475:left_join(resultsData %>%
1530462848475:filter(SampleType == "positive",
1530462848476:SeqDepth == 20)) %>%
1530462848476:left_join(blastData, by = c("Accn" = "sseqid", "GeneTag" = "qseqid")) %>%
1530462848476:select(Accn, GeneTag, Organism, GeneName, BlastPresence, DetectorPresence, pident, qcovhsp, GeneCov, SeqDepth)
1530462848477:)
1530462848579:(resultsTable40x <- blastFilteredResults %>%
1530462848580:mutate(SeqDepth = 40L) %>%
1530462848580:select(Accn,
1530462848580:Organism,
1530462848581:GeneTag,
1530462848581:GeneName,
1530462848581:SeqDepth,
1530462848582:BlastPresence) #%>%
1530462848582:# unique()
1530462848582:)
1530462848670:(res40x <- resultsTable40x %>%
1530462848670:left_join(resultsData %>%
1530462848671:filter(SampleType == "positive",
1530462848671:SeqDepth == 40)) %>%
1530462848671:left_join(blastData, by = c("Accn" = "sseqid", "GeneTag" = "qseqid")) %>%
1530462848672:select(Accn, GeneTag, Organism, GeneName, BlastPresence, DetectorPresence, pident, qcovhsp, GeneCov, SeqDepth)
1530462848672:)
1530462848788:resultsTable <- rbind(res20x, res40x)
1530462848789:right_join(
1530462848790:right_join(
1530462848790:resultsTable %>%
1530462848790:filter(BlastPresence == 1, DetectorPresence == 1) %>% # TP
1530462848791:group_by(SeqDepth) %>%
1530462848791:summarise(TP = n()),
1530462848791:resultsTable %>%
1530462848792:filter(BlastPresence == 0, DetectorPresence == 1) %>% # FP
1530462848792:group_by(SeqDepth) %>%
1530462848792:summarise(FP = n())
1530462848793:),
1530462848793:right_join(
1530462848793:resultsTable %>%
1530462848794:filter(BlastPresence == 1, DetectorPresence == 0) %>% # FN
1530462848794:group_by(SeqDepth) %>%
1530462848795:summarise(FN = n()),
1530462848795:resultsTable %>%
1530462848795:filter(BlastPresence == 0, DetectorPresence == 0) %>% # TN
1530462848796:group_by(SeqDepth) %>%
1530462848796:summarise(TN = n())
1530462848797:)
1530462848797:)
1530462999529:library(caret)
1530463000123:confusionMatrix(factor(resultsTable %>% filter(SeqDepth == 20) %>% pull(DetectorPresence)),
1530463000124:factor(resultsTable %>% filter(SeqDepth == 20) %>% pull(BlastPresence)),
1530463000124:positive = "1")
1530463000825:confusionMatrix(factor(resultsTable %>% filter(SeqDepth == 40) %>% pull(DetectorPresence)),
1530463000826:factor(resultsTable %>% filter(SeqDepth == 40) %>% pull(BlastPresence)),
1530463000826:positive = "1")
1530463008545:FP <- resTmp %>%
1530463008545:filter(BlastPresence == 0, DetectorPresence == 1, SeqDepth == 20) %>% # TP
1530463008546:group_by(SeqDepth) %>%
1530463008547:resTmp %>%
1530463008547:filter(BlastPresence == 1, DetectorPresence == 1) %>% # TP
1530463008547:group_by(SeqDepth) %>%
1530463008548:summarise(TP = n())
1530463016757:# ===========================================================================
1530463016757:(resTmp <- resultsData %>%
1530463016758:filter(SampleType == "positive") %>%
1530463016758:# SeqDepth == 20) %>%
1530463016759:left_join(blastData, by = c("Accn" = "sseqid", "GeneTag" = "qseqid")) %>%
1530463016759:mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1, 0)) %>%
1530463016760:select(Accn, GeneTag, Organism, GeneName, BlastPresence,
1530463016761:DetectorPresence, BlastIdentity = pident,
1530463016761:BlastQCov = qcovhsp, GeneCov, SeqDepth)
1530463016762:# select(Id, Accn, GeneTag, Organism, GeneName, BlastPresence, DetectorPresence, GeneCov, SeqDepth)#, pident, qcovhsp, GeneCov, SeqDepth)
1530463016763:)
1530463022532:FP <- resTmp %>%
1530463022533:filter(BlastPresence == 0, DetectorPresence == 1, SeqDepth == 20) %>% # TP
1530463022533:group_by(SeqDepth) %>%
1530463022534:resTmp %>%
1530463022534:filter(BlastPresence == 1, DetectorPresence == 1) %>% # TP
1530463022534:group_by(SeqDepth) %>%
1530463022535:summarise(TP = n())
1530463031407:resTmp
1530463035609:FP <- resTmp %>%
1530463035610:filter(BlastPresence == 0, DetectorPresence == 1, SeqDepth == 20) %>% # TP
1530463035610:group_by(SeqDepth) %>%
1530463035611:resTmp %>%
1530463035611:filter(BlastPresence == 1, DetectorPresence == 1) %>% # TP
1530463035611:group_by(SeqDepth) %>%
1530463035612:summarise(TP = n())
1530463043425:#!/usr/bin/env Rscript
1530463043426:################################################################################
1530463043426:# Author:      Hector Fabio Espitia Navarro
1530463043427:#              Georgia Institute of Technology
1530463043427:# Version:     1.0
1530463043428:# Date:
1530463043428:# Description:
1530463043429:################################################################################
1530463043429:# Install required packages
1530463043430:# personal.lib.path <- Sys.getenv("R_LIBS_USER")
1530463043430:# if(!file.exists(personal.lib.path))
1530463043431:#   dir.create(personal.lib.path)
1530463043432:installAndLoadPackages <- function(pkg){
1530463043432:cat("Please wait a moment! Checking for required packages... ")
1530463043433:cat("Done!\n")
1530463043433:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1530463043434:if (length(new.pkg)) {
1530463043434:cat("Installing new packages... ")
1530463043435:install.packages(new.pkg, dependencies = TRUE,
1530463043436:repos="http://cran.rstudio.com/") #,
1530463043436:# lib = personal.lib.path)
1530463043437:cat("Done!\n")
1530463043437:}
1530463043438:cat("Loading required packages... ")
1530463043439:sapply(pkg, function(x){
1530463043439:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1530463043440:})
1530463043440:cat("Done!\n")
1530463043441:}
1530463043442:# github.packages <- c("tibble")
1530463043443:# packages <- c("argparser", "tidyverse", "RColorBrewer")#, "ggplot2",  "tidyr")
1530463043443:packages <- c("argparser", "dplyr", "ggplot2", "RColorBrewer", "readr", "tidyr", "caret")#, "ggplot2",  "tidyr")
1530463043444:installAndLoadPackages(packages)
1530463043451:################################################################################
1530463043452:# Get script name
1530463043452:initial.options <- commandArgs(trailingOnly = FALSE)
1530463043453:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1530463043454:# Process command line arguments
1530463043455:# Create a parser
1530463043456:p <- arg_parser("This script process results from STing detector",
1530463043456:name = script.name)
1530463043472:# Add Positional arguments (required inputs)
1530463043473:p <- add_argument(p, "blast_file", help = "BLAST results file")
1530463043475:p <- add_argument(p, "results_file", help = "Detector results file (tidy format)")
1530463043476:p <- add_argument(p, "genes_ref_file", help = "Genes ref file (short: tag and name)")
1530463043478:p <- add_argument(p, "genes_full_ref_file", help = "Genes full ref file (short: tag, name adn others)")
1530463043479:p <- add_argument(p, "genomes_ref_file", help = "Genomes ref file (short: Accn and Orgnism name)")
1530463043481:# Add options
1530463043481:p <- add_argument(p, "--cutoff", help = "dentity and Coverage cutoff value",
1530463043482:default = 80)
1530463043484:# # Parse command line arguments
1530463043485:# argv <- parse_args(p)
1530463043486:# Initialization of variables
1530463043486:# Values to test the script using RStudio
1530463043487:# testDir          <- "test_07_card"
1530463043487:# testDir          <- "test_08_card"
1530463043488:# testDir           <- "test_09_card"
1530463043488:testDir           <- "test_10_card"
1530463043489:blastFile         <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/card_vs_positive.blast.presence.tsv")
1530463043490:resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/detector.tsv")
1530463043491:# resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/results.tsv")
1530463043491:genesRefFile      <- "detector/card/prioritary_who_set/final_set/tags_names_xRef.tsv"
1530463043500:genesFullRefFile  <- "detector/card/prioritary_who_set/final_set/card_tags_xRef.tsv"
1530463043501:genomesRefFile    <- "detector/card/prioritary_who_set/final_set/genomesTableRef.tsv"
1530463043502:cutoff            <- 100
1530463043502:# Parse command line arguments
1530463043503:command.line = FALSE   # Turn to FALSE to test the script inside RStudio
1530463043503:argv <- list()
1530463043504:if(command.line) {
1530463043504:argv <- parse_args(p)
1530463043505:} else {
1530463043505:argv <- parse_args(p, list(blastFile, resultsFile, genesRefFile, genesFullRefFile, genomesRefFile,
1530463043506:"--cutoff", cutoff))
1530463043506:}
1530463043619:# Get argument values from command line
1530463043619:blastFile         <- argv$blast_file
1530463043620:resultsFile       <- argv$results_file
1530463043620:genesRefFile      <- argv$genes_ref_file
1530463043621:genesFullRefFile  <- argv$genes_full_ref_file
1530463043621:genomesRefFile    <- argv$genomes_ref_file
1530463043622:cutoff            <- argv$cutoff
1530463043622:# Function for checking input files ###########################################
1530463043623:CheckFileExists <- function(file.list) {
1530463043623:non.exist.files <- !file.exists(file.list)
1530463043623:if(any(non.exist.files)) {
1530463043624:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1530463043624:}
1530463043624:}
1530463043625:# Check for input files #######################################################
1530463043625:files.to.check <- c(blastFile, resultsFile, genesRefFile, genesFullRefFile, genomesRefFile)
1530463043626:error.message  <- CheckFileExists(files.to.check)
1530463043627:# if(!is.null(error.message)){
1530463043627:# stop(error.message)
1530463043627:# } else {
1530463043628:# Data --------------------------------------------------------------------
1530463043628:# Load data files
1530463043628:blastData    <- read_tsv(blastFile)
1530463043646:resultsData  <- read_tsv(resultsFile)
1530463043656:genesRef     <- read_tsv(genesRefFile, col_names = c("GeneTag", "GeneName"))
1530463043660:genesFullRef <- read_tsv(genesFullRefFile, col_names = c("GeneTag", "CARD_description"))
1530463043665:genomesRef   <- read_tsv(genomesRefFile)
1530463043669:# Process results ---------------------------------------------------------
1530463043670:cat(paste("Test directory:            ", testDir))
1530463043670:cat(paste("Identity & Coverage cutoff:", cutoff))
1530463043671:# Get the AMR genes present in the genome set
1530463043671:(blastFilteredResults <- blastData %>%
1530463043672:filter(pident >= cutoff, qcovhsp >= cutoff, presence == 1) %>% # test_07
1530463043672:# filter(pident >= 80, qcovhsp >= 80, presence == 1) %>% # test_08
1530463043672:left_join(genomesRef, by = c("sseqid" = "Accn")) %>%
1530463043673:left_join(genesRef, by = c("qseqid" = "GeneTag")) %>%
1530463043673:select(Accn = sseqid, Organism = ScientificName,
1530463043673:GeneTag = qseqid, GeneName, BlastPresence = presence))
1530463043769:(amrGenes <- blastFilteredResults %>%
1530463043770:select(GeneTag, GeneName) %>%
1530463043770:unique())
1530463043806:(genomes <- blastFilteredResults %>%
1530463043806:select(Accn, Organism) %>%
1530463043807:unique())
1530463043848:# Save genes and genomes for tables - Begin --------------------------------
1530463043849:# (genomesTable <- blastFilteredResults %>%
1530463043850:#    select(Accn, Organism) %>%
1530463043850:#    unique() %>%
1530463043851:#    left_join(genomesRef, by = c("Accn" = "Accn")) %>%
1530463043851:#    select(Accn, Organism = Organism.x, Description = SeqTitle) %>%
1530463043852:#    arrange(Organism)
1530463043852:# )
1530463043852:# write_tsv(genomesTable, paste0("detector/card/prioritary_who_set/final_set/",testDir,"/genomes.tsv"))
1530463043852:#
1530463043853:# (genesTable <- blastFilteredResults %>%
1530463043853:#     select(GeneTag, GeneName) %>%
1530463043853:#     unique() %>%
1530463043853:#     left_join(genesRef) %>%
1530463043854:#     left_join(genesFullRef) %>%
1530463043854:#     arrange(GeneName)
1530463043854:# )
1530463043855:# write_tsv(genesTable, paste0("detector/card/prioritary_who_set/final_set/",testDir,"/genes.tsv"))
1530463043855:# Save genes and genomes for tables - End ----------------------------------
1530463043855:depths <- c(20,40)
1530463043856:sampletypes <- c("positive", "negative")
1530463043857:(resultsTable20x <- blastFilteredResults %>%
1530463043857:mutate(SeqDepth = 20L,
1530463043858:Id = paste(Accn, GeneTag, sep = "-")) %>%
1530463043858:select(Id,
1530463043859:Accn,
1530463043859:Organism,
1530463043859:GeneTag,
1530463043862:GeneName,
1530463043863:SeqDepth,
1530463043863:BlastPresence) #%>%
1530463043863:# unique()
1530463043864:)
1530463043941:# ===========================================================================
1530463046320:# ===========================================================================
1530463046321:(resTmp <- resultsData %>%
1530463046321:filter(SampleType == "positive") %>%
1530463046322:# SeqDepth == 20) %>%
1530463046322:left_join(blastData, by = c("Accn" = "sseqid", "GeneTag" = "qseqid")) %>%
1530463046323:mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1, 0)) %>%
1530463046323:select(Accn, GeneTag, Organism, GeneName, BlastPresence,
1530463046324:DetectorPresence, BlastIdentity = pident,
1530463046325:BlastQCov = qcovhsp, GeneCov, SeqDepth)
1530463046329:# select(Id, Accn, GeneTag, Organism, GeneName, BlastPresence, DetectorPresence, GeneCov, SeqDepth)#, pident, qcovhsp, GeneCov, SeqDepth)
1530463046329:)
1530463047523:FP <- resTmp %>%
1530463047523:filter(BlastPresence == 0, DetectorPresence == 1, SeqDepth == 20) %>% # TP
1530463047524:group_by(SeqDepth) %>%
1530463047525:resTmp %>%
1530463047526:filter(BlastPresence == 1, DetectorPresence == 1) %>% # TP
1530463047526:group_by(SeqDepth) %>%
1530463047527:summarise(TP = n())
1530463054426:resTmp
1530463059051:resTmp %>%
1530463059052:filter(BlastPresence == 0, DetectorPresence == 1, SeqDepth == 20)
1530463071522:FP <- resTmp %>%
1530463071523:filter(BlastPresence == 0, DetectorPresence == 1, SeqDepth == 20) %>% # TP
1530463071523:group_by(SeqDepth)
1530463074959:FP
1530463088951:resTmp %>%
1530463088951:filter(BlastPresence == 1, DetectorPresence == 1) %>% # TP
1530463088951:group_by(SeqDepth) %>%
1530463088952:summarise(TP = n())
1530463092042:resTmp %>%
1530463092043:filter(BlastPresence == 0, DetectorPresence == 1) %>% # FP
1530463092043:group_by(SeqDepth) %>%
1530463092044:summarise(FP = n())
1530463096257:resTmp %>%
1530463096257:filter(BlastPresence == 0, DetectorPresence == 0) %>% # TN
1530463096258:group_by(SeqDepth) %>%
1530463096259:summarise(TN = n())
1530463100717:resTmp %>%
1530463100718:filter(BlastPresence == 1, DetectorPresence == 0) %>% # FN
1530463100719:group_by(SeqDepth) %>%
1530463100719:summarise(FN = n())
1530466017106:negResults20x <- blastFilteredResults
1530466017551:negResults20x$DetectorPresence = NA
1530466017771:negResults20x$GeneCov = NA
1530466017958:negResults20x$CoveredBases = NA
1530466018155:negResults20x$GeneLength = NA
1530466018329:negResults20x$MeanKmerDepth = NA
1530466018499:negResults20x$TotalKmers = NA
1530466018685:negResults20x$TotalReads = NA
1530466018876:negResults20x$DetectorThreshold = NA
1530466019177:negResults20x$SeqDepth = NA
1530466022316:for (i in 1:nrow(negResults20x)) {
1530466022317:gene   <- negResults20x$GeneTag[i]
1530466022317:genome <- negResults20x$Accn[i]
1530466022317:negResults20x$BlastPresence[i] = 0
1530466022318:# queryRes <- resultsData %>%
1530466022318:row <- resultsData %>%
1530466022318:filter(SampleType == "negative",
1530466022319:GeneTag == gene,
1530466022319:Accn == genome,
1530466022319:SeqDepth == 20) #%>%
1530466022320:if(nrow(row)> 0){
1530466022320:negResults20x$DetectorPresence[i] = row$DetectorPresence
1530466022321:negResults20x$GeneCov[i] = row$GeneCov
1530466022321:negResults20x$CoveredBases[i] = row$CoveredBases
1530466022322:negResults20x$GeneLength[i] = row$GeneLength
1530466022323:negResults20x$MeanKmerDepth[i] = row$MeanKmerDepth
1530466022323:negResults20x$TotalKmers[i] = row$TotalKmers
1530466022324:negResults20x$TotalReads[i] = row$TotalReads
1530466022325:negResults20x$DetectorThreshold[i] = row$DetectorThreshold
1530466022325:negResults20x$SeqDepth[i] = row$SeqDepth
1530466022326:print(row)
1530466022327:}
1530466022327:# negResults <- rbind(negResults, row)
1530466022328:}
1530466024415:negResults20x
1530466029785:negResults20x
1530466042959:negResults <- negResults %>%
1530466042960:left_join(genesFullRef)
1530466044983:print(nrow(negResults))
1530466052199:negResults20x
1530466052837:negResults20x <- negResults %>%
1530466052837:left_join(genesFullRef)
1530466061510:negResults20x <- negResults20x %>%
1530466061511:left_join(genesFullRef)
1530466062345:print(nrow(negResults))
1530466066220:negResults20x
1530466066968:negResults20x <- negResults20x %>%
1530466066969:left_join(genesFullRef)
1530466068726:print(nrow(negResults))
1530466074451:print(nrow(negResults20x))
1530466075162:negResults20x
1530466123634:negResults20x %>%
1530466123635:filter(BlastPresence == 0, DetectorPresence == 0) %>% # TN
1530466123635:group_by(SeqDepth) %>%
1530466123636:summarise(TN = n())
1530466163660:negResults20x %>%
1530466163661:filter(BlastPresence == 0, (DetectorPresence == 0 ||  is.na(DetectorPresence))) %>% # TN
1530466163661:group_by(SeqDepth) %>%
1530466163662:summarise(TN = n())
1530466196556:negResults20x %>%
1530466196557:filter(BlastPresence == 0, (DetectorPresence == 0 || is.na(DetectorPresence)))
1530466359892:negResults20x %>%
1530466359893:filter(BlastPresence == 1, DetectorPresence == 1) %>% # TP
1530466359893:group_by(SeqDepth) %>%
1530466359893:summarise(TP = n())
1530466375964:negResults20x %>%
1530466375965:filter(BlastPresence == 0, DetectorPresence == 1) %>% # FP
1530466375965:group_by(SeqDepth) %>%
1530466375966:summarise(FP = n())
1530466425118:negResults20x %>%
1530466425118:filter(BlastPresence == 0, DetectorPresence == 0 || is.na(DetectorPresence))) %>% # TN
1530466425119:summarise(TN = n())
1530466439864:negResults20x %>%
1530466439864:filter(BlastPresence == 0, DetectorPresence == 0 || is.na(DetectorPresence)))
1530466443112:negResults20x %>%
1530466443113:filter(BlastPresence == 0, DetectorPresence == 0 || is.na(DetectorPresence))
1530466473230:negResults20x %>%
1530466473230:filter(BlastPresence == 0, DetectorPresence == 0)
1530466495451:negResults20x %>%
1530466495452:# filter(BlastPresence == 0, DetectorPresence == 0) %>% # TN
1530466495452:filter(BlastPresence == 0, is.na(DetectorPresence))# %>% # TN
1530466530152:TN <- negResults20x %>%
1530466530153:# filter(BlastPresence == 0, DetectorPresence == 0) %>% # TN
1530466530153:filter(BlastPresence == 0, is.na(DetectorPresence))# %>% # TN
1530466534461:View(TN)
1530466561957:TN2 <- negResults20x %>%
1530466561957:filter(BlastPresence == 0, DetectorPresence == 0)
1530466572359:TN1 <- negResults20x %>%
1530466572360:# filter(BlastPresence == 0, DetectorPresence == 0) %>% # TN
1530466572361:filter(BlastPresence == 0, is.na(DetectorPresence))# %>% # TN
1530466574008:View(TN2)
1530466591590:nrow(TN2)
1530466608664:nrow(TN1) + nrow(TN2)
1530466654603:negResults20x %>%
1530466654603:filter(BlastPresence == 1, DetectorPresence == 0)
1530466714823:negResults40x <- blastFilteredResults
1530466714824:negResults40x$DetectorPresence = NA
1530466714825:negResults40x$GeneCov = NA
1530466714826:negResults40x$CoveredBases = NA
1530466714827:negResults40x$GeneLength = NA
1530466714828:negResults40x$MeanKmerDepth = NA
1530466714829:negResults40x$TotalKmers = NA
1530466714829:negResults40x$TotalReads = NA
1530466714830:negResults40x$DetectorThreshold = NA
1530466714831:negResults40x$SeqDepth = NA
1530466714831:for (i in 1:nrow(negResults40x)) {
1530466714832:gene   <- negResults40x$GeneTag[i]
1530466714833:genome <- negResults40x$Accn[i]
1530466714833:negResults40x$BlastPresence[i] = 0
1530466714833:# queryRes <- resultsData %>%
1530466714834:row <- resultsData %>%
1530466714834:filter(SampleType == "negative",
1530466714835:GeneTag == gene,
1530466714835:Accn == genome,
1530466714836:SeqDepth == 20) #%>%
1530466714836:if(nrow(row)> 0){
1530466714837:negResults40x$DetectorPresence[i] = row$DetectorPresence
1530466714837:negResults40x$GeneCov[i] = row$GeneCov
1530466714838:negResults40x$CoveredBases[i] = row$CoveredBases
1530466714838:negResults40x$GeneLength[i] = row$GeneLength
1530466714838:negResults40x$MeanKmerDepth[i] = row$MeanKmerDepth
1530466714839:negResults40x$TotalKmers[i] = row$TotalKmers
1530466714839:negResults40x$TotalReads[i] = row$TotalReads
1530466714840:negResults40x$DetectorThreshold[i] = row$DetectorThreshold
1530466714840:negResults40x$SeqDepth[i] = row$SeqDepth
1530466714841:# print(row)
1530466714841:}
1530466714841:# negResults <- rbind(negResults, row)
1530466714842:}
1530466715193:negResults40x
1530466715302:negResults40x <- negResults40x %>%
1530466715303:left_join(genesFullRef)
1530466715308:print(nrow(negResults40x))
1530466715309:negResults40x
1530466715448:negResults40x %>%
1530466715449:filter(BlastPresence == 1, DetectorPresence == 1) %>% # TP
1530466715449:group_by(SeqDepth) %>%
1530466715449:summarise(TP = n())
1530466738601:negResults40x %>%
1530466738601:filter(BlastPresence == 0, DetectorPresence == 1) %>% # FP
1530466738602:group_by(SeqDepth) %>%
1530466738602:summarise(FP = n())
1530466748915:TN1 <- negResults40x %>%
1530466748915:# filter(BlastPresence == 0, DetectorPresence == 0) %>% # TN
1530466748916:filter(BlastPresence == 0, is.na(DetectorPresence))# %>% # TN
1530466750810:TN2 <- negResults40x %>%
1530466750811:filter(BlastPresence == 0, DetectorPresence == 0)
1530466751441:nrow(TN1) + nrow(TN2)
1530466884559:#!/usr/bin/env Rscript
1530466884560:################################################################################
1530466884560:# Author:      Hector Fabio Espitia Navarro
1530466884561:#              Georgia Institute of Technology
1530466884561:# Version:     1.0
1530466884562:# Date:
1530466884562:# Description:
1530466884563:################################################################################
1530466884563:# Install required packages
1530466884564:# personal.lib.path <- Sys.getenv("R_LIBS_USER")
1530466884564:# if(!file.exists(personal.lib.path))
1530466884565:#   dir.create(personal.lib.path)
1530466884565:installAndLoadPackages <- function(pkg){
1530466884566:cat("Please wait a moment! Checking for required packages... ")
1530466884566:cat("Done!\n")
1530466884566:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1530466884567:if (length(new.pkg)) {
1530466884567:cat("Installing new packages... ")
1530466884568:install.packages(new.pkg, dependencies = TRUE,
1530466884568:repos="http://cran.rstudio.com/") #,
1530466884568:# lib = personal.lib.path)
1530466884569:cat("Done!\n")
1530466884569:}
1530466884569:cat("Loading required packages... ")
1530466884570:sapply(pkg, function(x){
1530466884570:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1530466884571:})
1530466884571:cat("Done!\n")
1530466884571:}
1530466884572:# github.packages <- c("tibble")
1530466884572:# packages <- c("argparser", "tidyverse", "RColorBrewer")#, "ggplot2",  "tidyr")
1530466884573:packages <- c("argparser", "dplyr", "ggplot2", "RColorBrewer", "readr", "tidyr", "caret")#, "ggplot2",  "tidyr")
1530466884573:installAndLoadPackages(packages)
1530466884579:################################################################################
1530466884580:# Get script name
1530466884580:initial.options <- commandArgs(trailingOnly = FALSE)
1530466884581:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1530466884582:# Process command line arguments
1530466884583:# Create a parser
1530466884583:p <- arg_parser("This script process results from STing detector",
1530466884584:name = script.name)
1530466884589:# Add Positional arguments (required inputs)
1530466884590:p <- add_argument(p, "blast_file", help = "BLAST results file")
1530466884591:p <- add_argument(p, "results_file", help = "Detector results file (tidy format)")
1530466884593:p <- add_argument(p, "genes_ref_file", help = "Genes ref file (short: tag and name)")
1530466884595:p <- add_argument(p, "genes_full_ref_file", help = "Genes full ref file (short: tag, name adn others)")
1530466884598:p <- add_argument(p, "genomes_ref_file", help = "Genomes ref file (short: Accn and Orgnism name)")
1530466884599:# Add options
1530466884600:p <- add_argument(p, "--cutoff", help = "dentity and Coverage cutoff value",
1530466884601:default = 80)
1530466884603:# # Parse command line arguments
1530466884604:# argv <- parse_args(p)
1530466884605:# Initialization of variables
1530466884606:# Values to test the script using RStudio
1530466884607:# testDir          <- "test_07_card"
1530466884607:# testDir          <- "test_08_card"
1530466884608:# testDir           <- "test_09_card"
1530466884608:testDir           <- "test_10_card"
1530466884609:blastFile         <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/card_vs_positive.blast.presence.tsv")
1530466884610:resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/detector.tsv")
1530466884611:# resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/results.tsv")
1530466884620:genesRefFile      <- "detector/card/prioritary_who_set/final_set/tags_names_xRef.tsv"
1530466884621:genesFullRefFile  <- "detector/card/prioritary_who_set/final_set/card_tags_xRef.tsv"
1530466884622:genomesRefFile    <- "detector/card/prioritary_who_set/final_set/genomesTableRef.tsv"
1530466884623:cutoff            <- 100
1530466884624:# Parse command line arguments
1530466884625:command.line = FALSE   # Turn to FALSE to test the script inside RStudio
1530466884626:argv <- list()
1530466884627:if(command.line) {
1530466884627:argv <- parse_args(p)
1530466884636:} else {
1530466884637:argv <- parse_args(p, list(blastFile, resultsFile, genesRefFile, genesFullRefFile, genomesRefFile,
1530466884638:"--cutoff", cutoff))
1530466884638:}
1530466884641:# Get argument values from command line
1530466884641:blastFile         <- argv$blast_file
1530466884642:resultsFile       <- argv$results_file
1530466884643:genesRefFile      <- argv$genes_ref_file
1530466884644:genesFullRefFile  <- argv$genes_full_ref_file
1530466884645:genomesRefFile    <- argv$genomes_ref_file
1530466884646:cutoff            <- argv$cutoff
1530466884652:# Function for checking input files ###########################################
1530466884652:CheckFileExists <- function(file.list) {
1530466884653:non.exist.files <- !file.exists(file.list)
1530466884654:if(any(non.exist.files)) {
1530466884654:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1530466884655:}
1530466884655:}
1530466884656:# Check for input files #######################################################
1530466884658:files.to.check <- c(blastFile, resultsFile, genesRefFile, genesFullRefFile, genomesRefFile)
1530466884659:error.message  <- CheckFileExists(files.to.check)
1530466884660:# if(!is.null(error.message)){
1530466884661:# stop(error.message)
1530466884661:# } else {
1530466884664:# Data --------------------------------------------------------------------
1530466884665:# Load data files
1530466884666:blastData    <- read_tsv(blastFile)
1530466884711:resultsData  <- read_tsv(resultsFile)
1530466884728:genesRef     <- read_tsv(genesRefFile, col_names = c("GeneTag", "GeneName"))
1530466884744:genesFullRef <- read_tsv(genesFullRefFile, col_names = c("GeneTag", "CARD_description"))
1530466884755:genomesRef   <- read_tsv(genomesRefFile)
1530466884762:# Process results ---------------------------------------------------------
1530466884763:cat(paste("Test directory:            ", testDir))
1530466884764:cat(paste("Identity & Coverage cutoff:", cutoff))
1530466884765:# Get the AMR genes present in the genome set
1530466884766:(blastFilteredResults <- blastData %>%
1530466884767:filter(pident >= cutoff, qcovhsp >= cutoff, presence == 1) %>% # test_07
1530466884768:# filter(pident >= 80, qcovhsp >= 80, presence == 1) %>% # test_08
1530466884768:left_join(genomesRef, by = c("sseqid" = "Accn")) %>%
1530466884769:left_join(genesRef, by = c("qseqid" = "GeneTag")) %>%
1530466884769:select(Accn = sseqid, Organism = ScientificName,
1530466884770:GeneTag = qseqid, GeneName, BlastPresence = presence))
1530466884861:(amrGenes <- blastFilteredResults %>%
1530466884862:select(GeneTag, GeneName) %>%
1530466884862:unique())
1530466884912:(genomes <- blastFilteredResults %>%
1530466884913:select(Accn, Organism) %>%
1530466884914:unique())
1530466884972:# Save genes and genomes for tables - Begin --------------------------------
1530466884973:# (genomesTable <- blastFilteredResults %>%
1530466884974:#    select(Accn, Organism) %>%
1530466884974:#    unique() %>%
1530466884975:#    left_join(genomesRef, by = c("Accn" = "Accn")) %>%
1530466884975:#    select(Accn, Organism = Organism.x, Description = SeqTitle) %>%
1530466884976:#    arrange(Organism)
1530466884976:# )
1530466884977:# write_tsv(genomesTable, paste0("detector/card/prioritary_who_set/final_set/",testDir,"/genomes.tsv"))
1530466884977:#
1530466884978:# (genesTable <- blastFilteredResults %>%
1530466884978:#     select(GeneTag, GeneName) %>%
1530466884979:#     unique() %>%
1530466884979:#     left_join(genesRef) %>%
1530466884980:#     left_join(genesFullRef) %>%
1530466884980:#     arrange(GeneName)
1530466884981:# )
1530466884981:# write_tsv(genesTable, paste0("detector/card/prioritary_who_set/final_set/",testDir,"/genes.tsv"))
1530466884982:# Save genes and genomes for tables - End ----------------------------------
1530466884983:depths <- c(20,40)
1530466884984:sampletypes <- c("positive", "negative")
1530466884986:(resultsTable20x <- blastFilteredResults %>%
1530466884986:mutate(SeqDepth = 20L,
1530466884987:Id = paste(Accn, GeneTag, sep = "-")) %>%
1530466884987:select(Id,
1530466884988:Accn,
1530466884988:Organism,
1530466884989:GeneTag,
1530466884989:GeneName,
1530466884990:SeqDepth,
1530466884991:BlastPresence) #%>%
1530466884991:# unique()
1530466884992:)
1530466885147:# ===========================================================================
1530466885148:(resTmp <- resultsData %>%
1530466885148:filter(SampleType == "positive") %>%
1530466885149:# SeqDepth == 20) %>%
1530466885149:left_join(blastData, by = c("Accn" = "sseqid", "GeneTag" = "qseqid")) %>%
1530466885150:mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1, 0)) %>%
1530466885150:select(Accn, GeneTag, Organism, GeneName, BlastPresence,
1530466885151:DetectorPresence, BlastIdentity = pident,
1530466885152:BlastQCov = qcovhsp, GeneCov, SeqDepth)
1530466885153:# select(Id, Accn, GeneTag, Organism, GeneName, BlastPresence, DetectorPresence, GeneCov, SeqDepth)#, pident, qcovhsp, GeneCov, SeqDepth)
1530466885153:)
1530466885351:FP <- resTmp %>%
1530466885352:filter(BlastPresence == 0, DetectorPresence == 1, SeqDepth == 20) %>% # TP
1530466885353:group_by(SeqDepth)
1530466885358:resTmp %>%
1530466885358:filter(BlastPresence == 1, DetectorPresence == 1) %>% # TP
1530466885359:group_by(SeqDepth) %>%
1530466885360:summarise(TP = n())
1530466885420:resTmp %>%
1530466885420:filter(BlastPresence == 0, DetectorPresence == 1) %>% # FP
1530466885421:group_by(SeqDepth) %>%
1530466885421:summarise(FP = n())
1530466885470:resTmp %>%
1530466885470:filter(BlastPresence == 0, DetectorPresence == 0) %>% # TN
1530466885470:group_by(SeqDepth) %>%
1530466885471:summarise(TN = n())
1530466885544:resTmp %>%
1530466885545:filter(BlastPresence == 1, DetectorPresence == 0) %>% # FN
1530466885545:group_by(SeqDepth) %>%
1530466885545:summarise(FN = n())
1530466885598:# library(caret)
1530466885598:#
1530466885599:# confusionMatrix(factor(resTmp %>% filter(SeqDepth == 20) %>% pull(DetectorPresence)),
1530466885599:#                 factor(resTmp %>% filter(SeqDepth == 20) %>% pull(BlastPresence)),
1530466885600:#                 positive = "1")
1530466885600:#
1530466885601:# confusionMatrix(factor(resTmp %>% filter(SeqDepth == 40) %>% pull(DetectorPresence)),
1530466885601:#                 factor(resTmp %>% filter(SeqDepth == 40) %>% pull(BlastPresence)),
1530466885602:#                 positive = "1")
1530466885603:# posResults <- data.frame()
1530466885603:#
1530466885604:# for (i in 1:nrow(blastFilteredResults)) {
1530466885604:#   gene   <- blastFilteredResults$GeneTag[i]
1530466885605:#   genome <- blastFilteredResults$Accn[i]
1530466885605:#   # queryRes <- resultsData %>%
1530466885606:#   row <- resultsData %>%
1530466885606:#     filter(SampleType == "positive",
1530466885607:#            GeneTag == gene,
1530466885607:#            Accn == genome,
1530466885608:#            SeqDepth == 20) #%>%
1530466885608:#   print(paste(genome, gene, nrow(row)))
1530466885609:#   # print(row)
1530466885609:#   # select(GeneTag, Accn, DetectorPresence)
1530466885610:#   posResults <- rbind(posResults, row)
1530466885610:# }
1530466885611:# posResults
1530466885612:# (tmp <- resultsTable20x %>%
1530466885612:#     left_join(resultsData %>%
1530466885612:#                 filter(SampleType == "positive",
1530466885613:#                        SeqDepth == 20L)))
1530466885614:# Negative samples --------------------------------------------------------
1530466959880:negResults20x <- blastFilteredResults
1530466959881:negResults20x$DetectorPresence = NA
1530466959882:negResults20x$GeneCov = NA
1530466959883:negResults20x$CoveredBases = NA
1530466959884:negResults20x$GeneLength = NA
1530466959885:negResults20x$MeanKmerDepth = NA
1530466959886:negResults20x$TotalKmers = NA
1530466959887:negResults20x$TotalReads = NA
1530466959888:negResults20x$DetectorThreshold = NA
1530466959888:negResults20x$SeqDepth = NA
1530466959890:for (i in 1:nrow(negResults20x)) {
1530466959890:gene   <- negResults20x$GeneTag[i]
1530466959891:genome <- negResults20x$Accn[i]
1530466959891:negResults20x$BlastPresence[i] = 0
1530466959892:# queryRes <- resultsData %>%
1530466959893:row <- resultsData %>%
1530466959894:filter(SampleType == "negative",
1530466959895:GeneTag == gene,
1530466959895:Accn == genome,
1530466959896:SeqDepth == 20) #%>%
1530466959896:if(nrow(row)> 0){
1530466959897:negResults20x$DetectorPresence[i] = row$DetectorPresence
1530466959898:negResults20x$GeneCov[i] = row$GeneCov
1530466959898:negResults20x$CoveredBases[i] = row$CoveredBases
1530466959899:negResults20x$GeneLength[i] = row$GeneLength
1530466959900:negResults20x$MeanKmerDepth[i] = row$MeanKmerDepth
1530466959900:negResults20x$TotalKmers[i] = row$TotalKmers
1530466959901:negResults20x$TotalReads[i] = row$TotalReads
1530466959901:negResults20x$DetectorThreshold[i] = row$DetectorThreshold
1530466959903:negResults20x$SeqDepth[i] = row$SeqDepth
1530466959903:# print(row)
1530466959904:}
1530466959905:# negResults <- rbind(negResults, row)
1530466959905:}
1530466960218:negResults20x
1530466960348:negResults20x <- negResults20x %>%
1530466960349:left_join(genesFullRef)
1530466960352:print(nrow(negResults20x))
1530466960352:negResults20x
1530466965323:negResults20x %>%
1530466965324:filter(BlastPresence == 1, DetectorPresence == 1) %>% # TP
1530466965324:group_by(SeqDepth) %>%
1530466965325:summarise(TP = n())
1530466971146:negResults20x %>%
1530466971146:filter(BlastPresence == 0, DetectorPresence == 1) %>% # FP
1530466971147:group_by(SeqDepth) %>%
1530466971147:summarise(FP = n())
1530466975591:TN1 <- negResults20x %>%
1530466975591:# filter(BlastPresence == 0, DetectorPresence == 0) %>% # TN
1530466975592:filter(BlastPresence == 0, is.na(DetectorPresence))# %>% # TN
1530466975879:TN2 <- negResults20x %>%
1530466975880:filter(BlastPresence == 0, DetectorPresence == 0)
1530466976268:nrow(TN1) + nrow(TN2)
1530466981609:# summarise(TN = n())
1530466981610:# group_by(SeqDepth) %>%
1530466981610:negResults20x %>%
1530466981611:filter(BlastPresence == 1, DetectorPresence == 0)
1530466992129:negResults40x <- blastFilteredResults
1530466992130:negResults40x$DetectorPresence = NA
1530466992130:negResults40x$GeneCov = NA
1530466992131:negResults40x$CoveredBases = NA
1530466992132:negResults40x$GeneLength = NA
1530466992132:negResults40x$MeanKmerDepth = NA
1530466992133:negResults40x$TotalKmers = NA
1530466992133:negResults40x$TotalReads = NA
1530466992134:negResults40x$DetectorThreshold = NA
1530466992134:negResults40x$SeqDepth = NA
1530466992135:for (i in 1:nrow(negResults40x)) {
1530466992135:gene   <- negResults40x$GeneTag[i]
1530466992136:genome <- negResults40x$Accn[i]
1530466992136:negResults40x$BlastPresence[i] = 0
1530466992137:# queryRes <- resultsData %>%
1530466992138:row <- resultsData %>%
1530466992138:filter(SampleType == "negative",
1530466992139:GeneTag == gene,
1530466992142:Accn == genome,
1530466992142:SeqDepth == 20) #%>%
1530466992143:if(nrow(row)> 0){
1530466992143:negResults40x$DetectorPresence[i] = row$DetectorPresence
1530466992144:negResults40x$GeneCov[i] = row$GeneCov
1530466992145:negResults40x$CoveredBases[i] = row$CoveredBases
1530466992145:negResults40x$GeneLength[i] = row$GeneLength
1530466992146:negResults40x$MeanKmerDepth[i] = row$MeanKmerDepth
1530466992147:negResults40x$TotalKmers[i] = row$TotalKmers
1530466992147:negResults40x$TotalReads[i] = row$TotalReads
1530466992148:negResults40x$DetectorThreshold[i] = row$DetectorThreshold
1530466992149:negResults40x$SeqDepth[i] = row$SeqDepth
1530466992149:# print(row)
1530466992150:}
1530466992151:# negResults <- rbind(negResults, row)
1530466992152:}
1530466992491:negResults40x
1530466992586:negResults40x <- negResults40x %>%
1530466992586:left_join(genesFullRef)
1530466992589:print(nrow(negResults40x))
1530466992590:negResults40x
1530466996804:negResults40x %>%
1530466996805:filter(BlastPresence == 1, DetectorPresence == 1) %>% # TP
1530466996805:group_by(SeqDepth) %>%
1530466996806:summarise(TP = n())
1530467010064:negResults40x %>%
1530467010065:filter(BlastPresence == 0, DetectorPresence == 1) %>% # FP
1530467010065:group_by(SeqDepth) %>%
1530467010066:summarise(FP = n())
1530467014687:TN1 <- negResults40x %>%
1530467014687:# filter(BlastPresence == 0, DetectorPresence == 0) %>% # TN
1530467014688:filter(BlastPresence == 0, is.na(DetectorPresence))# %>% # TN
1530467015304:TN2 <- negResults40x %>%
1530467015305:filter(BlastPresence == 0, DetectorPresence == 0)
1530467015719:nrow(TN1) + nrow(TN2)
1530467022125:# summarise(TN = n())
1530467022125:# group_by(SeqDepth) %>%
1530467022126:negResults40x %>%
1530467022126:filter(BlastPresence == 1, DetectorPresence == 0)
1530467089338:# Negative samples --------------------------------------------------------
1530467089339:(negResTmp <- resultsData %>%
1530467089339:filter(SampleType == "negative",#) %>%
1530467089340:SeqDepth == 20) %>%
1530467089340:left_join(blastData, by = c("Accn" = "sseqid", "GeneTag" = "qseqid")) %>%
1530467089341:mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1, 0)) %>%
1530467089341:select(Accn, GeneTag, Organism, GeneName, BlastPresence,
1530467089342:DetectorPresence, BlastIdentity = pident,
1530467089342:BlastQCov = qcovhsp, GeneCov, SeqDepth)
1530467089343:)
1530467103989:resultsData
1530467111930:resultsData %>%
1530467111930:filter(SampleType == "negative",#) %>%
1530467111931:SeqDepth == 20)
1530467171296:# ===========================================================================
1530467171297:(negResTmp <- resultsData %>%
1530467171298:filter(SampleType == "negative") %>%
1530467171298:# SeqDepth == 20) %>%
1530467171299:left_join(blastData, by = c("Accn" = "sseqid", "GeneTag" = "qseqid")) %>%
1530467171299:mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1, 0)) %>%
1530467171300:select(Accn, GeneTag, Organism, GeneName, BlastPresence,
1530467171300:DetectorPresence, BlastIdentity = pident,
1530467171301:BlastQCov = qcovhsp, GeneCov, SeqDepth)
1530467171302:# select(Id, Accn, GeneTag, Organism, GeneName, BlastPresence, DetectorPresence, GeneCov, SeqDepth)#, pident, qcovhsp, GeneCov, SeqDepth)
1530467171303:)
1530467181728:resultsData %>%
1530467181728:filter(SampleType == "negative")
1530467203702:View(negResTmp)
1530467236278:resultsData
1530467254849:# ===========================================================================
1530467254849:(negResTmp <- resultsData %>%
1530467254850:filter(SampleType == "negative") %>%
1530467254850:# SeqDepth == 20) %>%
1530467254851:left_join(blastData, by = c("Accn" = "sseqid", "GeneTag" = "qseqid")) %>%
1530467254851:mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1, 0)) %>%
1530467254852:select(Accn, GeneTag, Organism, GeneName, SampleType, BlastPresence,
1530467254852:DetectorPresence, BlastIdentity = pident,
1530467254853:BlastQCov = qcovhsp, GeneCov, SeqDepth)
1530467254854:# select(Id, Accn, GeneTag, Organism, GeneName, BlastPresence, DetectorPresence, GeneCov, SeqDepth)#, pident, qcovhsp, GeneCov, SeqDepth)
1530467254854:)
1530467259001:View(negResTmp)
1530467317723:resultsData %>%
1530467317724:filter(SampleType == "negative")
1530467348686:negResTmp <- resultsData %>%
1530467348687:filter(SampleType == "negative")
1530467356736:View(negResTmp)
1530467437069:negResTmp <- resultsData %>%
1530467437070:filter(SampleType == "negative",
1530467437070:!is.na(DetectorPresence))
1530467439575:View(negResTmp)
1530467486575:# ===========================================================================
1530467486576:(negResTmp <- resultsData %>%
1530467486577:filter(SampleType == "negative",
1530467486577:!is.na(DetectorPresence)) %>%
1530467486578:# SeqDepth == 20) %>%
1530467486578:left_join(blastData, by = c("Accn" = "sseqid", "GeneTag" = "qseqid")) %>%
1530467486579:mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1, 0)) %>%
1530467486580:select(Accn, GeneTag, Organism, GeneName, SampleType, BlastPresence,
1530467486580:DetectorPresence, BlastIdentity = pident,
1530467486581:BlastQCov = qcovhsp, GeneCov, SeqDepth)
1530467486582:# select(Id, Accn, GeneTag, Organism, GeneName, BlastPresence, DetectorPresence, GeneCov, SeqDepth)#, pident, qcovhsp, GeneCov, SeqDepth)
1530467486583:)
1530467492033:negResTmp <- resultsData %>%
1530467492034:filter(SampleType == "negative",
1530467492034:!is.na(DetectorPresence))
1530467497227:negResTmp
1530467526388:resultsData %>%
1530467526388:filter(SampleType == "negative",
1530467526388:!is.na(DetectorPresence)) %>%
1530467526389:# SeqDepth == 20) %>%
1530467526389:# left_join(blastData, by = c("Accn" = "sseqid", "GeneTag" = "qseqid")) %>%
1530467526389:right_join(blastData, by = c("Accn" = "sseqid", "GeneTag" = "qseqid"))
1530467542448:resultsData %>%
1530467542449:filter(SampleType == "negative",
1530467542450:!is.na(DetectorPresence)) %>%
1530467542451:# SeqDepth == 20) %>%
1530467542452:# left_join(blastData, by = c("Accn" = "sseqid", "GeneTag" = "qseqid")) %>%
1530467542452:left_join(blastData, by = c("Accn" = "sseqid", "GeneTag" = "qseqid"))
1530467555883:negResTmp <- resultsData %>%
1530467555884:filter(SampleType == "negative",
1530467555884:!is.na(DetectorPresence)) %>%
1530467555885:# SeqDepth == 20) %>%
1530467555885:# left_join(blastData, by = c("Accn" = "sseqid", "GeneTag" = "qseqid")) %>%
1530467555886:left_join(blastData, by = c("Accn" = "sseqid", "GeneTag" = "qseqid"))
1530467564665:View(negResTmp)
1530467947123:negResults40x <- blastFilteredResults
1530467947124:negResults40x$DetectorPresence = NA
1530467947125:negResults40x$GeneCov = NA
1530467947125:negResults40x$CoveredBases = NA
1530467947126:negResults40x$GeneLength = NA
1530467947127:negResults40x$MeanKmerDepth = NA
1530467947128:negResults40x$TotalKmers = NA
1530467947128:negResults40x$TotalReads = NA
1530467947129:negResults40x$DetectorThreshold = NA
1530467947130:negResults40x$SeqDepth = NA
1530467947131:for (i in 1:nrow(negResults40x)) {
1530467947131:gene   <- negResults40x$GeneTag[i]
1530467947132:genome <- negResults40x$Accn[i]
1530467947132:negResults40x$BlastPresence[i] = 0
1530467947132:# queryRes <- resultsData %>%
1530467947133:row <- resultsData %>%
1530467947133:filter(SampleType == "negative",
1530467947133:GeneTag == gene,
1530467947134:Accn == genome,
1530467947134:SeqDepth == 40) #%>%
1530467947134:if(nrow(row)> 0){
1530467947135:negResults40x$DetectorPresence[i] = row$DetectorPresence
1530467947135:negResults40x$GeneCov[i] = row$GeneCov
1530467947135:negResults40x$CoveredBases[i] = row$CoveredBases
1530467947136:negResults40x$GeneLength[i] = row$GeneLength
1530467947136:negResults40x$MeanKmerDepth[i] = row$MeanKmerDepth
1530467947136:negResults40x$TotalKmers[i] = row$TotalKmers
1530467947137:negResults40x$TotalReads[i] = row$TotalReads
1530467947137:negResults40x$DetectorThreshold[i] = row$DetectorThreshold
1530467947137:negResults40x$SeqDepth[i] = row$SeqDepth
1530467947138:# print(row)
1530467947138:}
1530467947139:# negResults <- rbind(negResults, row)
1530467947139:}
1530467947417:negResults40x
1530467947520:negResults40x <- negResults40x %>%
1530467947521:left_join(genesFullRef)
1530467947524:print(nrow(negResults40x))
1530467947524:negResults40x
1530467950786:negResults40x %>%
1530467950787:filter(BlastPresence == 1, DetectorPresence == 1) %>% # TP
1530467950788:group_by(SeqDepth) %>%
1530467950788:summarise(TP = n())
1530467952244:negResults40x %>%
1530467952245:filter(BlastPresence == 0, DetectorPresence == 1) %>% # FP
1530467952246:group_by(SeqDepth) %>%
1530467952246:summarise(FP = n())
1530467955794:TN1 <- negResults40x %>%
1530467955795:# filter(BlastPresence == 0, DetectorPresence == 0) %>% # TN
1530467955795:filter(BlastPresence == 0, is.na(DetectorPresence))# %>% # TN
1530467956540:TN2 <- negResults40x %>%
1530467956540:filter(BlastPresence == 0, DetectorPresence == 0)
1530467957652:nrow(TN1) + nrow(TN2)
1530467974115:blastFilteredResults
1530467988337:negResults40x <- blastFilteredResults
1530467988338:negResults40x$DetectorPresence = NA
1530467988339:negResults40x$GeneCov = NA
1530467988340:negResults40x$CoveredBases = NA
1530467988341:negResults40x$GeneLength = NA
1530467988342:negResults40x$MeanKmerDepth = NA
1530467988343:negResults40x$TotalKmers = NA
1530467988344:negResults40x$TotalReads = NA
1530467988345:negResults40x$DetectorThreshold = NA
1530467988346:negResults40x$SeqDepth = NA
1530467988348:for (i in 1:nrow(negResults40x)) {
1530467988348:gene   <- negResults40x$GeneTag[i]
1530467988349:genome <- negResults40x$Accn[i]
1530467988349:negResults40x$BlastPresence[i] = 0
1530467988350:# queryRes <- resultsData %>%
1530467988350:row <- resultsData %>%
1530467988351:filter(SampleType == "negative",
1530467988351:GeneTag == gene,
1530467988352:Accn == genome,
1530467988353:SeqDepth == 40) #%>%
1530467988353:if(nrow(row)> 0){
1530467988354:negResults40x$DetectorPresence[i] = row$DetectorPresence
1530467988354:negResults40x$GeneCov[i] = row$GeneCov
1530467988355:negResults40x$CoveredBases[i] = row$CoveredBases
1530467988355:negResults40x$GeneLength[i] = row$GeneLength
1530467988356:negResults40x$MeanKmerDepth[i] = row$MeanKmerDepth
1530467988357:negResults40x$TotalKmers[i] = row$TotalKmers
1530467988357:negResults40x$TotalReads[i] = row$TotalReads
1530467988358:negResults40x$DetectorThreshold[i] = row$DetectorThreshold
1530467988358:negResults40x$SeqDepth[i] = row$SeqDepth
1530467988359:# print(row)
1530467988360:}
1530468005757:negResults40x <- blastFilteredResults
1530468005758:negResults40x$DetectorPresence = NA
1530468005758:negResults40x$GeneCov = NA
1530468005759:negResults40x$CoveredBases = NA
1530468005760:negResults40x$GeneLength = NA
1530468005760:negResults40x$MeanKmerDepth = NA
1530468005761:negResults40x$TotalKmers = NA
1530468005762:negResults40x$TotalReads = NA
1530468005762:negResults40x$DetectorThreshold = NA
1530468005763:negResults40x$SeqDepth = NA
1530468005763:for (i in 1:nrow(negResults40x)) {
1530468005764:gene   <- negResults40x$GeneTag[i]
1530468005764:genome <- negResults40x$Accn[i]
1530468005764:negResults40x$BlastPresence[i] = 0
1530468005765:# queryRes <- resultsData %>%
1530468005765:row <- resultsData %>%
1530468005765:filter(SampleType == "negative",
1530468005766:GeneTag == gene,
1530468005766:Accn == genome,
1530468005767:SeqDepth == 40) #%>%
1530468005767:if(nrow(row)> 0){
1530468005767:negResults40x$DetectorPresence[i] = row$DetectorPresence
1530468005768:negResults40x$GeneCov[i] = row$GeneCov
1530468005768:negResults40x$CoveredBases[i] = row$CoveredBases
1530468005769:negResults40x$GeneLength[i] = row$GeneLength
1530468005769:negResults40x$MeanKmerDepth[i] = row$MeanKmerDepth
1530468005769:negResults40x$TotalKmers[i] = row$TotalKmers
1530468005770:negResults40x$TotalReads[i] = row$TotalReads
1530468005770:negResults40x$DetectorThreshold[i] = row$DetectorThreshold
1530468005770:negResults40x$SeqDepth[i] = row$SeqDepth
1530468005771:# print(row)
1530468005771:}
1530468005771:# negResults <- rbind(negResults, row)
1530468005772:}
1530468022133:negResults40x
1530468036349:View(negResults40x)
1530473220569:resultsData %>%
1530473220570:filter(SampleType == "positive")
1530473229911:# ===========================================================================
1530473229912:(resTmp <- resultsData %>%
1530473229912:filter(SampleType == "positive") %>%
1530473229913:# SeqDepth == 20) %>%
1530473229913:left_join(blastData, by = c("Accn" = "sseqid", "GeneTag" = "qseqid")) %>%
1530473229914:mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1, 0)) %>%
1530473229914:select(Accn, GeneTag, Organism, GeneName, BlastPresence,
1530473229915:DetectorPresence, BlastIdentity = pident,
1530473229916:BlastQCov = qcovhsp, GeneCov, SeqDepth)
1530473229917:# select(Id, Accn, GeneTag, Organism, GeneName, BlastPresence, DetectorPresence, GeneCov, SeqDepth)#, pident, qcovhsp, GeneCov, SeqDepth)
1530473229917:)
1530473264064:#!/usr/bin/env Rscript
1530473264065:################################################################################
1530473264065:# Author:      Hector Fabio Espitia Navarro
1530473264066:#              Georgia Institute of Technology
1530473264067:# Version:     1.0
1530473264067:# Date:
1530473264068:# Description:
1530473264068:################################################################################
1530473264069:# Install required packages
1530473264069:# personal.lib.path <- Sys.getenv("R_LIBS_USER")
1530473264070:# if(!file.exists(personal.lib.path))
1530473264070:#   dir.create(personal.lib.path)
1530473264071:installAndLoadPackages <- function(pkg){
1530473264072:cat("Please wait a moment! Checking for required packages... ")
1530473264072:cat("Done!\n")
1530473264073:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1530473264073:if (length(new.pkg)) {
1530473264074:cat("Installing new packages... ")
1530473264075:install.packages(new.pkg, dependencies = TRUE,
1530473264075:repos="http://cran.rstudio.com/") #,
1530473264076:# lib = personal.lib.path)
1530473264076:cat("Done!\n")
1530473264077:}
1530473264077:cat("Loading required packages... ")
1530473264078:sapply(pkg, function(x){
1530473264079:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1530473264079:})
1530473264080:cat("Done!\n")
1530473264081:}
1530473264082:# github.packages <- c("tibble")
1530473264083:# packages <- c("argparser", "tidyverse", "RColorBrewer")#, "ggplot2",  "tidyr")
1530473264083:packages <- c("argparser", "dplyr", "ggplot2", "RColorBrewer", "readr", "tidyr", "caret")#, "ggplot2",  "tidyr")
1530473264084:installAndLoadPackages(packages)
1530473264091:################################################################################
1530473264092:# Get script name
1530473264093:initial.options <- commandArgs(trailingOnly = FALSE)
1530473264094:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1530473264095:# Process command line arguments
1530473264096:# Create a parser
1530473264096:p <- arg_parser("This script process results from STing detector",
1530473264097:name = script.name)
1530473264100:# Add Positional arguments (required inputs)
1530473264100:p <- add_argument(p, "blast_file", help = "BLAST results file")
1530473264102:p <- add_argument(p, "results_file", help = "Detector results file (tidy format)")
1530473264104:p <- add_argument(p, "genes_ref_file", help = "Genes ref file (short: tag and name)")
1530473264106:p <- add_argument(p, "genes_full_ref_file", help = "Genes full ref file (short: tag, name adn others)")
1530473264107:p <- add_argument(p, "genomes_ref_file", help = "Genomes ref file (short: Accn and Orgnism name)")
1530473264109:# Add options
1530473264110:p <- add_argument(p, "--cutoff", help = "dentity and Coverage cutoff value",
1530473264110:default = 80)
1530473264113:# # Parse command line arguments
1530473264113:# argv <- parse_args(p)
1530473264114:# Initialization of variables
1530473264115:# Values to test the script using RStudio
1530473264115:# testDir          <- "test_07_card"
1530473264116:# testDir          <- "test_08_card"
1530473264116:# testDir           <- "test_09_card"
1530473264117:testDir           <- "test_10_card"
1530473264118:blastFile         <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/card_vs_positive.blast.presence.tsv")
1530473264119:# resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/detector.tsv")
1530473264119:resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/results.tsv")
1530473264120:genesRefFile      <- "detector/card/prioritary_who_set/final_set/tags_names_xRef.tsv"
1530473264120:genesFullRefFile  <- "detector/card/prioritary_who_set/final_set/card_tags_xRef.tsv"
1530473264121:genomesRefFile    <- "detector/card/prioritary_who_set/final_set/genomesTableRef.tsv"
1530473264122:cutoff            <- 100
1530473274061:# Parse command line arguments
1530473274061:command.line = FALSE   # Turn to FALSE to test the script inside RStudio
1530473274062:argv <- list()
1530473274063:if(command.line) {
1530473274064:argv <- parse_args(p)
1530473274064:} else {
1530473274065:argv <- parse_args(p, list(blastFile, resultsFile, genesRefFile, genesFullRefFile, genomesRefFile,
1530473274066:"--cutoff", cutoff))
1530473274066:}
1530473274069:# Get argument values from command line
1530473274070:blastFile         <- argv$blast_file
1530473274081:resultsFile       <- argv$results_file
1530473274082:genesRefFile      <- argv$genes_ref_file
1530473274082:genesFullRefFile  <- argv$genes_full_ref_file
1530473274083:genomesRefFile    <- argv$genomes_ref_file
1530473274083:cutoff            <- argv$cutoff
1530473274084:# Function for checking input files ###########################################
1530473274084:CheckFileExists <- function(file.list) {
1530473274084:non.exist.files <- !file.exists(file.list)
1530473274085:if(any(non.exist.files)) {
1530473274085:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1530473274085:}
1530473274086:}
1530473274086:# Check for input files #######################################################
1530473274087:files.to.check <- c(blastFile, resultsFile, genesRefFile, genesFullRefFile, genomesRefFile)
1530473274087:error.message  <- CheckFileExists(files.to.check)
1530473274088:# if(!is.null(error.message)){
1530473274088:# stop(error.message)
1530473274089:# } else {
1530473274089:# Data --------------------------------------------------------------------
1530473274090:# Load data files
1530473274090:blastData    <- read_tsv(blastFile)
1530473274111:resultsData  <- read_tsv(resultsFile)
1530473274134:genesRef     <- read_tsv(genesRefFile, col_names = c("GeneTag", "GeneName"))
1530473274141:genesFullRef <- read_tsv(genesFullRefFile, col_names = c("GeneTag", "CARD_description"))
1530473274152:genomesRef   <- read_tsv(genomesRefFile)
1530473274159:# Process results ---------------------------------------------------------
1530473274160:cat(paste("Test directory:            ", testDir))
1530473274160:cat(paste("Identity & Coverage cutoff:", cutoff))
1530473274162:# Get the AMR genes present in the genome set
1530473274163:(blastFilteredResults <- blastData %>%
1530473274163:filter(pident >= cutoff, qcovhsp >= cutoff, presence == 1) %>% # test_07
1530473274164:# filter(pident >= 80, qcovhsp >= 80, presence == 1) %>% # test_08
1530473274165:left_join(genomesRef, by = c("sseqid" = "Accn")) %>%
1530473274165:left_join(genesRef, by = c("qseqid" = "GeneTag")) %>%
1530473274166:select(Accn = sseqid, Organism = ScientificName,
1530473274166:GeneTag = qseqid, GeneName, BlastPresence = presence))
1530473274270:(amrGenes <- blastFilteredResults %>%
1530473274271:select(GeneTag, GeneName) %>%
1530473274271:unique())
1530473274306:(genomes <- blastFilteredResults %>%
1530473274306:select(Accn, Organism) %>%
1530473274307:unique())
1530473274360:# Save genes and genomes for tables - Begin --------------------------------
1530473274362:# (genomesTable <- blastFilteredResults %>%
1530473274363:#    select(Accn, Organism) %>%
1530473274363:#    unique() %>%
1530473274363:#    left_join(genomesRef, by = c("Accn" = "Accn")) %>%
1530473274364:#    select(Accn, Organism = Organism.x, Description = SeqTitle) %>%
1530473274364:#    arrange(Organism)
1530473274365:# )
1530473274365:# write_tsv(genomesTable, paste0("detector/card/prioritary_who_set/final_set/",testDir,"/genomes.tsv"))
1530473274366:#
1530473274366:# (genesTable <- blastFilteredResults %>%
1530473274367:#     select(GeneTag, GeneName) %>%
1530473274367:#     unique() %>%
1530473274368:#     left_join(genesRef) %>%
1530473274368:#     left_join(genesFullRef) %>%
1530473274368:#     arrange(GeneName)
1530473274369:# )
1530473274369:# write_tsv(genesTable, paste0("detector/card/prioritary_who_set/final_set/",testDir,"/genes.tsv"))
1530473274370:# Save genes and genomes for tables - End ----------------------------------
1530473274371:depths <- c(20,40)
1530473274372:sampletypes <- c("positive", "negative")
1530473274373:(resultsTable20x <- blastFilteredResults %>%
1530473274373:mutate(SeqDepth = 20L,
1530473274374:Id = paste(Accn, GeneTag, sep = "-")) %>%
1530473274374:select(Id,
1530473274375:Accn,
1530473274375:Organism,
1530473274376:GeneTag,
1530473274376:GeneName,
1530473274377:SeqDepth,
1530473274377:BlastPresence) #%>%
1530473274378:# unique()
1530473274378:)
1530473274481:# ===========================================================================
1530473274481:(resTmp <- resultsData %>%
1530473274482:filter(SampleType == "positive") %>%
1530473274482:# SeqDepth == 20) %>%
1530473274482:left_join(blastData, by = c("Accn" = "sseqid", "GeneTag" = "qseqid")) %>%
1530473274483:mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1, 0)) %>%
1530473274483:select(Accn, GeneTag, Organism, GeneName, BlastPresence,
1530473274484:DetectorPresence, BlastIdentity = pident,
1530473274484:BlastQCov = qcovhsp, GeneCov, SeqDepth)
1530473274485:# select(Id, Accn, GeneTag, Organism, GeneName, BlastPresence, DetectorPresence, GeneCov, SeqDepth)#, pident, qcovhsp, GeneCov, SeqDepth)
1530473274485:)
1530473274652:FP <- resTmp %>%
1530473274653:filter(BlastPresence == 0, DetectorPresence == 1, SeqDepth == 20) %>% # TP
1530473274653:group_by(SeqDepth)
1530473274658:resTmp %>%
1530473274659:filter(BlastPresence == 1, DetectorPresence == 1) %>% # TP
1530473274659:group_by(SeqDepth) %>%
1530473274660:summarise(TP = n())
1530473274718:resTmp %>%
1530473274719:filter(BlastPresence == 0, DetectorPresence == 1) %>% # FP
1530473274719:group_by(SeqDepth) %>%
1530473274720:summarise(FP = n())
1530473274800:resTmp %>%
1530473274801:filter(BlastPresence == 0, DetectorPresence == 0) %>% # TN
1530473274801:group_by(SeqDepth) %>%
1530473274802:summarise(TN = n())
1530473274819:resTmp %>%
1530473274820:filter(BlastPresence == 1, DetectorPresence == 0) %>% # FN
1530473274820:group_by(SeqDepth) %>%
1530473274821:summarise(FN = n())
1530473274881:# library(caret)
1530473274881:#
1530473274882:# confusionMatrix(factor(resTmp %>% filter(SeqDepth == 20) %>% pull(DetectorPresence)),
1530473274882:#                 factor(resTmp %>% filter(SeqDepth == 20) %>% pull(BlastPresence)),
1530473274883:#                 positive = "1")
1530473274883:#
1530473274884:# confusionMatrix(factor(resTmp %>% filter(SeqDepth == 40) %>% pull(DetectorPresence)),
1530473274884:#                 factor(resTmp %>% filter(SeqDepth == 40) %>% pull(BlastPresence)),
1530473274885:#                 positive = "1")
1530473274886:# posResults <- data.frame()
1530473274886:#
1530473274887:# for (i in 1:nrow(blastFilteredResults)) {
1530473274887:#   gene   <- blastFilteredResults$GeneTag[i]
1530473274888:#   genome <- blastFilteredResults$Accn[i]
1530473274888:#   # queryRes <- resultsData %>%
1530473274889:#   row <- resultsData %>%
1530473274889:#     filter(SampleType == "positive",
1530473274890:#            GeneTag == gene,
1530473274890:#            Accn == genome,
1530473274891:#            SeqDepth == 20) #%>%
1530473274891:#   print(paste(genome, gene, nrow(row)))
1530473274892:#   # print(row)
1530473274893:#   # select(GeneTag, Accn, DetectorPresence)
1530473274893:#   posResults <- rbind(posResults, row)
1530473274894:# }
1530473274894:# posResults
1530473274895:# (tmp <- resultsTable20x %>%
1530473274895:#     left_join(resultsData %>%
1530473274896:#                 filter(SampleType == "positive",
1530473274896:#                        SeqDepth == 20L)))
1530473274898:# Negative samples --------------------------------------------------------
1530473303745:resultsData
1530473314873:resultsData %>%
1530473314874:filter(SampleType == "negative")
1530473377667:resultsData %>%
1530473377667:filter(SampleType == "negative", !is.na(GeneTag))
1530473397919:negNoNa <- resultsData %>%
1530473397920:filter(SampleType == "negative", !is.na(GeneTag))
1530473400463:View(negNoNa)
1530473455115:negNoNa <- resultsData %>%
1530473455116:filter(SampleType == "negative", !is.na(GeneTag)) %>%
1530473455116:left_join(blastData, by = c("Accn" = "sseqid", "GeneTag" = "qseqid")) %>%
1530473455117:mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1, 0))
1530473457296:View(negNoNa)
1530473509799:resultsData %>%
1530473509799:filter(SampleType == "negative", !is.na(GeneTag))
1530473534593:View(negNoNa)
1530473554451:depth <- 20
1530473571026:resultsData %>%
1530473571026:filter(SampleType == "negative", !is.na(GeneTag), SeqDepth == depth)
1530473595304:resultsData %>%
1530473595304:filter(SampleType == "negative", !is.na(GeneTag), SeqDepth == depth)
1530473634134:View(negNoNa)
1530473653535:negNoNa <- resultsData %>%
1530473653536:filter(SampleType == "negative", !is.na(GeneTag), SeqDepth == depth)
1530473655951:View(negNoNa)
1530476174194:#!/usr/bin/env Rscript
1530476174195:################################################################################
1530476174196:# Author:      Hector Fabio Espitia Navarro
1530476174196:#              Georgia Institute of Technology
1530476174197:# Version:     1.0
1530476174197:# Date:
1530476174198:# Description:
1530476174198:################################################################################
1530476174199:# Install required packages
1530476174199:# personal.lib.path <- Sys.getenv("R_LIBS_USER")
1530476174200:# if(!file.exists(personal.lib.path))
1530476174200:#   dir.create(personal.lib.path)
1530476174201:installAndLoadPackages <- function(pkg){
1530476174202:cat("Please wait a moment! Checking for required packages... ")
1530476174202:cat("Done!\n")
1530476174203:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1530476174203:if (length(new.pkg)) {
1530476174204:cat("Installing new packages... ")
1530476174205:install.packages(new.pkg, dependencies = TRUE,
1530476174205:repos="http://cran.rstudio.com/") #,
1530476174205:# lib = personal.lib.path)
1530476174206:cat("Done!\n")
1530476174206:}
1530476174206:cat("Loading required packages... ")
1530476174207:sapply(pkg, function(x){
1530476174207:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1530476174207:})
1530476174208:cat("Done!\n")
1530476174208:}
1530476174209:# github.packages <- c("tibble")
1530476174209:# packages <- c("argparser", "tidyverse", "RColorBrewer")#, "ggplot2",  "tidyr")
1530476174210:packages <- c("argparser", "dplyr", "ggplot2", "RColorBrewer", "readr", "tidyr", "caret")#, "ggplot2",  "tidyr")
1530476174210:installAndLoadPackages(packages)
1530476174215:################################################################################
1530476174216:# Get script name
1530476174216:initial.options <- commandArgs(trailingOnly = FALSE)
1530476174217:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1530476174218:# Process command line arguments
1530476174218:# Create a parser
1530476174218:p <- arg_parser("This script process results from STing detector",
1530476174219:name = script.name)
1530476174220:# Add Positional arguments (required inputs)
1530476174221:p <- add_argument(p, "blast_file", help = "BLAST results file")
1530476174222:p <- add_argument(p, "results_file", help = "Detector results file (tidy format)")
1530476174230:# p <- add_argument(p, "genes_ref_file", help = "Genes ref file (short: tag and name)")
1530476174231:# p <- add_argument(p, "genes_full_ref_file", help = "Genes full ref file (short: tag, name adn others)")
1530476174231:# p <- add_argument(p, "genomes_ref_file", help = "Genomes ref file (short: Accn and Orgnism name)")
1530476174231:# Add options
1530476174231:# p <- add_argument(p, "--cutoff", help = "dentity and Coverage cutoff value",
1530476174232:#                   default = 80)
1530476174232:# # Parse command line arguments
1530476174233:# argv <- parse_args(p)
1530476174233:# Initialization of variables
1530476174233:# Values to test the script using RStudio
1530476174234:# testDir          <- "test_07_card"
1530476174234:# testDir          <- "test_08_card"
1530476174234:# testDir           <- "test_09_card"
1530476174235:testDir           <- "test_10_card"
1530476174235:blastFile         <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/card_vs_positive.blast.presence.tsv")
1530476174236:# resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/detector.tsv")
1530476174236:resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/results.tsv")
1530476174236:# genesRefFile      <- "detector/card/prioritary_who_set/final_set/tags_names_xRef.tsv"
1530476174237:# genesFullRefFile  <- "detector/card/prioritary_who_set/final_set/card_tags_xRef.tsv"
1530476174237:# genomesRefFile    <- "detector/card/prioritary_who_set/final_set/genomesTableRef.tsv"
1530476174237:# cutoff            <- 100
1530476174238:# Parse command line arguments
1530476174238:command.line = FALSE   # Turn to FALSE to test the script inside RStudio
1530476174239:argv <- list()
1530476174239:if(command.line) {
1530476174239:argv <- parse_args(p)
1530476174240:} else {
1530476174240:argv <- parse_args(p, list(blastFile, resultsFile, genesRefFile, genesFullRefFile, genomesRefFile,
1530476174240:"--cutoff", cutoff))
1530476174241:}
1530476174244:# Get argument values from command line
1530476174245:blastFile         <- argv$blast_file
1530476174245:resultsFile       <- argv$results_file
1530476174246:# genesRefFile      <- argv$genes_ref_file
1530476174246:# genesFullRefFile  <- argv$genes_full_ref_file
1530476174246:# genomesRefFile    <- argv$genomes_ref_file
1530476174246:# cutoff            <- argv$cutoff
1530476174247:# Function for checking input files ###########################################
1530476174247:CheckFileExists <- function(file.list) {
1530476174248:non.exist.files <- !file.exists(file.list)
1530476174248:if(any(non.exist.files)) {
1530476174248:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1530476174249:}
1530476174249:}
1530476174249:# Check for input files #######################################################
1530476174250:files.to.check <- c(blastFile, resultsFile, genesRefFile, genesFullRefFile, genomesRefFile)
1530476174251:error.message  <- CheckFileExists(files.to.check)
1530476174251:# if(!is.null(error.message)){
1530476174252:# stop(error.message)
1530476174252:# } else {
1530476174252:# Data --------------------------------------------------------------------
1530476174253:# Load data files
1530476174253:blastData    <- read_tsv(blastFile)
1530476174256:resultsData  <- read_tsv(resultsFile)
1530476174259:# genesRef     <- read_tsv(genesRefFile, col_names = c("GeneTag", "GeneName"))
1530476174259:# genesFullRef <- read_tsv(genesFullRefFile, col_names = c("GeneTag", "CARD_description"))
1530476174259:# genomesRef   <- read_tsv(genomesRefFile)
1530476174260:# Process results ---------------------------------------------------------
1530476224048:#!/usr/bin/env Rscript
1530476224049:################################################################################
1530476224050:# Author:      Hector Fabio Espitia Navarro
1530476224050:#              Georgia Institute of Technology
1530476224051:# Version:     1.0
1530476224051:# Date:
1530476224052:# Description:
1530476224052:################################################################################
1530476224053:# Install required packages
1530476224053:# personal.lib.path <- Sys.getenv("R_LIBS_USER")
1530476224054:# if(!file.exists(personal.lib.path))
1530476224054:#   dir.create(personal.lib.path)
1530476224055:installAndLoadPackages <- function(pkg){
1530476224056:cat("Please wait a moment! Checking for required packages... ")
1530476224056:cat("Done!\n")
1530476224057:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1530476224058:if (length(new.pkg)) {
1530476224058:cat("Installing new packages... ")
1530476224059:install.packages(new.pkg, dependencies = TRUE,
1530476224060:repos="http://cran.rstudio.com/") #,
1530476224060:# lib = personal.lib.path)
1530476224061:cat("Done!\n")
1530476224061:}
1530476224062:cat("Loading required packages... ")
1530476224063:sapply(pkg, function(x){
1530476224063:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1530476224065:})
1530476224066:cat("Done!\n")
1530476224067:}
1530476224069:# github.packages <- c("tibble")
1530476224069:# packages <- c("argparser", "tidyverse", "RColorBrewer")#, "ggplot2",  "tidyr")
1530476224070:packages <- c("argparser", "dplyr", "ggplot2", "RColorBrewer", "readr", "tidyr", "caret")#, "ggplot2",  "tidyr")
1530476224080:installAndLoadPackages(packages)
1530476224087:################################################################################
1530476224088:# Get script name
1530476224088:initial.options <- commandArgs(trailingOnly = FALSE)
1530476224089:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1530476224091:# Process command line arguments
1530476224092:# Create a parser
1530476224092:p <- arg_parser("This script process results from STing detector",
1530476224093:name = script.name)
1530476224096:# Add Positional arguments (required inputs)
1530476224096:p <- add_argument(p, "blast_file", help = "BLAST results file")
1530476224098:p <- add_argument(p, "results_file", help = "Detector results file (tidy format)")
1530476224100:# p <- add_argument(p, "genes_ref_file", help = "Genes ref file (short: tag and name)")
1530476224100:# p <- add_argument(p, "genes_full_ref_file", help = "Genes full ref file (short: tag, name adn others)")
1530476224101:# p <- add_argument(p, "genomes_ref_file", help = "Genomes ref file (short: Accn and Orgnism name)")
1530476224102:# Add options
1530476224102:# p <- add_argument(p, "--cutoff", help = "dentity and Coverage cutoff value",
1530476224103:#                   default = 80)
1530476224104:# # Parse command line arguments
1530476224104:# argv <- parse_args(p)
1530476224105:# Initialization of variables
1530476224106:# Values to test the script using RStudio
1530476224106:# testDir          <- "test_07_card"
1530476224107:# testDir          <- "test_08_card"
1530476224107:# testDir           <- "test_09_card"
1530476224108:testDir           <- "test_10_card"
1530476224116:blastFile         <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/card_vs_positive.blast.presence.tsv")
1530476224117:# resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/detector.tsv")
1530476224117:resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/results.tsv")
1530476224118:# genesRefFile      <- "detector/card/prioritary_who_set/final_set/tags_names_xRef.tsv"
1530476224119:# genesFullRefFile  <- "detector/card/prioritary_who_set/final_set/card_tags_xRef.tsv"
1530476224119:# genomesRefFile    <- "detector/card/prioritary_who_set/final_set/genomesTableRef.tsv"
1530476224120:# cutoff            <- 100
1530476224121:# Parse command line arguments
1530476224121:command.line = FALSE   # Turn to FALSE to test the script inside RStudio
1530476224122:argv <- list()
1530476224122:if(command.line) {
1530476224123:argv <- parse_args(p)
1530476224123:} else {
1530476224124:argv <- parse_args(p, list(blastFile, resultsFile))#,
1530476224124:# genesRefFile, genesFullRefFile, genomesRefFile,
1530476224124:# "--cutoff", cutoff))
1530476224125:}
1530476229510:#!/usr/bin/env Rscript
1530476229511:################################################################################
1530476229511:# Author:      Hector Fabio Espitia Navarro
1530476229512:#              Georgia Institute of Technology
1530476229512:# Version:     1.0
1530476229513:# Date:
1530476229513:# Description:
1530476229514:################################################################################
1530476229514:# Install required packages
1530476229515:# personal.lib.path <- Sys.getenv("R_LIBS_USER")
1530476229515:# if(!file.exists(personal.lib.path))
1530476229516:#   dir.create(personal.lib.path)
1530476229517:installAndLoadPackages <- function(pkg){
1530476229517:cat("Please wait a moment! Checking for required packages... ")
1530476229518:cat("Done!\n")
1530476229518:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1530476229519:if (length(new.pkg)) {
1530476229519:cat("Installing new packages... ")
1530476229520:install.packages(new.pkg, dependencies = TRUE,
1530476229521:repos="http://cran.rstudio.com/") #,
1530476229521:# lib = personal.lib.path)
1530476229522:cat("Done!\n")
1530476229522:}
1530476229523:cat("Loading required packages... ")
1530476229524:sapply(pkg, function(x){
1530476229524:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1530476229524:})
1530476229525:cat("Done!\n")
1530476229525:}
1530476229526:# github.packages <- c("tibble")
1530476229526:# packages <- c("argparser", "tidyverse", "RColorBrewer")#, "ggplot2",  "tidyr")
1530476229526:packages <- c("argparser", "dplyr", "ggplot2", "RColorBrewer", "readr", "tidyr", "caret")#, "ggplot2",  "tidyr")
1530476229527:installAndLoadPackages(packages)
1530476229530:################################################################################
1530476229531:# Get script name
1530476229531:initial.options <- commandArgs(trailingOnly = FALSE)
1530476229531:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1530476229532:# Process command line arguments
1530476229532:# Create a parser
1530476229533:p <- arg_parser("This script process results from STing detector",
1530476229533:name = script.name)
1530476229535:# Add Positional arguments (required inputs)
1530476229535:p <- add_argument(p, "blast_file", help = "BLAST results file")
1530476229536:p <- add_argument(p, "results_file", help = "Detector results file (tidy format)")
1530476229537:# p <- add_argument(p, "genes_ref_file", help = "Genes ref file (short: tag and name)")
1530476229537:# p <- add_argument(p, "genes_full_ref_file", help = "Genes full ref file (short: tag, name adn others)")
1530476229538:# p <- add_argument(p, "genomes_ref_file", help = "Genomes ref file (short: Accn and Orgnism name)")
1530476229538:# Add options
1530476229538:# p <- add_argument(p, "--cutoff", help = "dentity and Coverage cutoff value",
1530476229539:#                   default = 80)
1530476229539:# # Parse command line arguments
1530476229539:# argv <- parse_args(p)
1530476229540:# Initialization of variables
1530476229540:# Values to test the script using RStudio
1530476229540:# testDir          <- "test_07_card"
1530476229541:# testDir          <- "test_08_card"
1530476229541:# testDir           <- "test_09_card"
1530476229541:testDir           <- "test_10_card"
1530476229542:blastFile         <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/card_vs_positive.blast.presence.tsv")
1530476229542:# resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/detector.tsv")
1530476229543:resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/results.tsv")
1530476229543:# genesRefFile      <- "detector/card/prioritary_who_set/final_set/tags_names_xRef.tsv"
1530476229543:# genesFullRefFile  <- "detector/card/prioritary_who_set/final_set/card_tags_xRef.tsv"
1530476229544:# genomesRefFile    <- "detector/card/prioritary_who_set/final_set/genomesTableRef.tsv"
1530476229544:# cutoff            <- 100
1530476229544:# Parse command line arguments
1530476229545:command.line = FALSE   # Turn to FALSE to test the script inside RStudio
1530476229545:argv <- list()
1530476229546:if(command.line) {
1530476229546:argv <- parse_args(p)
1530476229546:} else {
1530476229547:argv <- parse_args(p, list(blastFile, resultsFile))#,
1530476229547:# genesRefFile, genesFullRefFile, genomesRefFile,
1530476229547:# "--cutoff", cutoff))
1530476229547:}
1530476229548:# Get argument values from command line
1530476229549:blastFile         <- argv$blast_file
1530476229552:resultsFile       <- argv$results_file
1530476229553:# genesRefFile      <- argv$genes_ref_file
1530476229553:# genesFullRefFile  <- argv$genes_full_ref_file
1530476229554:# genomesRefFile    <- argv$genomes_ref_file
1530476229554:# cutoff            <- argv$cutoff
1530476229555:# Function for checking input files ###########################################
1530476229556:CheckFileExists <- function(file.list) {
1530476229556:non.exist.files <- !file.exists(file.list)
1530476229557:if(any(non.exist.files)) {
1530476229557:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1530476229558:}
1530476229558:}
1530476229560:# Check for input files #######################################################
1530476229561:files.to.check <- c(blastFile, resultsFile, genesRefFile, genesFullRefFile, genomesRefFile)
1530476229562:error.message  <- CheckFileExists(files.to.check)
1530476232520:# Load data files
1530476232521:blastData    <- read_tsv(blastFile)
1530476233248:resultsData  <- read_tsv(resultsFile)
1530476241084:cat(paste("Test directory:            ", testDir))
1530476242056:cat(paste("Identity & Coverage cutoff:", cutoff))
1530476253264:#!/usr/bin/env Rscript
1530476253265:################################################################################
1530476253265:# Author:      Hector Fabio Espitia Navarro
1530476253266:#              Georgia Institute of Technology
1530476253266:# Version:     1.0
1530476253267:# Date:
1530476253267:# Description:
1530476253268:################################################################################
1530476253268:# Install required packages
1530476253269:# personal.lib.path <- Sys.getenv("R_LIBS_USER")
1530476253269:# if(!file.exists(personal.lib.path))
1530476253270:#   dir.create(personal.lib.path)
1530476253271:installAndLoadPackages <- function(pkg){
1530476253271:cat("Please wait a moment! Checking for required packages... ")
1530476253272:cat("Done!\n")
1530476253272:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1530476253273:if (length(new.pkg)) {
1530476253273:cat("Installing new packages... ")
1530476253274:install.packages(new.pkg, dependencies = TRUE,
1530476253275:repos="http://cran.rstudio.com/") #,
1530476253276:# lib = personal.lib.path)
1530476253276:cat("Done!\n")
1530476253277:}
1530476253277:cat("Loading required packages... ")
1530476253278:sapply(pkg, function(x){
1530476253279:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1530476253279:})
1530476253280:cat("Done!\n")
1530476253281:}
1530476253283:# github.packages <- c("tibble")
1530476253283:# packages <- c("argparser", "tidyverse", "RColorBrewer")#, "ggplot2",  "tidyr")
1530476253284:packages <- c("argparser", "dplyr", "ggplot2", "RColorBrewer", "readr", "tidyr", "caret")#, "ggplot2",  "tidyr")
1530476253285:installAndLoadPackages(packages)
1530476253297:################################################################################
1530476253297:# Get script name
1530476253298:initial.options <- commandArgs(trailingOnly = FALSE)
1530476253299:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1530476253300:# Process command line arguments
1530476253301:# Create a parser
1530476253302:p <- arg_parser("This script process results from STing detector",
1530476253302:name = script.name)
1530476253304:# Add Positional arguments (required inputs)
1530476253304:p <- add_argument(p, "blast_file", help = "BLAST results file")
1530476253305:p <- add_argument(p, "results_file", help = "Detector results file (tidy format)")
1530476253306:# p <- add_argument(p, "genes_ref_file", help = "Genes ref file (short: tag and name)")
1530476253306:# p <- add_argument(p, "genes_full_ref_file", help = "Genes full ref file (short: tag, name adn others)")
1530476253307:# p <- add_argument(p, "genomes_ref_file", help = "Genomes ref file (short: Accn and Orgnism name)")
1530476253307:# Add options
1530476253307:# p <- add_argument(p, "--cutoff", help = "dentity and Coverage cutoff value",
1530476253307:#                   default = 80)
1530476253308:# # Parse command line arguments
1530476253308:# argv <- parse_args(p)
1530476253309:# Initialization of variables
1530476253309:# Values to test the script using RStudio
1530476253309:# testDir          <- "test_07_card"
1530476253310:# testDir          <- "test_08_card"
1530476253310:# testDir           <- "test_09_card"
1530476253310:testDir           <- "test_10_card"
1530476253311:blastFile         <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/card_vs_positive.blast.presence.tsv")
1530476253311:# resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/detector.tsv")
1530476253311:resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/results.tsv")
1530476253312:# genesRefFile      <- "detector/card/prioritary_who_set/final_set/tags_names_xRef.tsv"
1530476253312:# genesFullRefFile  <- "detector/card/prioritary_who_set/final_set/card_tags_xRef.tsv"
1530476253312:# genomesRefFile    <- "detector/card/prioritary_who_set/final_set/genomesTableRef.tsv"
1530476253313:# cutoff            <- 100
1530476253313:# Parse command line arguments
1530476253313:command.line = FALSE   # Turn to FALSE to test the script inside RStudio
1530476253314:argv <- list()
1530476253314:if(command.line) {
1530476253315:argv <- parse_args(p)
1530476253315:} else {
1530476253315:argv <- parse_args(p, list(blastFile, resultsFile))#,
1530476253315:# genesRefFile, genesFullRefFile, genomesRefFile,
1530476253316:# "--cutoff", cutoff))
1530476253316:}
1530476253318:# Get argument values from command line
1530476253319:blastFile         <- argv$blast_file
1530476253319:resultsFile       <- argv$results_file
1530476253320:# genesRefFile      <- argv$genes_ref_file
1530476253321:# genesFullRefFile  <- argv$genes_full_ref_file
1530476253321:# genomesRefFile    <- argv$genomes_ref_file
1530476253321:# cutoff            <- argv$cutoff
1530476253322:# Function for checking input files ###########################################
1530476253322:CheckFileExists <- function(file.list) {
1530476253322:non.exist.files <- !file.exists(file.list)
1530476253323:if(any(non.exist.files)) {
1530476253323:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1530476253323:}
1530476253323:}
1530476253324:# Check for input files #######################################################
1530476253324:files.to.check <- c(blastFile, resultsFile, genesRefFile, genesFullRefFile, genomesRefFile)
1530476253325:error.message  <- CheckFileExists(files.to.check)
1530476253326:# if(!is.null(error.message)){
1530476253326:# stop(error.message)
1530476253326:# } else {
1530476253327:# Data --------------------------------------------------------------------
1530476253327:# Load data files
1530476253327:blastData    <- read_tsv(blastFile)
1530476253346:resultsData  <- read_tsv(resultsFile)
1530476253354:# genesRef     <- read_tsv(genesRefFile, col_names = c("GeneTag", "GeneName"))
1530476253354:# genesFullRef <- read_tsv(genesFullRefFile, col_names = c("GeneTag", "CARD_description"))
1530476253354:# genomesRef   <- read_tsv(genomesRefFile)
1530476253355:# Process results ---------------------------------------------------------
1530476253355:# cat(paste("Test directory:            ", testDir))
1530476253356:# cat(paste("Identity & Coverage cutoff:", cutoff))
1530476253356:# Get the AMR genes present in the genome set
1530477318000:blastData
1530477505455:(blastFilteredResults <- blastData %>%
1530477505456:group_by(qseqid, sseqid) %>%
1530477505456:top_n(n = 2, wt = pident)
1530477505457:# filter(pident >= cutoff, qcovhsp >= cutoff, presence == 1) %>% # test_07
1530477505458:# # filter(pident >= 80, qcovhsp >= 80, presence == 1) %>% # test_08
1530477505458:# left_join(genomesRef, by = c("sseqid" = "Accn")) %>%
1530477505459:# left_join(genesRef, by = c("qseqid" = "GeneTag")) %>%
1530477505459:# select(Accn = sseqid, Organism = ScientificName,
1530477505460:#        GeneTag = qseqid, GeneName, BlastPresence = presence)
1530477505460:)
1530477524345:(blastFilteredResults <- blastData %>%
1530477524345:group_by(sseqid, qseqid) %>%
1530477524346:top_n(n = 2, wt = pident)
1530477524346:# filter(pident >= cutoff, qcovhsp >= cutoff, presence == 1) %>% # test_07
1530477524347:# # filter(pident >= 80, qcovhsp >= 80, presence == 1) %>% # test_08
1530477524347:# left_join(genomesRef, by = c("sseqid" = "Accn")) %>%
1530477524347:# left_join(genesRef, by = c("qseqid" = "GeneTag")) %>%
1530477524348:# select(Accn = sseqid, Organism = ScientificName,
1530477524348:#        GeneTag = qseqid, GeneName, BlastPresence = presence)
1530477524348:)
1530477529326:blastData
1530477544959:(blastFilteredResults <- blastData %>%
1530477544959:group_by(sseqid, qseqid) %>%
1530477544959:top_n(n = 2, wt = pident)
1530477544960:# filter(pident >= cutoff, qcovhsp >= cutoff, presence == 1) %>% # test_07
1530477544960:# # filter(pident >= 80, qcovhsp >= 80, presence == 1) %>% # test_08
1530477544961:# left_join(genomesRef, by = c("sseqid" = "Accn")) %>%
1530477544961:# left_join(genesRef, by = c("qseqid" = "GeneTag")) %>%
1530477544961:# select(Accn = sseqid, Organism = ScientificName,
1530477544962:#        GeneTag = qseqid, GeneName, BlastPresence = presence)
1530477544962:)
1530477557280:#!/usr/bin/env Rscript
1530477557281:################################################################################
1530477557282:# Author:      Hector Fabio Espitia Navarro
1530477557282:#              Georgia Institute of Technology
1530477557283:# Version:     1.0
1530477557283:# Date:
1530477557283:# Description:
1530477557284:################################################################################
1530477557284:# Install required packages
1530477557285:# personal.lib.path <- Sys.getenv("R_LIBS_USER")
1530477557285:# if(!file.exists(personal.lib.path))
1530477557287:#   dir.create(personal.lib.path)
1530477557288:installAndLoadPackages <- function(pkg){
1530477557289:cat("Please wait a moment! Checking for required packages... ")
1530477557289:cat("Done!\n")
1530477557290:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1530477557291:if (length(new.pkg)) {
1530477557291:cat("Installing new packages... ")
1530477557292:install.packages(new.pkg, dependencies = TRUE,
1530477557293:repos="http://cran.rstudio.com/") #,
1530477557294:# lib = personal.lib.path)
1530477557295:cat("Done!\n")
1530477557296:}
1530477557296:cat("Loading required packages... ")
1530477557297:sapply(pkg, function(x){
1530477557297:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1530477557298:})
1530477557299:cat("Done!\n")
1530477557299:}
1530477557301:# github.packages <- c("tibble")
1530477557301:# packages <- c("argparser", "tidyverse", "RColorBrewer")#, "ggplot2",  "tidyr")
1530477557302:packages <- c("argparser", "dplyr", "ggplot2", "RColorBrewer", "readr", "tidyr", "caret")#, "ggplot2",  "tidyr")
1530477557302:installAndLoadPackages(packages)
1530477557309:################################################################################
1530477557310:# Get script name
1530477557310:initial.options <- commandArgs(trailingOnly = FALSE)
1530477557311:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1530477557313:# Process command line arguments
1530477557313:# Create a parser
1530477557314:p <- arg_parser("This script process results from STing detector",
1530477557314:name = script.name)
1530477557317:# Add Positional arguments (required inputs)
1530477557318:p <- add_argument(p, "blast_file", help = "BLAST results file")
1530477557319:p <- add_argument(p, "results_file", help = "Detector results file (tidy format)")
1530477557321:# p <- add_argument(p, "genes_ref_file", help = "Genes ref file (short: tag and name)")
1530477557322:# p <- add_argument(p, "genes_full_ref_file", help = "Genes full ref file (short: tag, name adn others)")
1530477557322:# p <- add_argument(p, "genomes_ref_file", help = "Genomes ref file (short: Accn and Orgnism name)")
1530477557323:# Add options
1530477557323:# p <- add_argument(p, "--cutoff", help = "dentity and Coverage cutoff value",
1530477557324:#                   default = 80)
1530477557325:# # Parse command line arguments
1530477557325:# argv <- parse_args(p)
1530477557326:# Initialization of variables
1530477557327:# Values to test the script using RStudio
1530477557327:# testDir          <- "test_07_card"
1530477557328:# testDir          <- "test_08_card"
1530477557328:# testDir           <- "test_09_card"
1530477557329:testDir           <- "test_10_card"
1530477557330:blastFile         <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/card_vs_positive.blast.presence.tsv")
1530477557330:# resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/detector.tsv")
1530477557331:resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/results.tsv")
1530477557332:# genesRefFile      <- "detector/card/prioritary_who_set/final_set/tags_names_xRef.tsv"
1530477557332:# genesFullRefFile  <- "detector/card/prioritary_who_set/final_set/card_tags_xRef.tsv"
1530477557333:# genomesRefFile    <- "detector/card/prioritary_who_set/final_set/genomesTableRef.tsv"
1530477557333:# cutoff            <- 100
1530477557334:# Parse command line arguments
1530477557335:command.line = FALSE   # Turn to FALSE to test the script inside RStudio
1530477557336:argv <- list()
1530477557336:if(command.line) {
1530477557337:argv <- parse_args(p)
1530477557338:} else {
1530477557338:argv <- parse_args(p, list(blastFile, resultsFile))#,
1530477557339:# genesRefFile, genesFullRefFile, genomesRefFile,
1530477557339:# "--cutoff", cutoff))
1530477557340:}
1530477557342:# Get argument values from command line
1530477557342:blastFile         <- argv$blast_file
1530477557343:resultsFile       <- argv$results_file
1530477557344:# genesRefFile      <- argv$genes_ref_file
1530477557345:# genesFullRefFile  <- argv$genes_full_ref_file
1530477557345:# genomesRefFile    <- argv$genomes_ref_file
1530477557346:# cutoff            <- argv$cutoff
1530477557346:# Function for checking input files ###########################################
1530477557347:CheckFileExists <- function(file.list) {
1530477557347:non.exist.files <- !file.exists(file.list)
1530477557348:if(any(non.exist.files)) {
1530477557348:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1530477557349:}
1530477557349:}
1530477557350:# Check for input files #######################################################
1530477557351:files.to.check <- c(blastFile, resultsFile, genesRefFile, genesFullRefFile, genomesRefFile)
1530477557351:error.message  <- CheckFileExists(files.to.check)
1530477557352:# if(!is.null(error.message)){
1530477557352:# stop(error.message)
1530477557353:# } else {
1530477557353:# Data --------------------------------------------------------------------
1530477557354:# Load data files
1530477557354:blastData    <- read_tsv(blastFile)
1530477557373:resultsData  <- read_tsv(resultsFile)
1530477557381:# genesRef     <- read_tsv(genesRefFile, col_names = c("GeneTag", "GeneName"))
1530477557381:# genesFullRef <- read_tsv(genesFullRefFile, col_names = c("GeneTag", "CARD_description"))
1530477557382:# genomesRef   <- read_tsv(genomesRefFile)
1530477557382:# Process results ---------------------------------------------------------
1530477557383:# cat(paste("Test directory:            ", testDir))
1530477557383:# cat(paste("Identity & Coverage cutoff:", cutoff))
1530477557383:# Get the AMR genes present in the genome set
1530477559411:(blastFilteredResults <- blastData %>%
1530477559411:group_by(sseqid, qseqid) %>%
1530477559412:top_n(n = 2, wt = pident)
1530477559413:# filter(pident >= cutoff, qcovhsp >= cutoff, presence == 1) %>% # test_07
1530477559413:# # filter(pident >= 80, qcovhsp >= 80, presence == 1) %>% # test_08
1530477559414:# left_join(genomesRef, by = c("sseqid" = "Accn")) %>%
1530477559415:# left_join(genesRef, by = c("qseqid" = "GeneTag")) %>%
1530477559415:# select(Accn = sseqid, Organism = ScientificName,
1530477559416:#        GeneTag = qseqid, GeneName, BlastPresence = presence)
1530477559416:)
1530477562449:View(blastFilteredResults)
1530477911133:(blastFilteredResults <- blastData %>%
1530477911134:group_by(sseqid, qseqid) %>%
1530477911134:top_n(n = 2, wt = bitscore)
1530477911135:# filter(pident >= cutoff, qcovhsp >= cutoff, presence == 1) %>% # test_07
1530477911135:# # filter(pident >= 80, qcovhsp >= 80, presence == 1) %>% # test_08
1530477911136:# left_join(genomesRef, by = c("sseqid" = "Accn")) %>%
1530477911136:# left_join(genesRef, by = c("qseqid" = "GeneTag")) %>%
1530477911137:# select(Accn = sseqid, Organism = ScientificName,
1530477911137:#        GeneTag = qseqid, GeneName, BlastPresence = presence)
1530477911137:)
1530478724442:dummy <- data.frame(qseqid = c("gene1", "gene2", "gene3", "gene4", "gene5",
1530478724443:"gene1", "gene2", "gene3",
1530478724443:"gene1", "gene2",
1530478724444:"gene3", "gene4", "gene5"
1530478724444:),
1530478724444:sseqid = c("genome1", "genome1", "genome1", "genome1", "genome1",
1530478724445:"genome2", "genome2", "genome2",
1530478724445:"genome3", "genome3",
1530478724446:"genome4", "genome4", "genome4"
1530478724446:),
1530478724446:pident = c(100, 99.9, 95.0, 94, 94,
1530478724447:10, 60, 100,
1530478724447:99, 100,
1530478724447:70, 100, 100
1530478724448:),
1530478724448:qcovhsp = c(100, 100, 80, 95, 99,
1530478724449:100, 99, 100,
1530478724449:100, 99,
1530478724449:99, 100, 100
1530478724450:)
1530478724450:)
1530478727332:dummy
1530478821225:dummy <- data.frame(qseqid = c("gene1", "gene2", "gene3", "gene4", "gene5",
1530478821225:"gene1", "gene2", "gene3",
1530478821226:"gene1", "gene1", "gene2", "gene2",
1530478821227:"gene3", "gene4", "gene5"
1530478821227:),
1530478821228:sseqid = c("genome1", "genome1", "genome1", "genome1", "genome1",
1530478821229:"genome2", "genome2", "genome2",
1530478821229:"genome3", "genome3", "genome3", "genome3",
1530478821230:"genome4", "genome4", "genome4"
1530478821231:),
1530478821231:pident = c(100, 99.9, 95.0, 94, 94,
1530478821232:10, 60, 100,
1530478821233:99, 100, 89, 75,
1530478821233:70, 100, 100
1530478821234:),
1530478821235:qcovhsp = c(100, 100, 80, 95, 99,
1530478821235:100, 99, 100,
1530478821236:100, 99, 100, 99,
1530478821236:99, 100, 100
1530478821237:)
1530478821237:)
1530478852732:dummy %>%
1530478852732:group_by(sseqid, qseqid) %>%
1530478852733:top_n(n = 2, wt = pident)
1530478874416:dummy %>%
1530478874417:group_by(sseqid, qseqid) %>%
1530478874418:top_n(n =1, wt = pident)
1530479850048:(blastFilteredResults <- blastData %>%
1530479850049:arrange(sseqid, qseqid, bitscore, evalue, pident, qcovhsp)
1530479850050:)
1530479855839:View(blastFilteredResults)
1530480030783:(blastFilteredResults <- blastData %>%
1530480030783:arrange(sseqid, qseqid, bitscore, evalue, pident, qcovhsp) %>%
1530480030784:select(sseqid, qseqid, bitscore, evalue, pident, qcovhsp)
1530480030784:)
1530480243383:(blastFilteredResults <- blastData %>%
1530480243384:arrange(sseqid, qseqid, desc(bitscore), evalue, desc(pident), desc(qcovhsp)) %>%
1530480243385:select(sseqid, qseqid, bitscore, evalue, pident, qcovhsp)
1530480243385:)
1530480291848:(blastFilteredResults <- blastData %>%
1530480291848:arrange(sseqid, qseqid, desc(bitscore), evalue, desc(pident), desc(qcovhsp)) %>%
1530480291849:select(sseqid, qseqid, bitscore, evalue, pident, qcovhsp, sstart, send)
1530480291850:)
1530481103079:(blastFilteredResults <- blastData %>%
1530481103080:arrange(sseqid, qseqid, desc(bitscore), evalue, desc(pident), desc(qcovhsp)) %>%
1530481103080:select(sseqid, qseqid, bitscore, evalue, pident, qcovhsp, sstart, send) %>%
1530481103081:group_by(sseqid, qseqid) %>%
1530481103081:top_n(n = 1)
1530481103082:)
1530481126016:(blastFilteredResults <- blastData %>%
1530481126017:arrange(sseqid, qseqid, desc(bitscore), evalue, desc(pident), desc(qcovhsp)) %>%
1530481126017:select(sseqid, qseqid, bitscore, evalue, pident, qcovhsp, sstart, send) %>%
1530481126018:group_by(sseqid, qseqid) %>%
1530481126018:top_n(n = 1, wt = bitscore)
1530481126019:)
1530481246905:(blastFilteredResults <- blastData %>%
1530481246906:arrange(sseqid, qseqid, desc(bitscore), evalue, desc(pident), desc(qcovhsp)) %>%
1530481246907:select(sseqid, qseqid, bitscore, evalue, pident, qcovhsp, sstart, send) %>%
1530481246908:group_by(sseqid, qseqid) %>%
1530481246909:top_n(n = 1)
1530481246910:)
1530481268278:(blastFilteredResults <- blastData %>%
1530481268279:arrange(sseqid, qseqid, desc(bitscore), evalue, desc(pident), desc(qcovhsp)) %>%
1530481268280:select(sseqid, qseqid, bitscore, evalue, pident, qcovhsp, sstart, send) %>%
1530481268280:group_by(sseqid, qseqid) %>%
1530481268281:head(1)
1530481268281:)
1530481283673:(blastFilteredResults <- blastData %>%
1530481283674:arrange(sseqid, qseqid, desc(bitscore), evalue, desc(pident), desc(qcovhsp)) %>%
1530481283675:select(sseqid, qseqid, bitscore, evalue, pident, qcovhsp, sstart, send) %>%
1530481283675:group_by(sseqid, qseqid) %>%
1530481283676:top_n(n = 1, wt = bitscore)
1530481283677:)
1530483444043:(amrGenes <- blastData %>%
1530483444044:select(qseqid) %>%
1530483444045:unique())
1530483449070:(genomes <- blastData %>%
1530483449071:select(sseqid) %>%
1530483449071:unique())
1530483574891:amrGenes
1530483577836:genomes
1530483605449:(amrGenes <- blastData %>%
1530483605450:select(Accn = qseqid) %>%
1530483605451:unique())
1530483606365:(genomes <- blastData %>%
1530483606366:select(GeneTag = sseqid) %>%
1530483606366:unique())
1530483682876:blastPresenceTable <- data.frame()
1530485145996:#!/usr/bin/env Rscript
1530485146013:################################################################################
1530485146014:# Author:      Hector Fabio Espitia Navarro
1530485146015:#              Georgia Institute of Technology
1530485146015:# Version:     1.0
1530485146016:# Date:
1530485146017:# Description:
1530485146017:################################################################################
1530485146018:# Install required packages
1530485146018:# personal.lib.path <- Sys.getenv("R_LIBS_USER")
1530485146019:# if(!file.exists(personal.lib.path))
1530485146020:#   dir.create(personal.lib.path)
1530485146021:installAndLoadPackages <- function(pkg){
1530485146022:cat("Please wait a moment! Checking for required packages... ")
1530485146023:cat("Done!\n")
1530485146024:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1530485146025:if (length(new.pkg)) {
1530485146025:cat("Installing new packages... ")
1530485146026:install.packages(new.pkg, dependencies = TRUE,
1530485146027:repos="http://cran.rstudio.com/") #,
1530485146027:# lib = personal.lib.path)
1530485146028:cat("Done!\n")
1530485146029:}
1530485146029:cat("Loading required packages... ")
1530485146030:sapply(pkg, function(x){
1530485146031:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1530485146031:})
1530485146032:cat("Done!\n")
1530485146032:}
1530485146034:# github.packages <- c("tibble")
1530485146034:# packages <- c("argparser", "tidyverse", "RColorBrewer")#, "ggplot2",  "tidyr")
1530485146035:packages <- c("argparser", "dplyr", "ggplot2", "RColorBrewer", "readr", "tidyr",
1530485146035:"caret")#, "ggplot2",  "tidyr")
1530485146036:installAndLoadPackages(packages)
1530485146073:################################################################################
1530485146074:# Get script name
1530485146074:initial.options <- commandArgs(trailingOnly = FALSE)
1530485146075:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1530485146076:# Process command line arguments
1530485146076:# Create a parser
1530485146077:p <- arg_parser("This script process results from STing detector",
1530485146077:name = script.name)
1530485146079:# Add Positional arguments (required inputs)
1530485146080:p <- add_argument(p, "blast_file", help = "BLAST results file")
1530485146081:p <- add_argument(p, "results_file", help = "Detector results file (tidy format)")
1530485146082:p <- add_argument(p, "identity", help = "BLAST identity cutoff",
1530485146082:default = 80)
1530485146083:p <- add_argument(p, "q_coverage", help = "BLAST query coverage cutoff",
1530485146084:default = 80)
1530485146085:# p <- add_argument(p, "genes_ref_file", help = "Genes ref file (short: tag and name)")
1530485146085:# p <- add_argument(p, "genes_full_ref_file", help = "Genes full ref file (short: tag, name adn others)")
1530485146086:# p <- add_argument(p, "genomes_ref_file", help = "Genomes ref file (short: Accn and Orgnism name)")
1530485146086:# Add options
1530485146086:# p <- add_argument(p, "--cutoff", help = "dentity and Coverage cutoff value",
1530485146086:#                   default = 80)
1530485146087:# # Parse command line arguments
1530485146087:# argv <- parse_args(p)
1530485146088:# Initialization of variables
1530485146088:# Values to test the script using RStudio
1530485146089:# testDir          <- "test_07_card"
1530485146089:# testDir          <- "test_08_card"
1530485146089:# testDir           <- "test_09_card"
1530485146090:testDir           <- "test_10_card"
1530485146090:blastFile         <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/card_vs_positive.blast.presence.tsv")
1530485146091:# resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/detector.tsv")
1530485146091:resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/results.tsv")
1530485146092:identity          <- 100
1530485146092:qcoverage         <- 100
1530485146093:# genesRefFile      <- "detector/card/prioritary_who_set/final_set/tags_names_xRef.tsv"
1530485146094:# genesFullRefFile  <- "detector/card/prioritary_who_set/final_set/card_tags_xRef.tsv"
1530485146094:# genomesRefFile    <- "detector/card/prioritary_who_set/final_set/genomesTableRef.tsv"
1530485146094:# cutoff            <- 100
1530485146095:# Parse command line arguments
1530485146095:command.line = FALSE   # Turn to FALSE to test the script inside RStudio
1530485146096:argv <- list()
1530485146097:if(command.line) {
1530485146097:argv <- parse_args(p)
1530485146097:} else {
1530485146098:argv <- parse_args(p, list(blastFile, resultsFile, identity, qcoverage))#,
1530485146098:# genesRefFile, genesFullRefFile, genomesRefFile,
1530485146098:# "--cutoff", cutoff))
1530485146099:}
1530485146100:# Get argument values from command line
1530485146101:blastFile         <- argv$blast_file
1530485146101:resultsFile       <- argv$results_file
1530485146102:identity          <- argv$identity
1530485146103:qcoverage         <- argv$qcoverage
1530485146104:# genesRefFile      <- argv$genes_ref_file
1530485146104:# genesFullRefFile  <- argv$genes_full_ref_file
1530485146104:# genomesRefFile    <- argv$genomes_ref_file
1530485146105:# cutoff            <- argv$cutoff
1530485146105:# Function for checking input files ###########################################
1530485146106:CheckFileExists <- function(file.list) {
1530485146106:non.exist.files <- !file.exists(file.list)
1530485146106:if(any(non.exist.files)) {
1530485146107:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1530485146107:}
1530485146107:}
1530485146108:# Check for input files #######################################################
1530485146108:files.to.check <- c(blastFile, resultsFile, genesRefFile, genesFullRefFile, genomesRefFile)
1530485146109:error.message  <- CheckFileExists(files.to.check)
1530485146110:# if(!is.null(error.message)){
1530485146110:# stop(error.message)
1530485146111:# } else {
1530485184283:#!/usr/bin/env Rscript
1530485184284:################################################################################
1530485184285:# Author:      Hector Fabio Espitia Navarro
1530485184286:#              Georgia Institute of Technology
1530485184286:# Version:     1.0
1530485184287:# Date:
1530485184287:# Description:
1530485184288:################################################################################
1530485184288:# Install required packages
1530485184288:# personal.lib.path <- Sys.getenv("R_LIBS_USER")
1530485184289:# if(!file.exists(personal.lib.path))
1530485184289:#   dir.create(personal.lib.path)
1530485184290:installAndLoadPackages <- function(pkg){
1530485184291:cat("Please wait a moment! Checking for required packages... ")
1530485184291:cat("Done!\n")
1530485184292:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1530485184292:if (length(new.pkg)) {
1530485184292:cat("Installing new packages... ")
1530485184293:install.packages(new.pkg, dependencies = TRUE,
1530485184294:repos="http://cran.rstudio.com/") #,
1530485184294:# lib = personal.lib.path)
1530485184295:cat("Done!\n")
1530485184295:}
1530485184296:cat("Loading required packages... ")
1530485184296:sapply(pkg, function(x){
1530485184297:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1530485184297:})
1530485184298:cat("Done!\n")
1530485184298:}
1530485184299:# github.packages <- c("tibble")
1530485184299:# packages <- c("argparser", "tidyverse", "RColorBrewer")#, "ggplot2",  "tidyr")
1530485184299:packages <- c("argparser", "dplyr", "ggplot2", "RColorBrewer", "readr", "tidyr",
1530485184300:"caret")#, "ggplot2",  "tidyr")
1530485184300:installAndLoadPackages(packages)
1530485184304:################################################################################
1530485184305:# Get script name
1530485184305:initial.options <- commandArgs(trailingOnly = FALSE)
1530485184305:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1530485184307:# Process command line arguments
1530485184307:# Create a parser
1530485184307:p <- arg_parser("This script process results from STing detector",
1530485184308:name = script.name)
1530485184310:# Add Positional arguments (required inputs)
1530485184310:p <- add_argument(p, "blast_file", help = "BLAST results file")
1530485184311:p <- add_argument(p, "results_file", help = "Detector results file (tidy format)")
1530485184312:p <- add_argument(p, "identity", help = "BLAST identity cutoff",
1530485184312:default = 80)
1530485184314:p <- add_argument(p, "q_coverage", help = "BLAST query coverage cutoff",
1530485184314:default = 80)
1530485184315:# p <- add_argument(p, "genes_ref_file", help = "Genes ref file (short: tag and name)")
1530485184316:# p <- add_argument(p, "genes_full_ref_file", help = "Genes full ref file (short: tag, name adn others)")
1530485184316:# p <- add_argument(p, "genomes_ref_file", help = "Genomes ref file (short: Accn and Orgnism name)")
1530485184317:# Add options
1530485184317:# p <- add_argument(p, "--cutoff", help = "dentity and Coverage cutoff value",
1530485184317:#                   default = 80)
1530485184318:# # Parse command line arguments
1530485184318:# argv <- parse_args(p)
1530485184319:# Initialization of variables
1530485184319:# Values to test the script using RStudio
1530485184320:# testDir          <- "test_07_card"
1530485184320:# testDir          <- "test_08_card"
1530485184320:# testDir           <- "test_09_card"
1530485184321:testDir           <- "test_10_card"
1530485184321:blastFile         <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/card_vs_positive.blast.presence.tsv")
1530485184322:# resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/detector.tsv")
1530485184322:resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/results.tsv")
1530485184322:identity          <- 100
1530485184323:qcoverage         <- 100
1530485184324:# genesRefFile      <- "detector/card/prioritary_who_set/final_set/tags_names_xRef.tsv"
1530485184324:# genesFullRefFile  <- "detector/card/prioritary_who_set/final_set/card_tags_xRef.tsv"
1530485184324:# genomesRefFile    <- "detector/card/prioritary_who_set/final_set/genomesTableRef.tsv"
1530485184325:# cutoff            <- 100
1530485184325:# Parse command line arguments
1530485184326:command.line = FALSE   # Turn to FALSE to test the script inside RStudio
1530485184326:argv <- list()
1530485184327:if(command.line) {
1530485184327:argv <- parse_args(p)
1530485184327:} else {
1530485184328:argv <- parse_args(p, list(blastFile, resultsFile, identity, qcoverage))#,
1530485184328:# genesRefFile, genesFullRefFile, genomesRefFile,
1530485184328:# "--cutoff", cutoff))
1530485184329:}
1530485184330:# Get argument values from command line
1530485184330:blastFile         <- argv$blast_file
1530485184331:resultsFile       <- argv$results_file
1530485184331:identity          <- argv$identity
1530485184332:qcoverage         <- argv$qcoverage
1530485184332:# genesRefFile      <- argv$genes_ref_file
1530485184332:# genesFullRefFile  <- argv$genes_full_ref_file
1530485184333:# genomesRefFile    <- argv$genomes_ref_file
1530485184333:# cutoff            <- argv$cutoff
1530485184334:# Function for checking input files ###########################################
1530485184334:CheckFileExists <- function(file.list) {
1530485184334:non.exist.files <- !file.exists(file.list)
1530485184334:if(any(non.exist.files)) {
1530485184335:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1530485184335:}
1530485184335:}
1530485184336:# Check for input files #######################################################
1530485184336:files.to.check <- c(blastFile, resultsFile)
1530485184337:error.message  <- CheckFileExists(files.to.check)
1530485184338:# if(!is.null(error.message)){
1530485184338:# stop(error.message)
1530485184338:# } else {
1530485184339:# Data --------------------------------------------------------------------
1530485184340:# Load data files
1530485185912:# Load data files
1530485185912:blastData    <- read_tsv(blastFile)
1530485186421:resultsData  <- read_tsv(resultsFile)
1530485196506:(amrGenes <- blastData %>%
1530485196507:select(Accn = qseqid) %>%
1530485196507:unique())
1530485196539:(genomes <- blastData %>%
1530485196539:select(GeneTag = sseqid) %>%
1530485196540:unique())
1530485196572:presenceTable <- data.frame()
1530485382396:as.data.frame(c(1,2,3))
1530485387210:as.data.frame(t(c(1,2,3)))
1530485398807:presenceTable <- data.frame()
1530485399560:for (gene in amrGenes) {
1530485399561:for (genome in genomes) {
1530485399561:queryResult <- blastData %>%
1530485399562:filter(qseqid == gene,
1530485399563:sseqid == genome,
1530485399563:pident >= identity,
1530485399564:qcovhsp >= qcoverage)
1530485399564:presence <- 0
1530485399565:if (nrow(queryResult) > 0){
1530485399565:presence <- 1
1530485399566:}
1530485399567:row <- as.data.frame(c(genome, gene, presence))
1530485399567:presenceTable <- rbind(presenceTable, row)
1530485399568:}
1530485399568:}
1530485410696:presenceTable <- data.frame()
1530485411163:for (gene in amrGenes) {
1530485411164:for (genome in genomes) {
1530485411164:queryResult <- blastData %>%
1530485411165:filter(qseqid == gene,
1530485411165:sseqid == genome,
1530485411166:pident >= identity,
1530485411166:qcovhsp >= qcoverage)
1530485411167:presence <- 0
1530485411167:if (nrow(queryResult) > 0){
1530485411167:presence <- 1
1530485411168:}
1530485411168:row <- as.data.frame(t(c(genome, gene, presence)))
1530485411168:presenceTable <- rbind(presenceTable, row)
1530485411169:}
1530485411169:}
1530485439870:gene
1530485452068:amrGenes
1530485469551:(amrGenes <- blastData %>%
1530485469552:select(Accn = qseqid) %>%
1530485469552:unique() %>% pull())
1530485470276:(genomes <- blastData %>%
1530485470277:select(GeneTag = sseqid) %>%
1530485470277:unique() %>% pull())
1530485472639:presenceTable <- data.frame()
1530485473136:for (gene in amrGenes) {
1530485473136:for (genome in genomes) {
1530485473137:queryResult <- blastData %>%
1530485473137:filter(qseqid == gene,
1530485473138:sseqid == genome,
1530485473138:pident >= identity,
1530485473139:qcovhsp >= qcoverage)
1530485473140:presence <- 0
1530485473140:if (nrow(queryResult) > 0){
1530485473141:presence <- 1
1530485473141:}
1530485473142:row <- as.data.frame(t(c(genome, gene, presence)))
1530485473143:presenceTable <- rbind(presenceTable, row)
1530485473143:}
1530485473144:}
1530485479216:gene
1530485481459:genome
1530485483152:identity
1530485484974:qcoverage
1530485503503:#!/usr/bin/env Rscript
1530485503504:################################################################################
1530485503504:# Author:      Hector Fabio Espitia Navarro
1530485503505:#              Georgia Institute of Technology
1530485503505:# Version:     1.0
1530485503506:# Date:
1530485503506:# Description:
1530485503506:################################################################################
1530485503507:# Install required packages
1530485503507:# personal.lib.path <- Sys.getenv("R_LIBS_USER")
1530485503507:# if(!file.exists(personal.lib.path))
1530485503508:#   dir.create(personal.lib.path)
1530485503508:installAndLoadPackages <- function(pkg){
1530485503509:cat("Please wait a moment! Checking for required packages... ")
1530485503509:cat("Done!\n")
1530485503509:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1530485503509:if (length(new.pkg)) {
1530485503510:cat("Installing new packages... ")
1530485503510:install.packages(new.pkg, dependencies = TRUE,
1530485503510:repos="http://cran.rstudio.com/") #,
1530485503511:# lib = personal.lib.path)
1530485503511:cat("Done!\n")
1530485503512:}
1530485503512:cat("Loading required packages... ")
1530485503512:sapply(pkg, function(x){
1530485503513:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1530485503513:})
1530485503514:cat("Done!\n")
1530485503515:}
1530485503517:# github.packages <- c("tibble")
1530485503517:# packages <- c("argparser", "tidyverse", "RColorBrewer")#, "ggplot2",  "tidyr")
1530485503517:packages <- c("argparser", "dplyr", "ggplot2", "RColorBrewer", "readr", "tidyr",
1530485503518:"caret")#, "ggplot2",  "tidyr")
1530485503519:installAndLoadPackages(packages)
1530485503525:################################################################################
1530485503526:# Get script name
1530485503527:initial.options <- commandArgs(trailingOnly = FALSE)
1530485503528:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1530485503529:# Process command line arguments
1530485503529:# Create a parser
1530485503529:p <- arg_parser("This script process results from STing detector",
1530485503530:name = script.name)
1530485503532:# Add Positional arguments (required inputs)
1530485503532:p <- add_argument(p, "blast_file", help = "BLAST results file")
1530485503533:p <- add_argument(p, "results_file", help = "Detector results file (tidy format)")
1530485503535:p <- add_argument(p, "identity", help = "BLAST identity cutoff",
1530485503536:default = 80)
1530485503537:p <- add_argument(p, "q_coverage", help = "BLAST query coverage cutoff",
1530485503537:default = 80)
1530485503539:# p <- add_argument(p, "genes_ref_file", help = "Genes ref file (short: tag and name)")
1530485503539:# p <- add_argument(p, "genes_full_ref_file", help = "Genes full ref file (short: tag, name adn others)")
1530485503539:# p <- add_argument(p, "genomes_ref_file", help = "Genomes ref file (short: Accn and Orgnism name)")
1530485503540:# Add options
1530485503540:# p <- add_argument(p, "--cutoff", help = "dentity and Coverage cutoff value",
1530485503541:#                   default = 80)
1530485503541:# # Parse command line arguments
1530485503541:# argv <- parse_args(p)
1530485503542:# Initialization of variables
1530485503542:# Values to test the script using RStudio
1530485503543:# testDir          <- "test_07_card"
1530485503543:# testDir          <- "test_08_card"
1530485503543:# testDir           <- "test_09_card"
1530485503544:testDir           <- "test_10_card"
1530485503544:blastFile         <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/card_vs_positive.blast.presence.tsv")
1530485503545:# resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/detector.tsv")
1530485503545:resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/results.tsv")
1530485503546:identity          <- 100
1530485503546:qcoverage         <- 100
1530485503547:# genesRefFile      <- "detector/card/prioritary_who_set/final_set/tags_names_xRef.tsv"
1530485503547:# genesFullRefFile  <- "detector/card/prioritary_who_set/final_set/card_tags_xRef.tsv"
1530485503548:# genomesRefFile    <- "detector/card/prioritary_who_set/final_set/genomesTableRef.tsv"
1530485503548:# cutoff            <- 100
1530485503548:# Parse command line arguments
1530485503549:command.line = FALSE   # Turn to FALSE to test the script inside RStudio
1530485503549:argv <- list()
1530485503550:if(command.line) {
1530485503550:argv <- parse_args(p)
1530485503550:} else {
1530485503551:argv <- parse_args(p, list(blastFile, resultsFile, identity, qcoverage))#,
1530485503551:# genesRefFile, genesFullRefFile, genomesRefFile,
1530485503551:# "--cutoff", cutoff))
1530485503552:}
1530485503553:# Get argument values from command line
1530485503553:blastFile         <- argv$blast_file
1530485503554:resultsFile       <- argv$results_file
1530485503554:identity          <- argv$identity
1530485503555:qcoverage         <- argv$qcoverage
1530485503555:# genesRefFile      <- argv$genes_ref_file
1530485503556:# genesFullRefFile  <- argv$genes_full_ref_file
1530485503556:# genomesRefFile    <- argv$genomes_ref_file
1530485503556:# cutoff            <- argv$cutoff
1530485503557:# Function for checking input files ###########################################
1530485503557:CheckFileExists <- function(file.list) {
1530485503557:non.exist.files <- !file.exists(file.list)
1530485503558:if(any(non.exist.files)) {
1530485503558:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1530485503558:}
1530485503559:}
1530485503559:# Check for input files #######################################################
1530485503560:files.to.check <- c(blastFile, resultsFile)
1530485503560:error.message  <- CheckFileExists(files.to.check)
1530485503561:# if(!is.null(error.message)){
1530485503561:# stop(error.message)
1530485503562:# } else {
1530485503562:# Data --------------------------------------------------------------------
1530485503563:# Load data files
1530485503563:blastData    <- read_tsv(blastFile)
1530485503583:resultsData  <- read_tsv(resultsFile)
1530485503594:# genesRef     <- read_tsv(genesRefFile, col_names = c("GeneTag", "GeneName"))
1530485503595:# genesFullRef <- read_tsv(genesFullRefFile, col_names = c("GeneTag", "CARD_description"))
1530485503595:# genomesRef   <- read_tsv(genomesRefFile)
1530485503596:# Process results ---------------------------------------------------------
1530485503596:# cat(paste("Test directory:            ", testDir))
1530485503597:# cat(paste("Identity & Coverage cutoff:", cutoff))
1530485503597:(amrGenes <- blastData %>%
1530485503598:select(Accn = qseqid) %>%
1530485503598:unique() %>% pull())
1530485503626:(genomes <- blastData %>%
1530485503627:select(GeneTag = sseqid) %>%
1530485503627:unique() %>% pull())
1530485507072:qcoverage
1530485516012:qcoverage
1530485519008:#!/usr/bin/env Rscript
1530485519008:################################################################################
1530485519009:# Author:      Hector Fabio Espitia Navarro
1530485519009:#              Georgia Institute of Technology
1530485519009:# Version:     1.0
1530485519010:# Date:
1530485519010:# Description:
1530485519010:################################################################################
1530485519010:# Install required packages
1530485519011:# personal.lib.path <- Sys.getenv("R_LIBS_USER")
1530485519011:# if(!file.exists(personal.lib.path))
1530485519011:#   dir.create(personal.lib.path)
1530485519012:installAndLoadPackages <- function(pkg){
1530485519012:cat("Please wait a moment! Checking for required packages... ")
1530485519013:cat("Done!\n")
1530485519013:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1530485519013:if (length(new.pkg)) {
1530485519014:cat("Installing new packages... ")
1530485519014:install.packages(new.pkg, dependencies = TRUE,
1530485519014:repos="http://cran.rstudio.com/") #,
1530485519015:# lib = personal.lib.path)
1530485519015:cat("Done!\n")
1530485519015:}
1530485519016:cat("Loading required packages... ")
1530485519016:sapply(pkg, function(x){
1530485519017:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1530485519017:})
1530485519017:cat("Done!\n")
1530485519018:}
1530485519019:# github.packages <- c("tibble")
1530485519019:# packages <- c("argparser", "tidyverse", "RColorBrewer")#, "ggplot2",  "tidyr")
1530485519020:packages <- c("argparser", "dplyr", "ggplot2", "RColorBrewer", "readr", "tidyr",
1530485519020:"caret")#, "ggplot2",  "tidyr")
1530485519021:installAndLoadPackages(packages)
1530485519025:################################################################################
1530485519025:# Get script name
1530485519026:initial.options <- commandArgs(trailingOnly = FALSE)
1530485519026:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1530485519027:# Process command line arguments
1530485519027:# Create a parser
1530485519027:p <- arg_parser("This script process results from STing detector",
1530485519028:name = script.name)
1530485519029:# Add Positional arguments (required inputs)
1530485519030:p <- add_argument(p, "blast_file", help = "BLAST results file")
1530485519031:p <- add_argument(p, "results_file", help = "Detector results file (tidy format)")
1530485519032:p <- add_argument(p, "identity", help = "BLAST identity cutoff",
1530485519032:default = 80)
1530485519033:p <- add_argument(p, "q_coverage", help = "BLAST query coverage cutoff",
1530485519034:default = 80)
1530485519035:# p <- add_argument(p, "genes_ref_file", help = "Genes ref file (short: tag and name)")
1530485519035:# p <- add_argument(p, "genes_full_ref_file", help = "Genes full ref file (short: tag, name adn others)")
1530485519036:# p <- add_argument(p, "genomes_ref_file", help = "Genomes ref file (short: Accn and Orgnism name)")
1530485519036:# Add options
1530485519036:# p <- add_argument(p, "--cutoff", help = "dentity and Coverage cutoff value",
1530485519037:#                   default = 80)
1530485519038:# # Parse command line arguments
1530485519038:# argv <- parse_args(p)
1530485519038:# Initialization of variables
1530485519039:# Values to test the script using RStudio
1530485519039:# testDir          <- "test_07_card"
1530485519039:# testDir          <- "test_08_card"
1530485519040:# testDir           <- "test_09_card"
1530485519040:testDir           <- "test_10_card"
1530485519040:blastFile         <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/card_vs_positive.blast.presence.tsv")
1530485519041:# resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/detector.tsv")
1530485519041:resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/results.tsv")
1530485519042:identity          <- 100
1530485519042:qcoverage         <- 100
1530485519043:# genesRefFile      <- "detector/card/prioritary_who_set/final_set/tags_names_xRef.tsv"
1530485519043:# genesFullRefFile  <- "detector/card/prioritary_who_set/final_set/card_tags_xRef.tsv"
1530485519043:# genomesRefFile    <- "detector/card/prioritary_who_set/final_set/genomesTableRef.tsv"
1530485519044:# cutoff            <- 100
1530485521573:qcoverage
1530485566884:qCoverage
1530485569584:#!/usr/bin/env Rscript
1530485569585:################################################################################
1530485569586:# Author:      Hector Fabio Espitia Navarro
1530485569587:#              Georgia Institute of Technology
1530485569587:# Version:     1.0
1530485569588:# Date:
1530485569589:# Description:
1530485569589:################################################################################
1530485569590:# Install required packages
1530485569591:# personal.lib.path <- Sys.getenv("R_LIBS_USER")
1530485569591:# if(!file.exists(personal.lib.path))
1530485569592:#   dir.create(personal.lib.path)
1530485569593:installAndLoadPackages <- function(pkg){
1530485569594:cat("Please wait a moment! Checking for required packages... ")
1530485569594:cat("Done!\n")
1530485569595:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1530485569595:if (length(new.pkg)) {
1530485569596:cat("Installing new packages... ")
1530485569596:install.packages(new.pkg, dependencies = TRUE,
1530485569596:repos="http://cran.rstudio.com/") #,
1530485569597:# lib = personal.lib.path)
1530485569597:cat("Done!\n")
1530485569597:}
1530485569598:cat("Loading required packages... ")
1530485569598:sapply(pkg, function(x){
1530485569599:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1530485569599:})
1530485569599:cat("Done!\n")
1530485569600:}
1530485569601:# github.packages <- c("tibble")
1530485569601:# packages <- c("argparser", "tidyverse", "RColorBrewer")#, "ggplot2",  "tidyr")
1530485569601:packages <- c("argparser", "dplyr", "ggplot2", "RColorBrewer", "readr", "tidyr",
1530485569602:"caret")#, "ggplot2",  "tidyr")
1530485569602:installAndLoadPackages(packages)
1530485569607:################################################################################
1530485569607:# Get script name
1530485569608:initial.options <- commandArgs(trailingOnly = FALSE)
1530485569608:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1530485569609:# Process command line arguments
1530485569609:# Create a parser
1530485569610:p <- arg_parser("This script process results from STing detector",
1530485569610:name = script.name)
1530485569612:# Add Positional arguments (required inputs)
1530485569612:p <- add_argument(p, "blast_file", help = "BLAST results file")
1530485569613:p <- add_argument(p, "results_file", help = "Detector results file (tidy format)")
1530485569614:p <- add_argument(p, "identity", help = "BLAST identity cutoff",
1530485569615:default = 80)
1530485569616:p <- add_argument(p, "q_coverage", help = "BLAST query coverage cutoff",
1530485569616:default = 80)
1530485569617:# p <- add_argument(p, "genes_ref_file", help = "Genes ref file (short: tag and name)")
1530485569617:# p <- add_argument(p, "genes_full_ref_file", help = "Genes full ref file (short: tag, name adn others)")
1530485569618:# p <- add_argument(p, "genomes_ref_file", help = "Genomes ref file (short: Accn and Orgnism name)")
1530485569618:# Add options
1530485569618:# p <- add_argument(p, "--cutoff", help = "dentity and Coverage cutoff value",
1530485569619:#                   default = 80)
1530485569619:# # Parse command line arguments
1530485569620:# argv <- parse_args(p)
1530485569620:# Initialization of variables
1530485569621:# Values to test the script using RStudio
1530485569621:# testDir          <- "test_07_card"
1530485569621:# testDir          <- "test_08_card"
1530485569621:# testDir           <- "test_09_card"
1530485569622:testDir           <- "test_10_card"
1530485569622:blastFile         <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/card_vs_positive.blast.presence.tsv")
1530485569623:# resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/detector.tsv")
1530485569623:resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/results.tsv")
1530485569624:identity          <- 100
1530485569624:qCoverage         <- 100
1530485569625:# genesRefFile      <- "detector/card/prioritary_who_set/final_set/tags_names_xRef.tsv"
1530485569625:# genesFullRefFile  <- "detector/card/prioritary_who_set/final_set/card_tags_xRef.tsv"
1530485569625:# genomesRefFile    <- "detector/card/prioritary_who_set/final_set/genomesTableRef.tsv"
1530485569626:# cutoff            <- 100
1530485569626:# Parse command line arguments
1530485569627:command.line = FALSE   # Turn to FALSE to test the script inside RStudio
1530485569627:argv <- list()
1530485569628:if(command.line) {
1530485569628:argv <- parse_args(p)
1530485569628:} else {
1530485569629:argv <- parse_args(p, list(blastFile, resultsFile, identity, qCoverage))#,
1530485569629:# genesRefFile, genesFullRefFile, genomesRefFile,
1530485569630:# "--cutoff", cutoff))
1530485569630:}
1530485569631:# Get argument values from command line
1530485569632:blastFile         <- argv$blast_file
1530485569632:resultsFile       <- argv$results_file
1530485569633:identity          <- argv$identity
1530485569633:qCoverage         <- argv$qcoverage
1530485569634:# genesRefFile      <- argv$genes_ref_file
1530485569634:# genesFullRefFile  <- argv$genes_full_ref_file
1530485569635:# genomesRefFile    <- argv$genomes_ref_file
1530485569635:# cutoff            <- argv$cutoff
1530485569635:# Function for checking input files ###########################################
1530485569636:CheckFileExists <- function(file.list) {
1530485569636:non.exist.files <- !file.exists(file.list)
1530485569636:if(any(non.exist.files)) {
1530485569637:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1530485569637:}
1530485569637:}
1530485569638:# Check for input files #######################################################
1530485569638:files.to.check <- c(blastFile, resultsFile)
1530485569639:error.message  <- CheckFileExists(files.to.check)
1530485569640:# if(!is.null(error.message)){
1530485569640:# stop(error.message)
1530485569640:# } else {
1530485569641:# Data --------------------------------------------------------------------
1530485569641:# Load data files
1530485569642:blastData    <- read_tsv(blastFile)
1530485569664:resultsData  <- read_tsv(resultsFile)
1530485569672:# genesRef     <- read_tsv(genesRefFile, col_names = c("GeneTag", "GeneName"))
1530485569673:# genesFullRef <- read_tsv(genesFullRefFile, col_names = c("GeneTag", "CARD_description"))
1530485569673:# genomesRef   <- read_tsv(genomesRefFile)
1530485569673:# Process results ---------------------------------------------------------
1530485569674:# cat(paste("Test directory:            ", testDir))
1530485569674:# cat(paste("Identity & Coverage cutoff:", cutoff))
1530485576518:qCoverage
1530485590703:list(blastFile, resultsFile, identity, qCoverage)
1530485594817:#!/usr/bin/env Rscript
1530485594818:################################################################################
1530485594819:# Author:      Hector Fabio Espitia Navarro
1530485594819:#              Georgia Institute of Technology
1530485594819:# Version:     1.0
1530485594820:# Date:
1530485594820:# Description:
1530485594820:################################################################################
1530485594821:# Install required packages
1530485594821:# personal.lib.path <- Sys.getenv("R_LIBS_USER")
1530485594821:# if(!file.exists(personal.lib.path))
1530485594821:#   dir.create(personal.lib.path)
1530485594822:installAndLoadPackages <- function(pkg){
1530485594822:cat("Please wait a moment! Checking for required packages... ")
1530485594823:cat("Done!\n")
1530485594823:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1530485594824:if (length(new.pkg)) {
1530485594824:cat("Installing new packages... ")
1530485594825:install.packages(new.pkg, dependencies = TRUE,
1530485594825:repos="http://cran.rstudio.com/") #,
1530485594826:# lib = personal.lib.path)
1530485594826:cat("Done!\n")
1530485594826:}
1530485594827:cat("Loading required packages... ")
1530485594827:sapply(pkg, function(x){
1530485594828:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1530485594828:})
1530485594829:cat("Done!\n")
1530485594829:}
1530485594830:# github.packages <- c("tibble")
1530485594831:# packages <- c("argparser", "tidyverse", "RColorBrewer")#, "ggplot2",  "tidyr")
1530485594831:packages <- c("argparser", "dplyr", "ggplot2", "RColorBrewer", "readr", "tidyr",
1530485594831:"caret")#, "ggplot2",  "tidyr")
1530485594832:installAndLoadPackages(packages)
1530485594835:################################################################################
1530485594836:# Get script name
1530485594836:initial.options <- commandArgs(trailingOnly = FALSE)
1530485594837:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1530485594837:# Process command line arguments
1530485594838:# Create a parser
1530485594838:p <- arg_parser("This script process results from STing detector",
1530485594838:name = script.name)
1530485594840:# Add Positional arguments (required inputs)
1530485594840:p <- add_argument(p, "blast_file", help = "BLAST results file")
1530485594841:p <- add_argument(p, "results_file", help = "Detector results file (tidy format)")
1530485594842:p <- add_argument(p, "identity", help = "BLAST identity cutoff",
1530485594842:default = 80)
1530485594844:p <- add_argument(p, "q_coverage", help = "BLAST query coverage cutoff",
1530485594844:default = 80)
1530485594845:# p <- add_argument(p, "genes_ref_file", help = "Genes ref file (short: tag and name)")
1530485594846:# p <- add_argument(p, "genes_full_ref_file", help = "Genes full ref file (short: tag, name adn others)")
1530485594846:# p <- add_argument(p, "genomes_ref_file", help = "Genomes ref file (short: Accn and Orgnism name)")
1530485594846:# Add options
1530485594846:# p <- add_argument(p, "--cutoff", help = "dentity and Coverage cutoff value",
1530485594847:#                   default = 80)
1530485594847:# # Parse command line arguments
1530485594848:# argv <- parse_args(p)
1530485594848:# Initialization of variables
1530485594848:# Values to test the script using RStudio
1530485594849:# testDir          <- "test_07_card"
1530485594849:# testDir          <- "test_08_card"
1530485594849:# testDir           <- "test_09_card"
1530485594850:testDir           <- "test_10_card"
1530485594850:blastFile         <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/card_vs_positive.blast.presence.tsv")
1530485594851:# resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/detector.tsv")
1530485594851:resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/results.tsv")
1530485594852:identity          <- 100
1530485594852:qCoverage         <- 100
1530485594853:# genesRefFile      <- "detector/card/prioritary_who_set/final_set/tags_names_xRef.tsv"
1530485594853:# genesFullRefFile  <- "detector/card/prioritary_who_set/final_set/card_tags_xRef.tsv"
1530485594853:# genomesRefFile    <- "detector/card/prioritary_who_set/final_set/genomesTableRef.tsv"
1530485594854:# cutoff            <- 100
1530485596540:# Parse command line arguments
1530485596541:command.line = FALSE   # Turn to FALSE to test the script inside RStudio
1530485597369:argv <- list()
1530485597819:if(command.line) {
1530485597819:argv <- parse_args(p)
1530485597820:} else {
1530485597821:argv <- parse_args(p, list(blastFile, resultsFile, identity, qCoverage))#,
1530485597821:# genesRefFile, genesFullRefFile, genomesRefFile,
1530485597822:# "--cutoff", cutoff))
1530485597822:}
1530485602691:list(blastFile, resultsFile, identity, qCoverage)
1530485630956:# Get argument values from command line
1530485630957:blastFile         <- argv$blast_file
1530485631273:resultsFile       <- argv$results_file
1530485631614:identity          <- argv$identity
1530485631992:qCoverage         <- argv$q_coverage
1530485634273:qCoverage
1530485637369:# Function for checking input files ###########################################
1530485637370:CheckFileExists <- function(file.list) {
1530485637370:non.exist.files <- !file.exists(file.list)
1530485637370:if(any(non.exist.files)) {
1530485637371:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1530485637371:}
1530485637372:}
1530485637861:files.to.check <- c(blastFile, resultsFile)
1530485638237:error.message  <- CheckFileExists(files.to.check)
1530485642005:blastData    <- read_tsv(blastFile)
1530485642027:resultsData  <- read_tsv(resultsFile)
1530485642036:# genesRef     <- read_tsv(genesRefFile, col_names = c("GeneTag", "GeneName"))
1530485642036:# genesFullRef <- read_tsv(genesFullRefFile, col_names = c("GeneTag", "CARD_description"))
1530485642036:# genomesRef   <- read_tsv(genomesRefFile)
1530485642037:# Process results ---------------------------------------------------------
1530485642038:# cat(paste("Test directory:            ", testDir))
1530485642038:# cat(paste("Identity & Coverage cutoff:", cutoff))
1530485642038:(amrGenes <- blastData %>%
1530485642039:select(Accn = qseqid) %>%
1530485642039:unique() %>% pull())
1530485642067:(genomes <- blastData %>%
1530485642068:select(GeneTag = sseqid) %>%
1530485642068:unique() %>% pull())
1530485642075:presenceTable <- data.frame()
1530485647305:for (gene in amrGenes) {
1530485647305:for (genome in genomes) {
1530485647306:queryResult <- blastData %>%
1530485647306:filter(qseqid == gene,
1530485647306:sseqid == genome,
1530485647307:pident >= identity,
1530485647307:qcovhsp >= qCoverage)
1530485647307:presence <- 0
1530485647308:if (nrow(queryResult) > 0){
1530485647308:presence <- 1
1530485647308:}
1530485647309:row <- as.data.frame(t(c(genome, gene, presence)))
1530485647309:presenceTable <- rbind(presenceTable, row)
1530485647310:}
1530485647310:}
1530486465786:presenceTable <- data.frame()
1530486466678:for (gene in amrGenes[1:4] ) {
1530486466678:for (genome in genomes[1:4]) {
1530486466679:queryResult <- blastData %>%
1530486466679:filter(qseqid == gene,
1530486466680:sseqid == genome,
1530486466680:pident >= identity,
1530486466681:qcovhsp >= qCoverage)
1530486466681:presence <- 0
1530486466681:if (nrow(queryResult) > 0){
1530486466682:presence <- 1
1530486466682:}
1530486466683:row <- as.data.frame(t(c(genome, gene, presence)))
1530486466683:presenceTable <- rbind(presenceTable, row)
1530486466683:}
1530486466684:}
1530486467766:presenceTable
1530488430211:blastFile         <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/card_vs_positive.unique.blast")
1530488437203:# Load data files
1530488437203:blastData    <- read_tsv(blastFile)
1530488479007:# Load data files
1530488479007:blastData    <- read_tsv(blastFile)
1530489213312:# Load data files
1530489213312:blastData    <- read_tsv(blastFile)
1530489214977:resultsData  <- read_tsv(resultsFile)
1530489217198:# Load data files
1530489217198:blastData    <- read_tsv(blastFile)
1530489220580:#!/usr/bin/env Rscript
1530489220581:################################################################################
1530489220582:# Author:      Hector Fabio Espitia Navarro
1530489220582:#              Georgia Institute of Technology
1530489220583:# Version:     1.0
1530489220583:# Date:
1530489220584:# Description:
1530489220584:################################################################################
1530489220585:# Install required packages
1530489220585:# personal.lib.path <- Sys.getenv("R_LIBS_USER")
1530489220586:# if(!file.exists(personal.lib.path))
1530489220586:#   dir.create(personal.lib.path)
1530489220587:installAndLoadPackages <- function(pkg){
1530489220588:cat("Please wait a moment! Checking for required packages... ")
1530489220589:cat("Done!\n")
1530489220589:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1530489220590:if (length(new.pkg)) {
1530489220590:cat("Installing new packages... ")
1530489220591:install.packages(new.pkg, dependencies = TRUE,
1530489220592:repos="http://cran.rstudio.com/") #,
1530489220594:# lib = personal.lib.path)
1530489220595:cat("Done!\n")
1530489220596:}
1530489220596:cat("Loading required packages... ")
1530489220597:sapply(pkg, function(x){
1530489220598:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1530489220598:})
1530489220599:cat("Done!\n")
1530489220600:}
1530489220602:# github.packages <- c("tibble")
1530489220602:# packages <- c("argparser", "tidyverse", "RColorBrewer")#, "ggplot2",  "tidyr")
1530489220603:packages <- c("argparser", "dplyr", "ggplot2", "RColorBrewer", "readr", "tidyr",
1530489220603:"caret")#, "ggplot2",  "tidyr")
1530489220604:installAndLoadPackages(packages)
1530489220617:################################################################################
1530489220618:# Get script name
1530489220619:initial.options <- commandArgs(trailingOnly = FALSE)
1530489220619:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1530489220621:# Process command line arguments
1530489220621:# Create a parser
1530489220622:p <- arg_parser("This script process results from STing detector",
1530489220622:name = script.name)
1530489220625:# Add Positional arguments (required inputs)
1530489220626:p <- add_argument(p, "blast_file", help = "BLAST results file")
1530489220628:p <- add_argument(p, "results_file", help = "Detector results file (tidy format)")
1530489220630:p <- add_argument(p, "identity", help = "BLAST identity cutoff",
1530489220630:default = 80)
1530489220632:p <- add_argument(p, "q_coverage", help = "BLAST query coverage cutoff",
1530489220632:default = 80)
1530489220634:# p <- add_argument(p, "genes_ref_file", help = "Genes ref file (short: tag and name)")
1530489220634:# p <- add_argument(p, "genes_full_ref_file", help = "Genes full ref file (short: tag, name adn others)")
1530489220635:# p <- add_argument(p, "genomes_ref_file", help = "Genomes ref file (short: Accn and Orgnism name)")
1530489220635:# Add options
1530489220636:# p <- add_argument(p, "--cutoff", help = "dentity and Coverage cutoff value",
1530489220636:#                   default = 80)
1530489220637:# # Parse command line arguments
1530489220638:# argv <- parse_args(p)
1530489220638:# Initialization of variables
1530489220639:# Values to test the script using RStudio
1530489220639:# testDir          <- "test_07_card"
1530489220640:# testDir          <- "test_08_card"
1530489220640:# testDir           <- "test_09_card"
1530489220641:testDir           <- "test_10_card"
1530489220642:blastFile         <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/card_vs_positive.unique.blast")
1530489220643:# resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/detector.tsv")
1530489220643:resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/results.tsv")
1530489220644:identity          <- 100
1530489220645:qCoverage         <- 100
1530489220646:# genesRefFile      <- "detector/card/prioritary_who_set/final_set/tags_names_xRef.tsv"
1530489220646:# genesFullRefFile  <- "detector/card/prioritary_who_set/final_set/card_tags_xRef.tsv"
1530489220647:# genomesRefFile    <- "detector/card/prioritary_who_set/final_set/genomesTableRef.tsv"
1530489220647:# cutoff            <- 100
1530489220648:# Parse command line arguments
1530489220649:command.line = FALSE   # Turn to FALSE to test the script inside RStudio
1530489220650:argv <- list()
1530489220651:if(command.line) {
1530489220651:argv <- parse_args(p)
1530489220652:} else {
1530489220652:argv <- parse_args(p, list(blastFile, resultsFile, identity, qCoverage))#,
1530489220653:# genesRefFile, genesFullRefFile, genomesRefFile,
1530489220653:# "--cutoff", cutoff))
1530489220654:}
1530489220656:# Get argument values from command line
1530489220656:blastFile         <- argv$blast_file
1530489220657:resultsFile       <- argv$results_file
1530489220658:identity          <- argv$identity
1530489220659:qCoverage         <- argv$q_coverage
1530489220660:# genesRefFile      <- argv$genes_ref_file
1530489220660:# genesFullRefFile  <- argv$genes_full_ref_file
1530489220661:# genomesRefFile    <- argv$genomes_ref_file
1530489220661:# cutoff            <- argv$cutoff
1530489220662:# Function for checking input files ###########################################
1530489220663:CheckFileExists <- function(file.list) {
1530489220663:non.exist.files <- !file.exists(file.list)
1530489220664:if(any(non.exist.files)) {
1530489220665:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1530489220665:}
1530489220665:}
1530489220666:# Check for input files #######################################################
1530489220667:files.to.check <- c(blastFile, resultsFile)
1530489220667:error.message  <- CheckFileExists(files.to.check)
1530489220668:# if(!is.null(error.message)){
1530489220668:# stop(error.message)
1530489220669:# } else {
1530489220670:# Data --------------------------------------------------------------------
1530489222287:# Load data files
1530489222288:blastData    <- read_tsv(blastFile)
1530489398137:# Load data files
1530489398138:blastData    <- read_tsv(blastFile)
1530489593880:blastFile         <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/card_vs_positive.unique.blast")
1530489597981:# Get argument values from command line
1530489597982:blastFile         <- argv$blast_file
1530489609261:# Load data files
1530489609262:blastData    <- read_tsv(blastFile)
1530489625555:resultsData  <- read_tsv(resultsFile)
1530489628743:(amrGenes <- blastData %>%
1530489628744:select(Accn = qseqid) %>%
1530489628744:unique() %>% pull())
1530489631050:(genomes <- blastData %>%
1530489631051:select(GeneTag = sseqid) %>%
1530489631051:unique() %>% pull())
1530489642113:blastData %>%
1530489642114:select(Accn = qseqid) %>%
1530489642114:unique()
1530489647037:blastData %>%
1530489647038:select(GeneTag = sseqid)
1530489655062:blastData %>%
1530489655063:select(GeneTag = sseqid) %>%
1530489655063:unique()
1530489866005:# (blastFilteredResults <- blastData %>%
1530489866006:#    arrange(sseqid, qseqid, desc(bitscore), evalue, desc(pident), desc(qcovhsp)) %>%
1530489866006:#    select(sseqid, qseqid, bitscore, evalue, pident, qcovhsp, sstart, send) %>%
1530489866007:#    group_by(sseqid, qseqid) %>%
1530489866008:#    top_n(n = 1, wt = bitscore)
1530489866008:#   )
1530489866009:(blastFilteredResults <- blastData %>%
1530489866009:mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1, 0)) %>%
1530489866010:select(Accn = qseqid, GeneTag = sseqid, BlastPresence) %>%
1530489866011:spread(Accn, BlastPresence)
1530489866011:)
1530489914491:View(blastFilteredResults)
1530489990000:# (blastFilteredResults <- blastData %>%
1530489990000:#    arrange(sseqid, qseqid, desc(bitscore), evalue, desc(pident), desc(qcovhsp)) %>%
1530489990001:#    select(sseqid, qseqid, bitscore, evalue, pident, qcovhsp, sstart, send) %>%
1530489990002:#    group_by(sseqid, qseqid) %>%
1530489990002:#    top_n(n = 1, wt = bitscore)
1530489990003:#   )
1530489990003:(blastFilteredResults <- blastData %>%
1530489990004:mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1, 0)) %>%
1530489990004:select(Accn = qseqid, GeneTag = sseqid, BlastPresence) %>%
1530489990005:spread(GeneTag, BlastPresence)
1530489990005:)
1530490024978:# (blastFilteredResults <- blastData %>%
1530490024978:#    arrange(sseqid, qseqid, desc(bitscore), evalue, desc(pident), desc(qcovhsp)) %>%
1530490024979:#    select(sseqid, qseqid, bitscore, evalue, pident, qcovhsp, sstart, send) %>%
1530490024979:#    group_by(sseqid, qseqid) %>%
1530490024979:#    top_n(n = 1, wt = bitscore)
1530490024980:#   )
1530490024980:(blastFilteredResults <- blastData %>%
1530490024980:mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1, 0)) %>%
1530490024981:select(Accn = sseqid, GeneTag = qseqid, BlastPresence) %>%
1530490024981:spread(GeneTag, BlastPresence)
1530490024981:)
1530490032212:# (blastFilteredResults <- blastData %>%
1530490032212:#    arrange(sseqid, qseqid, desc(bitscore), evalue, desc(pident), desc(qcovhsp)) %>%
1530490032213:#    select(sseqid, qseqid, bitscore, evalue, pident, qcovhsp, sstart, send) %>%
1530490032213:#    group_by(sseqid, qseqid) %>%
1530490032214:#    top_n(n = 1, wt = bitscore)
1530490032214:#   )
1530490032215:(blastFilteredResults <- blastData %>%
1530490032216:mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1, 0)) %>%
1530490032216:select(Accn = sseqid, GeneTag = qseqid, BlastPresence) %>%
1530490032217:spread(Accn, BlastPresence)
1530490032217:)
1530490096209:blastData %>%
1530490096210:mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1, 0)) %>%
1530490096211:filter(BlastPresence == 1)
1530490132393:blastData %>%
1530490132394:mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1, 0)) %>%
1530490132394:filter(BlastPresence == 1) %>%
1530490132395:spread(Accn, BlastPresence)
1530490142374:blastData %>%
1530490142374:mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1, 0)) %>%
1530490142375:filter(BlastPresence == 1) %>%
1530490142375:select(Accn = sseqid, GeneTag = qseqid, BlastPresence) %>%
1530490142375:spread(Accn, BlastPresence)
1530490198005:(blastFilteredResults <- blastData %>%
1530490198006:mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1, 0)) %>%
1530490198006:filter(BlastPresence == 1) %>%
1530490198007:select(Accn = sseqid, GeneTag = qseqid, BlastPresence) %>%
1530490198007:spread(Accn, BlastPresence)
1530490198007:)
1530490200839:View(blastFilteredResults)
1530490254632:(blastFilteredResults <- blastData %>%
1530490254633:mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1, 0)) %>%
1530490254634:filter(BlastPresence == 1) %>%
1530490254634:select(Accn = sseqid, GeneTag = qseqid, BlastPresence) %>%
1530490254635:spread(Accn, BlastPresence, fill = 0)
1530490254635:)
1530490274522:(blastFilteredResults <- blastData %>%
1530490274523:mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1L, 0L)) %>%
1530490274524:filter(BlastPresence == 1L) %>%
1530490274524:select(Accn = sseqid, GeneTag = qseqid, BlastPresence) %>%
1530490274525:spread(Accn, BlastPresence, fill = 0L)
1530490274525:)
1530490620920:resultsData
1530490645382:resultsData %>%
1530490645382:filter(SampleType == "positive")
1530490690878:resultsData %>%
1530490690878:filter(SampleType == "positive") %>%
1530490690879:select(Accn) %>%
1530490690879:unique()
1530490752458:resultsData %>%
1530490752458:filter(SampleType == "positive") %>%
1530490752459:select(GeneTag) %>%
1530490752459:unique()
1530490780715:(amrGenes_detector <- resultsData %>%
1530490780715:filter(SampleType == "positive") %>%
1530490780716:select(Accn) %>%
1530490780717:unique() %>% pull())
1530490781169:(genomes_detector <- resultsData %>%
1530490781170:filter(SampleType == "positive") %>%
1530490781170:select(GeneTag) %>%
1530490781171:unique() %>% pull())
1530490807345:setdiff(amrGenes, amrGenes_detector)
1530490819091:setdiff(amrGenes, amrGenes_detector)
1530490829958:setdiff(genomes, genomes_detector)
1530490839745:genomes
1530490844026:genomes_detector
1530490855016:genomes_detector
1530490857556:genomes
1530490873209:(amrGenes_detector <- resultsData %>%
1530490873210:filter(SampleType == "positive") %>%
1530490873210:select(GeneTag) %>%
1530490873211:unique() %>% pull())
1530490873955:(genomes_detector <- resultsData %>%
1530490873956:filter(SampleType == "positive") %>%
1530490873956:select(Accn) %>%
1530490873956:unique() %>% pull())
1530490875308:setdiff(genomes, genomes_detector)
1530490886366:genomes
1530490889158:genomes_detector
1530490970943:blastFilteredResults %>% pull(Accn) %>% unique()
1530490985230:setdiff(blastFilteredResults %>% select(Accn) %>% pull() %>% unique(), genomes_detector)
1530490999753:setdiff(blastFilteredResults %>% select(sseqid) %>% pull() %>% unique(), genomes_detector)
1530491049250:(blastFilteredResults <- blastData %>%
1530491049251:mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1L, 0L)) %>%
1530491049252:filter(BlastPresence == 1L)
1530491049252:)
1530491064306:# BLAST Table presence/absence
1530491064307:(blastPresenceTable <- blastData %>%
1530491064307:mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1L, 0L)) %>%
1530491064308:filter(BlastPresence == 1L) %>%
1530491064309:select(Accn = sseqid, GeneTag = qseqid, BlastPresence) %>%
1530491064309:spread(Accn, BlastPresence, fill = 0L)
1530491064310:)
1530491072660:blastFilteredResults %>% select(Accn) %>% pull() %>% unique()
1530491084573:setdiff(blastFilteredResults %>% select(sseqid) %>% pull() %>% unique(), genomes_detector)
1530491089286:blastFilteredResults %>% select(sseqid)
1530491098055:blastFilteredResults %>% select(sseqid) %>% pull()
1530491101715:blastFilteredResults %>% select(sseqid) %>% pull() %>% unique()
1530491124614:setdiff(blastFilteredResults %>% select(qseqid) %>% pull() %>% unique(), amrGenes_detector)
1530491215381:# Detector Table presence/absence (whole DB)
1530491215382:(detectorFilteredResults_wdb <- resultsData %>%
1530491215382:filter(SampleType == "positive") %>%
1530491215383:mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1L, 0L)) %>%
1530491215384:filter(BlastPresence == 1L) %>%
1530491215384:select(Accn = sseqid, GeneTag = qseqid, BlastPresence) %>%
1530491215385:spread(Accn, BlastPresence, fill = 0L)
1530491215385:)
1530491235360:resultsData %>%
1530491235361:filter(SampleType == "positive")
1530491259295:#!/usr/bin/env Rscript
1530491259295:################################################################################
1530491259296:# Author:      Hector Fabio Espitia Navarro
1530491259296:#              Georgia Institute of Technology
1530491259297:# Version:     1.0
1530491259297:# Date:
1530491259297:# Description:
1530491259298:################################################################################
1530491259298:# Install required packages
1530491259298:# personal.lib.path <- Sys.getenv("R_LIBS_USER")
1530491259299:# if(!file.exists(personal.lib.path))
1530491259299:#   dir.create(personal.lib.path)
1530491259299:installAndLoadPackages <- function(pkg){
1530491259300:cat("Please wait a moment! Checking for required packages... ")
1530491259300:cat("Done!\n")
1530491259301:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1530491259301:if (length(new.pkg)) {
1530491259301:cat("Installing new packages... ")
1530491259302:install.packages(new.pkg, dependencies = TRUE,
1530491259302:repos="http://cran.rstudio.com/") #,
1530491259303:# lib = personal.lib.path)
1530491259303:cat("Done!\n")
1530491259304:}
1530491259304:cat("Loading required packages... ")
1530491259305:sapply(pkg, function(x){
1530491259305:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1530491259306:})
1530491259306:cat("Done!\n")
1530491259307:}
1530491259308:# github.packages <- c("tibble")
1530491259308:# packages <- c("argparser", "tidyverse", "RColorBrewer")#, "ggplot2",  "tidyr")
1530491259309:packages <- c("argparser", "dplyr", "ggplot2", "RColorBrewer", "readr", "tidyr",
1530491259309:"caret")#, "ggplot2",  "tidyr")
1530491259309:installAndLoadPackages(packages)
1530491259314:################################################################################
1530491259314:# Get script name
1530491259315:initial.options <- commandArgs(trailingOnly = FALSE)
1530491259315:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1530491259316:# Process command line arguments
1530491259317:# Create a parser
1530491259317:p <- arg_parser("This script process results from STing detector",
1530491259317:name = script.name)
1530491259319:# Add Positional arguments (required inputs)
1530491259319:p <- add_argument(p, "blast_file", help = "BLAST results file")
1530491259321:p <- add_argument(p, "results_file", help = "Detector results file (tidy format)")
1530491259322:p <- add_argument(p, "identity", help = "BLAST identity cutoff",
1530491259322:default = 80)
1530491259323:p <- add_argument(p, "q_coverage", help = "BLAST query coverage cutoff",
1530491259324:default = 80)
1530491259325:# p <- add_argument(p, "genes_ref_file", help = "Genes ref file (short: tag and name)")
1530491259325:# p <- add_argument(p, "genes_full_ref_file", help = "Genes full ref file (short: tag, name adn others)")
1530491259325:# p <- add_argument(p, "genomes_ref_file", help = "Genomes ref file (short: Accn and Orgnism name)")
1530491259326:# Add options
1530491259326:# p <- add_argument(p, "--cutoff", help = "dentity and Coverage cutoff value",
1530491259326:#                   default = 80)
1530491259327:# # Parse command line arguments
1530491259327:# argv <- parse_args(p)
1530491259328:# Initialization of variables
1530491259328:# Values to test the script using RStudio
1530491259329:# testDir          <- "test_07_card"
1530491259329:# testDir          <- "test_08_card"
1530491259329:# testDir           <- "test_09_card"
1530491259330:testDir           <- "test_10_card"
1530491259330:blastFile         <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/card_vs_positive.unique.blast")
1530491259331:# resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/detector.tsv")
1530491259331:resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/results.tsv")
1530491259332:identity          <- 100
1530491259332:qCoverage         <- 100
1530491259333:# genesRefFile      <- "detector/card/prioritary_who_set/final_set/tags_names_xRef.tsv"
1530491259333:# genesFullRefFile  <- "detector/card/prioritary_who_set/final_set/card_tags_xRef.tsv"
1530491259333:# genomesRefFile    <- "detector/card/prioritary_who_set/final_set/genomesTableRef.tsv"
1530491259334:# cutoff            <- 100
1530491259334:# Parse command line arguments
1530491259335:command.line = FALSE   # Turn to FALSE to test the script inside RStudio
1530491259335:argv <- list()
1530491259336:if(command.line) {
1530491259336:argv <- parse_args(p)
1530491259336:} else {
1530491259337:argv <- parse_args(p, list(blastFile, resultsFile, identity, qCoverage))#,
1530491259337:# genesRefFile, genesFullRefFile, genomesRefFile,
1530491259337:# "--cutoff", cutoff))
1530491259338:}
1530491259339:# Get argument values from command line
1530491259340:blastFile         <- argv$blast_file
1530491259340:resultsFile       <- argv$results_file
1530491259341:identity          <- argv$identity
1530491259341:qCoverage         <- argv$q_coverage
1530491259342:# genesRefFile      <- argv$genes_ref_file
1530491259342:# genesFullRefFile  <- argv$genes_full_ref_file
1530491259342:# genomesRefFile    <- argv$genomes_ref_file
1530491259343:# cutoff            <- argv$cutoff
1530491259343:# Function for checking input files ###########################################
1530491259343:CheckFileExists <- function(file.list) {
1530491259344:non.exist.files <- !file.exists(file.list)
1530491259344:if(any(non.exist.files)) {
1530491259345:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1530491259345:}
1530491259345:}
1530491259346:# Check for input files #######################################################
1530491259346:files.to.check <- c(blastFile, resultsFile)
1530491259347:error.message  <- CheckFileExists(files.to.check)
1530491259348:# if(!is.null(error.message)){
1530491259348:# stop(error.message)
1530491259348:# } else {
1530491259349:# Data --------------------------------------------------------------------
1530491259349:# Load data files
1530491259350:blastData    <- read_tsv(blastFile)
1530491259367:resultsData  <- read_tsv(resultsFile)
1530491259374:# genesRef     <- read_tsv(genesRefFile, col_names = c("GeneTag", "GeneName"))
1530491259375:# genesFullRef <- read_tsv(genesFullRefFile, col_names = c("GeneTag", "CARD_description"))
1530491259375:# genomesRef   <- read_tsv(genomesRefFile)
1530491259376:# Process results ---------------------------------------------------------
1530491259376:# cat(paste("Test directory:            ", testDir))
1530491259377:# cat(paste("Identity & Coverage cutoff:", cutoff))
1530491259377:(amrGenes <- blastData %>%
1530491259377:select(Accn = qseqid) %>%
1530491259378:unique() %>% pull())
1530491259410:(genomes <- blastData %>%
1530491259410:select(GeneTag = sseqid) %>%
1530491259410:unique() %>% pull())
1530491259418:# (blastFilteredResults <- blastData %>%
1530491259418:#     mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1, 0)) %>%
1530491259419:#     select(Accn = sseqid, GeneTag = qseqid, BlastPresence) %>%
1530491259419:#     spread(Accn, BlastPresence)
1530491259420:# )
1530491259421:(blastFilteredResults <- blastData %>%
1530491259421:mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1L, 0L)) %>%
1530491259422:filter(BlastPresence == 1L)
1530491259422:)
1530491259672:# BLAST Table presence/absence
1530491259673:(blastPresenceTable <- blastData %>%
1530491259673:mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1L, 0L)) %>%
1530491259673:filter(BlastPresence == 1L) %>%
1530491259674:select(Accn = sseqid, GeneTag = qseqid, BlastPresence) %>%
1530491259674:spread(Accn, BlastPresence, fill = 0L)
1530491259674:)
1530491259907:(amrGenes_detector <- resultsData %>%
1530491259907:filter(SampleType == "positive") %>%
1530491259908:select(GeneTag) %>%
1530491259908:unique() %>% pull())
1530491259919:(genomes_detector <- resultsData %>%
1530491259919:filter(SampleType == "positive") %>%
1530491259920:select(Accn) %>%
1530491259920:unique() %>% pull())
1530491262014:setdiff(blastFilteredResults %>% select(sseqid) %>% pull() %>% unique(), genomes_detector)
1530491262755:setdiff(blastFilteredResults %>% select(qseqid) %>% pull() %>% unique(), amrGenes_detector)
1530491315725:# Check if there are the same number of genes and genomes in both datasets
1530491315726:# (BLAST and detector)
1530491315726:setdiff(blastFilteredResults %>% select(sseqid) %>% pull() %>% unique(),
1530491315727:genomes_detector)
1530491316176:setdiff(blastFilteredResults %>% select(qseqid) %>% pull() %>% unique(),
1530491316177:amrGenes_detector)
1530491328264:blastFilteredResults %>% select(sseqid) %>% pull() %>% unique()
1530491331638:genomes_detector
1530491336388:amrGenes_detector
1530491343533:blastFilteredResults %>% select(qseqid) %>% pull() %>% unique()
1530491348637:amrGenes_detector
1530491399550:resultsData %>%
1530491399550:filter(SampleType == "positive") %>%
1530491399551:select(Accn, GeneTag, DetectorPresence)
1530491416913:# Detector Table presence/absence (whole DB)
1530491416914:(detectorFilteredResults_wdb <- resultsData %>%
1530491416914:filter(SampleType == "positive") %>%
1530491416914:select(Accn, GeneTag, DetectorPresence) %>%
1530491416915:spread(Accn, DetectorPresence)#, fill = 0L)
1530491416915:)
1530491463878:# Detector Table presence/absence (whole DB)
1530491463879:(detectorFilteredResults_wdb <- resultsData %>%
1530491463879:filter(SampleType == "positive",
1530491463880:SeqDepth == 20) %>%
1530491463881:select(Accn, GeneTag, DetectorPresence) %>%
1530491463881:spread(Accn, DetectorPresence)#, fill = 0L)
1530491463882:)
1530491492955:# Detector Table presence/absence (whole DB)
1530491492956:(detectorFilteredResults_wdb <- resultsData %>%
1530491492957:filter(SampleType == "positive",
1530491492957:SeqDepth == 20) %>%
1530491492958:select(Accn, GeneTag, DetectorPresence) %>%
1530491492959:spread(Accn, DetectorPresence, fill = 0L)
1530491492960:)
1530491543331:(detectorFilteredResults_wdb_40x <- resultsData %>%
1530491543332:filter(SampleType == "positive",
1530491543332:SeqDepth == 40) %>%
1530491543333:select(Accn, GeneTag, DetectorPresence) %>%
1530491543334:spread(Accn, DetectorPresence, fill = 0L)
1530491543334:)
1530491559993:# Detector Table presence/absence (whole DB)
1530491559994:(detectorFilteredResults_wdb_20x <- resultsData %>%
1530491559995:filter(SampleType == "positive",
1530491559995:SeqDepth == 20) %>%
1530491559996:select(Accn, GeneTag, DetectorPresence) %>%
1530491559996:spread(Accn, DetectorPresence)#, fill = 0L)
1530491559997:)
1530491562895:(detectorFilteredResults_wdb_40x <- resultsData %>%
1530491562896:filter(SampleType == "positive",
1530491562897:SeqDepth == 40) %>%
1530491562897:select(Accn, GeneTag, DetectorPresence) %>%
1530491562898:spread(Accn, DetectorPresence)#, fill = 0L)
1530491562898:)
1530491574561:#!/usr/bin/env Rscript
1530491574562:################################################################################
1530491574563:# Author:      Hector Fabio Espitia Navarro
1530491574563:#              Georgia Institute of Technology
1530491574564:# Version:     1.0
1530491574564:# Date:
1530491574565:# Description:
1530491574565:################################################################################
1530491574566:# Install required packages
1530491574566:# personal.lib.path <- Sys.getenv("R_LIBS_USER")
1530491574567:# if(!file.exists(personal.lib.path))
1530491574567:#   dir.create(personal.lib.path)
1530491574568:installAndLoadPackages <- function(pkg){
1530491574569:cat("Please wait a moment! Checking for required packages... ")
1530491574569:cat("Done!\n")
1530491574570:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1530491574570:if (length(new.pkg)) {
1530491574571:cat("Installing new packages... ")
1530491574574:install.packages(new.pkg, dependencies = TRUE,
1530491574575:repos="http://cran.rstudio.com/") #,
1530491574575:# lib = personal.lib.path)
1530491574576:cat("Done!\n")
1530491574576:}
1530491574577:cat("Loading required packages... ")
1530491574577:sapply(pkg, function(x){
1530491574578:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1530491574578:})
1530491574579:cat("Done!\n")
1530491574579:}
1530491574580:# github.packages <- c("tibble")
1530491574580:# packages <- c("argparser", "tidyverse", "RColorBrewer")#, "ggplot2",  "tidyr")
1530491574581:packages <- c("argparser", "dplyr", "ggplot2", "RColorBrewer", "readr", "tidyr",
1530491574582:"caret")#, "ggplot2",  "tidyr")
1530491574583:installAndLoadPackages(packages)
1530491574589:################################################################################
1530491574590:# Get script name
1530491574591:initial.options <- commandArgs(trailingOnly = FALSE)
1530491574592:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1530491574593:# Process command line arguments
1530491574594:# Create a parser
1530491574595:p <- arg_parser("This script process results from STing detector",
1530491574595:name = script.name)
1530491574598:# Add Positional arguments (required inputs)
1530491574599:p <- add_argument(p, "blast_file", help = "BLAST results file")
1530491574600:p <- add_argument(p, "results_file", help = "Detector results file (tidy format)")
1530491574602:p <- add_argument(p, "identity", help = "BLAST identity cutoff",
1530491574603:default = 80)
1530491574605:p <- add_argument(p, "q_coverage", help = "BLAST query coverage cutoff",
1530491574605:default = 80)
1530491574607:# p <- add_argument(p, "genes_ref_file", help = "Genes ref file (short: tag and name)")
1530491574608:# p <- add_argument(p, "genes_full_ref_file", help = "Genes full ref file (short: tag, name adn others)")
1530491574608:# p <- add_argument(p, "genomes_ref_file", help = "Genomes ref file (short: Accn and Orgnism name)")
1530491574609:# Add options
1530491574609:# p <- add_argument(p, "--cutoff", help = "dentity and Coverage cutoff value",
1530491574610:#                   default = 80)
1530491574611:# # Parse command line arguments
1530491574611:# argv <- parse_args(p)
1530491574612:# Initialization of variables
1530491574613:# Values to test the script using RStudio
1530491574613:# testDir          <- "test_07_card"
1530491574614:# testDir          <- "test_08_card"
1530491574614:# testDir           <- "test_09_card"
1530491574615:testDir           <- "test_10_card"
1530491574616:blastFile         <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/card_vs_positive.unique.blast")
1530491574617:# resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/detector.tsv")
1530491574617:resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/results.tsv")
1530491574618:identity          <- 100
1530491574619:qCoverage         <- 100
1530491574620:# genesRefFile      <- "detector/card/prioritary_who_set/final_set/tags_names_xRef.tsv"
1530491574621:# genesFullRefFile  <- "detector/card/prioritary_who_set/final_set/card_tags_xRef.tsv"
1530491574621:# genomesRefFile    <- "detector/card/prioritary_who_set/final_set/genomesTableRef.tsv"
1530491574622:# cutoff            <- 100
1530491574623:# Parse command line arguments
1530491574623:command.line = FALSE   # Turn to FALSE to test the script inside RStudio
1530491574624:argv <- list()
1530491574625:if(command.line) {
1530491574626:argv <- parse_args(p)
1530491574626:} else {
1530491574627:argv <- parse_args(p, list(blastFile, resultsFile, identity, qCoverage))#,
1530491574627:# genesRefFile, genesFullRefFile, genomesRefFile,
1530491574628:# "--cutoff", cutoff))
1530491574628:}
1530491574631:# Get argument values from command line
1530491574631:blastFile         <- argv$blast_file
1530491574632:resultsFile       <- argv$results_file
1530491574633:identity          <- argv$identity
1530491574634:qCoverage         <- argv$q_coverage
1530491574635:# genesRefFile      <- argv$genes_ref_file
1530491574635:# genesFullRefFile  <- argv$genes_full_ref_file
1530491574636:# genomesRefFile    <- argv$genomes_ref_file
1530491574636:# cutoff            <- argv$cutoff
1530491574637:# Function for checking input files ###########################################
1530491574637:CheckFileExists <- function(file.list) {
1530491574638:non.exist.files <- !file.exists(file.list)
1530491574639:if(any(non.exist.files)) {
1530491574639:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1530491574640:}
1530491574640:}
1530491574641:# Check for input files #######################################################
1530491574642:files.to.check <- c(blastFile, resultsFile)
1530491574643:error.message  <- CheckFileExists(files.to.check)
1530491574644:# if(!is.null(error.message)){
1530491574645:# stop(error.message)
1530491574645:# } else {
1530491574646:# Data --------------------------------------------------------------------
1530491574646:# Load data files
1530491574646:blastData    <- read_tsv(blastFile)
1530491574673:resultsData  <- read_tsv(resultsFile)
1530491574689:# genesRef     <- read_tsv(genesRefFile, col_names = c("GeneTag", "GeneName"))
1530491574689:# genesFullRef <- read_tsv(genesFullRefFile, col_names = c("GeneTag", "CARD_description"))
1530491574690:# genomesRef   <- read_tsv(genomesRefFile)
1530491574690:# Process results ---------------------------------------------------------
1530491574691:# cat(paste("Test directory:            ", testDir))
1530491574691:# cat(paste("Identity & Coverage cutoff:", cutoff))
1530491574691:(amrGenes <- blastData %>%
1530491574692:select(Accn = qseqid) %>%
1530491574692:unique() %>% pull())
1530491574743:(genomes <- blastData %>%
1530491574743:select(GeneTag = sseqid) %>%
1530491574744:unique() %>% pull())
1530491574752:# (blastFilteredResults <- blastData %>%
1530491574753:#     mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1, 0)) %>%
1530491574753:#     select(Accn = sseqid, GeneTag = qseqid, BlastPresence) %>%
1530491574754:#     spread(Accn, BlastPresence)
1530491574755:# )
1530491574756:(blastFilteredResults <- blastData %>%
1530491574756:mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1L, 0L)) %>%
1530491574757:filter(BlastPresence == 1L)
1530491574757:)
1530491574998:# BLAST Table presence/absence
1530491574998:(blastPresenceTable <- blastData %>%
1530491574999:mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1L, 0L)) %>%
1530491574999:filter(BlastPresence == 1L) %>%
1530491575000:select(Accn = sseqid, GeneTag = qseqid, BlastPresence) %>%
1530491575000:spread(Accn, BlastPresence, fill = 0L)
1530491575001:)
1530491575274:(amrGenes_detector <- resultsData %>%
1530491575275:filter(SampleType == "positive") %>%
1530491575275:select(GeneTag) %>%
1530491575276:unique() %>% pull())
1530491575286:(genomes_detector <- resultsData %>%
1530491575286:filter(SampleType == "positive") %>%
1530491575287:select(Accn) %>%
1530491575287:unique() %>% pull())
1530491575294:# Check if there are the same number of genes and genomes in both datasets
1530491575295:# (BLAST and detector)
1530491575295:setdiff(blastFilteredResults %>% select(sseqid) %>% pull() %>% unique(),
1530491575296:genomes_detector)
1530491575300:setdiff(blastFilteredResults %>% select(qseqid) %>% pull() %>% unique(),
1530491575301:amrGenes_detector)
1530491575306:# Detector Table presence/absence (whole DB)
1530491575307:(detectorFilteredResults_wdb_20x <- resultsData %>%
1530491575307:filter(SampleType == "positive",
1530491575308:SeqDepth == 20) %>%
1530491575308:select(Accn, GeneTag, DetectorPresence) %>%
1530491575309:spread(Accn, DetectorPresence)#, fill = 0L)
1530491575309:)
1530491575543:(detectorFilteredResults_wdb_40x <- resultsData %>%
1530491575544:filter(SampleType == "positive",
1530491575544:SeqDepth == 40) %>%
1530491575545:select(Accn, GeneTag, DetectorPresence) %>%
1530491575546:spread(Accn, DetectorPresence)#, fill = 0L)
1530491575546:)
1530491580686:View(detectorFilteredResults_wdb_20x)
1530491650608:#!/usr/bin/env Rscript
1530491650609:################################################################################
1530491650610:# Author:      Hector Fabio Espitia Navarro
1530491650610:#              Georgia Institute of Technology
1530491650610:# Version:     1.0
1530491650611:# Date:
1530491650611:# Description:
1530491650612:################################################################################
1530491650612:# Install required packages
1530491650612:# personal.lib.path <- Sys.getenv("R_LIBS_USER")
1530491650613:# if(!file.exists(personal.lib.path))
1530491650613:#   dir.create(personal.lib.path)
1530491650614:installAndLoadPackages <- function(pkg){
1530491650614:cat("Please wait a moment! Checking for required packages... ")
1530491650614:cat("Done!\n")
1530491650615:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1530491650615:if (length(new.pkg)) {
1530491650616:cat("Installing new packages... ")
1530491650616:install.packages(new.pkg, dependencies = TRUE,
1530491650616:repos="http://cran.rstudio.com/") #,
1530491650617:# lib = personal.lib.path)
1530491650617:cat("Done!\n")
1530491650618:}
1530491650618:cat("Loading required packages... ")
1530491650619:sapply(pkg, function(x){
1530491650619:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1530491650620:})
1530491650620:cat("Done!\n")
1530491650621:}
1530491650622:# github.packages <- c("tibble")
1530491650622:# packages <- c("argparser", "tidyverse", "RColorBrewer")#, "ggplot2",  "tidyr")
1530491650622:packages <- c("argparser", "dplyr", "ggplot2", "RColorBrewer", "readr", "tidyr",
1530491650623:"caret")#, "ggplot2",  "tidyr")
1530491650623:installAndLoadPackages(packages)
1530491650627:################################################################################
1530491650628:# Get script name
1530491650628:initial.options <- commandArgs(trailingOnly = FALSE)
1530491650629:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1530491650629:# Process command line arguments
1530491650630:# Create a parser
1530491650630:p <- arg_parser("This script process results from STing detector",
1530491650630:name = script.name)
1530491650632:# Add Positional arguments (required inputs)
1530491650633:p <- add_argument(p, "blast_file", help = "BLAST results file")
1530491650634:p <- add_argument(p, "results_file", help = "Detector results file (tidy format)")
1530491650635:p <- add_argument(p, "identity", help = "BLAST identity cutoff",
1530491650635:default = 80)
1530491650636:p <- add_argument(p, "q_coverage", help = "BLAST query coverage cutoff",
1530491650637:default = 80)
1530491650638:# p <- add_argument(p, "genes_ref_file", help = "Genes ref file (short: tag and name)")
1530491650638:# p <- add_argument(p, "genes_full_ref_file", help = "Genes full ref file (short: tag, name adn others)")
1530491650639:# p <- add_argument(p, "genomes_ref_file", help = "Genomes ref file (short: Accn and Orgnism name)")
1530491650639:# Add options
1530491650639:# p <- add_argument(p, "--cutoff", help = "dentity and Coverage cutoff value",
1530491650640:#                   default = 80)
1530491650640:# # Parse command line arguments
1530491650641:# argv <- parse_args(p)
1530491650641:# Initialization of variables
1530491650642:# Values to test the script using RStudio
1530491650642:# testDir          <- "test_07_card"
1530491650642:# testDir          <- "test_08_card"
1530491650643:# testDir           <- "test_09_card"
1530491650643:testDir           <- "test_10_card"
1530491650644:blastFile         <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/card_vs_positive.unique.blast")
1530491650644:# resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/detector.tsv")
1530491650644:resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/results.tsv")
1530491650645:identity          <- 100
1530491650646:qCoverage         <- 100
1530491650646:# genesRefFile      <- "detector/card/prioritary_who_set/final_set/tags_names_xRef.tsv"
1530491650646:# genesFullRefFile  <- "detector/card/prioritary_who_set/final_set/card_tags_xRef.tsv"
1530491650647:# genomesRefFile    <- "detector/card/prioritary_who_set/final_set/genomesTableRef.tsv"
1530491650647:# cutoff            <- 100
1530491650648:# Parse command line arguments
1530491650648:command.line = FALSE   # Turn to FALSE to test the script inside RStudio
1530491650649:argv <- list()
1530491650649:if(command.line) {
1530491650649:argv <- parse_args(p)
1530491650650:} else {
1530491650650:argv <- parse_args(p, list(blastFile, resultsFile, identity, qCoverage))#,
1530491650651:# genesRefFile, genesFullRefFile, genomesRefFile,
1530491650651:# "--cutoff", cutoff))
1530491650651:}
1530491650653:# Get argument values from command line
1530491650653:blastFile         <- argv$blast_file
1530491650654:resultsFile       <- argv$results_file
1530491650654:identity          <- argv$identity
1530491650655:qCoverage         <- argv$q_coverage
1530491650655:# genesRefFile      <- argv$genes_ref_file
1530491650655:# genesFullRefFile  <- argv$genes_full_ref_file
1530491650656:# genomesRefFile    <- argv$genomes_ref_file
1530491650656:# cutoff            <- argv$cutoff
1530491650656:# Function for checking input files ###########################################
1530491650657:CheckFileExists <- function(file.list) {
1530491650657:non.exist.files <- !file.exists(file.list)
1530491650657:if(any(non.exist.files)) {
1530491650658:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1530491650658:}
1530491650658:}
1530491650659:# Check for input files #######################################################
1530491650659:files.to.check <- c(blastFile, resultsFile)
1530491650660:error.message  <- CheckFileExists(files.to.check)
1530491650661:# if(!is.null(error.message)){
1530491650661:# stop(error.message)
1530491650661:# } else {
1530491650662:# Data --------------------------------------------------------------------
1530491650662:# Load data files
1530491650663:blastData    <- read_tsv(blastFile)
1530491650679:resultsData  <- read_tsv(resultsFile)
1530491650687:# genesRef     <- read_tsv(genesRefFile, col_names = c("GeneTag", "GeneName"))
1530491650687:# genesFullRef <- read_tsv(genesFullRefFile, col_names = c("GeneTag", "CARD_description"))
1530491650688:# genomesRef   <- read_tsv(genomesRefFile)
1530491650688:# Process results ---------------------------------------------------------
1530491650689:# cat(paste("Test directory:            ", testDir))
1530491650689:# cat(paste("Identity & Coverage cutoff:", cutoff))
1530491650690:(amrGenes <- blastData %>%
1530491650690:select(Accn = qseqid) %>%
1530491650691:unique() %>% pull())
1530491650731:(genomes <- blastData %>%
1530491650732:select(GeneTag = sseqid) %>%
1530491650733:unique() %>% pull())
1530491650742:# (blastFilteredResults <- blastData %>%
1530491650742:#     mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1, 0)) %>%
1530491650743:#     select(Accn = sseqid, GeneTag = qseqid, BlastPresence) %>%
1530491650743:#     spread(Accn, BlastPresence)
1530491650744:# )
1530491650745:(blastFilteredResults <- blastData %>%
1530491650745:mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1L, 0L)) %>%
1530491650746:filter(BlastPresence == 1L)
1530491650747:)
1530491651002:# BLAST Table presence/absence
1530491651002:(blastPresenceTable <- blastData %>%
1530491651003:mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1L, 0L)) %>%
1530491651003:filter(BlastPresence == 1L) %>%
1530491651004:select(Accn = sseqid, GeneTag = qseqid, BlastPresence) %>%
1530491651004:spread(Accn, BlastPresence, fill = 0L)
1530491651005:)
1530491651209:(amrGenes_detector <- resultsData %>%
1530491651210:filter(SampleType == "positive") %>%
1530491651210:select(GeneTag) %>%
1530491651210:unique() %>% pull())
1530491651217:(genomes_detector <- resultsData %>%
1530491651218:filter(SampleType == "positive") %>%
1530491651218:select(Accn) %>%
1530491651219:unique() %>% pull())
1530491651230:# Check if there are the same number of genes and genomes in both datasets
1530491651231:# (BLAST and detector)
1530491651231:setdiff(blastFilteredResults %>% select(sseqid) %>% pull() %>% unique(),
1530491651232:genomes_detector)
1530491651237:setdiff(blastFilteredResults %>% select(qseqid) %>% pull() %>% unique(),
1530491651238:amrGenes_detector)
1530491651243:# Detector Table presence/absence (whole DB)
1530491651244:# 20x
1530491651244:(blastPresenceTable_wdb_20x <- resultsData %>%
1530491651245:filter(SampleType == "positive",
1530491651245:SeqDepth == 20) %>%
1530491651246:select(Accn, GeneTag, DetectorPresence) %>%
1530491651246:spread(Accn, DetectorPresence, fill = 0L)
1530491651247:)
1530491651495:# 40x
1530491651496:(blastPresenceTable_wdb_40x <- resultsData %>%
1530491651496:filter(SampleType == "positive",
1530491651497:SeqDepth == 40) %>%
1530491651497:select(Accn, GeneTag, DetectorPresence) %>%
1530491651498:spread(Accn, DetectorPresence, fill = 0L)
1530491651498:)
1530491701036:#!/usr/bin/env Rscript
1530491701038:################################################################################
1530491701038:# Author:      Hector Fabio Espitia Navarro
1530491701039:#              Georgia Institute of Technology
1530491701039:# Version:     1.0
1530491701040:# Date:
1530491701040:# Description:
1530491701041:################################################################################
1530491701042:# Install required packages
1530491701042:# personal.lib.path <- Sys.getenv("R_LIBS_USER")
1530491701043:# if(!file.exists(personal.lib.path))
1530491701043:#   dir.create(personal.lib.path)
1530491701044:installAndLoadPackages <- function(pkg){
1530491701045:cat("Please wait a moment! Checking for required packages... ")
1530491701045:cat("Done!\n")
1530491701046:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1530491701046:if (length(new.pkg)) {
1530491701047:cat("Installing new packages... ")
1530491701047:install.packages(new.pkg, dependencies = TRUE,
1530491701048:repos="http://cran.rstudio.com/") #,
1530491701048:# lib = personal.lib.path)
1530491701049:cat("Done!\n")
1530491701050:}
1530491701050:cat("Loading required packages... ")
1530491701051:sapply(pkg, function(x){
1530491701051:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1530491701052:})
1530491701052:cat("Done!\n")
1530491701052:}
1530491701053:# github.packages <- c("tibble")
1530491701054:# packages <- c("argparser", "tidyverse", "RColorBrewer")#, "ggplot2",  "tidyr")
1530491701054:packages <- c("argparser", "dplyr", "ggplot2", "RColorBrewer", "readr", "tidyr",
1530491701054:"caret")#, "ggplot2",  "tidyr")
1530491701055:installAndLoadPackages(packages)
1530491701059:################################################################################
1530491701059:# Get script name
1530491701060:initial.options <- commandArgs(trailingOnly = FALSE)
1530491701060:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1530491701061:# Process command line arguments
1530491701062:# Create a parser
1530491701062:p <- arg_parser("This script process results from STing detector",
1530491701062:name = script.name)
1530491701064:# Add Positional arguments (required inputs)
1530491701065:p <- add_argument(p, "blast_file", help = "BLAST results file")
1530491701066:p <- add_argument(p, "results_file", help = "Detector results file (tidy format)")
1530491701067:p <- add_argument(p, "identity", help = "BLAST identity cutoff",
1530491701067:default = 80)
1530491701068:p <- add_argument(p, "q_coverage", help = "BLAST query coverage cutoff",
1530491701069:default = 80)
1530491701070:# p <- add_argument(p, "genes_ref_file", help = "Genes ref file (short: tag and name)")
1530491701070:# p <- add_argument(p, "genes_full_ref_file", help = "Genes full ref file (short: tag, name adn others)")
1530491701071:# p <- add_argument(p, "genomes_ref_file", help = "Genomes ref file (short: Accn and Orgnism name)")
1530491701071:# Add options
1530491701071:# p <- add_argument(p, "--cutoff", help = "dentity and Coverage cutoff value",
1530491701072:#                   default = 80)
1530491701072:# # Parse command line arguments
1530491701072:# argv <- parse_args(p)
1530491701073:# Initialization of variables
1530491701073:# Values to test the script using RStudio
1530491701074:# testDir          <- "test_07_card"
1530491701074:# testDir          <- "test_08_card"
1530491701074:# testDir           <- "test_09_card"
1530491701075:testDir           <- "test_10_card"
1530491701075:blastFile         <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/card_vs_positive.unique.blast")
1530491701076:# resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/detector.tsv")
1530491701076:resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/results.tsv")
1530491701077:identity          <- 100
1530491701077:qCoverage         <- 100
1530491701078:# genesRefFile      <- "detector/card/prioritary_who_set/final_set/tags_names_xRef.tsv"
1530491701078:# genesFullRefFile  <- "detector/card/prioritary_who_set/final_set/card_tags_xRef.tsv"
1530491701079:# genomesRefFile    <- "detector/card/prioritary_who_set/final_set/genomesTableRef.tsv"
1530491701079:# cutoff            <- 100
1530491701079:# Parse command line arguments
1530491701080:command.line = FALSE   # Turn to FALSE to test the script inside RStudio
1530491701080:argv <- list()
1530491701081:if(command.line) {
1530491701081:argv <- parse_args(p)
1530491701081:} else {
1530491701082:argv <- parse_args(p, list(blastFile, resultsFile, identity, qCoverage))#,
1530491701082:# genesRefFile, genesFullRefFile, genomesRefFile,
1530491701082:# "--cutoff", cutoff))
1530491701083:}
1530491701084:# Get argument values from command line
1530491701085:blastFile         <- argv$blast_file
1530491701085:resultsFile       <- argv$results_file
1530491701086:identity          <- argv$identity
1530491701086:qCoverage         <- argv$q_coverage
1530491701087:# genesRefFile      <- argv$genes_ref_file
1530491701087:# genesFullRefFile  <- argv$genes_full_ref_file
1530491701087:# genomesRefFile    <- argv$genomes_ref_file
1530491701087:# cutoff            <- argv$cutoff
1530491701088:# Function for checking input files ###########################################
1530491701088:CheckFileExists <- function(file.list) {
1530491701089:non.exist.files <- !file.exists(file.list)
1530491701089:if(any(non.exist.files)) {
1530491701089:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1530491701090:}
1530491701090:}
1530491701091:# Check for input files #######################################################
1530491701091:files.to.check <- c(blastFile, resultsFile)
1530491701092:error.message  <- CheckFileExists(files.to.check)
1530491701092:# if(!is.null(error.message)){
1530491701093:# stop(error.message)
1530491701093:# } else {
1530491701093:# Data --------------------------------------------------------------------
1530491701094:# Load data files
1530491701094:blastData    <- read_tsv(blastFile)
1530491701110:resultsData  <- read_tsv(resultsFile)
1530491701136:# genesRef     <- read_tsv(genesRefFile, col_names = c("GeneTag", "GeneName"))
1530491701137:# genesFullRef <- read_tsv(genesFullRefFile, col_names = c("GeneTag", "CARD_description"))
1530491701137:# genomesRef   <- read_tsv(genomesRefFile)
1530491701138:# Process results ---------------------------------------------------------
1530491701139:# cat(paste("Test directory:            ", testDir))
1530491701140:# cat(paste("Identity & Coverage cutoff:", cutoff))
1530491701141:(amrGenes <- blastData %>%
1530491701141:select(Accn = qseqid) %>%
1530491701142:unique() %>% pull())
1530491701185:(genomes <- blastData %>%
1530491701186:select(GeneTag = sseqid) %>%
1530491701186:unique() %>% pull())
1530491701200:# (blastFilteredResults <- blastData %>%
1530491701201:#     mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1, 0)) %>%
1530491701201:#     select(Accn = sseqid, GeneTag = qseqid, BlastPresence) %>%
1530491701201:#     spread(Accn, BlastPresence)
1530491701202:# )
1530491701202:(blastFilteredResults <- blastData %>%
1530491701202:mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1L, 0L)) %>%
1530491701203:filter(BlastPresence == 1L)
1530491701203:)
1530491701463:# BLAST Table presence/absence
1530491701463:(blastPresenceTable <- blastData %>%
1530491701464:mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1L, 0L)) %>%
1530491701464:filter(BlastPresence == 1L) %>%
1530491701465:select(Accn = sseqid, GeneTag = qseqid, BlastPresence) %>%
1530491701466:spread(Accn, BlastPresence, fill = 0L)
1530491701466:)
1530491701738:(amrGenes_detector <- resultsData %>%
1530491701739:filter(SampleType == "positive") %>%
1530491701739:select(GeneTag) %>%
1530491701740:unique() %>% pull())
1530491701750:(genomes_detector <- resultsData %>%
1530491701751:filter(SampleType == "positive") %>%
1530491701751:select(Accn) %>%
1530491701752:unique() %>% pull())
1530491701760:# Check if there are the same number of genes and genomes in both datasets
1530491701760:# (BLAST and detector)
1530491701761:setdiff(blastFilteredResults %>% select(sseqid) %>% pull() %>% unique(),
1530491701762:genomes_detector)
1530491701766:setdiff(blastFilteredResults %>% select(qseqid) %>% pull() %>% unique(),
1530491701767:amrGenes_detector)
1530491701772:# Detector Table presence/absence (whole DB)
1530491701773:# 20x
1530491701773:(detectorPresenceTable_wdb_20x <- resultsData %>%
1530491701774:filter(SampleType == "positive",
1530491701774:SeqDepth == 20) %>%
1530491701775:select(Accn, GeneTag, DetectorPresence) %>%
1530491701775:spread(Accn, DetectorPresence, fill = 0L)
1530491701776:)
1530491701985:# 40x
1530491701986:(detectorPresenceTable_wdb_40x <- resultsData %>%
1530491701986:filter(SampleType == "positive",
1530491701987:SeqDepth == 40) %>%
1530491701987:select(Accn, GeneTag, DetectorPresence) %>%
1530491701988:spread(Accn, DetectorPresence, fill = 0L)
1530491701989:)
1530491834300:blastPresenceTable %>%
1530491834301:gather(Accn, BlastPresence, -GenTag)
1530491839156:blastPresenceTable %>%
1530491839157:gather(Accn, BlastPresence, -GeneTag)
1530491897686:detectorPresenceTable_wdb_20x %>%
1530491897686:gather(Accn, DetectorPresence, -GeneTag)
1530491901706:detectorPresenceTable_wdb_20x %>%
1530491901707:gather(Accn, DetectorPresence, -GeneTag)
1530492036299:rbind(
1530492036300:blastPresenceTable %>%
1530492036300:gather(Accn, BlastPresence, -GeneTag) %>%
1530492036301:mutate(SeqDepth = 20L),
1530492036301:blastPresenceTable %>%
1530492036302:gather(Accn, BlastPresence, -GeneTag) %>%
1530492036302:mutate(SeqDepth = 40L)
1530492036302:)
1530492113296:rbind(
1530492113297:detectorPresenceTable_wdb_20x %>%
1530492113297:gather(Accn, DetectorPresence, -GeneTag) %>%
1530492113298:mutate(SeqDepth = 20L),
1530492113298:detectorPresenceTable_wdb_20x %>%
1530492113299:gather(Accn, DetectorPresence, -GeneTag) %>%
1530492113300:mutate(SeqDepth = 40L)
1530492113300:)
1530492148875:left_join(
1530492148876:rbind(
1530492148876:blastPresenceTable %>%
1530492148877:gather(Accn, BlastPresence, -GeneTag) %>%
1530492148877:mutate(SeqDepth = 20L),
1530492148878:blastPresenceTable %>%
1530492148878:gather(Accn, BlastPresence, -GeneTag) %>%
1530492148879:mutate(SeqDepth = 40L)
1530492148879:),
1530492148880:rbind(
1530492148881:detectorPresenceTable_wdb_20x %>%
1530492148881:gather(Accn, DetectorPresence, -GeneTag) %>%
1530492148882:mutate(SeqDepth = 20L),
1530492148882:detectorPresenceTable_wdb_20x %>%
1530492148883:gather(Accn, DetectorPresence, -GeneTag) %>%
1530492148883:mutate(SeqDepth = 40L)
1530492148884:)
1530492148884:)
1530492156615:left_join(
1530492156616:rbind(
1530492156616:blastPresenceTable %>%
1530492156617:gather(Accn, BlastPresence, -GeneTag) %>%
1530492156617:mutate(SeqDepth = 20L),
1530492156618:blastPresenceTable %>%
1530492156618:gather(Accn, BlastPresence, -GeneTag) %>%
1530492156618:mutate(SeqDepth = 40L)
1530492156619:),
1530492156619:rbind(
1530492156620:detectorPresenceTable_wdb_20x %>%
1530492156620:gather(Accn, DetectorPresence, -GeneTag) %>%
1530492156620:mutate(SeqDepth = 20L),
1530492156621:detectorPresenceTable_wdb_20x %>%
1530492156621:gather(Accn, DetectorPresence, -GeneTag) %>%
1530492156621:mutate(SeqDepth = 40L)
1530492156622:)
1530492156622:)
1530492204784:positivePresenceTable <- left_join(
1530492204785:rbind(
1530492204785:blastPresenceTable %>%
1530492204786:gather(Accn, BlastPresence, -GeneTag) %>%
1530492204786:mutate(SeqDepth = 20L),
1530492204787:blastPresenceTable %>%
1530492204788:gather(Accn, BlastPresence, -GeneTag) %>%
1530492204788:mutate(SeqDepth = 40L)
1530492204789:),
1530492204791:rbind(
1530492204792:detectorPresenceTable_wdb_20x %>%
1530492204793:gather(Accn, DetectorPresence, -GeneTag) %>%
1530492204793:mutate(SeqDepth = 20L),
1530492204794:detectorPresenceTable_wdb_40x %>%
1530492204795:gather(Accn, DetectorPresence, -GeneTag) %>%
1530492204795:mutate(SeqDepth = 40L)
1530492204796:)
1530492204797:)
1530492234375:(positivePresenceTable <- left_join(
1530492234375:rbind(
1530492234376:blastPresenceTable %>%
1530492234377:gather(Accn, BlastPresence, -GeneTag) %>%
1530492234377:mutate(SeqDepth = 20L),
1530492234378:blastPresenceTable %>%
1530492234378:gather(Accn, BlastPresence, -GeneTag) %>%
1530492234379:mutate(SeqDepth = 40L)
1530492234380:),
1530492234380:rbind(
1530492234381:detectorPresenceTable_wdb_20x %>%
1530492234382:gather(Accn, DetectorPresence, -GeneTag) %>%
1530492234382:mutate(SeqDepth = 20L),
1530492234383:detectorPresenceTable_wdb_40x %>%
1530492234389:gather(Accn, DetectorPresence, -GeneTag) %>%
1530492234390:mutate(SeqDepth = 40L)
1530492234390:)
1530492234391:))
1530492300032:confusionMatrix(factor(positivePresenceTable %>% filter(SeqDepth == 20) %>% pull(DetectorPresence)),
1530492300033:factor(positivePresenceTable %>% filter(SeqDepth == 20) %>% pull(BlastPresence)),
1530492300033:positive = "1")
1530492350384:confusionMatrix(factor(positivePresenceTable %>% filter(SeqDepth == 40) %>% pull(DetectorPresence)),
1530492350385:factor(positivePresenceTable %>% filter(SeqDepth == 40) %>% pull(BlastPresence)),
1530492350386:positive = "1")
1530492421422:blastFilteredResults
1530492440514:(amrGenes <- blastData %>%
1530492440514:select(Accn = qseqid) %>%
1530492440515:unique() %>% pull())
1530492440951:(genomes <- blastData %>%
1530492440952:select(GeneTag = sseqid) %>%
1530492440952:unique() %>% pull())
1530492515738:confusionMatrix(factor(positivePresenceTable %>% filter(SeqDepth == 20) %>% pull(DetectorPresence)),
1530492515739:factor(positivePresenceTable %>% filter(SeqDepth == 20) %>% pull(BlastPresence)),
1530492515740:positive = "1")
1530492634254:blastPresenceTable
1530492821979:cat(normalizePath(c(R.home(), tempdir())), sep = "\n")
1530492922688:#!/usr/bin/env Rscript
1530492922689:################################################################################
1530492922689:# Author:      Hector Fabio Espitia Navarro
1530492922690:#              Georgia Institute of Technology
1530492922690:# Version:     1.0
1530492922691:# Date:
1530492922691:# Description:
1530492922691:################################################################################
1530492922692:# Install required packages
1530492922692:# personal.lib.path <- Sys.getenv("R_LIBS_USER")
1530492922692:# if(!file.exists(personal.lib.path))
1530492922693:#   dir.create(personal.lib.path)
1530492922694:installAndLoadPackages <- function(pkg){
1530492922694:cat("Please wait a moment! Checking for required packages... ")
1530492922695:cat("Done!\n")
1530492922695:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1530492922696:if (length(new.pkg)) {
1530492922696:cat("Installing new packages... ")
1530492922697:install.packages(new.pkg, dependencies = TRUE,
1530492922697:repos="http://cran.rstudio.com/") #,
1530492922698:# lib = personal.lib.path)
1530492922698:cat("Done!\n")
1530492922699:}
1530492922699:cat("Loading required packages... ")
1530492922700:sapply(pkg, function(x){
1530492922700:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1530492922701:})
1530492922701:cat("Done!\n")
1530492922701:}
1530492922702:# github.packages <- c("tibble")
1530492922703:# packages <- c("argparser", "tidyverse", "RColorBrewer")#, "ggplot2",  "tidyr")
1530492922703:packages <- c("argparser", "dplyr", "ggplot2", "RColorBrewer", "readr", "tidyr",
1530492922703:"caret")#, "ggplot2",  "tidyr")
1530492922704:installAndLoadPackages(packages)
1530492922709:################################################################################
1530492922709:# Get script name
1530492922710:initial.options <- commandArgs(trailingOnly = FALSE)
1530492922710:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1530492922711:# Process command line arguments
1530492922711:# Create a parser
1530492922712:p <- arg_parser("This script process results from STing detector",
1530492922712:name = script.name)
1530492922714:# Add Positional arguments (required inputs)
1530492922714:p <- add_argument(p, "blast_file", help = "BLAST results file")
1530492922715:p <- add_argument(p, "results_file", help = "Detector results file (tidy format)")
1530492922717:p <- add_argument(p, "identity", help = "BLAST identity cutoff",
1530492922717:default = 80)
1530492922718:p <- add_argument(p, "q_coverage", help = "BLAST query coverage cutoff",
1530492922718:default = 80)
1530492922719:# p <- add_argument(p, "genes_ref_file", help = "Genes ref file (short: tag and name)")
1530492922720:# p <- add_argument(p, "genes_full_ref_file", help = "Genes full ref file (short: tag, name adn others)")
1530492922720:# p <- add_argument(p, "genomes_ref_file", help = "Genomes ref file (short: Accn and Orgnism name)")
1530492922721:# Add options
1530492922721:p <- add_argument(p, "--output_dir", help = "Ouput directory",
1530492922721:default = "./")
1530492922723:# p <- add_argument(p, "--cutoff", help = "dentity and Coverage cutoff value",
1530492922723:#                   default = 80)
1530492922724:# # Parse command line arguments
1530492922724:# argv <- parse_args(p)
1530492922725:# Initialization of variables
1530492922725:# Values to test the script using RStudio
1530492922725:# testDir          <- "test_07_card"
1530492922726:# testDir          <- "test_08_card"
1530492922726:# testDir           <- "test_09_card"
1530492922726:testDir           <- "test_10_card"
1530492922727:blastFile         <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/card_vs_positive.unique.blast")
1530492922727:# resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/detector.tsv")
1530492922728:resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/results.tsv")
1530492922728:identity          <- 100
1530492922729:qCoverage         <- 100
1530492922729:outputDir         <- testDir
1530492922730:# genesRefFile      <- "detector/card/prioritary_who_set/final_set/tags_names_xRef.tsv"
1530492922730:# genesFullRefFile  <- "detector/card/prioritary_who_set/final_set/card_tags_xRef.tsv"
1530492922731:# genomesRefFile    <- "detector/card/prioritary_who_set/final_set/genomesTableRef.tsv"
1530492922731:# cutoff            <- 100
1530492922731:# Parse command line arguments
1530492922732:command.line = FALSE   # Turn to FALSE to test the script inside RStudio
1530492922732:argv <- list()
1530492922733:if(command.line) {
1530492922733:argv <- parse_args(p)
1530492922733:} else {
1530492922734:argv <- parse_args(p, list(blastFile, resultsFile, identity, qCoverage,
1530492922734:"--output_dir", outputDir))#,
1530492922734:# genesRefFile, genesFullRefFile, genomesRefFile,
1530492922735:# "--cutoff", cutoff))
1530492922735:}
1530492931169:#!/usr/bin/env Rscript
1530492931169:################################################################################
1530492931170:# Author:      Hector Fabio Espitia Navarro
1530492931170:#              Georgia Institute of Technology
1530492931170:# Version:     1.0
1530492931171:# Date:
1530492931171:# Description:
1530492931171:################################################################################
1530492931172:# Install required packages
1530492931172:# personal.lib.path <- Sys.getenv("R_LIBS_USER")
1530492931172:# if(!file.exists(personal.lib.path))
1530492931173:#   dir.create(personal.lib.path)
1530492931174:installAndLoadPackages <- function(pkg){
1530492931174:cat("Please wait a moment! Checking for required packages... ")
1530492931175:cat("Done!\n")
1530492931175:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1530492931179:if (length(new.pkg)) {
1530492931180:cat("Installing new packages... ")
1530492931180:install.packages(new.pkg, dependencies = TRUE,
1530492931181:repos="http://cran.rstudio.com/") #,
1530492931182:# lib = personal.lib.path)
1530492931182:cat("Done!\n")
1530492931183:}
1530492931183:cat("Loading required packages... ")
1530492931184:sapply(pkg, function(x){
1530492931185:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1530492931185:})
1530492931186:cat("Done!\n")
1530492931186:}
1530492931188:# github.packages <- c("tibble")
1530492931188:# packages <- c("argparser", "tidyverse", "RColorBrewer")#, "ggplot2",  "tidyr")
1530492931189:packages <- c("argparser", "dplyr", "ggplot2", "RColorBrewer", "readr", "tidyr",
1530492931189:"caret")#, "ggplot2",  "tidyr")
1530492931190:installAndLoadPackages(packages)
1530492931196:################################################################################
1530492931198:# Get script name
1530492931198:initial.options <- commandArgs(trailingOnly = FALSE)
1530492931199:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1530492931200:# Process command line arguments
1530492931201:# Create a parser
1530492931201:p <- arg_parser("This script process results from STing detector",
1530492931202:name = script.name)
1530492931205:# Add Positional arguments (required inputs)
1530492931205:p <- add_argument(p, "blast_file", help = "BLAST results file")
1530492931207:p <- add_argument(p, "results_file", help = "Detector results file (tidy format)")
1530492931209:p <- add_argument(p, "identity", help = "BLAST identity cutoff",
1530492931209:default = 80)
1530492931211:p <- add_argument(p, "q_coverage", help = "BLAST query coverage cutoff",
1530492931212:default = 80)
1530492931213:# p <- add_argument(p, "genes_ref_file", help = "Genes ref file (short: tag and name)")
1530492931214:# p <- add_argument(p, "genes_full_ref_file", help = "Genes full ref file (short: tag, name adn others)")
1530492931214:# p <- add_argument(p, "genomes_ref_file", help = "Genomes ref file (short: Accn and Orgnism name)")
1530492931215:# Add options
1530492931215:p <- add_argument(p, "--output_dir", help = "Ouput directory",
1530492931216:default = "./")
1530492931218:# p <- add_argument(p, "--cutoff", help = "dentity and Coverage cutoff value",
1530492931218:#                   default = 80)
1530492931219:# # Parse command line arguments
1530492931220:# argv <- parse_args(p)
1530492931220:# Initialization of variables
1530492931221:# Values to test the script using RStudio
1530492931221:# testDir          <- "test_07_card"
1530492931222:# testDir          <- "test_08_card"
1530492931222:# testDir           <- "test_09_card"
1530492931223:testDir           <- "test_10_card"
1530492931224:blastFile         <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/card_vs_positive.unique.blast")
1530492931225:# resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/detector.tsv")
1530492931225:resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/results.tsv")
1530492931226:identity          <- 100
1530492931227:qCoverage         <- 100
1530492931228:outputDir         <- testDir
1530492931229:# genesRefFile      <- "detector/card/prioritary_who_set/final_set/tags_names_xRef.tsv"
1530492931229:# genesFullRefFile  <- "detector/card/prioritary_who_set/final_set/card_tags_xRef.tsv"
1530492931230:# genomesRefFile    <- "detector/card/prioritary_who_set/final_set/genomesTableRef.tsv"
1530492931230:# cutoff            <- 100
1530492931231:# Parse command line arguments
1530492931231:command.line = FALSE   # Turn to FALSE to test the script inside RStudio
1530492931231:argv <- list()
1530492931232:if(command.line) {
1530492931232:argv <- parse_args(p)
1530492931233:} else {
1530492931233:argv <- parse_args(p, list(blastFile, resultsFile, identity, qCoverage,
1530492931233:"--output_dir", outputDir))#,
1530492931233:# genesRefFile, genesFullRefFile, genomesRefFile,
1530492931234:# "--cutoff", cutoff))
1530492931234:}
1530492931236:# Get argument values from command line
1530492931236:blastFile         <- argv$blast_file
1530492931236:resultsFile       <- argv$results_file
1530492931237:identity          <- argv$identity
1530492931237:qCoverage         <- argv$q_coverage
1530492931238:outputDir         <- argv$output_dir
1530492931238:# genesRefFile      <- argv$genes_ref_file
1530492931238:# genesFullRefFile  <- argv$genes_full_ref_file
1530492931239:# genomesRefFile    <- argv$genomes_ref_file
1530492931239:# cutoff            <- argv$cutoff
1530492931239:# Function for checking input files ###########################################
1530492931240:CheckFileExists <- function(file.list) {
1530492931240:non.exist.files <- !file.exists(file.list)
1530492931240:if(any(non.exist.files)) {
1530492931241:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1530492931241:}
1530492931241:}
1530492931242:# Check for input files #######################################################
1530492931243:files.to.check <- c(blastFile, resultsFile)
1530492931243:error.message  <- CheckFileExists(files.to.check)
1530492931244:# if(!is.null(error.message)){
1530492931244:# stop(error.message)
1530492931245:# } else {
1530492931245:# Data --------------------------------------------------------------------
1530492931246:# Load data files
1530492931246:blastData    <- read_tsv(blastFile)
1530492931266:resultsData  <- read_tsv(resultsFile)
1530492931274:# genesRef     <- read_tsv(genesRefFile, col_names = c("GeneTag", "GeneName"))
1530492931275:# genesFullRef <- read_tsv(genesFullRefFile, col_names = c("GeneTag", "CARD_description"))
1530492931275:# genomesRef   <- read_tsv(genomesRefFile)
1530492931275:# Process results ---------------------------------------------------------
1530492931276:# cat(paste("Test directory:            ", testDir))
1530492931277:# cat(paste("Identity & Coverage cutoff:", cutoff))
1530492931278:(amrGenes <- blastData %>%
1530492931278:select(Accn = qseqid) %>%
1530492931279:unique() %>% pull())
1530492931321:(genomes <- blastData %>%
1530492931322:select(GeneTag = sseqid) %>%
1530492931322:unique() %>% pull())
1530492931330:# (blastFilteredResults <- blastData %>%
1530492931331:#     mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1, 0)) %>%
1530492931331:#     select(Accn = sseqid, GeneTag = qseqid, BlastPresence) %>%
1530492931332:#     spread(Accn, BlastPresence)
1530492931332:# )
1530492931333:(blastFilteredResults <- blastData %>%
1530492931334:mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1L, 0L)) %>%
1530492931334:filter(BlastPresence == 1L)
1530492931335:)
1530492931573:# BLAST Table presence/absence
1530492931573:(blastPresenceTable <- blastData %>%
1530492931573:mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1L, 0L)) %>%
1530492931573:filter(BlastPresence == 1L) %>%
1530492931574:select(Accn = sseqid, GeneTag = qseqid, BlastPresence) %>%
1530492931574:spread(Accn, BlastPresence, fill = 0L)
1530492931574:)
1530492931756:(amrGenes_detector <- resultsData %>%
1530492931757:filter(SampleType == "positive") %>%
1530492931757:select(GeneTag) %>%
1530492931758:unique() %>% pull())
1530492931768:(genomes_detector <- resultsData %>%
1530492931769:filter(SampleType == "positive") %>%
1530492931769:select(Accn) %>%
1530492931770:unique() %>% pull())
1530492931778:# Check if there are the same number of genes and genomes in both datasets
1530492931778:# (BLAST and detector)
1530492931779:setdiff(blastFilteredResults %>% select(sseqid) %>% pull() %>% unique(),
1530492931779:genomes_detector)
1530492931782:setdiff(blastFilteredResults %>% select(qseqid) %>% pull() %>% unique(),
1530492931783:amrGenes_detector)
1530492931786:# Detector Table presence/absence (whole DB)
1530492931786:# 20x
1530492931787:(detectorPresenceTable_wdb_20x <- resultsData %>%
1530492931787:filter(SampleType == "positive",
1530492931787:SeqDepth == 20) %>%
1530492931788:select(Accn, GeneTag, DetectorPresence) %>%
1530492931788:spread(Accn, DetectorPresence, fill = 0L)
1530492931788:)
1530492931984:# 40x
1530492931985:(detectorPresenceTable_wdb_40x <- resultsData %>%
1530492931985:filter(SampleType == "positive",
1530492931985:SeqDepth == 40) %>%
1530492931986:select(Accn, GeneTag, DetectorPresence) %>%
1530492931986:spread(Accn, DetectorPresence, fill = 0L)
1530492931986:)
1530492932163:# Combined results table: positive dataset
1530492932164:(positivePresenceTable <- left_join(
1530492932164:rbind(
1530492932164:blastPresenceTable %>%
1530492932165:gather(Accn, BlastPresence, -GeneTag) %>%
1530492932165:mutate(SeqDepth = 20L),
1530492932165:blastPresenceTable %>%
1530492932166:gather(Accn, BlastPresence, -GeneTag) %>%
1530492932166:mutate(SeqDepth = 40L)
1530492932166:),
1530492932167:rbind(
1530492932167:detectorPresenceTable_wdb_20x %>%
1530492932167:gather(Accn, DetectorPresence, -GeneTag) %>%
1530492932168:mutate(SeqDepth = 20L),
1530492932168:detectorPresenceTable_wdb_40x %>%
1530492932168:gather(Accn, DetectorPresence, -GeneTag) %>%
1530492932169:mutate(SeqDepth = 40L)
1530492932169:)
1530492932169:))
1530492932301:confusionMatrix(factor(positivePresenceTable %>% filter(SeqDepth == 20) %>% pull(DetectorPresence)),
1530492932301:factor(positivePresenceTable %>% filter(SeqDepth == 20) %>% pull(BlastPresence)),
1530492932301:positive = "1")
1530492932311:confusionMatrix(factor(positivePresenceTable %>% filter(SeqDepth == 40) %>% pull(DetectorPresence)),
1530492932312:factor(positivePresenceTable %>% filter(SeqDepth == 40) %>% pull(BlastPresence)),
1530492932312:positive = "1")
1530492990543:paste(outputDir, "blast_presence_table.tsv", sep = "/"
1530492993847:)
1530493009622:normalizePath(paste(outputDir, "blast_presence_table.tsv", sep = "/"))
1530493053948:#!/usr/bin/env Rscript
1530493053949:################################################################################
1530493053949:# Author:      Hector Fabio Espitia Navarro
1530493053949:#              Georgia Institute of Technology
1530493053950:# Version:     1.0
1530493053950:# Date:
1530493053951:# Description:
1530493053951:################################################################################
1530493053952:# Install required packages
1530493053952:# personal.lib.path <- Sys.getenv("R_LIBS_USER")
1530493053953:# if(!file.exists(personal.lib.path))
1530493053953:#   dir.create(personal.lib.path)
1530493053954:installAndLoadPackages <- function(pkg){
1530493053954:cat("Please wait a moment! Checking for required packages... ")
1530493053954:cat("Done!\n")
1530493053955:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1530493053955:if (length(new.pkg)) {
1530493053956:cat("Installing new packages... ")
1530493053956:install.packages(new.pkg, dependencies = TRUE,
1530493053957:repos="http://cran.rstudio.com/") #,
1530493053957:# lib = personal.lib.path)
1530493053957:cat("Done!\n")
1530493053958:}
1530493053958:cat("Loading required packages... ")
1530493053959:sapply(pkg, function(x){
1530493053959:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1530493053960:})
1530493053960:cat("Done!\n")
1530493053960:}
1530493053961:# github.packages <- c("tibble")
1530493053962:# packages <- c("argparser", "tidyverse", "RColorBrewer")#, "ggplot2",  "tidyr")
1530493053962:packages <- c("argparser", "dplyr", "ggplot2", "RColorBrewer", "readr", "tidyr",
1530493053962:"caret")#, "ggplot2",  "tidyr")
1530493053963:installAndLoadPackages(packages)
1530493053967:################################################################################
1530493053968:# Get script name
1530493053968:initial.options <- commandArgs(trailingOnly = FALSE)
1530493053969:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1530493053970:# Process command line arguments
1530493053970:# Create a parser
1530493053970:p <- arg_parser("This script process results from STing detector",
1530493053971:name = script.name)
1530493053972:# Add Positional arguments (required inputs)
1530493053973:p <- add_argument(p, "blast_file", help = "BLAST results file")
1530493053974:p <- add_argument(p, "results_file", help = "Detector results file (tidy format)")
1530493053975:p <- add_argument(p, "identity", help = "BLAST identity cutoff",
1530493053975:default = 80)
1530493053976:p <- add_argument(p, "q_coverage", help = "BLAST query coverage cutoff",
1530493053977:default = 80)
1530493053978:# p <- add_argument(p, "genes_ref_file", help = "Genes ref file (short: tag and name)")
1530493053979:# p <- add_argument(p, "genes_full_ref_file", help = "Genes full ref file (short: tag, name adn others)")
1530493053980:# p <- add_argument(p, "genomes_ref_file", help = "Genomes ref file (short: Accn and Orgnism name)")
1530493053980:# Add options
1530493053981:p <- add_argument(p, "--output_dir", help = "Ouput directory",
1530493053981:default = "./")
1530493053983:# p <- add_argument(p, "--cutoff", help = "dentity and Coverage cutoff value",
1530493053984:#                   default = 80)
1530493053985:# # Parse command line arguments
1530493053985:# argv <- parse_args(p)
1530493053986:# Initialization of variables
1530493053987:# Values to test the script using RStudio
1530493053987:# testDir          <- "test_07_card"
1530493053988:# testDir          <- "test_08_card"
1530493053988:# testDir           <- "test_09_card"
1530493053989:testDir           <- "test_10_card"
1530493053990:blastFile         <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/card_vs_positive.unique.blast")
1530493053991:# resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/detector.tsv")
1530493053991:resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/results.tsv")
1530493053992:identity          <- 100
1530493053993:qCoverage         <- 100
1530493053994:outputDir         <- paste0("detector/card/prioritary_who_set/final_set/",testDir)
1530493053995:# genesRefFile      <- "detector/card/prioritary_who_set/final_set/tags_names_xRef.tsv"
1530493053995:# genesFullRefFile  <- "detector/card/prioritary_who_set/final_set/card_tags_xRef.tsv"
1530493053996:# genomesRefFile    <- "detector/card/prioritary_who_set/final_set/genomesTableRef.tsv"
1530493053996:# cutoff            <- 100
1530493053997:# Parse command line arguments
1530493053998:command.line = FALSE   # Turn to FALSE to test the script inside RStudio
1530493053999:argv <- list()
1530493053999:if(command.line) {
1530493054000:argv <- parse_args(p)
1530493054001:} else {
1530493054001:argv <- parse_args(p, list(blastFile, resultsFile, identity, qCoverage,
1530493054002:"--output_dir", outputDir))#,
1530493054002:# genesRefFile, genesFullRefFile, genomesRefFile,
1530493054003:# "--cutoff", cutoff))
1530493054003:}
1530493054006:# Get argument values from command line
1530493054007:blastFile         <- argv$blast_file
1530493054007:resultsFile       <- argv$results_file
1530493054008:identity          <- argv$identity
1530493054009:qCoverage         <- argv$q_coverage
1530493054010:outputDir         <- argv$output_dir
1530493054011:# genesRefFile      <- argv$genes_ref_file
1530493054011:# genesFullRefFile  <- argv$genes_full_ref_file
1530493054012:# genomesRefFile    <- argv$genomes_ref_file
1530493054012:# cutoff            <- argv$cutoff
1530493054013:# Function for checking input files ###########################################
1530493054013:CheckFileExists <- function(file.list) {
1530493054014:non.exist.files <- !file.exists(file.list)
1530493054014:if(any(non.exist.files)) {
1530493054015:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1530493054015:}
1530493054016:}
1530493054017:# Check for input files #######################################################
1530493054018:files.to.check <- c(blastFile, resultsFile)
1530493054019:error.message  <- CheckFileExists(files.to.check)
1530493054020:# if(!is.null(error.message)){
1530493054021:# stop(error.message)
1530493054021:# } else {
1530493064865:normalizePath(paste(outputDir, "blast_presence_table.tsv", sep = "/"))
1530493091387:# Save tables to disk
1530493091388:# Blast presence
1530493091388:write_tsv(blastPresenceTable, path = normalizePath(paste(outputDir, "blast_presence_table.tsv", sep = "/")))
1530493222104:write_tsv(detectorPresenceTable_wdb_20x, path = normalizePath(paste(outputDir, "detector_20x_wdb_presence_table.tsv", sep = "/")))
1530493222729:write_tsv(detectorPresenceTable_wdb_40x, path = normalizePath(paste(outputDir, "detector_40x_wdb_presence_table.tsv", sep = "/")))
1530493223247:write_tsv(positivePresenceTable, path = normalizePath(paste(outputDir, "combined_presence_table.positive.tsv", sep = "/")))
1530493680502:positive_20x_results <- confusionMatrix(factor(positivePresenceTable %>% filter(SeqDepth == 20) %>% pull(DetectorPresence)),
1530493680503:factor(positivePresenceTable %>% filter(SeqDepth == 20) %>% pull(BlastPresence)),
1530493680504:positive = "1")
1530493681303:positive_40x_results <- confusionMatrix(factor(positivePresenceTable %>% filter(SeqDepth == 40) %>% pull(DetectorPresence)),
1530493681304:factor(positivePresenceTable %>% filter(SeqDepth == 40) %>% pull(BlastPresence)),
1530493681305:positive = "1")
1530493697819:as.table(positive_20x_results)
1530493704205:as.matrix(positive_20x_results)
1530493911875:confusionMatrix(data = factor(positivePresenceTable %>% filter(SeqDepth == 20) %>% pull(DetectorPresence)),
1530493911876:reference = factor(positivePresenceTable %>% filter(SeqDepth == 20) %>% pull(BlastPresence)),
1530493911876:positive = "0")
1530493950963:confusionMatrix(data = factor(positivePresenceTable %>% filter(SeqDepth == 20) %>% pull(DetectorPresence)),
1530493950964:reference = factor(positivePresenceTable %>% filter(SeqDepth == 20) %>% pull(BlastPresence)),
1530493950964:positive = 1)
1530493963321:factor(positivePresenceTable %>% filter(SeqDepth == 20) %>% pull(DetectorPresence)
1530493966003:)
1530493988619:data = factor(positivePresenceTable %>% filter(SeqDepth == 20) %>% pull(DetectorPresence)),
1530493988620:reference = factor(positivePresenceTable %>% filter(SeqDepth == 20) %>% pull(BlastPresence))
1530493998423:confusionMatrix(data = factor(positivePresenceTable %>% filter(SeqDepth == 20) %>% pull(DetectorPresence)),
1530493998424:reference = factor(positivePresenceTable %>% filter(SeqDepth == 20) %>% pull(BlastPresence))
1530494000472:)
1530494019992:(positive_20x_results <- confusionMatrix(data = factor(positivePresenceTable %>% filter(SeqDepth == 20) %>% pull(DetectorPresence)),
1530494019993:reference = factor(positivePresenceTable %>% filter(SeqDepth == 20) %>% pull(BlastPresence)),
1530494019993:positive = "1"))
1530494042377:positive_40x_results <- confusionMatrix(data = factor(positivePresenceTable %>% filter(SeqDepth == 40) %>% pull(DetectorPresence)),
1530494042378:reference = factor(positivePresenceTable %>% filter(SeqDepth == 40) %>% pull(BlastPresence)),
1530494042379:positive = "1")
1530494074919:positivePresenceTable
1530494078667:positivePresenceTable %>%
1530494078667:filter(BlastPresence == 1, DetectorPresence == 1) %>% # TP
1530494078668:group_by(SeqDepth) %>%
1530494078669:summarise(TP = n())
1530494085024:(positive_20x_results <- confusionMatrix(data = factor(positivePresenceTable %>% filter(SeqDepth == 20) %>% pull(DetectorPresence)),
1530494085025:reference = factor(positivePresenceTable %>% filter(SeqDepth == 20) %>% pull(BlastPresence)),
1530494085026:positive = "1"))
1530494118863:positivePresenceTable %>%
1530494118864:filter(BlastPresence == 1, DetectorPresence == 1) %>% # TP
1530494118864:group_by(SeqDepth) %>%
1530494118865:summarise(TP = n())
1530494133257:(positive_40x_results <- confusionMatrix(data = factor(positivePresenceTable %>% filter(SeqDepth == 40) %>% pull(DetectorPresence)),
1530494133259:reference = factor(positivePresenceTable %>% filter(SeqDepth == 40) %>% pull(BlastPresence)),
1530494133259:positive = "1"))
1530494162298:positivePresenceTable %>%
1530494162299:filter(BlastPresence == 1, DetectorPresence == 1) %>% # TP
1530494162300:group_by(SeqDepth) %>%
1530494162301:summarise(TP = n())
1530494162369:positivePresenceTable %>%
1530494162369:filter(BlastPresence == 0, DetectorPresence == 1) %>% # FP
1530494162370:group_by(SeqDepth) %>%
1530494162370:summarise(FP = n())
1530494162403:positivePresenceTable %>%
1530494162403:filter(BlastPresence == 0, DetectorPresence == 0) %>% # TN
1530494162404:group_by(SeqDepth) %>%
1530494162405:summarise(TN = n())
1530494162457:positivePresenceTable %>%
1530494162457:filter(BlastPresence == 1, DetectorPresence == 0) %>% # FN
1530494162457:group_by(SeqDepth) %>%
1530494162458:summarise(FN = n())
1530494202106:as.table(positive_20x_results)
1530494226638:class(as.table(positive_20x_results))
1530494310862:write_tsv(as.table(positive_20x_results), path = normalizePath(paste(outputDir, "confusion_matrix_20x_wdb.positive.tsv", sep = "/")))
1530494325178:as.data.frame(positive_20x_results)
1530494341727:as.data.frame(as.table(positive_20x_results))
1530494387288:as.data.frame(as.table(positive_20x_results), SeqDepth = 20L)
1530494411939:as.data.frame(as.table(positive_20x_results))$SeqDepth = 20L
1530494417145:as.data.frame(as.table(positive_20x_results))
1530494484083:as.table(positive_20x_results)
1530494502043:rep(20, 4)
1530494504742:as.data.frame(as.table(positive_20x_results), SeqDepth = rep(20, 4))
1530494536429:cbind(as.data.frame(as.table(positive_20x_results)),
1530494536430:SeqDepth = rep(20, 4)))
1530494543443:cbind(as.data.frame(as.table(positive_20x_results)),
1530494543443:rep(20, 4)))
1530494547953:cbind(as.data.frame(as.table(positive_20x_results)),
1530494547953:rep(20, 4))
1530494552034:cbind(as.data.frame(as.table(positive_20x_results)),
1530494552034:SeqDepth = rep(20, 4))
1530494577094:cbind(as.data.frame(as.table(positive_20x_results)),
1530494577095:SeqDepth = rep(20, 4))
1530494578025:cbind(as.data.frame(as.table(positive_40x_results)),
1530494578026:SeqDepth = rep(40, 4))
1530494596714:rbind(
1530494596714:cbind(as.data.frame(as.table(positive_20x_results)),
1530494596715:SeqDepth = rep(20, 4)),
1530494596716:cbind(as.data.frame(as.table(positive_40x_results)),
1530494596716:SeqDepth = rep(40, 4)))
1530494641633:positive_confMatrixResults <- rbind(
1530494641633:cbind(as.data.frame(as.table(positive_20x_results)),
1530494641634:SeqDepth = rep(20, 4)),
1530494641635:cbind(as.data.frame(as.table(positive_40x_results)),
1530494641635:SeqDepth = rep(40, 4)))
1530494672494:write_tsv(positive_confMatrixResults, path = normalizePath(paste(outputDir, "confusion_matrix.positive.tsv", sep = "/")))
1530503798546:(blastPresenceTable <- blastData %>%
1530503798547:mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1L, 0L)) %>%
1530503798548:filter(BlastPresence == 1L) %>%
1530503798548:select(Accn = sseqid, GeneTag = qseqid, BlastPresence) %>%
1530503798554:mutate(BlastPresence == 0L) %>%
1530503798555:spread(Accn, BlastPresence, fill = 0L)
1530503798556:)
1530503819881:blastData %>%
1530503819882:mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1L, 0L)) %>%
1530503819882:filter(BlastPresence == 1L) %>%
1530503819883:select(Accn = sseqid, GeneTag = qseqid, BlastPresence) %>%
1530503819883:mutate(BlastPresence == 0L) %>%
1530503829593:blastData %>%
1530503829594:mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1L, 0L)) %>%
1530503829595:filter(BlastPresence == 1L) %>%
1530503829595:select(Accn = sseqid, GeneTag = qseqid, BlastPresence) %>%
1530503829596:mutate(BlastPresence == 0L)
1530503835126:blastData %>%
1530503835127:mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1L, 0L)) %>%
1530503835128:filter(BlastPresence == 1L) %>%
1530503835129:select(Accn = sseqid, GeneTag = qseqid, BlastPresence) %>%
1530503835129:mutate(BlastPresence = 0L)
1530503839837:# BLAST Table presence/absence
1530503839838:(blastPresenceTable <- blastData %>%
1530503839838:mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1L, 0L)) %>%
1530503839839:filter(BlastPresence == 1L) %>%
1530503839840:select(Accn = sseqid, GeneTag = qseqid, BlastPresence) %>%
1530503839840:mutate(BlastPresence = 0L) %>%
1530503839841:spread(Accn, BlastPresence, fill = 0L)
1530503839841:)
1530504823667:#!/usr/bin/env Rscript
1530504823668:################################################################################
1530504823668:# Author:      Hector Fabio Espitia Navarro
1530504823669:#              Georgia Institute of Technology
1530504823669:# Version:     1.0
1530504823670:# Date:
1530504823670:# Description:
1530504823670:################################################################################
1530504823671:# Install required packages
1530504823671:# personal.lib.path <- Sys.getenv("R_LIBS_USER")
1530504823672:# if(!file.exists(personal.lib.path))
1530504823672:#   dir.create(personal.lib.path)
1530504823672:installAndLoadPackages <- function(pkg){
1530504823673:cat("Please wait a moment! Checking for required packages... ")
1530504823673:cat("Done!\n")
1530504823674:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1530504823674:if (length(new.pkg)) {
1530504823674:cat("Installing new packages... ")
1530504823675:install.packages(new.pkg, dependencies = TRUE,
1530504823675:repos="http://cran.rstudio.com/") #,
1530504823676:# lib = personal.lib.path)
1530504823676:cat("Done!\n")
1530504823677:}
1530504823677:cat("Loading required packages... ")
1530504823678:sapply(pkg, function(x){
1530504823679:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1530504823682:})
1530504823683:cat("Done!\n")
1530504823684:}
1530504823686:# github.packages <- c("tibble")
1530504823686:# packages <- c("argparser", "tidyverse", "RColorBrewer")#, "ggplot2",  "tidyr")
1530504823687:packages <- c("argparser", "dplyr", "ggplot2", "RColorBrewer", "readr", "tidyr",
1530504823688:"caret")#, "ggplot2",  "tidyr")
1530504823689:installAndLoadPackages(packages)
1530504823696:################################################################################
1530504823697:# Get script name
1530504823698:initial.options <- commandArgs(trailingOnly = FALSE)
1530504823699:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1530504823701:# Process command line arguments
1530504823701:# Create a parser
1530504823702:p <- arg_parser("This script process results from STing detector",
1530504823702:name = script.name)
1530504823705:# Add Positional arguments (required inputs)
1530504823706:p <- add_argument(p, "blast_file", help = "BLAST results file")
1530504823708:p <- add_argument(p, "results_file", help = "Detector results file (tidy format)")
1530504823710:p <- add_argument(p, "identity", help = "BLAST identity cutoff",
1530504823711:default = 80)
1530504823712:p <- add_argument(p, "q_coverage", help = "BLAST query coverage cutoff",
1530504823713:default = 80)
1530504823715:# p <- add_argument(p, "genes_ref_file", help = "Genes ref file (short: tag and name)")
1530504823716:# p <- add_argument(p, "genes_full_ref_file", help = "Genes full ref file (short: tag, name adn others)")
1530504823716:# p <- add_argument(p, "genomes_ref_file", help = "Genomes ref file (short: Accn and Orgnism name)")
1530504823717:# Add options
1530504823717:p <- add_argument(p, "--output_dir", help = "Ouput directory",
1530504823718:default = "./")
1530504823720:# p <- add_argument(p, "--cutoff", help = "dentity and Coverage cutoff value",
1530504823720:#                   default = 80)
1530504823722:# # Parse command line arguments
1530504823722:# argv <- parse_args(p)
1530504823723:# Initialization of variables
1530504823724:# Values to test the script using RStudio
1530504823725:# testDir          <- "test_07_card"
1530504823725:# testDir          <- "test_08_card"
1530504823726:# testDir           <- "test_09_card"
1530504823726:testDir           <- "test_10_card"
1530504823727:blastFile         <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/card_vs_positive.unique.blast")
1530504823728:# resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/detector.tsv")
1530504823729:resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/results.tsv")
1530504823730:identity          <- 100
1530504823731:qCoverage         <- 100
1530504823732:outputDir         <- paste0("detector/card/prioritary_who_set/final_set/",testDir)
1530504823733:# genesRefFile      <- "detector/card/prioritary_who_set/final_set/tags_names_xRef.tsv"
1530504823733:# genesFullRefFile  <- "detector/card/prioritary_who_set/final_set/card_tags_xRef.tsv"
1530504823734:# genomesRefFile    <- "detector/card/prioritary_who_set/final_set/genomesTableRef.tsv"
1530504823734:# cutoff            <- 100
1530504823735:# Parse command line arguments
1530504823736:command.line = FALSE   # Turn to FALSE to test the script inside RStudio
1530504823737:argv <- list()
1530504823738:if(command.line) {
1530504823738:argv <- parse_args(p)
1530504823739:} else {
1530504823740:argv <- parse_args(p, list(blastFile, resultsFile, identity, qCoverage,
1530504823740:"--output_dir", outputDir))#,
1530504823741:# genesRefFile, genesFullRefFile, genomesRefFile,
1530504823741:# "--cutoff", cutoff))
1530504823750:}
1530504823753:# Get argument values from command line
1530504823754:blastFile         <- argv$blast_file
1530504823755:resultsFile       <- argv$results_file
1530504823755:identity          <- argv$identity
1530504823756:qCoverage         <- argv$q_coverage
1530504823756:outputDir         <- argv$output_dir
1530504823757:# genesRefFile      <- argv$genes_ref_file
1530504823757:# genesFullRefFile  <- argv$genes_full_ref_file
1530504823757:# genomesRefFile    <- argv$genomes_ref_file
1530504823758:# cutoff            <- argv$cutoff
1530504823758:# Function for checking input files ###########################################
1530504823758:CheckFileExists <- function(file.list) {
1530504823759:non.exist.files <- !file.exists(file.list)
1530504823759:if(any(non.exist.files)) {
1530504823759:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1530504823760:}
1530504823760:}
1530504823761:# Check for input files #######################################################
1530504823761:files.to.check <- c(blastFile, resultsFile)
1530504823762:error.message  <- CheckFileExists(files.to.check)
1530504823763:# if(!is.null(error.message)){
1530504823764:# stop(error.message)
1530504823764:# } else {
1530504823765:# Data --------------------------------------------------------------------
1530504823766:# Load data files
1530504823767:blastData    <- read_tsv(blastFile)
1530504823793:resultsData  <- read_tsv(resultsFile)
1530504823806:# genesRef     <- read_tsv(genesRefFile, col_names = c("GeneTag", "GeneName"))
1530504823806:# genesFullRef <- read_tsv(genesFullRefFile, col_names = c("GeneTag", "CARD_description"))
1530504823807:# genomesRef   <- read_tsv(genomesRefFile)
1530504823808:# Process results ---------------------------------------------------------
1530504823809:# cat(paste("Test directory:            ", testDir))
1530504823809:# cat(paste("Identity & Coverage cutoff:", cutoff))
1530504823810:(amrGenes <- blastData %>%
1530504823811:select(Accn = qseqid) %>%
1530504823811:unique() %>% pull())
1530504823855:(genomes <- blastData %>%
1530504823856:select(GeneTag = sseqid) %>%
1530504823856:unique() %>% pull())
1530504823865:# (blastFilteredResults <- blastData %>%
1530504823866:#     mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1, 0)) %>%
1530504823866:#     select(Accn = sseqid, GeneTag = qseqid, BlastPresence) %>%
1530504823867:#     spread(Accn, BlastPresence)
1530504823867:# )
1530504823868:(blastFilteredResults <- blastData %>%
1530504823869:mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1L, 0L)) %>%
1530504823869:filter(BlastPresence == 1L)
1530504823870:)
1530504824133:# BLAST Table presence/absence
1530504824134:(blastPresenceTable <- blastData %>%
1530504824134:mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1L, 0L)) %>%
1530504824135:filter(BlastPresence == 1L) %>%
1530504824135:select(Accn = sseqid, GeneTag = qseqid, BlastPresence) %>%
1530504824136:spread(Accn, BlastPresence, fill = 0L)
1530504824137:)
1530504824443:(amrGenes_detector <- resultsData %>%
1530504824444:filter(SampleType == "positive") %>%
1530504824445:select(GeneTag) %>%
1530504824445:unique() %>% pull())
1530504824455:(genomes_detector <- resultsData %>%
1530504824456:filter(SampleType == "positive") %>%
1530504824457:select(Accn) %>%
1530504824457:unique() %>% pull())
1530504824465:# Check if there are the same number of genes and genomes in both datasets
1530504824466:# (BLAST and detector)
1530504824467:setdiff(blastFilteredResults %>% select(sseqid) %>% pull() %>% unique(),
1530504824467:genomes_detector)
1530504824472:setdiff(blastFilteredResults %>% select(qseqid) %>% pull() %>% unique(),
1530504824473:amrGenes_detector)
1530504824479:# Detector Table presence/absence (whole DB)
1530504824479:# 20x
1530504824480:(detectorPresenceTable_wdb_20x <- resultsData %>%
1530504824481:filter(SampleType == "positive",
1530504824481:SeqDepth == 20) %>%
1530504824482:select(Accn, GeneTag, DetectorPresence) %>%
1530504824482:spread(Accn, DetectorPresence, fill = 0L)
1530504824483:)
1530504824763:# 40x
1530504824764:(detectorPresenceTable_wdb_40x <- resultsData %>%
1530504824764:filter(SampleType == "positive",
1530504824765:SeqDepth == 40) %>%
1530504824765:select(Accn, GeneTag, DetectorPresence) %>%
1530504824766:spread(Accn, DetectorPresence, fill = 0L)
1530504824767:)
1530504825053:# Combined results table: positive dataset
1530504825053:(positivePresenceTable <- left_join(
1530504825054:rbind(
1530504825054:blastPresenceTable %>%
1530504825055:gather(Accn, BlastPresence, -GeneTag) %>%
1530504825055:mutate(SeqDepth = 20L),
1530504825056:blastPresenceTable %>%
1530504825056:gather(Accn, BlastPresence, -GeneTag) %>%
1530504825057:mutate(SeqDepth = 40L)
1530504825058:),
1530504825058:rbind(
1530504825059:detectorPresenceTable_wdb_20x %>%
1530504825059:gather(Accn, DetectorPresence, -GeneTag) %>%
1530504825060:mutate(SeqDepth = 20L),
1530504825060:detectorPresenceTable_wdb_40x %>%
1530504825061:gather(Accn, DetectorPresence, -GeneTag) %>%
1530504825061:mutate(SeqDepth = 40L)
1530504825062:)
1530504825063:) )
1530504825216:(positive_20x_results <- confusionMatrix(data = factor(positivePresenceTable %>% filter(SeqDepth == 20) %>% pull(DetectorPresence)),
1530504825217:reference = factor(positivePresenceTable %>% filter(SeqDepth == 20) %>% pull(BlastPresence)),
1530504825218:positive = "1"))
1530504825233:(positive_40x_results <- confusionMatrix(data = factor(positivePresenceTable %>% filter(SeqDepth == 40) %>% pull(DetectorPresence)),
1530504825234:reference = factor(positivePresenceTable %>% filter(SeqDepth == 40) %>% pull(BlastPresence)),
1530504825234:positive = "1"))
1530504825244:positive_confMatrixResults <- rbind(
1530504825245:cbind(as.data.frame(as.table(positive_20x_results)),
1530504825245:SeqDepth = rep(20, 4)),
1530504825245:cbind(as.data.frame(as.table(positive_40x_results)),
1530504825246:SeqDepth = rep(40, 4)))
1530504865196:# Detector Table presence/absence (whole DB)
1530504865197:# 20x
1530504865197:(negDetectorPresenceTable_wdb_20x <- resultsData %>%
1530504865198:filter(SampleType == "negative",
1530504865199:SeqDepth == 20) %>%
1530504865199:select(Accn, GeneTag, DetectorPresence) %>%
1530504865200:spread(Accn, DetectorPresence, fill = 0L)
1530504865200:)
1530504924545:resultsData %>%
1530504924545:filter(SampleType == "negative",
1530504924546:SeqDepth == 20)
1530505148205:rbind(
1530505148206:blastPresenceTable %>%
1530505148207:gather(Accn, BlastPresence, -GeneTag) %>%
1530505148207:mutate(SeqDepth = 20L, BlastPresence = 0),
1530505148208:blastPresenceTable %>%
1530505148208:gather(Accn, BlastPresence, -GeneTag) %>%
1530505148209:mutate(SeqDepth = 40L, BlastPresence = 0)
1530505148210:) %>%
1530505148210:left_join(resultsData %>%
1530505148211:filter(SampleType == "negative",
1530505148211:!is.na(GeneTag)))
1530505210751:rbind(
1530505210751:blastPresenceTable %>%
1530505210752:gather(Accn, BlastPresence, -GeneTag) %>%
1530505210753:mutate(SeqDepth = 20L, BlastPresence = 0),
1530505210753:blastPresenceTable %>%
1530505210754:gather(Accn, BlastPresence, -GeneTag) %>%
1530505210754:mutate(SeqDepth = 40L, BlastPresence = 0)
1530505210755:) %>%
1530505210756:left_join(resultsData %>%
1530505210756:filter(SampleType == "negative",
1530505210757:!is.na(GeneTag)) %>%
1530505210758:select(Accn, GeneTag, DetectorPresence, SeqDepth)
1530505210758:)
1530505244435:rbind(
1530505244435:blastPresenceTable %>%
1530505244436:gather(Accn, BlastPresence, -GeneTag) %>%
1530505244437:mutate(SeqDepth = 20L, BlastPresence = 0),
1530505244437:blastPresenceTable %>%
1530505244438:gather(Accn, BlastPresence, -GeneTag) %>%
1530505244438:mutate(SeqDepth = 40L, BlastPresence = 0)
1530505244439:)
1530505256388:rbind(
1530505256389:blastPresenceTable %>%
1530505256389:gather(Accn, BlastPresence, -GeneTag) %>%
1530505256390:mutate(SeqDepth = 20L, BlastPresence = 0),
1530505256391:blastPresenceTable %>%
1530505256391:gather(Accn, BlastPresence, -GeneTag) %>%
1530505256392:mutate(SeqDepth = 40L, BlastPresence = 0)
1530505256392:) %>%
1530505256393:left_join(resultsData %>%
1530505256394:filter(SampleType == "negative",
1530505256395:!is.na(GeneTag)) %>%
1530505256396:select(Accn, GeneTag, DetectorPresence, SeqDepth)
1530505256397:)
1530505281746:(negDetectorPresenceTable_wdb <- rbind(
1530505281747:blastPresenceTable %>%
1530505281748:gather(Accn, BlastPresence, -GeneTag) %>%
1530505281748:mutate(SeqDepth = 20L, BlastPresence = 0),
1530505281749:blastPresenceTable %>%
1530505281749:gather(Accn, BlastPresence, -GeneTag) %>%
1530505281750:mutate(SeqDepth = 40L, BlastPresence = 0)
1530505281751:) %>%
1530505281751:left_join(resultsData %>%
1530505281752:filter(SampleType == "negative",
1530505281753:!is.na(GeneTag)) %>%
1530505281753:select(Accn, GeneTag, DetectorPresence, SeqDepth)
1530505281754:))
1530505304858:(negativePresenceTable <- rbind(
1530505304859:blastPresenceTable %>%
1530505304859:gather(Accn, BlastPresence, -GeneTag) %>%
1530505304860:mutate(SeqDepth = 20L, BlastPresence = 0),
1530505304860:blastPresenceTable %>%
1530505304860:gather(Accn, BlastPresence, -GeneTag) %>%
1530505304861:mutate(SeqDepth = 40L, BlastPresence = 0)
1530505304861:) %>%
1530505304861:left_join(resultsData %>%
1530505304862:filter(SampleType == "negative",
1530505304862:!is.na(GeneTag)) %>%
1530505304863:select(Accn, GeneTag, DetectorPresence, SeqDepth)
1530505304863:))
1530505338284:negativePresenceTable %>%
1530505338285:filter(DetectorPresence == 1)
1530505374104:negativePresenceTable %>%
1530505374104:filter(DetectorPresence == 1, BlastPresence == 0)
1530505457755:(negative_20x_results <- confusionMatrix(data = factor(negativePresenceTable %>% filter(SeqDepth == 20) %>% pull(DetectorPresence)),
1530505457756:reference = factor(negativePresenceTable %>% filter(SeqDepth == 20) %>% pull(BlastPresence)),
1530505457757:positive = "1"))
1530505470887:factor(negativePresenceTable %>% filter(SeqDepth == 20) %>% pull(DetectorPresence))
1530505482522:factor(negativePresenceTable %>% filter(SeqDepth == 20) %>% pull(DetectorPresence)
1530505484591:)
1530505508881:View(negativePresenceTable)
1530505682149:(negativePresenceTable <- rbind(
1530505682149:blastPresenceTable %>%
1530505682150:gather(Accn, BlastPresence, -GeneTag) %>%
1530505682151:mutate(SeqDepth = 20L, BlastPresence = 0),
1530505682151:blastPresenceTable %>%
1530505682152:gather(Accn, BlastPresence, -GeneTag) %>%
1530505682153:mutate(SeqDepth = 40L, BlastPresence = 0)
1530505682153:) %>%
1530505682155:left_join(resultsData %>%
1530505682156:filter(SampleType == "negative",
1530505682156:!is.na(GeneTag)) %>%
1530505682157:select(Accn, GeneTag, DetectorPresence, SeqDepth)
1530505682157:) %>%
1530505682158:mutate(DetectorPresence = if_else(is.na(DetectorPresence), 0, 1))
1530505682166:)
1530505704420:View(negativePresenceTable)
1530505745891:(negativePresenceTable <- rbind(
1530505745899:blastPresenceTable %>%
1530505745900:gather(Accn, BlastPresence, -GeneTag) %>%
1530505745900:mutate(SeqDepth = 20L, BlastPresence = 0),
1530505745901:blastPresenceTable %>%
1530505745902:gather(Accn, BlastPresence, -GeneTag) %>%
1530505745902:mutate(SeqDepth = 40L, BlastPresence = 0)
1530505745903:) %>%
1530505745903:left_join(resultsData %>%
1530505745904:filter(SampleType == "negative",
1530505745905:!is.na(GeneTag)) %>%
1530505745905:select(Accn, GeneTag, DetectorPresence, SeqDepth)
1530505745908:) %>%
1530505745909:mutate(DetectorPresence = if_else(is.na(DetectorPresence), 0, DetectorPresence))
1530505745910:)
1530505902899:(negativePresenceTable <- rbind(
1530505902900:blastPresenceTable %>%
1530505902900:gather(Accn, BlastPresence, -GeneTag) %>%
1530505902901:mutate(SeqDepth = 20L, BlastPresence = 0),
1530505902901:blastPresenceTable %>%
1530505902901:gather(Accn, BlastPresence, -GeneTag) %>%
1530505902902:mutate(SeqDepth = 40L, BlastPresence = 0)
1530505902902:) %>%
1530505902903:left_join(resultsData %>%
1530505902903:filter(SampleType == "negative",
1530505902903:!is.na(GeneTag)) %>%
1530505902904:select(Accn, GeneTag, DetectorPresence, SeqDepth)
1530505902904:) %>%
1530505902904:mutate(DetectorPresence = case_when(is.na(DetectorPresence) ~ 0,
1530505902905:TRUE ~ DetectorPresence))
1530505902905:)
1530505907427:(negativePresenceTable <- rbind(
1530505907427:blastPresenceTable %>%
1530505907428:gather(Accn, BlastPresence, -GeneTag) %>%
1530505907428:mutate(SeqDepth = 20L, BlastPresence = 0),
1530505907428:blastPresenceTable %>%
1530505907429:gather(Accn, BlastPresence, -GeneTag) %>%
1530505907429:mutate(SeqDepth = 40L, BlastPresence = 0)
1530505907429:) %>%
1530505907430:left_join(resultsData %>%
1530505907430:filter(SampleType == "negative",
1530505907431:!is.na(GeneTag)) %>%
1530505907431:select(Accn, GeneTag, DetectorPresence, SeqDepth)
1530505907431:) %>%
1530505907432:mutate(DetectorPresence = case_when(is.na(DetectorPresence) ~ 0,
1530505907432:TRUE ~ DetectorPresence))
1530505907433:)
1530506322141:(negativePresenceTable <- rbind(
1530506322142:blastPresenceTable %>%
1530506322143:gather(Accn, BlastPresence, -GeneTag) %>%
1530506322144:mutate(SeqDepth = 20L, BlastPresence = 0),
1530506322144:blastPresenceTable %>%
1530506322145:gather(Accn, BlastPresence, -GeneTag) %>%
1530506322146:mutate(SeqDepth = 40L, BlastPresence = 0)
1530506322146:) %>%
1530506322147:left_join(resultsData %>%
1530506322147:filter(SampleType == "negative",
1530506322148:!is.na(GeneTag)) %>%
1530506322149:select(Accn, GeneTag, DetectorPresence, SeqDepth)
1530506322149:) %>%
1530506322150:mutate(DetectorPresence = if_else(is.na(DetectorPresence), 0, .))
1530506322151:)
1530506530597:(negativePresenceTable <- rbind(
1530506530598:blastPresenceTable %>%
1530506530598:gather(Accn, BlastPresence, -GeneTag) %>%
1530506530599:mutate(SeqDepth = 20L, BlastPresence = 0),
1530506530599:blastPresenceTable %>%
1530506530599:gather(Accn, BlastPresence, -GeneTag) %>%
1530506530600:mutate(SeqDepth = 40L, BlastPresence = 0)
1530506530600:) %>%
1530506530601:left_join(resultsData %>%
1530506530602:filter(SampleType == "negative",
1530506530602:!is.na(GeneTag)) %>%
1530506530603:select(Accn, GeneTag, DetectorPresence, SeqDepth)
1530506530603:) %>%
1530506530604:replace_na(list(DetectorPresence = 0))
1530506530605:)
1530506541069:View(negativePresenceTable)
1530506557579:(negative_20x_results <- confusionMatrix(data = factor(negativePresenceTable %>% filter(SeqDepth == 20) %>% pull(DetectorPresence)),
1530506557580:reference = factor(negativePresenceTable %>% filter(SeqDepth == 20) %>% pull(BlastPresence)),
1530506557580:positive = "1"))
1530506671160:FP <- negativePresenceTable %>%
1530506671160:filter(BlastPresence == 0, DetectorPresence == 1)
1530506674169:FP
1530506680327:(FP <- negativePresenceTable %>%
1530506680327:filter(BlastPresence == 0, DetectorPresence == 1))
1530506698536:(FP <- negativePresenceTable %>%
1530506698537:filter(DetectorPresence == 1))
1530506800749:positivePresenceTable %>%
1530506800750:filter(BlastPresence == 0, DetectorPresence == 1)
1530506817434:positivePresenceTable %>%
1530506817434:filter(BlastPresence == 1, DetectorPresence == 1)
1530506826643:positivePresenceTable %>%
1530506826644:filter(BlastPresence == 1, DetectorPresence == 0)
1530506851119:positivePresenceTable %>%
1530506851120:filter(BlastPresence == 0, DetectorPresence == 01)
1530506863615:positivePresenceTable
1530506869352:positive_confMatrixResults
1530506890786:positivePresenceTable %>%
1530506890788:filter(BlastPresence == 1, DetectorPresence == 0)
1530507407718:blastFilteredResults
1530507424647:(blastFilteredResults <- blastData %>%
1530507424647:mutate(BlastPresence = if_else(pident == 100 && qcovhsp == 100, 1L, 0L)) %>%
1530507424648:filter(BlastPresence == 1L)
1530507424648:)
1530507434330:(blastFilteredResults <- blastData %>%
1530507434331:mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1L, 0L)) %>%
1530507434332:filter(BlastPresence == 1L)
1530507434332:)
1530507444223:View(blastFilteredResults)
1530507515213:positivePresenceTable %>%
1530507515213:filter(BlastPresence == 1, DetectorPresence == 0)
1530507852107:(negativePresenceTable <- rbind(
1530507852107:blastPresenceTable %>%
1530507852108:gather(Accn, BlastPresence, -GeneTag) %>%
1530507852108:mutate(SeqDepth = 20L, BlastPresence = 0),
1530507852109:blastPresenceTable %>%
1530507852109:gather(Accn, BlastPresence, -GeneTag) %>%
1530507852110:mutate(SeqDepth = 40L, BlastPresence = 0)
1530507852110:) %>%
1530507852111:left_join(resultsData %>%
1530507852111:filter(SampleType == "negative",
1530507852112:!is.na(GeneTag)) %>%
1530507852112:select(Accn, GeneTag, DetectorPresence, SeqDepth)
1530507852113:) %>%
1530507852113:replace_na(list(DetectorPresence = 0))
1530507852114:)
1530507948615:(FP <- negativePresenceTable %>%
1530507948616:filter(DetectorPresence == 1))
1530508045513:(TN <- negativePresenceTable %>%
1530508045514:filter(DetectorPresence == 0))
1530508121748:(TN <- negativePresenceTable %>%
1530508121749:filter(DetectorPresence == 0) %>%
1530508121750:group_by(SeqDepth) %>%
1530508121750:sumarise(TN = n()))
1530508138638:negativePresenceTable %>%
1530508138639:filter(DetectorPresence == 0) %>%
1530508138640:group_by(SeqDepth) %>%
1530508138640:summarise(TN = n())
1530508355062:FP
1530508781284:(TN <- negativePresenceTable %>%
1530508781285:filter(DetectorPresence == 0) %>%
1530508781285:group_by(SeqDepth) %>%
1530508781286:summarise(TN = n()))
1530721982584:#!/usr/bin/env Rscript
1530721982602:################################################################################
1530721982602:# Author:      Hector Fabio Espitia Navarro
1530721982603:#              Georgia Institute of Technology
1530721982604:# Version:     1.0
1530721982604:# Date:
1530721982604:# Description:
1530721982605:################################################################################
1530721982605:# Install required packages
1530721982605:# personal.lib.path <- Sys.getenv("R_LIBS_USER")
1530721982606:# if(!file.exists(personal.lib.path))
1530721982612:#   dir.create(personal.lib.path)
1530721982613:installAndLoadPackages <- function(pkg){
1530721982613:cat("Please wait a moment! Checking for required packages... ")
1530721982614:cat("Done!\n")
1530721982615:new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
1530721982616:if (length(new.pkg)) {
1530721982616:cat("Installing new packages... ")
1530721982617:install.packages(new.pkg, dependencies = TRUE,
1530721982617:repos="http://cran.rstudio.com/") #,
1530721982618:# lib = personal.lib.path)
1530721982618:cat("Done!\n")
1530721982629:}
1530721982630:cat("Loading required packages... ")
1530721982630:sapply(pkg, function(x){
1530721982631:suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
1530721982632:})
1530721982632:cat("Done!\n")
1530721982633:}
1530721982634:# github.packages <- c("tibble")
1530721982635:# packages <- c("argparser", "tidyverse", "RColorBrewer")#, "ggplot2",  "tidyr")
1530721982641:packages <- c("argparser", "dplyr", "ggplot2", "RColorBrewer", "readr", "tidyr",
1530721982642:"caret")#, "ggplot2",  "tidyr")
1530721982646:installAndLoadPackages(packages)
1530721988526:################################################################################
1530721988527:# Get script name
1530721988527:initial.options <- commandArgs(trailingOnly = FALSE)
1530721988528:script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
1530721988528:# Process command line arguments
1530721988529:# Create a parser
1530721988529:p <- arg_parser("This script process results from STing detector",
1530721988529:name = script.name)
1530721988578:# Add Positional arguments (required inputs)
1530721988578:p <- add_argument(p, "blast_file", help = "BLAST results file")
1530721988579:p <- add_argument(p, "results_file", help = "Detector results file (tidy format)")
1530721988580:p <- add_argument(p, "identity", help = "BLAST identity cutoff",
1530721988581:default = 80)
1530721988582:p <- add_argument(p, "q_coverage", help = "BLAST query coverage cutoff",
1530721988583:default = 80)
1530721988584:# p <- add_argument(p, "genes_ref_file", help = "Genes ref file (short: tag and name)")
1530721988585:# p <- add_argument(p, "genes_full_ref_file", help = "Genes full ref file (short: tag, name adn others)")
1530721988587:# p <- add_argument(p, "genomes_ref_file", help = "Genomes ref file (short: Accn and Orgnism name)")
1530721988587:# Add options
1530721988587:p <- add_argument(p, "--output_dir", help = "Ouput directory",
1530721988588:default = "./")
1530721988589:# p <- add_argument(p, "--cutoff", help = "dentity and Coverage cutoff value",
1530721988589:#                   default = 80)
1530721988589:# # Parse command line arguments
1530721988590:# argv <- parse_args(p)
1530721988590:# Initialization of variables
1530721988591:# Values to test the script using RStudio
1530721988591:# testDir          <- "test_07_card"
1530721988591:# testDir          <- "test_08_card"
1530721988592:# testDir           <- "test_09_card"
1530721988592:testDir           <- "test_10_card"
1530721988593:blastFile         <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/card_vs_positive.unique.blast")
1530721988594:# resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/detector.tsv")
1530721988595:resultsFile       <- paste0("detector/card/prioritary_who_set/final_set/",testDir,"/results/results.tsv")
1530721988595:identity          <- 100
1530721988596:qCoverage         <- 100
1530721988597:outputDir         <- paste0("detector/card/prioritary_who_set/final_set/",testDir)
1530721988598:# genesRefFile      <- "detector/card/prioritary_who_set/final_set/tags_names_xRef.tsv"
1530721988598:# genesFullRefFile  <- "detector/card/prioritary_who_set/final_set/card_tags_xRef.tsv"
1530721988599:# genomesRefFile    <- "detector/card/prioritary_who_set/final_set/genomesTableRef.tsv"
1530721988599:# cutoff            <- 100
1530721988600:# Parse command line arguments
1530721988601:command.line = FALSE   # Turn to FALSE to test the script inside RStudio
1530721988601:argv <- list()
1530721988602:if(command.line) {
1530721988603:argv <- parse_args(p)
1530721988603:} else {
1530721988604:argv <- parse_args(p, list(blastFile, resultsFile, identity, qCoverage,
1530721988604:"--output_dir", outputDir))#,
1530721988604:# genesRefFile, genesFullRefFile, genomesRefFile,
1530721988605:# "--cutoff", cutoff))
1530721988605:}
1530721988608:# Get argument values from command line
1530721988609:blastFile         <- argv$blast_file
1530721988609:resultsFile       <- argv$results_file
1530721988610:identity          <- argv$identity
1530721988611:qCoverage         <- argv$q_coverage
1530721988612:outputDir         <- argv$output_dir
1530721988613:# genesRefFile      <- argv$genes_ref_file
1530721988613:# genesFullRefFile  <- argv$genes_full_ref_file
1530721988614:# genomesRefFile    <- argv$genomes_ref_file
1530721988614:# cutoff            <- argv$cutoff
1530721988615:# Function for checking input files ###########################################
1530721988616:CheckFileExists <- function(file.list) {
1530721988617:non.exist.files <- !file.exists(file.list)
1530721988617:if(any(non.exist.files)) {
1530721988618:sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
1530721988618:}
1530721988619:}
1530721988620:# Check for input files #######################################################
1530721988620:files.to.check <- c(blastFile, resultsFile)
1530721988621:error.message  <- CheckFileExists(files.to.check)
1530721988623:# if(!is.null(error.message)){
1530721988623:# stop(error.message)
1530721988624:# } else {
1530721988625:# Data --------------------------------------------------------------------
1530721988625:# Load data files
1530721988626:blastData    <- read_tsv(blastFile)
1530721988786:resultsData  <- read_tsv(resultsFile)
1530721989039:# genesRef     <- read_tsv(genesRefFile, col_names = c("GeneTag", "GeneName"))
1530721989039:# genesFullRef <- read_tsv(genesFullRefFile, col_names = c("GeneTag", "CARD_description"))
1530721989039:# genomesRef   <- read_tsv(genomesRefFile)
1530721989040:# Process results ---------------------------------------------------------
1530721989040:# cat(paste("Test directory:            ", testDir))
1530721989041:# cat(paste("Identity & Coverage cutoff:", cutoff))
1530721989041:(amrGenes <- blastData %>%
1530721989042:select(Accn = qseqid) %>%
1530721989042:unique() %>% pull())
1530721989090:(genomes <- blastData %>%
1530721989091:select(GeneTag = sseqid) %>%
1530721989091:unique() %>% pull())
1530721989136:# (blastFilteredResults <- blastData %>%
1530721989136:#     mutate(BlastPresence = if_else(pident == 100 & qcovhsp == 100, 1, 0)) %>%
1530721989136:#     select(Accn = sseqid, GeneTag = qseqid, BlastPresence) %>%
1530721989136:#     spread(Accn, BlastPresence)
1530721989137:# )
1530721989137:(blastFilteredResults <- blastData %>%
1530721989138:mutate(BlastPresence = if_else(pident == identity & qcovhsp == qCoverage, 1L, 0L)) %>%
1530721989138:filter(BlastPresence == 1L)
1530721989138:)
1530721990081:# BLAST Table presence/absence
1530721990082:(blastPresenceTable <- blastData %>%
1530721990082:mutate(BlastPresence = if_else(pident == identity & qcovhsp == qCoverage, 1L, 0L)) %>%
1530721990083:filter(BlastPresence == 1L) %>%
1530721990084:select(Accn = sseqid, GeneTag = qseqid, BlastPresence) %>%
1530721990084:spread(Accn, BlastPresence, fill = 0L)
1530721990085:)
1530721990470:(amrGenes_detector <- resultsData %>%
1530721990471:filter(SampleType == "positive") %>%
1530721990471:select(GeneTag) %>%
1530721990471:unique() %>% pull())
1530721990477:(genomes_detector <- resultsData %>%
1530721990478:filter(SampleType == "positive") %>%
1530721990478:select(Accn) %>%
1530721990478:unique() %>% pull())
1530721990484:# Check if there are the same number of genes and genomes in both datasets
1530721990484:# (BLAST and detector)
1530721990484:setdiff(blastFilteredResults %>% select(sseqid) %>% pull() %>% unique(),
1530721990485:genomes_detector)
1530721990488:setdiff(blastFilteredResults %>% select(qseqid) %>% pull() %>% unique(),
1530721990488:amrGenes_detector)
1530721990493:# Detector Table presence/absence (whole DB)
1530721990493:# 20x
1530721990494:(detectorPresenceTable_wdb_20x <- resultsData %>%
1530721990494:filter(SampleType == "positive",
1530721990495:SeqDepth == 20) %>%
1530721990495:select(Accn, GeneTag, DetectorPresence) %>%
1530721990496:spread(Accn, DetectorPresence, fill = 0L)
1530721990496:)
1530721990857:# 40x
1530721990857:(detectorPresenceTable_wdb_40x <- resultsData %>%
1530721990858:filter(SampleType == "positive",
1530721990858:SeqDepth == 40) %>%
1530721990859:select(Accn, GeneTag, DetectorPresence) %>%
1530721990859:spread(Accn, DetectorPresence, fill = 0L)
1530721990859:)
1530721991163:# Combined results table: positive dataset
1530721991163:(positivePresenceTable <- left_join(
1530721991164:rbind(
1530721991164:blastPresenceTable %>%
1530721991165:gather(Accn, BlastPresence, -GeneTag) %>%
1530721991165:mutate(SeqDepth = 20L),
1530721991166:blastPresenceTable %>%
1530721991166:gather(Accn, BlastPresence, -GeneTag) %>%
1530721991167:mutate(SeqDepth = 40L)
1530721991168:),
1530721991168:rbind(
1530721991169:detectorPresenceTable_wdb_20x %>%
1530721991169:gather(Accn, DetectorPresence, -GeneTag) %>%
1530721991170:mutate(SeqDepth = 20L),
1530721991170:detectorPresenceTable_wdb_40x %>%
1530721991170:gather(Accn, DetectorPresence, -GeneTag) %>%
1530721991171:mutate(SeqDepth = 40L)
1530721991171:)
1530721991171:) )
1530721991419:# FN
1530721991420:positivePresenceTable %>%
1530721991420:filter(BlastPresence == 1, DetectorPresence == 0)
1530721991511:(positive_20x_results <- confusionMatrix(data = factor(positivePresenceTable %>% filter(SeqDepth == 20) %>% pull(DetectorPresence)),
1530721991512:reference = factor(positivePresenceTable %>% filter(SeqDepth == 20) %>% pull(BlastPresence)),
1530721991512:positive = "1"))
1530721991740:(positive_40x_results <- confusionMatrix(data = factor(positivePresenceTable %>% filter(SeqDepth == 40) %>% pull(DetectorPresence)),
1530721991740:reference = factor(positivePresenceTable %>% filter(SeqDepth == 40) %>% pull(BlastPresence)),
1530721991741:positive = "1"))
1530721992051:positive_confMatrixResults <- rbind(
1530721992052:cbind(as.data.frame(as.table(positive_20x_results)),
1530721992052:SeqDepth = rep(20, 4)),
1530721992052:cbind(as.data.frame(as.table(positive_40x_results)),
1530721992052:SeqDepth = rep(40, 4)))
1530722003006:# Detector Table presence/absence (whole DB)
1530722003006:# 20x
1530722003007:(negativePresenceTable <- rbind(
1530722003007:blastPresenceTable %>%
1530722003008:gather(Accn, BlastPresence, -GeneTag) %>%
1530722003008:mutate(SeqDepth = 20L, BlastPresence = 0),
1530722003008:blastPresenceTable %>%
1530722003009:gather(Accn, BlastPresence, -GeneTag) %>%
1530722003009:mutate(SeqDepth = 40L, BlastPresence = 0)
1530722003010:) %>%
1530722003010:left_join(resultsData %>%
1530722003011:filter(SampleType == "negative",
1530722003012:!is.na(GeneTag)) %>%
1530722003012:select(Accn, GeneTag, DetectorPresence, SeqDepth)
1530722003013:) %>%
1530722003013:replace_na(list(DetectorPresence = 0))
1530722003013:)
1530722035057:positivePresenceTable
1530722068185:wholeResultsTable <- rbind(positivePresenceTable, negativePresenceTable)
1530722088613:confusionMatrix(data = factor(wholeResultsTable %>% filter(SeqDepth == 20) %>% pull(DetectorPresence)),
1530722088614:reference = factor(wholeResultsTable %>% filter(SeqDepth == 20) %>% pull(BlastPresence)),
1530722088615:positive = "1")
1530722112977:confusionMatrix(data = factor(wholeResultsTable %>% filter(SeqDepth == 40) %>% pull(DetectorPresence)),
1530722112978:reference = factor(wholeResultsTable %>% filter(SeqDepth == 40) %>% pull(BlastPresence)),
1530722112978:positive = "1")
1530722217168:confMatrix_20x <- confusionMatrix(data = factor(wholeResultsTable %>% filter(SeqDepth == 20) %>% pull(DetectorPresence)),
1530722217169:reference = factor(wholeResultsTable %>% filter(SeqDepth == 20) %>% pull(BlastPresence)),
1530722217170:positive = "1")
1530722217656:confMatrix_40x <- confusionMatrix(data = factor(wholeResultsTable %>% filter(SeqDepth == 40) %>% pull(DetectorPresence)),
1530722217656:reference = factor(wholeResultsTable %>% filter(SeqDepth == 40) %>% pull(BlastPresence)),
1530722217657:positive = "1")
1530722232783:confMatrixResults <- rbind(
1530722232784:cbind(as.data.frame(as.table(confMatrix_20x)),
1530722232785:SeqDepth = rep(20, 4)),
1530722232785:cbind(as.data.frame(as.table(confMatrix_40x)),
1530722232786:SeqDepth = rep(40, 4)))
1530722235311:confMatrixResults
1530722247642:(confMatrixResults <- rbind(
1530722247642:cbind(as.data.frame(as.table(confMatrix_20x)),
1530722247643:SeqDepth = rep(20, 4)),
1530722247644:cbind(as.data.frame(as.table(confMatrix_40x)),
1530722247644:SeqDepth = rep(40, 4))))
1530722357573:confMatrix_20x
1530722984614:draw_confusion_matrix <- function(cm) {
1530722984615:layout(matrix(c(1,1,2)))
1530722984615:par(mar=c(2,2,2,2))
1530722984616:plot(c(100, 345), c(300, 450), type = "n", xlab="", ylab="", xaxt='n', yaxt='n')
1530722984616:title('CONFUSION MATRIX', cex.main=2)
1530722984617:# create the matrix
1530722984617:rect(150, 430, 240, 370, col='#3F97D0')
1530722984618:text(195, 435, 'Class1', cex=1.2)
1530722984618:rect(250, 430, 340, 370, col='#F7AD50')
1530722984618:text(295, 435, 'Class2', cex=1.2)
1530722984619:text(125, 370, 'Predicted', cex=1.3, srt=90, font=2)
1530722984619:text(245, 450, 'Actual', cex=1.3, font=2)
1530722984620:rect(150, 305, 240, 365, col='#F7AD50')
1530722984620:rect(250, 305, 340, 365, col='#3F97D0')
1530722984620:text(140, 400, 'Class1', cex=1.2, srt=90)
1530722984621:text(140, 335, 'Class2', cex=1.2, srt=90)
1530722984621:# add in the cm results
1530722984622:res <- as.numeric(cm$table)
1530722984622:text(195, 400, res[1], cex=1.6, font=2, col='white')
1530722984623:text(195, 335, res[2], cex=1.6, font=2, col='white')
1530722984623:text(295, 400, res[3], cex=1.6, font=2, col='white')
1530722984624:text(295, 335, res[4], cex=1.6, font=2, col='white')
1530722984625:# add in the specifics
1530722984626:plot(c(100, 0), c(100, 0), type = "n", xlab="", ylab="", main = "DETAILS", xaxt='n', yaxt='n')
1530722984626:text(10, 85, names(cm$byClass[1]), cex=1.2, font=2)
1530722984627:text(10, 70, round(as.numeric(cm$byClass[1]), 3), cex=1.2)
1530722984628:text(30, 85, names(cm$byClass[2]), cex=1.2, font=2)
1530722984628:text(30, 70, round(as.numeric(cm$byClass[2]), 3), cex=1.2)
1530722984629:text(50, 85, names(cm$byClass[5]), cex=1.2, font=2)
1530722984630:text(50, 70, round(as.numeric(cm$byClass[5]), 3), cex=1.2)
1530722984631:text(70, 85, names(cm$byClass[6]), cex=1.2, font=2)
1530722984632:text(70, 70, round(as.numeric(cm$byClass[6]), 3), cex=1.2)
1530722984633:text(90, 85, names(cm$byClass[7]), cex=1.2, font=2)
1530722984633:text(90, 70, round(as.numeric(cm$byClass[7]), 3), cex=1.2)
1530722984635:# add in the accuracy information
1530722984636:text(30, 35, names(cm$overall[1]), cex=1.5, font=2)
1530722984637:text(30, 20, round(as.numeric(cm$overall[1]), 3), cex=1.4)
1530722984638:text(70, 35, names(cm$overall[2]), cex=1.5, font=2)
1530722984639:text(70, 20, round(as.numeric(cm$overall[2]), 3), cex=1.4)
1530722984640:}
1530722996102:draw_confusion_matrix(confMatrix_20x)
1530723112736:draw_confusion_matrix(confMatrix_20x, "Presence", "Absence")
1530723118665:draw_confusion_matrix <- function(cm, positiveClass, negativeClass) {
1530723118667:layout(matrix(c(1,1,2)))
1530723118667:par(mar=c(2,2,2,2))
1530723118668:plot(c(100, 345), c(300, 450), type = "n", xlab="", ylab="", xaxt='n', yaxt='n')
1530723118668:title('CONFUSION MATRIX', cex.main=2)
1530723118669:# create the matrix
1530723118670:rect(150, 430, 240, 370, col='#3F97D0')
1530723118670:text(195, 435, positiveClass, cex=1.2)
1530723118671:rect(250, 430, 340, 370, col='#F7AD50')
1530723118672:text(295, 435, negativeClass, cex=1.2)
1530723118672:text(125, 370, 'Predicted', cex=1.3, srt=90, font=2)
1530723118673:text(245, 450, 'Actual', cex=1.3, font=2)
1530723118673:rect(150, 305, 240, 365, col='#F7AD50')
1530723118673:rect(250, 305, 340, 365, col='#3F97D0')
1530723118674:text(140, 400, positiveClass, cex=1.2, srt=90)
1530723118674:text(140, 335, negativeClass, cex=1.2, srt=90)
1530723118675:# add in the cm results
1530723118675:res <- as.numeric(cm$table)
1530723118676:text(195, 400, res[1], cex=1.6, font=2, col='white')
1530723118677:text(195, 335, res[2], cex=1.6, font=2, col='white')
1530723118677:text(295, 400, res[3], cex=1.6, font=2, col='white')
1530723118678:text(295, 335, res[4], cex=1.6, font=2, col='white')
1530723118678:# add in the specifics
1530723118679:plot(c(100, 0), c(100, 0), type = "n", xlab="", ylab="", main = "DETAILS", xaxt='n', yaxt='n')
1530723118680:text(10, 85, names(cm$byClass[1]), cex=1.2, font=2)
1530723118680:text(10, 70, round(as.numeric(cm$byClass[1]), 3), cex=1.2)
1530723118681:text(30, 85, names(cm$byClass[2]), cex=1.2, font=2)
1530723118681:text(30, 70, round(as.numeric(cm$byClass[2]), 3), cex=1.2)
1530723118681:text(50, 85, names(cm$byClass[5]), cex=1.2, font=2)
1530723118682:text(50, 70, round(as.numeric(cm$byClass[5]), 3), cex=1.2)
1530723118682:text(70, 85, names(cm$byClass[6]), cex=1.2, font=2)
1530723118683:text(70, 70, round(as.numeric(cm$byClass[6]), 3), cex=1.2)
1530723118684:text(90, 85, names(cm$byClass[7]), cex=1.2, font=2)
1530723118684:text(90, 70, round(as.numeric(cm$byClass[7]), 3), cex=1.2)
1530723118685:# add in the accuracy information
1530723118686:text(30, 35, names(cm$overall[1]), cex=1.5, font=2)
1530723118686:text(30, 20, round(as.numeric(cm$overall[1]), 3), cex=1.4)
1530723118687:text(70, 35, names(cm$overall[2]), cex=1.5, font=2)
1530723118687:text(70, 20, round(as.numeric(cm$overall[2]), 3), cex=1.4)
1530723118688:}
1530723121986:draw_confusion_matrix <- function(cm, positiveClass, negativeClass) {
1530723121992:layout(matrix(c(1,1,2)))
1530723121992:par(mar=c(2,2,2,2))
1530723121993:plot(c(100, 345), c(300, 450), type = "n", xlab="", ylab="", xaxt='n', yaxt='n')
1530723121993:title('CONFUSION MATRIX', cex.main=2)
1530723121994:# create the matrix
1530723121995:rect(150, 430, 240, 370, col='#3F97D0')
1530723121996:text(195, 435, positiveClass, cex=1.2)
1530723121997:rect(250, 430, 340, 370, col='#F7AD50')
1530723121997:text(295, 435, negativeClass, cex=1.2)
1530723121998:text(125, 370, 'Predicted', cex=1.3, srt=90, font=2)
1530723121998:text(245, 450, 'Actual', cex=1.3, font=2)
1530723121999:rect(150, 305, 240, 365, col='#F7AD50')
1530723122000:rect(250, 305, 340, 365, col='#3F97D0')
1530723122001:text(140, 400, positiveClass, cex=1.2, srt=90)
1530723122001:text(140, 335, negativeClass, cex=1.2, srt=90)
1530723122003:# add in the cm results
1530723122003:res <- as.numeric(cm$table)
1530723122004:text(195, 400, res[1], cex=1.6, font=2, col='white')
1530723122005:text(195, 335, res[2], cex=1.6, font=2, col='white')
1530723122005:text(295, 400, res[3], cex=1.6, font=2, col='white')
1530723122006:text(295, 335, res[4], cex=1.6, font=2, col='white')
1530723122008:# add in the specifics
1530723122008:plot(c(100, 0), c(100, 0), type = "n", xlab="", ylab="", main = "DETAILS", xaxt='n', yaxt='n')
1530723122009:text(10, 85, names(cm$byClass[1]), cex=1.2, font=2)
1530723122010:text(10, 70, round(as.numeric(cm$byClass[1]), 3), cex=1.2)
1530723122011:text(30, 85, names(cm$byClass[2]), cex=1.2, font=2)
1530723122012:text(30, 70, round(as.numeric(cm$byClass[2]), 3), cex=1.2)
1530723122012:text(50, 85, names(cm$byClass[5]), cex=1.2, font=2)
1530723122013:text(50, 70, round(as.numeric(cm$byClass[5]), 3), cex=1.2)
1530723122014:text(70, 85, names(cm$byClass[6]), cex=1.2, font=2)
1530723122015:text(70, 70, round(as.numeric(cm$byClass[6]), 3), cex=1.2)
1530723122016:text(90, 85, names(cm$byClass[7]), cex=1.2, font=2)
1530723122018:text(90, 70, round(as.numeric(cm$byClass[7]), 3), cex=1.2)
1530723122020:# add in the accuracy information
1530723122020:text(30, 35, names(cm$overall[1]), cex=1.5, font=2)
1530723122021:text(30, 20, round(as.numeric(cm$overall[1]), 3), cex=1.4)
1530723122023:text(70, 35, names(cm$overall[2]), cex=1.5, font=2)
1530723122024:text(70, 20, round(as.numeric(cm$overall[2]), 3), cex=1.4)
1530723122025:}
1530723127675:draw_confusion_matrix <- function(cm, positiveClass, negativeClass) {
1530723127676:layout(matrix(c(1,1,2)))
1530723127676:par(mar=c(2,2,2,2))
1530723127677:plot(c(100, 345), c(300, 450), type = "n", xlab="", ylab="", xaxt='n', yaxt='n')
1530723127677:title('CONFUSION MATRIX', cex.main=2)
1530723127678:# create the matrix
1530723127679:rect(150, 430, 240, 370, col='#3F97D0')
1530723127679:text(195, 435, positiveClass, cex=1.2)
1530723127680:rect(250, 430, 340, 370, col='#F7AD50')
1530723127681:text(295, 435, negativeClass, cex=1.2)
1530723127681:text(125, 370, 'Predicted', cex=1.3, srt=90, font=2)
1530723127682:text(245, 450, 'Actual', cex=1.3, font=2)
1530723127682:rect(150, 305, 240, 365, col='#F7AD50')
1530723127683:rect(250, 305, 340, 365, col='#3F97D0')
1530723127684:text(140, 400, positiveClass, cex=1.2, srt=90)
1530723127684:text(140, 335, negativeClass, cex=1.2, srt=90)
1530723127686:# add in the cm results
1530723127686:res <- as.numeric(cm$table)
1530723127687:text(195, 400, res[1], cex=1.6, font=2, col='white')
1530723127688:text(195, 335, res[2], cex=1.6, font=2, col='white')
1530723127688:text(295, 400, res[3], cex=1.6, font=2, col='white')
1530723127689:text(295, 335, res[4], cex=1.6, font=2, col='white')
1530723127690:# add in the specifics
1530723127691:plot(c(100, 0), c(100, 0), type = "n", xlab="", ylab="", main = "DETAILS", xaxt='n', yaxt='n')
1530723127692:text(10, 85, names(cm$byClass[1]), cex=1.2, font=2)
1530723127692:text(10, 70, round(as.numeric(cm$byClass[1]), 3), cex=1.2)
1530723127693:text(30, 85, names(cm$byClass[2]), cex=1.2, font=2)
1530723127694:text(30, 70, round(as.numeric(cm$byClass[2]), 3), cex=1.2)
1530723127695:text(50, 85, names(cm$byClass[5]), cex=1.2, font=2)
1530723127695:text(50, 70, round(as.numeric(cm$byClass[5]), 3), cex=1.2)
1530723127696:text(70, 85, names(cm$byClass[6]), cex=1.2, font=2)
1530723127697:text(70, 70, round(as.numeric(cm$byClass[6]), 3), cex=1.2)
1530723127698:text(90, 85, names(cm$byClass[7]), cex=1.2, font=2)
1530723127698:text(90, 70, round(as.numeric(cm$byClass[7]), 3), cex=1.2)
1530723127700:# add in the accuracy information
1530723127701:text(30, 35, names(cm$overall[1]), cex=1.5, font=2)
1530723127701:text(30, 20, round(as.numeric(cm$overall[1]), 3), cex=1.4)
1530723127702:text(70, 35, names(cm$overall[2]), cex=1.5, font=2)
1530723127703:text(70, 20, round(as.numeric(cm$overall[2]), 3), cex=1.4)
1530723127704:}
1530723193341:draw_confusion_matrix <- function(cm, positiveClass, negativeClass) {
1530723193342:layout(matrix(c(1,1,2)))
1530723193342:par(mar=c(2,2,2,2))
1530723193342:plot(c(100, 345), c(300, 450), type = "n", xlab="", ylab="", xaxt='n', yaxt='n')
1530723193343:title('CONFUSION MATRIX', cex.main=2)
1530723193344:# create the matrix
1530723193344:rect(150, 430, 240, 370, col='#3F97D0')
1530723193345:text(195, 435, positiveClass, cex=1.2)
1530723193345:rect(250, 430, 340, 370, col='#F7AD50')
1530723193345:text(295, 435, negativeClass, cex=1.2)
1530723193346:text(125, 370, 'Predicted', cex=1.3, srt=90, font=2)
1530723193346:text(245, 450, 'Actual', cex=1.3, font=2)
1530723193346:rect(150, 305, 240, 365, col='#F7AD50')
1530723193347:rect(250, 305, 340, 365, col='#3F97D0')
1530723193347:text(140, 400, positiveClass, cex=1.2, srt=90)
1530723193348:text(140, 335, negativeClass, cex=1.2, srt=90)
1530723193349:# add in the cm results
1530723193349:res <- as.numeric(cm$table)
1530723193350:text(195, 400, res[1], cex=1.6, font=2, col='white')
1530723193351:text(195, 335, res[2], cex=1.6, font=2, col='white')
1530723193352:text(295, 400, res[3], cex=1.6, font=2, col='white')
1530723193352:text(295, 335, res[4], cex=1.6, font=2, col='white')
1530723193354:# add in the specifics
1530723193354:plot(c(100, 0), c(100, 0), type = "n", xlab="", ylab="", main = "DETAILS", xaxt='n', yaxt='n')
1530723193355:text(10, 85, names(cm$byClass[1]), cex=1.2, font=2)
1530723193356:text(10, 70, round(as.numeric(cm$byClass[1]), 3), cex=1.2)
1530723193356:text(30, 85, names(cm$byClass[2]), cex=1.2, font=2)
1530723193357:text(30, 70, round(as.numeric(cm$byClass[2]), 3), cex=1.2)
1530723193357:text(50, 85, names(cm$byClass[5]), cex=1.2, font=2)
1530723193358:text(50, 70, round(as.numeric(cm$byClass[5]), 3), cex=1.2)
1530723193359:text(70, 85, names(cm$byClass[6]), cex=1.2, font=2)
1530723193359:text(70, 70, round(as.numeric(cm$byClass[6]), 3), cex=1.2)
1530723193360:text(90, 85, names(cm$byClass[7]), cex=1.2, font=2)
1530723193360:text(90, 70, round(as.numeric(cm$byClass[7]), 3), cex=1.2)
1530723193361:# add in the accuracy information
1530723193362:text(30, 35, names(cm$overall[1]), cex=1.5, font=2)
1530723193362:text(30, 20, round(as.numeric(cm$overall[1]), 3), cex=1.4)
1530723193363:text(70, 35, names(cm$overall[2]), cex=1.5, font=2)
1530723193363:text(70, 20, round(as.numeric(cm$overall[2]), 3), cex=1.4)
1530723193364:}
1530723209942:dev.off()
1530723219107:draw_confusion_matrix(confMatrix_20x, "Presence", "Absence")
1530723272128:draw_confusion_matrix <- function(cm, positiveClass, negativeClass) {
1530723272129:layout(matrix(c(1,1,2)))
1530723272129:par(mar=c(2,2,2,2))
1530723272129:plot(c(100, 345), c(300, 450), type = "n", xlab="", ylab="", xaxt='n', yaxt='n')
1530723272130:title('CONFUSION MATRIX', cex.main=2)
1530723272130:# create the matrix
1530723272131:rect(150, 430, 240, 370, col='#3F97D0')
1530723272131:text(195, 435, negativeClass, cex=1.2)
1530723272131:rect(250, 430, 340, 370, col='#F7AD50')
1530723272132:text(295, 435, positiveClass, cex=1.2)
1530723272132:text(125, 370, 'Predicted', cex=1.3, srt=90, font=2)
1530723272133:text(245, 450, 'Actual', cex=1.3, font=2)
1530723272133:rect(150, 305, 240, 365, col='#F7AD50')
1530723272133:rect(250, 305, 340, 365, col='#3F97D0')
1530723272134:text(140, 400, negativeClass, cex=1.2, srt=90)
1530723272134:text(140, 335, positiveClass, cex=1.2, srt=90)
1530723272135:# add in the cm results
1530723272135:res <- as.numeric(cm$table)
1530723272136:text(195, 400, res[1], cex=1.6, font=2, col='white')
1530723272136:text(195, 335, res[2], cex=1.6, font=2, col='white')
1530723272137:text(295, 400, res[3], cex=1.6, font=2, col='white')
1530723272137:text(295, 335, res[4], cex=1.6, font=2, col='white')
1530723272138:# add in the specifics
1530723272138:plot(c(100, 0), c(100, 0), type = "n", xlab="", ylab="", main = "DETAILS", xaxt='n', yaxt='n')
1530723272139:text(10, 85, names(cm$byClass[1]), cex=1.2, font=2)
1530723272139:text(10, 70, round(as.numeric(cm$byClass[1]), 3), cex=1.2)
1530723272140:text(30, 85, names(cm$byClass[2]), cex=1.2, font=2)
1530723272140:text(30, 70, round(as.numeric(cm$byClass[2]), 3), cex=1.2)
1530723272141:text(50, 85, names(cm$byClass[5]), cex=1.2, font=2)
1530723272141:text(50, 70, round(as.numeric(cm$byClass[5]), 3), cex=1.2)
1530723272142:text(70, 85, names(cm$byClass[6]), cex=1.2, font=2)
1530723272142:text(70, 70, round(as.numeric(cm$byClass[6]), 3), cex=1.2)
1530723272143:text(90, 85, names(cm$byClass[7]), cex=1.2, font=2)
1530723272144:text(90, 70, round(as.numeric(cm$byClass[7]), 3), cex=1.2)
1530723272145:# add in the accuracy information
1530723272146:text(30, 35, names(cm$overall[1]), cex=1.5, font=2)
1530723272146:text(30, 20, round(as.numeric(cm$overall[1]), 3), cex=1.4)
1530723272147:text(70, 35, names(cm$overall[2]), cex=1.5, font=2)
1530723272148:text(70, 20, round(as.numeric(cm$overall[2]), 3), cex=1.4)
1530723272148:}
1530723275825:dev.off()
1530723277791:draw_confusion_matrix(confMatrix_20x, "Presence", "Absence")
1530725454017:as.numeric(cm$table)
1530725472972:cm = confMatrix_20x
1530725476793:as.numeric(cm$table)
1530725519161:cm$byClass[1]
1530725560203:dev.off()
1530725561489:par(mar=c(1,1,1,1))
1530725561891:draw_confusion_matrix(confMatrix_20x, "Presence", "Absence")
1530725562255:dev.off()
1530725572454:par(mar=c(0,0,0,0))
1530725572982:draw_confusion_matrix(confMatrix_20x, "Presence", "Absence")
1530725573406:dev.off()
1530725576011:par(mar=c(0,0,0,0))
1530725576783:draw_confusion_matrix(confMatrix_20x, "Presence", "Absence")
1530725589920:draw_confusion_matrix <- function(cm, positiveClass, negativeClass) {
1530725589921:layout(matrix(c(1,1,2)))
1530725589922:par(mar=c(1,2,3,3))
1530725589922:plot(c(100, 345), c(300, 450), type = "n", xlab="", ylab="", xaxt='n', yaxt='n')
1530725589923:title('CONFUSION MATRIX', cex.main=2)
1530725589924:# create the matrix
1530725589924:rect(150, 430, 240, 370, col='#3F97D0')
1530725589925:text(195, 435, negativeClass, cex=1.2)
1530725589925:rect(250, 430, 340, 370, col='#F7AD50')
1530725589926:text(295, 435, positiveClass, cex=1.2)
1530725589926:text(125, 370, 'Predicted', cex=1.3, srt=90, font=2)
1530725589927:text(245, 450, 'Actual', cex=1.3, font=2)
1530725589927:rect(150, 305, 240, 365, col='#F7AD50')
1530725589928:rect(250, 305, 340, 365, col='#3F97D0')
1530725589928:text(140, 400, negativeClass, cex=1.2, srt=90)
1530725589929:text(140, 335, positiveClass, cex=1.2, srt=90)
1530725589930:# add in the cm results
1530725589931:res <- as.numeric(cm$table)
1530725589932:text(195, 400, res[1], cex=1.6, font=2, col='white')
1530725589932:text(195, 335, res[2], cex=1.6, font=2, col='white')
1530725589933:text(295, 400, res[3], cex=1.6, font=2, col='white')
1530725589934:text(295, 335, res[4], cex=1.6, font=2, col='white')
1530725589935:# add in the specifics
1530725589936:plot(c(100, 0), c(100, 0), type = "n", xlab="", ylab="", main = "DETAILS", xaxt='n', yaxt='n')
1530725589936:text(10, 85, names(cm$byClass[1]), cex=1.2, font=2)
1530725589937:text(10, 70, round(as.numeric(cm$byClass[1]), 3), cex=1.2)
1530725589937:text(30, 85, names(cm$byClass[2]), cex=1.2, font=2)
1530725589938:text(30, 70, round(as.numeric(cm$byClass[2]), 3), cex=1.2)
1530725589938:text(50, 85, names(cm$byClass[5]), cex=1.2, font=2)
1530725589939:text(50, 70, round(as.numeric(cm$byClass[5]), 3), cex=1.2)
1530725589939:text(70, 85, names(cm$byClass[6]), cex=1.2, font=2)
1530725589940:text(70, 70, round(as.numeric(cm$byClass[6]), 3), cex=1.2)
1530725589940:text(90, 85, names(cm$byClass[7]), cex=1.2, font=2)
1530725589941:text(90, 70, round(as.numeric(cm$byClass[7]), 3), cex=1.2)
1530725589944:# add in the accuracy information
1530725589944:text(30, 35, names(cm$overall[1]), cex=1.5, font=2)
1530725589945:text(30, 20, round(as.numeric(cm$overall[1]), 3), cex=1.4)
1530725589946:text(70, 35, names(cm$overall[2]), cex=1.5, font=2)
1530725589947:text(70, 20, round(as.numeric(cm$overall[2]), 3), cex=1.4)
1530725589949:}
1530725593223:par(mar=c(0,0,0,0))
1530725593875:draw_confusion_matrix(confMatrix_20x, "Presence", "Absence")
1530725609454:draw_confusion_matrix <- function(cm, positiveClass, negativeClass) {
1530725609455:layout(matrix(c(1,1,2)))
1530725609456:par(mar=c(1,1,1,1))
1530725609456:plot(c(100, 345), c(300, 450), type = "n", xlab="", ylab="", xaxt='n', yaxt='n')
1530725609457:title('CONFUSION MATRIX', cex.main=2)
1530725609458:# create the matrix
1530725609458:rect(150, 430, 240, 370, col='#3F97D0')
1530725609459:text(195, 435, negativeClass, cex=1.2)
1530725609459:rect(250, 430, 340, 370, col='#F7AD50')
1530725609460:text(295, 435, positiveClass, cex=1.2)
1530725609461:text(125, 370, 'Predicted', cex=1.3, srt=90, font=2)
1530725609461:text(245, 450, 'Actual', cex=1.3, font=2)
1530725609462:rect(150, 305, 240, 365, col='#F7AD50')
1530725609462:rect(250, 305, 340, 365, col='#3F97D0')
1530725609463:text(140, 400, negativeClass, cex=1.2, srt=90)
1530725609464:text(140, 335, positiveClass, cex=1.2, srt=90)
1530725609465:# add in the cm results
1530725609466:res <- as.numeric(cm$table)
1530725609466:text(195, 400, res[1], cex=1.6, font=2, col='white')
1530725609467:text(195, 335, res[2], cex=1.6, font=2, col='white')
1530725609468:text(295, 400, res[3], cex=1.6, font=2, col='white')
1530725609469:text(295, 335, res[4], cex=1.6, font=2, col='white')
1530725609470:# add in the specifics
1530725609471:plot(c(100, 0), c(100, 0), type = "n", xlab="", ylab="", main = "DETAILS", xaxt='n', yaxt='n')
1530725609471:text(10, 85, names(cm$byClass[1]), cex=1.2, font=2)
1530725609472:text(10, 70, round(as.numeric(cm$byClass[1]), 3), cex=1.2)
1530725609473:text(30, 85, names(cm$byClass[2]), cex=1.2, font=2)
1530725609473:text(30, 70, round(as.numeric(cm$byClass[2]), 3), cex=1.2)
1530725609474:text(50, 85, names(cm$byClass[5]), cex=1.2, font=2)
1530725609475:text(50, 70, round(as.numeric(cm$byClass[5]), 3), cex=1.2)
1530725609476:text(70, 85, names(cm$byClass[6]), cex=1.2, font=2)
1530725609476:text(70, 70, round(as.numeric(cm$byClass[6]), 3), cex=1.2)
1530725609477:text(90, 85, names(cm$byClass[7]), cex=1.2, font=2)
1530725609478:text(90, 70, round(as.numeric(cm$byClass[7]), 3), cex=1.2)
1530725609479:# add in the accuracy information
1530725609480:text(30, 35, names(cm$overall[1]), cex=1.5, font=2)
1530725609481:text(30, 20, round(as.numeric(cm$overall[1]), 3), cex=1.4)
1530725609482:text(70, 35, names(cm$overall[2]), cex=1.5, font=2)
1530725609483:text(70, 20, round(as.numeric(cm$overall[2]), 3), cex=1.4)
1530725609484:}
1530725612958:par(mar=c(0,0,0,0))
1530725613485:draw_confusion_matrix(confMatrix_20x, "Presence", "Absence")
1530725618944:dev.off()
1530725620882:par(mar=c(0,0,0,0))
1530725621510:draw_confusion_matrix(confMatrix_20x, "Presence", "Absence")
1530725642635:draw_confusion_matrix <- function(cm, positiveClass, negativeClass) {
1530725642636:layout(matrix(c(1,1,2)))
1530725642637:par(mar=c(1.4,1.4,1.4,1.4))
1530725642638:plot(c(100, 345), c(300, 450), type = "n", xlab="", ylab="", xaxt='n', yaxt='n')
1530725642638:title('CONFUSION MATRIX', cex.main=2)
1530725642640:# create the matrix
1530725642640:rect(150, 430, 240, 370, col='#3F97D0')
1530725642641:text(195, 435, negativeClass, cex=1.2)
1530725642642:rect(250, 430, 340, 370, col='#F7AD50')
1530725642642:text(295, 435, positiveClass, cex=1.2)
1530725642643:text(125, 370, 'Predicted', cex=1.3, srt=90, font=2)
1530725642643:text(245, 450, 'Actual', cex=1.3, font=2)
1530725642644:rect(150, 305, 240, 365, col='#F7AD50')
1530725642645:rect(250, 305, 340, 365, col='#3F97D0')
1530725642645:text(140, 400, negativeClass, cex=1.2, srt=90)
1530725642646:text(140, 335, positiveClass, cex=1.2, srt=90)
1530725642647:# add in the cm results
1530725642648:res <- as.numeric(cm$table)
1530725642649:text(195, 400, res[1], cex=1.6, font=2, col='white')
1530725642649:text(195, 335, res[2], cex=1.6, font=2, col='white')
1530725642650:text(295, 400, res[3], cex=1.6, font=2, col='white')
1530725642651:text(295, 335, res[4], cex=1.6, font=2, col='white')
1530725642652:# add in the specifics
1530725642653:plot(c(100, 0), c(100, 0), type = "n", xlab="", ylab="", main = "DETAILS", xaxt='n', yaxt='n')
1530725642653:text(10, 85, names(cm$byClass[1]), cex=1.2, font=2)
1530725642654:text(10, 70, round(as.numeric(cm$byClass[1]), 3), cex=1.2)
1530725642655:text(30, 85, names(cm$byClass[2]), cex=1.2, font=2)
1530725642656:text(30, 70, round(as.numeric(cm$byClass[2]), 3), cex=1.2)
1530725642657:text(50, 85, names(cm$byClass[5]), cex=1.2, font=2)
1530725642658:text(50, 70, round(as.numeric(cm$byClass[5]), 3), cex=1.2)
1530725642658:text(70, 85, names(cm$byClass[6]), cex=1.2, font=2)
1530725642659:text(70, 70, round(as.numeric(cm$byClass[6]), 3), cex=1.2)
1530725642660:text(90, 85, names(cm$byClass[7]), cex=1.2, font=2)
1530725642661:text(90, 70, round(as.numeric(cm$byClass[7]), 3), cex=1.2)
1530725642663:# add in the accuracy information
1530725642664:text(30, 35, names(cm$overall[1]), cex=1.5, font=2)
1530725642665:text(30, 20, round(as.numeric(cm$overall[1]), 3), cex=1.4)
1530725642666:text(70, 35, names(cm$overall[2]), cex=1.5, font=2)
1530725642667:text(70, 20, round(as.numeric(cm$overall[2]), 3), cex=1.4)
1530725642668:}
1530725646860:draw_confusion_matrix(confMatrix_20x, "Presence", "Absence")
1530725647824:dev.off()
1530725650095:draw_confusion_matrix(confMatrix_20x, "Presence", "Absence")
1530725734933:draw_confusion_matrix <- function(cm, positiveClass, negativeClass) {
1530725734934:layout(matrix(c(1,1,2)))
1530725734935:par(mar=c(1.4,1.4,2,1.4))
1530725734935:plot(c(100, 345), c(300, 450), type = "n", xlab="", ylab="", xaxt='n', yaxt='n')
1530725734936:title('CONFUSION MATRIX', cex.main=2)
1530725734937:# create the matrix
1530725734949:rect(150, 430, 240, 370, col='#3F97D0')
1530725734950:text(195, 435, negativeClass, cex=1.2)
1530725734950:rect(250, 430, 340, 370, col='#F7AD50')
1530725734951:text(295, 435, positiveClass, cex=1.2)
1530725734952:text(125, 370, 'Predicted', cex=1.3, srt=90, font=2)
1530725734953:text(245, 450, 'Actual', cex=1.3, font=2)
1530725734953:rect(150, 305, 240, 365, col='#F7AD50')
1530725734954:rect(250, 305, 340, 365, col='#3F97D0')
1530725734955:text(140, 400, negativeClass, cex=1.2, srt=90)
1530725734955:text(140, 335, positiveClass, cex=1.2, srt=90)
1530725734957:# add in the cm results
1530725734957:res <- as.numeric(cm$table)
1530725734958:text(195, 400, res[1], cex=1.6, font=2, col='white')
1530725734959:text(195, 335, res[2], cex=1.6, font=2, col='white')
1530725734960:text(295, 400, res[3], cex=1.6, font=2, col='white')
1530725734961:text(295, 335, res[4], cex=1.6, font=2, col='white')
1530725734962:# add in the specifics
1530725734963:plot(c(100, 0), c(100, 0), type = "n", xlab="", ylab="", main = "DETAILS", xaxt='n', yaxt='n')
1530725734964:text(10, 85, names(cm$byClass[1]), cex=1.2, font=2)
1530725734965:text(10, 70, round(as.numeric(cm$byClass[1]), 3), cex=1.2)
1530725734966:text(30, 85, names(cm$byClass[2]), cex=1.2, font=2)
1530725734967:text(30, 70, round(as.numeric(cm$byClass[2]), 3), cex=1.2)
1530725734968:text(50, 85, names(cm$byClass[5]), cex=1.2, font=2)
1530725734968:text(50, 70, round(as.numeric(cm$byClass[5]), 3), cex=1.2)
1530725734969:text(70, 85, names(cm$byClass[6]), cex=1.2, font=2)
1530725734970:text(70, 70, round(as.numeric(cm$byClass[6]), 3), cex=1.2)
1530725734971:text(90, 85, names(cm$byClass[7]), cex=1.2, font=2)
1530725734972:text(90, 70, round(as.numeric(cm$byClass[7]), 3), cex=1.2)
1530725734974:# add in the accuracy information
1530725734975:text(30, 35, names(cm$overall[1]), cex=1.5, font=2)
1530725734976:text(30, 20, round(as.numeric(cm$overall[1]), 3), cex=1.4)
1530725734977:text(70, 35, names(cm$overall[2]), cex=1.5, font=2)
1530725734980:text(70, 20, round(as.numeric(cm$overall[2]), 3), cex=1.4)
1530725734981:}
1530725743897:draw_confusion_matrix(confMatrix_20x, "Presence", "Absence")
1530725842267:# draw_confusion_matrix(confMatrix_20x, "Presence", "Absence")
1530725842267:draw_confusion_matrix(positive_20x_results, "Presence", "Absence")
1530725868994:draw_confusion_matrix <- function(cm, positiveClass, negativeClass) {
1530725868995:layout(matrix(c(1,1,2)))
1530725868996:par(mar=c(1.4,1.4,2,1.4))
1530725868997:plot(c(100, 345), c(300, 450), type = "n", xlab="", ylab="", xaxt='n', yaxt='n')
1530725868997:title('CONFUSION MATRIX', cex.main=2)
1530725868998:# create the matrix
1530725868999:rect(150, 430, 240, 370, col='#3F97D0')
1530725869001:text(195, 435, negativeClass, cex=1.2)
1530725869002:rect(250, 430, 340, 370, col='#F7AD50')
1530725869002:text(295, 435, positiveClass, cex=1.2)
1530725869003:text(125, 370, 'Predicted', cex=1.3, srt=90, font=2)
1530725869012:text(245, 450, 'Actual', cex=1.3, font=2)
1530725869013:rect(150, 305, 240, 365, col='#F7AD50')
1530725869014:rect(250, 305, 340, 365, col='#3F97D0')
1530725869015:text(140, 400, negativeClass, cex=1.2, srt=90)
1530725869016:text(140, 335, positiveClass, cex=1.2, srt=90)
1530725869017:# add in the cm results
1530725869017:res <- as.numeric(cm$table)
1530725869018:text(195, 400, res[4], cex=1.6, font=2, col='white')
1530725869018:text(195, 335, res[3], cex=1.6, font=2, col='white')
1530725869019:text(295, 400, res[2], cex=1.6, font=2, col='white')
1530725869019:text(295, 335, res[1], cex=1.6, font=2, col='white')
1530725869020:# add in the specifics
1530725869021:plot(c(100, 0), c(100, 0), type = "n", xlab="", ylab="", main = "DETAILS", xaxt='n', yaxt='n')
1530725869021:text(10, 85, names(cm$byClass[1]), cex=1.2, font=2)
1530725869022:text(10, 70, round(as.numeric(cm$byClass[1]), 3), cex=1.2)
1530725869022:text(30, 85, names(cm$byClass[2]), cex=1.2, font=2)
1530725869023:text(30, 70, round(as.numeric(cm$byClass[2]), 3), cex=1.2)
1530725869023:text(50, 85, names(cm$byClass[5]), cex=1.2, font=2)
1530725869024:text(50, 70, round(as.numeric(cm$byClass[5]), 3), cex=1.2)
1530725869025:text(70, 85, names(cm$byClass[6]), cex=1.2, font=2)
1530725869025:text(70, 70, round(as.numeric(cm$byClass[6]), 3), cex=1.2)
1530725869027:text(90, 85, names(cm$byClass[7]), cex=1.2, font=2)
1530725869028:text(90, 70, round(as.numeric(cm$byClass[7]), 3), cex=1.2)
1530725869030:# add in the accuracy information
1530725869031:text(30, 35, names(cm$overall[1]), cex=1.5, font=2)
1530725869032:text(30, 20, round(as.numeric(cm$overall[1]), 3), cex=1.4)
1530725869033:text(70, 35, names(cm$overall[2]), cex=1.5, font=2)
1530725869034:text(70, 20, round(as.numeric(cm$overall[2]), 3), cex=1.4)
1530725869035:}
1530725873244:# draw_confusion_matrix(confMatrix_20x, "Presence", "Absence")
1530725873244:draw_confusion_matrix(positive_20x_results, "Presence", "Absence")
1530725896702:draw_confusion_matrix <- function(cm, positiveClass, negativeClass) {
1530725896703:layout(matrix(c(1,1,2)))
1530725896704:par(mar=c(1.4,1.4,2,1.4))
1530725896705:plot(c(100, 345), c(300, 450), type = "n", xlab="", ylab="", xaxt='n', yaxt='n')
1530725896705:title('CONFUSION MATRIX', cex.main=2)
1530725896706:# create the matrix
1530725896707:rect(150, 430, 240, 370, col='#3F97D0')
1530725896708:text(195, 435, positiveClass, cex=1.2)
1530725896709:rect(250, 430, 340, 370, col='#F7AD50')
1530725896709:text(295, 435, negativeClass, cex=1.2)
1530725896710:text(125, 370, 'Predicted', cex=1.3, srt=90, font=2)
1530725896711:text(245, 450, 'Actual', cex=1.3, font=2)
1530725896712:rect(150, 305, 240, 365, col='#F7AD50')
1530725896714:rect(250, 305, 340, 365, col='#3F97D0')
1530725896715:text(140, 400, positiveClass, cex=1.2, srt=90)
1530725896715:text(140, 335, negativeClass, cex=1.2, srt=90)
1530725896717:# add in the cm results
1530725896717:res <- as.numeric(cm$table)
1530725896718:text(195, 400, res[4], cex=1.6, font=2, col='white')
1530725896719:text(195, 335, res[3], cex=1.6, font=2, col='white')
1530725896720:text(295, 400, res[2], cex=1.6, font=2, col='white')
1530725896721:text(295, 335, res[1], cex=1.6, font=2, col='white')
1530725896722:# add in the specifics
1530725896723:plot(c(100, 0), c(100, 0), type = "n", xlab="", ylab="", main = "DETAILS", xaxt='n', yaxt='n')
1530725896724:text(10, 85, names(cm$byClass[1]), cex=1.2, font=2)
1530725896725:text(10, 70, round(as.numeric(cm$byClass[1]), 3), cex=1.2)
1530725896726:text(30, 85, names(cm$byClass[2]), cex=1.2, font=2)
1530725896727:text(30, 70, round(as.numeric(cm$byClass[2]), 3), cex=1.2)
1530725896728:text(50, 85, names(cm$byClass[5]), cex=1.2, font=2)
1530725896729:text(50, 70, round(as.numeric(cm$byClass[5]), 3), cex=1.2)
1530725896730:text(70, 85, names(cm$byClass[6]), cex=1.2, font=2)
1530725896731:text(70, 70, round(as.numeric(cm$byClass[6]), 3), cex=1.2)
1530725896732:text(90, 85, names(cm$byClass[7]), cex=1.2, font=2)
1530725896733:text(90, 70, round(as.numeric(cm$byClass[7]), 3), cex=1.2)
1530725896735:# add in the accuracy information
1530725896736:text(30, 35, names(cm$overall[1]), cex=1.5, font=2)
1530725896737:text(30, 20, round(as.numeric(cm$overall[1]), 3), cex=1.4)
1530725896738:text(70, 35, names(cm$overall[2]), cex=1.5, font=2)
1530725896739:text(70, 20, round(as.numeric(cm$overall[2]), 3), cex=1.4)
1530725896742:}
1530725900533:# draw_confusion_matrix(confMatrix_20x, "Presence", "Absence")
1530725900534:draw_confusion_matrix(positive_20x_results, "Presence", "Absence")
1530725946409:positive_20x_results
1530725976478:draw_confusion_matrix(confMatrix_20x, "Presence", "Absence")
1530726006605:draw_confusion_matrix <- function(cm, positiveClass, negativeClass) {
1530726006605:layout(matrix(c(1,1,2)))
1530726006606:par(mar=c(1.4,1.4,2,1.4))
1530726006606:plot(c(100, 345), c(300, 450), type = "n", xlab="", ylab="", xaxt='n', yaxt='n')
1530726006606:title('Confusion Matrix', cex.main=2)
1530726006607:# create the matrix
1530726006607:rect(150, 430, 240, 370, col='#3F97D0')
1530726006608:text(195, 435, positiveClass, cex=1.2)
1530726006608:rect(250, 430, 340, 370, col='#F7AD50')
1530726006609:text(295, 435, negativeClass, cex=1.2)
1530726006609:text(125, 370, 'Predicted', cex=1.3, srt=90, font=2)
1530726006609:text(245, 450, 'Actual', cex=1.3, font=2)
1530726006610:rect(150, 305, 240, 365, col='#F7AD50')
1530726006610:rect(250, 305, 340, 365, col='#3F97D0')
1530726006611:text(140, 400, positiveClass, cex=1.2, srt=90)
1530726006611:text(140, 335, negativeClass, cex=1.2, srt=90)
1530726006612:# add in the cm results
1530726006613:res <- as.numeric(cm$table)
1530726006613:text(195, 400, res[4], cex=1.6, font=2, col='white')
1530726006613:text(195, 335, res[3], cex=1.6, font=2, col='white')
1530726006614:text(295, 400, res[2], cex=1.6, font=2, col='white')
1530726006614:text(295, 335, res[1], cex=1.6, font=2, col='white')
1530726006616:# add in the specifics
1530726006616:plot(c(100, 0), c(100, 0), type = "n", xlab="", ylab="", main = "Details", xaxt='n', yaxt='n')
1530726006617:text(10, 85, names(cm$byClass[1]), cex=1.2, font=2)
1530726006617:text(10, 70, round(as.numeric(cm$byClass[1]), 3), cex=1.2)
1530726006618:text(30, 85, names(cm$byClass[2]), cex=1.2, font=2)
1530726006618:text(30, 70, round(as.numeric(cm$byClass[2]), 3), cex=1.2)
1530726006619:text(50, 85, names(cm$byClass[5]), cex=1.2, font=2)
1530726006620:text(50, 70, round(as.numeric(cm$byClass[5]), 3), cex=1.2)
1530726006620:text(70, 85, names(cm$byClass[6]), cex=1.2, font=2)
1530726006621:text(70, 70, round(as.numeric(cm$byClass[6]), 3), cex=1.2)
1530726006623:text(90, 85, names(cm$byClass[7]), cex=1.2, font=2)
1530726006624:text(90, 70, round(as.numeric(cm$byClass[7]), 3), cex=1.2)
1530726006625:# add in the accuracy information
1530726006626:text(30, 35, names(cm$overall[1]), cex=1.5, font=2)
1530726006627:text(30, 20, round(as.numeric(cm$overall[1]), 3), cex=1.4)
1530726006628:text(70, 35, names(cm$overall[2]), cex=1.5, font=2)
1530726006629:text(70, 20, round(as.numeric(cm$overall[2]), 3), cex=1.4)
1530726006630:}
1530726009988:draw_confusion_matrix(confMatrix_20x, "Presence", "Absence")
1530727472637:#generate random data
1530727472637:data = data.frame(sample(LETTERS[0:20], 100, replace=T),sample(LETTERS[0:20], 100, replace=T))
1530727472639:names(data) = c("Actual", "Predicted")
1530727472640:#compute frequency of actual categories
1530727472641:actual = as.data.frame(table(data$Actual))
1530727472642:names(actual) = c("Actual","ActualFreq")
1530727472643:#build confusion matrix
1530727472644:confusion = as.data.frame(table(data$Actual, data$Predicted))
1530727472645:names(confusion) = c("Actual","Predicted","Freq")
1530727472646:#calculate percentage of test cases based on actual frequency
1530727472647:confusion = merge(confusion, actual, by=c(&quot;Actual&quot;))
1530727472648:confusion$Percent = confusion$Freq/confusion$ActualFreq*100
1530727472650:#render plot
1530727472651:# we use three different layers
1530727472651:# first we draw tiles and fill color based on percentage of test cases
1530727472652:tile <- ggplot() +
1530727472652:geom_tile(aes(x=Actual, y=Predicted,fill=Percent),data=confusion, color="black",size=0.1) +
1530727472652:labs(x="Actual",y="Predicted")
1530727472673:tile = tile +
1530727472673:geom_text(aes(x=Actual,y=Predicted, label=sprintf("%.1f", Percent)),data=confusion, size=3, colour="black") +
1530727472674:scale_fill_gradient(low="grey",high="red")
1530727472720:# lastly we draw diagonal tiles. We use alpha = 0 so as not to hide previous layers but use size=0.3 to highlight border
1530727472720:tile = tile +
1530727472720:geom_tile(aes(x=Actual,y=Predicted),data=subset(confusion, as.character(Actual)==as.character(Predicted)), color="black",size=0.3, fill="black", alpha=0)
1530727472724:#render
1530727472724:tile
1530727516483:#compute frequency of actual categories
1530727516484:actual = as.data.frame(table(data$Actual))
1530727517060:names(actual) = c("Actual","ActualFreq")
1530727517753:#build confusion matrix
1530727517753:confusion = as.data.frame(table(data$Actual, data$Predicted))
1530727518455:names(confusion) = c("Actual","Predicted","Freq")
1530727518980:#calculate percentage of test cases based on actual frequency
1530727518981:confusion = merge(confusion, actual, by=c(&quot;Actual&quot;))
1530727544698:#calculate percentage of test cases based on actual frequency
1530727544699:confusion = merge(confusion, actual, by=c("Actual";))
1530727548994:#calculate percentage of test cases based on actual frequency
1530727548994:confusion = merge(confusion, actual, by=c("Actual"))
1530727550375:confusion$Percent = confusion$Freq/confusion$ActualFreq*100
1530727552851:#render plot
1530727552851:# we use three different layers
1530727552851:# first we draw tiles and fill color based on percentage of test cases
1530727552852:tile <- ggplot() +
1530727552852:geom_tile(aes(x=Actual, y=Predicted,fill=Percent),data=confusion, color="black",size=0.1) +
1530727552852:labs(x="Actual",y="Predicted")
1530727552867:tile = tile +
1530727552868:geom_text(aes(x=Actual,y=Predicted, label=sprintf("%.1f", Percent)),data=confusion, size=3, colour="black") +
1530727552868:scale_fill_gradient(low="grey",high="red")
1530727552931:# lastly we draw diagonal tiles. We use alpha = 0 so as not to hide previous layers but use size=0.3 to highlight border
1530727552932:tile = tile +
1530727552932:geom_tile(aes(x=Actual,y=Predicted),data=subset(confusion, as.character(Actual)==as.character(Predicted)), color="black",size=0.3, fill="black", alpha=0)
1530727552936:#render
1530727552936:tile
1537320126884:library(ggplot2)
1537320131227:ggplot(diamonds, aes(carat)) +
1537320131228:geom_histogram()
1537320169679:ggplot(diamonds, aes(carat)) +
1537320169680:geom_histogram(breaks = c(0, 1, 2))
1537320183006:ggplot(diamonds, aes(carat)) +
1537320183006:geom_histogram(breaks = c(0, 0.5, 2))
1537320323463:simple <-
1537320323464:data.frame(x = rep(1:10, each = 2))
1537320327108:simple
1537320330813:base <-
1537320330814:ggplot(simple, aes(x)) # By default, right = FALSE intervals are of the form [a, b)
1537320334811:base + stat_bin(binwidth = 1, drop = FALSE, right = FALSE, col = "black") # If right = TRUE, and intervals are of the form (a, b]
1537320339974:base + stat_bin(binwidth = 1, drop = FALSE, right = TRUE, col = "black")
1537320526024:seq(20, 50, by=2)
