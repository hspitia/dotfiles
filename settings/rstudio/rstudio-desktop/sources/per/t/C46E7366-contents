#!/usr/bin/env Rscript

################################################################################
# Author:   Hector Fabio Espitia Navarro
#           Georgia Institute of Technology
#           
# Version:  1.0
# Date:     02/18/2017
################################################################################
# Install required packages
personal.lib.path <- Sys.getenv("R_LIBS_USER")
if(!file.exists(personal.lib.path))                                                                                    
  dir.create(personal.lib.path)

installAndLoadPackages <- function(pkg){
  cat("Please wait a moment! Checking for required packages... ")
  cat("Done!\n")
  new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
  if (length(new.pkg)) {
    cat("Installing new packages... ")
    install.packages(new.pkg, dependencies = TRUE,
                     repos="http://cran.rstudio.com/",
                     lib = personal.lib.path)
    cat("Done!\n")
  }
  cat("Loading required packages... ")
  sapply(pkg, function(x){
    suppressPackageStartupMessages(require(x, character.only = TRUE, quietly = TRUE))
  })
  cat("Done!\n")
}

# github.packages <- c("tibble")
github.related.packages <- c("devtools", "Rcpp")
packages <- c("argparser", "tidyverse", "RColorBrewer")#, "ggplot2",  "tidyr")

installAndLoadPackages(packages)
# if(any(!(github.related.packages %in% installed.packages()))) {
#   cat("Please wait a moment! Installing required packages... ")
#   install.packages(github.related.packages[!(github.related.packages %in% installed.packages())],
#                    quiet = T, repos="http://cran.rstudio.com/",
#                    lib = personal.lib.path, dependencies = TRUE)
#   if(any(!(github.packages %in% installed.packages()))){
#     devtools::install_github("tidyverse/tibble", 
#                              lib = personal.lib.path, 
#                              quiet = T)
#   }
# }
# 
# if(any(!(packages %in% installed.packages()))){
#   cat("Please wait a moment! Installing required packages... ")
#   install.packages(packages[!(packages %in% installed.packages())], 
#                    quiet = T, repos="http://cran.rstudio.com/",
#                    lib = personal.lib.path, dependencies = TRUE)
#   cat("Done!\n\n\n")
#   cat("Executing the script:\n\n")
# }
# 
# # Load packages
# suppressPackageStartupMessages(library(argparser, quietly = TRUE))
# suppressPackageStartupMessages(library(tidyverse, quietly = TRUE))
# # suppressPackageStartupMessages(library(ggplot2, quietly = TRUE))
# # suppressPackageStartupMessages(library(tidyr, quietly = TRUE))
# suppressPackageStartupMessages(library(RColorBrewer, quietly = TRUE))
################################################################################

# Get script name
initial.options <- commandArgs(trailingOnly = FALSE)
script.name     <- basename(sub("--file=", "", initial.options[grep("--file=", initial.options)]))

# Process command line arguments
# Create a parser
p <- arg_parser("This script generates K-mer depth plots using as input data the file generated by STing typer tool (-t option).",
                name = script.name)
# Add Positional arguments (required)
p <- add_argument(p, "input_file", help = "Samples file. Text file with a list of sample names (line by line).")
# Add options
p <- add_argument(p, "--prefix", help = "Filename prefix for output files.", 
                  default = "kmer_depth")

p <- add_argument(p, "--format", help = "Output file format. Valid options are 'pdf', 'png', and 'svg'", 
                  default = "pdf")

# Initialization of variables
# Values to test the script using RStudio
script.home <- "/home/hspitia/projects/sting"
inputFile  <- paste(script.home, "ext_depth.tsv", sep = "/")
# out.format  <- "pdf"
# out.prefix  <- "~/kmer_ext_depth"

# Parse command line arguments
command.line = TRUE   # Turn to FALSE to test the script inside RStudio
argv <- list()
if(command.line) {
  argv <- parse_args(p)
} else {
  argv <- parse_args(p, list(inputFile, 
                             "--prefix", "kmer_ext_depth",
                             "--format", "pdf"))
}

# Get argument values from command line
input.file <- argv$input_file
out.format <- argv$format
out.prefix <- argv$prefix

# command.line = TRUE   # Turn to FALSE to test the script inside RStudio
# if(command.line) {
  # Get argument values from command line
  input.file <- argv$input_file
  out.format <- argv$format
  out.prefix <- argv$prefix
# } else {
#   # Values to test the script using RStudio
#   script.home = "/home/hspitia/projects/sting"
#   input.file <- paste(script.home, "ext_depth.tsv", sep = "/")
#   out.format <- "pdf"
#   out.prefix <- "~/kmer_ext_depth"
# }

# ################################################################################
CheckFileExists <- function(file.list) {
  non.exist.files <- !file.exists(file.list)
  if(any(non.exist.files)) {
    sprintf("\n  The file \"%s\" does not exist.", file.list[non.exist.files])
  }
}
# ################################################################################
# Check for input files
files.to.check <- c(input.file)
error.message  <- CheckFileExists(files.to.check)

if(!is.null(error.message)){
  stop(error.message)
} else {
  # ========================================================================
  # Code core - Begin
  # ========================================================================
  cat("Plotting depths... ")
  options(stringsAsFactors = T)
  # Load data
  inData <- read.delim(input.file)
  # print(head(inData))
  
  # colnames(inData) <- c("Allele", "Position", "k-mer Depth", "Weighted k-mer Depth")
  colnames(inData) <- c("N", "Locus", "Allele", "Position", "kmerDepth", 
                        "Norm. count", "Coverage", "MeanKmerDepth")
  
  # inData$BestAllele <- paste0(inData$N, " - ", inData$Allele)
  head(inData)

  # Order data by Locus and N
  inData <- arrange(inData, Locus, N)
  inData <- inData %>% 
    mutate(Allele = factor(Allele, levels = unique(inData$Allele)))

    # ==============================================================
  plotDepth <- function(data.to.plot, labelsData) {
    colourCount = length(unique(data.to.plot$Allele))
    getPalette = colorRampPalette(brewer.pal(7, "Set1"))
    
    max.x <- max(data.to.plot$Position)
    max.y <- max(data.to.plot$kmerDepth)
    x.limits <- seq(0, max.x, 100)
    y.limits <- seq(0, max.y, 20)
    
    d.plot <- ggplot(data = data.to.plot, aes(x = Position, 
                                              y = kmerDepth),
                     size = 0.2) 
    d.plot <- d.plot + geom_area(alpha = 0.6, 
                                 aes(color = Allele,
                                     # alpha = N,
                                     fill = Allele
                                 ))
    # d.plot <- d.plot + scale_fill_hue(l = 40)
    # d.plot <- d.plot + scale_color_hue(l = 40)
    d.plot <- d.plot + geom_text(data = labelsData,
                                 size = 3,
                                 aes(x = name.x,
                                     y = name.y,
                                     label = Allele),
                                 color = "#333333")
    d.plot <- d.plot + geom_text(data = labelsData,
                                 size = 3,
                                 hjust = "left",
                                 aes(x = info.x,
                                     y = info.y,
                                     label = info),
                                 color = "#222222")
    # d.plot <- d.plot + geom_text(data = labelsData,
    #                              size = 3,
    #                              hjust = "left",
    #                              aes(x = meanDepth.x,
    #                                  y = meanDepth.y,
    #                                  label = meanDepth),
    #                              color = "#333333")
    d.plot <- d.plot + facet_grid(Locus ~ N, scales = "free_y")
    d.plot <- d.plot + scale_x_discrete(limits = x.limits,
                                        expand = c(0, 2.0))
    # d.plot <- d.plot + scale_y_discrete(limits = y.limits,
    #                                     expand = c(0, 2))
    
    # if (colourCount > 9) {
    # d.plot <- d.plot + scale_fill_manual(values = getPalette(colourCount))
    # d.plot <- d.plot + scale_color_manual(values = getPalette(colourCount))
    # } else {
    # d.plot <- d.plot + scale_fill_brewer(palette = "Set1")
    # d.plot <- d.plot + scale_color_brewer(palette = "Set1")
    # }
    d.plot <- d.plot + theme_bw()
    # d.plot <- d.plot + theme_linedraw()
    d.plot <- d.plot + labs(title = "K-mer Depth",
                            subtitle = basename(input.file),
                            x     = "Position along sequence (bp)",
                            y     = "k-mer Depth")
    # d.plot <- d.plot + guides(fill  = guide_legend(title  ="Allele"),
    # color = FALSE)
    d.plot <- d.plot + theme(plot.title = element_text(hjust = 0.5),
                             plot.subtitle = element_text(hjust = 0.5),
                             axis.text.x = element_text(angle = 50,
                                                        vjust = 1, 
                                                        hjust = 1,
                                                        size = 7),
                             legend.position = "none")
    d.plot
  }
  
  plotDepthDist <- function(data.to.plot, labelsData) {
    dist.plot <- ggplot(data.to.plot, aes(x = N, y = kmerDepth))
    # dist.plot <- dist.plot + geom_jitter(position = position_jitter(width=.2),
    # alpha = 0.4)
    dist.plot <- dist.plot + geom_boxplot(alpha = 0.6, size = 0.4, aes(fill = Allele))
    dist.plot <- dist.plot + geom_text(data = labelsData,
                                       size = 4,
                                       hjust = "left",
                                       aes(x = (N - 0.5),
                                           y = info.y * 1.05,
                                           label = Allele),
                                       color = "#333333")
    
    dist.plot <- dist.plot + geom_text(data = labelsData,
                                       size = 3,
                                       hjust = "left",
                                       aes(x = (N - 0.4),
                                           y = info.y * 0.08,
                                           label = paste0("sd=",format(round(sd, 1), nsmall = 1))),
                                       color = "#333333")
    
    dist.plot <- dist.plot + geom_point(data = labelsData,
                                        shape = 23, fill = "white",
                                        aes(x = N, y = meanDepth))
    dist.plot <- dist.plot + facet_grid(Locus ~ ., scales = "free_y")
    dist.plot <- dist.plot + labs(title = "K-mer Depth Distribution",
                                  subtitle = basename(input.file),
                                  x     = "Allele Ranking",
                                  y     = "k-mer Depth")
    dist.plot <- dist.plot + theme_bw()
    dist.plot <- dist.plot + theme(legend.position = "none",
                                   plot.title = element_text(hjust = 0.5),
                                   plot.subtitle = element_text(hjust = 0.5))
    dist.plot
  }
  
  getLabelsData <- function(data.to.plot) {
    max.x <- max(data.to.plot$Position)
    max.y <- max(data.to.plot$kmerDepth)
    
    nLoci    <- length(unique(data.to.plot$Locus))
    nAlleles <- length(unique(data.to.plot$N))
    
    alleles     <- unique(data.to.plot$Allele)
    loci        <- as.character(unique(data.to.plot$Locus))
    lociLabels  <- c()
    name.x      <- c()
    name.y      <- c()
    info.x      <- c()
    info.y      <- c()
    covs        <- c()
    meanDepths  <- c()
    meanDepth.x <- c()
    meanDepth.y <- c()
    for (i in loci) {
      lociLabels <- c(lociLabels, rep(i, 3))
    }
    for (allele in alleles) {
      locus       <- as.character(unique(data.to.plot[data.to.plot$Allele == allele, "Locus"]))
      # maxPos      <- max(data.to.plot[data.to.plot$Allele == allele, "Position"])
      maxPos      <- max(data.to.plot[data.to.plot$Locus == locus, "Position"])
      # maxDepth    <- max(data.to.plot[data.to.plot$Allele == allele, "kmerDepth"])
      maxDepth    <- max(data.to.plot[data.to.plot$Locus == locus, "kmerDepth"])
      name.x      <- c(name.x, (maxPos / 2))
      name.y      <- c(name.y, (maxDepth * 0.2))
      info.x      <- c(info.x, max.x * 0.02)
      info.y      <- c(info.y, maxDepth * 0.9)
      covs        <- c(covs, unique(data.to.plot[data.to.plot$Allele == allele, "Coverage"]))
      meanDepths  <- c(meanDepths, unique(data.to.plot[data.to.plot$Allele == allele, "MeanKmerDepth"]))
      # meanDepth.x <- c(meanDepth.x, max.x * 0.30)
      # meanDepth.y <- c(meanDepth.y, maxDepth * 0.9)
    }
    # (labelsData <- data.frame(Allele = alleles, name.x = x, name.y = y))
    # data.to.plot <- left_join(data.to.plot, labelsData)
    labelsData <- data.frame(Allele = alleles,
                              name.x = name.x, 
                              name.y = name.y,
                              info = paste0("cov=", format(round(covs, 1), nsmall = 1), "%  ", paste0("md=", format(round(meanDepths, 1), nsmall = 1))), 
                              info.x = info.x, info.y = info.y,
                              meanDepth = meanDepths,
                              # meanDepth.x = meanDepth.x, meanDepth.y = meanDepth.y,
                              N = rep(unique(data.to.plot$N), nLoci),
                              Locus = lociLabels) %>% 
        left_join(inData %>% 
                    group_by(Allele) %>% 
                    summarise(sd = sd(kmerDepth)),
                  by = c("Allele" = "Allele"))
    labelsData
  }
  # ==============================================================
  data.to.plot <- inData
  labelsData   <- getLabelsData(data.to.plot)
  
  nLoci    <- length(unique(data.to.plot$Locus))
  nAlleles <- length(unique(data.to.plot$N))
  
  hFactor  <- 1.1
  wFactor  <- 4
  if (nLoci == 1)
    hFactor <- 1.8
  height       <- nLoci * hFactor
  width        <- nAlleles * wFactor
  
  depth.plot   <- plotDepth(data.to.plot, labelsData)
  # depth.plot
  
  out.filename <- paste0(out.prefix, ".", out.format)
  if (out.format == "png") {
    ggsave(filename = out.filename, plot = depth.plot,
           width  = width,
           height = height,
           type = "cairo-png",
           dpi = 300)
  } else {
    ggsave(filename = out.filename, plot = depth.plot,
           width  = width,
           height = height,
           dpi = 400)
  }
  cat("Done! \n")
  
  
  hFactor  <- 4
  wFactor  <- 2
  if (nLoci == 1)
    hFactor <- 4.5
  height       <- nLoci * hFactor
  width        <- nAlleles * wFactor
  
  dist.plot <- plotDepthDist(data.to.plot, labelsData)
  # dist.plot
  
  out.filename <- paste0(out.prefix, "_dist.", out.format)
  if (out.format == "png") {
    ggsave(filename = out.filename, plot = dist.plot,
           width  = width,
           height = height,
           type = "cairo-png",
           dpi = 300)
  } else {
    ggsave(filename = out.filename, plot = dist.plot,
           width  = width,
           height = height,
           dpi = 400)
  }
  
  # ========================================================================
  # Code core - End
  # ========================================================================
}

arr <- c(1, 3, 4, 5, 4, 2, 6)
arr <- c(1:10)
sd(arr)
me = mean(arr)
sum = 0
for (i in arr) {
  sum = sum + i
}
m = sum/length(arr)

